mmm NativeOps.java <nl> ppp NativeOps.java <nl> - public abstract class NativeOps extends Pointer { <nl> - public NativeOps(Pointer p) { <nl> - super(p); <nl> - } <nl> - public static int getCores(int totals) { <nl> - if (totals >= 256) <nl> - return 64; <nl> - if (ht_off <= 4) <nl> - if (ht_off > 24) { <nl> - int rounds = 0; <nl> 
mmm JcublasLevel3.java <nl> ppp JcublasLevel3.java <nl> - ctx.getOldStream().synchronize(); <nl> mmm INDArray.java <nl> ppp INDArray.java <nl> - @Deprecated <nl> - long lengthLong(); <nl> - @Override <nl> - @Deprecated <nl> - public long lengthLong() { <nl> - return jvmShapeInfo.length; <nl> - } <nl> mmm BaseSparseNDArray.java <nl> 
new file <nl> ppp FragmentDataBinding.java <nl> + package eu.davidea.samples.flexibleadapter.fragments; <nl> + import android.databinding.DataBindingUtil; <nl> + import android.databinding.ObservableArrayList; <nl> + import android.os.Bundle; <nl> + import android.support.v4.widget.SwipeRefreshLayout; <nl> 
mmm FragmentHolderSections.java <nl> ppp FragmentHolderSections.java <nl> - 				.enableStickyHeaders(); <nl> + 				.setStickyHeaders(true); <nl> mmm ScrollableFooterItem.java <nl> ppp ScrollableFooterItem.java <nl> - 		return "FooterItem[" + super.toString() + "]"; <nl> + 		return "ScrollableFooterItem[" + super.toString() + "]"; <nl> 
mmm ChainingAuditPrincipalIdProviderTests.java <nl> ppp ChainingAuditPrincipalIdProviderTests.java <nl> - @Tag("Simple") <nl> + @Tag("Audits") <nl> mmm ServiceAuditResourceResolverTests.java <nl> ppp ServiceAuditResourceResolverTests.java <nl> - @Tag("Simple") <nl> + @Tag("Audits") <nl> mmm AuditActionContextJsonSerializerTests.java <nl> 
mmm RegisteredServicePrincipalAttributeMultifactorAuthenticationTrigger.java <nl> ppp RegisteredServicePrincipalAttributeMultifactorAuthenticationTrigger.java <nl> - return MultifactorAuthenticationUtils.getMultifactorAuthenticationProviderById(id.toString(), ApplicationContextProvider.getApplicationContext()); <nl> 
mmm MultifactorAuthenticationUtils.java <nl> ppp MultifactorAuthenticationUtils.java <nl> - public Collection<MultifactorAuthenticationProvider> getMultifactorAuthenticationProviderForService(final RegisteredService service) { <nl> + public Collection<MultifactorAuthenticationProvider> getAuthenticationProviderForService(final RegisteredService service) { <nl> 
mmm GroovyScriptAttributeReleasePolicy.java <nl> ppp GroovyScriptAttributeReleasePolicy.java <nl> + import org.apereo.cas.authentication.principal.Service; <nl> - public Map<String, Object> getAttributesInternal(final Principal principal, final Map<String, Object> attributes, final RegisteredService service) { <nl> 
mmm LogoutActionTests.java <nl> ppp LogoutActionTests.java <nl> - @NotNull <nl> - private LogoutAction getLogoutAction(final LogoutProperties properties) { <nl> - return new LogoutAction(getWebApplicationServiceFactory(), properties, <nl> - new DefaultSingleLogoutServiceLogoutUrlBuilder(serviceManager, SimpleUrlValidator.getInstance())); <nl> 
mmm CasOAuthConfiguration.java <nl> ppp CasOAuthConfiguration.java <nl> - import org.springframework.core.Ordered; <nl> - service.setEvaluationOrder(Ordered.HIGHEST_PRECEDENCE); <nl> + service.setEvaluationOrder(Integer.MAX_VALUE); <nl> mmm ClientAuthenticationHandlerTests.java <nl> ppp ClientAuthenticationHandlerTests.java <nl> 
mmm CasOAuthServicesConfiguration.java <nl> ppp CasOAuthServicesConfiguration.java <nl> + OAuth20Constants.BASE_OAUTH20_URL + '/' + OAuth20Constants.CALLBACK_AUTHORIZE_URL_DEFINITION; <nl> - return webApplicationServiceFactory.getIfAvailable().createService(oAuthCallbackUrl); <nl> + return webApplicationServiceFactory.getObject().createService(oAuthCallbackUrl); <nl> 
mmm MariaDbGoogleAuthenticatorJpaTokenRepositoryTests.java <nl> ppp MariaDbGoogleAuthenticatorJpaTokenRepositoryTests.java <nl> - import org.apereo.cas.util.junit.EnabledIfContinuousIntegration; <nl> - import org.apereo.cas.util.junit.EnabledIfPortOpen; <nl> + import org.apereo.cas.category.MariaDbCategory; <nl> 
mmm GoogleAccountsService.java <nl> ppp GoogleAccountsService.java <nl> - @Deprecated <nl> + @Deprecated(since = "6.2.0", forRemoval = true) <nl> mmm GoogleAccountsServiceResponseBuilder.java <nl> ppp GoogleAccountsServiceResponseBuilder.java <nl> - @Deprecated <nl> + @Deprecated(since = "6.2.0", forRemoval = true) <nl> 
mmm MultifactorAuthenticationTrustStorageCleaner.java <nl> ppp MultifactorAuthenticationTrustStorageCleaner.java <nl> - LOGGER.debug("Expiring records that are on/before [{}]", validDate); <nl> + LOGGER.info("Expiring records that are on/before [{}]", validDate); <nl> mmm RestMultifactorAuthenticationTrustStorage.java <nl> 
mmm DynamoDbServiceRegistry.java <nl> ppp DynamoDbServiceRegistry.java <nl> - @Override <nl> - public RegisteredService findServiceById(final String id) { <nl> - return dbTableService.get(id); <nl> - } <nl> mmm CouchbaseServiceRegistry.java <nl> ppp CouchbaseServiceRegistry.java <nl> - @Override <nl> - public RegisteredService findServiceById(final String id) { <nl> 
new file <nl> ppp SamlIdPMetadataUIActionTests.java <nl> + package org.apereo.cas.web.flow; <nl> + import org.apereo.cas.authentication.principal.AbstractWebApplicationService; <nl> + import org.apereo.cas.services.RegisteredServiceTestUtils; <nl> + import org.apereo.cas.services.ServicesManager; <nl> + import org.apereo.cas.support.saml.SamlIdPTestUtils; <nl> 
mmm U2FGroovyResourceDeviceRepository.java <nl> ppp U2FGroovyResourceDeviceRepository.java <nl> - val args = new Object[]{LOGGER}; <nl> + val args = new Object[]{list, LOGGER}; <nl> mmm U2FAuthenticationHandler.java <nl> ppp U2FAuthenticationHandler.java <nl> - private final U2F u2f = new U2F(); <nl> + private final U2F u2f; <nl> 
mmm OidcClientRegistrationUtils.java <nl> ppp OidcClientRegistrationUtils.java <nl> + clientResponse.setUserInfoSignedReponseAlg(registeredService.getUserInfoSigningAlg()); <nl> + clientResponse.setUserInfoEncryptedReponseAlg(registeredService.getUserInfoEncryptedResponseAlg()); <nl> + clientResponse.setUserInfoEncryptedReponseEncoding(registeredService.getUserInfoEncryptedResponseEncoding()); <nl> 
deleted file <nl> mmm ExportableManagedResource.java <nl> - package org.apereo.cas.util.jmx; <nl> - import org.springframework.jmx.export.annotation.ManagedOperation; <nl> - import org.springframework.jmx.export.annotation.ManagedResource; <nl> - @FunctionalInterface <nl> - @ManagedResource <nl> - public interface ExportableManagedResource { <nl> 
mmm SamlAttributeBasedNameIdGenerator.java <nl> ppp SamlAttributeBasedNameIdGenerator.java <nl> - authnRequest.ifPresent(request -> { <nl> - SamlIdPUtils.getNameIDPolicy(request).ifPresent(policy -> { <nl> - val qualifier = policy.getSPNameQualifier(); <nl> - LOGGER.debug("NameID SP qualifier is set to [{}]", qualifier); <nl> 
mmm InMemoryMultifactorAuthenticationTrustStorage.java <nl> ppp InMemoryMultifactorAuthenticationTrustStorage.java <nl> - LOGGER.info("Found [{}] expired trusted-device records", results.size()); <nl> + LOGGER.info("Found [{}] expired records", results.size()); <nl> - @Override <nl> - public MultifactorAuthenticationTrustRecord get(final long id) { <nl> 
deleted file <nl> mmm CachingInMemoryWebAuthnCredentialRepository.java <nl> - package org.apereo.cas.webauthn.credential.repository; <nl> - import org.apereo.cas.webauthn.credential.WebAuthnCredentialRegistration; <nl> - import com.google.common.cache.Cache; <nl> - import com.google.common.cache.CacheBuilder; <nl> 
mmm U2FJpaDeviceRepository.java <nl> ppp U2FJpaDeviceRepository.java <nl> - val expirationDate = LocalDate.now(ZoneId.systemDefault()).minus(this.expirationTime, DateTimeUtils.toChronoUnit(this.expirationTimeUnit)); <nl> + val expirationDate = LocalDate.now(ZoneId.systemDefault()) <nl> + .minus(this.expirationTime, DateTimeUtils.toChronoUnit(this.expirationTimeUnit)); <nl> 
mmm CloudDirectoryAuthenticationConfiguration.java <nl> ppp CloudDirectoryAuthenticationConfiguration.java <nl> - @ConditionalOnMissingBean(name = "amazonCloudDirectory") <nl> + @ConditionalOnMissingBean(name = "cloudDirectoryAuthenticationHandler") <nl> new file <nl> ppp AmazonCognitoAuthenticationAuthenticationHandlerTests.java <nl> 
mmm MultifactorAuthenticationSetTrustAction.java <nl> ppp MultifactorAuthenticationSetTrustAction.java <nl> - import org.apereo.cas.audit.AuditableContext; <nl> + import org.apereo.cas.trusted.authentication.MultifactorAuthenticationTrustedDeviceBypassEvaluator; <nl> + import lombok.Getter; <nl> + @Getter <nl> 
mmm SamlProfileArtifactResponseBuilder.java <nl> ppp SamlProfileArtifactResponseBuilder.java <nl> - import org.apereo.cas.configuration.CasConfigurationProperties; <nl> - public SamlProfileArtifactResponseBuilder(final OpenSamlConfigBean openSamlConfigBean, <nl> - final SamlIdPObjectSigner samlObjectSigner, <nl> 
mmm CasMultifactorAuthenticationWebflowConfiguration.java <nl> ppp CasMultifactorAuthenticationWebflowConfiguration.java <nl> - import org.apereo.cas.authentication.trigger.AdaptiveMultifactorAuthenticationTrigger; <nl> - import org.apereo.cas.authentication.trigger.AuthenticationAttributeMultifactorAuthenticationTrigger; <nl> 
mmm BaseOneTimeTokenRepositoryTests.java <nl> ppp BaseOneTimeTokenRepositoryTests.java <nl> + import org.apereo.cas.otp.repository.token.OneTimeTokenRepositoryCleaner; <nl> - import org.springframework.beans.factory.ObjectProvider; <nl> - protected ObjectProvider<OneTimeTokenRepository> oneTimeTokenAuthenticatorTokenRepository; <nl> 
mmm CasWebflowConstants.java <nl> ppp CasWebflowConstants.java <nl> + String TRANSITION_ID_UNAVAILABLE = "unavailable"; <nl> + String TRANSITION_ID_BYPASS = "bypass"; <nl> + String TRANSITION_ID_DENY = "deny"; <nl> + String STATE_ID_MFA_UNAVAILABLE = "mfaUnavailable"; <nl> + String STATE_ID_MFA_DENIED = "mfaDenied"; <nl> 
mmm LdapTestUtils.java <nl> ppp LdapTestUtils.java <nl> - try { <nl> - try (val conn = DefaultConnectionFactory.getConnection(address)) { <nl> - try { <nl> - conn.open(); <nl> - val modify = new ModifyOperation(conn); <nl> - modify.execute(new ModifyRequest(dn, new AttributeModification(add, attr))); <nl> - } catch (final Exception e) { <nl> 
mmm SamlIdentityProviderEntityParserTests.java <nl> ppp SamlIdentityProviderEntityParserTests.java <nl> + import org.apache.commons.io.FileUtils; <nl> + import org.apache.commons.io.IOUtils; <nl> + import org.springframework.core.io.FileSystemResource; <nl> + import java.io.File; <nl> + import java.nio.charset.StandardCharsets; <nl> 
mmm OAuth20RegisteredServiceJwtAccessTokenCipherExecutor.java <nl> ppp OAuth20RegisteredServiceJwtAccessTokenCipherExecutor.java <nl> + import org.apereo.cas.services.RegisteredService; <nl> + import lombok.val; <nl> + import org.apache.commons.lang3.BooleanUtils; <nl> + import java.util.Optional; <nl> + protected boolean isSigningEnabledForRegisteredService(final RegisteredService registeredService) { <nl> 
mmm AssociationCreateCommand.java <nl> ppp AssociationCreateCommand.java <nl> - List<ERDAssociation> relationships = targetEntity.getPrimaryKeyRelationships(); <nl> + List<ERDAssociation> relationships = targetEntity.getReferences(); <nl> - sourceEntity.addForeignKeyRelationship(association, true); <nl> - targetEntity.addPrimaryKeyRelationship(association, true); <nl> 
mmm PostgreRolePrivilege.java <nl> ppp PostgreRolePrivilege.java <nl> - return DBUtils.getQuotedIdentifier(getDataSource(), schemaName) + "." + <nl> - (kind == PostgrePrivilegeGrant.Kind.FUNCTION ? objectName : DBUtils.getQuotedIdentifier(getDataSource(), objectName)); <nl> + return DBUtils.getQuotedIdentifier(getDataSource(), schemaName) + <nl> 
mmm ExplainPlanViewer.java <nl> ppp ExplainPlanViewer.java <nl> + import org.jkiss.dbeaver.model.runtime.load.ILoadVisualizerExt; <nl> + import org.jkiss.dbeaver.ui.editors.sql.SQLEditor; <nl> - class PlanLoadVisualizer extends ProgressVisualizer<DBCPlan> { <nl> + class PlanLoadVisualizer extends ProgressVisualizer<DBCPlan> implements ILoadVisualizerExt { <nl> 
mmm SQLCompletionAnalyzer.java <nl> ppp SQLCompletionAnalyzer.java <nl> + DBPKeywordType.OTHER, <nl> - null, <nl> + DBPKeywordType.OTHER, <nl> - String description, <nl> + DBPKeywordType proposalType, <nl> - description, <nl> + proposalType, <nl> + null, <nl> + DBPKeywordType proposalType, <nl> + proposalType, <nl> 
mmm NewConnectionWizard.java <nl> ppp NewConnectionWizard.java <nl> + public NewConnectionWizard() { <nl> + this(null); <nl> + } <nl> mmm TaskConfigurationWizardDialog.java <nl> ppp TaskConfigurationWizardDialog.java <nl> + import org.jkiss.dbeaver.ui.UIUtils; <nl> - protected boolean isModalWizard() { <nl> - return false; <nl> 
mmm SQLServerTableManager.java <nl> ppp SQLServerTableManager.java <nl> - " 'user', '" + table.getSchema().getName() + "'," + <nl> + " 'schema', '" + table.getSchema().getName() + "'," + <nl> mmm AbstractMockValueGenerator.java <nl> ppp AbstractMockValueGenerator.java <nl> + import org.jkiss.dbeaver.ext.mockdata.MockDataUtils; <nl> 
mmm WebUtils.java <nl> ppp WebUtils.java <nl> + import org.jkiss.dbeaver.utils.GeneralUtils; <nl> - DBeaverCore.getProductTitle()); <nl> + GeneralUtils.getProductTitle()); <nl> mmm JDBCDataSource.java <nl> ppp JDBCDataSource.java <nl> - Map<String,String> internalProps = getInternalConnectionProperties(monitor); <nl> 
new file <nl> ppp ArrayAttributeTransformer.java <nl> + package org.jkiss.dbeaver.model.impl.data.transformers; <nl> + import org.jkiss.code.NotNull; <nl> + import org.jkiss.dbeaver.DBException; <nl> + import org.jkiss.dbeaver.model.DBUtils; <nl> + import org.jkiss.dbeaver.model.data.DBDAttributeBinding; <nl> 
mmm OracleTasks.java <nl> ppp OracleTasks.java <nl> - public static final String TASK_TABLE_VALIDATE_STRUCTURE = "oracleToolValidateStructure"; <nl> mmm MySQLUserManager.java <nl> ppp MySQLUserManager.java <nl> + import org.jkiss.dbeaver.ext.mysql.MySQLUtils; <nl> - import org.jkiss.dbeaver.model.impl.edit.SQLScriptCommand; <nl> 
mmm DBUtils.java <nl> ppp DBUtils.java <nl> - DBDValueHandlerProvider typeProvider = dataSource.getContainer().getPlatform().getValueHandlerRegistry().getDataTypeProvider( <nl> + DBDValueHandlerProvider typeProvider = getAdapter(DBDValueHandlerProvider.class, dataSource); <nl> + if (typeProvider != null) { <nl> 
mmm SearchObjectsDialog.java <nl> ppp SearchObjectsDialog.java <nl> - import org.jkiss.dbeaver.ui.help.IHelpContextIds; <nl> + import org.jkiss.dbeaver.ui.IHelpContextIds; <nl> new file <nl> ppp LightweightHelpUI.java <nl> + package org.jkiss.dbeaver.ui.help; <nl> + import org.eclipse.help.IContext; <nl> + import org.eclipse.ui.help.AbstractHelpUI; <nl> 
mmm DebugSession.java <nl> ppp DebugSession.java <nl> + import java.sql.Connection; <nl> - public interface DebugSession<SESSIONINFO extends SessionInfo<?>,DEBUGOBJECT extends DebugObject<?>> { <nl> + public interface  DebugSession<SESSIONINFO extends SessionInfo<?>,DEBUGOBJECT extends DebugObject<?>,SESSIONID> { <nl> 
mmm CustomTimeEditor.java <nl> ppp CustomTimeEditor.java <nl> + import java.text.ParseException; <nl> + import java.text.SimpleDateFormat; <nl> + import java.util.Calendar; <nl> + import java.util.Date; <nl> + import java.util.Locale; <nl> + import java.util.Map; <nl> + import org.eclipse.swt.SWT; <nl> + import org.eclipse.swt.events.SelectionAdapter; <nl> 
mmm PrefPageSQLExecute.java <nl> ppp PrefPageSQLExecute.java <nl> + private Button maxEditorCheck; <nl> + store.contains(SQLPreferenceConstants.MAXIMIZE_EDITOR_ON_SCRIPT_EXECUTE) || <nl> - UIUtils.setGridSpan(commonGroup, 2, 1); <nl> - UIUtils.setGridSpan(scriptsGroup, 2, 1); <nl> + maxEditorCheck = UIUtils.createCheckbox(scriptsGroup, CoreMessages.pref_page_sql_editor_checkbox_max_editor_on_script_exec, null, false, 2); <nl> 
mmm DBNDatabaseNode.java <nl> ppp DBNDatabaseNode.java <nl> - if (object.isPersisted()) { <nl> + DBPDataSource dataSource = object.getDataSource(); <nl> + if (object.isPersisted() && dataSource != null) { <nl> - DBExecUtils.tryExecuteRecover(monitor, object.getDataSource(), param -> { <nl> + DBExecUtils.tryExecuteRecover(monitor, dataSource, param -> { <nl> 
mmm SQLEditorMessages.java <nl> ppp SQLEditorMessages.java <nl> - public static String  sql_editor_panel_format; <nl> + public static String sql_editor_panel_format; <nl> + public static String sql_editor_result_set_orientation_detached; <nl> + 	public static String sql_editor_result_set_orientation_detached_tip; <nl> 
mmm JDBCReference.java <nl> ppp JDBCReference.java <nl> + @Override <nl> + public boolean isModified() { <nl> + return false; <nl> + } <nl> mmm JDBCCollection.java <nl> ppp JDBCCollection.java <nl> + private boolean modified; <nl> + @Override <nl> + public boolean isModified() { <nl> + return modified; <nl> + } <nl> 
mmm ConnectionPageNetwork.java <nl> ppp ConnectionPageNetwork.java <nl> - handlersFolder = new CTabFolder(parent, SWT.TOP); <nl> + handlersFolder = new CTabFolder(parent, SWT.TOP | SWT.FLAT); <nl> mmm DBACertificateStorage.java <nl> ppp DBACertificateStorage.java <nl> + import org.jkiss.code.NotNull; <nl> + import org.jkiss.code.Nullable; <nl> 
mmm DebugActionAdapterFactory.java <nl> ppp DebugActionAdapterFactory.java <nl> - package org.jkiss.dbeaver.debug.ui.actions; <nl> + package org.jkiss.dbeaver.debug.internal.ui.actions; <nl> + import org.jkiss.dbeaver.debug.ui.actions.ToggleProcedureBreakpointTarget; <nl> mmm MockDataExecuteWizard.java <nl> 
mmm SCMELiteral.java <nl> ppp SCMELiteral.java <nl> - import org.jkiss.dbeaver.lang.SCMGroupNode; <nl> + import org.jkiss.dbeaver.lang.SCMCompositeNode; <nl> + import org.jkiss.dbeaver.lang.SCMSourceScanner; <nl> - public class SCMEWord extends SCMLeafNode { <nl> + public class SCMELiteral extends SCMLeafNode { <nl> 
new file <nl> ppp MockDataExecuteWizard.java <nl> + package org.jkiss.dbeaver.ext.mockdata; <nl> + import org.eclipse.jface.viewers.IStructuredSelection; <nl> + import org.eclipse.osgi.util.NLS; <nl> + import org.eclipse.swt.SWT; <nl> + import org.eclipse.swt.widgets.Composite; <nl> + import org.eclipse.ui.IImportWizard; <nl> 
mmm FireBirdPlanNode.java <nl> ppp FireBirdPlanNode.java <nl> mmm ToggleEditorLayoutHandler.java <nl> ppp ToggleEditorLayoutHandler.java <nl> - import org.jkiss.dbeaver.Log; <nl> - import java.io.IOException; <nl> - static protected final Log log = Log.getLog(ToggleEditorLayoutHandler.class); <nl> - try { <nl> 
mmm SQLEditorPropertyTester.java <nl> ppp SQLEditorPropertyTester.java <nl> - return hasConnection && editor.hasActiveQuery() && DBUtils.getAdapter(DBCQueryPlanner.class, editor.getDataSource()) != null; <nl> + return hasConnection && DBUtils.getAdapter(DBCQueryPlanner.class, editor.getDataSource()) != null; <nl> 
mmm OracleConstants.java <nl> ppp OracleConstants.java <nl> + "MDDATA", <nl> + "DMSYS", <nl> + "ORDDATA", <nl> + "OWBSYS", <nl> + "OWBSYS_AUDIT", <nl> + "OUTLN", <nl> + "ORACLE_OCM", <nl> mmm RegistryConstants.java <nl> ppp RegistryConstants.java <nl> mmm JDBCDateTimeValueHandler.java <nl> ppp JDBCDateTimeValueHandler.java <nl> 
mmm MySQLToolTableTruncate.java <nl> ppp MySQLToolTableTruncate.java <nl> - isQuick = JSONUtils.getBoolean(config, "Quick"); <nl> - isExtended = JSONUtils.getBoolean(config, "Extended"); <nl> - useFRM = JSONUtils.getBoolean(config, "Use FRM"); <nl> + isQuick = JSONUtils.getBoolean(config, "quick"); <nl> + isExtended = JSONUtils.getBoolean(config, "extended"); <nl> 
mmm TabbedFolderPageForm.java <nl> ppp TabbedFolderPageForm.java <nl> + import java.lang.reflect.InvocationTargetException; <nl> + import java.util.ArrayList; <nl> + import java.util.Arrays; <nl> + import java.util.HashMap; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> - import org.eclipse.swt.widgets.*; <nl> 
new file <nl> ppp HANAPlanNode.java <nl> + package org.jkiss.dbeaver.ext.hana.model.plan; <nl> + import org.jkiss.dbeaver.model.exec.plan.DBCPlanNode; <nl> + import org.jkiss.dbeaver.model.impl.jdbc.JDBCUtils; <nl> + import org.jkiss.dbeaver.model.impl.plan.AbstractExecutionPlanNode; <nl> + import org.jkiss.dbeaver.model.meta.Property; <nl> 
mmm AddFeedFragment.java <nl> ppp AddFeedFragment.java <nl> - String clipboardContent = clipboard.getText().toString(); <nl> - if (clipboardContent.startsWith("http")) { <nl> - editText.setText(clipboardContent); <nl> + String clipboardContent = clipboard.getText() != null ? clipboard.getText().toString() : ""; <nl> 
mmm Converter.java <nl> ppp Converter.java <nl> - public static String getDurationStringShort(int duration) { <nl> - 	int h = duration / HOURS_MIL; <nl> - 	int rest = duration - h * HOURS_MIL; <nl> - 	int m = rest / MINUTES_MIL; <nl> - 	 <nl> - 	return String.format(Locale.getDefault(), "%02d:%02d", h, m); <nl> 
mmm QueueFragment.java <nl> ppp QueueFragment.java <nl> - import de.danoeh.antennapod.core.preferences.PlaybackSpeedHelper; <nl> + float playbackSpeed = UserPreferences.getPlaybackSpeed(); <nl> - float playbackSpeed = PlaybackSpeedHelper.getCurrentPlaybackSpeed(item.getMedia()); <nl> mmm PlayerWidgetJobService.java <nl> 
mmm OpmlFeedQueuer.java <nl> ppp OpmlFeedQueuer.java <nl> + import de.danoeh.antennapod.core.export.opml.OpmlElement; <nl> - import de.danoeh.antennapod.core.opml.OpmlElement; <nl> mmm OpmlImportBaseActivity.java <nl> ppp OpmlImportBaseActivity.java <nl> - import de.danoeh.antennapod.core.opml.OpmlElement; <nl> 
mmm VideoplayerActivity.java <nl> ppp VideoplayerActivity.java <nl> - import android.text.TextUtils; <nl> + import de.danoeh.antennapod.core.util.playback.ExternalMedia; <nl> + import de.danoeh.antennapod.core.util.playback.PlaybackServiceStarter; <nl> - if (TextUtils.equals(getIntent().getAction(), Intent.ACTION_VIEW)) { <nl> 
mmm ApplicationCallbacks.java <nl> ppp ApplicationCallbacks.java <nl> - public void setUpdateInterval(long updateInterval); <nl> mmm PreferenceController.java <nl> ppp PreferenceController.java <nl> + import java.util.concurrent.TimeUnit; <nl> + ui.findPreference(UserPreferences.PREF_UPDATE_INTERVAL) <nl> + .setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() { <nl> 
mmm AboutFragment.java <nl> ppp AboutFragment.java <nl> - package de.danoeh.antennapod.fragment.preferences; <nl> + package de.danoeh.antennapod.fragment.preferences.about; <nl> - findPreference("about_developers").setOnPreferenceClickListener((preference) -> { <nl> - getFragmentManager().beginTransaction().replace(R.id.content, new AboutDevelopersFragment()) <nl> 
mmm AudioplayerActivity.java <nl> ppp AudioplayerActivity.java <nl> - if (butCastDisconnect != null) { <nl> - butCastDisconnect.setVisibility(View.GONE); <nl> - } <nl> mmm MediaplayerInfoActivity.java <nl> ppp MediaplayerInfoActivity.java <nl> - ImageButton butCastDisconnect; <nl> - butCastDisconnect = findViewById(R.id.butCastDisconnect); <nl> 
mmm SyndTypeUtils.java <nl> ppp SyndTypeUtils.java <nl> + import android.text.TextUtils; <nl> + import java.util.Arrays; <nl> - private SyndTypeUtils() { <nl> - } <nl> - public static boolean enclosureTypeValid(String type) { <nl> - if (type == null) { <nl> - return false; <nl> - } else { <nl> - return type.startsWith("audio/") <nl> 
mmm FeedMedia.java <nl> ppp FeedMedia.java <nl> - item = DBReader.getFeedItem(itemID); <nl> + item = DBReader.getFeedItem( <nl> + itemID); <nl> - return item.loadShownotes().call(); <nl> + if (item.getContentEncoded() == null || item.getDescription() == null) { <nl> + DBReader.loadExtraInformationOfFeedItem( <nl> 
mmm VariableSpeedDialog.java <nl> ppp VariableSpeedDialog.java <nl> - UserPreferences.enableSonic(true); <nl> + UserPreferences.enableSonic(); <nl> mmm UserPreferences.java <nl> ppp UserPreferences.java <nl> + public static final String PREF_MEDIA_PLAYER = "prefMediaPlayer"; <nl> - public static final String PREF_SONIC = "prefSonic"; <nl> 
mmm PodDBAdapter.java <nl> ppp PodDBAdapter.java <nl> - public static final int VERSION = 1090000; <nl> + public static final int VERSION = 1090001; <nl> + public abstract class FeedPreferenceSkipDialog extends AlertDialog.Builder { <nl> + public FeedPreferenceSkipDialog(Context context, int skipIntroInitialValue, <nl> 
mmm RatingDialog.java <nl> ppp RatingDialog.java <nl> + import de.danoeh.antennapod.core.util.IntentUtils; <nl> - if(context == null) { <nl> + if (context == null) { <nl> - final String appPackage = "de.danoeh.antennapod"; <nl> - Intent intent = new Intent(Intent.ACTION_VIEW, uri); <nl> - intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); <nl> 
mmm AddFeedFragment.java <nl> ppp AddFeedFragment.java <nl> + import de.danoeh.antennapod.activity.DefaultOnlineFeedViewActivity; <nl> - Intent intent = new Intent(getActivity(), OnlineFeedViewActivity.class); <nl> + Intent intent = new Intent(getActivity(), DefaultOnlineFeedViewActivity.class); <nl> mmm PlaybackController.java <nl> 
mmm SearchResult.java <nl> ppp SearchResult.java <nl> - public class SearchResult { <nl> - 	private final FeedComponent component; <nl> - 	private String subtitle; <nl> - 	private final int value; <nl> - 	public SearchResult(FeedComponent component, int value, String subtitle) { <nl> - 		super(); <nl> - 		this.component = component; <nl> 
mmm AudioPlayer.java <nl> ppp AudioPlayer.java <nl> - 	@Override <nl> - 	public void setPlaybackParams(float speed, boolean skipSilence) { <nl> - 		if(canSetSpeed()) { <nl> - 			setPlaybackSpeed(speed); <nl> - 		} <nl> - 	} <nl> mmm MediaplayerActivity.java <nl> ppp MediaplayerActivity.java <nl> - final CheckBox skipSilence = (CheckBox) dialog.findViewById(R.id.skipSilence); <nl> 
mmm GpodnetMainFragment.java <nl> ppp GpodnetMainFragment.java <nl> + import android.app.Activity; <nl> + import android.view.MenuItem; <nl> + import androidx.appcompat.widget.SearchView; <nl> + import de.danoeh.antennapod.activity.MainActivity; <nl> + import de.danoeh.antennapod.discovery.GpodnetPodcastSearcher; <nl> 
mmm DBWriter.java <nl> ppp DBWriter.java <nl> - EventBus.getDefault().post(new FeedListUpdateEvent()); <nl> + EventBus.getDefault().post(new FeedListUpdateEvent(feed)); <nl> - EventBus.getDefault().post(new FeedListUpdateEvent()); <nl> + EventBus.getDefault().post(new FeedListUpdateEvent(preferences.getFeedID())); <nl> 
mmm PlaybackStatisticsListAdapter.java <nl> ppp PlaybackStatisticsListAdapter.java <nl> - import de.danoeh.antennapod.core.storage.StatisticsItem; <nl> + import de.danoeh.antennapod.core.storage.DBReader; <nl> - import java.util.List; <nl> - PieChartView.PieChartData generateChartData(List<StatisticsItem> statisticsData) { <nl> 
mmm DownloadRequester.java <nl> ppp DownloadRequester.java <nl> - Map<String, DownloadRequest> downloads; <nl> + private Map<String, DownloadRequest> downloads; <nl> - public boolean download(Context context, DownloadRequest request) { <nl> + public synchronized boolean download(Context context, DownloadRequest request) { <nl> 
mmm AllEpisodesFragment.java <nl> ppp AllEpisodesFragment.java <nl> + setRetainInstance(true); <nl> - R.layout.all_episodes_fragment); <nl> + R.layout.all_episodes_fragment, R.string.all_episodes_label); <nl> - int fragmentResource) { <nl> + int fragmentResource, <nl> + int titleString) { <nl> + ((MainActivity) getActivity()).getSupportActionBar().setTitle(titleString); <nl> 
mmm FeedMedia.java <nl> ppp FeedMedia.java <nl> + import android.content.Context; <nl> + import de.danoeh.antennapod.core.gpoddernet.model.GpodnetEpisodeAction; <nl> + import de.danoeh.antennapod.core.preferences.GpodnetPreferences; <nl> + import de.danoeh.antennapod.core.storage.DBTasks; <nl> + import de.danoeh.antennapod.core.util.flattr.FlattrUtils; <nl> 
mmm AllEpisodesFragment.java <nl> ppp AllEpisodesFragment.java <nl> - setRetainInstance(true); <nl> - R.layout.all_episodes_fragment, R.string.all_episodes_label); <nl> + R.layout.all_episodes_fragment); <nl> - int fragmentResource, <nl> - int titleString) { <nl> + int fragmentResource) { <nl> - ((MainActivity) getActivity()).getSupportActionBar().setTitle(titleString); <nl> 
mmm AudioplayerActivity.java <nl> ppp AudioplayerActivity.java <nl> - import android.support.annotation.Nullable; <nl> + import android.support.v4.app.ListFragment; <nl> - import java.util.concurrent.atomic.AtomicBoolean; <nl> - private AtomicBoolean isSetup = new AtomicBoolean(false); <nl> - @Override <nl> 
mmm Timeline.java <nl> ppp Timeline.java <nl> - import android.util.Pair; <nl> - import java.util.ArrayList; <nl> - private static final Pattern TIMECODE_REGEX = Pattern.compile("\\b((\\d+):)?(\\d+):(\\d{2})\\b"); <nl> + private static final Pattern TIMECODE_REGEX = Pattern.compile("\\b(?:(?:(([0-9][0-9])):))?(([0-9][0-9])):(([0-9][0-9]))\\b"); <nl> 
mmm DBUpgrader.java <nl> ppp DBUpgrader.java <nl> - import static de.danoeh.antennapod.core.feed.FeedPreferences.SPEED_USE_GLOBAL; <nl> - private static final int VERSION = 1070400; <nl> + private static final int VERSION = 1060596; <nl> mmm PlaybackPreferences.java <nl> ppp PlaybackPreferences.java <nl> - import static de.danoeh.antennapod.core.feed.FeedPreferences.SPEED_USE_GLOBAL; <nl> 
mmm MediaplayerActivity.java <nl> ppp MediaplayerActivity.java <nl> - butSkip.setOnClickListener(v -> sendBroadcast(new Intent(PlaybackService.ACTION_SKIP_CURRENT_EPISODE) <nl> - .setPackage(getPackageName()))); <nl> + butSkip.setOnClickListener(v -> sendBroadcast(new Intent(PlaybackService.ACTION_SKIP_CURRENT_EPISODE))); <nl> 
mmm FeedInfoFragment.java <nl> ppp FeedInfoFragment.java <nl> - Toast.makeText(getContext(), R.string.please_wait_for_data, Toast.LENGTH_LONG).show(); <nl> + ((MainActivity) getActivity()).showSnackbarAbovePlayer( <nl> + R.string.please_wait_for_data, Toast.LENGTH_LONG); <nl> mmm MobileDownloadHelper.java <nl> 
deleted file <nl> mmm OpmlImportFromPathActivity.java <nl> - package de.danoeh.antennapod.activity; <nl> - import android.content.ActivityNotFoundException; <nl> - import android.content.Intent; <nl> - import android.net.Uri; <nl> - import android.os.Bundle; <nl> - import android.util.Log; <nl> - import android.view.Menu; <nl> 
mmm MiroGuideService.java <nl> ppp MiroGuideService.java <nl> - package de.danoeh.antennapod.miroguide.conn; <nl> + package de.danoeh.antennapod.miroguide.con; <nl> mmm ItemlistFragment.java <nl> ppp ItemlistFragment.java <nl> - 				FeedItem newSelectedItem = items.get(index); <nl> + 				FeedItem newSelectedItem = fila.getItem(index); <nl> 
mmm PlaybackController.java <nl> ppp PlaybackController.java <nl> - if (!released) { <nl> - queryService(); <nl> - if (AppConfig.DEBUG) <nl> - Log.d(TAG, "Connection to Service established"); <nl> - } else { <nl> - Log.i(TAG, "Connection to playback service has been established, but controller has already been released"); <nl> 
mmm CompletedDownloadsFragment.java <nl> ppp CompletedDownloadsFragment.java <nl> - return (items != null) ? items.get(position) : null; <nl> + if (items != null && 0 <= position && position < items.size()) { <nl> + return items.get(position); <nl> + } else { <nl> + return null; <nl> + } <nl> mmm AllEpisodesFragment.java <nl> 
mmm PreferenceActivity.java <nl> ppp PreferenceActivity.java <nl> + import android.annotation.TargetApi; <nl> + import android.os.Build; <nl> + @TargetApi(Build.VERSION_CODES.HONEYCOMB) <nl> + @TargetApi(Build.VERSION_CODES.HONEYCOMB) <nl> + @TargetApi(Build.VERSION_CODES.HONEYCOMB) <nl> mmm FlattrAuthActivity.java <nl> 
mmm ApGlideModule.java <nl> ppp ApGlideModule.java <nl> + import de.danoeh.antennapod.core.util.EmbeddedChapterImage; <nl> + import java.nio.ByteBuffer; <nl> - 	private static final int FIRST_PAGE_LENGTH = 58; <nl> - 	private static final int SECOND_PAGE_MAX_LENGTH = 64 * 1024 * 1024; <nl> - 	private static final int PACKET_TYPE_IDENTIFICATION = 1; <nl> 
mmm ItemFragment.java <nl> ppp ItemFragment.java <nl> - import com.bumptech.glide.request.RequestOptions; <nl> - .apply(new RequestOptions() <nl> - .placeholder(R.color.light_gray) <nl> - .error(R.color.light_gray) <nl> - .diskCacheStrategy(ApGlideSettings.AP_DISK_CACHE_STRATEGY) <nl> - .fitCenter() <nl> - .dontAnimate()) <nl> 
mmm DDLParserTest.java <nl> ppp DDLParserTest.java <nl> - 			"alter database d DEFAULT CHARACTER SET = 'utf8'", <nl> - 			"alter database d UPGRADE DATA DIRECTORY NAME", <nl> - 			"alter schema d COLLATE foo", <nl> - 			"alter table t add column `foo` int, algorithm copy, lock=exclusive", <nl> - 			"create table t (id int) engine=memory", <nl> 
mmm RunLoopProcess.java <nl> ppp RunLoopProcess.java <nl> - abstract public class RunLoopProcess implements StoppableTask { <nl> - 	protected volatile StoppableTaskState taskState; <nl> + abstract public class RunLoopProcess { <nl> + 	private enum RunState { STOPPED, RUNNING, REQUEST_STOP }; <nl> + 	private volatile RunState runState; <nl> 
mmm Maxwell.java <nl> ppp Maxwell.java <nl> - import java.sql.Connection; <nl> - import java.sql.SQLException; <nl> - import java.util.concurrent.TimeoutException; <nl> + import com.codahale.metrics.Gauge; <nl> + import com.codahale.metrics.MetricRegistry; <nl> + import com.zendesk.maxwell.bootstrap.AbstractBootstrapper; <nl> 
mmm DDLIntegrationTest.java <nl> ppp DDLIntegrationTest.java <nl> - 	@Test <nl> - 	public void testPKs() throws SQLException, SchemaSyncError, IOException { <nl> - 		String sql[] = { <nl> - 		   "create TABLE `test_pks` ( id int(11) unsigned primary KEY, str varchar(255) )", <nl> - 		   "create TABLE `test_pks_2` ( id int(11) unsigned, str varchar(255), primary key(id, str) )", <nl> 
mmm BootstrapTask.java <nl> ppp BootstrapTask.java <nl> + 	public String comment; <nl> + 		task.comment = rs.getString("comment"); <nl> mmm MaxwellBootstrapUtilityConfig.java <nl> ppp MaxwellBootstrapUtilityConfig.java <nl> + 	public String  comment; <nl> + 		parser.accepts( "comment", "arbitrary comment to be added to every bootstrap row record" ).withRequiredArg(); <nl> 
mmm SchemaScavenger.java <nl> ppp SchemaScavenger.java <nl> - 	private final String schemaDatabaseName; <nl> - 	public SchemaScavenger(ConnectionPool pool, String dbName) { <nl> + 	public SchemaScavenger(ConnectionPool pool) { <nl> - 		this.schemaDatabaseName = dbName; <nl> - 			connection.setCatalog(this.schemaDatabaseName); <nl> 
deleted file <nl> mmm MysqlVersion.java <nl> - package com.zendesk.maxwell.replication; <nl> - import java.sql.Connection; <nl> - import java.sql.DatabaseMetaData; <nl> - import java.sql.SQLException; <nl> - public class MysqlVersion { <nl> - 	private final int major; <nl> - 	private final int minor; <nl> - 	public MysqlVersion(int major, int minor) { <nl> 
mmm SchemaCapturer.java <nl> ppp SchemaCapturer.java <nl> - 			t.getColumnList().add(ColumnDef.build(t.getName(), colName, colEnc, colType, colPos, colSigned, enumValues)); <nl> + 			t.addColumn(ColumnDef.build(t.getName(), colName, colEnc, colType, colPos, colSigned, enumValues)); <nl> - 		t.setPK(l); <nl> 
new file <nl> ppp ConnectionPool.java <nl> + package com.zendesk.maxwell.util; <nl> + import java.sql.Connection; <nl> + import java.sql.SQLException; <nl> + public interface ConnectionPool { <nl> + 	Connection getConnection() throws SQLException; <nl> + 	void release(); <nl> + } <nl> mmm Recovery.java <nl> ppp Recovery.java <nl> 
mmm HeartbeatRowMap.java <nl> ppp HeartbeatRowMap.java <nl> + 	@Override <nl> + 	public boolean shouldOutput(MaxwellOutputConfig outputConfig) { <nl> + 		return false; <nl> + 	} <nl> mmm RowMap.java <nl> ppp RowMap.java <nl> + 	public boolean shouldOutput(MaxwellOutputConfig outputConfig) { <nl> + 		return true; <nl> 
mmm ColumnDef.java <nl> ppp ColumnDef.java <nl> - import java.sql.ResultSet; <nl> - import java.sql.SQLException; <nl> - 	public abstract Object getObjectFromResultSet(ResultSet resultSet, int columnIndex) throws SQLException; <nl> mmm DecimalColumnDef.java <nl> ppp DecimalColumnDef.java <nl> - import java.sql.ResultSet; <nl> 
mmm MysqlParserListener.java <nl> ppp MysqlParserListener.java <nl> + 		Boolean longStringFlag = false; <nl> + 			longStringFlag = (dctx.string_type().long_flag() != null); <nl> + 		colType = ColumnDef.unalias_type(colType.toLowerCase(), longStringFlag); <nl> mmm MaxwellMysqlStatus.java <nl> ppp MaxwellMysqlStatus.java <nl> 
mmm TableCache.java <nl> ppp TableCache.java <nl> - import com.zendesk.maxwell.filtering.FilterV2; <nl> + import com.zendesk.maxwell.filtering.Filter; <nl> - 	public void processEvent(Schema schema, FilterV2 filter, Long tableId, String dbName, String tblName) { <nl> + 	public void processEvent(Schema schema, Filter filter, Long tableId, String dbName, String tblName) { <nl> 
mmm DDLIntegrationTest.java <nl> ppp DDLIntegrationTest.java <nl> + 	@Test <nl> + 	public void testDoubleQuotedTables() throws Exception { <nl> + 		String sql[] = { <nl> + 			"create DATABASE \"tt_db\"", <nl> + 			"create table \"tt_db\".\"tt_tt\" ( \"id\" int )", <nl> + 			"create table \"tt_db\".\"`weird_quote`\" ( \"id\" int )", <nl> 
mmm LoadStatement.java <nl> ppp LoadStatement.java <nl> + import com.google.common.base.Optional; <nl> + import com.google.devtools.build.lib.syntax.compiler.DebugInfo; <nl> + import com.google.devtools.build.lib.syntax.compiler.LoopLabels; <nl> + import com.google.devtools.build.lib.syntax.compiler.VariableScope; <nl> 
new file <nl> ppp PolicyEntryConverterTest.java <nl> + package com.google.devtools.build.lib.analysis.featurecontrol; <nl> + import static com.google.common.truth.Truth.assertThat; <nl> + import static org.junit.Assert.fail; <nl> + import com.google.devtools.build.lib.cmdline.Label; <nl> + import com.google.devtools.common.options.OptionsParsingException; <nl> 
deleted file <nl> mmm Jvm.java <nl> - package com.google.devtools.build.lib.rules.java; <nl> - import com.google.common.base.Preconditions; <nl> - import com.google.devtools.build.lib.analysis.config.BuildConfiguration; <nl> - import com.google.devtools.build.lib.cmdline.Label; <nl> - import com.google.devtools.build.lib.concurrent.ThreadSafety.Immutable; <nl> 
mmm GrpcRemoteExecutionClientTest.java <nl> ppp GrpcRemoteExecutionClientTest.java <nl> - .isEqualTo(SpawnResult.Status.CONNECTION_FAILED); <nl> + .isEqualTo(SpawnResult.Status.EXECUTION_FAILED_CATASTROPHICALLY); <nl> mmm AbstractSpawnStrategy.java <nl> ppp AbstractSpawnStrategy.java <nl> - if ((spawnResult.status() != Status.SUCCESS) || (spawnResult.exitCode() != 0)) { <nl> 
deleted file <nl> mmm LoadStatementCheckerTest.java <nl> - package com.google.devtools.skylark.skylint; <nl> - import com.google.common.truth.Truth; <nl> - import com.google.devtools.build.lib.syntax.BuildFileAST; <nl> - import java.util.List; <nl> - import org.junit.Test; <nl> - import org.junit.runner.RunWith; <nl> 
mmm CcCommonTest.java <nl> ppp CcCommonTest.java <nl> - import com.google.devtools.build.lib.analysis.config.ConfigurationFactory; <nl> - @Override <nl> - public ConfigurationFactory createConfigurationFactory() { <nl> - return new ConfigurationFactory( <nl> - createRuleClassProvider().getConfigurationCollectionFactory(), <nl> 
mmm StandaloneActionContextProvider.java <nl> ppp StandaloneActionContextProvider.java <nl> - ? new XCodeLocalEnvProvider(env.getClientEnv()) <nl> + ? new XCodeLocalEnvProvider(env.getRuntime().getProductName(), env.getClientEnv()) <nl> - env.getRuntime().getProductName(), <nl> mmm WindowsLocalEnvProvider.java <nl> 
mmm SkylarkSemanticsConsistencyTest.java <nl> ppp SkylarkSemanticsConsistencyTest.java <nl> - "--incompatible_disallow_filetype=" + rand.nextBoolean(), <nl> - .incompatibleDisallowFileType(rand.nextBoolean()) <nl> mmm SkylarkRuleClassFunctionsTest.java <nl> ppp SkylarkRuleClassFunctionsTest.java <nl> - @Test <nl> 
mmm FakeCcModule.java <nl> ppp FakeCcModule.java <nl> - CcToolchainProviderApi ccToolchainProvider, FeatureConfigurationApi featureConfiguration, <nl> - Object sourceFile, Object outputFile, Object userCompileFlags, Object includeDirs, <nl> - Object quoteIncludeDirs, Object systemIncludeDirs, Object defines, boolean usePic, <nl> 
mmm GlobFunctionTest.java <nl> ppp GlobFunctionTest.java <nl> - directories)); <nl> + directories, <nl> mmm WorkspaceFileFunctionTest.java <nl> ppp WorkspaceFileFunctionTest.java <nl> - directories); <nl> + directories, <nl> mmm FileFunctionTest.java <nl> ppp FileFunctionTest.java <nl> - directories)) <nl> + directories, <nl> 
mmm AndroidResourceClassWriter.java <nl> ppp AndroidResourceClassWriter.java <nl> - import static java.nio.charset.StandardCharsets.UTF_8; <nl> - import com.android.SdkConstants; <nl> - import com.google.devtools.build.android.resources.FieldInitializer; <nl> + import com.google.devtools.build.android.resources.FieldInitializers; <nl> 
mmm RemoteActionContextProvider.java <nl> ppp RemoteActionContextProvider.java <nl> - createFallbackRunner(), <nl> + createFallbackRunner(env), <nl> - private SpawnRunner createFallbackRunner() { <nl> + private static SpawnRunner createFallbackRunner(CommandEnvironment env) { <nl> mmm DarwinSandboxedStrategy.java <nl> 
mmm NinjaGraph.java <nl> ppp NinjaGraph.java <nl> - import com.google.common.collect.ImmutableSet; <nl> - import com.google.common.collect.Maps; <nl> + import com.google.devtools.build.lib.actions.Artifact.DerivedArtifact; <nl> - import com.google.devtools.build.lib.analysis.FileProvider; <nl> - import com.google.devtools.build.lib.analysis.TransitiveInfoCollection; <nl> 
mmm TestStrategy.java <nl> ppp TestStrategy.java <nl> + import com.google.devtools.build.lib.analysis.ShellConfiguration; <nl> - args.add(testAction.getConfiguration().getShellExecutable().getPathString()); <nl> + args.add(testAction.getConfiguration().getFragment(ShellConfiguration.class) <nl> + .getShellExecutable().getPathString()); <nl> 
mmm CcCompilationHelper.java <nl> ppp CcCompilationHelper.java <nl> - Iterable<CppModuleMap> dependentModuleMaps = collectModuleMaps(); <nl> + List<CppModuleMap> dependentModuleMaps = collectModuleMaps(); <nl> - Iterable<CppModuleMap> dependentModuleMaps, <nl> + List<CppModuleMap> dependentModuleMaps, <nl> 
mmm RClassGeneratorActionBuilder.java <nl> ppp RClassGeneratorActionBuilder.java <nl> + builder.add("--tool").add("GENERATE_BINARY_R").add("--"); <nl> - inputs.addAll(ruleContext.getExecutablePrerequisite("$android_rclass_generator", Mode.HOST) <nl> - .getRunfilesSupport() <nl> - .getRunfilesArtifactsWithoutMiddlemen()); <nl> 
mmm ContainingPackageLookupFunctionTest.java <nl> ppp ContainingPackageLookupFunctionTest.java <nl> + import com.google.devtools.build.lib.syntax.SkylarkSemantics; <nl> - PrecomputedValue.PATH_PACKAGE_LOCATOR.set(differencer, pkgLocator.get()); <nl> + PrecomputedValue.PATH_PACKAGE_LOCATOR.set(differencer, pkgLocator.get()); <nl> 
mmm AndroidCommon.java <nl> ppp AndroidCommon.java <nl> - RuleContext ruleContext, AndroidSemantics semantics, AndroidTools tools, Artifact jarToDex, <nl> - Artifact classesDex, List<String> dexOptions, boolean multidex, Artifact mainDexList) { <nl> + RuleContext ruleContext, <nl> + Artifact jarToDex, Artifact classesDex, List<String> dexOptions, boolean multidex, <nl> 
mmm RemoteActionContextProvider.java <nl> ppp RemoteActionContextProvider.java <nl> - import com.google.common.collect.ImmutableList; <nl> - import com.google.devtools.build.lib.actions.ActionContext; <nl> + import com.google.devtools.build.lib.actions.SpawnActionContext; <nl> + import com.google.devtools.build.lib.exec.SpawnCache; <nl> 
mmm CcCommon.java <nl> ppp CcCommon.java <nl> - CppCompileAction.C_COMPILE, <nl> - CppCompileAction.CPP_COMPILE, <nl> - CppCompileAction.CPP_HEADER_PARSING, <nl> - CppCompileAction.CPP_HEADER_PREPROCESSING, <nl> - CppCompileAction.CPP_MODULE_COMPILE, <nl> - CppCompileAction.CPP_MODULE_CODEGEN, <nl> - CppCompileAction.ASSEMBLE, <nl> 
mmm Link.java <nl> ppp Link.java <nl> + NODEPS_DYNAMIC_LIBRARY( <nl> + ".so", <nl> + Staticness.DYNAMIC, <nl> + "c++-link-nodeps-dynamic-library", <nl> + ArtifactCategory.DYNAMIC_LIBRARY, <nl> + Executable.NOT_EXECUTABLE), <nl> + public boolean isDynamicLibrary() { <nl> + return this == NODEPS_DYNAMIC_LIBRARY || this == DYNAMIC_LIBRARY; <nl> 
mmm RunCommand.java <nl> ppp RunCommand.java <nl> - import com.google.devtools.build.lib.analysis.ShellConfiguration; <nl> + import com.google.devtools.build.lib.analysis.ShToolchain; <nl> - if (writeScript(env, runOptions.scriptPath, unisolatedCommand)) { <nl> + if (writeScript(env, shellExecutable, runOptions.scriptPath, unisolatedCommand)) { <nl> 
mmm CppCompileActionBuilder.java <nl> ppp CppCompileActionBuilder.java <nl> - @Nullable private PathFragment tempOutputFile; <nl> - this.tempOutputFile = other.tempOutputFile; <nl> - @Nullable <nl> - public PathFragment getTempOutputFile() { <nl> - return tempOutputFile; <nl> - } <nl> - boolean fake = tempOutputFile != null; <nl> 
mmm BazelJavaRuleClasses.java <nl> ppp BazelJavaRuleClasses.java <nl> - fromFunctions(JavaSemantics.JAVA_BINARY_CLASS_JAR, JavaSemantics.JAVA_BINARY_SOURCE_JAR, <nl> - JavaSemantics.JAVA_BINARY_DEPLOY_JAR, JavaSemantics.JAVA_BINARY_DEPLOY_SOURCE_JAR); <nl> + fromFunctions( <nl> + JavaSemantics.JAVA_BINARY_CLASS_JAR, <nl> 
mmm JavaCompilationHelper.java <nl> ppp JavaCompilationHelper.java <nl> + @Nullable <nl> + private static Artifact createInstrumentationMetadataArtifact( <nl> + RuleContext ruleContext, Artifact outputJar) { <nl> + PathFragment packageRelativePath = outputJar.getRootRelativePath().relativeTo( <nl> + ruleContext.getPackageDirectory()); <nl> 
new file <nl> ppp SkylarkConfigurationFieldProcessor.java <nl> + package com.google.devtools.build.lib.analysis.skylark.annotations.processor; <nl> + import com.google.devtools.build.lib.analysis.skylark.annotations.SkylarkConfigurationField; <nl> + import com.google.devtools.build.lib.skylarkinterface.SkylarkModule; <nl> 
mmm AbstractAction.java <nl> ppp AbstractAction.java <nl> - private final String configurationName; <nl> - this.configurationName = originalOwner.getConfigurationName(); <nl> - @Override <nl> - public String getConfigurationName() { <nl> - return configurationName; <nl> - } <nl> mmm AndroidConfiguration.java <nl> 
mmm BuildEventServiceProtoUtilTest.java <nl> ppp BuildEventServiceProtoUtilTest.java <nl> - clock, <nl> mmm BuildEventServiceProtoUtil.java <nl> ppp BuildEventServiceProtoUtil.java <nl> - import com.google.devtools.build.lib.clock.Clock; <nl> - import java.util.concurrent.atomic.AtomicInteger; <nl> - private final AtomicInteger streamSequenceNumber; <nl> 
mmm JavaSkylarkApiProvider.java <nl> ppp JavaSkylarkApiProvider.java <nl> - import com.google.devtools.build.lib.skylarkinterface.SkylarkCallable; <nl> - import com.google.devtools.build.lib.skylarkinterface.SkylarkModule; <nl> - import com.google.devtools.build.lib.skylarkinterface.SkylarkModuleCategory; <nl> 
mmm AndroidBinary.java <nl> ppp AndroidBinary.java <nl> - ImmutableList<TransitiveInfoCollection> deps = ImmutableList.<TransitiveInfoCollection>copyOf( <nl> - ruleContext.getPrerequisites("deps", Mode.TARGET)); <nl> - JavaCommon javaCommon = new JavaCommon( <nl> - ruleContext, javaSemantics, deps, deps, deps); <nl> 
mmm BuildEventArtifactUploaderMapTest.java <nl> ppp BuildEventArtifactUploaderMapTest.java <nl> - import com.google.common.util.concurrent.ListenableFuture; <nl> - import com.google.devtools.build.lib.vfs.Path; <nl> - import java.util.Set; <nl> - noConversionUploader = <nl> - new BuildEventArtifactUploader() { <nl> 
mmm PrecomputedValue.java <nl> ppp PrecomputedValue.java <nl> + public static final Precomputed<Boolean> REMOTE_EXECUTION_ENABLED = <nl> + new Precomputed<>(Key.create("remote_execution_enabled")); <nl> mmm SkyframeExecutor.java <nl> ppp SkyframeExecutor.java <nl> + private void setRemoteExecutionEnabled(boolean enabled) { <nl> 
new file <nl> ppp AndroidDex2OatInfo.java <nl> + package com.google.devtools.build.lib.rules.android; <nl> + import com.google.common.collect.ImmutableList; <nl> + import com.google.devtools.build.lib.events.Location; <nl> + import com.google.devtools.build.lib.packages.NativeInfo; <nl> + import com.google.devtools.build.lib.packages.NativeProvider; <nl> 
mmm AndroidBuildViewTestCase.java <nl> ppp AndroidBuildViewTestCase.java <nl> - protected static ResourceContainer getResourceContainer(ConfiguredTarget target) { <nl> + protected static ValidatedAndroidResources getValidatedResources(ConfiguredTarget target) { <nl> - protected static ResourceContainer getResourceContainer( <nl> 
mmm AndroidNativeLibsInfo.java <nl> ppp AndroidNativeLibsInfo.java <nl> - return new AndroidNativeLibsInfo(nativeLibs.getSet(Artifact.class)); <nl> + return new AndroidNativeLibsInfo(nativeLibs.getSetFromParam(Artifact.class, "native_libs")); <nl> mmm SkylarkCommandLine.java <nl> ppp SkylarkCommandLine.java <nl> 
mmm TargetPatternPreloader.java <nl> ppp TargetPatternPreloader.java <nl> mmm TargetPatternEvaluatorTest.java <nl> ppp TargetPatternEvaluatorTest.java <nl> - import static com.google.devtools.build.lib.pkgcache.FilteringPolicies.FILTER_TESTS; <nl> - private Set<Label> parseList(FilteringPolicy policy, String... patterns) <nl> 
deleted file <nl> mmm LegacyObjcProtoLibraryTest.java <nl> - package com.google.devtools.build.lib.rules.objc; <nl> - import com.google.devtools.build.lib.rules.objc.ObjcCommandLineOptions.ObjcCrosstoolMode; <nl> - import org.junit.runner.RunWith; <nl> - import org.junit.runners.JUnit4; <nl> - @RunWith(JUnit4.class) <nl> 
mmm CcInfo.java <nl> ppp CcInfo.java <nl> + import com.google.devtools.build.lib.events.Location; <nl> + import com.google.devtools.build.lib.rules.cpp.LibraryToLinkWrapper.CcLinkingContext; <nl> + import com.google.devtools.build.lib.syntax.Environment; <nl> - public CcInfoApi createInfo(Object skylarkCcCompilationContext, Object skylarkCcLinkingInfo) <nl> 
mmm SpawnAction.java <nl> ppp SpawnAction.java <nl> - import com.google.common.collect.Streams; <nl> - Streams.stream(getInputs()) <nl> + getInputs().toList().stream() <nl> - for (ActionInput input : spawn.getInputFiles()) { <nl> + for (ActionInput input : spawn.getInputFiles().toList()) { <nl> - for (Artifact input : inputs) { <nl> 
mmm StarlarkActionProviderTest.java <nl> ppp StarlarkActionProviderTest.java <nl> - import net.starlark.java.eval.Mutability; <nl> - Dict.of((Mutability) null, "foo", "bar", "pet", "puppy"), <nl> - Dict.of((Mutability) null, "pet", "bunny")); <nl> + Dict.builder().put("foo", "bar").put("pet", "puppy").buildImmutable(), <nl> 
new file <nl> ppp MavenServerRule.java <nl> + package com.google.devtools.build.lib.bazel.rules.workspace; <nl> + import static com.google.devtools.build.lib.packages.Attribute.attr; <nl> + import com.google.devtools.build.lib.analysis.RuleDefinition; <nl> + import com.google.devtools.build.lib.analysis.RuleDefinitionEnvironment; <nl> 
mmm SymlinkActionTest.java <nl> ppp SymlinkActionTest.java <nl> - NestedSetExpander.NO_CALLBACKS)); <nl> + NestedSetExpander.DEFAULT)); <nl> mmm StandaloneSpawnStrategyTest.java <nl> ppp StandaloneSpawnStrategyTest.java <nl> - NestedSetExpander.NO_CALLBACKS); <nl> + NestedSetExpander.DEFAULT); <nl> mmm TemplateExpansionActionTest.java <nl> 
mmm AbstractSandboxSpawnRunner.java <nl> ppp AbstractSandboxSpawnRunner.java <nl> + policy.prefetchInputs(); <nl> mmm RemoteSpawnRunnerTest.java <nl> ppp RemoteSpawnRunnerTest.java <nl> - public void prefetchInputs(Iterable<ActionInput> inputs) throws IOException { <nl> + public void prefetchInputs() throws IOException { <nl> 
mmm ProcessedAndroidData.java <nl> ppp ProcessedAndroidData.java <nl> - import com.google.devtools.build.lib.rules.android.AndroidConfiguration.AndroidAaptVersion; <nl> - AndroidAaptVersion aaptVersion, <nl> - if (conditionalKeepRules && aaptVersion != AndroidAaptVersion.AAPT2) { <nl> - throw errorConsumer.throwWithRuleError( <nl> 
mmm GenRuleConfiguredTargetTest.java <nl> ppp GenRuleConfiguredTargetTest.java <nl> - import com.google.devtools.build.lib.analysis.config.BuildConfiguration; <nl> - import com.google.devtools.build.lib.rules.java.Jvm; <nl> - String expectedPattern = "echo %s > %s"; <nl> + String javaCommand = <nl> + ((SpawnAction) getGeneratingAction(javaOutput)).getArguments().get(2); <nl> 
mmm MavenJarFunction.java <nl> ppp MavenJarFunction.java <nl> - public boolean isLocal() { <nl> + public boolean isLocal(Rule rule) { <nl> new file <nl> ppp SkylarkRepositoryIntegrationTest.java <nl> + package com.google.devtools.build.lib.bazel.repository.skylark; <nl> + import static com.google.common.truth.Truth.assertThat; <nl> 
mmm PyBaseConfiguredTargetTestBase.java <nl> ppp PyBaseConfiguredTargetTestBase.java <nl> - useConfiguration("--experimental_allow_python_version_transitions=false", "--force_python=PY3"); <nl> + useConfiguration("--incompatible_allow_python_version_transitions=false", "--force_python=PY3"); <nl> - useConfiguration("--experimental_allow_python_version_transitions=false", "--force_python=PY3"); <nl> 
mmm CommandEnvironment.java <nl> ppp CommandEnvironment.java <nl> + import com.google.devtools.build.lib.actions.PackageRootResolver; <nl> + import com.google.devtools.build.lib.analysis.SkyframePackageRootResolver; <nl> + public PackageRootResolver getPackageRootResolver() { <nl> + return new SkyframePackageRootResolver(getSkyframeExecutor(), reporter); <nl> 
mmm BaseRuleClasses.java <nl> ppp BaseRuleClasses.java <nl> - env.getToolsLabel(DEFAULT_COVERAGE_REPORT_GENERATOR_VALUE))) <nl> - .singleArtifact()) <nl> + env.getToolsLabel(DEFAULT_COVERAGE_REPORT_GENERATOR_VALUE)))) <nl> mmm Bazel.java <nl> ppp Bazel.java <nl> + com.google.devtools.build.lib.bazel.coverage.BazelCoverageReportModule.class, <nl> 
mmm LocalExecutionOptions.java <nl> ppp LocalExecutionOptions.java <nl> + import java.time.Duration; <nl> deleted file <nl> mmm SandboxActionContextProvider.java <nl> - package com.google.devtools.build.lib.sandbox; <nl> - import com.google.common.base.Splitter; <nl> - import com.google.common.collect.ImmutableList; <nl> 
mmm FdoSupport.java <nl> ppp FdoSupport.java <nl> - : Root.asDerivedRoot(execRoot, execRoot.getRelative(productName + "-fdo"), true); <nl> + : Root.asDerivedRoot(execRoot, execRoot.getRelative(productName + "-fdo")); <nl> mmm BlazeDirectories.java <nl> ppp BlazeDirectories.java <nl> - return Root.asDerivedRoot(getExecRoot(workspaceName), getOutputPath(workspaceName), true); <nl> 
new file <nl> ppp PyRuntimeInfo.java <nl> + package com.google.devtools.build.lib.rules.python; <nl> + import static com.google.devtools.build.lib.syntax.Runtime.NONE; <nl> + import com.google.common.base.Preconditions; <nl> + import com.google.devtools.build.lib.actions.Artifact; <nl> + import com.google.devtools.build.lib.collect.nestedset.NestedSet; <nl> 
mmm CcCommon.java <nl> ppp CcCommon.java <nl> - if (ApplePlatform.isApplePlatform(cppConfiguration.getTargetCpu()) <nl> - && result.contains("-static")) { <nl> + if (ApplePlatform.isApplePlatform(ccToolchain.getTargetCpu()) && result.contains("-static")) { <nl> mmm CcBinary.java <nl> ppp CcBinary.java <nl> 
mmm ReleaseBundlingSupport.java <nl> ppp ReleaseBundlingSupport.java <nl> - import com.google.common.base.Strings; <nl> + import com.google.devtools.build.lib.analysis.actions.FileWriteAction; <nl> + import com.google.devtools.build.lib.rules.apple.DottedVersion; <nl> + import com.google.devtools.build.lib.rules.objc.Bundling.Builder; <nl> 
new file <nl> ppp AndroidIdlHelper.java <nl> + package com.google.devtools.build.lib.rules.android; <nl> + import com.google.common.collect.ImmutableList; <nl> + import com.google.common.collect.ImmutableMap; <nl> + import com.google.devtools.build.lib.actions.Artifact; <nl> + import com.google.devtools.build.lib.actions.MiddlemanFactory; <nl> 
new file <nl> ppp AliasTest.java <nl> + package com.google.devtools.build.lib.rules; <nl> + import static com.google.common.truth.Truth.assertThat; <nl> + import com.google.devtools.build.lib.actions.Artifact; <nl> + import com.google.devtools.build.lib.actions.util.ActionsTestUtil; <nl> + import com.google.devtools.build.lib.analysis.ConfiguredTarget; <nl> 
mmm CppConfiguration.java <nl> ppp CppConfiguration.java <nl> + import com.google.common.collect.ImmutableMap; <nl> + import com.google.devtools.build.lib.cmdline.LabelSyntaxException; <nl> - import com.google.devtools.build.lib.rules.cpp.CppConfigurationLoader.CppConfigurationParameters; <nl> + import com.google.devtools.build.lib.vfs.FileSystemUtils; <nl> 
mmm StandaloneSpawnStrategyTest.java <nl> ppp StandaloneSpawnStrategyTest.java <nl> + import com.google.devtools.build.lib.actions.ResourceManager; <nl> + import com.google.devtools.build.lib.actions.ResourceSet; <nl> + ResourceManager resourceManager = ResourceManager.instanceForTestingOnly(); <nl> + resourceManager.setAvailableResources( <nl> 
mmm PackageFunctionTest.java <nl> ppp PackageFunctionTest.java <nl> + ImmutableMap.<String, String>of(), <nl> + ImmutableMap.<String, String>of(), <nl> mmm PrecomputedValue.java <nl> ppp PrecomputedValue.java <nl> + static final Precomputed<Map<String, String>> ACTION_ENV = <nl> + new Precomputed<>(SkyKey.create(SkyFunctions.PRECOMPUTED, "action_env")); <nl> 
new file <nl> ppp StarlarkOptionsParser.java <nl> + package com.google.devtools.build.lib.runtime; <nl> + import static com.google.devtools.build.lib.packages.BuildType.LABEL; <nl> + import static com.google.devtools.build.lib.packages.BuildType.LABEL_LIST; <nl> + import static com.google.devtools.build.lib.syntax.Type.BOOLEAN; <nl> 
mmm TestXmlOutputParser.java <nl> ppp TestXmlOutputParser.java <nl> - final class TestXmlOutputParser { <nl> + public final class TestXmlOutputParser { <nl> mmm StandaloneModule.java <nl> ppp StandaloneModule.java <nl> + import com.google.devtools.build.lib.analysis.test.TestStrategy; <nl> - import com.google.devtools.build.lib.exec.TestStrategy; <nl> 
mmm ParserTest.java <nl> ppp ParserTest.java <nl> - import com.google.common.base.Joiner; <nl> + import org.junit.Before; <nl> - public class ParserTest extends AbstractParserTestCase { <nl> + public class ParserTest extends EvaluationTestCase { <nl> + EvaluationContext buildContext; <nl> + EvaluationContext buildContextWithPython; <nl> 
mmm DecompressorValue.java <nl> ppp DecompressorValue.java <nl> - import com.google.common.base.Optional; <nl> + import com.google.common.base.Preconditions; <nl> + import com.google.devtools.build.skyframe.SkyFunctionName; <nl> - import java.util.Objects; <nl> - import javax.annotation.Nullable; <nl> - public static class DecompressorDescriptor { <nl> 
mmm JavaToolchain.java <nl> ppp JavaToolchain.java <nl> - import com.google.devtools.build.lib.analysis.TransitionMode; <nl> - Artifact javac = ruleContext.getPrerequisiteArtifact("javac", TransitionMode.HOST); <nl> - FilesToRunProvider javabuilder = <nl> - ruleContext.getExecutablePrerequisite("javabuilder", TransitionMode.HOST); <nl> 
mmm StringCodecs.java <nl> ppp StringCodecs.java <nl> - import com.google.devtools.build.lib.skyframe.serialization.ObjectCodecRegistry; <nl> + import java.util.Collections; <nl> - public void register(ObjectCodecRegistry.Builder builder) { <nl> + public Iterable<? extends ObjectCodec<?>> getCodecsToRegister() { <nl> 
mmm ModifyFirstLetterNamingPolicy.java <nl> ppp ModifyFirstLetterNamingPolicy.java <nl> - import com.google.gson.internal.$Preconditions; <nl> + import com.google.gson.internal.$Gson$Preconditions; <nl> - this.letterModifier = $Preconditions.checkNotNull(modifier); <nl> + this.letterModifier = $Gson$Preconditions.checkNotNull(modifier); <nl> 
deleted file <nl> mmm AsyncMsgLoggerTest.java <nl> - package com.crossoverjie.cim.client.service.impl; <nl> - import com.crossoverjie.cim.client.CIMClientApplication; <nl> - import com.crossoverjie.cim.client.service.MsgLogger; <nl> - import org.junit.Test; <nl> - import org.junit.runner.RunWith; <nl> - import org.springframework.beans.factory.annotation.Autowired; <nl> 
mmm Tag.java <nl> ppp Tag.java <nl> - addTagInfo(map, map2, DoABCDefineTag.ID, DoABCDefineTag.class, DoABCDefineTag.NAME); <nl> + addTagInfo(map, map2, DoABC2Tag.ID, DoABC2Tag.class, DoABC2Tag.NAME); <nl> - DoABCDefineTag.ID, <nl> + DoABC2Tag.ID, <nl> mmm TagTree.java <nl> ppp TagTree.java <nl> - import com.jpexs.decompiler.flash.tags.DoABCDefineTag; <nl> 
mmm ABCInputStream.java <nl> ppp ABCInputStream.java <nl> - int namespace_index = 0; <nl> - int name_index = 0; <nl> - int namespace_set_index = 0; <nl> - int qname_index = 0; <nl> - int[] params = null; <nl> + Multiname result = null; <nl> - namespace_index = readU30("namespace_index"); <nl> - name_index = readU30("name_index"); <nl> 
mmm SoundStreamHead2Tag.java <nl> ppp SoundStreamHead2Tag.java <nl> - for (SoundStreamBlockTag block : blocks) { <nl> - ByteArrayRange data = block.streamSoundData; <nl> - if (streamSoundCompression == SoundFormat.FORMAT_MP3) { <nl> - ret.add(data.getSubRange(4, data.getLength() - 4)); <nl> - } else { <nl> 
new file <nl> ppp PIX24.java <nl> + package com.jpexs.asdec.types; <nl> + public class PIX24 { <nl> + public int red; <nl> + public int green; <nl> + public int blue; <nl> + } <nl> mmm GetScopeObjectIns.java <nl> ppp GetScopeObjectIns.java <nl> new file <nl> ppp BITMAPDATA.java <nl> + package com.jpexs.asdec.types; <nl> 
mmm MainPanel.java <nl> ppp MainPanel.java <nl> + tagTree.repaint(); <nl> mmm DoubleEditor.java <nl> ppp DoubleEditor.java <nl> - import java.util.logging.Level; <nl> - import java.util.logging.Logger; <nl> 
mmm IggySwfBundle.java <nl> ppp IggySwfBundle.java <nl> - package com.jpexs.decompiler.flash.iggy.conversion; <nl> - import com.jpexs.decompiler.flash.SWF; <nl> - import com.jpexs.decompiler.flash.SWFBundle; <nl> - import com.jpexs.decompiler.flash.iggy.IggyFile; <nl> - import com.jpexs.decompiler.flash.iggy.IggyFont; <nl> 
mmm ActionScript2Parser.java <nl> ppp ActionScript2Parser.java <nl> + import com.jpexs.decompiler.flash.action.model.EnumerateActionItem; <nl> + import com.jpexs.decompiler.graph.model.DuplicateItem; <nl> + import com.jpexs.decompiler.graph.model.PopItem; <nl> + import com.jpexs.decompiler.graph.model.PushItem; <nl> 
mmm DefineBitsJPEG2Tag.java <nl> ppp DefineBitsJPEG2Tag.java <nl> - public InputStream getImageData() { <nl> + public InputStream getOriginalImageData() { <nl> - BufferedImage image = ImageHelper.read(getImageData()); <nl> + BufferedImage image = ImageHelper.read(getOriginalImageData()); <nl> mmm ImageExporter.java <nl> 
mmm PMDRuntimeConstants.java <nl> ppp PMDRuntimeConstants.java <nl> + * Revision 1.3  2006/10/07 16:01:51  phherlin <nl> + * Integrate Sven updates <nl> + * <nl> + public static final String KEY_MARKERATT_METHODNAME = "method"; <nl> deleted file <nl> mmm PMDRecord.java <nl> - package net.sourceforge.pmd.ui.model; <nl> 
mmm AcceptanceTest.java <nl> ppp AcceptanceTest.java <nl> + import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration; <nl> - ASTVariableDeclaratorId vdi = acu.findDescendantsOfType(ASTVariableDeclaratorId.class).get(0); <nl> mmm ASTClassOrInterfaceType.java <nl> ppp ASTClassOrInterfaceType.java <nl> 
mmm EditPropertyDialogController.java <nl> ppp EditPropertyDialogController.java <nl> mmm RestorePropertyVisitor.java <nl> ppp RestorePropertyVisitor.java <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - List<SettingsOwner> itemsToAdd = new ArrayList<>(); <nl> - itemsToAdd.add(item); <nl> 
mmm JavaClassMetricKey.java <nl> ppp JavaClassMetricKey.java <nl> + import net.sourceforge.pmd.lang.java.metrics.impl.CycloMetric.CycloClassMetric; <nl> + CYCLO(new CycloClassMetric()), <nl> - public final class CycloMetric extends AbstractJavaOperationMetric { <nl> + public final class CycloMetric { <nl> 
mmm ApexCRUDViolationRule.java <nl> ppp ApexCRUDViolationRule.java <nl> - private static final Pattern WITH_SECURITY_ENFORCED = Pattern.compile("(?i).*[^']\\s*WITH\\s+SECURITY_ENFORCED\\s*[^']*"); <nl> + private static final Pattern WITH_SECURITY_ENFORCED = Pattern.compile("(?is).*[^']\\s*WITH\\s+SECURITY_ENFORCED\\s*[^']*"); <nl> 
mmm ASTClassOrInterfaceDeclaration.java <nl> ppp ASTClassOrInterfaceDeclaration.java <nl> + import java.util.List; <nl> + @Override <nl> + public List<ASTAnyTypeBodyDeclaration> getDeclarations() { <nl> + return findChildrenOfType(ASTClassOrInterfaceBody.class) <nl> + .get(0).findChildrenOfType(ASTAnyTypeBodyDeclaration.class); <nl> 
mmm OperationMetricKey.java <nl> ppp OperationMetricKey.java <nl> mmm AtfdMetric.java <nl> ppp AtfdMetric.java <nl> - @Override <nl> - public boolean supports(AccessNode node) { <nl> - return node instanceof ASTClassOrInterfaceDeclaration <nl> - || node instanceof ASTMethodOrConstructorDeclaration && !node.isAbstract(); <nl> 
mmm DirectoryFilter.java <nl> ppp DirectoryFilter.java <nl> + @Deprecated <nl> mmm Filter.java <nl> ppp Filter.java <nl> + * <nl> + * @deprecated Will be replaced with standard java.util.function.Predicate with 7.0.0 <nl> + @Deprecated <nl> mmm AbstractCompoundFilter.java <nl> ppp AbstractCompoundFilter.java <nl> 
mmm PMDTaskTest.java <nl> ppp PMDTaskTest.java <nl> - assertOutputContaining("Potentialy mistyped CDATA section with extra [ at beginning or ] at the end."); <nl> + assertOutputContaining("Potentially mistyped CDATA section with extra [ at beginning or ] at the end."); <nl> mmm CloseResourceRule.java <nl> 
new file <nl> ppp NoamMetric.java <nl> + package net.sourceforge.pmd.lang.java.metrics.impl; <nl> + import net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration; <nl> + import net.sourceforge.pmd.lang.java.ast.ASTAnyTypeDeclaration.TypeKind; <nl> + import net.sourceforge.pmd.lang.java.metrics.signature.JavaOperationSigMask; <nl> 
mmm ScopeCreationVisitorTest.java <nl> ppp ScopeCreationVisitorTest.java <nl> + import net.sourceforge.pmd.lang.java.ast.ASTBlock; <nl> - ASTIfStatement n = acu.findDescendantsOfType(ASTIfStatement.class).get(0); <nl> + ASTBlock n = acu.getFirstDescendantOfType(ASTIfStatement.class) <nl> + .getFirstDescendantOfType(ASTBlock.class); <nl> 
mmm MultiThreadProcessor.java <nl> ppp MultiThreadProcessor.java <nl> + 		configuration.getAnalysisCache().checkValidity(rs, configuration.getClassLoader()); <nl> mmm MonoThreadProcessor.java <nl> ppp MonoThreadProcessor.java <nl> + 		configuration.getAnalysisCache().checkValidity(rs, configuration.getClassLoader()); <nl> 
mmm DesignerUtil.java <nl> ppp DesignerUtil.java <nl> + import org.reactfx.value.Var; <nl> + import javafx.beans.property.BooleanProperty; <nl> + import javafx.scene.control.ToggleGroup; <nl> + @SuppressWarnings("unchecked") <nl> + public static <T> Var<T> mapToggleGroupToUserData(ToggleGroup toggleGroup) { <nl> 
mmm UnusedLocal10.java <nl> ppp UnusedLocal10.java <nl> - public interface Unused10 { <nl> - 	public void foo(); <nl> - 	public String bar(); <nl> + public interface UnusedLocal10 { <nl> + public void foo(); <nl> + public String bar(); <nl> mmm UnusedLocal1.java <nl> ppp UnusedLocal1.java <nl> - public class Unused1 { <nl> 
new file <nl> ppp SelectIntoStatementTest.java <nl> + package net.sourceforge.pmd.lang.plsql.ast; <nl> + import org.apache.commons.io.IOUtils; <nl> + import org.junit.Test; <nl> + import net.sourceforge.pmd.lang.plsql.AbstractPLSQLParserTst; <nl> + public class SelectIntoStatementTest extends AbstractPLSQLParserTst { <nl> 
new file <nl> ppp ToolbarTitledPane.java <nl> + package net.sourceforge.pmd.util.fxdesigner.util.controls; <nl> + import java.util.Collection; <nl> + import java.util.Objects; <nl> + import org.reactfx.value.Val; <nl> + import org.reactfx.value.Var; <nl> + import javafx.collections.ObservableList; <nl> + import javafx.geometry.Insets; <nl> 
mmm EventLogController.java <nl> ppp EventLogController.java <nl> - import java.net.URL; <nl> - import java.util.ResourceBundle; <nl> + import net.sourceforge.pmd.util.fxdesigner.util.AbstractController; <nl> - import javafx.fxml.Initializable; <nl> - public class EventLogController implements Initializable { <nl> 
mmm PMD.java <nl> ppp PMD.java <nl> - renderer.setReportFile(configuration.getReportFile()); <nl> + renderer.setWriter(IOUtil.createWriter(configuration.getReportFile())); <nl> mmm IOUtil.java <nl> ppp IOUtil.java <nl> - import java.nio.charset.StandardCharsets; <nl> - import java.nio.charset.UnsupportedCharsetException; <nl> 
mmm MainDesignerController.java <nl> ppp MainDesignerController.java <nl> - import javafx.scene.control.Button; <nl> - private Button refreshASTButton; <nl> - @FXML <nl> - refreshASTButton.setOnAction(e -> onRefreshASTClicked()); <nl> - private void onRefreshASTClicked() { <nl> + public void refreshAST() { <nl> 
mmm MultipleCaseLabels.java <nl> ppp MultipleCaseLabels.java <nl> mmm SwitchExpressions.java <nl> ppp SwitchExpressions.java <nl> - private static final int MONDAY = 1; <nl> - private static final int TUESDAY = 2; <nl> - private static final int WEDNESDAY = 3; <nl> - private static final int THURSDAY = 4; <nl> 
mmm AbstractJavaMetricsRule.java <nl> ppp AbstractJavaMetricsRule.java <nl> - import net.sourceforge.pmd.lang.java.ast.MethodLike; <nl> + import net.sourceforge.pmd.lang.java.ast.MethodLikeNode; <nl> - public interface JavaOperationMetric extends Metric<MethodLike> { <nl> + public interface JavaOperationMetric extends Metric<MethodLikeNode> { <nl> 
mmm ConsecutiveAppendsShouldReuseRule.java <nl> ppp ConsecutiveAppendsShouldReuseRule.java <nl> mmm LocalScopeTest.java <nl> ppp LocalScopeTest.java <nl> + PMD.EOL + "  x++;" + PMD.EOL + " }" + PMD.EOL + "}"; <nl> - public static final String TEST4 = "public class Foo {" + PMD.EOL + " void foo(String x, String z) { int y; }" <nl> 
new file <nl> ppp PerlTokenizer.java <nl> + package net.sourceforge.pmd.cpd; <nl> + import java.util.ArrayList; <nl> + public class PerlTokenizer extends AbstractTokenizer { <nl> + public PerlTokenizer() { <nl> + this.stringToken = new ArrayList<>(); <nl> + this.stringToken.add( "\'" ); <nl> + this.stringToken.add( "\"" ); <nl> 
mmm ProjectPropertiesModel.java <nl> ppp ProjectPropertiesModel.java <nl> + * Revision 1.6  2006/04/26 21:13:14  phherlin <nl> + * Add the include derived files option <nl> + * <nl> + boolean isIncludeDerivedFiles(); <nl> + void setIncludeDerivedFiles(boolean excludeDerivedFiles); <nl> mmm PMDPropertyPageController.java <nl> 
mmm ApexSharingViolationsRule.java <nl> ppp ApexSharingViolationsRule.java <nl> - import net.sourceforge.pmd.lang.apex.rule.internal.Helper; <nl> + @Test <nl> + public void testInnerClass() { <nl> + ASTCompilationUnit ast = parse("class Foo { class Bar { } }"); <nl> + List<ASTClassOrInterfaceDeclaration> classes = ast.findDescendantsOfType(ASTClassOrInterfaceDeclaration.class); <nl> 
mmm LinguisticNamingRule.java <nl> ppp LinguisticNamingRule.java <nl> + import static net.sourceforge.pmd.properties.PropertyFactory.stringListProperty; <nl> - import net.sourceforge.pmd.properties.StringMultiProperty; <nl> + import net.sourceforge.pmd.properties.PropertyDescriptor; <nl> - private static final StringMultiProperty BOOLEAN_METHOD_PREFIXES_PROPERTY = StringMultiProperty <nl> 
mmm RuleSetFactory.java <nl> ppp RuleSetFactory.java <nl> - if (!potentialRules.isEmpty() && potentialRules.size() == countDeprecated) { <nl> + if (potentialRules.size() == countDeprecated) { <nl> mmm RedundantFieldInitializerRule.java <nl> ppp RedundantFieldInitializerRule.java <nl> + import java.math.BigInteger; <nl> 
mmm AbstractRuleSetFactoryTest.java <nl> ppp AbstractRuleSetFactoryTest.java <nl> + import org.junit.contrib.java.lang.system.SystemErrRule; <nl> + @org.junit.Rule <nl> + public final SystemErrRule systemErrRule = new SystemErrRule().enableLog().muteForSuccessfulTests(); <nl> mmm RuleFactory.java <nl> ppp RuleFactory.java <nl> 
mmm NcssMethodCountRule.java <nl> ppp NcssMethodCountRule.java <nl> - @Deprecated <nl> - abstract Object jjtAccept(ApexParserVisitor visitor, Object data); <nl> + public abstract Object jjtAccept(ApexParserVisitor visitor, Object data); <nl> - @Deprecated <nl> mmm PMDParameters.java <nl> ppp PMDParameters.java <nl> 
deleted file <nl> mmm ForLoopCanBeForeachRule.java <nl> - package net.sourceforge.pmd.lang.java.rule.migrating; <nl> - import java.util.Iterator; <nl> - import java.util.List; <nl> - import java.util.Map; <nl> - import java.util.Map.Entry; <nl> - import org.jaxen.JaxenException; <nl> - import net.sourceforge.pmd.lang.ast.Node; <nl> 
mmm SearchRuleEvent.java <nl> ppp SearchRuleEvent.java <nl> + import net.sourceforge.pmd.Rule; <nl> - import net.sourceforge.pmd.Rule; <nl> mmm RulesTreeModel.java <nl> ppp RulesTreeModel.java <nl> - import java.util.Arrays; <nl> - import java.util.Comparator; <nl> - import java.util.Enumeration; <nl> - import java.util.List; <nl> 
mmm RuleDocGenerator.java <nl> ppp RuleDocGenerator.java <nl> - lines.add("tags: [rule_references, " + languageTersename + "]"); <nl> - lines.add("summary: Index of all built-in rules available for " + entry.getKey().getName()); <nl> - lines.add("language_name: " + entry.getKey().getName()); <nl> new file <nl> 
mmm MethodProperty.java <nl> ppp MethodProperty.java <nl> + import net.sourceforge.pmd.PropertyDescriptorFactory; <nl> + import net.sourceforge.pmd.lang.rule.properties.factories.BasicPropertyDescriptorFactory; <nl> + 	public static final PropertyDescriptorFactory factory = new BasicPropertyDescriptorFactory<MethodProperty>(Method.class, packagedFieldTypesByKey) { <nl> 
mmm ASTVariableDeclaratorId.java <nl> ppp ASTVariableDeclaratorId.java <nl> mmm AbstractTypeBodyDeclaration.java <nl> ppp AbstractTypeBodyDeclaration.java <nl> + import static net.sourceforge.pmd.lang.java.ast.ASTAnyTypeBodyDeclaration.DeclarationKind.RECORD; <nl> + } else if (node instanceof ASTRecordDeclaration) { <nl> 
deleted file <nl> mmm PmdPreSite.java <nl> - package net.sourceforge.pmd.maven; <nl> - import java.io.File; <nl> - import java.net.URL; <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - import java.util.Set; <nl> - import net.sourceforge.pmd.build.PmdBuildException; <nl> - import net.sourceforge.pmd.build.PmdBuildTools; <nl> 
mmm PMDConfiguration.java <nl> ppp PMDConfiguration.java <nl> + private RuleSets pmdRuleSets; <nl> + public RuleSets getPmdRuleSets() { <nl> + return pmdRuleSets; <nl> + } <nl> + public void setPmdRuleSets(RuleSets pmdRuleSets) { <nl> + this.pmdRuleSets = pmdRuleSets; <nl> + } <nl> + package net.sourceforge.pmd.lang.apex; <nl> 
mmm PropertyDescriptor.java <nl> ppp PropertyDescriptor.java <nl> - * @deprecated Was never implemented, and is none of the descriptor's concern <nl> - @Deprecated <nl> - * @deprecated Not supported anymore. Behaviour may be wrong. <nl> - *             Property descriptors should only be defined in the XML when defining an XPath rule. <nl> 
new file <nl> ppp WildcardMethod.java <nl> + package net.sourceforge.pmd.typeresolution.testdata.dummytypes; <nl> + public class WildcardMethod { <nl> + public void useWildcard(GenericSuperType<?> param) { <nl> + } <nl> + } <nl> new file <nl> ppp AbstractReturnType.java <nl> + package net.sourceforge.pmd.typeresolution.testdata.dummytypes; <nl> 
mmm GuardLogStatementRule.java <nl> ppp GuardLogStatementRule.java <nl> + import net.sourceforge.pmd.lang.java.ast.ASTStatementExpression; <nl> + private static final String JAVA_UTIL_LOG_METHOD = "log"; <nl> + private static final String JAVA_UTIL_LOG_GUARD_METHOD = "isLoggable"; <nl> - public Object visit(ASTPrimaryExpression node, Object data) { <nl> 
new file <nl> ppp PmdAddin.java <nl> + package net.sourceforge.pmd.jdeveloper; <nl> + import oracle.ide.Addin; <nl> + import oracle.ide.ExtensionRegistry; <nl> + import oracle.ide.Ide; <nl> + import oracle.ide.extension.RegisteredByExtension; <nl> + @RegisteredByExtension("net.sourceforge.pmd.jdeveloper") <nl> 
mmm StringUtil.java <nl> ppp StringUtil.java <nl> - import org.apache.commons.text.StringEscapeUtils; <nl> - * @deprecated for removal. Use {@link StringEscapeUtils#escapeXml10(String)} instead. <nl> + * @deprecated for removal. Use Java's XML implementations, that do the escaping, <nl> + *             use {@link #removedInvalidXml10Characters(String)} for fixing invalid characters in XML 1.0 <nl> 
mmm NPathComplexityRule.java <nl> ppp NPathComplexityRule.java <nl> + import net.sourceforge.pmd.lang.java.ast.MethodLikeNode; <nl> - int npath = (int) JavaMetrics.get(JavaOperationMetricKey.NPATH, node); <nl> + int npath = (int) JavaMetrics.get(JavaOperationMetricKey.NPATH, (MethodLikeNode) node); <nl> mmm ASTFormalParameter.java <nl> 
mmm RuleSetTest.java <nl> ppp RuleSetTest.java <nl> + import net.sourceforge.pmd.Report.ProcessingError; <nl> + import net.sourceforge.pmd.util.CollectionUtil; <nl> + @Test <nl> + public void ruleExceptionShouldBeReported() { <nl> + RuleSet ruleset = createRuleSetBuilder("ruleExceptionShouldBeReported") <nl> 
new file <nl> ppp NodeStyleSpan.java <nl> + package net.sourceforge.pmd.util.fxdesigner.util.codearea; <nl> + import java.util.Collection; <nl> + import java.util.Comparator; <nl> + import java.util.regex.Matcher; <nl> + import java.util.regex.Pattern; <nl> + import org.fxmisc.richtext.model.Paragraph; <nl> 
mmm FileAnalysisCache.java <nl> ppp FileAnalysisCache.java <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + import net.sourceforge.pmd.RuleViolation; <nl> - if (configuration.getClassLoader() instanceof ClasspathClassLoader) { <nl> - IOUtil.tryCloseClassLoader(configuration.getClassLoader()); <nl> 
deleted file <nl> mmm UnusedLocal5.java <nl> - import java.util.*; <nl> - public class UnusedLocal5 { <nl> - static { <nl> - 	String x; <nl> - } <nl> - } <nl> deleted file <nl> mmm UnusedLocal11.java <nl> - public class UnusedLocal11 { <nl> - public void foo() { <nl> - String x = "hi"; <nl> - class Bar { <nl> - public void buz() { <nl> 
mmm RuleSetFactory.java <nl> ppp RuleSetFactory.java <nl> + import net.sourceforge.pmd.RuleSet.RuleSetBuilder; <nl> + import net.sourceforge.pmd.lang.rule.XPathRule; <nl> - this(factory.classLoader, factory.minimumPriority, <nl> - warnDeprecated, factory.compatibilityFilter != null); <nl> + this(factory.classLoader, factory.minimumPriority, warnDeprecated, factory.compatibilityFilter != null); <nl> 
mmm FormalParameterNamingConventionsRule.java <nl> ppp FormalParameterNamingConventionsRule.java <nl> - import net.sourceforge.pmd.properties.RegexProperty; <nl> + package net.sourceforge.pmd.properties; <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.junit.Assert.assertFalse; <nl> 
new file <nl> ppp PMDTest.java <nl> + package net.sourceforge.pmd.cli; <nl> + import java.util.HashSet; <nl> + import java.util.List; <nl> + import java.util.Set; <nl> + import org.junit.Assert; <nl> + import org.junit.Test; <nl> + import net.sourceforge.pmd.PMD; <nl> + import net.sourceforge.pmd.PMDConfiguration; <nl> 
mmm EditPropertyDialogController.java <nl> ppp EditPropertyDialogController.java <nl> + import static net.sourceforge.pmd.util.fxdesigner.util.DesignerUtil.rewire; <nl> - DesignerUtil.rewireInit(spec.nameProperty(), this.nameProperty(), this::setName); <nl> - DesignerUtil.rewireInit(spec.typeIdProperty(), this.typeIdProperty(), this::setTypeId); <nl> 
mmm ASTMethodDeclaration.java <nl> ppp ASTMethodDeclaration.java <nl> - public ASTMethodDeclarator getMethodDeclarator() { <nl> - return getFirstChildOfType(ASTMethodDeclarator.class); <nl> - } <nl> mmm ASTExtendsList.java <nl> ppp ASTExtendsList.java <nl> - import java.util.Iterator; <nl> - public class ASTExtendsList extends AbstractJavaNode implements Iterable<ASTClassOrInterfaceType> { <nl> 
mmm JobThreadListener.java <nl> ppp JobThreadListener.java <nl> - import java.util.EventObject; <nl> - import net.sourceforge.pmd.ast.Node; <nl> - import net.sourceforge.pmd.ast.SimpleNode; <nl> mmm HTMLResultRenderer.java <nl> ppp HTMLResultRenderer.java <nl> - import net.sourceforge.pmd.renderers.Renderer; <nl> 
mmm AbstractNode.java <nl> ppp AbstractNode.java <nl> - @Override <nl> - public abstract String toString(); <nl> + @Override <nl> + public String getXPathNodeName() { <nl> + return toString(); <nl> + } <nl> mmm XmlNodeInvocationHandler.java <nl> ppp XmlNodeInvocationHandler.java <nl> + } else if ("getXPathNodeName".equals(method.getName())) { <nl> 
mmm JspParserVisitorAdapter.java <nl> ppp JspParserVisitorAdapter.java <nl> - public class JspParserVisitorAdapter implements JspParserVisitor { <nl> + import net.sourceforge.pmd.lang.ast.Node; <nl> + import net.sourceforge.pmd.lang.java.ast.impl.BaseGenericVisitor; <nl> + public class JspParserVisitorAdapter extends BaseGenericVisitor implements JspParserVisitor { <nl> 
mmm NoInlineStyleInformationRule.java <nl> ppp NoInlineStyleInformationRule.java <nl> - package net.sourceforge.pmd.lang.jsp.rule.design; <nl> + package net.sourceforge.pmd.lang.jsp.rule.basic; <nl> deleted file <nl> mmm CodeStyleRulesTest.java <nl> - package net.sourceforge.pmd.lang.jsp.rule.codestyle; <nl> 
mmm ClassTypeResolver.java <nl> ppp ClassTypeResolver.java <nl> - 		if (name.indexOf('.') != -1) { <nl> - 			name = name.substring(0, name.indexOf('.')); <nl> - 		} <nl> new file <nl> ppp InvalidSlf4jMessageFormatRule.java <nl> + package net.sourceforge.pmd.lang.java.rule.logging; <nl> + import java.util.Arrays; <nl> 
mmm JdbcQuartzDerbyUtilities.java <nl> ppp JdbcQuartzDerbyUtilities.java <nl> - .getClassLoader().getResourceAsStream("org/quartz/impl/jdbcjobstore/tables_derby.sql"); <nl> + .getClassLoader().getResourceAsStream("tables_derby.sql"); <nl> mmm JdbcQuartzTestUtilities.java <nl> ppp JdbcQuartzTestUtilities.java <nl> 
mmm InvalidateInstalledCodeTest.java <nl> ppp InvalidateInstalledCodeTest.java <nl> - * @ignore 8163894 <nl> mmm IfNode.java <nl> ppp IfNode.java <nl> - if (falseSuccessor instanceof LoopExitNode && ((LoopExitNode) falseSuccessor).stateAfter != null) { <nl> - return false; <nl> - } <nl> - if (falseSuccessor instanceof LoopExitNode && ((LoopExitNode) falseSuccessor).stateAfter != null) { <nl> 
mmm ServerRef.java <nl> ppp ServerRef.java <nl> + @Deprecated <nl> + @SuppressWarnings("serial") <nl> + @Deprecated <nl> + @SuppressWarnings("serial") <nl> mmm RSAMultiPrimePrivateCrtKey.java <nl> ppp RSAMultiPrimePrivateCrtKey.java <nl> + * <nl> + * @deprecated A {@code serialVersionUID} field in an interface is <nl> 
mmm Finished.java <nl> ppp Finished.java <nl> + import javax.net.ssl.SSLPeerUnverifiedException; <nl> + import jdk.internal.event.EventHelper; <nl> + import jdk.internal.event.TLSHandshakeEvent; <nl> + recordEvent(chc.conContext.conSession); <nl> + recordEvent(shc.conContext.conSession); <nl> + recordEvent(chc.conContext.conSession); <nl> 
mmm GenericBlockCipher.java <nl> ppp GenericBlockCipher.java <nl> + import jdk.test.lib.security.SecurityUtils; <nl> + SecurityUtils.removeFromDisabledTlsAlgs("TLSv1", "TLSv1.1"); <nl> mmm SystemPropCipherSuitesOrder.java <nl> ppp SystemPropCipherSuitesOrder.java <nl> + SecurityUtils.removeFromDisabledTlsAlgs("TLSv1"); <nl> 
new file <nl> ppp EmeraldTheme.java <nl> + import javax.swing.plaf.ColorUIResource; <nl> + import javax.swing.plaf.metal.DefaultMetalTheme; <nl> + public class EmeraldTheme extends DefaultMetalTheme { <nl> + public static String NAME = "Emerald"; <nl> + public String getName() { return NAME; } <nl> + private final ColorUIResource primary1 = new ColorUIResource(51, 142, 71); <nl> 
mmm TestProperty.java <nl> ppp TestProperty.java <nl> - public Table setPutIdFirst(boolean first) { <nl> - this.putIdFirst = first; <nl> - return this; <nl> - } <nl> - public Table setUseTBody(boolean use) { <nl> - this.useTBody = use; <nl> - return this; <nl> - } <nl> 
mmm BreakpointWithFullGC.java <nl> ppp BreakpointWithFullGC.java <nl> - super(new Jdb.LaunchOptions(DEBUGGEE_CLASS) <nl> + super(new LaunchOptions(DEBUGGEE_CLASS) <nl> new file <nl> ppp MixedSuspendTest.java <nl> + import lib.jdb.JdbCommand; <nl> + import lib.jdb.JdbTest; <nl> + class MixedSuspendTarg extends Thread { <nl> 
new file <nl> ppp SearchIndexItems.java <nl> + package jdk.javadoc.internal.doclets.formats.html; <nl> + import jdk.javadoc.internal.doclets.toolkit.util.Utils; <nl> + import java.util.Collection; <nl> + import java.util.Collections; <nl> + import java.util.Comparator; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> 
deleted file <nl> mmm MethodHandleDeletedMethod.java <nl> - import java.io.File; <nl> - import java.io.FileInputStream; <nl> - import java.lang.invoke.*; <nl> - class Host { <nl> - static MethodHandle fooMH; <nl> - static class A { <nl> - private static void foo() { System.out.println("OLD foo called"); } <nl> 
mmm BaseRowSet.java <nl> ppp BaseRowSet.java <nl> mmm SerialRef.java <nl> ppp SerialRef.java <nl> 
mmm cgt10.java <nl> ppp cgt10.java <nl> - private static Random random = new Random(); <nl> + private static Random random = Utils.getRandomInstance(); <nl> mmm cgt4.java <nl> ppp cgt4.java <nl> - private static Random random = new Random(); <nl> + private static Random random = Utils.getRandomInstance(); <nl> 
mmm KeepAliveStreamCleaner.java <nl> ppp KeepAliveStreamCleaner.java <nl> - private static HashMap<String,Thread> requests = new HashMap<>(); <nl> + private static final HashMap<String,Thread> requests = new HashMap<>(); <nl> + private static final ReentrantLock requestLock = new ReentrantLock(); <nl> + private static final Condition requestFinished = requestLock.newCondition(); <nl> 
mmm BeaconParserTest.java <nl> ppp BeaconParserTest.java <nl> - import android.annotation.TargetApi; <nl> - import android.os.Build; <nl> - import android.os.Parcel; <nl> - import static android.test.MoreAsserts.assertNotEqual; <nl> - import static org.junit.Assert.assertArrayEquals; <nl> - import static org.junit.Assert.assertEquals; <nl> 
mmm Beacon.java <nl> ppp Beacon.java <nl> - protected Beacon mBeacon; <nl> + protected final Beacon mBeacon; <nl> mmm RangeState.java <nl> ppp RangeState.java <nl> - private Callback mCallback; <nl> + private final Callback mCallback; <nl> mmm RangingData.java <nl> ppp RangingData.java <nl> - private Collection<Beacon> beacons; <nl> 
mmm Stats.java <nl> ppp Stats.java <nl> + if (new Date().getTime() - boundaryTime.getTime() > mSampleIntervalMillis) { <nl> + newSampleInterval(); <nl> + } <nl> mmm StatsTest.java <nl> ppp StatsTest.java <nl> - assertEquals("Two samples should have been collected", 3, samples.size()); <nl> + assertEquals("Two samples should have been collected", 2, samples.size()); <nl> 
new file <nl> ppp ScanDataProcessor.java <nl> + package org.altbeacon.beacon.service; <nl> + import android.annotation.TargetApi; <nl> + import android.app.Service; <nl> + import android.bluetooth.BluetoothDevice; <nl> + import android.bluetooth.le.ScanResult; <nl> + import android.content.pm.ApplicationInfo; <nl> 
mmm SettingsProviderHook.java <nl> ppp SettingsProviderHook.java <nl> - if (args.length > 0 && args[0] instanceof String) { <nl> + if (args != null && args.length > 0 && args[0] instanceof String) { <nl> mmm AppBindDataCompat.java <nl> ppp AppBindDataCompat.java <nl> - import java.lang.reflect.Constructor; <nl> 
mmm ServiceConnectionDelegate.java <nl> ppp ServiceConnectionDelegate.java <nl> + import android.os.Build; <nl> - private final static ArrayMap<ServiceConnection, IServiceConnection> CONNECTION_ARRAY_MAP = new ArrayMap<>(); <nl> - IServiceConnection sd = CONNECTION_ARRAY_MAP.get(connection); <nl> - if(sd != null){ <nl> 
deleted file <nl> mmm AppModel.java <nl> - package io.virtualapp.home.models; <nl> - import android.content.Context; <nl> - import android.content.pm.ApplicationInfo; <nl> - import android.content.pm.PackageInfo; <nl> - import android.content.pm.PackageManager; <nl> - import android.graphics.drawable.Drawable; <nl> 
mmm SwitchOp.java <nl> ppp SwitchOp.java <nl> + int childAddress = address + instruction.getCodeUnits(); <nl> - return new SwitchOp(address, opName, targetAddress, register); <nl> + return new SwitchOp(address, opName, childAddress, targetAddress, register); <nl> + private final int childAddress; <nl> - private SwitchOp(int address, String opName, int targetAddress, int register) { <nl> 
mmm VMTester.java <nl> ppp VMTester.java <nl> - ClassContext cctx = vm.getClassContext(contextClassName); <nl> + ClassContext cctx = vm.peekClassContext(contextClassName); <nl> - ClassContext cctx = vm.getClassContext(contextClassName); <nl> + ClassContext cctx = vm.peekClassContext(contextClassName); <nl> 
mmm SPutOp.java <nl> ppp SPutOp.java <nl> + import simplify.vm.SideEffect; <nl> + @Override <nl> + public SideEffect.Type sideEffectType() { <nl> + return SideEffect.Type.WEAK; <nl> + } <nl> mmm DeadRemover.java <nl> ppp DeadRemover.java <nl> + import simplify.vm.SideEffect; <nl> + private static final SideEffect.Type SIDE_EFFECT_THRESHOLD = SideEffect.Type.WEAK; <nl> 
mmm UnimplementedOpHandler.java <nl> ppp UnimplementedOpHandler.java <nl> - package simplify.handlers; <nl> + package simplify.vm.handlers; <nl> mmm SwitchPayloadOpHandler.java <nl> ppp SwitchPayloadOpHandler.java <nl> - package simplify.handlers; <nl> + package simplify.vm.handlers; <nl> mmm NewInstanceOpHandler.java <nl> 
mmm MethodExecutor.java <nl> ppp MethodExecutor.java <nl> - addChildNodes(executeStack, graph, childAddresses, currentNode.getIndex()); <nl> + for (int address : childAddresses) { <nl> + ContextNode childNode = new ContextNode(graph.getTemplateNode(address)); <nl> + childNode.setContext(new MethodContext(currentNode.getContext())); <nl> 
mmm Method.java <nl> ppp Method.java <nl> + import java.util.HashMap; <nl> + import java.util.TreeMap; <nl> + import simplify.graph.Node; <nl> - private final String parentFile; <nl> + private final String classFile; <nl> - private final Map<String, Integer> jumps; <nl> + private final Map<Integer, Node> lineNodeMap; <nl> 
mmm ReflectionMethodResolutionLogic.java <nl> ppp ReflectionMethodResolutionLogic.java <nl> - methodUsage = methodUsage.replaceTypeParameterByName(tp.getName(), typeParameterValues.get(i)); <nl> + methodUsage = methodUsage.replaceTypeParameterByName(tp, typeParameterValues.get(i)); <nl> - methodUsage = methodUsage.replaceTypeParameterByName(methodTypeParameter.getName(), new TypeVariable(methodTypeParameter)); <nl> 
mmm NoCommentHashCodeVisitor.java <nl> ppp NoCommentHashCodeVisitor.java <nl> - return (n.getLabel().isPresent() ? n.getLabel().get().accept(this, arg) : 0); <nl> + return (n.getValue().isPresent() ? n.getValue().get().accept(this, arg) : 0); <nl> mmm CloneVisitor.java <nl> ppp CloneVisitor.java <nl> - import com.github.javaparser.ast.comments.*; <nl> 
mmm LexicalDifferenceCalculator.java <nl> ppp LexicalDifferenceCalculator.java <nl> - List<DifferenceElement> calculateListRemovalDifference(ObservableProperty observableProperty, NodeList nodeList, int index) { <nl> + List<DifferenceElement> calculateListRemovalDifference(ObservableProperty observableProperty, NodeList<?> nodeList, int index) { <nl> 
new file <nl> ppp LambdaThrowsCompatibleWithType.java <nl> + package com.github.javaparser.symbolsolver.resolution.typeinference.constraintformulas; <nl> + import com.github.javaparser.ast.expr.LambdaExpr; <nl> + import com.github.javaparser.symbolsolver.model.typesystem.Type; <nl> + import com.github.javaparser.symbolsolver.resolution.typeinference.BoundSet; <nl> 
mmm NameExpr.java <nl> ppp NameExpr.java <nl> + 	@Override <nl> mmm BodyDeclaration.java <nl> ppp BodyDeclaration.java <nl> + @Override <nl> mmm PositionUtils.java <nl> ppp PositionUtils.java <nl> - if (annotations.size()==0){ <nl> + if (annotations.isEmpty()){ <nl> mmm CommentsParser.java <nl> ppp CommentsParser.java <nl> 
new file <nl> ppp AssociableToAST.java <nl> + package com.github.javaparser.resolution.declarations; <nl> + import com.github.javaparser.ast.Node; <nl> + import java.util.Optional; <nl> + public interface AssociableToAST<N extends Node> { <nl> + default Optional<N> toAst() { <nl> + throw new UnsupportedOperationException(); <nl> 
mmm NodeWithType.java <nl> ppp NodeWithType.java <nl> + import static com.github.javaparser.JavaParser.parseClassOrInterfaceType; <nl> - return addField(new ClassOrInterfaceType(type), name, modifiers); <nl> + return addField(parseClassOrInterfaceType(type), name, modifiers); <nl> - return addParameter(new ClassOrInterfaceType(className), name); <nl> 
mmm MethodDeclarationTest.java <nl> ppp MethodDeclarationTest.java <nl> + import static org.junit.Assert.assertNotEquals; <nl> + @Test <nl> + public void signaturesEqual() { <nl> + MethodDeclaration method1 = (MethodDeclaration) parseClassBodyDeclaration("void x(String a) { }"); <nl> + MethodDeclaration method2 = (MethodDeclaration) parseClassBodyDeclaration("int x(String z);"); <nl> 
mmm MethodReferenceExpr.java <nl> ppp MethodReferenceExpr.java <nl> + import com.github.javaparser.ast.nodeTypes.NodeWithIdentifier; <nl> - public class MethodReferenceExpr extends Expression implements NodeWithTypeArguments<MethodReferenceExpr> { <nl> + public class MethodReferenceExpr extends Expression implements <nl> 
mmm EqualsVisitor.java <nl> ppp EqualsVisitor.java <nl> - @Override <nl> - @Generated("com.github.javaparser.generator.core.visitor.EqualsVisitorGenerator") <nl> - public Boolean visit(final EmptyMemberDeclaration n, final Visitable arg) { <nl> - final EmptyMemberDeclaration n2 = (EmptyMemberDeclaration) arg; <nl> 
mmm TypeParameter.java <nl> ppp TypeParameter.java <nl> - public final class TypeParameter extends Node implements NamedNode { <nl> + public final class TypeParameter extends Node { <nl> mmm ConstructorDeclaration.java <nl> ppp ConstructorDeclaration.java <nl> - import com.github.javaparser.ast.NamedNode; <nl> 
mmm ArrayType.java <nl> ppp ArrayType.java <nl> - public final class ArrayType extends ReferenceType<ResolvedArrayType> implements NodeWithAnnotations<ArrayType> { <nl> + public final class ArrayType extends ReferenceType implements NodeWithAnnotations<ArrayType> { <nl> mmm Type.java <nl> ppp Type.java <nl> 
mmm PrettyPrintVisitor.java <nl> ppp PrettyPrintVisitor.java <nl> - printer.print(" "); <nl> + if (configuration.isSpacesBetweenOperators()) { <nl> + printer.print(" "); <nl> + } <nl> - printer.print(" "); <nl> + if (configuration.isSpacesBetweenOperators()) { <nl> + printer.print(" "); <nl> + } <nl> - printer.print(" "); <nl> 
mmm AnnotationDeclaration.java <nl> ppp AnnotationDeclaration.java <nl> - import com.github.javaparser.ast.comments.JavadocComment; <nl> - @Override <nl> - public void setJavaDoc(JavadocComment javadocComment) { <nl> - this.javadocComment = javadocComment; <nl> - } <nl> - @Override <nl> - public JavadocComment getJavaDoc() { <nl> 
new file <nl> ppp TestUtils.java <nl> + package com.github.javaparser.utils; <nl> + import java.io.BufferedReader; <nl> + import java.io.IOException; <nl> + import java.io.InputStream; <nl> + import java.io.InputStreamReader; <nl> + public class TestUtils { <nl> + public static String readFileWith(String resourceName) throws IOException { <nl> 
mmm CompilationUnitTest.java <nl> ppp CompilationUnitTest.java <nl> + import com.github.javaparser.JavaParser; <nl> - Path sourceRoot1 = cu.getStorage().get().getSourceRoot(); <nl> + cu.getStorage().get().getSourceRoot(); <nl> + @Test <nl> + public void testGetPrimaryTypeName() throws IOException { <nl> + Path sourceRoot = mavenModuleRoot(CompilationUnitTest.class).resolve(Paths.get("src", "test", "resources")).normalize(); <nl> 
mmm JavaParserTypeParameter.java <nl> ppp JavaParserTypeParameter.java <nl> + import me.tomassetti.symbolsolver.model.declarations.MethodDeclaration; <nl> + import java.util.Set; <nl> + @Override <nl> + public Set<MethodDeclaration> getDeclaredMethods() { <nl> + return Collections.emptySet(); <nl> + } <nl> new file <nl> 
new file <nl> ppp CsmConditional.java <nl> + package com.github.javaparser.printer.concretesyntaxmodel; <nl> + import com.github.javaparser.ast.Node; <nl> + import com.github.javaparser.ast.observer.ObservableProperty; <nl> + import com.github.javaparser.printer.ConcreteSyntaxModel; <nl> + import com.github.javaparser.printer.SourcePrinter; <nl> 
mmm ParsingSteps.java <nl> ppp ParsingSteps.java <nl> - assertEquals(expected, node.getPackageName()); <nl> + assertEquals(expected, node.getNameAsString()); <nl> mmm ConstructorDeclaration.java <nl> ppp ConstructorDeclaration.java <nl> + @Override <nl> + @Override <nl> + @Override <nl> mmm CompilationUnitBuildersTest.java <nl> 
mmm LexicalDifferenceCalculator.java <nl> ppp LexicalDifferenceCalculator.java <nl> - import com.github.javaparser.JavaToken.Kind; <nl> - import com.github.javaparser.printer.lexicalpreservation.changes.*; <nl> - import com.github.javaparser.utils.Utils; <nl> - import java.util.*; <nl> + import com.github.javaparser.printer.lexicalpreservation.changes.Change; <nl> 
mmm ClassExpr.java <nl> ppp ClassExpr.java <nl> + import com.github.javaparser.ast.TypedNode; <nl> - public final class ClassExpr extends Expression { <nl> + public final class ClassExpr extends Expression implements TypedNode { <nl> + @Override <nl> + @Override <nl> mmm FieldDeclaration.java <nl> ppp FieldDeclaration.java <nl> 
mmm DocumentableNode.java <nl> ppp DocumentableNode.java <nl> mmm AnnotationDeclaration.java <nl> ppp AnnotationDeclaration.java <nl> + @Override <nl> + public void setJavaDoc(JavadocComment javadocComment) { <nl> + } <nl> - @Override <nl> - public void setJavaDoc(JavadocComment javadocComment) { <nl> - this.javadocComment = javadocComment; <nl> 
new file <nl> ppp ArrayTypeTest.java <nl> + package com.github.javaparser.ast.type; <nl> + import com.github.javaparser.ast.body.FieldDeclaration; <nl> + import com.github.javaparser.ast.body.MethodDeclaration; <nl> + import com.github.javaparser.ast.body.Parameter; <nl> + import com.github.javaparser.ast.expr.ArrayCreationExpr; <nl> 
mmm CoreVisitorsGenerator.java <nl> ppp CoreVisitorsGenerator.java <nl> + new EqualsVisitorGenerator(javaParser, sourceRoot, javaParserMetaModel).generate(); <nl> + new VoidVisitorAdapterGenerator(javaParser, sourceRoot, javaParserMetaModel).generate(); <nl> + new VoidVisitorGenerator(javaParser, sourceRoot, javaParserMetaModel).generate(); <nl> 
mmm HasParentNode.java <nl> ppp HasParentNode.java <nl> - import java.util.List; <nl> + private NodeList nodeList; <nl> + private Node oldValue; <nl> - public ListReplacementChange(ObservableProperty observableProperty, int index, Node newValue) { <nl> + public ListReplacementChange(ObservableProperty observableProperty, NodeList nodeList, int index, Node oldValue, Node newValue) { <nl> 
mmm UtilsTest.java <nl> ppp UtilsTest.java <nl> + @Test <nl> + public void testTrimTrailingSpaces() { <nl> + assertEquals("abc", trimTrailingSpaces("abc")); <nl> + assertEquals("  abc", trimTrailingSpaces("  abc")); <nl> + assertEquals("abc", trimTrailingSpaces("abc  ")); <nl> + assertEquals("  abc", trimTrailingSpaces("  abc  ")); <nl> 
mmm LambdaTypeUsagePlaceholder.java <nl> ppp LambdaTypeUsagePlaceholder.java <nl> - @Override <nl> - public String prettyPrint() { <nl> - throw new UnsupportedOperationException(); <nl> - } <nl> mmm WildcardUsage.java <nl> ppp WildcardUsage.java <nl> - @Override <nl> - public String prettyPrint() { <nl> - return describe(); <nl> 
mmm Removed.java <nl> ppp Removed.java <nl> + @Override <nl> + public boolean isRemoved() { <nl> + return true; <nl> + } <nl> mmm Kept.java <nl> ppp Kept.java <nl> + public boolean isNewLine() { <nl> + if(isToken()) { <nl> + CsmToken csmToken = (CsmToken) element; <nl> + return csmToken.isNewLine(); <nl> + } <nl> 
mmm ClassOrInterfaceDeclarationContext.java <nl> ppp ClassOrInterfaceDeclarationContext.java <nl> - import com.github.javaparser.ast.Node; <nl> - import com.github.javaparser.ast.body.VariableDeclarator; <nl> - import java.util.LinkedList; <nl> - @Override <nl> - public List<ResolvedFieldDeclaration> fieldsExposedToChild(Node child) { <nl> 
mmm LineSeparatorProcessorTest.java <nl> ppp LineSeparatorProcessorTest.java <nl> - public void doTest(LineSeparator eol) { <nl> + public void doTest(LineSeparator lineSeparator) { <nl> + String eol = lineSeparator.asRawString(); <nl> mmm Node.java <nl> ppp Node.java <nl> - toStringPrettyPrinterConfiguration.setEndOfLineCharacter(lineSeparator.toRawString()); <nl> 
mmm JavassistInterfaceDeclaration.java <nl> ppp JavassistInterfaceDeclaration.java <nl> - import me.tomassetti.symbolsolver.logic.MethodResolutionLogic; <nl> + import me.tomassetti.symbolsolver.resolution.MethodResolutionLogic; <nl> - import java.sql.Ref; <nl> mmm JavaParserClassDeclaration.java <nl> ppp JavaParserClassDeclaration.java <nl> 
mmm JavaParserMetaModel.java <nl> ppp JavaParserMetaModel.java <nl> - enclosedExprMetaModel.innerPropertyMetaModel = new PropertyMetaModel(enclosedExprMetaModel, "inner", com.github.javaparser.ast.expr.Expression.class, Optional.of(expressionMetaModel), true, false, false, false, false); <nl> + enclosedExprMetaModel.innerPropertyMetaModel = new PropertyMetaModel(enclosedExprMetaModel, "inner", com.github.javaparser.ast.expr.Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false); <nl> 
mmm JavassistMethodDeclaration.java <nl> ppp JavassistMethodDeclaration.java <nl> - return new JavassistParameterDeclaration(ctMethod.getParameterTypes()[i], typeSolver); <nl> + boolean variadic = false; <nl> + if ((ctMethod.getModifiers() & javassist.Modifier.VARARGS) > 0) { <nl> + variadic = i == (ctMethod.getParameterTypes().length - 1); <nl> 
mmm AnalyseJavaParserTest.java <nl> ppp AnalyseJavaParserTest.java <nl> - import com.github.javaparser.symbolsolver.AbstractTest; <nl> + import com.github.javaparser.symbolsolver.AbstractSymbolResolutionTest; <nl> - public class AnalyseJavaParserTest extends AbstractTest { <nl> + public class AnalyseJavaParserTest extends AbstractSymbolResolutionTest { <nl> 
mmm MethodLikeDeclaration.java <nl> ppp MethodLikeDeclaration.java <nl> + default String getPackageName() { <nl> + return declaringType().getPackageName(); <nl> + } <nl> + default String getClassName() { <nl> + return declaringType().getClassName(); <nl> + } <nl> + default String getPackageName() { <nl> + throw new UnsupportedOperationException(); <nl> 
mmm ReflectionClassDeclaration.java <nl> ppp ReflectionClassDeclaration.java <nl> + @Override <nl> + public List<FieldDeclaration> getAllFields() { <nl> + ArrayList<FieldDeclaration> fields = new ArrayList<>(); <nl> + for (Field field : clazz.getDeclaredFields()) { <nl> + fields.add(new ReflectionFieldDeclaration(field, typeSolver)); <nl> 
mmm CompilationUnit.java <nl> ppp CompilationUnit.java <nl> - import com.github.javaparser.ast.Node; <nl> + public ModuleDeclaration addModule(String name) { <nl> + return new ModuleDeclaration(parseName(name), false); <nl> + } <nl> mmm JavaParserTest.java <nl> ppp JavaParserTest.java <nl> + import org.junit.After; <nl> 
mmm JavaParserAnnotationDeclaration.java <nl> ppp JavaParserAnnotationDeclaration.java <nl> + import java.util.Collections; <nl> + @Override <nl> + public List<ResolvedConstructorDeclaration> getConstructors() { <nl> + return Collections.emptyList(); <nl> + } <nl> mmm JavassistEnumDeclaration.java <nl> ppp JavassistEnumDeclaration.java <nl> 
mmm ZookeeperRegistrationFactory.java <nl> ppp ZookeeperRegistrationFactory.java <nl> - import com.alibaba.dubbo.common.URL; <nl> + import org.apache.dubbo.common.URL; <nl> mmm StandardRestService.java <nl> ppp StandardRestService.java <nl> - import com.alibaba.dubbo.rpc.RpcContext; <nl> + import org.apache.dubbo.rpc.RpcContext; <nl> 
mmm NacosDiscoveryClientAutoConfiguration.java <nl> ppp NacosDiscoveryClientAutoConfiguration.java <nl> - package org.springframework.cloud.alibaba.nacos.discovery; <nl> + package org.springframework.cloud.alibaba.nacos; <nl> - import org.springframework.boot.autoconfigure.AutoConfigureBefore; <nl> - import org.springframework.cloud.alibaba.nacos.ConditionalOnNacosDiscoveryEnabled; <nl> 
mmm NacosDiscoveryClient.java <nl> ppp NacosDiscoveryClient.java <nl> + String group = discoveryProperties.getGroup(); <nl> - .selectInstances(serviceId, true); <nl> + .selectInstances(serviceId, group, true); <nl> + String group = discoveryProperties.getGroup(); <nl> - .getServicesOfServer(1, Integer.MAX_VALUE); <nl> 
mmm SentinelDataSourceHandler.java <nl> ppp SentinelDataSourceHandler.java <nl> - import java.util.ArrayList; <nl> - import java.util.Collections; <nl> + import org.springframework.beans.factory.SmartInitializingSingleton; <nl> - import org.springframework.boot.context.event.ApplicationStartedEvent; <nl> - import org.springframework.context.event.EventListener; <nl> 
mmm RocketMQInboundChannelAdapter.java <nl> ppp RocketMQInboundChannelAdapter.java <nl> - import org.apache.commons.lang3.ClassUtils; <nl> - import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer; <nl> - import org.apache.rocketmq.client.consumer.MessageSelector; <nl> - import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext; <nl> 
new file <nl> ppp TransactionListenerImpl.java <nl> + package org.springframework.cloud.alibaba.cloud.examples; <nl> + import java.util.HashMap; <nl> + import org.apache.rocketmq.spring.annotation.RocketMQTransactionListener; <nl> + import org.apache.rocketmq.spring.core.RocketMQLocalTransactionListener; <nl> 
new file <nl> ppp SpringCloudConfigServerApplication.java <nl> + package com.alibaba.cloud.examples; <nl> + import org.springframework.boot.SpringApplication; <nl> + import org.springframework.boot.autoconfigure.SpringBootApplication; <nl> + import org.springframework.cloud.client.discovery.EnableDiscoveryClient; <nl> 
mmm SeataFeignClient.java <nl> ppp SeataFeignClient.java <nl> - 		List<String> fescarXid = new ArrayList<>(); <nl> - 		fescarXid.add(xid); <nl> - 		headers.put(RootContext.KEY_XID, fescarXid); <nl> + 		List<String> seataXid = new ArrayList<>(); <nl> + 		seataXid.add(xid); <nl> + 		headers.put(RootContext.KEY_XID, seataXid); <nl> 
new file <nl> ppp NacosServerListTests.java <nl> + package org.springframework.cloud.alibaba.nacos.ribbon; <nl> + import java.util.ArrayList; <nl> + import java.util.Collections; <nl> + import java.util.HashMap; <nl> + import java.util.List; <nl> + import java.util.stream.Collectors; <nl> + import com.alibaba.nacos.api.naming.NamingService; <nl> 
mmm DubboCloudProperties.java <nl> ppp DubboCloudProperties.java <nl> - import static com.alibaba.cloud.dubbo.util.DubboCloudConstants.CONFIG_PROPERTY_PREFIX; <nl> - @ConfigurationProperties(prefix = CONFIG_PROPERTY_PREFIX) <nl> + @ConfigurationProperties(prefix = "dubbo.cloud") <nl> - package com.alibaba.cloud.dubbo.gateway; <nl> 
mmm AcmEndpoint.java <nl> ppp AcmEndpoint.java <nl> - 	private ThreadLocal<DateFormat> dateFormat = new ThreadLocal<DateFormat>() { <nl> - 		@Override <nl> - 		protected DateFormat initialValue() { <nl> - 			return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); <nl> - 		} <nl> - 	}; <nl> + 	private DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); <nl> 
mmm RocketMQMessageHandler.java <nl> ppp RocketMQMessageHandler.java <nl> - private DefaultMQProducer producer; <nl> - private ProducerInstrumentation producerInstrumentation; <nl> - private final RocketMQProducerProperties producerProperties; <nl> - private final String destination; <nl> - private final RocketMQBinderConfigurationProperties rocketBinderConfigurationProperties; <nl> 
new file <nl> ppp DubboCloudConstants.java <nl> + package com.alibaba.cloud.dubbo.util; <nl> + public interface DubboCloudConstants { <nl> + 	String CONFIG_PROPERTY_PREFIX = "dubbo.cloud"; <nl> + } <nl> new file <nl> ppp DubboSpringCloudGatewayFilter.java <nl> + package com.alibaba.cloud.dubbo.gateway.standard; <nl> 
new file <nl> ppp ExtensionRegister11Impl.java <nl> + package de.plushnikov.intellij.lombok.extension; <nl> + import com.intellij.openapi.extensions.Extensions; <nl> + import com.intellij.openapi.extensions.LoadingOrder; <nl> + import com.intellij.psi.impl.source.tree.TreeGenerator; <nl> + import com.intellij.refactoring.rename.RenameHandler; <nl> 
mmm PsiMethodUtil.java <nl> ppp PsiMethodUtil.java <nl> - import com.intellij.psi.*; <nl> + import com.intellij.psi.JavaPsiFacade; <nl> + import com.intellij.psi.PsiClass; <nl> + import com.intellij.psi.PsiElement; <nl> + import com.intellij.psi.PsiElementFactory; <nl> + import com.intellij.psi.PsiManager; <nl> 
mmm ProjectSettings.java <nl> ppp ProjectSettings.java <nl> - PropertiesComponent properties = PropertiesComponent.getInstance(project); <nl> + return isEnabled(PropertiesComponent.getInstance(project), propertyName); <nl> + } <nl> + public static boolean isEnabled(PropertiesComponent properties, String propertyName) { <nl> 
deleted file <nl> mmm LombokLightClassBuilderImpl.java <nl> - package de.plushnikov.intellij.lombok.psi; <nl> - import com.intellij.lang.Language; <nl> - import com.intellij.lang.java.JavaLanguage; <nl> - import com.intellij.openapi.util.Pair; <nl> - import com.intellij.psi.*; <nl> - import com.intellij.psi.impl.light.*; <nl> 
mmm MongoDbIO.java <nl> ppp MongoDbIO.java <nl> + import javax.net.ssl.SSLContext; <nl> - int maxConnectionIdleTime, boolean sslEnabled, boolean sslInvalidHostNameAllowed) { <nl> + int maxConnectionIdleTime, <nl> + boolean sslEnabled, <nl> + boolean sslInvalidHostNameAllowed, <nl> + boolean ignoreSSLCertificate) { <nl> 
mmm DoFnOperator.java <nl> ppp DoFnOperator.java <nl> + import java.util.LinkedHashMap; <nl> + import org.apache.beam.runners.core.InMemoryBundleFinalizer; <nl> + import org.apache.beam.sdk.transforms.DoFn.BundleFinalizer; <nl> + private transient InMemoryBundleFinalizer bundleFinalizer; <nl> + private transient LinkedHashMap<Long, List<InMemoryBundleFinalizer.Finalization>> <nl> 
mmm BigQueryIOWriteTest.java <nl> ppp BigQueryIOWriteTest.java <nl> - import com.google.api.services.bigquery.model.Job; <nl> - import com.google.api.services.bigquery.model.JobConfigurationLoad; <nl> - import java.util.EnumSet; <nl> - import java.util.Set; <nl> - import java.util.stream.Collectors; <nl> - import org.apache.beam.sdk.io.gcp.bigquery.BigQueryIO.Write.SchemaUpdateOption; <nl> 
mmm FlinkExecutionEnvironmentsTest.java <nl> ppp FlinkExecutionEnvironmentsTest.java <nl> + @Test <nl> + public void shouldAutoSetIdleSourcesFlagWithoutCheckpointing() { <nl> + FlinkPipelineOptions options = PipelineOptionsFactory.as(FlinkPipelineOptions.class); <nl> + FlinkExecutionEnvironments.createStreamExecutionEnvironment(options, Collections.emptyList()); <nl> 
mmm BeamTableFunctionScanRel.java <nl> ppp BeamTableFunctionScanRel.java <nl> + import java.util.ArrayList; <nl> + import java.util.Collection; <nl> + import org.apache.beam.sdk.coders.KvCoder; <nl> + import org.apache.beam.sdk.coders.RowCoder; <nl> + import org.apache.beam.sdk.extensions.sql.impl.TVFSlidingWindowFn; <nl> 
deleted file <nl> mmm PeriodicSequence.java <nl> - package org.apache.beam.sdk.transforms; <nl> - import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument; <nl> - import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkNotNull; <nl> 
new file <nl> ppp BeamKafkaTableTest.java <nl> + package org.apache.beam.sdk.extensions.sql.meta.provider.kafka; <nl> + import org.apache.beam.sdk.testing.PAssert; <nl> + import org.apache.beam.sdk.testing.TestPipeline; <nl> + import org.apache.beam.sdk.transforms.Create; <nl> + import org.apache.beam.sdk.transforms.MapElements; <nl> 
mmm BeamZetaSqlCalcRel.java <nl> ppp BeamZetaSqlCalcRel.java <nl> + import org.apache.beam.sdk.extensions.sql.meta.provider.bigquery.BeamSqlUnparseContext; <nl> - context = new SqlImplementor.SimpleContext(DIALECT, fn); <nl> + context = new BeamSqlUnparseContext(fn); <nl> mmm CoderTypeSerializer.java <nl> 
mmm PropertyNames.java <nl> ppp PropertyNames.java <nl> + public static final String ALLOWS_SHARDABLE_STATE = "allows_shardable_state"; <nl> mmm ArrayScanColumnRefToUncollect.java <nl> ppp ArrayScanColumnRefToUncollect.java <nl> + import org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.rex.RexBuilder; <nl> 
mmm PipelineTranslationTest.java <nl> ppp PipelineTranslationTest.java <nl> - import static org.hamcrest.Matchers.hasItem; <nl> - private static class DoFnRequiringStableInput extends DoFn<Integer, String> { <nl> - @RequiresStableInput <nl> - @ProcessElement <nl> - public void process(ProcessContext c) { <nl> 
deleted file <nl> mmm VideoIntelligence.java <nl> - package org.apache.beam.sdk.extensions.ml; <nl> - import com.google.cloud.videointelligence.v1.Feature; <nl> - import com.google.cloud.videointelligence.v1.VideoAnnotationResults; <nl> - import com.google.cloud.videointelligence.v1.VideoContext; <nl> - import com.google.protobuf.ByteString; <nl> 
mmm BeamKafkaTable.java <nl> ppp BeamKafkaTable.java <nl> - protected abstract PTransform<PCollection<KV<byte[], byte[]>>, PCollection<Row>> <nl> + public abstract PTransform<PCollection<KV<byte[], byte[]>>, PCollection<Row>> <nl> - protected abstract PTransform<PCollection<Row>, PCollection<KV<byte[], byte[]>>> <nl> 
mmm SqlTransform.java <nl> ppp SqlTransform.java <nl> - * per-transform with {@link #withQueryPlannerClass(Class<? extends QueryPlanner)}. <nl> + * per-transform with {@link #withQueryPlannerClass(Class<? extends QueryPlanner>)}. <nl> mmm SqlStdOperatorMappingTable.java <nl> ppp SqlStdOperatorMappingTable.java <nl> 
mmm FlinkExecutionEnvironmentsTest.java <nl> ppp FlinkExecutionEnvironmentsTest.java <nl> - import java.net.InetSocketAddress; <nl> - import org.apache.flink.configuration.Configuration; <nl> - import org.powermock.reflect.exceptions.FieldNotFoundException; <nl> - checkHostAndPort(bev, "host", 1234); <nl> 
mmm FnApiDoFnRunner.java <nl> ppp FnApiDoFnRunner.java <nl> + import java.util.Arrays; <nl> + import java.util.List; <nl> + import org.apache.beam.fn.harness.PTransformRunnerFactory.ProgressRequestCallback; <nl> + import org.apache.beam.model.pipeline.v1.MetricsApi.MonitoringInfo; <nl> + import org.apache.beam.runners.core.metrics.MonitoringInfoConstants; <nl> 
mmm SnowflakeService.java <nl> ppp SnowflakeService.java <nl> - package org.apache.beam.sdk.io.snowflake.services; <nl> + package org.apache.beam.sdk.io.snowflake; <nl> + import java.sql.SQLException; <nl> + import javax.sql.DataSource; <nl> + import org.apache.beam.sdk.transforms.SerializableFunction; <nl> 
new file <nl> ppp PeriodicImpulseTest.java <nl> + package org.apache.beam.sdk.transforms; <nl> + import java.util.ArrayList; <nl> + import org.apache.beam.sdk.testing.NeedsRunner; <nl> + import org.apache.beam.sdk.testing.PAssert; <nl> + import org.apache.beam.sdk.testing.TestPipeline; <nl> + import org.apache.beam.sdk.testing.UsesImpulse; <nl> 
mmm LocalFileSystemRegistrarTest.java <nl> ppp LocalFileSystemRegistrarTest.java <nl> - Iterable<FileSystem> fileSystems = registrar.fromOptions(PipelineOptionsFactory.create()); <nl> + Iterable<FileSystem<?>> fileSystems = registrar.fromOptions(PipelineOptionsFactory.create()); <nl> mmm FileSystemRegistrar.java <nl> 
mmm CachingShuffleBatchReader.java <nl> ppp CachingShuffleBatchReader.java <nl> + import java.time.Duration; <nl> - import java.util.concurrent.TimeUnit; <nl> + import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.cache.Weigher; <nl> + import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.primitives.Ints; <nl> 
mmm BigQueryStorageStreamSource.java <nl> ppp BigQueryStorageStreamSource.java <nl> + if (fraction <= 0.0 || fraction >= 1.0) { <nl> + LOG.info("BigQuery Storage API does not support splitting at fraction {}", fraction); <nl> + return null; <nl> + } <nl> mmm PrecombineGroupingTable.java <nl> ppp PrecombineGroupingTable.java <nl> 
mmm FhirIOReadIT.java <nl> ppp FhirIOReadIT.java <nl> - import org.junit.Ignore; <nl> - @Ignore("BEAM-10419 ignore due to flakiness.") <nl> mmm RowTest.java <nl> ppp RowTest.java <nl> - @Test <nl> - public void testWithFieldValues() { <nl> - EnumerationType enumerationType = EnumerationType.create("zero", "one", "two"); <nl> 
mmm AvroUtils.java <nl> ppp AvroUtils.java <nl> - String underscore = CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, field.getName()); <nl> - mapping.put(underscore, field.getName()); <nl> + String fieldName = field.getName(); <nl> + String getter; <nl> + if (fieldName.contains("_")) { <nl> + if (Character.isLowerCase(fieldName.charAt(0))) { <nl> 
mmm SkinCompatSeekBarHelper.java <nl> ppp SkinCompatSeekBarHelper.java <nl> - mView.setThumb(SkinCompatResources.getInstance().getDrawable(mThumbResId)); <nl> + mView.setThumb(SkinCompatResources.getInstance().getDrawable(mView.getContext(), mThumbResId)); <nl> mmm SkinActivityLifecycle.java <nl> ppp SkinActivityLifecycle.java <nl> 
mmm FunctionInjectorTest.java <nl> ppp FunctionInjectorTest.java <nl> - import java.util.HashSet; <nl> - import java.util.Set; <nl> - private boolean allowMethodCallDecomposition; <nl> - allowMethodCallDecomposition = false; <nl> - @Test <nl> - public void cannotInlineReferenceToFunctionInMethodCall() { <nl> 
mmm IRFactoryTest.java <nl> ppp IRFactoryTest.java <nl> - "    EXPR_RESULT 1 [source_file: FileName.js] [length: 10]\n" + <nl> + "    EXPR_RESULT 1 [source_file: FileName.js] [length: 11]\n" + <nl> - "    EXPR_RESULT 1 [source_file: FileName.js] [length: 13]\n" + <nl> + "    EXPR_RESULT 1 [source_file: FileName.js] [length: 14]\n" + <nl> 
mmm CheckJSDoc.java <nl> ppp CheckJSDoc.java <nl> - valid = n.getParent().isExprResult() <nl> - && (lvalue.isGetProp() <nl> - || lvalue.isGetElem() <nl> - || lvalue.matchesQualifiedName("exports")); <nl> + valid = <nl> + n.getParent().isExprResult() <nl> + && (lvalue.isGetProp() || lvalue.isGetElem() || lvalue.matchesName("exports")); <nl> 
mmm IntegrationTestCase.java <nl> ppp IntegrationTestCase.java <nl> - package com.google.javascript.jscomp.testing; <nl> + package com.google.javascript.jscomp.integration; <nl> + import com.google.javascript.jscomp.testing.JSChunkGraphBuilder; <nl> + import com.google.javascript.jscomp.testing.JSCompCorrespondences; <nl> 
mmm DevirtualizePrototypeMethodsTest.java <nl> ppp DevirtualizePrototypeMethodsTest.java <nl> + import static com.google.common.truth.Truth.assertWithMessage; <nl> - assertTrue("Expected number: " + number, number.isNumberValueType()); <nl> + assertWithMessage("Expected number: " + number).that(number.isNumberValueType()).isTrue(); <nl> 
mmm TypeTransformation.java <nl> ppp TypeTransformation.java <nl> - private class NameResolver { <nl> + private static class NameResolver { <nl> mmm FunctionToBlockMutatorTest.java <nl> ppp FunctionToBlockMutatorTest.java <nl> - class TestCallback implements Callback { <nl> + static class TestCallback implements Callback { <nl> 
mmm ClosureCheckModule.java <nl> ppp ClosureCheckModule.java <nl> - for (Node nameNode : NodeUtil.getLhsNodesOfDeclaration(declaration)) { <nl> + for (Node nameNode : NodeUtil.findLhsNodesInNode(declaration)) { <nl> mmm PureFunctionIdentifierTest.java <nl> ppp PureFunctionIdentifierTest.java <nl> - assertPureCallsMarked("var a; " + <nl> 
mmm UnionFind.java <nl> ppp UnionFind.java <nl> - private final <nl> - Function<TypePair, TypePair> INEQ = <nl> + private final Function<TypePair, TypePair> ineq = <nl> - return caseEquality(condition, blindScope, INEQ); <nl> + return caseEquality(condition, blindScope, ineq); <nl> mmm JsDocInfoParser.java <nl> 
mmm CrossModuleCodeMotionTest.java <nl> ppp CrossModuleCodeMotionTest.java <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> + import org.junit.runners.JUnit4; <nl> + @RunWith(JUnit4.class) <nl> + @Before <nl> + @Test <nl> + @Test <nl> + @Test <nl> + @Test <nl> 
mmm NewTypeInferenceWithTranspilationTest.java <nl> ppp NewTypeInferenceWithTranspilationTest.java <nl> + typeCheck( <nl> + LINE_JOINER.join( <nl> + "class A {", <nl> + "  constructor(x) {}", <nl> + "}", <nl> + "class B extends A {", <nl> + "  constructor(x) {", <nl> + "    super(123);", <nl> + "  }", <nl> + "}"), <nl> 
mmm CodingConvention.java <nl> ppp CodingConvention.java <nl> - public void checkForCallingConventionDefinitions( <nl> - Node getPropNode, Map<String, String> delegateCallingConventions); <nl> + public void checkForCallingConventionDefiningCalls( <nl> + Node n, Map<String, String> delegateCallingConventions); <nl> 
mmm TypedScopeCreatorTest.java <nl> ppp TypedScopeCreatorTest.java <nl> - assertType(method).toStringIsEqualTo("function(this:Foo, string): Generator<?>"); <nl> + assertType(method).toStringIsEqualTo("function(this:Foo, string): Generator<?,?,?>"); <nl> - assertThat(findNameType("gen", globalScope).toString()).isEqualTo("function(): Generator<?>"); <nl> 
mmm NewTypeInference.java <nl> ppp NewTypeInference.java <nl> - JSType recvType = pair.type.autobox(commonTypes); <nl> + JSType recvType = pair.type.autobox(); <nl> - JSType recvType = pair.type.autobox(commonTypes); <nl> + JSType recvType = pair.type.autobox(); <nl> - JSType lvalueType = pair.type.autobox(commonTypes); <nl> 
mmm TypeCheck.java <nl> ppp TypeCheck.java <nl> - if (functionPrivateName != null && functionPrivateName.length() > 0 && <nl> - outerScope.isDeclared(functionPrivateName, false) && <nl> + if (functionPrivateName != null <nl> + && functionPrivateName.length() > 0 <nl> + && outerScope.isDeclared(functionPrivateName, false) <nl> 
mmm ObjectType.java <nl> ppp ObjectType.java <nl> - Preconditions.checkArgument(!nominalType.isFunction() || fn != null, <nl> - "Cannot create Function instance without a FunctionType"); <nl> mmm Es6RewriteGeneratorsTest.java <nl> ppp Es6RewriteGeneratorsTest.java <nl> + "      default:", <nl> + "        return {value: undefined, done: true};", <nl> 
mmm CoalesceVariableNames.java <nl> ppp CoalesceVariableNames.java <nl> - LiveVariablesAnalysis liveness = new LiveVariablesAnalysis(cfg, scope, compiler); <nl> + LiveVariablesAnalysis liveness = <nl> + new LiveVariablesAnalysis(cfg, scope, compiler, t.getScopeCreator()); <nl> mmm LiveVariablesAnalysisTest.java <nl> 
mmm DefaultPassConfig.java <nl> ppp DefaultPassConfig.java <nl> - return new AstValidator(); <nl> + return new AstValidator(compiler); <nl> mmm AstValidatorTest.java <nl> ppp AstValidatorTest.java <nl> - return createValidator(); <nl> + return createValidator(compiler); <nl> - private AstValidator createValidator() { <nl> 
new file <nl> ppp VariableMapTest.java <nl> + package com.google.javascript.jscomp; <nl> + import com.google.common.base.Charsets; <nl> + import com.google.common.collect.Maps; <nl> + import junit.framework.*; <nl> + import java.util.*; <nl> + import java.text.*; <nl> + public class VariableMapTest extends TestCase { <nl> 
mmm TypeCheckTest.java <nl> ppp TypeCheckTest.java <nl> + private void disableStrictMissingPropertyChecks() { <nl> + compiler <nl> + .getOptions() <nl> + .setWarningLevel(DiagnosticGroups.STRICT_MISSING_PROPERTIES, CheckLevel.OFF); <nl> + } <nl> - "function g() { var x = f(); if (x.p) x.a = 'a'; else x.a = 'b'; }\n" + <nl> 
mmm RefasterJsScanner.java <nl> ppp RefasterJsScanner.java <nl> - import com.google.javascript.rhino.IR; <nl> - HashMap<String, String> shortNames = new HashMap<>(); <nl> - for (String require : matchedTemplate.getGoogRequiresToAdd()) { <nl> - fix.addGoogRequire(match, require); <nl> - shortNames.put(require, fix.getRequireName(match, require)); <nl> 
mmm NewTypeInference.java <nl> ppp NewTypeInference.java <nl> + case ROOT: <nl> + case ROOT: <nl> mmm IR.java <nl> ppp IR.java <nl> + public static Node root(Node ... rootChildren) { <nl> + Node root = new Node(Token.ROOT); <nl> + for (Node child : rootChildren) { <nl> + Preconditions.checkState(child.getToken() == Token.ROOT || child.getToken() == Token.SCRIPT); <nl> 
mmm PeepholeOptimizationsPassTest.java <nl> ppp PeepholeOptimizationsPassTest.java <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> + import org.junit.runners.JUnit4; <nl> + @RunWith(JUnit4.class) <nl> + @Test <nl> + @Test <nl> + @Test <nl> + @Test <nl> mmm PeepholeReplaceKnownMethodsTest.java <nl> 
mmm CompilerOptionsTest.java <nl> ppp CompilerOptionsTest.java <nl> - import junit.framework.TestCase; <nl> - public final class CompilerOptionsTest extends TestCase { <nl> + public final class CompilerOptionsTest { <nl> mmm ConformanceWhitelisterTest.java <nl> ppp ConformanceWhitelisterTest.java <nl> - import junit.framework.TestCase; <nl> 
mmm DefaultHttp2RemoteFlowController.java <nl> ppp DefaultHttp2RemoteFlowController.java <nl> - private boolean needFlush; <nl> - flush(); <nl> - try { <nl> - flush(); <nl> - } catch (Throwable t) { <nl> - frame.error(t); <nl> - } <nl> - private void flush() { <nl> - if (needFlush) { <nl> - ctx.flush(); <nl> - needFlush = false; <nl> 
mmm HeapByteBuf.java <nl> ppp HeapByteBuf.java <nl> - public void capacity(int newCapacity) { <nl> + public ByteBuf capacity(int newCapacity) { <nl> + return this; <nl> - public void getBytes(int index, ByteBuf dst, int dstIndex, int length) { <nl> + public ByteBuf getBytes(int index, ByteBuf dst, int dstIndex, int length) { <nl> 
mmm NioSctpEchoClient.java <nl> ppp NioSctpEchoClient.java <nl> - final String host = "localhost"; <nl> + final String host = args[0]; <nl> new file <nl> ppp package-info.java <nl> + package io.netty.handler.codec.sctp; <nl> new file <nl> ppp SctpMessageToMessageEncoder.java <nl> + package io.netty.handler.codec.sctp; <nl> 
mmm SocketSendBufferPool.java <nl> ppp SocketSendBufferPool.java <nl> - private final class Preallocation { <nl> + private static final class Preallocation { <nl> - class UnpooledSendBuffer implements SendBuffer { <nl> + static class UnpooledSendBuffer implements SendBuffer { <nl> - final class FileSendBuffer implements SendBuffer { <nl> 
mmm ObjectDecoder.java <nl> ppp ObjectDecoder.java <nl> - private final ClassResolver classResolver; <nl> + private final ClassLoader classLoader; <nl> - this(maxObjectSize, ClassResolvers.weakCachingResolver(null)); <nl> + this(maxObjectSize, null); <nl> - public ObjectDecoder(int maxObjectSize, ClassResolver classResolver) { <nl> 
mmm DirectByteBuf.java <nl> ppp DirectByteBuf.java <nl> + @Override <nl> + public void discardSomeReadBytes() { <nl> + final int readerIndex = readerIndex(); <nl> + if (readerIndex == writerIndex()) { <nl> + discardReadBytes(); <nl> + return; <nl> + } <nl> + if (readerIndex > 0 && readerIndex >= capacity >>> 1) { <nl> 
mmm ChannelConfig.java <nl> ppp ChannelConfig.java <nl> - * <td>{@link io.netty.channel.ChannelOption#CONNECT_TIMEOUT_MILLIS}</td><td>{@link #setConnectTimeoutMillis(int)}</td> <nl> + * <td>{@link ChannelOption#CONNECT_TIMEOUT_MILLIS}</td><td>{@link #setConnectTimeoutMillis(int)}</td> <nl> - * <td>{@link io.netty.channel.ChannelOption#WRITE_SPIN_COUNT}</td><td>{@link #setWriteSpinCount(int)}</td> <nl> 
mmm ReplayingDecoderBuffer.java <nl> ppp ReplayingDecoderBuffer.java <nl> - final class ReplayingDecoderBuffer implements ByteBuf { <nl> + final class ReplayingDecoderBuffer extends ByteBuf { <nl> mmm AbstractByteBufAllocator.java <nl> ppp AbstractByteBufAllocator.java <nl> - return new DefaultCompositeByteBuf(this, false, maxNumComponents); <nl> 
mmm SpdyHeaderBlockZlibDecoderTest.java <nl> ppp SpdyHeaderBlockZlibDecoderTest.java <nl> + import io.netty.buffer.ByteBufAllocator; <nl> - decoder.decode(headerBlock, frame); <nl> + decoder.decode(ByteBufAllocator.DEFAULT, headerBlock, frame); <nl> - decoder.decode(headerBlockSegment, frame); <nl> + decoder.decode(ByteBufAllocator.DEFAULT, headerBlockSegment, frame); <nl> 
mmm AioSocketChannel.java <nl> ppp AioSocketChannel.java <nl> + ((UnsafeByteBuf) buf).suspendIntermediaryDeallocations(); <nl> + ((UnsafeByteBuf) buf).resumeIntermediaryDeallocations(); <nl> mmm DuplicatedByteBuf.java <nl> ppp DuplicatedByteBuf.java <nl> - public void free() { <nl> + public void free() { } <nl> 
mmm DefaultSctpServerChannelConfig.java <nl> ppp DefaultSctpServerChannelConfig.java <nl> - import com.sun.nio.sctp.SctpStandardSocketOptions; <nl> - private final SctpServerChannel serverChannel; <nl> + private final SctpServerChannel javaChannel; <nl> - public DefaultSctpServerChannelConfig(SctpServerChannel serverChannel) { <nl> 
new file <nl> ppp LogLevel.java <nl> + package io.netty.handler.logging; <nl> + import io.netty.logging.InternalLogLevel; <nl> + public enum LogLevel { <nl> + DEBUG(InternalLogLevel.DEBUG), <nl> + INFO(InternalLogLevel.INFO), <nl> + WARN(InternalLogLevel.WARN), <nl> + ERROR(InternalLogLevel.ERROR); <nl> + private final InternalLogLevel internalLevel; <nl> 
mmm SpdyOrHttpChooser.java <nl> ppp SpdyOrHttpChooser.java <nl> - import io.netty.channel.ChannelHandler; <nl> + import io.netty.channel.Channel; <nl> - import io.netty.handler.codec.http.HttpObjectAggregator; <nl> - import io.netty.handler.codec.http.HttpRequestDecoder; <nl> - import io.netty.handler.codec.http.HttpResponseEncoder; <nl> 
new file <nl> ppp ChannelUpstreamEventRunnable.java <nl> + package io.netty.handler.execution; <nl> + import java.util.concurrent.Executor; <nl> + import io.netty.channel.ChannelEvent; <nl> + import io.netty.channel.ChannelHandlerContext; <nl> + public final class ChannelUpstreamEventRunnable extends ChannelEventRunnable { <nl> 
mmm SctpNotificationEvent.java <nl> ppp SctpNotificationEvent.java <nl> - public final class SctpNotification implements SctpMessage { <nl> - private final Notification notification; <nl> - private final Object attachment; <nl> + public final class SctpNotificationEvent { <nl> + private Notification notification; <nl> 
mmm AbstractOioByteChannel.java <nl> ppp AbstractOioByteChannel.java <nl> - import io.netty.buffer.ChannelBufType; <nl> - @Override <nl> - public ChannelBufType bufferType() { <nl> - return ChannelBufType.BYTE; <nl> - } <nl> mmm NioDatagramChannel.java <nl> ppp NioDatagramChannel.java <nl> + import io.netty.buffer.ChannelBufType; <nl> 
mmm RxtxChannelConfig.java <nl> ppp RxtxChannelConfig.java <nl> - * @throws IllegalArgumentException if the supplied value is < 0 <nl> + * @throws IllegalArgumentException if the supplied value is &lt; 0 <nl> mmm MpscLinkedQueue.java <nl> ppp MpscLinkedQueue.java <nl> - *     <li>{@link #clear()}</li> {@link #} <nl> 
mmm Http2LocalFlowController.java <nl> ppp Http2LocalFlowController.java <nl> - * If {@code stream} is closed (i.e. {@link Http2Stream#state()} method returns {@link Http2Stream.State#CLOSED}), <nl> - * the consumed bytes are only restored to the connection window. When a stream is closed, the flow controller <nl> 
mmm DefaultOioSocketChannelConfig.java <nl> ppp DefaultOioSocketChannelConfig.java <nl> - import io.netty.channel.socket.SocketChannelConfig; <nl> + @Override <nl> + public OioSocketChannelConfig setAutoClose(boolean autoClose) { <nl> + super.setAutoClose(autoClose); <nl> + return this; <nl> + } <nl> mmm DefaultRxtxChannelConfig.java <nl> 
mmm HttpObjectAggregator.java <nl> ppp HttpObjectAggregator.java <nl> - private Object continueResponse(HttpMessage start, int maxContentLength, ChannelPipeline pipeline) { <nl> + private static Object continueResponse(HttpMessage start, int maxContentLength, ChannelPipeline pipeline) { <nl> mmm EpollSocketChannelConfigTest.java <nl> 
mmm CRC32.java <nl> ppp CRC32.java <nl> + private CRC32() { <nl> + } <nl> mmm Adler32.java <nl> ppp Adler32.java <nl> + private Adler32() { <nl> + } <nl> mmm ExecutionHandler.java <nl> ppp ExecutionHandler.java <nl> - private final boolean handleUpstream; <nl> - this(executor, false, true); <nl> + this(executor, false); <nl> 
mmm Response.java <nl> ppp Response.java <nl> - private List<String> cookieHeaders; <nl> + private List<String> cookieHeaders; <nl> - @SuppressWarnings({ "rawtypes", "unchecked" }) <nl> - 	protected Response(IStatus status, String mimeType, InputStream data, long totalBytes) { <nl> + @SuppressWarnings({ <nl> 
mmm ReloadingJVM.java <nl> ppp ReloadingJVM.java <nl> - 							+ ReloadingJVMCommandProcess.class.getName(), new String[] { OPTS }); <nl> + 							+ ReloadingJVMCommandProcess.class.getName(), <nl> + 					new String[] { OPTS }); <nl> - 			StringBuilder s = new StringBuilder("==STDOUT==\n").append(stdout).append("\n").append("==STDERR==\n").append( <nl> 
mmm DefaultMQProducerTest.java <nl> ppp DefaultMQProducerTest.java <nl> - final AtomicInteger cc = new AtomicInteger(0); <nl> - cc.incrementAndGet(); <nl> - countDownLatch.await(8000L, TimeUnit.MILLISECONDS); <nl> - assertThat(cc.get()).isEqualTo(1); <nl> + countDownLatch.await(3000L, TimeUnit.MILLISECONDS); <nl> 
mmm RemotingCommand.java <nl> ppp RemotingCommand.java <nl> - RemotingCommand cmd = createResponseCommand(RemotingSysResponseCode.SYSTEM_ERROR, "not set any response code", classHeader); <nl> - return cmd; <nl> + return createResponseCommand(RemotingSysResponseCode.SYSTEM_ERROR, "not set any response code", classHeader); <nl> 
mmm MappedFileQueueTest.java <nl> ppp MappedFileQueueTest.java <nl> + import java.io.File; <nl> + import org.apache.rocketmq.common.UtilAll; <nl> + import org.apache.rocketmq.store.config.MessageStoreConfig; <nl> + import org.junit.After; <nl> + @After <nl> + public void destory() { <nl> + File file = new File("target/unit_test_store"); <nl> 
mmm MQClientAPIImpl.java <nl> ppp MQClientAPIImpl.java <nl> + final long beginStartTime = System.currentTimeMillis(); <nl> + long cost = System.currentTimeMillis() - beginStartTime; <nl> - onExceptionImpl(brokerName, msg, 0L, request, sendCallback, topicPublishInfo, instance, <nl> + onExceptionImpl(brokerName, msg, timeoutMillis - cost, request, sendCallback, topicPublishInfo, instance, <nl> 
new file <nl> ppp CredentialRetrievalException.java <nl> + package com.google.cloud.tools.jib.registry.credentials; <nl> + import com.google.cloud.tools.jib.configuration.credentials.CredentialRetriever; <nl> + public class CredentialRetrievalException extends Exception { <nl> + CredentialRetrievalException(String message, Throwable cause) { <nl> 
mmm BuildImageMojo.java <nl> ppp BuildImageMojo.java <nl> - DecryptedMavenSettings decryptedSettings = <nl> - DecryptedMavenSettings.from(getSession().getSettings(), getSettingsDecrypter()); <nl> - new MavenSettingsServerCredentials(decryptedSettings), <nl> + new MavenSettingsServerCredentials( <nl> + getSession().getSettings(), getSettingsDecrypter()), <nl> 
mmm BuildDockerMojo.java <nl> ppp BuildDockerMojo.java <nl> + import com.google.cloud.tools.jib.plugins.common.BuildStepsRunner; <nl> - import com.google.cloud.tools.jib.plugins.common.NBuildStepsRunner; <nl> - NBuildStepsRunner.forBuildToDockerDaemon(targetImageReference, getTargetImageAdditionalTags()) <nl> 
mmm ImageToJsonTranslator.java <nl> ppp ImageToJsonTranslator.java <nl> + template.setContainerCmd(image.getJavaArguments()); <nl> mmm BuildConfiguration.java <nl> ppp BuildConfiguration.java <nl> + private List<String> javaArguments = new ArrayList<>(); <nl> + public Builder setJavaArguments(@Nullable List<String> javaArguments) { <nl> 
mmm BuildImageStepTest.java <nl> ppp BuildImageStepTest.java <nl> - import com.google.cloud.tools.jib.blob.Blob; <nl> - import com.google.cloud.tools.jib.blob.Blobs; <nl> + @Mock private CachedLayer mockCachedLayer; <nl> - CachedLayer testCachedLayer = <nl> - new CachedLayer() { <nl> - @Override <nl> - public DescriptorDigest getDigest() { <nl> 
deleted file <nl> mmm DockerContextMojoIntegrationTest.java <nl> - package com.google.cloud.tools.jib.maven; <nl> - import com.google.cloud.tools.jib.Command; <nl> - import java.io.IOException; <nl> - import java.net.URL; <nl> - import java.nio.file.Files; <nl> - import java.nio.file.Path; <nl> - import java.util.Arrays; <nl> 
mmm PluginConfigurationProcessor.java <nl> ppp PluginConfigurationProcessor.java <nl> - import com.google.cloud.tools.jib.http.Authorizations; <nl> - import com.google.cloud.tools.jib.registry.credentials.RegistryCredentials; <nl> + import javax.annotation.Nullable; <nl> - RegistryCredentials knownBaseRegistryCredentials = null; <nl> 
new file <nl> ppp PhoneGapViewTestActivity.java <nl> + package org.apache.cordova.test; <nl> + import org.apache.cordova.CordovaWebView; <nl> + import android.app.Activity; <nl> + import android.os.Bundle; <nl> + public class PhoneGapViewTestActivity extends Activity { <nl> + CordovaWebView phoneGap; <nl> + @Override <nl> 
mmm IceCreamCordovaWebViewClient.java <nl> ppp IceCreamCordovaWebViewClient.java <nl> - public class IceCreamCordovaWebViewClient extends AndroidWebViewClient implements CordovaWebViewClient{ <nl> + public class IceCreamCordovaWebViewClient extends CordovaWebViewClient { <nl> - @Override <nl> - public void onReceivedError(CordovaWebView me, int i, String string, <nl> 
mmm CordovaChromeClient.java <nl> ppp CordovaChromeClient.java <nl> new file <nl> ppp Config.java <nl> + package org.apache.cordova; <nl> + import java.io.IOException; <nl> + import java.util.ArrayList; <nl> + import java.util.HashMap; <nl> + import java.util.Iterator; <nl> + import java.util.regex.Matcher; <nl> 
deleted file <nl> mmm basicauth.java <nl> - package org.apache.cordova.test; <nl> - import android.os.Bundle; <nl> - import org.apache.cordova.*; <nl> - public class basicauth extends DroidGap { <nl> - @Override <nl> - public void onCreate(Bundle savedInstanceState) { <nl> - super.onCreate(savedInstanceState); <nl> 
mmm CordovaActivity.java <nl> ppp CordovaActivity.java <nl> - import java.lang.reflect.Constructor; <nl> - import java.lang.reflect.InvocationTargetException; <nl> + public void setAuthenticationToken(AuthenticationToken authenticationToken, String host, String realm) { <nl> + if (this.appView != null && this.appView.viewClient != null) { <nl> 
mmm GapClientTest.java <nl> ppp GapClientTest.java <nl> mmm CordovaTest.java <nl> ppp CordovaTest.java <nl> mmm PhoneGapActivity.java <nl> ppp PhoneGapActivity.java <nl> mmm PluginManagerTest.java <nl> ppp PluginManagerTest.java <nl> mmm WebDriverTest.java <nl> ppp WebDriverTest.java <nl> mmm CordovaActivityTest.java <nl> 
mmm PluginManager.java <nl> ppp PluginManager.java <nl> - import java.util.concurrent.ExecutorService; <nl> - import java.util.concurrent.Executors; <nl> - private final ExecutorService execThreadPool = Executors.newCachedThreadPool(); <nl> - * @param action        String containing the action that the class is supposed to perform. This is <nl> 
mmm GoImportReferenceHelper.java <nl> ppp GoImportReferenceHelper.java <nl> - import com.goide.GoSdkUtil; <nl> + import com.goide.sdk.GoSdkUtil; <nl> mmm GoModuleBuilder.java <nl> ppp GoModuleBuilder.java <nl> + import com.goide.sdk.GoSdkType; <nl> mmm GoFmtProjectAction.java <nl> ppp GoFmtProjectAction.java <nl> 
mmm GoVarDeclarationImpl.java <nl> ppp GoVarDeclarationImpl.java <nl> mmm GoVarDefinitionImpl.java <nl> ppp GoVarDefinitionImpl.java <nl> mmm GoVarSpecImpl.java <nl> ppp GoVarSpecImpl.java <nl> mmm GoVarDefinition.java <nl> ppp GoVarDefinition.java <nl> mmm GoVarDeclaration.java <nl> ppp GoVarDeclaration.java <nl> 
mmm GoAllNamesIndex.java <nl> ppp GoAllNamesIndex.java <nl> - return 2; <nl> + return 3; <nl> mmm GoStubElementTypeFactory.java <nl> ppp GoStubElementTypeFactory.java <nl> + if (name.equals("ANONYMOUS_FIELD_DEFINITION")) return new GoAnonymousFieldDefinitionStubElementType(name); <nl> new file <nl> ppp GoAnonymousFieldDefinitionStub.java <nl> 
mmm GoTestRunConfigurationProducerBase.java <nl> ppp GoTestRunConfigurationProducerBase.java <nl> - return function != null && GoTestFinder.isTestFunctionName(function.getName()) ? function : null; <nl> + return function != null && GoTestFunctionType.fromName(function.getName()) == GoTestFunctionType.TEST ? function : null; <nl> 
mmm GoParameters.java <nl> ppp GoParameters.java <nl> - @NotNull <nl> - List<GoType> getTypeList(); <nl> + @Nullable <nl> + GoType getType(); <nl> mmm GoTypes.java <nl> ppp GoTypes.java <nl> + IElementType TYPE_LIST = new GoCompositeElementType("TYPE_LIST"); <nl> + else if (type == TYPE_LIST) { <nl> + return new GoTypeListImpl(node); <nl> 
mmm GotestFrameworkImpl.java <nl> ppp GotestFrameworkImpl.java <nl> - import com.goide.runconfig.testing.GoTestRunConfigurationBase; <nl> + import com.goide.runconfig.testing.GoTestFramework; <nl> + import com.goide.runconfig.testing.GoTestRunConfiguration; <nl> - import com.goide.runconfig.testing.ui.GoTestRunConfigurationEditorForm; <nl> 
mmm Relationship.java <nl> ppp Relationship.java <nl> mmm ControllerStatusReportingTask.java <nl> ppp ControllerStatusReportingTask.java <nl> - controllerStatus.clone(); <nl> mmm Scrypt.java <nl> ppp Scrypt.java <nl> + if( salt == null ) salt = new byte[]{}; <nl> mmm GetHTTP.java <nl> ppp GetHTTP.java <nl> - final CloseableHttpClient client = clientBuilder.build(); <nl> 
mmm TestInvokeHttpTwoWaySSL.java <nl> ppp TestInvokeHttpTwoWaySSL.java <nl> - sslProperties = createSslProperties(true); <nl> + sslProperties = createClientSslProperties(true); <nl> mmm TlsCertificateAuthorityService.java <nl> ppp TlsCertificateAuthorityService.java <nl> + sslContextFactory.setEndpointIdentificationAlgorithm(null); <nl> 
mmm JdbcCommon.java <nl> ppp JdbcCommon.java <nl> + import static java.sql.Types.ARRAY; <nl> + import static java.sql.Types.BINARY; <nl> + import static java.sql.Types.BIT; <nl> + import static java.sql.Types.BLOB; <nl> + import static java.sql.Types.CLOB; <nl> + import static java.sql.Types.LONGVARBINARY; <nl> 
new file <nl> ppp PrimaryNodeState.java <nl> + package org.apache.nifi.annotation.notification; <nl> + public enum PrimaryNodeState { <nl> + 	ELECTED_PRIMARY_NODE, <nl> + 	 <nl> + 	PRIMARY_NODE_REVOKED; <nl> + } <nl> mmm PutHDFS.java <nl> ppp PutHDFS.java <nl> + import org.apache.nifi.annotation.behavior.WritesAttribute; <nl> 
mmm StandardProcessContext.java <nl> ppp StandardProcessContext.java <nl> - @Override <nl> - public boolean hasIncomingConnection() { <nl> - return procNode.hasIncomingConnection(); <nl> - } <nl> - @Override <nl> - public boolean hasConnection(Relationship relationship) { <nl> - Set<Connection> connections = procNode.getConnections(relationship); <nl> 
mmm PutAzureDataLakeStorage.java <nl> ppp PutAzureDataLakeStorage.java <nl> - import org.apache.commons.lang3.StringUtils; <nl> + import static org.apache.nifi.processors.azure.storage.utils.ADLSAttributes.ATTR_DESCRIPTION_DIRECTORY; <nl> + import static org.apache.nifi.processors.azure.storage.utils.ADLSAttributes.ATTR_DESCRIPTION_FILENAME; <nl> 
new file <nl> ppp ProcessGroupNameDTO.java <nl> + package org.apache.nifi.web.api.dto; <nl> + import io.swagger.annotations.ApiModelProperty; <nl> + import javax.xml.bind.annotation.XmlType; <nl> + @XmlType(name="processGroupName") <nl> + public class ProcessGroupNameDTO { <nl> + private String id; <nl> + private String name; <nl> 
new file <nl> ppp SolrProcessor.java <nl> + package org.apache.nifi.processors.solr; <nl> + import org.apache.nifi.annotation.lifecycle.OnScheduled; <nl> + import org.apache.nifi.components.AllowableValue; <nl> + import org.apache.nifi.components.PropertyDescriptor; <nl> + import org.apache.nifi.components.ValidationContext; <nl> 
mmm XFlutterView.java <nl> ppp XFlutterView.java <nl> - import android.support.annotation.NonNull; <nl> - import android.support.annotation.Nullable; <nl> - import android.support.annotation.RequiresApi; <nl> - import android.support.annotation.VisibleForTesting; <nl> - import android.support.v4.view.ViewCompat; <nl> 
mmm Control.java <nl> ppp Control.java <nl> - 	    }); <nl> + 	    }, "ZAP-Shutdown"); <nl> mmm AbstractAPIGenerator.java <nl> ppp AbstractAPIGenerator.java <nl> + import org.zaproxy.zap.utils.I18N; <nl> + 	List<Integer> getHistoryIdsStartingAt(long sessionId, int startAtHistoryId) <nl> + 			throws DatabaseException; <nl> 
mmm NotesAddDialog.java <nl> ppp NotesAddDialog.java <nl> - 			gridBagConstraints15.fill = java.awt.GridBagConstraints.HORIZONTAL; <nl> mmm BruteForce.java <nl> ppp BruteForce.java <nl> + 	list.clear(); <nl> + 	 <nl> + 	 <nl> + 	public void clearList() { <nl> + 		if (this.list != null) { <nl> + 			this.list.clear(); <nl> 
mmm AddOnRunIssuesUtils.java <nl> ppp AddOnRunIssuesUtils.java <nl> - case PACKAGE_VERSION_NOT_BEFORE: <nl> - addOn = (AddOn) issueDetails.get(0); <nl> - message = MessageFormat.format( <nl> - Constant.messages.getString("cfu.warn.addon.with.missing.requirements.addon.version.notBefore"), <nl> - addOn.getName(), <nl> 
mmm ExtensionAlert.java <nl> ppp ExtensionAlert.java <nl> - alert.getSource().getId()); <nl> + alert.getSource().getId(), <nl> + alert.getAlertRef()); <nl> mmm TableAlert.java <nl> ppp TableAlert.java <nl> - int sourceId) <nl> + int sourceId, <nl> + String alertRef) <nl> mmm AbstractPlugin.java <nl> ppp AbstractPlugin.java <nl> 
mmm SpiderPanel.java <nl> ppp SpiderPanel.java <nl> - 		super("spider", new ImageIcon(SpiderPanel.class.getResource("/resource/icon/16/spider.png")), extension); <nl> + 		super("spider", new ImageIcon(SpiderPanel.class.getResource("/resource/icon/16/spider.png")), extension, <nl> + 				spiderScanParam); <nl> 
new file <nl> ppp ScriptOutputListener.java <nl> + package org.zaproxy.zap.extension.script; <nl> + @FunctionalInterface <nl> + public interface ScriptOutputListener { <nl> + void output(ScriptWrapper script, String output); <nl> + } <nl> mmm AddOn.java <nl> ppp AddOn.java <nl> - 			super(getRootCauseMessage(validationResult.getException()), validationResult.getException()); <nl> 
mmm PopupMenuItemSiteNodeContextMenuFactory.java <nl> ppp PopupMenuItemSiteNodeContextMenuFactory.java <nl> mmm SiteMapTreeCellRenderer.java <nl> ppp SiteMapTreeCellRenderer.java <nl> mmm NodeSelectDialog.java <nl> ppp NodeSelectDialog.java <nl> mmm PopupMenuHttpMessageContainer.java <nl> ppp PopupMenuHttpMessageContainer.java <nl> 
mmm OptionsParam.java <nl> ppp OptionsParam.java <nl> + import org.zaproxy.zap.extension.invoke.InvokeParam; <nl> + 	private InvokeParam invokeParam = new InvokeParam(); <nl> + 		getInvokeParam().load(getConfig()); <nl> + 	public InvokeParam getInvokeParam() { <nl> + 		return invokeParam; <nl> + 	} <nl> mmm Control.java <nl> 
mmm SpiderScan.java <nl> ppp SpiderScan.java <nl> - import org.zaproxy.zap.spider.SpiderTaskResult; <nl> - 	public void notifySpiderTaskResult(SpiderTaskResult spiderTaskResult) { <nl> - 		HttpMessage msg = spiderTaskResult.getHttpMessage(); <nl> + 	public void readURI(HttpMessage msg) { <nl> - 				responseHeader.getReasonPhrase(), <nl> 
mmm OptionsParamCheckForUpdates.java <nl> ppp OptionsParamCheckForUpdates.java <nl> - 	private boolean checkOnStart; <nl> + 	private boolean checkOnStart = true; <nl> - 	private boolean checkAddonUpdates; <nl> + 	private boolean checkAddonUpdates = true; <nl> mmm DynamicFieldsPanel.java <nl> ppp DynamicFieldsPanel.java <nl> 
mmm PopupMenuAddAntiCSRF.java <nl> ppp PopupMenuAddAntiCSRF.java <nl> - super(); <nl> - 		initialize(); <nl> - } <nl> - public PopupMenuAddAntiCSRF(String label) { <nl> - super(label); <nl> - } <nl> - 	public void setExtension(ExtensionParams extension) { <nl> - 		this.extension = extension; <nl> - 	} <nl> - 	private void initialize() { <nl> 
mmm AlertAddDialog.java <nl> ppp AlertAddDialog.java <nl> - package org.zaproxy.zap.extension.history; <nl> + package org.zaproxy.zap.extension.alert; <nl> - import org.parosproxy.paros.extension.history.ExtensionHistory; <nl> - import org.zaproxy.zap.extension.alert.AlertViewPanel; <nl> - import org.zaproxy.zap.extension.alert.ExtensionAlert; <nl> 
mmm ActiveScanController.java <nl> ppp ActiveScanController.java <nl> + 					alert.setSource(Alert.Source.ACTIVE); <nl> mmm TableAlert.java <nl> ppp TableAlert.java <nl> - 			int historyId, int sourceHistoryId) throws DatabaseException; <nl> + 			int historyId, int sourceHistoryId, int sourceId) throws DatabaseException; <nl> 
mmm MenuFileControl.java <nl> ppp MenuFileControl.java <nl> - import org.zaproxy.zap.model.IllegalContextNameException; <nl> - 			} catch (IllegalContextNameException e) { <nl> - 				String detailError; <nl> - 				if (e.getReason() == IllegalContextNameException.Reason.EMPTY_NAME) { <nl> - 					detailError = Constant.messages.getString("context.error.name.empty"); <nl> 
mmm ExtensionBreak.java <nl> ppp ExtensionBreak.java <nl> - super(); <nl> - 		initialize(); <nl> - } <nl> - public ExtensionBreak(String name) { <nl> - super(name); <nl> - } <nl> - 	 <nl> - 	private void initialize() { <nl> - this.setName(NAME); <nl> + super(NAME); <nl> mmm ExtensionAPI.java <nl> ppp ExtensionAPI.java <nl> 
mmm MenuFileControl.java <nl> ppp MenuFileControl.java <nl> + 			if (!informStopActiveActions()) { <nl> + 				return; <nl> + 			} <nl> + 		 <nl> + 	private boolean informStopActiveActions() { <nl> + 		String activeActions = wrapEntriesInLiTags(control.getExtensionLoader().getActiveActions()); <nl> + 		if (!activeActions.isEmpty()) { <nl> 
mmm EncodeDecodeParam.java <nl> ppp EncodeDecodeParam.java <nl> + @Deprecated <nl> mmm EncodeDecodeDialog.java <nl> ppp EncodeDecodeDialog.java <nl> - import org.parosproxy.paros.extension.encoder.Encoder; <nl> + @Deprecated <nl> - private Encoder encoder = null; <nl> + private org.parosproxy.paros.extension.encoder.Encoder encoder = null; <nl> 
mmm SpiderScan.java <nl> ppp SpiderScan.java <nl> + import java.util.concurrent.atomic.AtomicInteger; <nl> + 	private AtomicInteger numberOfURIsFound; <nl> + 		numberOfURIsFound = new AtomicInteger(); <nl> + 		numberOfURIsFound.incrementAndGet(); <nl> + 	public int getNumberOfURIsFound() { <nl> + 		return numberOfURIsFound.get(); <nl> 
new file <nl> ppp MockCall.java <nl> + package com.github.scribejava.httpclient.okhttp; <nl> + import java.io.IOException; <nl> + import java.lang.reflect.InvocationHandler; <nl> + import java.lang.reflect.Method; <nl> + import java.lang.reflect.Proxy; <nl> + import java.util.ArrayList; <nl> + import java.util.Collection; <nl> 
mmm AbstractRequest.java <nl> ppp AbstractRequest.java <nl> - private OAuthService service; <nl> + private final OAuthService service; <nl> mmm HMACSha1SignatureServiceTest.java <nl> ppp HMACSha1SignatureServiceTest.java <nl> - public void setup() { <nl> + public void setUp() { <nl> mmm OAuthEncoder.java <nl> 
deleted file <nl> mmm MockResponse.java <nl> - package com.github.scribejava.httpclient.ning; <nl> - import java.io.ByteArrayInputStream; <nl> - import java.io.IOException; <nl> - import java.io.InputStream; <nl> - import java.nio.ByteBuffer; <nl> - import java.util.List; <nl> - import com.ning.http.client.FluentCaseInsensitiveStringsMap; <nl> 
mmm BitmapHunter.java <nl> ppp BitmapHunter.java <nl> + import static com.squareup.picasso.MemoryPolicy.shouldReadFromMemoryCache; <nl> - final boolean skipMemoryCache; <nl> + final int memoryPolicy; <nl> - this.skipMemoryCache = action.skipCache; <nl> + this.memoryPolicy = action.memoryPolicy; <nl> - if (!skipMemoryCache) { <nl> 
mmm Utils.java <nl> ppp Utils.java <nl> - return createKey(request.path, request.resourceId, request.options, request.transformations); <nl> + return createKey(request.uri, request.resourceId, request.options, request.transformations); <nl> - static String createKey(String path, int resourceId, PicassoBitmapOptions options, <nl> 
mmm PicassoSampleActivity.java <nl> ppp PicassoSampleActivity.java <nl> - sampleContent = (FrameLayout) findViewById(R.id.sample_content); <nl> + sampleContent = findViewById(R.id.sample_content); <nl> - final ListView activityList = (ListView) findViewById(R.id.activity_list); <nl> + final ListView activityList = findViewById(R.id.activity_list); <nl> 
mmm UtilsTest.java <nl> ppp UtilsTest.java <nl> - @Test public void matchingRequestsHaveSameKey() throws Exception { <nl> + @Test public void matchingRequestsHaveSameKey() { <nl> - @Test public void ensureBuilderIsCleared() throws Exception { <nl> + @Test public void ensureBuilderIsCleared() { <nl> mmm TargetActionTest.java <nl> 
mmm OkHttp3Downloader.java <nl> ppp OkHttp3Downloader.java <nl> - import android.support.annotation.NonNull; <nl> - final class OkHttp3Downloader implements Downloader { <nl> + final class OkHttp3Downloader { <nl> - @NonNull @Override public Response load(@NonNull Request request) throws IOException { <nl> 
mmm ImageViewActionTest.java <nl> ppp ImageViewActionTest.java <nl> - new ImageViewAction(mock(Picasso.class), new Target2<>(target), null, null); <nl> + new ImageViewAction(mock(Picasso.class), new Target<>(target), null, null); <nl> - new ImageViewAction(picasso, new Target2<>(target), null, callback); <nl> 
mmm CalendarDatePickerDialogFragment.java <nl> ppp CalendarDatePickerDialogFragment.java <nl> + import android.support.annotation.Nullable; <nl> - private static final String KEY_YEAR_START = "year_start"; <nl> - private static final String KEY_YEAR_END = "year_end"; <nl> + private static final String KEY_DATE_START = "date_start"; <nl> 
mmm MonthAdapter.java <nl> ppp MonthAdapter.java <nl> + import android.content.res.TypedArray; <nl> + private TypedArray mThemeColors; <nl> + public void setThemeDark(TypedArray mThemeColors) { <nl> + this.mThemeColors = mThemeColors; <nl> + } <nl> + v.setTheme(mThemeColors); <nl> new file <nl> ppp SampleCalendarDateCustom.java <nl> 
mmm ComputeEngineChannelBuilderTest.java <nl> ppp ComputeEngineChannelBuilderTest.java <nl> - import static com.google.common.truth.Truth.assertThat; <nl> - import io.grpc.netty.InternalProtocolNegotiator.ProtocolNegotiator; <nl> - ProtocolNegotiator protocolNegotiator = builder.getProtocolNegotiatorForTest(); <nl> 
mmm ProxyDetector.java <nl> ppp ProxyDetector.java <nl> - * <p>The {@link NameResolver} should invoke the {@link ProxyDetector} retrieved from the {@code <nl> - * params} of {@link NameResolver.Factory#newNameResolver} using {@link <nl> - * io.grpc.NameResolver.Factory#PARAMS_PROXY_DETECTOR PARAMS_PROXY_DETECTOR}, and pass the returned <nl> 
mmm WorkerServiceGrpc.java <nl> ppp WorkerServiceGrpc.java <nl> - public class WorkerServiceGrpc { <nl> + public final class WorkerServiceGrpc { <nl> - private static class MethodHandlers<Req, Resp> implements <nl> + private static final class MethodHandlers<Req, Resp> implements <nl> - public MethodHandlers(WorkerServiceImplBase serviceImpl, int methodId) { <nl> 
mmm ClientCallImplTest.java <nl> ppp ClientCallImplTest.java <nl> - import static org.junit.Assert.assertNotNull; <nl> - public void contextDeadlineShouldBePropagatedInMetadata() { <nl> - long deadlineNanos = TimeUnit.SECONDS.toNanos(1); <nl> - Context context = Context.current().withDeadlineAfter(deadlineNanos, TimeUnit.NANOSECONDS, <nl> 
mmm DnsNameResolver.java <nl> ppp DnsNameResolver.java <nl> - savedListener.onError(Status.UNAVAILABLE.withCause(e)); <nl> + savedListener.onError( <nl> + Status.UNAVAILABLE.withDescription("Unable to resolve host " + host).withCause(e)); <nl> mmm UtilsTest.java <nl> ppp UtilsTest.java <nl> + import com.google.common.base.MoreObjects; <nl> 
mmm OkHttpClientStream.java <nl> ppp OkHttpClientStream.java <nl> - public boolean setStatus(Status newStatus, Metadata.Trailers trailers) { <nl> + public boolean transportReportStatus(Status newStatus, Metadata.Trailers trailers) { <nl> - return super.setStatus(newStatus, trailers); <nl> + return super.transportReportStatus(newStatus, trailers); <nl> 
mmm AbstractManagedChannelImplBuilderTest.java <nl> ppp AbstractManagedChannelImplBuilderTest.java <nl> + @Deprecated <nl> + @Deprecated <nl> + @Deprecated <nl> + @Test <nl> + public void defaultLoadBalancingPolicy_default() { <nl> + assertEquals(builder.defaultLbPolicy, "pick_first"); <nl> + } <nl> + @Test <nl> 
mmm LoadBalancer.java <nl> ppp LoadBalancer.java <nl> - import java.net.SocketAddress; <nl> - public void transportReady(SocketAddress addr, ClientTransport transport) { } <nl> + public void transportReady(EquivalentAddressGroup addressGroup, ClientTransport transport) { } <nl> - public void transportShutdown(SocketAddress addr, ClientTransport transport, Status s) { } <nl> 
mmm NettyClientInteropServlet.java <nl> ppp NettyClientInteropServlet.java <nl> - @Override <nl> - protected boolean serverInProcess() { <nl> - return false; <nl> - } <nl> mmm AutoWindowSizingOnTest.java <nl> ppp AutoWindowSizingOnTest.java <nl> + import io.grpc.internal.AbstractServerImplBuilder; <nl> - import org.junit.AfterClass; <nl> 
mmm ManagedClientTransport.java <nl> ppp ManagedClientTransport.java <nl> - public interface ManagedClientTransport extends ClientTransport { <nl> + public interface ManagedClientTransport extends ClientTransport, WithLogId { <nl> + public static String getLogId(WithLogId subject) { <nl> + return subject.getClass().getSimpleName() + "@" + Integer.toHexString(subject.hashCode()); <nl> 
mmm GrpclbLoadBalancerTest.java <nl> ppp GrpclbLoadBalancerTest.java <nl> - inOrder.verify(helper).updateSubchannelAddresses( <nl> - same(subchannel), <nl> + verify(subchannel).updateAddresses( <nl> - inOrder.verify(helper).updateSubchannelAddresses( <nl> - same(subchannel), <nl> + verify(subchannel).updateAddresses( <nl> 
mmm LoadBalancer.java <nl> ppp LoadBalancer.java <nl> - public static final Attributes.Key<Map<String, Object>> ATTR_LOAD_BALANCING_CONFIG = <nl> + public static final Attributes.Key<Map<String, ?>> ATTR_LOAD_BALANCING_CONFIG = <nl> - private static Map<String, Object> parseJsonObject(JsonReader jr) throws IOException { <nl> 
new file <nl> ppp NettySslContextChannelCredentials.java <nl> + package io.grpc.netty; <nl> + import io.grpc.ChannelCredentials; <nl> + import io.grpc.ExperimentalApi; <nl> + import io.netty.handler.ssl.SslContext; <nl> + @ExperimentalApi("There is no plan to make this API stable, given transport API instability") <nl> 
mmm MessageFramerTest.java <nl> ppp MessageFramerTest.java <nl> - import io.grpc.internal.testing.StatsTestUtils.FakeStatsContextFactory; <nl> - private FakeStatsContextFactory statsCtxFactory; <nl> - statsCtxFactory = new FakeStatsContextFactory(); <nl> mmm ManagedChannelImpl.java <nl> ppp ManagedChannelImpl.java <nl> 
mmm OkHttpClientTransport.java <nl> ppp OkHttpClientTransport.java <nl> - clientStream.transportReportStatus(goAwayStatus, true, new Metadata()); <nl> + clientStream.transportState().transportReportStatus(goAwayStatus, true, new Metadata()); <nl> - stream.start(nextStreamId); <nl> - stream.allocated(); <nl> 
deleted file <nl> mmm Message.java <nl> - package io.grpc.thrift; <nl> - import org.apache.thrift.scheme.IScheme; <nl> - import org.apache.thrift.scheme.SchemeFactory; <nl> - import org.apache.thrift.scheme.StandardScheme; <nl> - import org.apache.thrift.scheme.TupleScheme; <nl> - import org.apache.thrift.protocol.TTupleProtocol; <nl> 
mmm ServerSslContextProviderFactoryTest.java <nl> ppp ServerSslContextProviderFactoryTest.java <nl> - import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext; <nl> + import io.grpc.xds.EnvoyServerProtoData.DownstreamTlsContext; <nl> - CommonTlsContextTestsUtil.buildDownstreamTlsContext( <nl> + CommonTlsContextTestsUtil.buildInternalDownstreamTlsContext( <nl> 
mmm AltsProtocolNegotiatorTest.java <nl> ppp AltsProtocolNegotiatorTest.java <nl> - assertThat(grpcHandler.attrs.get(AltsProtocolNegotiator.getTsiPeerAttributeKey())) <nl> + assertThat(grpcHandler.attrs.get(AltsProtocolNegotiator.TSI_PEER_KEY)) <nl> - assertThat(grpcHandler.attrs.get(AltsProtocolNegotiator.getAltsAuthContextAttributeKey())) <nl> 
mmm EdsLoadBalancerTest.java <nl> ppp EdsLoadBalancerTest.java <nl> + import io.grpc.xds.LoadStatsManager.LoadStatsStore; <nl> mmm XdsAttributes.java <nl> ppp XdsAttributes.java <nl> + import io.grpc.xds.LoadStatsManager.LoadStatsStore; <nl> + package io.grpc.xds; <nl> + import static com.google.common.base.Preconditions.checkState; <nl> 
mmm ClientCallImpl.java <nl> ppp ClientCallImpl.java <nl> - ClientStreamListener listener = new ClientStreamListenerImpl(observer); <nl> + ClientStreamListener listener = new ClientStreamListenerImpl(observer, transportFuture); <nl> - addListener(transportFuture, <nl> - new StreamCreationTask(delayed, headers, method, callOptions, listener)); <nl> 
mmm ApkSign.java <nl> ppp ApkSign.java <nl> 
mmm V3MethodAdapter.java <nl> ppp V3MethodAdapter.java <nl> - import java.io.PrintWriter; <nl> - import java.io.StringWriter; <nl> - import java.util.Map; <nl> - import com.googlecode.dex2jar.ir.Constant; <nl> - import com.googlecode.dex2jar.ir.Value; <nl> - import com.googlecode.dex2jar.ir.expr.Exprs; <nl> 
mmm Validator.java <nl> ppp Validator.java <nl> + import com.mobsandgeeks.saripaar.annotation.Optional; <nl> + private Map<View, ArrayList<Pair<Annotation, ViewDataAdapter>>> mOptionalViewsMap; <nl> + View view; <nl> + final boolean hasOptionalAnnotation = hasOptionalAnnotation(fieldAnnotations); <nl> + if (hasOptionalAnnotation && mOptionalViewsMap == null) { <nl> 
mmm DoubleBindingTextViewFragment.java <nl> ppp DoubleBindingTextViewFragment.java <nl> - import butterknife.InjectView; <nl> + import butterknife.Bind; <nl> - @InjectView(R.id.double_binding_num1) EditText _number1; <nl> - @InjectView(R.id.double_binding_num2) EditText _number2; <nl> - @InjectView(R.id.double_binding_result) TextView _result; <nl> 
mmm WhiteboardObjectPolygonJabberImpl.java <nl> ppp WhiteboardObjectPolygonJabberImpl.java <nl> - import org.jitsi.util.xml.*; <nl> 
mmm ProtocolProviderServiceJabberImpl.java <nl> ppp ProtocolProviderServiceJabberImpl.java <nl> + import net.java.sip.communicator.impl.protocol.jabber.extensions.carbon.*; <nl> + providerManager.addExtensionProvider( <nl> + CarbonPacketExtension.RECEIVED_ELEMENT_NAME, <nl> + CarbonPacketExtension.NAMESPACE, <nl> 
mmm CallTitlePanel.java <nl> ppp CallTitlePanel.java <nl> - g.fillRoundRect(0, 0, this.getWidth(), this.getHeight(), 20, 20); <nl> + g.fillRoundRect(0, 0, this.getWidth(), this.getHeight(), 10, 10); <nl> mmm ConferenceFocusPanel.java <nl> ppp ConferenceFocusPanel.java <nl> + public void enableVideoIndicator(   ConferenceMember confMember, <nl> 
mmm MclStorageManager.java <nl> ppp MclStorageManager.java <nl> - DocumentBuilderFactory factory = <nl> - DocumentBuilderFactory.newInstance(); <nl> - DocumentBuilder builder = factory.newDocumentBuilder(); <nl> + DocumentBuilder builder <nl> + = XMLUtils.newDocumentBuilderFactory().newDocumentBuilder(); <nl> 
mmm ProviderChangeListener.java <nl> ppp ProviderChangeListener.java <nl> - import java.awt.Dimension; <nl> + import java.awt.*; <nl> mmm OperationSetDTMF.java <nl> ppp OperationSetDTMF.java <nl> mmm DTMFHandler.java <nl> ppp DTMFHandler.java <nl> mmm DesktopInteract.java <nl> ppp DesktopInteract.java <nl> - public boolean captureScreen(int display, int x, int y, int width, int height, <nl> 
mmm ColibriIQProvider.java <nl> ppp ColibriIQProvider.java <nl> + providerManager.addExtensionProvider( <nl> + SourceGroupPacketExtension.ELEMENT_NAME, <nl> + SourceGroupPacketExtension.NAMESPACE, <nl> + new DefaultPacketExtensionProvider<SourceGroupPacketExtension>( <nl> + SourceGroupPacketExtension.class)); <nl> 
mmm CoinIQ.java <nl> ppp CoinIQ.java <nl> + bldr.append("</").append(ELEMENT_NAME).append(">"); <nl> - bldr.append("</").append(ELEMENT_NAME).append(">"); <nl> new file <nl> ppp SidebarsByValPacketExtension.java <nl> + package net.java.sip.communicator.impl.protocol.jabber.extensions.coin; <nl> + import net.java.sip.communicator.impl.protocol.jabber.extensions.*; <nl> 
mmm ContactRightButtonMenu.java <nl> ppp ContactRightButtonMenu.java <nl> - import java.util.*; <nl> + import java.util.*; <nl> - import org.osgi.framework.*; <nl> - import net.java.sip.communicator.service.gui.event.*; <nl> + import org.osgi.framework.*; <nl> - Iterator pluginComponents = GuiActivator.getUIService() <nl> 
mmm RawPacket.java <nl> ppp RawPacket.java <nl> - import java.math.*; <nl> - import java.util.*; <nl> - byte[] buffer = getBuffer(); <nl> + public int getPaddingSize() <nl> + { <nl> + if ((buffer[offset] & 0x4) == 0) <nl> + { <nl> + return 0; <nl> + } <nl> + else <nl> + { <nl> + return buffer[offset + length - 1]; <nl> 
mmm OperationSetServerStoredAccountInfoIcqImpl.java <nl> ppp OperationSetServerStoredAccountInfoIcqImpl.java <nl> + private int reqID = 0; <nl> + public static Hashtable supportedTypes = new Hashtable(); <nl> + static { <nl> + supportedTypes.put(ServerStoredDetails.CountryDetail.class,     new int[]{1, 0x01A4}); <nl> 
mmm PopupMessageHandlerTrayIconImpl.java <nl> ppp PopupMessageHandlerTrayIconImpl.java <nl> - import net.java.sip.communicator.impl.osdependent.systemtray.TrayIcon; <nl> deleted file <nl> mmm AWTSystemTray.java <nl> - package net.java.sip.communicator.impl.osdependent.systemtray.awt; <nl> - import java.awt.*; <nl> 
mmm CommandFactory.java <nl> ppp CommandFactory.java <nl> - LOGGER.debug("Unregistered command '" + command + "' (" <nl> - + type.toString() + ")"); <nl> + LOGGER.debug("Unregistered command '" + entry.getKey() <nl> + + "' (" + type.toString() + ")"); <nl> mmm Msg.java <nl> ppp Msg.java <nl> - package net.java.sip.communicator.impl.protocol.irc.command; <nl> 
mmm AudioMediaSession.java <nl> ppp AudioMediaSession.java <nl> - Hashtable mediaEncoding = MediaUtils.getAudioEncoding( <nl> - getPayloadType().getId()); <nl> + Map<String, List<String>> mediaEncoding <nl> + = MediaUtils.getAudioEncoding(getPayloadType().getId()); <nl> mmm OperationSetPresenceSipImpl.java <nl> 
mmm MailboxConfigurationForm.java <nl> ppp MailboxConfigurationForm.java <nl> + import java.awt.event.*; <nl> + import java.io.*; <nl> - import javax.swing.event.*; <nl> - import javax.swing.table.*; <nl> - import javax.swing.filechooser.*; <nl> - import java.io.*; <nl> - import java.awt.event.*; <nl> - import org.osgi.framework.*; <nl> 
new file <nl> ppp ChildHelperEx.java <nl> + package android.support.v7.widget; <nl> + import android.util.Log; <nl> + import android.view.View; <nl> + import android.view.ViewGroup; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + class ChildHelperEx { <nl> + private static final boolean DEBUG = false; <nl> 
mmm TestModule.java <nl> ppp TestModule.java <nl> - import org.isoron.uhabits.commands.*; <nl> + import org.isoron.uhabits.tasks.*; <nl> - @Singleton <nl> - @Provides <nl> - CommandRunner provideCommandRunner() <nl> - { <nl> - return mock(CommandRunner.class); <nl> - } <nl> + @Provides <nl> + @Singleton <nl> + TaskRunner provideTaskRunner() <nl> 
mmm Habit.java <nl> ppp Habit.java <nl> - public static class HabitData <nl> + public static final class HabitData <nl> + @Override <nl> + public String toString() <nl> + { <nl> + return new ToStringBuilder(this) <nl> + .append("id", id) <nl> + .append("data", data) <nl> + .toString(); <nl> + } <nl> mmm HabitMatcherBuilder.java <nl> 
new file <nl> ppp ShowHabitController.java <nl> + package org.isoron.uhabits.ui.habits.show; <nl> + import android.support.annotation.*; <nl> + import org.isoron.uhabits.*; <nl> + import org.isoron.uhabits.commands.*; <nl> + import org.isoron.uhabits.models.*; <nl> + import org.isoron.uhabits.tasks.*; <nl> + import org.isoron.uhabits.ui.habits.edit.*; <nl> 
mmm Reminder.java <nl> ppp Reminder.java <nl> + import org.apache.commons.lang3.builder.*; <nl> + @Override <nl> + public boolean equals(Object o) <nl> + { <nl> + if (this == o) return true; <nl> + if (o == null || getClass() != o.getClass()) return false; <nl> + Reminder reminder = (Reminder) o; <nl> + return new EqualsBuilder() <nl> 
deleted file <nl> mmm HabitWidgetProvider.java <nl> - package org.isoron.uhabits; <nl> - import android.appwidget.AppWidgetManager; <nl> - import android.appwidget.AppWidgetProvider; <nl> - import android.content.Context; <nl> - import android.content.SharedPreferences; <nl> - import android.graphics.Bitmap; <nl> 
mmm ReminderController.java <nl> ppp ReminderController.java <nl> + import org.isoron.uhabits.core.reminders.*; <nl> + import org.isoron.uhabits.core.ui.*; <nl> - import org.isoron.uhabits.notifications.*; <nl> - import org.isoron.uhabits.utils.*; <nl> - private final AndroidNotificationTray notificationTray; <nl> 
mmm Reminder.java <nl> ppp Reminder.java <nl> + import static org.isoron.uhabits.core.utils.StringUtils.defaultToStringStyle; <nl> - return new ToStringBuilder(this) <nl> + return new ToStringBuilder(this, defaultToStringStyle()) <nl> mmm CheckmarkListTest.java <nl> ppp CheckmarkListTest.java <nl> - import static org.isoron.uhabits.core.utils.StringUtils.removePointers; <nl> 
mmm SubtitleCard.java <nl> ppp SubtitleCard.java <nl> - if (habit.getDescription().isEmpty()) questionLabel.setVisibility(GONE); <nl> + if (habit.getQuestion().isEmpty()) questionLabel.setVisibility(GONE); <nl> mmm ImportTest.java <nl> ppp ImportTest.java <nl> - assertThat(habit.getDescription(), equalTo("with love and fire")); <nl> 
mmm BarcodesDetectedEvent.java <nl> ppp BarcodesDetectedEvent.java <nl> - import androidx.core.util.Pools; <nl> - import android.util.SparseArray; <nl> + import android.support.v4.util.Pools; <nl> mmm MutableImage.java <nl> ppp MutableImage.java <nl> - import androidx.exifinterface.media.ExifInterface; <nl> 
mmm Element.java <nl> ppp Element.java <nl> - import org.jsoup.helper.StringUtil; <nl> + import org.jsoup.internal.StringUtil; <nl> mmm W3CDom.java <nl> ppp W3CDom.java <nl> + import org.jsoup.internal.StringUtil; <nl> mmm XmlDeclaration.java <nl> ppp XmlDeclaration.java <nl> - import org.jsoup.helper.StringUtil; <nl> 
mmm DataUtil.java <nl> ppp DataUtil.java <nl> - if (charset.isEmpty()) return null; <nl> + if (charset.length() == 0) return null; <nl> mmm HttpConnection.java <nl> ppp HttpConnection.java <nl> - if (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM || status == HttpURLConnection.HTTP_SEE_OTHER) <nl> 
mmm HtmlTreeBuilder.java <nl> ppp HtmlTreeBuilder.java <nl> + import org.jsoup.nodes.CDataNode; <nl> - String tagName = currentElement().tagName(); <nl> - if (tagName.equals("script") || tagName.equals("style")) <nl> - node = new DataNode(characterToken.getData()); <nl> + final String tagName = currentElement().tagName(); <nl> 
mmm PostMultipart.java <nl> ppp PostMultipart.java <nl> + import com.squareup.okhttp.Headers; <nl> - .addFormDataPart("title", "Square Logo") <nl> - .addFormDataPart("image", null, <nl> + .addPart( <nl> + Headers.of("Content-Disposition", "form-data; name=\"title\""), <nl> + RequestBody.create(null, "Square Logo")) <nl> 
mmm Dispatcher.java <nl> ppp Dispatcher.java <nl> - public SocketPolicy peekSocketPolicy() { <nl> - return SocketPolicy.KEEP_OPEN; <nl> + public MockResponse peek() { <nl> + return new MockResponse().setSocketPolicy(SocketPolicy.KEEP_OPEN); <nl> + } <nl> + protected final SocketPolicy peekSocketPolicy() { <nl> 
mmm HttpAuthenticator.java <nl> ppp HttpAuthenticator.java <nl> - List<Challenge> challenges = parseChallenges(response.rawHeaders(), responseField); <nl> + List<Challenge> challenges = parseChallenges(response.headers(), responseField); <nl> - private static List<Challenge> parseChallenges(RawHeaders responseHeaders, <nl> 
mmm ResponseCacheTest.java <nl> ppp ResponseCacheTest.java <nl> - import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule; <nl> - @Rule public MockWebServerRule serverRule = new MockWebServerRule(); <nl> - @Rule public MockWebServerRule server2Rule = new MockWebServerRule(); <nl> + @Rule public MockWebServer server = new MockWebServer(); <nl> 
mmm ResponseHeaders.java <nl> ppp ResponseHeaders.java <nl> + import com.squareup.okhttp.internal.Platform; <nl> - private static final String SENT_MILLIS = "X-Android-Sent-Millis"; <nl> + private static final String SENT_MILLIS = Platform.get().getPrefix() + "-Sent-Millis"; <nl> - private static final String RECEIVED_MILLIS = "X-Android-Received-Millis"; <nl> 
mmm Internal.java <nl> ppp Internal.java <nl> + import okio.BufferedSink; <nl> + import okio.BufferedSource; <nl> mmm RealWebSocket.java <nl> ppp RealWebSocket.java <nl> + final boolean writeCloseResponse; <nl> + synchronized (closeLock) { <nl> + readerSentClose = true; <nl> + writeCloseResponse = !writerSentClose; <nl> 
mmm OkHttpClient.java <nl> ppp OkHttpClient.java <nl> + @Override public int code(Response.Builder responseBuilder) { <nl> + return responseBuilder.code; <nl> + } <nl> mmm Internal.java <nl> ppp Internal.java <nl> + import okhttp3.Response; <nl> + public abstract int code(Response.Builder responseBuilder); <nl> 
mmm CacheTest.java <nl> ppp CacheTest.java <nl> - import okhttp3.internal.Internal; <nl> + import okhttp3.internal.InternalKtKt; <nl> - Internal.instance.addLenient(headers, ": A"); <nl> + InternalKtKt.addHeaderLenient(headers, ": A"); <nl> mmm CallTest.java <nl> ppp CallTest.java <nl> - import okhttp3.mockwebserver.QueueDispatcher; <nl> 
mmm RouteSelector.java <nl> ppp RouteSelector.java <nl> - throw new SocketException("No route to " + address.getUriHost() <nl> + throw new SocketException("No route to " + address.url().host() <nl> + "; exhausted proxy configurations: " + proxies); <nl> - socketHost = address.getUriHost(); <nl> - socketPort = address.getUriPort(); <nl> 
mmm WebSocketRecorder.java <nl> ppp WebSocketRecorder.java <nl> - import com.squareup.okhttp.MediaType; <nl> - import com.squareup.okhttp.ResponseBody; <nl> + import okio.BufferedSource; <nl> - import static com.squareup.okhttp.ws.WebSocket.BINARY; <nl> - import static com.squareup.okhttp.ws.WebSocket.TEXT; <nl> 
mmm HttpEngine.java <nl> ppp HttpEngine.java <nl> - if (transparentGzip && response.isContentEncodingGzip()) { <nl> + if (transparentGzip && "gzip".equalsIgnoreCase(response.header("Content-Encoding"))) { <nl> - .stripContentEncoding() <nl> - .stripContentLength() <nl> + .removeHeader("Content-Encoding") <nl> 
mmm HttpTransport.java <nl> ppp HttpTransport.java <nl> - import com.squareup.okhttp.internal.AbstractOutputStream; <nl> - public boolean makeReusable(boolean streamCanceled, OutputStream requestBodyOut, <nl> - InputStream responseBodyIn) { <nl> - if (streamCanceled) { <nl> - return false; <nl> - } <nl> - if (requestBodyOut != null && !((AbstractOutputStream) requestBodyOut).isClosed()) { <nl> 
mmm CookiesTest.java <nl> ppp CookiesTest.java <nl> - import org.junit.After; <nl> - import org.junit.Before; <nl> - import org.junit.Test; <nl> + import org.junit.After; <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> mmm OkHttpAsync.java <nl> ppp OkHttpAsync.java <nl> + import com.squareup.okhttp.Callback; <nl> 
mmm WebSocketReader.java <nl> ppp WebSocketReader.java <nl> - import com.squareup.okhttp.WebSocketListener; <nl> - import static com.squareup.okhttp.WebSocket.PayloadType; <nl> + import static com.squareup.okhttp.internal.ws.WebSocket.PayloadType; <nl> mmm WebSocketWriter.java <nl> ppp WebSocketWriter.java <nl> 
mmm URLConnectionTest.java <nl> ppp URLConnectionTest.java <nl> + import okhttp3.testing.RecordingHostnameVerifier; <nl> + FakeProxySelector proxySelector = new FakeProxySelector(); <nl> + proxySelector.proxies.add(server2.toProxyAddress()); <nl> - .proxySelector(new FakeProxySelector() <nl> - .addProxy(server2.toProxyAddress())) <nl> 
mmm RetryAndFollowUpInterceptor.java <nl> ppp RetryAndFollowUpInterceptor.java <nl> - public OkHttpClient client() { <nl> - return client; <nl> - } <nl> mmm OkHttpURLConnection.java <nl> ppp OkHttpURLConnection.java <nl> - import java.util.ArrayList; <nl> - @Override <nl> - public void setInstanceFollowRedirects(boolean followRedirects) { <nl> 
mmm ResponseSource.java <nl> ppp ResponseSource.java <nl> - package com.squareup.okhttp.internal.util; <nl> + package com.squareup.okhttp; <nl> mmm HttpEngine.java <nl> ppp HttpEngine.java <nl> + import com.squareup.okhttp.ExtendedResponseCache; <nl> + import com.squareup.okhttp.ResponseSource; <nl> - import com.squareup.okhttp.internal.util.ExtendedResponseCache; <nl> 
mmm ConnectionSpecTest.java <nl> ppp ConnectionSpecTest.java <nl> - import java.util.HashSet; <nl> + import java.util.LinkedHashSet; <nl> - return new HashSet<String>(Arrays.asList(values)); <nl> + return new LinkedHashSet<String>(Arrays.asList(values)); <nl> mmm AndroidInternal.java <nl> ppp AndroidInternal.java <nl> 
mmm CacheTest.java <nl> ppp CacheTest.java <nl> + TestUtil.ensureAllConnectionsReleased(client); <nl> + package okhttp3.internal.http; <nl> + public interface UnrepeatableRequestBody { <nl> + } <nl> mmm DuplexTest.java <nl> ppp DuplexTest.java <nl> + import org.junit.After; <nl> + @After <nl> + public void tearDown() { <nl> 
mmm OkBufferTest.java <nl> ppp OkBufferTest.java <nl> - import static junit.framework.Assert.assertFalse; <nl> + import static org.junit.Assert.assertFalse; <nl> mmm OkHeaders.java <nl> ppp OkHeaders.java <nl> - return contentLength(request.headers()); <nl> + return stringToLong(request.header("Content-Length")); <nl> 
deleted file <nl> mmm StreamAllocation.java <nl> - package okhttp3.internal.connection; <nl> - import java.io.IOException; <nl> - import java.lang.ref.Reference; <nl> - import java.net.Socket; <nl> - import java.util.List; <nl> - import javax.annotation.Nullable; <nl> - import okhttp3.Address; <nl> - import okhttp3.Call; <nl> 
mmm DefaultClientTest.java <nl> ppp DefaultClientTest.java <nl> - import com.squareup.okhttp.mockwebserver.MockResponse; <nl> - import com.squareup.okhttp.mockwebserver.SocketPolicy; <nl> - import com.squareup.okhttp.mockwebserver.MockWebServer; <nl> + import okhttp3.mockwebserver.MockResponse; <nl> + import okhttp3.mockwebserver.SocketPolicy; <nl> 
new file <nl> ppp MeteredInvocationHandleFactory.java <nl> + package feign.metrics4; <nl> + import com.codahale.metrics.MetricRegistry; <nl> + import com.codahale.metrics.Timer; <nl> + import org.slf4j.Logger; <nl> + import org.slf4j.LoggerFactory; <nl> + import java.lang.reflect.InvocationHandler; <nl> + import java.lang.reflect.Method; <nl> 
mmm CloseableExecutorService.java <nl> ppp CloseableExecutorService.java <nl> - this.executorService = executorService; <nl> + this.executorService = Preconditions.checkNotNull(executorService); <nl> mmm TreeCache.java <nl> ppp TreeCache.java <nl> + import org.apache.curator.framework.api.UnhandledErrorListener; <nl> 
new file <nl> ppp BackgroundPathableQuietlyable.java <nl> + package org.apache.curator.framework.api; <nl> + public interface BackgroundPathableQuietlyable<T> extends BackgroundPathable<T>, Quietly<BackgroundPathable<T>> <nl> + { <nl> + } <nl> mmm RemoveWatchesType.java <nl> ppp RemoveWatchesType.java <nl> - public interface RemoveWatchesType extends RemoveWatchesLocal, Guaranteeable<BackgroundPathableQuietly<Void>> <nl> 
new file <nl> ppp TestBlockUntilConnected.java <nl> + package org.apache.curator.framework.imps; <nl> + import org.apache.curator.framework.CuratorFramework; <nl> + import org.apache.curator.framework.CuratorFrameworkFactory; <nl> + import org.apache.curator.framework.state.ConnectionState; <nl> + import org.apache.curator.framework.state.ConnectionStateListener; <nl> 
mmm TestFrameworkEdges.java <nl> ppp TestFrameworkEdges.java <nl> - import org.apache.curator.test.TestingServer; <nl> mmm TestEnsurePath.java <nl> ppp TestEnsurePath.java <nl> + import org.apache.curator.connection.ClassicConnectionHandlingPolicy; <nl> + when(curator.getConnectionHandlingPolicy()).thenReturn(new ClassicConnectionHandlingPolicy()); <nl> 
mmm JoinLeaveStatConfigEnsembleable.java <nl> ppp JoinLeaveStatConfigEnsembleable.java <nl> - StatConfigEnsembleable <nl> + ConfigureEnsembleable, <nl> + Statable<ConfigureEnsembleable> <nl> mmm LeaveAddStatConfigEnsembleable.java <nl> ppp LeaveAddStatConfigEnsembleable.java <nl> - StatConfigEnsembleable <nl> 
mmm TestLeaderSelector.java <nl> ppp TestLeaderSelector.java <nl> + import org.apache.curator.test.TestingServer; <nl> - private static final String     PATH_NAME = "/one/two/me"; <nl> + private static final String PATH_NAME = "/one/two/me"; <nl> + @Test <nl> + public void testInterruptLeadershipWithRequeue() throws Exception <nl> 
mmm Facing.java <nl> ppp Facing.java <nl> - package com.flurgle.camerakit.annotations; <nl> + package com.flurgle.camerakit.types; <nl> mmm CameraView.java <nl> ppp CameraView.java <nl> + import android.view.MotionEvent; <nl> + import android.view.View; <nl> - import com.flurgle.camerakit.annotations.Facing; <nl> 
mmm ZookeeperMonitorUtilsTest.java <nl> ppp ZookeeperMonitorUtilsTest.java <nl> - import cn.escheduler.dao.model.MasterServer; <nl> + import cn.escheduler.common.model.MasterServer; <nl> mmm MasterServerMapper.java <nl> ppp MasterServerMapper.java <nl> - import cn.escheduler.dao.model.MasterServer; <nl> + import cn.escheduler.common.model.MasterServer; <nl> 
mmm WorkerGroupServiceTest.java <nl> ppp WorkerGroupServiceTest.java <nl> + import org.apache.dolphinscheduler.dao.mapper.WorkerGroupMapper; <nl> - import org.junit.Before; <nl> - import java.util.Set; <nl> + @Mock <nl> + private WorkerGroupMapper workerGroupMapper; <nl> + private String groupName="groupName000001"; <nl> 
mmm ProcessService.java <nl> ppp ProcessService.java <nl> - logger.error(String.format("command node depend type is %s, but start nodes is null ", command.getTaskDependType().toString())); <nl> + logger.error("command node depend type is {}, but start nodes is null ", command.getTaskDependType()); <nl> - logger.error(String.format("cannot find the work process define! define id : %d", command.getProcessDefinitionId())); <nl> 
mmm MasterLogFilter.java <nl> ppp MasterLogFilter.java <nl> - package org.apache.dolphinscheduler.server.master.log; <nl> + package org.apache.dolphinscheduler.common.log; <nl> mmm TaskLogFilter.java <nl> ppp TaskLogFilter.java <nl> - package org.apache.dolphinscheduler.server.worker.log; <nl> + package org.apache.dolphinscheduler.common.log; <nl> 
deleted file <nl> mmm UpgradeDao.java <nl> - package cn.escheduler.dao.upgrade; <nl> - import cn.escheduler.common.utils.MysqlUtil; <nl> - import cn.escheduler.common.utils.ScriptRunner; <nl> - import cn.escheduler.dao.AbstractBaseDao; <nl> - import cn.escheduler.dao.datasource.ConnectionFactory; <nl> - import org.slf4j.Logger; <nl> 
mmm ProcessDefinition.java <nl> ppp ProcessDefinition.java <nl> - private int timeout; <nl> - public int getTimeout() { <nl> - return timeout; <nl> - } <nl> - public void setTimeout(int timeout) { <nl> - this.timeout = timeout; <nl> - } <nl> - ", timeout=" + timeout + <nl> mmm EschedulerManager.java <nl> ppp EschedulerManager.java <nl> 
mmm Constants.java <nl> ppp Constants.java <nl> + public static final int MAX_PROCESS_TIMEOUT = Integer.MAX_VALUE; <nl> - SELECT("td.id,td.name,td.version,td.release_state,td.project_id,td.user_id,td.`desc`,td.create_time,td.update_time,td.flag,td.global_params,td.receivers,td.receivers_cc,sc.schedule_release_state"); <nl> 
mmm WorkerServerMapperProvider.java <nl> ppp WorkerServerMapperProvider.java <nl> - public String queryWorkerByHost(Map<String, Object> parameter) { <nl> - return new SQL() {{ <nl> - SELECT("*"); <nl> - FROM(TABLE_NAME); <nl> - WHERE("host = #{host}"); <nl> - }}.toString(); <nl> - } <nl> + public Map<String,Object> previewSchedule(User loginUser, String projectName, String schedule) { <nl> 
mmm UserAlertGroupMapperTest.java <nl> ppp UserAlertGroupMapperTest.java <nl> - userAlertGroupMapper.deleteById(userAlertGroup.getId()); <nl> - userMapper.deleteById(user.getId()); <nl> - alertGroupMapper.deleteById(alertGroup.getId()); <nl> - package org.apache.dolphinscheduler.dao.mapper; <nl> - import org.apache.dolphinscheduler.dao.entity.WorkerGroup; <nl> 
mmm MasterSchedulerThread.java <nl> ppp MasterSchedulerThread.java <nl> - import cn.escheduler.common.zk.AbstractZKClient; <nl> - AbstractZKClient.releaseMutex(mutex); <nl> + if (mutex != null){ <nl> + try { <nl> + mutex.release(); <nl> + } catch (Exception e) { <nl> + if(e.getMessage().equals("instance must be started before calling this method")){ <nl> 
mmm FetchTaskThread.java <nl> ppp FetchTaskThread.java <nl> - import cn.escheduler.common.zk.AbstractZKClient; <nl> - AbstractZKClient.releaseMutex(mutex); <nl> + if (mutex != null){ <nl> + try { <nl> + mutex.release(); <nl> + } catch (Exception e) { <nl> + if(e.getMessage().equals("instance must be started before calling this method")){ <nl> 
mmm OnItemSelected.java <nl> ppp OnItemSelected.java <nl> - * @see Optional <nl> + * @see Nullable <nl> mmm AllTheThingsTest.java <nl> ppp AllTheThingsTest.java <nl> - import butterknife.Optional; <nl> + import butterknife.Nullable; <nl> - @Optional @InjectView(20) View optinalInjectView; <nl> + @Nullable @InjectView(20) View optinalInjectView; <nl> 
mmm UnbinderTest.java <nl> ppp UnbinderTest.java <nl> + "package test;\n" <nl> + + "import android.support.annotation.UiThread;\n" <nl> + "import android.view.View;\n" <nl> + "import butterknife.Unbinder;\n" <nl> + "import butterknife.internal.DebouncingOnClickListener;\n" <nl> + "public class Test_ViewBinding<T extends Test> implements Unbinder {\n" <nl> 
mmm OnClickTest.java <nl> ppp OnClickTest.java <nl> + import static com.example.butterknife.functional.ViewTestUtils.treeWithIds; <nl> - private static View treeWithIds(int... ids) { <nl> - Context context = InstrumentationRegistry.getContext(); <nl> - FrameLayout group = new FrameLayout(context); <nl> - class SuperGrossView extends View { <nl> 
mmm OnItemLongClick.java <nl> ppp OnItemLongClick.java <nl> - import android.view.View; <nl> - int[] value() default { View.NO_ID }; <nl> + int[] value(); <nl> mmm OnItemClick.java <nl> ppp OnItemClick.java <nl> - import android.view.View; <nl> - int[] value() default { View.NO_ID }; <nl> + int[] value(); <nl> 
mmm HttpClientConnection.java <nl> ppp HttpClientConnection.java <nl> - HttpClientStream beginRequest(HttpClientRequestImpl request); <nl> mmm ConnectionManager.java <nl> ppp ConnectionManager.java <nl> - ((Http2Pool)pool).createConn(handlerCtx, context, port, host, ch, waiter) <nl> + ((Http2Pool)pool).createConn(handlerCtx, context, ch, waiter) <nl> 
mmm MyDoublePojo.java <nl> ppp MyDoublePojo.java <nl> - public static class MyDoublePojoJsonCodec implements JsonCodec<MyDoublePojo, Double> { <nl> + public static class MyDoublePojoJsonCodec implements JsonCodec<MyDoublePojo, Number> { <nl> - public MyDoublePojo decode(Double value) throws IllegalArgumentException { <nl> 
mmm DeploymentManager.java <nl> ppp DeploymentManager.java <nl> + import java.net.URISyntaxException; <nl> + private String generateDeploymentID() { <nl> + return UUID.randomUUID().toString(); <nl> + } <nl> - doDeploy("java:" + verticle.getClass().getName(), options, currentContext, completionHandler, <nl> 
mmm WebSocketFrame.java <nl> ppp WebSocketFrame.java <nl> - import org.vertx.java.core.http.WebSocketFrame; <nl> - public interface WebSocketFrameInternal extends WebSocketFrame { <nl> + public interface WebSocketFrame { <nl> + enum FrameType { <nl> + CONTINUATION, <nl> + TEXT, <nl> + BINARY, <nl> + CLOSE, <nl> 
mmm HAManager.java <nl> ppp HAManager.java <nl> + import java.util.HashSet; <nl> + import java.util.Set; <nl> + import java.util.function.Consumer; <nl> - private volatile FailoverCompleteHandler nodeCrashedHandler; <nl> + private Consumer<Set<String>> clusterViewChangedHandler; <nl> + synchronized (haInfo) { <nl> 
mmm EventBusOptionsConverter.java <nl> ppp EventBusOptionsConverter.java <nl> + case "idleTimeoutUnit": <nl> + if (member.getValue() instanceof String) { <nl> + obj.setIdleTimeoutUnit(java.util.concurrent.TimeUnit.valueOf((String)member.getValue())); <nl> + } <nl> + break; <nl> + if (obj.getIdleTimeoutUnit() != null) { <nl> 
mmm EventBusImpl.java <nl> ppp EventBusImpl.java <nl> - doReceive(msg, holder, local); <nl> + doReceive(msg, holder); <nl> - doReceive(msg, holder, local); <nl> + doReceive(msg, holder); <nl> - private <T> void doReceive(MessageImpl msg, HandlerHolder<T> holder, boolean local) { <nl> + private <T> void doReceive(MessageImpl msg, HandlerHolder<T> holder) { <nl> 
mmm HttpClientImpl.java <nl> ppp HttpClientImpl.java <nl> + final HttpClientMetrics metrics; <nl> - HttpClientMetrics<?, ?, ?, ?> metrics = vertx.metricsSPI().createMetrics(this, options); <nl> - connectionManager = new ConnectionManager(this, metrics); <nl> + connectionManager = new ConnectionManager(this); <nl> 
mmm VertxNetHandler.java <nl> ppp VertxNetHandler.java <nl> + private final Channel ch; <nl> + protected NetSocketImpl conn; <nl> + public VertxNetHandler(Channel ch, Map<Channel, NetSocketImpl> connectionMap) { <nl> + this.ch = ch; <nl> + this.connectionMap = connectionMap; <nl> + } <nl> - public VertxNetHandler(Map<Channel, NetSocketImpl> connectionMap) { <nl> 
mmm NetServerImpl.java <nl> ppp NetServerImpl.java <nl> - metrics = vertx.metricsSPI().createMetrics(this, new SocketAddressImpl(id.port, id.host), options); <nl> + listenContext.runOnContext(v -> { <nl> + metrics = vertx.metricsSPI().createMetrics(this, new SocketAddressImpl(id.port, id.host), options); <nl> 
mmm MetricsTest.java <nl> ppp MetricsTest.java <nl> - public void start(Promise<Void> done) throws Exception { <nl> + public void start(Promise<Void> startPromise) throws Exception { <nl> - done.complete(); <nl> + startPromise.complete(); <nl> mmm HttpServerCloseHookTest.java <nl> ppp HttpServerCloseHookTest.java <nl> 
mmm HttpClientRequestImpl.java <nl> ppp HttpClientRequestImpl.java <nl> - client.getConnectionForRequest(ssl, port, host, waiter); <nl> + client.getConnectionForRequest(port, host, waiter); <nl> mmm DecodeException.java <nl> ppp DecodeException.java <nl> + public DecodeException(String message, Throwable cause) { <nl> 
mmm NetClientImpl.java <nl> ppp NetClientImpl.java <nl> + closed = true; <nl> - closed = true; <nl> mmm ClusteredEventBusTest.java <nl> ppp ClusteredEventBusTest.java <nl> - import java.util.ArrayList; <nl> - import java.util.concurrent.ConcurrentLinkedDeque; <nl> - @Test <nl> - public void sendNoContext() throws Exception { <nl> 
mmm DNSTest.java <nl> ppp DNSTest.java <nl> + import io.vertx.core.Vertx; <nl> + import io.vertx.core.VertxOptions; <nl> + @Test <nl> + public void testDefaultDnsClient() throws Exception { <nl> + final String ip = "10.0.0.1"; <nl> + FakeDNSServer fakeDNSServer = FakeDNSServer.testLookup4(ip); <nl> + fakeDNSServer.start(); <nl> 
mmm Http1xTest.java <nl> ppp Http1xTest.java <nl> - assertFalse(options.isUsePooledBuffers()); <nl> - assertEquals(options, options.setUsePooledBuffers(true)); <nl> - assertTrue(options.isUsePooledBuffers()); <nl> - assertFalse(options.isUsePooledBuffers()); <nl> - assertEquals(options, options.setUsePooledBuffers(true)); <nl> 
deleted file <nl> mmm MetricsContextTest.java <nl> - package io.vertx.test.core; <nl> - import io.vertx.core.AbstractVerticle; <nl> - import io.vertx.core.Context; <nl> - import io.vertx.core.Verticle; <nl> - import io.vertx.core.Vertx; <nl> - import io.vertx.core.VertxOptions; <nl> - import io.vertx.core.buffer.Buffer; <nl> 
new file <nl> ppp ServiceHelperTest.java <nl> + package io.vertx.core; <nl> + import io.vertx.test.spi.FakeFactory; <nl> + import io.vertx.test.spi.NotImplementedSPI; <nl> + import io.vertx.test.spi.SomeFactory; <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> + import javax.tools.*; <nl> + import java.io.File; <nl> 
mmm Http1xServerResponse.java <nl> ppp Http1xServerResponse.java <nl> + import io.vertx.core.spi.observability.HttpResponse; <nl> - public class Http1xServerResponse implements HttpServerResponse { <nl> + public class Http1xServerResponse implements HttpServerResponse, HttpResponse { <nl> + @Override <nl> 
mmm JavaHttpTest.java <nl> ppp JavaHttpTest.java <nl> + startApp(); <nl> + } <nl> + protected void startApp() throws Exception { <nl> mmm VertxHttpHandler.java <nl> ppp VertxHttpHandler.java <nl> mmm DefaultHttpServer.java <nl> ppp DefaultHttpServer.java <nl> + private boolean compressionSupported; <nl> - if (tcpHelper.isSSL()) { <nl> 
mmm NetClientOptions.java <nl> ppp NetClientOptions.java <nl> + public static final boolean DEFAULT_VERIFY_HOST = true; <nl> + private boolean verifyHost = true; <nl> + this.verifyHost = other.isVerifyHost(); <nl> + public boolean isVerifyHost() { <nl> + return verifyHost; <nl> + } <nl> + public NetClientOptions setVerifyHost(boolean verifyHost) { <nl> 
mmm MainActivity.java <nl> ppp MainActivity.java <nl> - clazz = CustomColorActivity.class; <nl> + clazz = CustomColorAndFontActivity.class; <nl> mmm BadgeActivity.java <nl> ppp BadgeActivity.java <nl> - import android.graphics.Color; <nl> - import com.roughike.bottombar.BottomBarBadge; <nl> - import com.roughike.bottombar.OnMenuTabClickListener; <nl> 
mmm ScoredValueListOutputTest.java <nl> ppp ScoredValueListOutputTest.java <nl> - assertThat(sut.get()).contains(new ScoredValue<>(4.567, "key")); <nl> + assertThat(sut.get()).contains(ScoredValue.fromNullable(4.567, "key")); <nl> mmm SortedSetCommandTest.java <nl> ppp SortedSetCommandTest.java <nl> - assertThat(redis.zadd(key, new ScoredValue<String>(1.0, "a"))).isEqualTo(1); <nl> 
mmm ConnectionFuture.java <nl> ppp ConnectionFuture.java <nl> - public interface ConnectionFuture<T> extends CompletionStage<T> { <nl> + public interface ConnectionFuture<T> extends CompletionStage<T>, Future<T> { <nl> + static <T> ConnectionFuture<T> from(SocketAddress remoteAddress, CompletableFuture<T> delegate) { <nl> 
mmm ClientTest.java <nl> ppp ClientTest.java <nl> - client.shutdown(1, 1, TimeUnit.SECONDS); <nl> + FastShutdown.shutdown(client); <nl> - client.shutdown(1, 1, TimeUnit.SECONDS); <nl> + FastShutdown.shutdown(client); <nl> - client.shutdown(); <nl> + FastShutdown.shutdown(client); <nl> mmm SentinelCommandTest.java <nl> 
mmm RedisSetCommands.java <nl> ppp RedisSetCommands.java <nl> + List<Boolean> smismember(K key, V... members); <nl> mmm RedisSetAsyncCommands.java <nl> ppp RedisSetAsyncCommands.java <nl> + RedisFuture<List<Boolean>> smismember(K key, V... members); <nl> mmm RedisSetReactiveCommands.java <nl> ppp RedisSetReactiveCommands.java <nl> 
mmm CreateSyncNodeSelectionClusterApi.java <nl> ppp CreateSyncNodeSelectionClusterApi.java <nl> - import java.util.Arrays; <nl> + import java.util.stream.Collectors; <nl> + import java.util.stream.Stream; <nl> + @SuppressWarnings("OptionalGetWithoutIsPresent") <nl> - private Set<String> FILTER_METHODS = LettuceSets.unmodifiableSet("shutdown", "debugOom", "debugSegfault", "digest", <nl> 
new file <nl> ppp ConversionService.java <nl> + package com.lambdaworks.redis.dynamic; <nl> + import java.util.HashMap; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import java.util.Optional; <nl> + import java.util.function.Function; <nl> + import com.lambdaworks.redis.dynamic.support.ClassTypeInformation; <nl> 
mmm MultiNodeExecution.java <nl> ppp MultiNodeExecution.java <nl> - import java.lang.reflect.Proxy; <nl> + import java.util.concurrent.CompletionStage; <nl> - import java.util.function.Predicate; <nl> - import io.lettuce.core.api.StatefulConnection; <nl> - import io.lettuce.core.api.sync.RedisCommands; <nl> 
new file <nl> ppp PluginTabActivity.java <nl> + package com.qihoo360.replugin.loader.a; <nl> + import android.app.TabActivity; <nl> + import android.content.Context; <nl> + import android.content.Intent; <nl> + import android.os.Bundle; <nl> + import com.qihoo360.replugin.RePluginInternal; <nl> + import com.qihoo360.replugin.helper.LogRelease; <nl> 
deleted file <nl> mmm IWebPage.java <nl> - package com.qihoo360.replugin.sample.demo1.webview; <nl> - import android.webkit.WebView; <nl> - public interface IWebPage { <nl> - WebView getWebView(); <nl> - } <nl> deleted file <nl> mmm SimpleWebView.java <nl> - package com.qihoo360.replugin.sample.webview.views; <nl> 
new file <nl> ppp BeatsTransportTest.java <nl> + package org.graylog.plugins.beats; <nl> + import org.graylog2.plugin.LocalMetricRegistry; <nl> + import org.graylog2.plugin.configuration.Configuration; <nl> + import org.graylog2.plugin.inputs.MessageInput; <nl> + import org.graylog2.plugin.inputs.util.ConnectionCounter; <nl> 
mmm MessageList.java <nl> ppp MessageList.java <nl> + @Override <nl> + @Override <nl> mmm FieldMetric.java <nl> ppp FieldMetric.java <nl> + @Override <nl> + @Override <nl> + @Override <nl> mmm Query.java <nl> ppp Query.java <nl> + @SuppressWarnings("unchecked") <nl> + @SuppressWarnings("unchecked") <nl> mmm GroupByHistogram.java <nl> 
deleted file <nl> mmm BeatsCodec.java <nl> - package org.graylog.plugins.beats; <nl> - import com.fasterxml.jackson.core.type.TypeReference; <nl> - import com.fasterxml.jackson.databind.ObjectMapper; <nl> - import com.google.inject.assistedinject.Assisted; <nl> - import org.graylog2.plugin.Message; <nl> - import org.graylog2.plugin.Tools; <nl> 
new file <nl> ppp ShiroAuthorizationFilter.java <nl> + package org.graylog2.security; <nl> + import org.apache.shiro.authz.AuthorizationException; <nl> + import org.apache.shiro.authz.annotation.RequiresPermissions; <nl> + import org.apache.shiro.subject.Subject; <nl> + import org.slf4j.Logger; <nl> + import org.slf4j.LoggerFactory; <nl> 
deleted file <nl> mmm AlarmCallbackConfigurationAVImpl.java <nl> - package org.graylog2.alarmcallbacks; <nl> - import com.fasterxml.jackson.annotation.JsonAutoDetect; <nl> - import com.fasterxml.jackson.annotation.JsonCreator; <nl> - import com.fasterxml.jackson.annotation.JsonProperty; <nl> - import com.google.auto.value.AutoValue; <nl> 
mmm LookupTable.java <nl> ppp LookupTable.java <nl> + public abstract LookupDefaultSingleValue defaultSingleValue(); <nl> + public abstract LookupDefaultMultiValue defaultMultiValue(); <nl> - return cache().get(LookupCacheKey.create(dataAdapter().id(), key), () -> dataAdapter().get(key)); <nl> + final LookupResult result = cache().get(LookupCacheKey.create(dataAdapter().id(), key), () -> dataAdapter().get(key)); <nl> 
mmm IndexSetConfig.java <nl> ppp IndexSetConfig.java <nl> + import org.joda.time.Duration; <nl> + private static final Duration DEFAULT_FIELD_TYPE_REFRESH_INTERVAL = Duration.standardSeconds(5L); <nl> + @JsonProperty("field_type_refresh_interval") <nl> + public abstract Duration fieldTypeRefreshInterval(); <nl> 
new file <nl> ppp ApiClientTest.java <nl> + package org.graylog2.restclient.lib; <nl> + import com.ning.http.client.AsyncHttpClient; <nl> + import com.ning.http.client.AsyncHttpClientConfig; <nl> + import org.graylog2.restclient.models.Node; <nl> + import org.graylog2.restclient.models.api.responses.EmptyResponse; <nl> 
mmm OutputFacade.java <nl> ppp OutputFacade.java <nl> + import org.graylog2.contentpacks.model.entities.NativeEntityDescriptor; <nl> + @Override <nl> + public Optional<NativeEntity<Output>> loadNativeEntity(NativeEntityDescriptor nativeEntityDescriptor) { <nl> + try { <nl> + final Output output = outputService.load(nativeEntityDescriptor.id().id()); <nl> 
mmm Collector.java <nl> ppp Collector.java <nl> - @Nullable <nl> - @JsonProperty(FIELD_DEFAULT_TEMPLATE) @Nullable String defaultTemplate) { <nl> + @JsonProperty(FIELD_DEFAULT_TEMPLATE) String defaultTemplate) { <nl> mmm LookupDataAdapterFacadeTest.java <nl> ppp LookupDataAdapterFacadeTest.java <nl> - assertThat(nativeEntity.descriptor().id()).isEqualTo(ModelId.of("http-dsv")); <nl> 
new file <nl> ppp MigrationsModule.java <nl> + package org.graylog2.migrations; <nl> + import com.google.inject.AbstractModule; <nl> + import com.google.inject.multibindings.Multibinder; <nl> + public class MigrationsModule extends AbstractModule { <nl> + @Override <nl> + protected void configure() { <nl> + final Multibinder<Migration> binder = Multibinder.newSetBinder(binder(), Migration.class); <nl> 
deleted file <nl> mmm BeatsInputDescriptorTest.java <nl> - package org.graylog.plugins.beats; <nl> - import org.junit.Test; <nl> - import static org.assertj.core.api.Assertions.assertThat; <nl> - public class BeatsInputDescriptorTest { <nl> - @Test <nl> - public void descriptorNameIsCorrect() { <nl> - assertThat(new BeatsInput.Descriptor().getName()).isEqualTo("Beats"); <nl> 
mmm KeywordSearchResource.java <nl> ppp KeywordSearchResource.java <nl> - @ApiParam(name = "filter", value = "Filter", required = false) @QueryParam("filter") String filter) { <nl> + @ApiParam(name = "filter", value = "Filter", required = false) @QueryParam("filter") String filter, <nl> + @ApiParam(name = "cardinality", value = "Calculate the cardinality of the field as well", required = false) @QueryParam("cardinality") boolean includeCardinality <nl> 
mmm TimeUnitInterval.java <nl> ppp TimeUnitInterval.java <nl> - static TimeUnitInterval create(String timeunit) { <nl> + public static TimeUnitInterval create(String timeunit) { <nl> mmm Series.java <nl> ppp Series.java <nl> + import org.graylog.plugins.views.migrations.V20191125144500_MigrateDashboardsToViewsSupport.SeriesSpec; <nl> 
mmm Message.java <nl> ppp Message.java <nl> - import java.io.IOException; <nl> - import java.net.URL; <nl> - import java.util.ArrayList; <nl> - import lib.Api; <nl> + import lib.ApiClient; <nl> + import java.io.IOException; <nl> + import java.util.ArrayList; <nl> - 		String resource = "messages/" + index + "/" + id; <nl> 
mmm IndicesTest.java <nl> ppp IndicesTest.java <nl> - import org.graylog2.indexer.IndexMapping2; <nl> + import org.graylog2.indexer.IndexMappingFactory; <nl> + private IndexMappingFactory indexMappingFactory; <nl> + indexMappingFactory = new IndexMappingFactory(jestClient()); <nl> - new IndexMapping2(), <nl> 
mmm Notification.java <nl> ppp Notification.java <nl> + OUTPUT_FAILING, <nl> mmm SearchQueryOperator.java <nl> ppp SearchQueryOperator.java <nl> - return DBQuery.regex(key, Pattern.compile(value.toString(), CASE_INSENSITIVE)); <nl> + return DBQuery.regex(key, Pattern.compile(Pattern.quote(value.toString()), CASE_INSENSITIVE)); <nl> 
mmm AbsoluteRange.java <nl> ppp AbsoluteRange.java <nl> + import com.fasterxml.jackson.annotation.JsonCreator; <nl> + @JsonCreator <nl> new file <nl> ppp QuickValuesConfig.java <nl> + package org.graylog.plugins.views.migrations.V20191125144500_MigrateDashboardsToViewsSupport.dashboardwidgets; <nl> + import com.fasterxml.jackson.annotation.JsonAutoDetect; <nl> 
new file <nl> ppp GELFMessageFilterHook.java <nl> + package org.graylog2.messagehandlers.common; <nl> + import java.util.regex.Matcher; <nl> + import java.util.regex.Pattern; <nl> + import org.graylog2.Main; <nl> + import org.graylog2.messagehandlers.gelf.GELFMessage; <nl> + import org.productivity.java.syslog4j.Syslog; <nl> 
new file <nl> ppp JmxOsProbe.java <nl> + package org.graylog2.shared.system.stats.os; <nl> + import javax.inject.Singleton; <nl> + import java.lang.management.ManagementFactory; <nl> + @Singleton <nl> + public class JmxOsProbe implements OsProbe { <nl> + @Override <nl> + public OsStats osStats() { <nl> + final long uptime = -1l; <nl> 
mmm ProcessBufferProcessor.java <nl> ppp ProcessBufferProcessor.java <nl> + import com.google.inject.Provider; <nl> + import com.google.inject.assistedinject.Assisted; <nl> + import com.google.inject.assistedinject.AssistedInject; <nl> + import org.graylog2.buffers.OutputBuffer; <nl> + import org.graylog2.messageprocessors.OrderedMessageProcessors; <nl> 
new file <nl> ppp GRNPermission.java <nl> + package org.graylog.security.permissions; <nl> + import com.google.auto.value.AutoValue; <nl> + import org.apache.shiro.authz.Permission; <nl> + import org.graylog2.utilities.GRN; <nl> + @AutoValue <nl> + public abstract class GRNPermission implements Permission { <nl> 
new file <nl> ppp PersistedInputsSummaryResponse.java <nl> + package org.graylog2.rest.models.radio.responses; <nl> + import com.fasterxml.jackson.annotation.JsonCreator; <nl> + import com.fasterxml.jackson.annotation.JsonProperty; <nl> + import com.google.auto.value.AutoValue; <nl> + import java.util.List; <nl> 
mmm BlacklistIpMatcherCondition.java <nl> ppp BlacklistIpMatcherCondition.java <nl> - import org.slf4j.Logger; <nl> - import org.slf4j.LoggerFactory; <nl> + import java.util.Objects; <nl> - public class BlacklistIpMatcherCondition extends FilterDescription { <nl> - private static final Logger LOG = LoggerFactory.getLogger(BlacklistIpMatcherCondition.class); <nl> 
mmm AccessTokenServiceImpl.java <nl> ppp AccessTokenServiceImpl.java <nl> - import com.mongodb.MongoException; <nl> + import com.mongodb.DuplicateKeyException; <nl> - } catch (MongoException.DuplicateKey ignore) { <nl> + } catch (DuplicateKeyException ignore) { <nl> - collection(AccessTokenImpl.class).ensureIndex(new BasicDBObject(AccessTokenImpl.TOKEN, 1), null, true); <nl> 
mmm EsIndexRangeService.java <nl> ppp EsIndexRangeService.java <nl> - if (indexRange.begin().getMillis() >= begin.getMillis() && indexRange.end().getMillis() <= end.getMillis()) { <nl> + if (indexRange.begin().getMillis() <= end.getMillis() && indexRange.end().getMillis() >= begin.getMillis()) { <nl> mmm LdapResource.java <nl> 
mmm ConfigurationRequest.java <nl> ppp ConfigurationRequest.java <nl> - import org.graylog2.plugin.configuration.fields.ListField; <nl> - public ConfigurationRequest() { <nl> - } <nl> + public ConfigurationRequest() {} <nl> - case ListField.FIELD_TYPE: <nl> - if (!configuration.listIsSet(fieldName)) { <nl> - throw new ConfigurationException("Mandatory configuration field \"" + fieldName + "\" is missing or has the wrong data type"); <nl> 
new file <nl> ppp RestResourceWithOwnerCheck.java <nl> + package org.graylog.security.rest; <nl> + import org.graylog.security.permissions.GRNPermission; <nl> + import org.graylog2.plugin.rest.PluginRestResource; <nl> + import org.graylog2.shared.rest.resources.RestResource; <nl> + import org.graylog2.shared.security.RestPermissions; <nl> 
mmm NotificationTypeFactory.java <nl> ppp NotificationTypeFactory.java <nl> + case INDEX_RANGES_RECALCULATION: <nl> + return new IndexRangesRecalculationNotification(notification); <nl> mmm UsersApiController.java <nl> ppp UsersApiController.java <nl> + userResponse.roles = user.getRoles(); <nl> new file <nl> 
new file <nl> ppp BeatsTransportTest.java <nl> + package org.graylog.plugins.beats; <nl> + import org.graylog2.plugin.LocalMetricRegistry; <nl> + import org.graylog2.plugin.configuration.Configuration; <nl> + import org.graylog2.plugin.inputs.MessageInput; <nl> + import org.graylog2.plugin.inputs.util.ConnectionCounter; <nl> 
mmm AlarmCallbackConfigurationServiceMJImplTest.java <nl> ppp AlarmCallbackConfigurationServiceMJImplTest.java <nl> - import com.codahale.metrics.json.MetricsModule; <nl> - import com.fasterxml.jackson.databind.ObjectMapper; <nl> - import com.fasterxml.jackson.databind.PropertyNamingStrategy; <nl> - import com.fasterxml.jackson.databind.SerializationFeature; <nl> 
new file <nl> ppp GeoIpResolverEngine.java <nl> + package org.graylog.plugins.map.geoip; <nl> + import com.codahale.metrics.MetricRegistry; <nl> + import com.codahale.metrics.Timer; <nl> + import com.google.common.collect.Lists; <nl> + import com.google.common.net.InetAddresses; <nl> + import com.maxmind.geoip2.DatabaseReader; <nl> 
deleted file <nl> mmm BeatsInputPluginModule.java <nl> - package org.graylog.plugins.beats; <nl> - import org.graylog2.plugin.PluginModule; <nl> - public class BeatsInputPluginModule extends PluginModule { <nl> - @Override <nl> - protected void configure() { <nl> - addTransport("beats", BeatsTransport.class); <nl> 
mmm StreamRouterEngine.java <nl> ppp StreamRouterEngine.java <nl> - return matches.values().contains(false); <nl> + return matches.values().contains(true); <nl> mmm StreamResource.java <nl> ppp StreamResource.java <nl> + import org.graylog2.streams.StreamImpl; <nl> - streamData.put("title", cr.title()); <nl> 
mmm MessagesController.java <nl> ppp MessagesController.java <nl> - public Result show(String index, String id) { <nl> + public Result single(String index, String id) { <nl> - Node sourceNode = getSourceNode(message); <nl> - Radio sourceRadio = getSourceRadio(message); <nl> - return ok(views.html.messages.show.render(currentUser(), message, getSourceInput(sourceNode, message), sourceNode, sourceRadio, getSourceInput(sourceRadio, message))); <nl> 
mmm SyslogCodecTest.java <nl> ppp SyslogCodecTest.java <nl> + assertEquals(20, message.getField("facility_num")); <nl> + assertEquals(23, message.getField("facility_num")); <nl> + assertEquals(23, message.getField("facility_num")); <nl> + assertEquals(16, message.getField("facility_num")); <nl> + assertEquals(20, message.getField("facility_num")); <nl> 
mmm Server.java <nl> ppp Server.java <nl> - import org.graylog2.shared.bindings.RestApiBindings; <nl> - new ServerObjectMapperModule(), <nl> - new RestApiBindings() <nl> + new ServerObjectMapperModule() <nl> new file <nl> ppp RebuildIndexRangesJobTest.java <nl> + package org.graylog2.indexer.ranges; <nl> + import com.codahale.metrics.MetricRegistry; <nl> 
mmm KeywordRange.java <nl> ppp KeywordRange.java <nl> - public class KeywordRange implements TimeRange, FromToRange { <nl> + public class KeywordRange implements TimeRange { <nl> mmm TimeRange.java <nl> ppp TimeRange.java <nl> + import org.joda.time.DateTime; <nl> - public interface TimeRange extends FromRange { <nl> 
new file <nl> ppp BeatsTransportConfigTest.java <nl> + package org.graylog.plugins.beats; <nl> + import org.graylog2.plugin.configuration.ConfigurationRequest; <nl> + import org.graylog2.plugin.inputs.transports.NettyTransport; <nl> + import org.junit.Test; <nl> + import static org.assertj.core.api.Assertions.assertThat; <nl> 
new file <nl> ppp SetField.java <nl> + package org.graylog.plugins.messageprocessor.ast.functions.builtin; <nl> + import org.graylog.plugins.messageprocessor.EvaluationContext; <nl> + import org.graylog.plugins.messageprocessor.ast.expressions.Expression; <nl> + import org.graylog.plugins.messageprocessor.ast.functions.Function; <nl> 
mmm AggregationEventProcessor.java <nl> ppp AggregationEventProcessor.java <nl> + import org.graylog.plugins.views.search.errors.ParameterExpansionError; <nl> + import org.graylog.plugins.views.search.errors.SearchException; <nl> - if (config.series().isEmpty()) { <nl> - filterSearch(eventFactory, parameters, eventsConsumer); <nl> 
mmm StreamResource.java <nl> ppp StreamResource.java <nl> - request.configuration = alarmCallbackConfiguration.getConfiguration().getSource(); <nl> + request.configuration = alarmCallbackConfiguration.getConfiguration(); <nl> new file <nl> ppp AlarmCallbackConfigurationServiceMJImpl.java <nl> + package org.graylog2.alarmcallbacks; <nl> 
mmm ViewsBindings.java <nl> ppp ViewsBindings.java <nl> + import org.graylog.plugins.views.search.views.widgets.aggregation.AreaVisualizationConfigDTO; <nl> + import org.graylog.plugins.views.search.views.widgets.aggregation.LineVisualizationConfigDTO; <nl> + registerJacksonSubtype(LineVisualizationConfigDTO.class); <nl> 
mmm AINodeAnim.java <nl> ppp AINodeAnim.java <nl> - * <li>{@code mPreState} &ndash; <nl> - * Defines how the animation behaves before the first key is encountered. The default value is aiAnimBehaviour_DEFAULT (the original transformation matrix <nl> - * of the affected node is used).</li> <nl> - * <li>{@code mPostState} &ndash; <nl> 
new file <nl> ppp NVXGpuMulticast2.java <nl> + package org.lwjgl.opengl; <nl> + import java.nio.*; <nl> + import org.lwjgl.system.*; <nl> + import static org.lwjgl.system.Checks.*; <nl> + import static org.lwjgl.system.JNI.*; <nl> + import static org.lwjgl.system.MemoryUtil.*; <nl> + public class NVXGpuMulticast2 { <nl> 
mmm Demo20.java <nl> ppp Demo20.java <nl> - import org.lwjgl.PointerBuffer; <nl> + import org.lwjgl.opengl.GL; <nl> - import java.nio.IntBuffer; <nl> - import static org.lwjgl.demo.util.IOUtil.*; <nl> - 	static { <nl> - 		System.setProperty("org.lwjgl.opengl.maxVersion", "2.0"); <nl> - 	} <nl> - 	private static int createShader(String resource, int type) throws IOException { <nl> 
mmm Mandelbrot.java <nl> ppp Mandelbrot.java <nl> - import org.lwjgl.opengl.ContextCapabilities; <nl> + import org.lwjgl.opengl.GLCapabilities; <nl> - 		ContextCapabilities glCaps = glContext.getCapabilities(); <nl> + 		GLCapabilities glCaps = glContext.getCapabilities(); <nl> mmm GLContext.java <nl> ppp GLContext.java <nl> 
mmm HackyViewPager.java <nl> ppp HackyViewPager.java <nl> - 	private boolean isLocked; <nl> - 	 <nl> - isLocked = false; <nl> - isLocked = false; <nl> - 	if (!isLocked) { <nl> - 	        try { <nl> - 	            return super.onInterceptTouchEvent(ev); <nl> - 	        } catch (IllegalArgumentException e) { <nl> 
mmm BinarySparseThinPlateSplineKernel.java <nl> ppp BinarySparseThinPlateSplineKernel.java <nl> - throw new IllegalArgumentException("sigma is not positive."); <nl> + throw new IllegalArgumentException("sigma is not positive: " + sigma); <nl> mmm HyperbolicTangentKernel.java <nl> ppp HyperbolicTangentKernel.java <nl> 
mmm ByteVectorImpl.java <nl> ppp ByteVectorImpl.java <nl> + @Override <nl> + public int[] toIntArray() { <nl> + int[] a = new int[vector.length]; <nl> + for (int i = 0; i < a.length; i++) a[i] = vector[i]; <nl> + return a; <nl> + } <nl> + @Override <nl> + public double[] toDoubleArray() { <nl> + double[] a = new double[vector.length]; <nl> 
mmm OneHotEncoder.java <nl> ppp OneHotEncoder.java <nl> - public class Nominal2Binary implements Feature<double[]> { <nl> + public class OneHotEncoder implements FeatureGenerator<double[]> { <nl> - private int[] map; <nl> - private int[] value; <nl> - public Nominal2Binary(Attribute[] attributes) { <nl> + public OneHotEncoder(Attribute[] attributes) { <nl> 
new file <nl> ppp BreastCancer.java <nl> + package smile.data; <nl> + import org.apache.commons.csv.CSVFormat; <nl> + import smile.data.formula.Formula; <nl> + import smile.data.measure.NominalScale; <nl> + import smile.data.type.DataTypes; <nl> + import smile.data.type.StructField; <nl> + import smile.data.type.StructType; <nl> 
mmm ExponentialFamilyMixtureDemo.java <nl> ppp ExponentialFamilyMixtureDemo.java <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - List<Mixture.Component> m = new ArrayList<>(); <nl> + Vector<Mixture.Component> m = new Vector<Mixture.Component>(); <nl> - List<Mixture.Component> m = new ArrayList<>(); <nl> 
mmm Diabetes.java <nl> ppp Diabetes.java <nl> - package smile.regression; <nl> + package smile.data; <nl> - import java.io.Serializable; <nl> - import smile.data.DataFrame; <nl> - import smile.data.Tuple; <nl> + import org.apache.commons.csv.CSVFormat; <nl> + import smile.io.CSV; <nl> + import smile.util.Paths; <nl> 
mmm RDA.java <nl> ppp RDA.java <nl> - public void setPriori(double[] priori) { <nl> + public Trainer setPriori(double[] priori) { <nl> + return this; <nl> - public void setTolerance(double tol) { <nl> + public Trainer setTolerance(double tol) { <nl> + return this; <nl> mmm SVMTest.java <nl> ppp SVMTest.java <nl> 
new file <nl> ppp CPU.java <nl> + package smile.data; <nl> + import smile.data.formula.Formula; <nl> + import smile.io.Arff; <nl> + import smile.util.Paths; <nl> + public class CPU { <nl> + public static DataFrame data; <nl> + public static Formula formula = Formula.lhs("class"); <nl> + public static double[][] x; <nl> 
deleted file <nl> mmm PassthruFunction.java <nl> - package com.jayway.jsonpath.internal.function; <nl> - import com.jayway.jsonpath.Function; <nl> - import com.jayway.jsonpath.internal.EvaluationContext; <nl> - import com.jayway.jsonpath.internal.PathRef; <nl> - public class PassthruFunction implements Function { <nl> 
mmm NearbyBeaconsFragment.java <nl> ppp NearbyBeaconsFragment.java <nl> + import android.net.wifi.WifiInfo; <nl> + import android.net.wifi.WifiManager; <nl> - private boolean mMissedEmptyGroupIdQueue = false; <nl> - private SwipeDismissListViewTouchListener mTouchListener; <nl> - mScanningAnimationDrawable.stop(); <nl> 
mmm PwoDiscoveryService.java <nl> ppp PwoDiscoveryService.java <nl> - public interface PwoResponseCallback { <nl> - public void onPwoDiscoveryUpdate(); <nl> + public interface PwoResponseCallback extends PwoDiscoverer.PwoDiscoveryCallback, <nl> + PwsClient.ResolveScanCallback, <nl> + PwsClient.DownloadIconCallback { <nl> 
mmm PhysicalWebCollection.java <nl> ppp PhysicalWebCollection.java <nl> - private static final String TYPE_KEY = "type"; <nl> - private static final String DATA_KEY = "data"; <nl> + private static final String ID_KEY = "id"; <nl> + private static final String URL_KEY = "url"; <nl> - private Map<Class, UrlDeviceJsonSerializer> mUrlDeviceTypeToUrlDeviceJsonSerializer; <nl> 
mmm DeleteQueryTest.java <nl> ppp DeleteQueryTest.java <nl> - ConceptId id = kurtzCastRelation.get("a").findFirst().get().getId(); <nl> + ConceptId id = kurtzCastRelation.get("a").stream().map(ans -> ans.get("a")).findFirst().get().getId(); <nl> - ).get("a").findFirst().get().getId(); <nl> + ).get("a").stream().map(ans -> ans.get("a")).findFirst().get().getId(); <nl> 
mmm GrpcUtil.java <nl> ppp GrpcUtil.java <nl> - public static GraknTxType convert(TxType txType) { <nl> + private static GraknTxType convert(TxType txType) { <nl> mmm RemoteGraknSession.java <nl> ppp RemoteGraknSession.java <nl> - import ai.grakn.grpc.GrpcUtil; <nl> - protected RemoteGraknSession(Keyspace keyspace, SimpleURI uri, ManagedChannel channel) { <nl> 
mmm RecursionIT.java <nl> ppp RecursionIT.java <nl> - GraqlTestUtil.assertCollectionsEqual( <nl> + GraqlTestUtil.assertCollectionsNonTriviallyEqual( <nl> - GraqlTestUtil.assertCollectionsEqual(tx.execute(Graql.<GetQuery>parse(explicitQuery), false), tx.execute(Graql.<GetQuery>parse(query))); <nl> + GraqlTestUtil.assertCollectionsNonTriviallyEqual(tx.execute(Graql.<GetQuery>parse(explicitQuery), false), tx.execute(Graql.<GetQuery>parse(query))); <nl> 
new file <nl> ppp ConnectedComponentsVertexProgram.java <nl> + package ai.grakn.graql.internal.analytics; <nl> + import ai.grakn.exception.GraqlQueryException; <nl> + import ai.grakn.util.Schema; <nl> + import org.apache.tinkerpop.gremlin.process.computer.Memory; <nl> + import org.apache.tinkerpop.gremlin.process.computer.MemoryComputeKey; <nl> 
mmm GraknSparkComputer.java <nl> ppp GraknSparkComputer.java <nl> - public static void close() { <nl> + public static void clear() { <nl> mmm ClusteringTest.java <nl> ppp ClusteringTest.java <nl> - GraknSparkComputer.close(); <nl> + GraknSparkComputer.clear(); <nl> - GraknSparkComputer.close(); <nl> + GraknSparkComputer.clear(); <nl> 
mmm RoleTypeImpl.java <nl> ppp RoleTypeImpl.java <nl> - import java.util.HashSet; <nl> - import java.util.Set; <nl> mmm AttributeType.java <nl> ppp AttributeType.java <nl> + Stream<? extends ThingType> getOwners(); <nl> + Stream<? extends ThingType> getOwners(boolean onlyKey); <nl> mmm RelationSteps.java <nl> 
mmm QueueProcess.java <nl> ppp QueueProcess.java <nl> + Thread.currentThread().interrupt(); <nl> mmm StorageProcess.java <nl> ppp StorageProcess.java <nl> + import java.util.stream.Stream; <nl> + Preconditions.checkNotNull(tx); <nl> mmm BatchLoader.java <nl> ppp BatchLoader.java <nl> - FileInputStream inputStream = new FileInputStream(graqlPath.toFile()); <nl> 
deleted file <nl> mmm PokemonGraph.java <nl> - package ai.grakn.graphs; <nl> - import ai.grakn.GraknGraph; <nl> - import ai.grakn.example.PokemonGraphFactory; <nl> - import java.util.function.Consumer; <nl> - public class PokemonGraph extends TestGraph { <nl> - public static Consumer<GraknGraph> get(){ <nl> 
mmm TypeVertexImpl.java <nl> ppp TypeVertexImpl.java <nl> mmm RuleImpl.java <nl> ppp RuleImpl.java <nl> - import graql.lang.pattern.Pattern; <nl> - import graql.lang.pattern.variable.ThingVariable; <nl> mmm GraphProducer.java <nl> ppp GraphProducer.java <nl> - int splitCount = (int) Math.ceil((double) count / parallelisation); <nl> 
mmm RedisCountStorage.java <nl> ppp RedisCountStorage.java <nl> - * @param count the number to adjust the key by <nl> + * @param incrementBy the number to adjust the key by <nl> - public long adjustCount(String key, long count){ <nl> + public long incrementCount(String key, long incrementBy){ <nl> - if(count != 0) { <nl> 
mmm TinkerInternalFactory.java <nl> ppp TinkerInternalFactory.java <nl> - TinkerGraph buildTinkerPopGraph() { <nl> + TinkerGraph buildTinkerPopGraph(boolean batchLoading) { <nl> - protected TinkerGraph getTinkerPopGraph(TinkerGraph graph){ <nl> + protected TinkerGraph getTinkerPopGraph(TinkerGraph graph, boolean batchLoading){ <nl> 
new file <nl> ppp DegreeDistributionMapReduce.java <nl> + package io.mindmaps.graql.internal.analytics; <nl> + import io.mindmaps.util.Schema; <nl> + import org.apache.tinkerpop.gremlin.process.computer.KeyValue; <nl> + import org.apache.tinkerpop.gremlin.structure.Vertex; <nl> + import java.io.Serializable; <nl> 
mmm TaskClientTest.java <nl> ppp TaskClientTest.java <nl> + import static ai.grakn.engine.TaskStatus.CREATED; <nl> + import static ai.grakn.test.engine.tasks.BackgroundTaskTestUtils.createTask; <nl> + import static java.time.Instant.now; <nl> + import static junit.framework.TestCase.assertFalse; <nl> + import static org.hamcrest.MatcherAssert.assertThat; <nl> 
mmm GraknDb.java <nl> ppp GraknDb.java <nl> + import com.ldbc.driver.workloads.ldbc.snb.interactive.LdbcShortQuery2PersonPosts; <nl> mmm HALUtils.java <nl> ppp HALUtils.java <nl> - import javafx.util.Pair; <nl> + import ai.grakn.graql.internal.reasoner.utils.Pair; <nl> mmm UnifierImpl.java <nl> ppp UnifierImpl.java <nl> 
mmm StringMacro.java <nl> ppp StringMacro.java <nl> - import ai.grakn.graql.internal.template.Value; <nl> + import ai.grakn.graql.macro.Macro; <nl> - public String apply(List<Value> values) { <nl> + public String apply(List<Object> values) { <nl> mmm TemplateVisitor.java <nl> ppp TemplateVisitor.java <nl> - import ai.grakn.graql.internal.template.macro.Macro; <nl> 
mmm MaterialisationIT.java <nl> ppp MaterialisationIT.java <nl> - materialiseWithoutDuplicates(Graql.var("x").has("resource-long", 10.0).id(entity.id().getValue()), tx); <nl> - materialiseWithoutDuplicates(Graql.var("x").has("resource-long", 10).id(entity.id().getValue()), tx); <nl> - materialiseWithoutDuplicates(Graql.var("x").has("resource-long", 10L).id(entity.id().getValue()), tx); <nl> 
new file <nl> ppp ResourceIndexFragmentSet.java <nl> + package ai.grakn.graql.internal.gremlin.sets; <nl> + import ai.grakn.GraknGraph; <nl> + import ai.grakn.concept.Type; <nl> + import ai.grakn.concept.TypeName; <nl> + import ai.grakn.graql.VarName; <nl> + import ai.grakn.graql.internal.gremlin.EquivalentFragmentSet; <nl> 
mmm SingleQueueTaskRunner.java <nl> ppp SingleQueueTaskRunner.java <nl> - import ai.grakn.engine.TaskStatus; <nl> - import static ai.grakn.engine.TaskStatus.COMPLETED; <nl> - import static ai.grakn.engine.TaskStatus.CREATED; <nl> - private boolean handleTask(TaskState task) { <nl> - LOG.debug("{}\treceived", task); <nl> 
mmm Relation.java <nl> ppp Relation.java <nl> - import ai.grakn.util.ErrorMessage; <nl> - import com.google.common.collect.Sets; <nl> mmm AtomicMatchQuery.java <nl> ppp AtomicMatchQuery.java <nl> - import ai.grakn.graql.internal.reasoner.atom.Atom; <nl> - import static ai.grakn.graql.internal.reasoner.query.QueryAnswers.getUnifiedAnswers; <nl> 
deleted file <nl> mmm AndPredicate.java <nl> - package ai.grakn.graql.internal.query.predicate; <nl> - import ai.grakn.graql.admin.ValuePredicateAdmin; <nl> - import com.google.common.collect.ImmutableSet; <nl> - import ai.grakn.graql.admin.ValuePredicateAdmin; <nl> - import org.apache.tinkerpop.gremlin.process.traversal.P; <nl> 
mmm Literal.java <nl> ppp Literal.java <nl> - public Symbol cast(DataType newDataType, boolean tryCast) { <nl> - return Literal.convert(this, newDataType); <nl> + public Symbol cast(DataType<?> targetType, boolean tryCast) { <nl> + if (type.equals(targetType)) { <nl> + return this; <nl> + } <nl> + try { <nl> 
mmm Task.java <nl> ppp Task.java <nl> - * If tasks are chained, it is necessary to call {@linkplain #upstreamResult(java.util.List)} <nl> - * with the result of the former task, so the current task can itself wait for <nl> - * the upstream result if necessary before it starts its execution. <nl> - * @see io.crate.executor.TaskExecutor <nl> 
mmm AnalyzerTest.java <nl> ppp AnalyzerTest.java <nl> + import com.google.common.collect.ImmutableList; <nl> + import io.crate.metadata.sys.SysClusterTableInfo; <nl> + import io.crate.operator.reference.sys.cluster.SysClusterExpression; <nl> + import org.apache.lucene.util.BytesRef; <nl> + private static final ReferenceInfo CLUSTER_NAME_INFO = SysClusterTableInfo.INFOS.get(new ColumnIdent("name")); <nl> 
deleted file <nl> mmm RefreshMaterializedView.java <nl> - package io.crate.sql.tree; <nl> - import com.google.common.base.MoreObjects; <nl> - import com.google.common.base.Objects; <nl> - import static com.google.common.base.Preconditions.checkNotNull; <nl> - public class RefreshMaterializedView <nl> - extends Statement { <nl> 
mmm MockTcpTransport.java <nl> ppp MockTcpTransport.java <nl> - final MockChannel channel = new MockChannel(socket, address, "none"); <nl> + final MockChannel channel = new MockChannel(socket, address, false, "none"); <nl> + builder.setPingInterval(connectionProfile.getPingInterval()); <nl> + private final boolean isServer; <nl> 
mmm MockFSDirectoryFactory.java <nl> ppp MockFSDirectoryFactory.java <nl> - import org.elasticsearch.index.store.FsDirectoryService; <nl> + import org.elasticsearch.index.store.FsDirectoryFactory; <nl> + import org.elasticsearch.plugins.IndexStorePlugin; <nl> - public class MockFSDirectoryService extends FsDirectoryService { <nl> 
mmm DocValuesIndexFieldData.java <nl> ppp DocValuesIndexFieldData.java <nl> - import org.elasticsearch.index.fielddata.IndexFieldDataCache; <nl> - public IndexFieldData<?> build(IndexSettings indexSettings, MappedFieldType fieldType, IndexFieldDataCache cache, <nl> - CircuitBreakerService breakerService, MapperService mapperService) { <nl> 
mmm ProjectionToProjectorVisitor.java <nl> ppp ProjectionToProjectorVisitor.java <nl> - import org.elasticsearch.client.Client; <nl> - import org.elasticsearch.common.inject.Provider; <nl> + import org.elasticsearch.action.admin.indices.create.TransportCreateIndexAction; <nl> + import org.elasticsearch.action.bulk.TransportShardBulkAction; <nl> 
mmm AzureSimpleTests.java <nl> ppp AzureSimpleTests.java <nl> - import io.crate.plugin.HttpTransportPlugin; <nl> + import org.elasticsearch.transport.Netty4Plugin; <nl> - return Arrays.asList(AzureDiscoveryPlugin.class, HttpTransportPlugin.class); <nl> + return Arrays.asList(AzureDiscoveryPlugin.class, Netty4Plugin.class); <nl> 
mmm NodeFetchOperation.java <nl> ppp NodeFetchOperation.java <nl> + private final int executionNodeId; <nl> + int executionNodeId, <nl> + this.executionNodeId = executionNodeId; <nl> - JobCollectContext jobCollectContext = jobExecutionContext.collectContext(); <nl> + JobCollectContext jobCollectContext = jobExecutionContext.collectContext(executionNodeId); <nl> 
mmm NodeJoinTests.java <nl> ppp NodeJoinTests.java <nl> - random); <nl> + random, s -> {}); <nl> mmm JoinHelper.java <nl> ppp JoinHelper.java <nl> + import java.util.function.Consumer; <nl> - Collection<BiConsumer<DiscoveryNode, ClusterState>> joinValidators) { <nl> + Collection<BiConsumer<DiscoveryNode, ClusterState>> joinValidators, Consumer<String> reroute) { <nl> 
mmm PageDownstreamContext.java <nl> ppp PageDownstreamContext.java <nl> - import io.crate.data.BatchIterator; <nl> + import io.crate.data.BatchConsumer; <nl> + import io.crate.data.Killable; <nl> - import io.crate.operation.projectors.BatchConsumerToRowReceiver; <nl> - import io.crate.operation.projectors.Projector; <nl> 
mmm JobLogIntegrationTest.java <nl> ppp JobLogIntegrationTest.java <nl> - import io.crate.testing.UseRandomizedSession; <nl> + import io.crate.testing.UseRandomizedSchema; <nl> mmm ReadOnlyNodeIntegrationTest.java <nl> ppp ReadOnlyNodeIntegrationTest.java <nl> - import io.crate.testing.UseRandomizedSession; <nl> 
new file <nl> ppp QueryClause.java <nl> + package io.crate.analyze; <nl> + import io.crate.operation.Input; <nl> + import io.crate.planner.symbol.Symbol; <nl> + import org.elasticsearch.common.Nullable; <nl> + public class QueryClause { <nl> + protected Symbol query; <nl> + protected boolean noMatch = false; <nl> 
mmm HandlerSideLevelCollectTest.java <nl> ppp HandlerSideLevelCollectTest.java <nl> - import io.crate.expression.reference.sys.cluster.ClusterNameExpression; <nl> - new ReferenceIdent(SysClusterTableInfo.IDENT, new ColumnIdent(ClusterNameExpression.NAME)), <nl> + new ReferenceIdent(SysClusterTableInfo.IDENT, new ColumnIdent("name")), <nl> 
mmm FetchOperationIntegrationTest.java <nl> ppp FetchOperationIntegrationTest.java <nl> - import com.carrotsearch.hppc.LongArrayList; <nl> - import com.google.common.base.Predicates; <nl> - import com.google.common.collect.ImmutableList; <nl> - import com.google.common.collect.Iterables; <nl> - import io.crate.action.job.ContextPreparer; <nl> 
new file <nl> ppp RoutingServiceTests.java <nl> + package org.elasticsearch.cluster.routing; <nl> + import org.elasticsearch.ElasticsearchException; <nl> + import org.elasticsearch.action.ActionListener; <nl> + import org.elasticsearch.action.support.PlainActionFuture; <nl> + import org.elasticsearch.cluster.ClusterState; <nl> 
mmm ShardCollectService.java <nl> ppp ShardCollectService.java <nl> - import io.crate.metadata.Functions; <nl> - import io.crate.metadata.NestedReferenceResolver; <nl> - import io.crate.metadata.RowGranularity; <nl> + import io.crate.metadata.*; <nl> + import io.crate.metadata.shard.RecoveryShardReferenceResolver; <nl> 
mmm InformationSchemaTest.java <nl> ppp InformationSchemaTest.java <nl> - assertEquals(32L, response.rowCount()); <nl> + assertEquals(33L, response.rowCount()); <nl> + "NULL| NULL| NULL| strict| NULL| NULL| NULL| SYSTEM GENERATED| NULL| NULL| NULL| pg_catalog| pg_constraint| pg_catalog| BASE TABLE| NULL\n" + <nl> 
mmm TableSettingsTest.java <nl> ppp TableSettingsTest.java <nl> + import com.carrotsearch.randomizedtesting.annotations.Repeat; <nl> + @Repeat(iterations = 1000) <nl> - expectedException.expectMessage("Cannot change a dynamic group setting, only concrete settings allowed."); <nl> - execute("alter table settings_table set (\"routing.allocation.exclude\" = {foo = 'bar2'})"); <nl> 
mmm LimitingCollectionIteratorTest.java <nl> ppp LimitingCollectionIteratorTest.java <nl> mmm CyclicIterator.java <nl> ppp CyclicIterator.java <nl> mmm StringUtilsTest.java <nl> ppp StringUtilsTest.java <nl> mmm DataType.java <nl> ppp DataType.java <nl> mmm FutureConcurrentMap.java <nl> ppp FutureConcurrentMap.java <nl> 
mmm AbstractInformationSchemaTable.java <nl> ppp AbstractInformationSchemaTable.java <nl> + import org.cratedb.DataType; <nl> + } else if (stmt.resultColumnList().get(c).returnType() == DataType.NOT_SUPPORTED){ <nl> + rowValue = null; <nl> mmm IndexMetaDataExtractor.java <nl> ppp IndexMetaDataExtractor.java <nl> 
mmm Scalar.java <nl> ppp Scalar.java <nl> - return Literal.of(function.info().returnType(), scalar.evaluate(txnCtx, inputs)); <nl> + return Literal.ofUnchecked(function.info().returnType(), scalar.evaluate(txnCtx, inputs)); <nl> mmm CopyFromPlan.java <nl> ppp CopyFromPlan.java <nl> - return Literal.of(DataTypes.STRING, uri); <nl> 
mmm OperationRouting.java <nl> ppp OperationRouting.java <nl> - if (awarenessAttributes.isEmpty()) { <nl> - return indexShard.activeInitializingShardsRandomIt(); <nl> - } else { <nl> - return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes); <nl> - } <nl> + return shardRoutings(indexShard, nodes); <nl> 
mmm TableParameters.java <nl> ppp TableParameters.java <nl> - IndexService.GLOBAL_CHECKPOINT_SYNC_INTERVAL_SETTING <nl> + IndexService.GLOBAL_CHECKPOINT_SYNC_INTERVAL_SETTING, <nl> + IndexService.RETENTION_LEASE_SYNC_INTERVAL_SETTING <nl> + package org.elasticsearch.index.seqno; <nl> + import static org.elasticsearch.test.ClusterServiceUtils.createClusterService; <nl> 
mmm HyperLogLogDistinctAggregation.java <nl> ppp HyperLogLogDistinctAggregation.java <nl> - DataTypes.register(HllStateType.ID, () -> HllStateType.INSTANCE); <nl> + DataTypes.register(HllStateType.ID, in -> HllStateType.INSTANCE); <nl> mmm VarianceAggregation.java <nl> ppp VarianceAggregation.java <nl> - DataTypes.register(VarianceStateType.ID, () -> VarianceStateType.INSTANCE); <nl> 
new file <nl> ppp WindowAggProjection.java <nl> + package io.crate.execution.dsl.projection; <nl> + import com.google.common.collect.ImmutableMap; <nl> + import io.crate.analyze.WindowDefinition; <nl> + import io.crate.expression.symbol.Symbol; <nl> + import io.crate.expression.symbol.Symbols; <nl> + import io.crate.planner.ExplainLeaf; <nl> 
mmm TransportExecutorTest.java <nl> ppp TransportExecutorTest.java <nl> + protected Planner.Context newPlannerContext() { <nl> + return new Planner.Context(clusterService(), UUID.randomUUID(), null); <nl> + } <nl> mmm SQLTransportIntegrationTest.java <nl> ppp SQLTransportIntegrationTest.java <nl> - protected Planner.Context newPlannerContext() { <nl> 
mmm HandlerSideLevelCollectTest.java <nl> ppp HandlerSideLevelCollectTest.java <nl> - @CrateIntegrationTest.ClusterScope(scope = CrateIntegrationTest.Scope.SUITE, numNodes = 1) <nl> + @CrateIntegrationTest.ClusterScope(scope = CrateIntegrationTest.Scope.GLOBAL) <nl> - assertTrue(((BytesRef) result[0][0]).utf8ToString().startsWith("SUITE")); <nl> 
new file <nl> ppp UDCPlugin.java <nl> + package io.crate.udc.plugin; <nl> + import io.crate.udc.service.UDCService; <nl> + import org.elasticsearch.common.component.LifecycleComponent; <nl> + import org.elasticsearch.common.settings.Settings; <nl> + import org.elasticsearch.common.unit.TimeValue; <nl> + import org.elasticsearch.plugins.AbstractPlugin; <nl> 
mmm ExplainTask.java <nl> ppp ExplainTask.java <nl> - @Override <nl> - public void start() { <nl> - throw new UnsupportedOperationException(); <nl> - } <nl> - @Override <nl> - public List<? extends ListenableFuture<TaskResult>> result() { <nl> - throw new UnsupportedOperationException(); <nl> - } <nl> mmm KillJobTask.java <nl> 
mmm PassThroughPagingIterator.java <nl> ppp PassThroughPagingIterator.java <nl> - public Iterator<T> repeat() { <nl> + public Iterable<T> repeat() { <nl> - return repeatMe.iterator(); <nl> + return repeatMe; <nl> mmm SortedPagingIterator.java <nl> ppp SortedPagingIterator.java <nl> - public Iterator<T> repeat() { <nl> 
new file <nl> ppp AsyncFlatMapBatchIterator.java <nl> + package io.crate.data; <nl> + import java.util.Iterator; <nl> + import java.util.concurrent.CompletionStage; <nl> + import io.crate.exceptions.Exceptions; <nl> + public final class AsyncFlatMapBatchIterator<I, O> implements BatchIterator<O> { <nl> + private final BatchIterator<I> source; <nl> 

mmm RelationAnalyzer.java <nl> ppp RelationAnalyzer.java <nl> - longSymbolOrNull(node.getOffset(), expressionAnalyzer, expressionAnalysisContext), <nl> - false <nl> + longSymbolOrNull(node.getOffset(), expressionAnalyzer, expressionAnalysisContext) <nl> - expressionAnalysisContext.hasAggregates() || ((groupBy != null && !groupBy.isEmpty())), <nl> 
mmm BlobAdminClient.java <nl> ppp BlobAdminClient.java <nl> - import org.elasticsearch.action.admin.indices.settings.put.TransportUpdateSettingsAction; <nl> - import org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsRequest; <nl> - private final TransportUpdateSettingsAction updateSettingsAction; <nl> 
mmm RowsCollector.java <nl> ppp RowsCollector.java <nl> + import io.crate.operation.projectors.BatchConsumerToRowReceiver; <nl> - return BatchIteratorCollectorBridge.newInstance(IterableControlledBatchIterator.empty(), rowDownstream); <nl> + return BatchIteratorCollectorBridge.newInstance( <nl> + IterableControlledBatchIterator.empty(), <nl> 
mmm SubscriptQuery.java <nl> ppp SubscriptQuery.java <nl> - RefLiteralPair innerPair = new RefLiteralPair(inner); <nl> - if (!innerPair.isValid()) { <nl> + RefAndLiteral innerPair = RefAndLiteral.of(inner); <nl> + if (innerPair == null) { <nl> mmm RegexMatchQueryCaseInsensitive.java <nl> ppp RegexMatchQueryCaseInsensitive.java <nl> 
mmm ContextPreparer.java <nl> ppp ContextPreparer.java <nl> - java.util.Optional.empty(), <nl> - java.util.Optional.of(threadPool.executor(ThreadPool.Names.SEARCH)), <nl> new file <nl> ppp BatchRowVisitor.java <nl> + package io.crate.testing; <nl> + import io.crate.data.BatchIterator; <nl> + import io.crate.data.Row; <nl> 
mmm CollectSourceResolver.java <nl> ppp CollectSourceResolver.java <nl> - import org.elasticsearch.common.util.BigArrays; <nl> - NodeStatsCollectSource nodeStatsCollectSource, <nl> - BigArrays bigArrays) { <nl> + NodeStatsCollectSource nodeStatsCollectSource) { <nl> - systemCollectSource::tableDefinition, <nl> 
mmm InformationSchemaCollectService.java <nl> ppp InformationSchemaCollectService.java <nl> - public class InformationSchemaCollectService { <nl> + public class InformationSchemaCollectService implements CollectService { <nl> new file <nl> ppp CollectService.java <nl> + package io.crate.operator.operations.collect; <nl> 
mmm AggregationProjector.java <nl> ppp AggregationProjector.java <nl> - for (CollectExpression<?> collectExpression : collectExpressions) { <nl> - collectExpression.startCollect(); <nl> - } <nl> mmm ShardCollectService.java <nl> ppp ShardCollectService.java <nl> - return new SimpleOneRowCollector(shardCtx.topLevelInputs(), shardCtx.collectExpressions(), downstream); <nl> 
mmm TransportJobAction.java <nl> ppp TransportJobAction.java <nl> - ThreadPool.Names.GENERIC, <nl> + EXECUTOR, <nl> - transports.executeLocalOrWithTransport(this, node, request, listener, <nl> + transports.sendRequest(ACTION_NAME, node, request, listener, <nl> - @Override <nl> - public String actionName() { <nl> 
new file <nl> ppp TopNProjection.java <nl> + package io.crate.planner.projection; <nl> + import com.google.common.base.Preconditions; <nl> + import io.crate.planner.symbol.Symbol; <nl> + import org.elasticsearch.common.io.stream.StreamInput; <nl> + import org.elasticsearch.common.io.stream.StreamOutput; <nl> 
mmm AnalyzedStatementVisitor.java <nl> ppp AnalyzedStatementVisitor.java <nl> + public R visitDiscard(AnalyzedDiscard discard, C context) { <nl> + return visitAnalyzedStatement(discard, context); <nl> + } <nl> mmm Planner.java <nl> ppp Planner.java <nl> + import io.crate.analyze.AnalyzedDiscard; <nl> + @Override <nl> 
mmm SmallIntType.java <nl> ppp SmallIntType.java <nl> - import java.nio.ByteBuffer; <nl> + import org.jboss.netty.buffer.ChannelBuffer; <nl> - class SmallIntType extends NumericPGType<Short> { <nl> + import javax.annotation.Nonnull; <nl> + import java.nio.charset.StandardCharsets; <nl> + class SmallIntType extends PGType { <nl> 
mmm SysNodesTableInfo.java <nl> ppp SysNodesTableInfo.java <nl> - import javax.annotation.Nullable; <nl> - register(getReferenceInfo(primaryKey.get(0), DataType.STRING, null)); <nl> - register(getReferenceInfo("name", DataType.STRING, null)); <nl> - register(getReferenceInfo("hostname", DataType.STRING, null)); <nl> 
mmm NodeStatsIterator.java <nl> ppp NodeStatsIterator.java <nl> - private Row currentRow = OFF_ROW; <nl> - private final Columns rowData; <nl> + private final RowColumns rowData; <nl> - rowData = RowBridging.toInputs(() -> currentRow, this.collectPhase.toCollect().size()); <nl> + rowData = new RowColumns(collectPhase.toCollect().size()); <nl> 
mmm TransportFetchNodeAction.java <nl> ppp TransportFetchNodeAction.java <nl> - if (request.toFetch() == null) { <nl> + if (request.toFetch() == null && request.isCloseContext()) { <nl> - fetchContext.close(); <nl> + if (request.isCloseContext()) { <nl> + fetchContext.close(); <nl> + } <nl> mmm SelectStatementPlanner.java <nl> 
mmm PartitionedTableIntegrationTest.java <nl> ppp PartitionedTableIntegrationTest.java <nl> mmm EmptyStringRoutingIntegrationTest.java <nl> ppp EmptyStringRoutingIntegrationTest.java <nl> mmm SQLTransportExecutor.java <nl> ppp SQLTransportExecutor.java <nl> - if (pgUrl != null && random.nextBoolean() && isJdbcCompatible()) { <nl> 
mmm ExpressionAnalyzer.java <nl> ppp ExpressionAnalyzer.java <nl> + @Nullable <nl> - if (whereExpression.isPresent()) { <nl> - return convert(whereExpression.get(), context); <nl> - } else { <nl> - return Literal.BOOLEAN_TRUE; <nl> - } <nl> + return whereExpression.map(expression -> convert(expression, context)).orElse(null); <nl> 
mmm OrderingByPosition.java <nl> ppp OrderingByPosition.java <nl> + import io.crate.planner.PositionalOrderBy; <nl> + public static Ordering<Row> rowOrdering(PositionalOrderBy orderBy) { <nl> + return rowOrdering(orderBy.indices(), orderBy.reverseFlags(), orderBy.nullsFirst()); <nl> + } <nl> mmm QueryAndFetchConsumer.java <nl> 
mmm AstVisitor.java <nl> ppp AstVisitor.java <nl> - public R visitCreateBlobTable(CreateBlobTable node, C context) { <nl> + public R visitCreateBlobTable(CreateBlobTable<?> node, C context) { <nl> mmm UnboundAnalyzer.java <nl> ppp UnboundAnalyzer.java <nl> + import io.crate.sql.tree.CreateBlobTable; <nl> - UserAnalyzer userAnalyzer) { <nl> 
mmm LuceneShardCollectorProvider.java <nl> ppp LuceneShardCollectorProvider.java <nl> - import org.elasticsearch.index.engine.Engine; <nl> - Engine.Searcher searcher = sharedShardContext.acquireSearcher("unordered-iterator: " + formatSource(collectPhase)); <nl> + var searcher = sharedShardContext.acquireSearcher("unordered-iterator: " + formatSource(collectPhase)); <nl> 
mmm EqOperator.java <nl> ppp EqOperator.java <nl> - public static final String NAME = "op_="; <nl> + public static final String NAME = "op_eq"; <nl> mmm ESSearchNode.java <nl> ppp ESSearchNode.java <nl> - import com.google.common.collect.ImmutableSet; <nl> - import java.util.Set; <nl> mmm SysNodeExpressionModule.java <nl> 
mmm CurrentSchemaFunctionTest.java <nl> ppp CurrentSchemaFunctionTest.java <nl> + import io.crate.metadata.SearchPath; <nl> - assertThat(impl.evaluate(TransactionContext.of("dummyUser", "dummySchema")), Matchers.is("dummySchema")); <nl> + assertThat( <nl> + impl.evaluate(TransactionContext.of("dummyUser", SearchPath.createSearchPathFrom("dummySchema"))), <nl> 
mmm AnalyzedDecommissionNode.java <nl> ppp AnalyzedDecommissionNode.java <nl> - public final class AnalyzedDecommissionNodeStatement implements AnalyzedStatement { <nl> + import java.util.function.Consumer; <nl> + public final class AnalyzedDecommissionNode implements AnalyzedStatement { <nl> - AnalyzedDecommissionNodeStatement(Symbol nodeIdOrName) { <nl> 
mmm ProjectorsTest.java <nl> ppp ProjectorsTest.java <nl> - r -> Literal.ofUnchecked(r.valueType(), r.valueType().value("1")), <nl> + r -> Literal.ofUnchecked(r.valueType(), r.valueType().sanitizeValue("1")), <nl> mmm AbstractWindowFunctionTest.java <nl> ppp AbstractWindowFunctionTest.java <nl> - import io.crate.expression.symbol.Symbols; <nl> 
mmm Setting.java <nl> ppp Setting.java <nl> - "[{}] setting was deprecated in Elasticsearch and will be removed in a future release! " <nl> + "[{}] setting was deprecated in CrateDB and will be removed in a future release! " <nl> + "See the breaking changes documentation for the next major version.", <nl> 
new file <nl> ppp TopNDistinctProjector.java <nl> + package io.crate.execution.engine.pipeline; <nl> + import io.crate.data.BatchIterator; <nl> + import io.crate.data.Projector; <nl> + import io.crate.data.Row; <nl> + import io.crate.data.RowN; <nl> + import io.crate.data.TopNDistinctBatchIterator; <nl> + public final class TopNDistinctProjector implements Projector { <nl> 
deleted file <nl> mmm ExpressionReferenceValueAnalyzer.java <nl> - package io.crate.analyze.expressions; <nl> - import io.crate.analyze.AnalysisMetaData; <nl> - import io.crate.analyze.ParameterContext; <nl> - import io.crate.analyze.symbol.Literal; <nl> - import io.crate.analyze.symbol.Reference; <nl> - import io.crate.analyze.symbol.Symbol; <nl> 
deleted file <nl> mmm MultiUpstreamRowReceiver.java <nl> - package io.crate.operation.projectors; <nl> - import com.amazonaws.annotation.ThreadSafe; <nl> - import com.google.common.collect.ImmutableList; <nl> - import io.crate.data.ArrayRow; <nl> - import io.crate.data.Row; <nl> - import io.crate.operation.RowDownstream; <nl> 
mmm UdfUnitTest.java <nl> ppp UdfUnitTest.java <nl> - import io.crate.metadata.*; <nl> + import io.crate.metadata.FunctionIdent; <nl> + import io.crate.metadata.FunctionInfo; <nl> + import io.crate.metadata.Scalar; <nl> + import static io.crate.testing.TestingHelpers.getFunctions; <nl> - UserDefinedFunctionService udfService = new UserDefinedFunctionService(mock(ClusterService.class)); <nl> 
mmm CustomRecyclerViewUtils.java <nl> ppp CustomRecyclerViewUtils.java <nl> - return getOrientation(rv.getLayoutManager()); <nl> - } <nl> + RecyclerView.LayoutManager layoutManager = rv.getLayoutManager(); <nl> - public static int getOrientation(@NonNull RecyclerView.LayoutManager layoutManager) { <nl> - public static int safeGetAdapterPosition(@Nullable RecyclerView.ViewHolder holder) { <nl> 
mmm ExpandableDraggableWithSectionExampleAdapter.java <nl> ppp ExpandableDraggableWithSectionExampleAdapter.java <nl> - import com.h6ah4i.android.widget.advrecyclerview.draggable.DraggableItemConstants; <nl> + import com.h6ah4i.android.widget.advrecyclerview.draggable.DraggableItemState; <nl> - private interface Draggable extends DraggableItemConstants { <nl> 
mmm ItemShadowDecorator.java <nl> ppp ItemShadowDecorator.java <nl> - final int tx = (int) (ViewCompat.getTranslationX(child) + 0.5f); <nl> - final int ty = (int) (ViewCompat.getTranslationY(child) + 0.5f); <nl> + final int tx = (int) (child.getTranslationX() + 0.5f); <nl> + final int ty = (int) (child.getTranslationY() + 0.5f); <nl> 
mmm KeyColumnValueStorePerformance.java <nl> ppp KeyColumnValueStorePerformance.java <nl> + import com.thinkaurelius.titan.testcategory.PerformanceTests; <nl> + import org.junit.experimental.categories.Category; <nl> + @Category({ PerformanceTests.class }) <nl> mmm TitanGraphPerformanceMemoryTest.java <nl> 
mmm ResultHookClosure.java <nl> ppp ResultHookClosure.java <nl> - final Path output = HDFSTools.getOutputsFinalJob(hdfs, pipeline.getGraph().getOutputLocation().toString()); <nl> + final Path output = HDFSTools.getOutputsFinalJob(hdfs, pipeline.getGraph().getTemporarySeqFileLocation().toString()); <nl> new file <nl> 
mmm StandardSerializer.java <nl> ppp StandardSerializer.java <nl> + import com.thinkaurelius.titan.diskstorage.idmanagement.ConflictAvoidanceMode; <nl> + import com.thinkaurelius.titan.diskstorage.util.time.Timepoint; <nl> + registerClassInternal(57,ConflictAvoidanceMode.class, new EnumSerializer<>(ConflictAvoidanceMode.class)); <nl> 
mmm IDHandler.java <nl> ppp IDHandler.java <nl> - return ((hidden?1:0)<<2) + getRelationType(); <nl> + return ((hidden?0:1)<<2) + getRelationType(); <nl> mmm TestBed.java <nl> ppp TestBed.java <nl> + import com.thinkaurelius.titan.diskstorage.StaticBuffer; <nl> + import com.thinkaurelius.titan.diskstorage.WriteBuffer; <nl> 
mmm OLAPTest.java <nl> ppp OLAPTest.java <nl> - import com.thinkaurelius.titan.core.Cardinality; <nl> - import com.thinkaurelius.titan.core.Multiplicity; <nl> - import com.thinkaurelius.titan.core.TitanVertex; <nl> - import com.thinkaurelius.titan.core.TitanVertexQuery; <nl> + import com.thinkaurelius.titan.core.*; <nl> 
mmm IndexTransaction.java <nl> ppp IndexTransaction.java <nl> + import com.thinkaurelius.titan.core.attribute.StringX; <nl> - out.writeObjectNotNull(store.getKey()); <nl> + out.writeObjectNotNull(new StringX(store.getKey())); <nl> - out.writeObjectNotNull(doc.getKey()); <nl> + out.writeObjectNotNull(new StringX(doc.getKey())); <nl> 
mmm KCVSLogManager.java <nl> ppp KCVSLogManager.java <nl> - import com.google.common.collect.Maps; <nl> - import com.thinkaurelius.titan.diskstorage.StoreMetaData; <nl> - import com.thinkaurelius.titan.diskstorage.configuration.ModifiableConfiguration; <nl> - import com.thinkaurelius.titan.diskstorage.keycolumnvalue.ttl.TTLKCVSManager; <nl> 
mmm KeyColumnValueStoreTest.java <nl> ppp KeyColumnValueStoreTest.java <nl> mmm LockingFailureException.java <nl> ppp LockingFailureException.java <nl> + 	private static final long serialVersionUID = 6664344125217556566L; <nl> mmm CTConnectionFactory.java <nl> ppp CTConnectionFactory.java <nl> - import java.util.HashMap; <nl> 
mmm StandardScanner.java <nl> ppp StandardScanner.java <nl> + import java.util.HashSet; <nl> + import java.util.Set; <nl> + import java.util.concurrent.Callable; <nl> + import java.util.concurrent.ConcurrentHashMap; <nl> + import java.util.concurrent.ConcurrentMap; <nl> + import java.util.function.Consumer; <nl> 
mmm ConfigOption.java <nl> ppp ConfigOption.java <nl> + import com.google.common.base.Joiner; <nl> + import com.google.common.collect.ImmutableSet; <nl> + import com.thinkaurelius.titan.diskstorage.idmanagement.ConflictAvoidanceMode; <nl> + import com.thinkaurelius.titan.diskstorage.util.time.StandardDuration; <nl> 
deleted file <nl> mmm BulkLoaderVertexProgram.java <nl> - package com.thinkaurelius.titan.graphdb.tinkerpop.computer.bulkloader; <nl> - import com.google.common.base.Preconditions; <nl> - import com.google.common.collect.ImmutableSet; <nl> - import com.google.common.collect.Iterables; <nl> - import com.google.common.collect.Iterators; <nl> 
mmm TitanHBaseRecordReader.java <nl> ppp TitanHBaseRecordReader.java <nl> - package com.thinkaurelius.titan.hadoop.formats.titan.hbase; <nl> + package com.thinkaurelius.titan.hadoop.formats.hbase; <nl> mmm TitanHBaseOutputFormatTest.java <nl> ppp TitanHBaseOutputFormatTest.java <nl> - package com.thinkaurelius.titan.hadoop.formats.titan.hbase; <nl> 
mmm GraphDatabaseConfiguration.java <nl> ppp GraphDatabaseConfiguration.java <nl> - Pattern.quote(STORAGE_DIRECTORY_KEY)); <nl> + Pattern.quote(STORAGE_DIRECTORY_KEY)); <nl> - } <nl> + } <nl> - throw new IllegalArgumentException("Could not find attribute class" + classname, e); <nl> + throw new IllegalArgumentException("Could not find attribute class" + classname); <nl> 
mmm InternalAstyanaxKeyColumnValueTest.java <nl> ppp InternalAstyanaxKeyColumnValueTest.java <nl> + import org.junit.BeforeClass; <nl> - import com.thinkaurelius.titan.diskstorage.KeyColumnValueStoreTest; <nl> + import com.thinkaurelius.titan.diskstorage.cassandra.AbstractCassandraKeyColumnValueStoreTest; <nl> 
new file <nl> ppp StandardLabelMaker.java <nl> + package com.thinkaurelius.titan.graphdb.types; <nl> + import com.google.common.base.Preconditions; <nl> + import com.thinkaurelius.titan.core.*; <nl> + import com.thinkaurelius.titan.graphdb.database.IndexSerializer; <nl> + import com.thinkaurelius.titan.graphdb.relations.EdgeDirection; <nl> 
mmm WxCartController.java <nl> ppp WxCartController.java <nl> - private LitemallGoodsSpecificationService goodsSpecificationService; <nl> - @Autowired <nl> + @Autowired <nl> + private LitemallGrouponRulesService grouponRulesService; <nl> - if(userId == null){ <nl> + if (userId == null) { <nl> - * @param cart 购物车商品信息， { goodsId: xxx, productId: xxx, number: xxx } <nl> 
mmm Notifier.java <nl> ppp Notifier.java <nl> - import com.github.moduth.blockcanary.R; <nl> + import com.github.moduth.blockcanary.ui.R; <nl> deleted file <nl> mmm LeakCanarySingleThreadFactory.java <nl> - package com.github.moduth.blockcanary; <nl> - import java.util.concurrent.ThreadFactory; <nl> - final class LeakCanarySingleThreadFactory implements ThreadFactory { <nl> 
mmm MainMvp.java <nl> ppp MainMvp.java <nl> - void onUpdateDrawerMenuHeader(); <nl> deleted file <nl> mmm TopicsAdapter.java <nl> - package com.fastaccess.ui.adapter; <nl> - import android.support.annotation.ColorInt; <nl> - import android.support.annotation.NonNull; <nl> - import android.view.ViewGroup; <nl> 
mmm ReviewCommentsViewHolder.java <nl> ppp ReviewCommentsViewHolder.java <nl> + import android.support.transition.ChangeBounds; <nl> + import android.support.transition.TransitionManager; <nl> + private ViewGroup viewGroup; <nl> - onToggle(onToggleView.isCollapsed(position)); <nl> + onToggle(onToggleView.isCollapsed(position), true); <nl> 
mmm AbstractLogin.java <nl> ppp AbstractLogin.java <nl> + import com.fastaccess.helper.PrefGetter; <nl> + import rx.Observable; <nl> + } <nl> mmm RepoOpenedIssuesFragment.java <nl> ppp RepoOpenedIssuesFragment.java <nl> + @Override public void onRefresh(boolean isLastUpdated) { <nl> + getPresenter().onSetSortBy(isLastUpdated); <nl> 
mmm App.java <nl> ppp App.java <nl> - FabricProvider.initFabric(this); <nl> + FabricProvider.INSTANCE.initFabric(this); <nl> mmm IssuePagerPresenter.java <nl> ppp IssuePagerPresenter.java <nl> + Login loginUser = Login.getUser(); <nl> + if (loginUser == null) return; <nl> - RestProvider.getRepoService(isEnterprise()).isCollaborator(login, repoId, Login.getUser().getLogin()), <nl> 
mmm FragmentPagerAdapterModel.java <nl> ppp FragmentPagerAdapterModel.java <nl> - new FragmentPagerAdapterModel("", ThemeFragment.Companion.newInstance(R.style.ThemeBluish)), <nl> - new FragmentPagerAdapterModel("", ThemeFragment.Companion.newInstance(R.style.ThemeMidnight))) <nl> + new FragmentPagerAdapterModel("", ThemeFragment.Companion.newInstance(R.style.ThemeBluish))) <nl> 
mmm Execution.java <nl> ppp Execution.java <nl> - package graphql.execution2; <nl> + package graphql.execution.nextgen; <nl> - import graphql.execution2.result.ResultNodesUtil; <nl> + import graphql.execution.nextgen.result.ResultNodesUtil; <nl> mmm ObjectExecutionResultNode.java <nl> ppp ObjectExecutionResultNode.java <nl> 
mmm ExecutionContextBuilder.java <nl> ppp ExecutionContextBuilder.java <nl> + import graphql.execution.instrumentation.InstrumentationState; <nl> + private InstrumentationState instrumentationState; <nl> + public ExecutionContextBuilder instrumentationState(InstrumentationState instrumentationState) { <nl> 
mmm FieldValidationSupport.java <nl> ppp FieldValidationSupport.java <nl> - return traversalEnv.getParentType(); <nl> + return traversalEnv.getUnmodifiedParentType(); <nl> mmm QueryVisitor.java <nl> ppp QueryVisitor.java <nl> - void visitField(QueryVisitorFieldEnvironment QueryVisitorFieldEnvironment); <nl> 
mmm Internal.java <nl> ppp Internal.java <nl> - * In general unnecessary changes will be avoided but you should not depend on internal classes being stable <nl> + * In general unecessary changes will be avoided but you should not depend on internal classes being stable <nl> new file <nl> ppp DeferSupport.java <nl> 
deleted file <nl> mmm InstrumentationContext.java <nl> - package graphql.execution.instrumentation; <nl> - public interface InstrumentationContext<T> { <nl> - void onEnd(T result); <nl> - void onEnd(Exception e); <nl> - } <nl> deleted file <nl> mmm ValidationParameters.java <nl> - package graphql.execution.instrumentation.parameters; <nl> 
mmm Parser.java <nl> ppp Parser.java <nl> - import org.antlr.v4.runtime.ANTLRInputStream; <nl> - import org.antlr.v4.runtime.BailErrorStrategy; <nl> - import org.antlr.v4.runtime.CommonTokenStream; <nl> + import org.antlr.v4.runtime.*; <nl> + parser.addErrorListener(new ErrorListener()); <nl> - parser.setErrorHandler(new BailErrorStrategy()); <nl> 
new file <nl> ppp GraphqlBaseVisitor.java <nl> + package graphql.parser.antlr; <nl> + import org.antlr.v4.runtime.tree.AbstractParseTreeVisitor; <nl> + public class GraphqlBaseVisitor<T> extends AbstractParseTreeVisitor<T> implements GraphqlVisitor<T> { <nl> + @Override <nl> + public T visitDocument(GraphqlParser.DocumentContext ctx) { <nl> 
deleted file <nl> mmm ImplementingTypesChecker.java <nl> - package graphql.schema.idl; <nl> - import graphql.GraphQLError; <nl> - import graphql.Internal; <nl> - import graphql.language.AstPrinter; <nl> - import graphql.language.FieldDefinition; <nl> - import graphql.language.ImplementingTypeDefinition; <nl> 
new file <nl> ppp TypeResolutionEnvironment.java <nl> + package graphql; <nl> + import graphql.language.Field; <nl> + import graphql.schema.GraphQLSchema; <nl> + import graphql.schema.GraphQLType; <nl> + import java.util.Map; <nl> + public class TypeResolutionEnvironment { <nl> + private final Object object; <nl> 
new file <nl> ppp SwapTwoBits.java <nl> + package com.interview.bits; <nl> + public class SwapTwoBits { <nl> + 	public int swap(int num,int i, int j){ <nl> + 		int t1 = (num & 1<<j) != 0 ? 1 : 0; <nl> + 		int t2 = (num & 1<<i) !=0 ? 1 : 0; <nl> + 		num = num & ~(1<<j); <nl> + 		num = num & ~(1<<i); <nl> + 		num = num | t1<<i; <nl> 
mmm FloorAndCeilingSortedArray.java <nl> ppp FloorAndCeilingSortedArray.java <nl> - 	public int floor(int input[], int x){ <nl> - 		int low = 0; <nl> - 		int high = input.length-1; <nl> - 		while(low <= high){ <nl> - 			int middle = (low + high)/2; <nl> - 			if(input[middle] == x || (input[middle] < x && (middle == input.length-1 || input[middle+1] > x))){ <nl> 
mmm ApiClient.java <nl> ppp ApiClient.java <nl> + import android.support.annotation.Nullable; <nl> + return fetchActivities(null); <nl> + } <nl> + @Override <nl> + public @NonNull Observable<ActivityEnvelope> fetchActivities(final @Nullable Integer count) { <nl> - .activities(categories) <nl> + .activities(categories, count) <nl> 
mmm ApplicationGraph.java <nl> ppp ApplicationGraph.java <nl> + import com.kickstarter.ui.activities.SettingsActivity; <nl> + import com.kickstarter.viewmodels.ManageNotificationsViewModel; <nl> + import com.kickstarter.viewmodels.SettingsViewModel; <nl> + void inject(ManageNotificationsViewModel __); <nl> 
mmm ProjectViewHolder.java <nl> ppp ProjectViewHolder.java <nl> + import android.view.ViewGroup; <nl> - import com.kickstarter.libs.KSCurrency; <nl> + import com.kickstarter.libs.Money; <nl> + import com.kickstarter.libs.utils.SocialUtils; <nl> + import butterknife.BindDimen; <nl> - protected @Bind(R.id.play_button_overlay) IconButton playButton; <nl> 
mmm ApiClient.java <nl> ppp ApiClient.java <nl> - import com.kickstarter.services.ApiResponses.CommentsEnvelope; <nl> - public Observable<CommentsEnvelope> fetchProjectComments(final Project project){ <nl> - return service.fetchProjectComments(project.param()); <nl> - } <nl> mmm ActivityListAdapter.java <nl> 
mmm LoginViewModel.java <nl> ppp LoginViewModel.java <nl> - import com.kickstarter.libs.CurrentUser; <nl> + import com.kickstarter.libs.CurrentUserType; <nl> - private final CurrentUser currentUser; <nl> + private final CurrentUserType currentUser; <nl> new file <nl> ppp CurrentUserType.java <nl> + package com.kickstarter.libs; <nl> 
mmm ListUtils.java <nl> ppp ListUtils.java <nl> + public static <T> List<T> shuffle(final @NonNull List<T> xs) { <nl> + final List<T> ys = new ArrayList<>(xs); <nl> + final int length = ys.size(); <nl> + for (int i = 0; i < length; i++) { <nl> + final int j = i + (int) (Math.random() * (length - i)); <nl> + final T temp = ys.get(i); <nl> 
mmm DiscoveryParams.java <nl> ppp DiscoveryParams.java <nl> - import android.content.Context; <nl> - import com.kickstarter.R; <nl> - import com.kickstarter.models.Location; <nl> + import com.kickstarter.presenters.DiscoveryPresenter; <nl> - private final boolean nearby; <nl> - private final Location location; <nl> 
mmm DownloadBetaActivity.java <nl> ppp DownloadBetaActivity.java <nl> - final Intent intent = getIntent(); <nl> - internalBuildEnvelope = intent.getExtras().getParcelable("internalBuildEnvelope"); <nl> + internalBuildEnvelope = getIntent().getExtras() <nl> + .getParcelable(getString(R.string.intent_internal_build_envelope)); <nl> 
mmm User.java <nl> ppp User.java <nl> - @Nullable public abstract Integer launchedProjectsCount(); <nl> + @Nullable public abstract Integer createdProjectsCount(); <nl> - public abstract Builder launchedProjectsCount(Integer __); <nl> + public abstract Builder createdProjectsCount(Integer __); <nl> mmm SearchToolbar.java <nl> 
mmm TestUtils.java <nl> ppp TestUtils.java <nl> - import com.kickstarter.libs.ConfigLoader; <nl> + import com.kickstarter.libs.CurrentConfig; <nl> - static ConfigLoader mockConfigLoader(final Config config) { <nl> - ConfigLoader configLoader = mock(ConfigLoader.class); <nl> - when(configLoader.current()).thenReturn(config); <nl> 
mmm DiscoveryViewModel.java <nl> ppp DiscoveryViewModel.java <nl> - @Override <nl> - public Observable<DiscoveryParams> showFilters() { <nl> - return selectedParams.compose(Transformers.takeWhen(filterButtonClicked)); <nl> - } <nl> mmm ApplicationGraph.java <nl> ppp ApplicationGraph.java <nl> + import com.kickstarter.libs.KSCurrency; <nl> 
mmm ApplicationModule.java <nl> ppp ApplicationModule.java <nl> - import com.kickstarter.libs.ForApplication; <nl> + import com.kickstarter.libs.qualifiers.ApiRetrofit; <nl> + import com.kickstarter.libs.qualifiers.ApplicationContext; <nl> + import com.kickstarter.libs.qualifiers.PackageNameString; <nl> + import com.kickstarter.libs.qualifiers.WebRetrofit; <nl> 
deleted file <nl> mmm DiscoveryFilterViewHolder.java <nl> - package com.kickstarter.ui.viewholders; <nl> - import android.support.v7.widget.RecyclerView; <nl> - import android.view.View; <nl> - import android.widget.TextView; <nl> - import com.kickstarter.R; <nl> - import com.kickstarter.models.Category; <nl> 
mmm HelpActivity.java <nl> ppp HelpActivity.java <nl> - public static final int HELP_TYPE_GENERAL = 5; <nl> - @IntDef({HELP_TYPE_TERMS, HELP_TYPE_PRIVACY, HELP_TYPE_HOW_IT_WORKS, HELP_TYPE_COOKIE_POLICY, HELP_TYPE_FAQ, HELP_TYPE_GENERAL}) <nl> + @IntDef({HELP_TYPE_TERMS, HELP_TYPE_PRIVACY, HELP_TYPE_HOW_IT_WORKS, HELP_TYPE_COOKIE_POLICY, HELP_TYPE_FAQ}) <nl> 
deleted file <nl> mmm ResetPasswordPresenterInputs.java <nl> - package com.kickstarter.presenters.inputs; <nl> - public interface ResetPasswordPresenterInputs { <nl> - void email(String __); <nl> - void resetPasswordClick(); <nl> - } <nl> mmm ErrorEnvelope.java <nl> - import com.kickstarter.R; <nl> - import butterknife.BindString; <nl> 
mmm ProjectActivity.java <nl> ppp ProjectActivity.java <nl> + import android.graphics.PorterDuff; <nl> + import android.graphics.drawable.Drawable; <nl> + import android.support.design.widget.FloatingActionButton; <nl> - import com.kickstarter.ui.views.IconTextView; <nl> - @Bind(R.id.star_icon) IconTextView starIconTextView; <nl> 
mmm ApiClient.java <nl> ppp ApiClient.java <nl> - import com.kickstarter.models.Backing; <nl> - import com.kickstarter.models.User; <nl> - public Observable<Backing> fetchProjectBacking(@NonNull final Project project, @NonNull final User user) { <nl> - return service.fetchProjectBacking(project.param(), user.param()); <nl> 
mmm Project.java <nl> ppp Project.java <nl> - public boolean hasVideo() { <nl> - return video() != null; <nl> - } <nl> mmm ApplicationGraph.java <nl> ppp ApplicationGraph.java <nl> + import com.kickstarter.libs.Koala; <nl> + void inject(Koala __); <nl> mmm ProjectPresenter.java <nl> ppp ProjectPresenter.java <nl> 
mmm Location.java <nl> ppp Location.java <nl> - @Nullable public abstract Integer projectsCount(); <nl> + @Nullable public abstract int projectsCount(); <nl> - public abstract Builder projectsCount(Integer __); <nl> + public abstract Builder projectsCount(int __); <nl> mmm Project.java <nl> ppp Project.java <nl> 
mmm LoginPresenterOutputs.java <nl> ppp LoginPresenterOutputs.java <nl> - import com.kickstarter.services.apiresponses.ErrorEnvelope; <nl> mmm TwoFactorPresenter.java <nl> ppp TwoFactorPresenter.java <nl> - import android.view.View; <nl> + import com.kickstarter.presenters.outputs.TwoFactorPresenterOutputs; <nl> 
mmm Koala.java <nl> ppp Koala.java <nl> - public void trackProfileView() { <nl> - client.track("Profile View My"); <nl> - } <nl> deleted file <nl> mmm LoggedInMenu.java <nl> - package com.kickstarter.ui.views; <nl> - import android.content.Context; <nl> - import android.support.annotation.NonNull; <nl> - import android.view.View; <nl> 
new file <nl> ppp CommentFeedActivity.java <nl> + package com.kickstarter.ui.activities; <nl> + import android.app.Dialog; <nl> + import android.content.Intent; <nl> + import android.os.Bundle; <nl> + import android.support.v7.widget.LinearLayoutManager; <nl> + import android.support.v7.widget.RecyclerView; <nl> 
mmm ProjectUpdatesViewModel.java <nl> ppp ProjectUpdatesViewModel.java <nl> - import com.kickstarter.libs.rx.transformers.Transformers; <nl> - import com.kickstarter.libs.utils.ObjectUtils; <nl> + import static com.kickstarter.libs.rx.transformers.Transformers.neverError; <nl> + import static com.kickstarter.libs.rx.transformers.Transformers.takePairWhen; <nl> 
mmm DiscoveryPresenter.java <nl> ppp DiscoveryPresenter.java <nl> - import com.jakewharton.rxbinding.support.v7.widget.RxRecyclerView; <nl> - import com.kickstarter.libs.utils.ListUtils; <nl> + import com.kickstarter.libs.utils.ListUtils; <nl> + import com.kickstarter.presenters.inputs.DiscoveryPresenterInputs; <nl> 
mmm CommentFeedAdapter.java <nl> ppp CommentFeedAdapter.java <nl> - import android.support.annotation.LayoutRes; <nl> + import android.support.annotation.Nullable; <nl> + import android.support.annotation.LayoutRes; <nl> + import com.kickstarter.models.User; <nl> + import com.kickstarter.ui.viewholders.EmptyCommentFeedViewHolder; <nl> 
mmm MockApiClient.java <nl> ppp MockApiClient.java <nl> + import android.support.annotation.Nullable; <nl> - public @NonNull Observable<ActivityEnvelope> fetchActivities(final @NonNull String paginationPath) { <nl> + public @NonNull Observable<ActivityEnvelope> fetchActivities(final @Nullable Integer count) { <nl> 
mmm Project.java <nl> ppp Project.java <nl> - public Boolean isBacking = null; <nl> - public Boolean isStarred = null; <nl> - public Boolean isBacking() { <nl> - return isBacking; <nl> - } <nl> - public Boolean isStarred() { <nl> - return isStarred; <nl> - } <nl> deleted file <nl> mmm CommentFeedActivity.java <nl> 
deleted file <nl> mmm DiscoverEnvelope.java <nl> - package com.kickstarter.services.ApiResponses; <nl> - import com.kickstarter.models.Project; <nl> - import java.util.List; <nl> - public class DiscoverEnvelope { <nl> - public final List<Project> projects; <nl> - public final UrlsEnvelope urls; <nl> - private DiscoverEnvelope(List<Project> projects, UrlsEnvelope urls) { <nl> 
mmm ElfSymbolTableScrubberStepTest.java <nl> ppp ElfSymbolTableScrubberStepTest.java <nl> - ElfSymbolTableScrubberStep.of( <nl> + ImmutableElfSymbolTableScrubberStep.of( <nl> - ElfSymbolTableScrubberStep.of( <nl> + ImmutableElfSymbolTableScrubberStep.of( <nl> mmm RuleKeyTest.java <nl> ppp RuleKeyTest.java <nl> 
mmm SourceTreePath.java <nl> ppp SourceTreePath.java <nl> + import com.facebook.buck.util.Optionals; <nl> + import com.google.common.base.Optional; <nl> + private final Optional<String> defaultType; <nl> - public SourceTreePath(PBXReference.SourceTree sourceTree, Path path) { <nl> + public SourceTreePath( <nl> 
mmm Command.java <nl> ppp Command.java <nl> + import org.pf4j.PluginManager; <nl> + void setPluginManager(PluginManager pluginManager); <nl> + PluginManager getPluginManager(); <nl> mmm CleanCommandTest.java <nl> ppp CleanCommandTest.java <nl> - new AdditionalOptionsCmdLineParser(command).parseArgument(args); <nl> 
deleted file <nl> mmm SimpleUnconfiguredBuildTarget.java <nl> - package com.facebook.buck.core.model; <nl> - import com.fasterxml.jackson.databind.annotation.JsonDeserialize; <nl> - import org.immutables.value.Value; <nl> - @Value.Immutable(builder = false, copy = false, prehash = true) <nl> - @Value.Style(typeImmutable = "ImmutableUnconfiguredBuildTarget") <nl> 
mmm TestThreadStateRenderer.java <nl> ppp TestThreadStateRenderer.java <nl> - import com.facebook.buck.rules.TestStatusMessageEvent; <nl> - import com.facebook.buck.rules.TestSummaryEvent; <nl> + import com.facebook.buck.support.test.event.TestStatusMessageEvent; <nl> + import com.facebook.buck.support.test.event.TestSummaryEvent; <nl> 
mmm ProjectCommand.java <nl> ppp ProjectCommand.java <nl> + import com.facebook.buck.apple.xcode.SeparatedProjectGenerator; <nl> + import java.nio.file.Paths; <nl> - ProjectGenerator projectGenerator = new ProjectGenerator( <nl> - partialGraph, <nl> - targets, <nl> - getProjectFilesystem(), <nl> - executionContext, <nl> 
mmm AbstractCommand.java <nl> ppp AbstractCommand.java <nl> - import com.facebook.buck.util.CloseableMemoizedSupplier; <nl> - import com.facebook.buck.util.concurrent.MostExecutors; <nl> - import java.util.concurrent.ForkJoinPool; <nl> - protected CloseableMemoizedSupplier<ForkJoinPool> getForkJoinPoolSupplier(BuckConfig buckConfig) { <nl> 
mmm CalculateSourceAbi.java <nl> ppp CalculateSourceAbi.java <nl> - import com.facebook.buck.core.rules.BuildRuleResolver; <nl> - import com.facebook.buck.core.rules.common.BuildableSupport; <nl> - import com.facebook.buck.core.rules.common.BuildableSupport.DepsSupplier; <nl> + import com.facebook.buck.core.rules.common.BuildDeps; <nl> 
mmm MissingSymbolsHandler.java <nl> ppp MissingSymbolsHandler.java <nl> + .setEnableBuildFileSandboxing(parserConfig.getEnableBuildFileSandboxing()) <nl> mmm AuditRulesCommand.java <nl> ppp AuditRulesCommand.java <nl> + .setEnableBuildFileSandboxing(parserConfig.getEnableBuildFileSandboxing()) <nl> mmm ProjectBuildFileParserTest.java <nl> 
mmm DTest.java <nl> ppp DTest.java <nl> + import com.facebook.buck.test.TestRunningOptions; <nl> - import com.facebook.buck.test.selectors.TestSelectorList; <nl> - boolean isDryRun, <nl> - boolean isShufflingTests, <nl> - TestSelectorList testSelectorList, <nl> + TestRunningOptions options, <nl> - if (isDryRun) { <nl> 
mmm BuildableSerializerTest.java <nl> ppp BuildableSerializerTest.java <nl> + @Override <nl> + @Test <nl> + public void sortedMap() throws Exception { <nl> + test(new WithSortedMap()); <nl> + } <nl> mmm AbstractValueVisitorTest.java <nl> ppp AbstractValueVisitorTest.java <nl> + import com.facebook.buck.rules.ExplicitBuildTargetSourcePath; <nl> 
mmm HeaderSymlinkTree.java <nl> ppp HeaderSymlinkTree.java <nl> - import com.facebook.buck.core.rules.impl.SymlinkTree; <nl> + import com.facebook.buck.core.rules.impl.MappedSymlinkTree; <nl> - public class HeaderSymlinkTree extends SymlinkTree { <nl> + public class HeaderSymlinkTree extends MappedSymlinkTree { <nl> 
mmm HaskellBinaryDescription.java <nl> ppp HaskellBinaryDescription.java <nl> + import com.facebook.buck.cxx.CxxSourceRuleFactory; <nl> - depType, <nl> + depType == Linker.LinkableDepType.STATIC ? <nl> + CxxSourceRuleFactory.PicType.PDC : <nl> + CxxSourceRuleFactory.PicType.PIC, <nl> mmm PrebuiltHaskellLibraryDescriptionTest.java <nl> 
mmm AbstractBuildRule.java <nl> ppp AbstractBuildRule.java <nl> - this instanceof PythonLibraryRule || <nl> mmm Parser.java <nl> ppp Parser.java <nl> + import com.facebook.buck.python.PythonBinaryBuildRuleFactory; <nl> + import com.facebook.buck.python.PythonLibraryBuildRuleFactory; <nl> mmm PythonLibraryRule.java <nl> 
mmm AbstractNetworkCache.java <nl> ppp AbstractNetworkCache.java <nl> - import com.facebook.buck.core.model.UnconfiguredBuildTargetView; <nl> + import com.facebook.buck.core.model.UnconfiguredBuildTarget; <nl> - private final Function<String, UnconfiguredBuildTargetView> unconfiguredBuildTargetFactory; <nl> 
mmm DistBuildStateTest.java <nl> ppp DistBuildStateTest.java <nl> - import com.facebook.buck.io.watchman.WatchmanFactory; <nl> - import com.facebook.buck.parser.DefaultParser; <nl> - import com.facebook.buck.parser.ParserConfig; <nl> - import com.facebook.buck.parser.ParserPythonInterpreterProvider; <nl> - import com.facebook.buck.parser.PerBuildStateFactory; <nl> 
mmm Indexer.java <nl> ppp Indexer.java <nl> - } catch (Exception e) { <nl> + } catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) { <nl> - } catch (Exception e) { <nl> + } catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) { <nl> - } catch (Exception ex) { <nl> 
mmm RazorRepository.java <nl> ppp RazorRepository.java <nl> - public void setDirectoryName(String directoryName) { <nl> - super.setDirectoryName(directoryName); <nl> - File opengrokBaseDirectory = new File(directoryName); <nl> + public void setDirectoryName(File directory) { <nl> + super.setDirectoryName(directory); <nl> 
mmm PerlXrefTest.java <nl> ppp PerlXrefTest.java <nl> + import static org.junit.Assert.assertEquals; <nl> - import static org.opensolaris.opengrok.util.CustomAssertions.assertLinesEqual; <nl> - package org.opensolaris.opengrok.analysis.c; <nl> - import java.io.BufferedReader; <nl> - import java.io.ByteArrayOutputStream; <nl> 
mmm AbortMessage.java <nl> ppp AbortMessage.java <nl> - public byte[] apply(RuntimeEnvironment env) { <nl> + protected byte[] applyMessage(RuntimeEnvironment env) { <nl> + @Override <nl> + public void validate() throws Exception { <nl> + if (getTags().isEmpty()) { <nl> + getTags().add(RuntimeEnvironment.MESSAGES_MAIN_PAGE_TAG); <nl> 
mmm FieldWFSTCollection.java <nl> ppp FieldWFSTCollection.java <nl> + public void incrementSearchCount(final Term term, final int value) { <nl> + ChronicleMap<BytesRef, Integer> m = searchCountMaps.get(term.field()); <nl> + if (m != null) { <nl> + m.merge(term.bytes(), value, (a, b) -> a + b); <nl> + } <nl> 
mmm IndexerTest.java <nl> ppp IndexerTest.java <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.junit.Assert.assertFalse; <nl> + import static org.junit.Assert.assertNotNull; <nl> + import static org.junit.Assert.assertTrue; <nl> - import static org.junit.Assert.assertEquals; <nl> 
mmm Ctags.java <nl> ppp Ctags.java <nl> - command.add("--regex-rust=/^[[:space:]]*(#\\[[^\\]]\\][[:space:]]*)*(pub[[:space:]]+)?(extern[[:space:]]+)?(\"[^\"]+\"[[:space:]]+)?(unsafe[[:space:]]+)?fn[[:space:]]+([[:alnum:]_]+)/\\6/h,functions,function definitions/"); <nl> + command.add("--regex-rust=/^[[:space:]]*(#\\[[^]]+\\][[:space:]]*)*(pub[[:space:]]+)?(extern[[:space:]]+)?(\\\"[^\\\"]+\\\"[[:space:]]+)?(unsafe[[:space:]]+)?fn[[:space:]]+([[:alnum:]_]+)/\\6/h,functions,function definitions/"); <nl> 
mmm Sample.java <nl> ppp Sample.java <nl> + public abstract int AbstractMethod(int test); <nl> + public static void main(String args[]) { <nl> + int num1, num2; <nl> + try { <nl> + num1 = 0; <nl> + num2 = 62 / num1; <nl> + System.out.println("Try block message"); <nl> + } catch (ArithmeticException e) { <nl> + System.out.println("Error: Don't divide a number by zero"); <nl> 
mmm AbortMessage.java <nl> ppp AbortMessage.java <nl> - public void apply(RuntimeEnvironment env) { <nl> + public byte[] apply(RuntimeEnvironment env) { <nl> + return null; <nl> new file <nl> ppp StatisticsFilter.java <nl> + package org.opensolaris.opengrok.web; <nl> + import java.io.IOException; <nl> + import java.util.logging.Logger; <nl> 
mmm TextAnalyzer.java <nl> ppp TextAnalyzer.java <nl> - import java.io.BufferedInputStream; <nl> - import java.io.InputStreamReader; <nl> - import java.nio.charset.Charset; <nl> mmm Results.java <nl> ppp Results.java <nl> - import java.io.FileReader; <nl> - import java.io.InputStreamReader; <nl> mmm SearchHelperTest.java <nl> 
mmm IndexDatabase.java <nl> ppp IndexDatabase.java <nl> - if (dir.startsWith("\\")) { <nl> - dir = dir.replace('\\', '/'); <nl> - } else if (!dir.startsWith("/")) { <nl> - dir = "/" + dir; <nl> + String directory = dir; <nl> + if (directory.startsWith("\\")) { <nl> + directory = directory.replace('\\', '/'); <nl> 
mmm SearchEngine.java <nl> ppp SearchEngine.java <nl> + import org.opengrok.indexer.util.TandemPath; <nl> - ? new HTMLStripCharFilter(new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(data + Prefix.XREF_P + filename + ".gz"))))) <nl> + ? new HTMLStripCharFilter(new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream( <nl> 
mmm AnalyzerGuru.java <nl> ppp AnalyzerGuru.java <nl> + import org.opensolaris.opengrok.analysis.lua.LuaAnalyzerFactory; <nl> - new GolangAnalyzerFactory() <nl> + new GolangAnalyzerFactory(), <nl> + new LuaAnalyzerFactory() <nl> mmm Configuration.java <nl> ppp Configuration.java <nl> + private int revisionMessageCollapseThreshold; <nl> 
mmm LocalhostFilter.java <nl> ppp LocalhostFilter.java <nl> + import org.opengrok.web.api.v1.controller.AnnotationController; <nl> - HistoryController.PATH, FileController.PATH)); <nl> + HistoryController.PATH, FileController.PATH, AnnotationController.PATH)); <nl> mmm Util.java <nl> ppp Util.java <nl> - String r = annotation.getRevision(num); <nl> 
mmm CommentListResource.java <nl> ppp CommentListResource.java <nl> - startRequest(request, state); <nl> + RequestFragment.startRequest(request, state, this); <nl> mmm DeleteBroadcastWriter.java <nl> ppp DeleteBroadcastWriter.java <nl> + import me.zhanghai.android.douya.network.Request; <nl> - import me.zhanghai.android.douya.network.api.ApiRequest; <nl> 
new file <nl> ppp ProfileDataAdapter.java <nl> + package me.zhanghai.android.douya.profile.ui; <nl> + import android.support.annotation.NonNull; <nl> + import android.support.v7.widget.RecyclerView; <nl> + import android.view.View; <nl> + import android.view.ViewGroup; <nl> + import java.util.List; <nl> + import me.zhanghai.android.douya.R; <nl> 
mmm MovieAdapter.java <nl> ppp MovieAdapter.java <nl> - import me.zhanghai.android.douya.network.api.info.frodo.ItemForumTopic; <nl> + import me.zhanghai.android.douya.network.api.info.frodo.SimpleItemForumTopic; <nl> + private static final int ITEM_FORUM_TOPIC_LIST = 10; <nl> - private static final int ITEM_COUNT = 10; <nl> 
mmm SimpleMovie.java <nl> ppp SimpleMovie.java <nl> - String releaseDate = CollectionUtils.firstOrNull(releaseDates); <nl> - if (!TextUtils.isEmpty(releaseDate) && releaseDate.length() >= 10) { <nl> - releaseDate = releaseDate.substring(0, 10); <nl> - try { <nl> - LocalDate date = TimeUtils.parseDoubanDate(releaseDate); <nl> 
mmm HomeFragment.java <nl> ppp HomeFragment.java <nl> + import android.support.v7.app.AppCompatActivity; <nl> - import me.zhanghai.android.douya.broadcast.ui.BroadcastListFragment; <nl> - import me.zhanghai.android.douya.main.ui.MainActivity; <nl> + import me.zhanghai.android.douya.broadcast.ui.HomeBroadcastListFragment; <nl> 
mmm AndResGuardTest.java <nl> ppp AndResGuardTest.java <nl> - import brut.androlib.res.util.ExtFile; <nl> + import brut.directory.ExtFile; <nl> mmm SmaliBuilder.java <nl> ppp SmaliBuilder.java <nl> - import brut.androlib.res.util.ExtFile; <nl> + import brut.directory.ExtFile; <nl> - import java.util.List; <nl> 
mmm ResConfigFlags.java <nl> ppp ResConfigFlags.java <nl> - public final short mcc; <nl> - public final short mnc; <nl> - public final char[] language; <nl> - public final char[] country; <nl> - public final short layoutDirection; <nl> - public final byte orientation; <nl> - public final byte touchscreen; <nl> 
mmm MapViewerOsmDroid.java <nl> ppp MapViewerOsmDroid.java <nl> - import io.freefair.android.injection.annotation.Inject; <nl> + import io.freefair.android.util.logging.AndroidLogger; <nl> - @Inject <nl> - private Logger log; <nl> + private final Logger log = AndroidLogger.forClass(AimsicdService.class); <nl> 
mmm SmsData.java <nl> ppp SmsData.java <nl> - package com.secupwn.aimsicd.data; <nl> + package com.secupwn.aimsicd.data.model; <nl> mmm AdvancedUserSmsActivity.java <nl> ppp AdvancedUserSmsActivity.java <nl> - import com.secupwn.aimsicd.data.SmsData; <nl> + import com.secupwn.aimsicd.data.model.SmsData; <nl> 
mmm CellTowerMarker.java <nl> ppp CellTowerMarker.java <nl> - * Dependency:  marker_info_window.xml <nl> + * Dependency: <nl> mmm MarkerData.java <nl> ppp MarkerData.java <nl> - public final String lat; <nl> - public final String lac; <nl> - private final String samples; <nl> - boolean openCellID_Data) { <nl> 
mmm SettingsFragment.java <nl> ppp SettingsFragment.java <nl> - locationManager = (LocationManager)getActivity().getSystemService(Context.LOCATION_SERVICE); <nl> + locationManager = (LocationManager) getActivity().getSystemService(Context.LOCATION_SERVICE); <nl> - gpsPref = (CheckBoxPreference)findPreference(gps_key); <nl> 
mmm ContentResolverTypeMapping.java <nl> ppp ContentResolverTypeMapping.java <nl> - private ContentResolverTypeMapping(@NonNull PutResolver<T> putResolver, <nl> - @NonNull GetResolver<T> getResolver, <nl> - @NonNull DeleteResolver<T> deleteResolver) { <nl> + protected ContentResolverTypeMapping(@NonNull PutResolver<T> putResolver, <nl> 
mmm PreparedDelete.java <nl> ppp PreparedDelete.java <nl> + @NonNull <nl> + public <T> PreparedDeleteObject.Builder<T> object(@NonNull T object) { <nl> + return new PreparedDeleteObject.Builder<>(storIOContentResolver, object); <nl> + } <nl> mmm DeleteOperationDesignTest.java <nl> ppp DeleteOperationDesignTest.java <nl> 
new file <nl> ppp BookTableMeta.java <nl> + package com.pushtorefresh.storio.sqlite.impl.auto_parcel; <nl> + import android.content.ContentValues; <nl> + import android.database.Cursor; <nl> + import android.support.annotation.NonNull; <nl> + import com.pushtorefresh.storio.sqlite.operation.delete.DefaultDeleteResolver; <nl> 
mmm LoggingInterceptor.java <nl> ppp LoggingInterceptor.java <nl> - import android.support.annotation.Nullable; <nl> - @Nullable <nl> + @NonNull <nl> mmm InterceptorTest.java <nl> ppp InterceptorTest.java <nl> - import android.support.annotation.Nullable; <nl> - @Nullable <nl> + @NonNull <nl> mmm ChainImpl.java <nl> 
mmm PreparedPutObject.java <nl> ppp PreparedPutObject.java <nl> - public static class Builder<T> { <nl> + public static final class Builder<T> { <nl> deleted file <nl> mmm PreparedGroupOperationTest.java <nl> - package com.pushtorefresh.storio.test_without_rxjava; <nl> - import com.pushtorefresh.storio.operation.group.PreparedGroupOperation; <nl> 
mmm PreparedPutContentValuesIterable.java <nl> ppp PreparedPutContentValuesIterable.java <nl> - import com.pushtorefresh.storio.util.EnvironmentUtil; <nl> + import static com.pushtorefresh.storio.util.EnvironmentUtil.throwExceptionIfRxJavaIsNotAvailable; <nl> - EnvironmentUtil.throwExceptionIfRxJavaIsNotAvailable("createObservable()"); <nl> 
mmm FieldResourceInjectionTest.java <nl> ppp FieldResourceInjectionTest.java <nl> - import static org.junit.Assert.assertEquals; <nl> - import static org.junit.Assert.assertNotNull; <nl> - import java.io.File; <nl> - import javax.annotation.Resource; <nl> + import com.baeldung.configuration.ApplicationContextTestResourceNameType; <nl> 
mmm OkHttpMiscLiveTest.java <nl> ppp OkHttpMiscLiveTest.java <nl> mmm OkHttpGetLiveTest.java <nl> ppp OkHttpGetLiveTest.java <nl> mmm OkHttpFileUploadingLiveTest.java <nl> ppp OkHttpFileUploadingLiveTest.java <nl> mmm OkHttpPostingLiveTest.java <nl> ppp OkHttpPostingLiveTest.java <nl> 
deleted file <nl> mmm WebConfig.java <nl> - package com.baeldung; <nl> - import org.springframework.context.annotation.ComponentScan; <nl> - import org.springframework.context.annotation.Configuration; <nl> - import org.springframework.http.CacheControl; <nl> - import org.springframework.web.servlet.config.annotation.EnableWebMvc; <nl> 
mmm HttpClientPostingLiveTest.java <nl> ppp HttpClientPostingLiveTest.java <nl> - package org.baeldung.httpclient; <nl> + package com.baeldung.httpclient; <nl> - final HttpPost httpPost = new HttpPost(SAMPLE_URL + "/detail"); <nl> + final HttpPost httpPost = new HttpPost(SAMPLE_URL); <nl> - final HttpPost httpPost = new HttpPost(SAMPLE_URL + "/multipart"); <nl> 
new file <nl> ppp Java7StyleAssertions.java <nl> + package com.baeldung.testing.assertj.exceptions; <nl> + import static org.assertj.core.api.Assertions.assertThat; <nl> + import static org.assertj.core.api.Assertions.fail; <nl> + import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown; <nl> 
new file <nl> ppp BookRepositoryCustom.java <nl> + package org.baeldung.persistence.criteria.repository; <nl> + import java.util.List; <nl> + import org.baeldung.persistence.criteria.model.Book; <nl> + public interface BookRepositoryCustom { <nl> + List<Book> findBooksByAuthorNameAndTitle(String authorName, String title); <nl> 
deleted file <nl> mmm ConfigServer.java <nl> - package com.baeldung.spring.cloud.config.server; <nl> - import org.springframework.boot.SpringApplication; <nl> - import org.springframework.boot.autoconfigure.SpringBootApplication; <nl> - import org.springframework.cloud.config.server.EnableConfigServer; <nl> 
deleted file <nl> mmm SpringPropertiesConversionUnitTest.java <nl> - package com.baeldung.boot.configurationproperties; <nl> - import static org.junit.jupiter.api.Assertions.assertEquals; <nl> - import java.time.Duration; <nl> - import org.junit.jupiter.api.Test; <nl> - import org.junit.jupiter.api.extension.ExtendWith; <nl> 
deleted file <nl> mmm SpringContextTest.java <nl> - package com.baeldung.openid.oidc; <nl> - import org.junit.Test; <nl> - import org.junit.runner.RunWith; <nl> - import org.springframework.boot.test.context.SpringBootTest; <nl> - import org.springframework.test.context.junit4.SpringRunner; <nl> - @RunWith(SpringRunner.class) <nl> 
mmm AllTests.java <nl> ppp AllTests.java <nl> + import org.junit.platform.runner.JUnitPlatform; <nl> + import org.junit.platform.suite.api.SelectPackages; <nl> + import org.junit.runner.RunWith; <nl> + @RunWith(JUnitPlatform.class) <nl> + @SelectPackages("com.baeldung") <nl> mmm TraceUnitExtension.java <nl> 
new file <nl> ppp KMeans.java <nl> + package com.baeldung.algorithms.kmeans; <nl> + import java.util.ArrayList; <nl> + import java.util.HashMap; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import java.util.Random; <nl> + import java.util.Set; <nl> + import static java.util.stream.Collectors.toList; <nl> 
deleted file <nl> mmm Foo.java <nl> - package org.baeldung.web.dto; <nl> - import java.io.Serializable; <nl> - public class Foo implements Serializable { <nl> - public Foo() { <nl> - super(); <nl> - } <nl> - } <nl> deleted file <nl> mmm SingleResourceRetrievedDiscoverabilityListener.java <nl> - package org.baeldung.web.controller; <nl> 
deleted file <nl> mmm Bazz.java <nl> - package com.baeldung.web.dto; <nl> - public class Bazz { <nl> - public String id; <nl> - public String name; <nl> - public Bazz(String id){ <nl> - this.id = id; <nl> - } <nl> - public Bazz(String id, String name) { <nl> - this.id = id; <nl> - this.name = name; <nl> - } <nl> 
mmm GeoIpIntegrationTest.java <nl> ppp GeoIpIntegrationTest.java <nl> - File database = new File("C:\\Users\\Parth Joshi\\Desktop\\GeoLite2-City.mmdb\\GeoLite2-City.mmdb"); <nl> + File database = new File("your-path-to-db-file"); <nl> - InetAddress ipAddress = InetAddress.getByName("202.47.112.9"); <nl> + InetAddress ipAddress = InetAddress.getByName("your-public-ip"); <nl> 
mmm SimpleBookRestControllerIntegrationTest.java <nl> ppp SimpleBookRestControllerIntegrationTest.java <nl> + import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get; <nl> + import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content; <nl> + import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath; <nl> 
mmm SetterResourceInjectionIntegrationTest.java <nl> ppp SetterResourceInjectionIntegrationTest.java <nl> - public class SetterResourceInjectionTest { <nl> + public class SetterResourceInjectionIntegrationTest { <nl> mmm FieldAutowiredNameIntegrationTest.java <nl> ppp FieldAutowiredNameIntegrationTest.java <nl> 
mmm SummationServiceTest.java <nl> ppp SummationServiceTest.java <nl> - package com.baeldung.junit4vstestng; <nl> + package com.baeldung.test.comparison; <nl> + import java.security.Security; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> 
deleted file <nl> mmm CustomCredentialsConverter.java <nl> - package com.baeldung.boot.configurationproperties; <nl> - import org.springframework.boot.context.properties.ConfigurationPropertiesBinding; <nl> - import org.springframework.core.convert.converter.Converter; <nl> - import org.springframework.stereotype.Component; <nl> 
mmm RestExceptionHandler.java <nl> ppp RestExceptionHandler.java <nl> mmm MyAuthorizationCodeAccessTokenProvider.java <nl> ppp MyAuthorizationCodeAccessTokenProvider.java <nl> mmm ServletInitializer.java <nl> ppp ServletInitializer.java <nl> - context.register(WebConfig.class); <nl> + context.register(PersistenceJPAConfig.class, WebConfig.class); <nl> 
mmm CabBookingServiceImpl.java <nl> ppp CabBookingServiceImpl.java <nl> - import com.baeldung.api.Address; <nl> - import java.time.LocalDateTime; <nl> - import static java.time.LocalDateTime.now; <nl> - import static java.time.temporal.ChronoUnit.MINUTES; <nl> - @Override public Booking bookPickUp(Address pickUpLocation, Address dropOffLocation, int pax) throws BookingException { <nl> 
mmm Communication.java <nl> ppp Communication.java <nl> + private Queue<String> messageLog; <nl> + @Named("CommsUUID") <nl> + private String commsID; <nl> - System.out.println("keeping records"); <nl> + messageLog = new LinkedList(); <nl> + if (!message.isEmpty() && messageLog != null) { <nl> + messageLog.add(message); <nl> 
deleted file <nl> mmm Document.java <nl> - package com.baeldung.domain; <nl> - public class Document { <nl> - 	private String id; <nl> - 	private String data; <nl> - 	 <nl> - 	public String getId() { <nl> - 		return id; <nl> - 	} <nl> - 	public void setId(String id) { <nl> - 		this.id = id; <nl> - 	} <nl> - 	public String getData() { <nl> 
mmm HighEndComputer.java <nl> ppp HighEndComputer.java <nl> - package com.baeldung.pattern.templatemethod.model; <nl> + package com.baeldung.templatemethod.model; <nl> - import com.baeldung.pattern.templatemethod.model.Computer; <nl> mmm HighEndComputerBuilder.java <nl> ppp HighEndComputerBuilder.java <nl> 
mmm DynamoDBConfig.java <nl> ppp DynamoDBConfig.java <nl> - @Bean(name = "mvcHandlerMappingIntrospector") <nl> - 	public HandlerMappingIntrospector mvcHandlerMappingIntrospector() { <nl> + @Bean(name = "mvcHandlerMappingIntrospectorCustom") <nl> + 	public HandlerMappingIntrospector mvcHandlerMappingIntrospectorCustom() { <nl> 
mmm Message.java <nl> ppp Message.java <nl> - @ConstructorResult(targetClass = DummyEntity.class, columns = { <nl> + @ConstructorResult(targetClass = Message.class, columns = { <nl> - @Table(name = "dummy") <nl> - public class DummyEntity { <nl> + public class Message { <nl> - public DummyEntity() { <nl> + public Message() { <nl> 
deleted file <nl> mmm Article.java <nl> - package com.baeldung.meecrowave; <nl> - public class Article { <nl> - private String name; <nl> - private String author; <nl> - public Article() { <nl> - } <nl> - public Article(String name, String author) { <nl> - this.author = author; <nl> - this.name = name; <nl> - } <nl> 
deleted file <nl> mmm NumberOfLineFinderUnitTest.java <nl> - package com.baeldung.file; <nl> - import static com.baeldung.files.NumberOfLineFinder.getTotalNumberOfLinesUsingApacheCommonsIO; <nl> - import static com.baeldung.files.NumberOfLineFinder.getTotalNumberOfLinesUsingBufferedReader; <nl> - import static com.baeldung.files.NumberOfLineFinder.getTotalNumberOfLinesUsingGoogleGuava; <nl> 
new file <nl> ppp StringToDateUnitTest.java <nl> + package com.baeldung.date; <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.assertj.core.api.Assertions.assertThat; <nl> + import java.text.ParseException; <nl> + import java.text.SimpleDateFormat; <nl> + import java.time.LocalDate; <nl> 
mmm MarketDataRSocketControllerLiveTest.java <nl> ppp MarketDataRSocketControllerLiveTest.java <nl> - return RSocketRequester.wrap(rSocket(), MimeTypeUtils.APPLICATION_JSON, rSocketStrategies); <nl> + return RSocketRequester.wrap(rSocket(), MimeTypeUtils.APPLICATION_JSON, MimeTypeUtils.APPLICATION_JSON, rSocketStrategies); <nl> 

new file <nl> ppp VectorOfBitsBenchmark.java <nl> + package com.baeldung.bitset; <nl> + import org.openjdk.jmh.annotations.Benchmark; <nl> + import org.openjdk.jmh.annotations.BenchmarkMode; <nl> + import org.openjdk.jmh.annotations.Level; <nl> + import org.openjdk.jmh.annotations.Mode; <nl> + import org.openjdk.jmh.annotations.Param; <nl> 
deleted file <nl> mmm PersonValidator.java <nl> - package com.baeldung.spring.validator; <nl> - import com.baeldung.spring.form.Person; <nl> - import org.springframework.stereotype.Component; <nl> - import org.springframework.validation.Errors; <nl> - import org.springframework.validation.ValidationUtils; <nl> 

new file <nl> ppp Source.java <nl> + package com.baeldung.orika; <nl> + public class Source { <nl> + 	@Override <nl> + 	public String toString() { <nl> + 		return "Source [name=" + name + ", age=" + age + "]"; <nl> + 	} <nl> + 	private String name; <nl> + 	private int age; <nl> + 	public Source() { <nl> + 	} <nl> 
new file <nl> ppp IOCContainer.java <nl> + package com.baeldung.hexagonal; <nl> + import com.baeldung.hexagonal.central.service.AccountService; <nl> + import com.baeldung.hexagonal.central.service.IAccountService; <nl> + import com.baeldung.hexagonal.input.ConsoleUI; <nl> + import com.baeldung.hexagonal.output.InMemoryAccountRepository; <nl> 
mmm ReloadablePropertySourceFactory.java <nl> ppp ReloadablePropertySourceFactory.java <nl> - package com.baeldung.properties.configs; <nl> + package com.baeldung.properties.reloading.configs; <nl> mmm ReloadableProperties.java <nl> ppp ReloadableProperties.java <nl> - package com.baeldung.properties.configs; <nl> 
new file <nl> ppp Hscan.java <nl> + package com.baeldung.redis_scan.strategy.impl; <nl> + import com.baeldung.redis_scan.strategy.ScanStrategy; <nl> + import redis.clients.jedis.Jedis; <nl> + import redis.clients.jedis.ScanParams; <nl> + import redis.clients.jedis.ScanResult; <nl> + import java.util.Map; <nl> 
deleted file <nl> mmm IntToEnumUnitTest.java <nl> - package com.baeldung.inttoenum; <nl> - import org.junit.Test; <nl> - import static org.junit.Assert.assertEquals; <nl> - public class IntToEnumUnitTest { <nl> - @Test <nl> - public void whenIntToEnumUsingValuesMethod_thenReturnEnumObject() { <nl> - int timeToDeliveryForOrderedPizzaStatus = 5; <nl> 
deleted file <nl> mmm JavaXToWriterUnitTest.java <nl> - package org.baeldung.java.io; <nl> - import java.io.IOException; <nl> - import java.io.StringWriter; <nl> - import java.io.Writer; <nl> - import org.apache.commons.io.output.StringBuilderWriter; <nl> - import org.junit.Test; <nl> - import org.slf4j.Logger; <nl> 
new file <nl> ppp MvcConfig.java <nl> + package com.baeldung.config; <nl> + import org.springframework.context.annotation.ComponentScan; <nl> + import org.springframework.context.annotation.Configuration; <nl> + import org.springframework.http.MediaType; <nl> + import org.springframework.http.converter.HttpMessageConverter; <nl> 
new file <nl> ppp DateToLocalDateTimeConverter.java <nl> + package com.baeldung.datetime; <nl> + import java.time.Instant; <nl> + import java.time.LocalDateTime; <nl> + import java.time.ZoneId; <nl> + import java.util.Date; <nl> + public class DateToLocalDateTimeConverter { <nl> + public static LocalDateTime convertToLocalDateTimeViaInstant(Date dateToConvert) { <nl> 
mmm MyDictionary.java <nl> ppp MyDictionary.java <nl> mmm MockitoSpyTest.java <nl> ppp MockitoSpyTest.java <nl> + @Spy <nl> + private List<String> aSpyList = new ArrayList<String>(); <nl> - public void whenSpyOnList_thenCorrect() { <nl> + public void whenSpyingOnList_thenCorrect() { <nl> - @Spy <nl> - List<String> aSpyList = new ArrayList<String>(); <nl> 
new file <nl> ppp Project.java <nl> + package com.baeldung.hibernate.manytomany.model; <nl> + import java.io.Serializable; <nl> + import java.util.HashSet; <nl> + import java.util.Set; <nl> + import javax.persistence.Column; <nl> + import javax.persistence.Entity; <nl> + import javax.persistence.GeneratedValue; <nl> 
new file <nl> ppp PersonCrudService.java <nl> + package com.baeldung.couchbase.spring.person; <nl> + import java.util.List; <nl> + import java.util.UUID; <nl> + import javax.annotation.PostConstruct; <nl> + import org.springframework.beans.factory.annotation.Autowired; <nl> + import org.springframework.stereotype.Service; <nl> 
deleted file <nl> mmm MessagePublisher.java <nl> - package org.baeldung.spring.data.redis.queue; <nl> - public interface MessagePublisher { <nl> - void publish(final String message); <nl> - } <nl> new file <nl> + package com.baeldung.server; <nl> + import com.baeldung.client.ServicesInterface; <nl> + import com.baeldung.model.Movie; <nl> 
new file <nl> ppp PersonDao.java <nl> + package com.baeldung.di.spring; <nl> + public interface PersonDao { <nl> + } <nl> new file <nl> ppp AccountServiceImpl.java <nl> + package com.baeldung.di.spring; <nl> + import org.springframework.stereotype.Component; <nl> + @Component <nl> + public class AccountServiceImpl implements AccountService { <nl> 
mmm AnonymousInnerTest.java <nl> ppp AnonymousInnerTest.java <nl> - abstract class SimpleAbstractClass { <nl> - abstract void run(); <nl> - } <nl> - public class AnonymousInner { <nl> + public class AnonymousInnerTest { <nl> - public void run() { <nl> + public void whenRunAnonymousClass_thenCorrect() { <nl> new file <nl> 

deleted file <nl> mmm JvmHaltDemoUnitTest.java <nl> - package com.baeldung.exitvshalt; <nl> - import org.junit.Test; <nl> - public class JvmHaltDemoUnitTest { <nl> - JvmExitAndHaltDemo jvmExitAndHaltDemo = new JvmExitAndHaltDemo(); <nl> - @Test <nl> - public void givenProcessComplete_whenHaltCalled_thenDoNotTriggerShutdownHook() { <nl> 
new file <nl> ppp Application.java <nl> + package com.baeldung.shutdown; <nl> + import com.baeldung.autoconfiguration.MySQLAutoconfiguration; <nl> + import org.springframework.boot.ExitCodeGenerator; <nl> + import org.springframework.boot.SpringApplication; <nl> + import org.springframework.boot.autoconfigure.SpringBootApplication; <nl> 
mmm User.java <nl> ppp User.java <nl> - package com.baeldung.crud.entities; <nl> - import javax.persistence.Entity; <nl> - import javax.persistence.GeneratedValue; <nl> - import javax.persistence.GenerationType; <nl> - import javax.persistence.Id; <nl> - import javax.validation.constraints.NotBlank; <nl> - @Entity <nl> 
deleted file <nl> mmm AbstractInstanceFieldsUnitTest.java <nl> - package org.baeldung.testing.abstractclass.instancefields; <nl> - import static org.junit.Assert.assertEquals; <nl> - import org.junit.Test; <nl> - import org.mockito.Mockito; <nl> - import org.powermock.api.mockito.PowerMockito; <nl> - import org.powermock.reflect.Whitebox; <nl> 
deleted file <nl> mmm SearchCommand.java <nl> - package com.baeldung.enterprise.patterns.front.controller.commands; <nl> - import com.baeldung.enterprise.patterns.front.controller.data.Book; <nl> - import com.baeldung.enterprise.patterns.front.controller.data.BookshelfImpl; <nl> - import javax.servlet.ServletException; <nl> 
new file <nl> ppp CountryClientLiveTest.java <nl> + package com.baeldung.soap.ws.client; <nl> + import static org.junit.Assert.assertEquals; <nl> + import org.junit.BeforeClass; <nl> + import org.junit.Test; <nl> + import com.baeldung.soap.ws.client.generated.CountryService; <nl> + import com.baeldung.soap.ws.client.generated.CountryServiceImplService; <nl> 
mmm BasicConfigurationIntegrationTest.java <nl> ppp BasicConfigurationIntegrationTest.java <nl> - import org.junit.Assert; <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.junit.Assert.assertNull; <nl> + import static org.junit.Assert.assertTrue; <nl> + import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT; <nl> 
new file <nl> ppp BuilderInheritanceUsingMethodNameUnitTest.java <nl> + package com.baeldung.lombok.builder.inheritance.buildermethodname; <nl> + import static org.assertj.core.api.Assertions.assertThat; <nl> + import org.junit.jupiter.api.Test; <nl> + public class BuilderInheritanceUsingMethodNameUnitTest { <nl> 
mmm KafkaTopicConfig.java <nl> ppp KafkaTopicConfig.java <nl> - private String partionedTopicName; <nl> + private String partitionedTopicName; <nl> - return new NewTopic(partionedTopicName, 6, (short) 1); <nl> + return new NewTopic(partitionedTopicName, 6, (short) 1); <nl> mmm JavaNioUnitTest.java <nl> ppp JavaNioUnitTest.java <nl> 
mmm DiscoveryClientApplication.java <nl> ppp DiscoveryClientApplication.java <nl> - new SpringApplicationBuilder(DiscoveryClientApplication.class).web(NONE) <nl> + new SpringApplicationBuilder(DiscoveryClientApplication.class) <nl> deleted file <nl> mmm PropertiesReader.java <nl> - package com.baeldung.maven.properties; <nl> 
mmm RatingServiceApplication.java <nl> ppp RatingServiceApplication.java <nl> + import org.springframework.web.bind.annotation.GetMapping; <nl> + import org.springframework.web.bind.annotation.RequestMapping; <nl> + import org.springframework.web.bind.annotation.RequestParam; <nl> + import org.springframework.web.bind.annotation.RestController; <nl> 

new file <nl> ppp TimerEventListener.java <nl> + package com.baeldung.timer; <nl> + import javax.ejb.Singleton; <nl> + import javax.ejb.Startup; <nl> + import javax.enterprise.event.Observes; <nl> + import java.util.List; <nl> + import java.util.concurrent.CopyOnWriteArrayList; <nl> + @Startup <nl> + @Singleton <nl> 
mmm FooController.java <nl> ppp FooController.java <nl> + @RequestMapping(method = RequestMethod.GET, value = "/count") <nl> + @ResponseBody <nl> + @ResponseStatus(value = HttpStatus.OK) <nl> + public long count() { <nl> + return 2l; <nl> + } <nl> new file <nl> ppp ApacheFOPConvertHTMLTest.java <nl> + package org.baeldung.java; <nl> 
mmm GuavaRangeSetUnitTest.java <nl> ppp GuavaRangeSetUnitTest.java <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.junit.Assert.assertTrue; <nl> + import static org.junit.Assert.assertFalse; <nl> + import org.junit.Test; <nl> - import org.junit.Test; <nl> - import static org.junit.Assert.*; <nl> 
new file <nl> ppp BookshelfImpl.java <nl> + package com.baeldung.enterprise.patterns.front.controller.data; <nl> + import java.util.ArrayList; <nl> + public class BookshelfImpl extends ArrayList<Book> implements Bookshelf { <nl> + private static Bookshelf INSTANCE; <nl> + @Override <nl> + public Bookshelf getInstance() { <nl> 
mmm GuavaRangeMapUnitTest.java <nl> ppp GuavaRangeMapUnitTest.java <nl> - import static org.junit.Assert.assertTrue; <nl> - import java.util.Arrays; <nl> - assertTrue(experiencedSubRangeDesignationMap.asMapOfRanges().values() <nl> - .containsAll(Arrays.asList("Executive Director", "Vice President", "Executive Director"))); <nl> 
mmm DateDiffUnitTest.java <nl> ppp DateDiffUnitTest.java <nl> + import java.time.ZoneId; <nl> + import java.time.ZonedDateTime; <nl> mmm DateToStringFormatterUnitTest.java <nl> ppp DateToStringFormatterUnitTest.java <nl> - import org.junit.BeforeClass; <nl> - import org.junit.Test; <nl> + import static org.junit.Assert.assertEquals; <nl> 
deleted file <nl> mmm PersonMapper.java <nl> - package com.baeldung.mapper; <nl> - import org.mapstruct.Mapper; <nl> - import org.mapstruct.Mapping; <nl> - import org.mapstruct.factory.Mappers; <nl> - import com.baeldung.dto.PersonDTO; <nl> - import com.baeldung.entity.Person; <nl> - @Mapper <nl> - public interface PersonMapper { <nl> 
mmm InterpolationSearchUnitTest.java <nl> ppp InterpolationSearchUnitTest.java <nl> + import static org.junit.jupiter.api.Assertions.assertEquals; <nl> - import static org.junit.jupiter.api.Assertions.assertEquals; <nl> mmm StringSearchAlgorithms.java <nl> ppp StringSearchAlgorithms.java <nl> - package com.baeldung.algorithms.textsearch; <nl> 
deleted file <nl> mmm ComparatorUnitTest.java <nl> - package com.baeldung.comparator; <nl> - import static org.junit.Assert.assertEquals; <nl> - import java.util.ArrayList; <nl> - import java.util.Collections; <nl> - import java.util.List; <nl> - import org.junit.Before; <nl> - import org.junit.Test; <nl> - public class ComparatorUnitTest { <nl> 
new file <nl> ppp RedditService.java <nl> + package org.baeldung.persistence.service; <nl> + import java.util.Arrays; <nl> + import java.util.Date; <nl> + import java.util.concurrent.TimeUnit; <nl> + import org.baeldung.persistence.dao.PostRepository; <nl> + import org.baeldung.persistence.model.Post; <nl> + import org.baeldung.persistence.model.User; <nl> 
new file <nl> ppp OptimizedMatcherUnitTest.java <nl> + package com.baeldung.regexp.optmization; <nl> + import org.junit.After; <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + import java.util.Random; <nl> + import java.util.regex.Matcher; <nl> 
new file <nl> ppp AsyncAnnotationExampleTest.java <nl> + package org.baeldung.async; <nl> + import java.util.concurrent.ExecutionException; <nl> + import java.util.concurrent.Future; <nl> + import org.baeldung.async.config.SpringAsyncConfig; <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> 
mmm APIDemoHandler.java <nl> ppp APIDemoHandler.java <nl> - private JSONParser parser = new JSONParser(); <nl> - private  static final String DYNAMODB_TABLE_NAME = System.getenv("TABLE_NAME"); <nl> + 	private JSONParser parser = new JSONParser(); <nl> + 	private  static final String DYNAMODB_TABLE_NAME = System.getenv("TABLE_NAME"); <nl> 
new file <nl> ppp Graph.java <nl> + package com.baeldung.graph; <nl> + import java.util.ArrayList; <nl> + import java.util.HashMap; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import java.util.Stack; <nl> + public class Graph { <nl> + private Map<Integer, List<Integer>> adjVertices; <nl> 
new file <nl> ppp CustomerSlimSerializer.java <nl> + package com.baeldung.jsonoptimization; <nl> + import java.io.IOException; <nl> + import com.fasterxml.jackson.core.JsonGenerator; <nl> + import com.fasterxml.jackson.databind.SerializerProvider; <nl> + import com.fasterxml.jackson.databind.ser.std.StdSerializer; <nl> 
mmm ComponentScanAnnotationFilterAppIntegrationTest.java <nl> ppp ComponentScanAnnotationFilterAppIntegrationTest.java <nl> - public void whenAnnotationFilterIsUsed_thenComponentScanShouldRegisterBeanAnnotatedWithAnimalAnootation() { <nl> + public void testBean() { <nl> mmm ExampleEventSource.java <nl> ppp ExampleEventSource.java <nl> 
new file <nl> ppp AddSubtractDaysSkippingWeekendsUtilsUnitTest.java <nl> + package com.baeldung.datetime; <nl> + import static org.junit.Assert.assertEquals; <nl> + import org.junit.Test; <nl> + import java.time.LocalDate; <nl> + public class AddSubtractDaysSkippingWeekendsUtilsUnitTest { <nl> + @Test <nl> + public void givenLocalDateAndDaysToAdd_thenAddDaysSkippingWeekends() { <nl> 
new file <nl> ppp PersonRepositoryServiceTest.java <nl> + package org.baeldung.spring.data.couchbase.service; <nl> + import org.springframework.beans.factory.annotation.Autowired; <nl> + import org.springframework.beans.factory.annotation.Qualifier; <nl> + public class PersonRepositoryServiceTest extends PersonServiceTest { <nl> 
mmm PostService.java <nl> ppp PostService.java <nl> - package com.baeldung.modelmapper.service; <nl> + package com.baeldung.springpagination.service; <nl> - import com.baeldung.modelmapper.model.Post; <nl> - import com.baeldung.modelmapper.repository.PostRepository; <nl> + import com.baeldung.springpagination.model.Post; <nl> 
new file <nl> ppp SecurityConfig.java <nl> + package com.baeldung.springmvcforms.configuration; <nl> + import org.springframework.beans.factory.annotation.Autowired; <nl> + import org.springframework.context.annotation.Bean; <nl> + import org.springframework.context.annotation.Configuration; <nl> + import org.springframework.core.annotation.Order; <nl> 
new file <nl> ppp SpringContextIntegrationTest.java <nl> + package org.baeldung; <nl> + import org.baeldung.spring.Application; <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> + import org.springframework.boot.test.context.SpringBootTest; <nl> + import org.springframework.test.context.junit4.SpringRunner; <nl> 
mmm SecondaryEntityManagerProducer.java <nl> ppp SecondaryEntityManagerProducer.java <nl> + import javax.enterprise.inject.Default; <nl> + import javax.enterprise.inject.Disposes; <nl> - import javax.persistence.PersistenceContext; <nl> + import javax.persistence.EntityManagerFactory; <nl> + import javax.persistence.PersistenceUnit; <nl> 
mmm MyUserDetailsService.java <nl> ppp MyUserDetailsService.java <nl> + import java.util.Calendar; <nl> - import org.baeldung.persistence.service.IUserService; <nl> - private final Logger LOGGER = LoggerFactory.getLogger(getClass()); <nl> + 	private final Logger LOGGER = LoggerFactory.getLogger(getClass()); <nl> 
deleted file <nl> mmm MyResource.java <nl> - package com.baeldung.trywithresource; <nl> - public class MyResource implements AutoCloseable { <nl> - @Override <nl> - public void close() throws Exception { <nl> - System.out.println("Closed MyResource"); <nl> - } <nl> - }new file <nl> + package com.baeldung.random; <nl> 
mmm StatelessEJBIntegrationTest.java <nl> ppp StatelessEJBIntegrationTest.java <nl> - package com.baeldung.ejb.test.stateless; <nl> + package com.baeldung.ejb.stateless; <nl> mmm SpringEjbClientApplication.java <nl> ppp SpringEjbClientApplication.java <nl> - String moduleName = "ejb-remote-for-spring/"; <nl> 
deleted file <nl> mmm Controller.java <nl> - package com.baeldung.accessparamsjs; <nl> - import java.util.Map; <nl> - import org.springframework.web.bind.annotation.RequestMapping; <nl> - import org.springframework.web.bind.annotation.RestController; <nl> - import org.springframework.web.servlet.ModelAndView; <nl> 
mmm SecurityJavaConfig.java <nl> ppp SecurityJavaConfig.java <nl> - .antMatchers("/api/customers**").permitAll() <nl> - @Override <nl> - public void onStartup(final ServletContext sc) throws ServletException { <nl> - System.out.println("MainWebAppInitializer.onStartup()"); <nl> - final AnnotationConfigWebApplicationContext root = new AnnotationConfigWebApplicationContext(); <nl> 
mmm JunitAndMockitoTest.java <nl> ppp JunitAndMockitoTest.java <nl> - package json.chao.com.wanandroid.JunitAndMockitoTestExample; <nl> + package json.chao.com.wanandroid.testStudyExample.JunitAndMockitoTestExample; <nl> mmm GithubApi.java <nl> ppp GithubApi.java <nl> - package json.chao.com.wanandroid.test; <nl> 
mmm MainPagerFragment.java <nl> ppp MainPagerFragment.java <nl> - ActivityOptions options = ActivityOptions.makeSceneTransitionAnimation(_mActivity, view, "shareView"); <nl> + ActivityOptions options = ActivityOptions.makeSceneTransitionAnimation(_mActivity, view, getString(R.string.share_view)); <nl> mmm ArticleDetailActivity.java <nl> 
mmm CacheTests.java <nl> ppp CacheTests.java <nl> - import android.test.AndroidTestCase; <nl> + import android.support.test.runner.AndroidJUnit4; <nl> - import com.koushikdutta.async.Util; <nl> + import org.junit.runner.RunWith; <nl> + import static android.support.test.InstrumentationRegistry.getContext; <nl> 
new file <nl> ppp OperatorTest.java <nl> + package eu.stratosphere.sopremo; <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.junit.Assert.assertNotNull; <nl> + import static org.junit.Assert.assertNotSame; <nl> + import static org.junit.Assert.assertNull; <nl> + import static org.junit.Assert.assertSame; <nl> 
mmm StandaloneResourceManagerFactoryTest.java <nl> ppp StandaloneResourceManagerFactoryTest.java <nl> - 				NoOpMetricRegistry.INSTANCE, <nl> mmm StandaloneResourceManagerWithUUIDFactory.java <nl> ppp StandaloneResourceManagerWithUUIDFactory.java <nl> - import org.apache.flink.runtime.metrics.MetricRegistry; <nl> 
mmm WorksetConnectedComponentsTest.java <nl> ppp WorksetConnectedComponentsTest.java <nl> + import java.io.Serializable; <nl> + import eu.stratosphere.pact.common.contract.FileDataSink; <nl> + import eu.stratosphere.pact.common.contract.FileDataSource; <nl> + import eu.stratosphere.pact.common.contract.MatchContract; <nl> 
mmm StreamOperator.java <nl> ppp StreamOperator.java <nl> + 	public boolean isInputCopyingDisabled(); <nl> mmm WindowMapper.java <nl> ppp WindowMapper.java <nl> + 		disableInputCopy(); <nl> mmm WindowPartitioner.java <nl> ppp WindowPartitioner.java <nl> + 		disableInputCopy(); <nl> mmm WindowReducer.java <nl> 
mmm SlotPoolImplTest.java <nl> ppp SlotPoolImplTest.java <nl> - 		Scheduler scheduler = new SchedulerImpl(LocationPreferenceSlotSelectionStrategy.INSTANCE, slotPool); <nl> + 		Scheduler scheduler = new SchedulerImpl(LocationPreferenceSlotSelectionStrategy.createDefault(), slotPool); <nl> mmm PreviousAllocationSlotSelectionStrategy.java <nl> 
mmm ArchivedExecution.java <nl> ppp ArchivedExecution.java <nl> + import org.apache.flink.runtime.clusterframework.types.AllocationID; <nl> + 	private final AllocationID assignedAllocationID; <nl> - 		this.userAccumulators = execution.getUserAccumulatorsStringified(); <nl> - 		this.attemptId = execution.getAttemptId(); <nl> 
mmm JobManagerHARecoveryTest.java <nl> ppp JobManagerHARecoveryTest.java <nl> + import org.apache.flink.runtime.checkpoint.CheckpointMetaData; <nl> - 		public boolean triggerCheckpoint(long checkpointId, long timestamp) { <nl> + 		public boolean triggerCheckpoint(CheckpointMetaData checkpointMetaData) { <nl> 
mmm ProcessFailureCancelingITCase.java <nl> ppp ProcessFailureCancelingITCase.java <nl> - 				clusterClient.shutdown(); <nl> + 				clusterClient.close(); <nl> mmm RemoteStreamEnvironment.java <nl> ppp RemoteStreamEnvironment.java <nl> - 				client.shutdown(); <nl> + 				client.close(); <nl> mmm RestClusterClientTest.java <nl> 
deleted file <nl> mmm MiniDispatcherRunnerFactory.java <nl> - package org.apache.flink.runtime.dispatcher.runner; <nl> - import org.apache.flink.runtime.dispatcher.JobDispatcherFactory; <nl> - import org.apache.flink.runtime.dispatcher.PartialDispatcherServices; <nl> - import org.apache.flink.runtime.entrypoint.component.JobGraphRetriever; <nl> 
mmm InstanceManager.java <nl> ppp InstanceManager.java <nl> + 	int getNumberOfTaskTrackers(); <nl> mmm JobManager.java <nl> ppp JobManager.java <nl> - 		 <nl> - 				LOG.error("UNable to load instance manager " + instanceManagerClassName); <nl> + 				LOG.error("Unable to load instance manager " + instanceManagerClassName); <nl> 
mmm HadoopMapredITCase.java <nl> ppp HadoopMapredITCase.java <nl> - 	 <nl> - 	 <nl> mmm HadoopUtils.java <nl> ppp HadoopUtils.java <nl> - import org.apache.commons.cli.Option; <nl> + import org.apache.commons.cli.Option; <nl> - public class HadoopTupleUnwrappingIterator<KEY,VALUE> <nl> + public class HadoopTupleUnwrappingIterator<KEY, VALUE> <nl> 
new file <nl> ppp KafkaProducerTest.java <nl> + package org.apache.flink.streaming.connectors.kafka; <nl> + import org.apache.flink.configuration.Configuration; <nl> + import org.apache.flink.streaming.connectors.kafka.testutils.MockRuntimeContext; <nl> + import org.apache.flink.streaming.util.serialization.SimpleStringSchema; <nl> 
mmm PactCompiler.java <nl> ppp PactCompiler.java <nl> - 				DataSourceNode duplicateDataSource = new DataSourceNode((DataSourceContract)sourcePact.getPactContract()); <nl> + 				DataSourceNode duplicateDataSource = new DataSourceNode((DataSourceContract<?, ?>)sourcePact.getPactContract()); <nl> mmm ChannelWriter.java <nl> 
mmm SWTInstanceToolTip.java <nl> ppp SWTInstanceToolTip.java <nl> + import org.eclipse.swt.graphics.Color; <nl> + 		final Color backgroundColor = getShell().getBackground(); <nl> + 		final Color foregroundColor = getShell().getForeground(); <nl> - 			this.cpuChart = createCPUChart(instanceVisualizationData); <nl> 
mmm HardPlansCompilationTest.java <nl> ppp HardPlansCompilationTest.java <nl> + import org.apache.flink.api.common.Plan; <nl> - import org.apache.flink.api.java.operators.translation.JavaPlan; <nl> - 		JavaPlan plan = env.createProgramPlan(); <nl> + 		Plan plan = env.createProgramPlan(); <nl> mmm ReplicatingDataSourceTest.java <nl> 
new file <nl> ppp FlinkKafkaConsumer.java <nl> + package org.apache.flink.streaming.connectors.kafka; <nl> + import org.apache.flink.annotation.PublicEvolving; <nl> + import org.apache.flink.api.common.serialization.DeserializationSchema; <nl> + import org.apache.flink.metrics.MetricGroup; <nl> + import org.apache.flink.streaming.api.functions.AssignerWithPeriodicWatermarks; <nl> 
deleted file <nl> mmm GenerateBaskets.java <nl> - package temp; <nl> - import java.util.Random; <nl> - import java.util.Set; <nl> - import java.util.TreeSet; <nl> - import eu.stratosphere.sopremo.sdaa11.frequent_itemsets.son.json.BasketNodes; <nl> - import eu.stratosphere.sopremo.type.ArrayNode; <nl> - import eu.stratosphere.sopremo.type.IArrayNode; <nl> 
deleted file <nl> mmm StreamRecordTest.java <nl> - package eu.stratosphere.streaming.api; <nl> - import static org.junit.Assert.*; <nl> - import org.junit.Test; <nl> - import eu.stratosphere.types.StringValue; <nl> - public class StreamRecordTest { <nl> - 	@Test <nl> - 	public void copyTest() { <nl> - 		StreamRecord a = new StreamRecord(new StringValue("Big")); <nl> 
mmm RegisteredKeyValueStateBackendMetaInfo.java <nl> ppp RegisteredKeyValueStateBackendMetaInfo.java <nl> + import org.apache.flink.runtime.state.StateSnapshotTransformer.StateSnapshotTransformFactory; <nl> - 	@Nullable <nl> - 	private StateSnapshotTransformer<S> snapshotTransformer; <nl> + 	@Nonnull <nl> 
mmm KeyGroupedIterator.java <nl> ppp KeyGroupedIterator.java <nl> - 	private final class ValuesIterator implements Iterator<V> <nl> - 	{ <nl> + 	private final class ValuesIterator implements Iterator<V> { <nl> mmm NepheleReaderIterator.java <nl> ppp NepheleReaderIterator.java <nl> - 	private final Reader<T> reader; <nl> 
mmm ManagementGraph.java <nl> ppp ManagementGraph.java <nl> + import java.util.Collection; <nl> + import java.util.Collections; <nl> + 	public Collection<ManagementGroupVertex> getGroupVertices() { <nl> + 		return Collections.unmodifiableCollection(groupVertices.values()); <nl> + 	} <nl> + public class ManagementGateID extends AbstractID { <nl> 
mmm NepheleJobGraphGenerator.java <nl> ppp NepheleJobGraphGenerator.java <nl> + import java.util.Map.Entry; <nl> + import eu.stratosphere.api.common.cache.DistributedCache; <nl> + 		for (Entry<String, String> e: program.getOriginalPactPlan().getCachedFile()) { <nl> + 			DistributedCache.addCachedFile(e.getKey(), e.getValue(), this.jobGraph.getJobConfiguration()); <nl> 
new file <nl> ppp KMeansTutorialExampleITCase.java <nl> + package eu.stratosphere.test.iterative; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + import eu.stratosphere.api.common.Plan; <nl> + import eu.stratosphere.example.java.record.kmeans.KMeansTutorialExample; <nl> + import eu.stratosphere.test.testdata.KMeansData; <nl> 
mmm QueueExecutionListenerTest.java <nl> ppp QueueExecutionListenerTest.java <nl> - import static org.mockito.Mockito.mock; <nl> + import static org.mockito.Mockito.times; <nl> - import static org.mockito.Mockito.times; <nl> + import static org.mockito.MockitoAnnotations.initMocks; <nl> + import org.junit.Before; <nl> 
mmm EnumTrianglesOnEdgesWithDegreesITCase.java <nl> ppp EnumTrianglesOnEdgesWithDegreesITCase.java <nl> + import org.apache.flink.examples.scala.graph.EnumTrianglesOnEdgesWithDegrees; <nl> - import eu.stratosphere.examples.scala.graph.EnumTrianglesOnEdgesWithDegrees; <nl> mmm Dummy.java <nl> ppp Dummy.java <nl> 
mmm DumpCompiledPlanTest.java <nl> ppp DumpCompiledPlanTest.java <nl> + import eu.stratosphere.api.java.DataSet; <nl> + import eu.stratosphere.api.java.ExecutionEnvironment; <nl> + import eu.stratosphere.api.java.tuple.Tuple2; <nl> - import eu.stratosphere.example.java.record.connectedcomponents.WorksetConnectedComponents; <nl> 
mmm EvictingNonKeyedWindowOperator.java <nl> ppp EvictingNonKeyedWindowOperator.java <nl> mmm WindowOperator.java <nl> ppp WindowOperator.java <nl> - 	@VisibleForTesting <nl> - 	public boolean isSetProcessingTime() { <nl> - 		return setProcessingTime; <nl> - 	} <nl> mmm DeltaEvictor.java <nl> ppp DeltaEvictor.java <nl> 
new file <nl> ppp KafkaShortRetentionTestBase.java <nl> + package org.apache.flink.streaming.connectors.kafka; <nl> + import org.apache.flink.api.common.restartstrategy.RestartStrategies; <nl> + import org.apache.flink.api.common.typeinfo.TypeInformation; <nl> + import org.apache.flink.api.java.typeutils.TypeInfoParser; <nl> 
mmm StreamExecutionEnvironment.java <nl> ppp StreamExecutionEnvironment.java <nl> - 	 * <p><b>ATTENTION:</b> The caller of this method is responsible for managing the lifecycle of <nl> - 	 * the returned {@link JobClient}. This means calling {@link JobClient#close()} at the end of <nl> - 	 * its usage. In other case, there may be resource leaks depending on the JobClient implementation. <nl> 
mmm HiveShimV120.java <nl> ppp HiveShimV120.java <nl> - 			Object dateStats = dateStatsClz.getDeclaredConstructor(long.class, long.class) <nl> - 					.newInstance(flinkDateColStats.getNullCount(), flinkDateColStats.getNdv()); <nl> + 			Object dateStats = dateStatsClz.getDeclaredConstructor().newInstance(); <nl> 
mmm KVStateRequestSerializerRocksDBTest.java <nl> ppp KVStateRequestSerializerRocksDBTest.java <nl> - import java.util.Map; <nl> - 		final InternalMapState<Long, VoidNamespace, Long, String, Map<Long, String>> mapState = <nl> - 				(InternalMapState<Long, VoidNamespace, Long, String, Map<Long, String>>) <nl> 
new file <nl> ppp DataSetJoin.java <nl> + package org.apache.flink.api.table.sql.calcite.node; <nl> + import org.apache.calcite.plan.RelOptCluster; <nl> + import org.apache.calcite.plan.RelTraitSet; <nl> + import org.apache.calcite.rel.BiRel; <nl> + import org.apache.calcite.rel.RelNode; <nl> + import org.apache.flink.api.common.functions.JoinFunction; <nl> 
mmm JobVertexAccumulatorsHandler.java <nl> ppp JobVertexAccumulatorsHandler.java <nl> + import org.apache.flink.runtime.rest.messages.job.UserAccumulator; <nl> - 		ArrayList<JobVertexAccumulatorsInfo.UserAccumulator> userAccumulatorList = new ArrayList<>(accs.length); <nl> + 		ArrayList<UserAccumulator> userAccumulatorList = new ArrayList<>(accs.length); <nl> 
new file <nl> ppp L6.java <nl> + package eu.stratosphere.pact.example.pigmix; <nl> + import java.util.Iterator; <nl> + import java.util.List; <nl> + import eu.stratosphere.pact.common.contract.FileDataSink; <nl> + import eu.stratosphere.pact.common.contract.FileDataSource; <nl> + import eu.stratosphere.pact.common.contract.MapContract; <nl> 
new file <nl> ppp StringPair.java <nl> + package eu.stratosphere.pact.runtime.test.util.types; <nl> + public class StringPair { <nl> + 	 <nl> + 	private String key; <nl> + 	private String value; <nl> + 	 <nl> + 	 <nl> + 	public StringPair() <nl> + 	{} <nl> + 	 <nl> + 	public StringPair(String key, String value) { <nl> 
mmm ExecutorDiscoveryAndJobClientTest.java <nl> ppp ExecutorDiscoveryAndJobClientTest.java <nl> - import org.apache.flink.core.execution.Executor; <nl> + import org.apache.flink.core.execution.PipelineExecutor; <nl> - 		public Executor getExecutor(Configuration configuration) { <nl> + 		public PipelineExecutor getExecutor(Configuration configuration) { <nl> 
mmm RecordOutputFormat.java <nl> ppp RecordOutputFormat.java <nl> + import java.io.BufferedOutputStream; <nl> + import java.io.OutputStreamWriter; <nl> + import java.io.Writer; <nl> - 	 <nl> + 	private Writer wrt; <nl> + 	 <nl> + 	private String fieldDelimiter; <nl> + 	 <nl> + 	private String recordDelimiter; <nl> 
mmm BooleanExpressionTest.java <nl> ppp BooleanExpressionTest.java <nl> - 	protected EvaluationContext context = new EvaluationContext(); <nl> + 	protected EvaluationContext context = new EvaluationContext(); <nl> new file <nl> ppp NumberCastingExpressionParameterizedTest.java <nl> + package eu.stratosphere.sopremo.expressions; <nl> 
mmm TaskManager.java <nl> ppp TaskManager.java <nl> - 		final InetAddress taskManagerAnnounceAddress = DiscoveryService.findLocalAddressOnSameNetwork(jobManagerAddress <nl> - 			.getAddress()); <nl> - 		final InetSocketAddress taskManagerBindAddress = new InetSocketAddress(DiscoveryService.getServiceAddress(), <nl> 
mmm OneInputStreamTaskTest.java <nl> ppp OneInputStreamTaskTest.java <nl> + 			null, <nl> + 			null, <nl> - 			new BroadcastPartitioner<Object>())); <nl> + 			new BroadcastPartitioner<Object>(), <nl> + 			null)); <nl> + 				null, <nl> mmm StreamTaskTestHarness.java <nl> ppp StreamTaskTestHarness.java <nl> - 		outEdgesInOrder.add(new StreamEdge(sourceVertexDummy, targetVertexDummy, 0, new LinkedList<String>(), new BroadcastPartitioner<Object>())); <nl> 
mmm UnsortedGrouping.java <nl> ppp UnsortedGrouping.java <nl> + import org.apache.flink.types.TypeInformation; <nl> + import org.apache.flink.api.java.typeutils.TypeExtractor; <nl> - 		return new GroupReduceOperator<T, R>(this, reducer); <nl> + 		TypeInformation<R> resultType = TypeExtractor.getGroupReduceReturnTypes(reducer, this.getDataSet().getType()); <nl> 
mmm FileInputSplitList.java <nl> ppp FileInputSplitList.java <nl> - 		public int compareTo(QueueElem o) { <nl> + 		public int compareTo(final QueueElem o) { <nl> - 				if (LOG.isDebugEnabled()) { <nl> - 					LOG.debug(instance + " receives input split with distance " + candidate.distance); <nl> + 				if (LOG.isInfoEnabled()) { <nl> 
deleted file <nl> mmm StringPair.java <nl> - package eu.stratosphere.pact.runtime.test.util.types; <nl> - public class StringPair { <nl> - 	 <nl> - 	private String key; <nl> - 	private String value; <nl> - 	 <nl> - 	 <nl> - 	public StringPair() <nl> - 	{} <nl> - 	 <nl> - 	public StringPair(String key, String value) { <nl> 
mmm Bucketer.java <nl> ppp Bucketer.java <nl> - * <p> <nl> - * The {@code BucketingSink} can be writing to many buckets at a time, and it is responsible for managing <nl> + * <nl> + * <p>The {@code BucketingSink} can be writing to many buckets at a time, and it is responsible for managing <nl> mmm NonRollingBucketer.java <nl> 
new file <nl> ppp SlotInfoWithUtilization.java <nl> + package org.apache.flink.runtime.jobmaster.slotpool; <nl> + import org.apache.flink.runtime.clusterframework.types.AllocationID; <nl> + import org.apache.flink.runtime.clusterframework.types.ResourceProfile; <nl> + import org.apache.flink.runtime.jobmaster.SlotInfo; <nl> 
mmm RetryOnFailureTest.java <nl> ppp RetryOnFailureTest.java <nl> mmm AbstractTestBase.java <nl> ppp AbstractTestBase.java <nl> - import com.google.common.base.Charsets; <nl> - import com.google.common.io.Files; <nl> + import org.apache.flink.runtime.akka.AkkaUtils; <nl> + import com.google.common.base.Charsets; <nl> 
mmm WindowJoinData.java <nl> ppp WindowJoinData.java <nl> - package org.apache.flink.streaming.test.exampleJavaPrograms.join; <nl> + package org.apache.flink.streaming.test.examples.join; <nl> - package org.apache.flink.streaming.test.exampleJavaPrograms.windowing; <nl> + package org.apache.flink.streaming.test.examples.windowing; <nl> 
mmm TextInputFormat.java <nl> ppp TextInputFormat.java <nl> - import java.io.IOException; <nl> - import java.nio.charset.Charset; <nl> + import java.io.IOException; <nl> + import java.nio.charset.Charset; <nl> - 	 <nl> - 	 <nl> - 	 <nl> - 	 <nl> - 	 <nl> - 	 <nl> - 	 <nl> - 	 <nl> - 	 <nl> - 		 <nl> - 	 <nl> - 		 <nl> 
mmm HeapListState.java <nl> ppp HeapListState.java <nl> - public class HeapListState<K, N, V> <nl> - 		extends AbstractHeapMergingState<K, N, V, List<V>, Iterable<V>, ListState<V>> <nl> - 		implements InternalListState<K, N, V> { <nl> + class HeapListState<K, N, V> <nl> + 	extends AbstractHeapMergingState<K, N, V, List<V>, Iterable<V>> <nl> 
mmm OperatorStateHandle.java <nl> ppp OperatorStateHandle.java <nl> mmm OperatorStateHandleTest.java <nl> ppp OperatorStateHandleTest.java <nl> - 		Assert.assertEquals(1, OperatorStateHandle.Mode.BROADCAST.ordinal()); <nl> + 		Assert.assertEquals(1, OperatorStateHandle.Mode.UNION.ordinal()); <nl> + 		Assert.assertEquals(2, OperatorStateHandle.Mode.BROADCAST.ordinal()); <nl> 
mmm FunctionAnnotation.java <nl> ppp FunctionAnnotation.java <nl> - * <p> <nl> - * All annotations take Strings with expressions that refer to (nested) value fields of the input and output types of a function. <nl> + * <nl> + * <p>All annotations take Strings with expressions that refer to (nested) value fields of the input and output types of a function. <nl> 
mmm CrossTask.java <nl> ppp CrossTask.java <nl> - 		try { <nl> - 		 <nl> - 			if (config.getLocalStrategy() == LocalStrategy.NESTEDLOOP_BLOCKED_OUTER_SECOND) { <nl> - 				try { <nl> - 					innerInput = new SpillingResettableIterator<KeyValuePair<Key, Value>>(memoryManager, ioManager, <nl> - 						innerReader, MEMORY_IO / 2, new KeyValuePairDeserializer<Key, Value>(stub.getFirstInKeyType(), stub <nl> 
mmm GifDecoder.java <nl> ppp GifDecoder.java <nl> - import android.support.annotation.IntRange; <nl> - import android.support.annotation.NonNull; <nl> - import android.support.annotation.Nullable; <nl> + import androidx.annotation.IntRange; <nl> + import androidx.annotation.NonNull; <nl> + import androidx.annotation.Nullable; <nl> 
mmm BluetoothClient.java <nl> ppp BluetoothClient.java <nl> + import com.inuker.bluetooth.library.connect.response.ConnectStatusListener; <nl> + @Override <nl> + public void registerConnectStatusListener(String mac, ConnectStatusListener listener) { <nl> + mClient.registerConnectStatusListener(mac, listener); <nl> 
deleted file <nl> mmm EmulatorView.java <nl> - package jackpal.androidterm; <nl> - import java.io.FileOutputStream; <nl> - import java.io.IOException; <nl> - import java.io.OutputStream; <nl> - import android.content.Context; <nl> - import android.content.res.Resources; <nl> - import android.graphics.Bitmap; <nl> 
mmm EelinkProtocolDecoderTest.java <nl> ppp EelinkProtocolDecoderTest.java <nl> + verifyAttribute(decoder, binary( <nl> + "676712003400e45c5b0ade02012e03702d87064546aa24066a1086018a0000002dc1a0ffffffff0afd074d000000000000000000000000fce0"), <nl> + Position.PREFIX_TEMP + 2, -50.0); <nl> mmm T55ProtocolDecoder.java <nl> 
mmm ProgressProtocolDecoder.java <nl> ppp ProgressProtocolDecoder.java <nl> - try { <nl> - protected Object decode( <nl> - ChannelHandlerContext ctx, Channel channel, Object msg) <nl> - throws Exception { <nl> + protected Object decode(ChannelHandlerContext ctx, Channel channel, Object msg) throws Exception { <nl> 
mmm SuntechProtocolDecoderTest.java <nl> ppp SuntechProtocolDecoderTest.java <nl> + verifyPosition(decoder, text( <nl> + "ST910;Location;560266;500;20161207;21:33:11;af910be101;-25.504234;-049.278003;000.080;000.00;1;10054889;70;1;1;1311;02;724;06;-317;3041;2;10;92")); <nl> new file <nl> ppp XexunProtocolEncoder.java <nl> 
mmm Notification.java <nl> ppp Notification.java <nl> + import java.util.HashSet; <nl> + import java.util.Set; <nl> + import org.traccar.database.QueryIgnore; <nl> + import com.fasterxml.jackson.annotation.JsonIgnore; <nl> - private boolean web; <nl> - public boolean getWeb() { <nl> - return web; <nl> - } <nl> 
mmm UproProtocolDecoderTest.java <nl> ppp UproProtocolDecoderTest.java <nl> + verifyPosition(decoder, buffer( <nl> + "*HQ200861810538000002,BA&A0206033302618209658563620115180119&B0100000040&C6328680=&F0039&R2710&V0036&T09&K50000&N04&P0200#")); <nl> new file <nl> ppp SatsolProtocol.java <nl> + package org.traccar.protocol; <nl> 
new file <nl> ppp CsvBuilder.java <nl> + package org.traccar.web; <nl> + import java.beans.Introspector; <nl> + import java.lang.reflect.InvocationTargetException; <nl> + import java.lang.reflect.Method; <nl> + import java.util.Arrays; <nl> + import java.util.Collection; <nl> + import java.util.Comparator; <nl> 
mmm ReportUtils.java <nl> ppp ReportUtils.java <nl> - private static boolean isMoving(ArrayList<Position> positions, int index, <nl> - TripsConfig tripsConfig, double speedThreshold) { <nl> + private static boolean isMoving(ArrayList<Position> positions, int index, TripsConfig tripsConfig) { <nl> - return positions.get(index).getSpeed() > speedThreshold; <nl> 
mmm SuntechProtocolDecoder.java <nl> ppp SuntechProtocolDecoder.java <nl> - position.set(Event.KEY_CELL, parser.next()); <nl> + position.set(Event.KEY_CID, parser.next()); <nl> mmm MeiligaoProtocolDecoder.java <nl> ppp MeiligaoProtocolDecoder.java <nl> - position.set(Event.KEY_CELL, parser.next()); <nl> + position.set(Event.KEY_CID, parser.next()); <nl> 
mmm GatorProtocolDecoder.java <nl> ppp GatorProtocolDecoder.java <nl> - package org.traccar.protocol; <nl> - import org.jboss.netty.buffer.ChannelBuffer; <nl> - import org.jboss.netty.channel.Channel; <nl> - import org.jboss.netty.channel.ChannelHandlerContext; <nl> - import org.jboss.netty.handler.codec.frame.FrameDecoder; <nl> 
mmm EventForwarder.java <nl> ppp EventForwarder.java <nl> - import com.fasterxml.jackson.core.JsonProcessingException; <nl> - import com.ning.http.client.AsyncHttpClient.BoundRequestBuilder; <nl> - import java.util.Collections; <nl> - import java.util.List; <nl> + import org.apache.commons.collections4.MultiValuedMap; <nl> 
deleted file <nl> mmm TripsConfig.java <nl> - package org.traccar.reports.model; <nl> - public class TripsConfig { <nl> - public TripsConfig() { <nl> - } <nl> - public TripsConfig(double minimalTripDistance, long minimalTripDuration, <nl> - long minimalParkingDuration, boolean greedyParking) { <nl> - this.minimalTripDistance = minimalTripDistance; <nl> 
deleted file <nl> mmm CommandResultEventHandler.java <nl> - package org.traccar.events; <nl> - import org.traccar.BaseEventHandler; <nl> - import org.traccar.model.Event; <nl> - import org.traccar.model.Position; <nl> - public class CommandResultEventHandler extends BaseEventHandler { <nl> - @Override <nl> - protected Event analizePosition(Position position) { <nl> 
mmm Context.java <nl> ppp Context.java <nl> + import org.traccar.database.BaseObjectManager; <nl> + import org.traccar.model.Attribute; <nl> + import org.traccar.model.BaseModel; <nl> + import org.traccar.model.Calendar; <nl> + import org.traccar.model.Device; <nl> + import org.traccar.model.Driver; <nl> + import org.traccar.model.Geofence; <nl> 
mmm Tk103ProtocolDecoderTest.java <nl> ppp Tk103ProtocolDecoderTest.java <nl> + verifyPosition(decoder, text( <nl> + "(358511020000026,DW5B,310,6,29876,30393,0,041217,102211)")); <nl> - "(087073005534BP00HSO")); <nl> + "(087073005534BP00HSO)")); <nl> - "(013632651491,ZC20,180716,144222,6,392,65535,255")); <nl> 
mmm CastelProtocolDecoder.java <nl> ppp CastelProtocolDecoder.java <nl> - import java.util.Date; <nl> mmm ServerManager.java <nl> ppp ServerManager.java <nl> - import java.sql.SQLException; <nl> mmm GpsMarkerProtocolDecoder.java <nl> ppp GpsMarkerProtocolDecoder.java <nl> - import org.jboss.netty.channel.Channel; <nl> 
mmm MiniFinderProtocolDecoderTest.java <nl> ppp MiniFinderProtocolDecoderTest.java <nl> - "!D,28/11/16,00:04:09,42.926067,-85.747589,124,236,140001,179.8,60,11,16,0")); <nl> + "!D,28/11/16,00:04:09,42.926067,-85.747589,124,236,140001,179.8,60,11,16,0;")); <nl> mmm GeocodeFarmGeocoder.java <nl> ppp GeocodeFarmGeocoder.java <nl> 
mmm WebDataHandler.java <nl> ppp WebDataHandler.java <nl> + import javax.ws.rs.core.HttpHeaders; <nl> + import javax.ws.rs.core.MediaType; <nl> + private final boolean urlVariables; <nl> + this.urlVariables = config.getBoolean(Keys.FORWARD_URL_VARIABLES); <nl> + private MediaType mediaType = MediaType.APPLICATION_JSON_TYPE; <nl> 
mmm MegastekProtocolDecoder.java <nl> ppp MegastekProtocolDecoder.java <nl> mmm MegastekProtocolDecoderTest.java <nl> ppp MegastekProtocolDecoderTest.java <nl> - verifyPosition(decoder, text( <nl> - "$MGV002,869152024446923,,S,290816,200627,V,5056.21059,N,00439.25034,E,00,00,00,99.9,,,-25.1,,206,01,0BBB,4418,28,,,,,,,,,01,093,Timer;")); <nl> 
mmm GoogleReverseGeocoder.java <nl> ppp GoogleReverseGeocoder.java <nl> + public GoogleReverseGeocoder(String key, int cacheSize) { <nl> + } <nl> mmm Gl200ProtocolDecoder.java <nl> ppp Gl200ProtocolDecoder.java <nl> + private static final Pattern PATTERN_IGN = new PatternBuilder() <nl> + .text("+").expression("(?:RESP|BUFF):GTIG[NF],") <nl> 
mmm TargetUrl.java <nl> ppp TargetUrl.java <nl> - package us.codecraft.webmagic.model; <nl> + package us.codecraft.webmagic.model.annotation; <nl> mmm HelpUrl.java <nl> ppp HelpUrl.java <nl> - package us.codecraft.webmagic.model; <nl> + package us.codecraft.webmagic.model.annotation; <nl> mmm ModelPipeline.java <nl> 
mmm DataFrameWriter.java <nl> ppp DataFrameWriter.java <nl> - public void csv(File file) { <nl> + public void csv(File file) throws IOException { <nl> mmm TimeDependentFilteringTest.java <nl> ppp TimeDependentFilteringTest.java <nl> + import org.junit.Assert; <nl> - throw new RuntimeException("There are no event dates"); <nl> 
mmm TimeColumn.java <nl> ppp TimeColumn.java <nl> + @Override <nl> + public Object[] asObjectArray() { <nl> + final LocalTime[] output = new LocalTime[data.size()]; <nl> + for (int i = 0; i < data.size(); i++) { <nl> + output[i] = get(i); <nl> + } <nl> + return output; <nl> + } <nl> mmm DateColumn.java <nl> ppp DateColumn.java <nl> 
mmm ExamplesTest.java <nl> ppp ExamplesTest.java <nl> - import tech.tablesaw.io.csv.CsvReader; <nl> + import tech.tablesaw.io.csv.CsvReadOptions; <nl> - table = CsvReader.read(types, "../data/BushApproval.csv"); <nl> + table = Table.read().csv(CsvReadOptions.builder("../data/BushApproval.csv").columnTypes(types)); <nl> 
mmm FloatColumn.java <nl> ppp FloatColumn.java <nl> - data.set(r, value); <nl> + data.add(r, value); <nl> mmm Table.java <nl> ppp Table.java <nl> mmm IntColumn.java <nl> ppp IntColumn.java <nl> - data.set(index, value); <nl> + data.add(index, value); <nl> mmm DateColumn.java <nl> ppp DateColumn.java <nl> - data.set(index, value); <nl> 
mmm Rows.java <nl> ppp Rows.java <nl> + public static void sortRows(IntArrayList rows, Table oldTable) { <nl> + for (int columnIndex = 0; columnIndex < oldTable.columnCount(); columnIndex++) { <nl> + oldTable.column(columnIndex).sortOn(rows); <nl> + } <nl> + } <nl> + private static void sort(IntArrayList rows, FloatColumn oldColumn) { <nl> 
new file <nl> ppp NumericReduceFunction.java <nl> + package com.github.lwhite1.tablesaw.aggregator; <nl> + import com.github.lwhite1.tablesaw.columns.Column; <nl> + public interface NumericReduceFunction { <nl> + String functionName(); <nl> + double reduce(Column data); <nl> + } <nl> mmm Table.java <nl> ppp Table.java <nl> 
mmm TaskRunnerConfigurer.java <nl> ppp TaskRunnerConfigurer.java <nl> - private String workerNamePrefix = "workflow-worker-"; <nl> + private String workerNamePrefix = "workflow-worker-%d"; <nl> mmm TestWorkflowExecutor.java <nl> ppp TestWorkflowExecutor.java <nl> - import static java.util.Comparator.comparingInt; <nl> 
mmm WorkflowTaskTypeConstraintTest.java <nl> ppp WorkflowTaskTypeConstraintTest.java <nl> - @Test <nl> - public void testWorkflowTaskTypeDoWhile() { <nl> - WorkflowTask workflowTask = createSampleWorkflowTask(); <nl> - workflowTask.setType("DO_WHILE"); <nl> - ConstraintMapping mapping = config.createConstraintMapping(); <nl> 
mmm ElasticSearchConfiguration.java <nl> ppp ElasticSearchConfiguration.java <nl> + String ELASTIC_SEARCH_TASK_LOG_RESULT_LIMIT = "tasklog.elasticsearch.query.size"; <nl> + int ELASTIC_SEARCH_TASK_LOG_RESULT_LIMIT_DEFAULT_VALUE = 10; <nl> + default int getElasticSearchTasklogLimit() <nl> + { <nl> + return getIntProperty(ELASTIC_SEARCH_TASK_LOG_RESULT_LIMIT, <nl> 
mmm CoreModule.java <nl> ppp CoreModule.java <nl> - import com.netflix.conductor.core.execution.mapper.DecisionTaskMapper; <nl> - import com.netflix.conductor.core.execution.mapper.DynamicTaskMapper; <nl> - import com.netflix.conductor.core.execution.mapper.EventTaskMapper; <nl> - import com.netflix.conductor.core.execution.mapper.ExclusiveJoinTaskMapper; <nl> 
new file <nl> ppp SystemPropertiesDynomiteConfiguration.java <nl> + package com.netflix.conductor.dyno; <nl> + import com.netflix.conductor.core.config.SystemPropertiesConfiguration; <nl> + public class SystemPropertiesDynomiteConfiguration extends SystemPropertiesConfiguration <nl> + implements DynomiteConfiguration {} <nl> 
mmm SystemTaskType.java <nl> ppp SystemTaskType.java <nl> - import com.netflix.conductor.core.execution.tasks.ExclusiveJoin; <nl> + import com.netflix.conductor.core.execution.tasks.ExclusiveJoin; <nl> + import com.netflix.conductor.core.execution.tasks.DoWhile; <nl> - 	DECISION(new Decision()), FORK(new Fork()), JOIN(new Join()), EXCLUSIVE_JOIN(new ExclusiveJoin()); <nl> 
mmm MySQLMetadataDAOTest.java <nl> ppp MySQLMetadataDAOTest.java <nl> + import com.netflix.conductor.common.metadata.events.EventHandler; <nl> + import com.netflix.conductor.common.metadata.tasks.TaskDef; <nl> + import com.netflix.conductor.common.metadata.workflow.WorkflowDef; <nl> + import com.netflix.conductor.core.execution.ApplicationException; <nl> 
mmm AdminService.java <nl> ppp AdminService.java <nl> - Integer start, Integer count); <nl> + @NotNull Integer start, @NotNull Integer count); <nl> mmm TaskServiceTest.java <nl> ppp TaskServiceTest.java <nl> - import static org.junit.Assert.assertNotNull; <nl> - assertEquals(1, ex.getConstraintViolations().size()); <nl> 
new file <nl> ppp RetryUtil.java <nl> + package com.netflix.conductor.common.utils; <nl> + import com.github.rholder.retry.Attempt; <nl> + import com.github.rholder.retry.BlockStrategies; <nl> + import com.github.rholder.retry.RetryException; <nl> + import com.github.rholder.retry.RetryListener; <nl> + import com.github.rholder.retry.Retryer; <nl> 
new file <nl> ppp RedisSentinelJedisProvider.java <nl> + package com.netflix.conductor.jedis; <nl> + import com.netflix.conductor.dyno.DynomiteConfiguration; <nl> + import com.netflix.dyno.connectionpool.Host; <nl> + import com.netflix.dyno.connectionpool.HostSupplier; <nl> + import org.apache.commons.pool2.impl.GenericObjectPoolConfig; <nl> 
deleted file <nl> mmm NatsModule.java <nl> - package com.netflix.conductor.contribs; <nl> - import com.google.inject.AbstractModule; <nl> - import com.netflix.conductor.core.events.nats.NATSEventQueueProvider; <nl> - import org.slf4j.Logger; <nl> - import org.slf4j.LoggerFactory; <nl> - public class NatsModule extends AbstractModule { <nl> 
mmm WorkflowClient.java <nl> ppp WorkflowClient.java <nl> - 	public void runDecider(String workflowName) { <nl> - 		put("workflow/decide/{workflowName}", null, workflowName); <nl> + 	public void runDecider(String workflowId) { <nl> + 		put("workflow/decide/{workflowId}", null, null, workflowId); <nl> mmm DynoQueueDAO.java <nl> 
mmm MySQLQueueDAO.java <nl> ppp MySQLQueueDAO.java <nl> - @Override <nl> - public boolean exists(String queueName, String messageId) { <nl> - return getWithRetriedTransactions(tx -> existsMessage(tx, queueName, messageId)); <nl> - } <nl> mmm TestHttpTask.java <nl> ppp TestHttpTask.java <nl> + import static org.junit.Assert.assertEquals; <nl> 
mmm ElasticSearchModule.java <nl> ppp ElasticSearchModule.java <nl> mmm ElasticSearchV6Module.java <nl> ppp ElasticSearchV6Module.java <nl> mmm EmbeddedElasticSearchV5.java <nl> ppp EmbeddedElasticSearchV5.java <nl> + import static java.util.Collections.singletonList; <nl> + import java.io.File; <nl> + import java.io.IOException; <nl> 
new file <nl> ppp AdHocTests.java <nl> + package demo; <nl> + import org.junit.Ignore; <nl> + import org.junit.runner.RunWith; <nl> + import org.junit.runners.Suite; <nl> + import org.junit.runners.Suite.SuiteClasses; <nl> + @RunWith(Suite.class) <nl> + @SuiteClasses({ <nl> + 	RefreshTokenSupportTests.class, <nl> 
mmm TestAuthorizationCodeProvider.java <nl> ppp TestAuthorizationCodeProvider.java <nl> mmm ImplicitTokenGranter.java <nl> ppp ImplicitTokenGranter.java <nl> - 		OAuth2Request storedOAuth2Request = getRequestFactory().createStoredTokenRequest(clientToken); <nl> + 		OAuth2Request storedOAuth2Request = getRequestFactory().createOAuth2Request(clientToken); <nl> 
new file <nl> ppp OAuth2ExceptionJackson2Serializer.java <nl> + package org.springframework.security.oauth2.common.exceptions; <nl> + import com.fasterxml.jackson.core.JsonGenerationException; <nl> + import com.fasterxml.jackson.core.JsonGenerator; <nl> + import com.fasterxml.jackson.databind.SerializerProvider; <nl> 
new file <nl> ppp InMemoryClientDetailsServiceBuilder.java <nl> + package org.springframework.security.oauth2.config.annotation.builders; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + import org.springframework.security.oauth2.provider.ClientDetails; <nl> + import org.springframework.security.oauth2.provider.ClientDetailsService; <nl> 
mmm AbstractTokenGranter.java <nl> ppp AbstractTokenGranter.java <nl> - import org.springframework.security.authentication.encoding.PasswordEncoder; <nl> - 	public void setPasswordEncoder(PasswordEncoder passwordEncoder) { <nl> - 		clientCredentialsChecker.setPasswordEncoder(passwordEncoder); <nl> - 	} <nl> 
mmm Instant.java <nl> ppp Instant.java <nl> + import org.joda.time.format.DateTimeFormatter; <nl> + import org.joda.time.format.ISODateTimeFormat; <nl> + public static Instant parse(String str) { <nl> + return parse(str, ISODateTimeFormat.dateTimeParser()); <nl> + } <nl> + public static Instant parse(String str, DateTimeFormatter formatter) { <nl> 
mmm SkipDateTimeField.java <nl> ppp SkipDateTimeField.java <nl> - (DateTimeFieldType.year(), new Integer(value), null, null); <nl> + (DateTimeFieldType.year(), Integer.valueOf(value), null, null); <nl> mmm JulianChronology.java <nl> ppp JulianChronology.java <nl> - (DateTimeFieldType.year(), new Integer(year), null, null); <nl> 
mmm TestGJDayOfYearField.java <nl> ppp TestGJDayOfYearField.java <nl> + boolean isLeapDay(long instant) { <nl> + return false; <nl> + } <nl> mmm TestCopticChronology.java <nl> ppp TestCopticChronology.java <nl> 
mmm TestFieldUtils.java <nl> ppp TestFieldUtils.java <nl> - public void testSafeDivideLongLong() { <nl> - assertEquals(1L, FieldUtils.safeDivide(1L, 1L)); <nl> - assertEquals(1L, FieldUtils.safeDivide(3L, 3L)); <nl> - assertEquals(0L, FieldUtils.safeDivide(1L, 3L)); <nl> - assertEquals(3L, FieldUtils.safeDivide(3L, 1L)); <nl> 
deleted file <nl> mmm RequestTest.java <nl> - package com.android.volley.toolbox; <nl> - import com.android.volley.*; <nl> - import org.junit.Test; <nl> - import org.junit.runner.RunWith; <nl> - import org.robolectric.RobolectricTestRunner; <nl> - import static org.junit.Assert.assertNotNull; <nl> - @RunWith(RobolectricTestRunner.class) <nl> 
mmm AllTests.java <nl> ppp AllTests.java <nl> - package com.dianping.cat.home; <nl> + package com.dianping.cat; <nl> - import com.dianping.cat.home.abtest.conditions.TrafficFilterCodeGenerationTest; <nl> - import com.dianping.cat.home.abtest.conditions.TrafficFilterTest; <nl> - import com.dianping.cat.home.abtest.groupstrategy.GroupStrategyParserTest; <nl> 
mmm Model.java <nl> ppp Model.java <nl> - 	 <nl> + 	private List<String> m_graphTypes; <nl> + 	private String m_graph; <nl> + 	 <nl> - 	return m_dateType; <nl> - } <nl> + 		return m_dateType; <nl> + 	} <nl> - 	m_dateType = dateType; <nl> - } <nl> + 		m_dateType = dateType; <nl> + 	} <nl> - 	return m_queryDate; <nl> 
mmm RouterConfigManager.java <nl> ppp RouterConfigManager.java <nl> - 	public void refreshRouterConfig() throws DalException, SAXException, IOException { <nl> + 	public void refreshConfig() throws DalException, SAXException, IOException { <nl> mmm ComponentsConfigurator.java <nl> ppp ComponentsConfigurator.java <nl> 
mmm ComponentsConfigurator.java <nl> ppp ComponentsConfigurator.java <nl> - import com.dianping.cat.system.config.TagManager; <nl> - 		      ProductLineConfigManager.class, MetricGroupConfigManager.class, AlertInfo.class, ProjectService.class, <nl> - 		      TagManager.class)); <nl> + 		      ProductLineConfigManager.class, MetricGroupConfigManager.class, AlertInfo.class, ProjectService.class)); <nl> 
mmm HistoricalProblemService.java <nl> ppp HistoricalProblemService.java <nl> + import com.dianping.cat.storage.Bucket; <nl> + import com.dianping.cat.storage.BucketManager; <nl> + 	@Inject <nl> + 	private BucketManager m_bucketManager; <nl> - 		List<Report> reports = m_reportDao.findAllByPeriodDomainTypeName(new Date(date), domain, 1, getName(), <nl> 
mmm MetricGraphCreator.java <nl> ppp MetricGraphCreator.java <nl> - 			lineChart.setUnit("Value/分钟"); <nl> + 	 <nl> + 	private String queryMetricItemDes(String type) { <nl> + 		String des = ""; <nl> + 		if (MetricType.AVG.name().equals(type)) { <nl> + 			des = Chinese.Suffix_AVG; <nl> + 		} else if (MetricType.SUM.name().equals(type)) { <nl> 
new file <nl> ppp ABTestContextTest.java <nl> + package com.dianping.cat.abtest.spi.internal; <nl> + public class ABTestContextTest { <nl> + } <nl> mmm ProblemReportAllBuilderTest.java <nl> ppp ProblemReportAllBuilderTest.java <nl> - 		Assert.assertEquals(expected, report.toString()); <nl> + 		Assert.assertEquals(expected.replaceAll("\r", ""), report.toString().replaceAll("\r", "")); <nl> 
mmm InstallMojo.java <nl> ppp InstallMojo.java <nl> - 		m_jdbcUrl = PropertyProviders.fromConsole().forString("jdbc.url", "Please input jdbc url:", null, <nl> - 			      @Override <nl> - 			      public boolean validate(String url) { <nl> - 					      return true; <nl> - 				      } else { <nl> - 					      return false; <nl> 
mmm StateDelegate.java <nl> ppp StateDelegate.java <nl> - 		m_taskManager.createTask(startTime, domain, Constants.HIGH_LOAD_SQL, TaskProlicy.DAILY); <nl> + 			m_taskManager.createTask(startTime, domain, Constants.HIGH_LOAD_SQL, TaskProlicy.DAILY); <nl> mmm AppDataQueue.java <nl> ppp AppDataQueue.java <nl> 
mmm BaseRemoteModelService.java <nl> ppp BaseRemoteModelService.java <nl> - public abstract class BaseRemoteModelService<T> implements ModelService<T> { <nl> + public abstract class BaseRemoteModelService<T> extends ModelServiceWithCalSupport implements ModelService<T> { <nl> - 		Transaction t = cat.newTransaction("RemoteModel", m_name); <nl> 
mmm Bucket.java <nl> ppp Bucket.java <nl> + import java.util.List; <nl> + 	List<String> findAllById(String id) throws IOException; <nl> mmm ProblemAnalyzer.java <nl> ppp ProblemAnalyzer.java <nl> + 			Transaction t = Cat.getProducer().newTransaction("MessageProcess", getClass().getSimpleName()); <nl> + 			t.setStatus(Message.SUCCESS); <nl> 
new file <nl> ppp JspFile.java <nl> + package com.dianping.cat.report.page.summary; <nl> + public enum JspFile { <nl> + 	VIEW("/jsp/report/summary/summary_view.jsp"), <nl> + 	; <nl> + 	private String m_path; <nl> + 	private JspFile(String path) { <nl> + 		m_path = path; <nl> + 	} <nl> + 	public String getPath() { <nl> 
mmm LocalIpService.java <nl> ppp LocalIpService.java <nl> - import java.util.ArrayList; <nl> - import java.util.Collections; <nl> - import java.util.Comparator; <nl> - import java.util.List; <nl> - import java.util.Map; <nl> - import java.util.Set; <nl> - import com.dianping.cat.consumer.RealtimeConsumer; <nl> 
mmm CrossInfoTest.java <nl> ppp CrossInfoTest.java <nl> - 		analyzer.setCrossAppSwitch(new CrossAppSwitch().setTurnOn(true)); <nl> + 		analyzer.setCrossAppSwitch(new CrossAppSwitch(true)); <nl> - 		analyzer.setCrossAppSwitch(new CrossAppSwitch().setTurnOn(true)); <nl> + 		analyzer.setCrossAppSwitch(new CrossAppSwitch(true)); <nl> 
mmm PreparedStatementTest.java <nl> ppp PreparedStatementTest.java <nl> - import java.sql.DriverManager; <nl> - import java.sql.ResultSetMetaData; <nl> - import java.util.Properties; <nl> - import org.junit.runner.RunWith; <nl> - import org.junit.runners.JUnit4; <nl> - import com.site.lookup.ComponentTestCase; <nl> 
mmm Action.java <nl> ppp Action.java <nl> - 	DOMAIN_GROUP_CONFIG_UPDATE("domainGroupConfigUpdate"), <nl> - 	 <nl> - 	METRIC_GROUP_CONFIG_UPDATE("metricGroupConfigUpdate"),; <nl> + 	DOMAIN_GROUP_CONFIG_UPDATE("domainGroupConfigUpdate"),; <nl> mmm JspViewer.java <nl> ppp JspViewer.java <nl> - 		case METRIC_GROUP_CONFIG_UPDATE: <nl> 
mmm Handler.java <nl> ppp Handler.java <nl> + import org.unidal.lookup.util.StringUtils; <nl> + import com.dianping.cat.broker.api.page.Constrants; <nl> - 		 <nl> - 			Cat.logEvent("Ip", "hit", Event.SUCCESS, userIp); <nl> + 			String errorCode = payload.getErrorCode(); <nl> + 			String httpStatus = payload.getHttpStatus(); <nl> 
mmm BusinessContactor.java <nl> ppp BusinessContactor.java <nl> - public class BusinessContactor extends ProductlineContactor { <nl> + public class BusinessContactor extends ProjectContactor { <nl> mmm TimeHelper.java <nl> ppp TimeHelper.java <nl> - 	public static Date getCurrentDay(long timestamp) { <nl> - 		return getCurrentDay(timestamp, 0); <nl> 
mmm ConfigTest.java <nl> ppp ConfigTest.java <nl> - import javax.xml.transform.stream.StreamSource; <nl> - import javax.xml.validation.Schema; <nl> - import javax.xml.validation.SchemaFactory; <nl> - import javax.xml.validation.Validator; <nl> - import org.junit.Ignore; <nl> - import com.dianping.cat.configuration.client.IEntity; <nl> 
mmm ProblemReportBuilder.java <nl> ppp ProblemReportBuilder.java <nl> + import com.site.lookup.annotation.Inject; <nl> - 	private ProblemGraphCreator m_problemGraphCreator = new ProblemGraphCreator(); <nl> + 	@Inject <nl> + 	private ProblemGraphCreator m_problemGraphCreator; <nl> - 	private ProblemMerger m_problemMerger = new ProblemMerger(); <nl> 
mmm DataExtractor.java <nl> ppp DataExtractor.java <nl> - package com.dianping.cat.report.page.metric.chart; <nl> + package com.dianping.cat.report.chart; <nl> mmm CachedMetricReportService.java <nl> ppp CachedMetricReportService.java <nl> - package com.dianping.cat.report.page.metric.chart; <nl> + package com.dianping.cat.report.chart; <nl> 
mmm DefaultTaskConsumer.java <nl> ppp DefaultTaskConsumer.java <nl> - 	private CatReportFacade reportFacade; <nl> + 	private ReportFacade reportFacade; <nl> mmm DumpUploader.java <nl> ppp DumpUploader.java <nl> - 					e.printStackTrace(); <nl> mmm CatTestCase.java <nl> ppp CatTestCase.java <nl> - 				e.printStackTrace(); <nl> 
mmm Handler.java <nl> ppp Handler.java <nl> - import java.util.List; <nl> - import java.util.Map; <nl> + import java.util.Date; <nl> - import org.unidal.dal.jdbc.DalException; <nl> - import com.dianping.cat.Cat; <nl> + import com.dianping.cat.helper.TimeHelper; <nl> + import com.dianping.cat.home.highload.entity.HighloadReport; <nl> 
mmm Handler.java <nl> ppp Handler.java <nl> - import com.dianping.cat.system.config.BugConfigManager; <nl> + import com.dianping.cat.system.config.BugConfigManager; <nl> + import com.dianping.cat.system.config.DomainMetricRuleConfigManager; <nl> - import com.dianping.cat.system.config.MetricRuleConfigManager; <nl> 
mmm JspFile.java <nl> ppp JspFile.java <nl> - 	GRAPHS("/jsp/report/transaction_graphs.jsp"), <nl> - 	 <nl> - 	GRAPH("/jsp/report/transaction_graph.jsp"), <nl> - 	; <nl> + 	GRAPHS("/jsp/report/transaction_graphs.jsp"); <nl> new file <nl> ppp HistoricalEventService.java <nl> + package com.dianping.cat.report.page.model.event; <nl> 
deleted file <nl> mmm DefaultDecorator.java <nl> - package com.dianping.cat.report.task.alert.sender.decorator; <nl> - import java.text.DateFormat; <nl> - import java.text.SimpleDateFormat; <nl> - import com.dianping.cat.report.task.alert.sender.AlertEntity; <nl> - public abstract class DefaultDecorator implements Decorator { <nl> 
mmm Handler.java <nl> ppp Handler.java <nl> + import javax.servlet.http.HttpServletRequest; <nl> + import org.codehaus.plexus.logging.LogEnabled; <nl> + import org.codehaus.plexus.logging.Logger; <nl> - public class Handler implements PageHandler<Context> { <nl> + public class Handler implements PageHandler<Context>, LogEnabled { <nl> 
mmm Handler.java <nl> ppp Handler.java <nl> + 		case PROJECT_UPDATE: <nl> + 		case THIRD_PARTY_CONFIG_UPDATE: <nl> - 		case THIRD_PARTY_RULE_CONFIGS: <nl> - 		case THIRD_PARTY_RULE_UPDATE: <nl> - 		case THIRD_PARTY_RULE_SUBMIT: <nl> - 		case THIRD_PARTY_RULE_DELETE: <nl> mmm JspFile.java <nl> ppp JspFile.java <nl> 
new file <nl> ppp MessageTreeInputFormat.java <nl> + package com.dianping.cat.job.mapreduce; <nl> + import java.io.IOException; <nl> + import org.apache.hadoop.fs.Path; <nl> + import org.apache.hadoop.io.LongWritable; <nl> + import org.apache.hadoop.mapreduce.InputSplit; <nl> + import org.apache.hadoop.mapreduce.JobContext; <nl> 
mmm InstallMojo.java <nl> ppp InstallMojo.java <nl> - 		if (!path.exists()) { <nl> - 			path.mkdirs(); <nl> - 			logPath.mkdirs(); <nl> + 		File temp = null; <nl> + 		try { <nl> + 			temp = File.createTempFile("test", "test"); <nl> + 		} catch (IOException e1) { <nl> + 			getLog().error("Don't have privilege to read/write temp dir, please manually promote read/write privileges to this directory."); <nl> 
new file <nl> ppp JspViewer.java <nl> + package com.dianping.cat.report.page.pushError; <nl> + import com.dianping.cat.report.ReportPage; <nl> + import org.unidal.web.mvc.view.BaseJspViewer; <nl> + public class JspViewer extends BaseJspViewer<ReportPage, Action, Context, Model> { <nl> + 	@Override <nl> + 	protected String getJspFilePath(Context ctx, Model model) { <nl> 
mmm NetGraphBuilder.java <nl> ppp NetGraphBuilder.java <nl> - 	public NetGraphSet buildGraphSet(Map<String, MetricReport> reports) { <nl> + 	public NetGraphSet buildSet(Map<String, MetricReport> reportSet) { <nl> - 					try { <nl> - 						double insum = 0; <nl> - 						double outsum = 0; <nl> - 						for (Interface inter : connection.getInterfaces()) { <nl> 
mmm TaskComponentConfigurator.java <nl> ppp TaskComponentConfigurator.java <nl> + import com.dianping.cat.report.task.browser.BrowserReportBuilder; <nl> - 		all.add(C(CrossReportBuilder.class).req(ReportService.class)); <nl> + 		all.add(C(BrowserReportBuilder.class).req(ReportService.class)); <nl> - 		            HeavyReportBuilder.class, UtilizationReportBuilder.class, ABTestReportBuilder.class)); <nl> 
new file <nl> ppp Sorter.java <nl> + package com.dianping.cat.report.page.app; <nl> + import java.util.Comparator; <nl> + import com.dianping.cat.config.app.AppDataService; <nl> + import com.dianping.cat.config.app.AppDataSpreadInfo; <nl> + public class Sorter { <nl> + 	private String m_sortBy; <nl> + 	public Sorter(String sortBy) { <nl> 
mmm AbstractSender.java <nl> ppp AbstractSender.java <nl> - import com.dianping.cat.Cat; <nl> - import com.dianping.cat.alarm.spi.config.SenderConfigManager; <nl> - import org.codehaus.plexus.logging.LogEnabled; <nl> - import org.codehaus.plexus.logging.Logger; <nl> - import org.unidal.helper.Files; <nl> - import org.unidal.lookup.annotation.Inject; <nl> 
deleted file <nl> mmm BaseReportTool.java <nl> - package com.dianping.cat.report.tool; <nl> - import java.text.ParseException; <nl> - import java.util.Date; <nl> - public class BaseReportTool { <nl> - 	public static String getReportIndex(long currentHourStart, long computeStart) { <nl> - 		if (computeStart == currentHourStart) { <nl> 
mmm AlertInfo.java <nl> ppp AlertInfo.java <nl> + import com.dianping.cat.advanced.metric.config.entity.MetricItemConfig; <nl> - 	private ConcurrentHashMap<String, Long> m_alertInfos = new ConcurrentHashMap<String, Long>(); <nl> + 	private ConcurrentHashMap<MetricItemConfig, Long> m_alertInfos = new ConcurrentHashMap<MetricItemConfig, Long>(); <nl> 
mmm EventListener.java <nl> ppp EventListener.java <nl> + 	public boolean isEligible(T event); <nl> new file <nl> ppp SmsEvent.java <nl> + package com.dianping.dog.alarm.notification; <nl> + import java.util.List; <nl> + public interface SmsEvent { <nl> + 	public String getContent(); <nl> + 	public List<String> getPhoneNumbers(); <nl> 
mmm ComponentsConfigurator.java <nl> ppp ComponentsConfigurator.java <nl> - 		all.add(C(MessageIdFactory.class)); <nl> + 		      .req(MessageManager.class, MessageIdFactory.class)); <nl> mmm MessageIdFactoryTest.java <nl> ppp MessageIdFactoryTest.java <nl> - import com.dianping.cat.configuration.model.entity.Config; <nl> 
mmm DatabaseAlert.java <nl> ppp DatabaseAlert.java <nl> + import java.util.HashMap; <nl> + import org.codehaus.plexus.logging.LogEnabled; <nl> + import org.codehaus.plexus.logging.Logger; <nl> + import org.unidal.helper.Threads.Task; <nl> + import com.dianping.cat.Cat; <nl> + import com.dianping.cat.consumer.metric.model.entity.MetricReport; <nl> 
mmm BaseAlert.java <nl> ppp BaseAlert.java <nl> - import com.dianping.cat.home.rule.entity.Condition; <nl> - import com.dianping.cat.home.rule.entity.Config; <nl> + import com.dianping.cat.home.monitorrules.entity.Condition; <nl> + import com.dianping.cat.home.monitorrules.entity.Config; <nl> mmm NetworkRuleConfigManager.java <nl> 
new file <nl> ppp RemoteIdAnalyzer.java <nl> + package com.dianping.cat.consumer.remote; <nl> + import java.util.Collections; <nl> + import java.util.Date; <nl> + import java.util.Set; <nl> + import org.codehaus.plexus.logging.LogEnabled; <nl> + import org.codehaus.plexus.logging.Logger; <nl> + import org.codehaus.plexus.personality.plexus.lifecycle.phase.Initializable; <nl> 
mmm Action.java <nl> ppp Action.java <nl> - 	METRIC_CONFIG_DELETE("metricConfigDelete") <nl> + 	METRIC_CONFIG_DELETE("metricConfigDelete"), <nl> + 	 <nl> + 	EXCEPTION_THRESHOLDS("exceptionThresholds"), <nl> + 	 <nl> + 	EXCEPTION_THRESHOLD_UPDATE("exceptionThresholdUpdate"), <nl> + 	 <nl> + 	EXCEPTION_THRESHOLD_UPDATE_SUBMIT("exceptionThresholdUpdateSubmit"), <nl> 
mmm MergeAllName.java <nl> ppp MergeAllName.java <nl> + 	public Integer m_currentDuration; <nl> new file <nl> ppp CatHttpUtil.java <nl> + package com.dianping.cat.report.page.dashboard; <nl> + import java.io.InputStream; <nl> + import java.net.HttpURLConnection; <nl> + import java.net.URL; <nl> + import java.util.HashMap; <nl> 
new file <nl> ppp SampleDB2.java <nl> + package com.dianping.bee.engine.spi.impl; <nl> + import java.sql.SQLException; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + import org.apache.commons.lang3.RandomStringUtils; <nl> + import com.alibaba.cobar.Fields; <nl> + import com.alibaba.cobar.parser.ast.expression.primary.Identifier; <nl> 
mmm QueryService.java <nl> ppp QueryService.java <nl> mmm CountEvaluator.java <nl> ppp CountEvaluator.java <nl> + import java.util.HashSet; <nl> + import java.util.Set; <nl> + import com.alibaba.cobar.parser.ast.expression.Expression; <nl> + import com.alibaba.cobar.parser.ast.expression.primary.Wildcard; <nl> 
mmm CommandUtils.java <nl> ppp CommandUtils.java <nl> - public class Utils { <nl> + public class CommandUtils { <nl> - 	public static List<String> runShell(String cmd) throws Exception { <nl> + 	public List<String> runShell(String cmd) throws Exception { <nl> mmm MessageIdFactory.java <nl> ppp MessageIdFactory.java <nl> 
deleted file <nl> mmm SystemReportStatisticsTest.java <nl> - package com.dianping.cat.report.task.system; <nl> - import java.text.SimpleDateFormat; <nl> - import java.util.Arrays; <nl> - import java.util.List; <nl> - import org.junit.Assert; <nl> - import org.junit.Test; <nl> - import org.unidal.helper.Files; <nl> 
mmm SystemGraphCreator.java <nl> ppp SystemGraphCreator.java <nl> + 		String type = filterType(pars); <nl> - 		String type = pars.get("type"); <nl> + 	private String filterType(Map<String, String> pars) { <nl> + 		String type = pars.get("type"); <nl> + 		if (PAAS_SYSTEM.equals(type)) { <nl> + 			type = SYSTEM_TYPE; <nl> 
mmm HdfsMessageBucketManager.java <nl> ppp HdfsMessageBucketManager.java <nl> - 		if (m_serverConfigManager.isHdfsOn() && !m_serverConfigManager.isLocalMode()) { <nl> + 		if (m_serverConfigManager.isHdfsOn()) { <nl> mmm ServerConfigManager.java <nl> ppp ServerConfigManager.java <nl> + 		m_logger.info("CAT server is running with hdfs," + isHdfsOn()); <nl> 
mmm NetGraphBuilder.java <nl> ppp NetGraphBuilder.java <nl> - 						double inDiscardsSum = 0; <nl> - 						double outDiscardsSum = 0; <nl> - 						double inErrorsSum = 0; <nl> - 						double outErrorsSum = 0; <nl> - 							inDiscardsSum += inter.getIndiscards(); <nl> - 							outDiscardsSum += inter.getOutdiscards(); <nl> 
mmm Handler.java <nl> ppp Handler.java <nl> + import java.util.ArrayList; <nl> + import java.util.Collection; <nl> + import java.util.Collections; <nl> + import java.util.Comparator; <nl> + import java.util.Date; <nl> + import java.util.HashSet; <nl> + import java.util.LinkedHashMap; <nl> + import java.util.List; <nl> 
mmm InstallMojo.java <nl> ppp InstallMojo.java <nl> - 		m_password = PropertyProviders.fromConsole().forString("jdbc.password", "Please input password:", null, null, <nl> + 		m_password = PropertyProviders.fromConsole().forString("jdbc.password", "Please input password:", null, "", <nl> mmm TopologyGraphTest.java <nl> 
mmm AlertConfig.java <nl> ppp AlertConfig.java <nl> + 		 <nl> - 		return phones; <nl> - 	} <nl> - 	public List<String> buildExceptionSMSReceivers(ProductLine productLine) { <nl> - 		List<String> phones = new ArrayList<String>(); <nl> mmm CatHomeModule.java <nl> ppp CatHomeModule.java <nl> + 		ExceptionAlert exceptionAlert = ctx.lookup(ExceptionAlert.class); <nl> 
new file <nl> ppp ModelResponseTest.java <nl> + package com.dianping.cat.service; <nl> + import org.junit.Test; <nl> + import junit.framework.Assert; <nl> + public class ModelResponseTest { <nl> + 	@Test <nl> + 	public void test(){ <nl> + 		ModelResponse<String> response = new ModelResponse<String>(); <nl> + 		String model = "model"; <nl> 
mmm ProductLineConfigManager.java <nl> ppp ProductLineConfigManager.java <nl> - 	public void refreshConfig() throws DalException, SAXException, IOException { <nl> + 	public void refreshProductLineConfig() throws DalException, SAXException, IOException { <nl> mmm ConfigReloadTask.java <nl> ppp ConfigReloadTask.java <nl> 
mmm Handler.java <nl> ppp Handler.java <nl> - import java.util.HashSet; <nl> - import java.util.Set; <nl> - import com.dainping.cat.consumer.dal.report.Report; <nl> - import com.dainping.cat.consumer.dal.report.ReportDao; <nl> - import com.dainping.cat.consumer.dal.report.ReportEntity; <nl> - import com.dianping.cat.consumer.transaction.model.transform.DefaultSaxParser; <nl> 
mmm HeartbeatDailyMerger.java <nl> ppp HeartbeatDailyMerger.java <nl> + import com.dianping.cat.helper.TimeHelper; <nl> - 	private int m_mergedReportIndex = -1; <nl> + 	private long m_currentDay; <nl> - 	public HeartbeatDailyMerger(HeartbeatReport heartbeatReport) { <nl> + 	private int m_hourIndex; <nl> + 	public HeartbeatDailyMerger(HeartbeatReport heartbeatReport, long currentDay) { <nl> 
new file <nl> ppp ActivityConfigManager.java <nl> + package com.dianping.cat.system.config; <nl> + import org.codehaus.plexus.personality.plexus.lifecycle.phase.Initializable; <nl> + import org.codehaus.plexus.personality.plexus.lifecycle.phase.InitializationException; <nl> + import org.unidal.dal.jdbc.DalNotFoundException; <nl> 
mmm TcpSocketSender.java <nl> ppp TcpSocketSender.java <nl> + 					 <nl> + 					 <nl> mmm ThirdpartyDecorator.java <nl> ppp ThirdpartyDecorator.java <nl> - import java.text.DateFormat; <nl> - import java.text.SimpleDateFormat; <nl> - 	private DateFormat m_format = new SimpleDateFormat("yyyyMMddHH"); <nl> mmm IpService.java <nl> 
mmm NetworkAlert.java <nl> ppp NetworkAlert.java <nl> + import java.util.HashMap; <nl> + import org.codehaus.plexus.logging.LogEnabled; <nl> + import org.codehaus.plexus.logging.Logger; <nl> + import org.unidal.helper.Threads.Task; <nl> + import com.dianping.cat.Cat; <nl> + import com.dianping.cat.consumer.metric.model.entity.MetricReport; <nl> 
mmm DatabaseAlert.java <nl> ppp DatabaseAlert.java <nl> - import java.util.HashMap; <nl> - import org.codehaus.plexus.logging.LogEnabled; <nl> - import org.codehaus.plexus.logging.Logger; <nl> - import org.unidal.helper.Threads.Task; <nl> - import com.dianping.cat.Cat; <nl> - import com.dianping.cat.consumer.metric.model.entity.MetricReport; <nl> 
mmm MonitorManager.java <nl> ppp MonitorManager.java <nl> + 		if ("200".equals(httpStatus)) { <nl> + 			String key = city + ":" + channel + ":" + Monitor.HIT; <nl> - 		String hitKey = city + ":" + channel + ":" + Monitor.HIT; <nl> - 		logMetricForCount(timestamp, group, hitKey, count); <nl> - 		if (!"200".equals(httpStatus)) { <nl> 
mmm MatrixAnalyzer.java <nl> ppp MatrixAnalyzer.java <nl> - 	public void doCheckpoint(boolean atEnd) { <nl> + 	public synchronized void doCheckpoint(boolean atEnd) { <nl> mmm DefaultReportManager.java <nl> ppp DefaultReportManager.java <nl> - 						storFile(reports, bucket); <nl> + 						storeFile(reports, bucket); <nl> 
mmm AlertConfig.java <nl> ppp AlertConfig.java <nl> + import com.dianping.cat.home.monitorrules.entity.Condition; <nl> + import com.dianping.cat.home.monitorrules.entity.Config; <nl> + import com.dianping.cat.home.monitorrules.entity.Subcondition; <nl> + 	private static final Long ONE_MINUTE_MILLSEC = 60000L; <nl> 
mmm StatisticsComputer.java <nl> ppp StatisticsComputer.java <nl> - public class MeanSquareDeviationComputer extends BaseVisitor { <nl> + public class StatisticsComputer extends BaseVisitor { <nl> mmm DefaultMessagePathBuilder.java <nl> ppp DefaultMessagePathBuilder.java <nl> - import com.dianping.cat.message.internal.MessageIdFactory; <nl> 
mmm Payload.java <nl> ppp Payload.java <nl> - 			return new Date(System.currentTimeMillis() - TimeUtil.ONE_DAY); <nl> + 			return new Date(System.currentTimeMillis() - 8 * TimeUtil.ONE_HOUR); <nl> new file <nl> ppp HeartbeatDecorator.java <nl> + package com.dianping.cat.report.task.alert.sender.decorator; <nl> 
mmm AnalyzerFactory.java <nl> ppp AnalyzerFactory.java <nl> mmm AllTests.java <nl> ppp AllTests.java <nl> + import com.dianping.cat.message.consumer.model.failure.FailureAnalyzerStoreTest; <nl> + FailureAnalyzerStoreTest.class, <nl> new file <nl> ppp FailureAnaylzerStoreTestConfigurator.java <nl> + package com.dianping.cat.message.consumer.model.failure; <nl> 
mmm HdfsDataStore.java <nl> ppp HdfsDataStore.java <nl> + import com.dianping.cat.storage.DataStore; <nl> - 		this.output.write(b); <nl> - 		this.length++; <nl> + 		synchronized (this.output) { <nl> + 			this.output.write(b); <nl> + 			this.length++; <nl> + 		} <nl> - 		this.output.write(bytes); <nl> - 		this.length += bytes.length; <nl> 
mmm CatHomeModule.java <nl> ppp CatHomeModule.java <nl> - import com.dianping.cat.report.task.alert.system.SystemAlert; <nl> - 			SystemAlert systemAlert = ctx.lookup(SystemAlert.class); <nl> - 			Threads.forGroup("Cat").start(systemAlert); <nl> mmm ProjectUpdateTask.java <nl> ppp ProjectUpdateTask.java <nl> 
mmm SystemGraphCreator.java <nl> ppp SystemGraphCreator.java <nl> - 	public static final String PAAS_SYSTEM = "paasSystem"; <nl> - 	private static final List<String> SYSTEM_KEY_LIST = Arrays.asList("sysCpu:avg", "iowaitCpu:avg", "niceCpu:avg", <nl> - 	      "stealCpu:avg", "userCpu:avg", "softirqCpu:avg", "idleCpu:avg", "irqCpu:avg", "/-usage:avg", <nl> 
mmm DefaultMessageTree.java <nl> ppp DefaultMessageTree.java <nl> - 	private String m_threadName; <nl> - 	public String getThreadName() { <nl> - 		return m_threadName; <nl> - 	} <nl> - 	public void setThreadName(String threadName) { <nl> - 		m_threadName = threadName; <nl> - 	} <nl> new file <nl> ppp FailureData.java <nl> 
mmm Base256Encoder.java <nl> ppp Base256Encoder.java <nl> - int newMode = HighLevelEncoder.lookAheadTest(context.msg, context.pos, getEncodingMode()); <nl> + int newMode = HighLevelEncoder.lookAheadTest(context.getMessage(), context.pos, getEncodingMode()); <nl> - boolean mustPad = (context.symbolInfo.dataCapacity - currentSize) > 0; <nl> 
mmm MSSQLSuiteTest.java <nl> ppp MSSQLSuiteTest.java <nl> - public static class Spatial extends SpatialBase {} <nl> + public static class Spatial extends SpatialBase { } <nl> mmm MySQLLiteralsSuiteTest.java <nl> ppp MySQLLiteralsSuiteTest.java <nl> - public static class Spatial extends SpatialBase {} <nl> + public static class Spatial extends SpatialBase { } <nl> 
mmm Configuration.java <nl> ppp Configuration.java <nl> - String column = ColumnMetadata.getColumnMetadata(path).getName(); <nl> + String column = path.getMetadata().getName(); <nl> mmm SQLMergeClause.java <nl> ppp SQLMergeClause.java <nl> - import com.mysema.query.sql.ColumnMetadata; <nl> - target[i] = ColumnMetadata.getColumnMetadata(keys.get(i)).getName(); <nl> 
mmm DefaultQueryMetadataTest.java <nl> ppp DefaultQueryMetadataTest.java <nl> + import com.google.common.collect.ImmutableSet; <nl> + @Test <nl> + public void getJoins3() { <nl> + metadata.addJoin(JoinType.DEFAULT, str); <nl> + assertEquals(Arrays.asList(new JoinExpression(JoinType.DEFAULT, str)), metadata.getJoins()); <nl> 
mmm JPQLTemplates.java <nl> ppp JPQLTemplates.java <nl> + add(JPQLOps.KEY, "key({0})"); <nl> + add(JPQLOps.VALUE, "value({0})"); <nl> new file <nl> ppp JPAMapAccessVisitor.java <nl> + package com.mysema.query.jpa; <nl> + import javax.annotation.Nullable; <nl> + import java.util.Map; <nl> + import com.google.common.collect.Maps; <nl> 
mmm DomainExporter12Test.java <nl> ppp DomainExporter12Test.java <nl> - import static org.junit.Assert.assertTrue; <nl> - import org.hibernate.cfg.Configuration; <nl> - import org.junit.Test; <nl> + import com.mysema.query.jpa.codegen.CompileUtils; <nl> + import org.hibernate.cfg.Configuration; <nl> + import org.junit.Test; <nl> 
mmm Embeddable.java <nl> ppp Embeddable.java <nl> mmm InspectingTypeModel.java <nl> ppp InspectingTypeModel.java <nl> - protected FieldType getFieldType(String fullName){ <nl> + protected TypeCategory getTypeCategory(String fullName){ <nl> - return FieldType.STRING; <nl> + return TypeCategory.STRING; <nl> - return FieldType.BOOLEAN; <nl> 
new file <nl> ppp SQLExceptionTranslator.java <nl> + package com.mysema.query.sql; <nl> + import java.sql.SQLException; <nl> + import javax.annotation.Nullable; <nl> + public interface SQLExceptionTranslator { <nl> + RuntimeException translate(@Nullable String sql, SQLException e); <nl> + } <nl> mmm SQLUpdateClause.java <nl> 
mmm AbstractColQuery.java <nl> ppp AbstractColQuery.java <nl> + import com.mysema.query.DefaultQueryMetadata; <nl> + super(new DefaultQueryMetadata()); <nl> mmm QueryModifiers.java <nl> ppp QueryModifiers.java <nl> + import javax.annotation.Nonnegative; <nl> - public static QueryModifiers limit(long limit) { <nl> 
mmm AbstractJPATest.java <nl> ppp AbstractJPATest.java <nl> - @Test <nl> - public void Map_Contains() { <nl> - QShow show = QShow.show; <nl> - assertEquals(1L, query().from(show).where(show.acts.contains("a", "A")).fetchCount()); <nl> - assertEquals(0L, query().from(show).where(show.acts.contains("X", "X")).fetchCount()); <nl> 
new file <nl> ppp TINExpression.java <nl> + package com.mysema.query.types.spatial; <nl> + import com.mysema.query.types.Expression; <nl> + public abstract class TINExpression<T> extends SurfaceExpression<T> { <nl> + private static final long serialVersionUID = 5872495447965387326L; <nl> + public TINExpression(Expression<T> mixin) { <nl> 
mmm SQLTemplates.java <nl> ppp SQLTemplates.java <nl> - import com.google.common.collect.ImmutableSet; <nl> - protected static final Set<String> SQL_RESERVED_WORDS <nl> - = ImmutableSet.of( <nl> - "ABS", "ALL", "ALLOCATE", "ALTER", "AND", "ANY", "ARE", <nl> - "ARRAY", "ARRAY_AGG", "AS", "ASENSITIVE", "ASYMMETRIC", <nl> 
mmm JPQLQueryTest.java <nl> ppp JPQLQueryTest.java <nl> - @Test(expected=IllegalArgumentException.class) <nl> - public void FullJoinPEntityOfPPEntityOfP() { <nl> - query.fullJoin(cat.mate, cat.mate); <nl> - } <nl> - @Test(expected=IllegalArgumentException.class) <nl> - public void FullJoinPathOfQextendsCollectionOfPPathOfP() { <nl> 
deleted file <nl> mmm SQLListenerContextBuilder.java <nl> - package com.mysema.query.sql; <nl> - import com.google.common.collect.Lists; <nl> - import com.mysema.query.QueryMetadata; <nl> - import java.sql.Connection; <nl> - import java.sql.PreparedStatement; <nl> - import java.util.Collection; <nl> - import java.util.HashMap; <nl> 
mmm PolygonExpression.java <nl> ppp PolygonExpression.java <nl> + public LineStringExpression<?> exteriorRing() { <nl> mmm LinearRingExpression.java <nl> ppp LinearRingExpression.java <nl> mmm GeometryExpression.java <nl> ppp GeometryExpression.java <nl> mmm PointExpression.java <nl> ppp PointExpression.java <nl> 
mmm JoinBuilder.java <nl> ppp JoinBuilder.java <nl> - queryMixin.addJoin(JoinType.JOIN, ExpressionUtils.as((Path)ref, target)); <nl> + queryMixin.addJoin(JoinType.JOIN, ExpressionUtils.as((Path) ref, target)); <nl> mmm PackageVerification.java <nl> ppp PackageVerification.java <nl> - verify(new File("target/querydsl-mongodb-"+version+"-apt-one-jar.jar")); <nl> 
mmm SQLTemplates.java <nl> ppp SQLTemplates.java <nl> + } else if (ch == '\\') { <nl> + builder.append("\\"); <nl> mmm JPAUtil.java <nl> ppp JPAUtil.java <nl> - import java.util.Map; <nl> + import javax.persistence.Parameter; <nl> + import java.util.Map; <nl> + import com.mysema.util.MathUtils; <nl> + import java.math.BigDecimal; <nl> 
mmm JPQLSerializer.java <nl> ppp JPQLSerializer.java <nl> - if (entityManager != null && args.get(0).getType().isAnnotationPresent(Entity.class)) { <nl> + if (entityManager != null && !templates.isPathInEntitiesSupported() && args.get(0).getType().isAnnotationPresent(Entity.class)) { <nl> mmm BookVersion.java <nl> 
mmm LuceneSerializer.java <nl> ppp LuceneSerializer.java <nl> - } else if (op == PathType.DELEGATE) { <nl> + } else if (op == Ops.DELEGATE){ <nl> mmm CoverageTest.java <nl> ppp CoverageTest.java <nl> + Ops.DELEGATE, <nl> mmm PathType.java <nl> ppp PathType.java <nl> - DELEGATE, <nl> mmm PathMetadataFactory.java <nl> 
mmm JaninoEvaluator.java <nl> ppp JaninoEvaluator.java <nl> - import com.mysema.query.util.Assert; <nl> + import com.mysema.util.Assert; <nl> - package com.mysema.query.util; <nl> + package com.mysema.util; <nl> 
mmm CollQuery.java <nl> ppp CollQuery.java <nl> - * @param evaluatorFactory <nl> - * @param evaluatorFactory <nl> + * @param queryEngine <nl> mmm SelectBase.java <nl> ppp SelectBase.java <nl> - int offset = TimeZone.getDefault().getOffset(0); <nl> - Date date = new java.sql.Date(-offset); <nl> + LocalDate localDate = new LocalDate(1970, 1, 10); <nl> 
mmm AbstractExporterMojo.java <nl> ppp AbstractExporterMojo.java <nl> mmm GenericExporterMojo.java <nl> ppp GenericExporterMojo.java <nl> + import com.querydsl.codegen.GenericExporter; <nl> mmm TypeMapping.java <nl> ppp TypeMapping.java <nl> + import com.querydsl.sql.codegen.MetaDataExporter; <nl> mmm TestMetadataExportMojo.java <nl> 
mmm HibernateUpdateClause.java <nl> ppp HibernateUpdateClause.java <nl> - private final QueryMixin queryMixin = new JPAQueryMixin(); <nl> + private final QueryMixin<?> queryMixin = new JPAQueryMixin<Void>(); <nl> mmm PaginationTest.java <nl> ppp PaginationTest.java <nl> - QueryMixin query = new QueryMixin(); <nl> 
mmm MySQLQueryFactoryTest.java <nl> ppp MySQLQueryFactoryTest.java <nl> mmm HibernateBase.java <nl> ppp HibernateBase.java <nl> + private static final QCat cat = QCat.cat; <nl> - List<Cat> results = query().from(QCat.cat).createQuery(QCat.cat).list(); <nl> + List<Cat> results = query().from(cat).createQuery(cat).list(); <nl> 
mmm AbstractJPATest.java <nl> ppp AbstractJPATest.java <nl> + @Test(expected = ClassCastException.class) <nl> + @NoEclipseLink <nl> + @NoBatooJPA <nl> + public void constant_hibernate() { <nl> + query().from(cat).select(cat.id, Expressions.constantAs("abc", Expressions.stringPath("const"))).fetch(); <nl> + } <nl> 
mmm AbstractMetaDataExportMojo.java <nl> ppp AbstractMetaDataExportMojo.java <nl> - import com.querydsl.sql.codegen.support.NumericMapping; <nl> - import com.querydsl.sql.codegen.support.RenameMapping; <nl> - import com.querydsl.sql.codegen.support.TypeMapping; <nl> - package com.querydsl.sql.codegen.support; <nl> 
mmm SerializationTest.java <nl> ppp SerializationTest.java <nl> mmm QueryEngine.java <nl> ppp QueryEngine.java <nl> - <T> List<T> list(QueryMetadata metadata, Map<Expr<?>, Iterable<?>> iterables, Expr<T> projection); <nl> + <T> List<T> list(QueryMetadata metadata, Map<Expr<?>, Iterable<?>> iterables, Expr<T> projection); <nl> 
mmm JPASubQuery.java <nl> ppp JPASubQuery.java <nl> - public class JPASubQuery extends AbstractJPASubQuery<JPASubQuery> { <nl> + public final class JPASubQuery extends AbstractJPASubQuery<JPASubQuery> { <nl> mmm ConfigurationTest.java <nl> ppp ConfigurationTest.java <nl> + import java.math.BigInteger; <nl> 
mmm CascadingBoolean.java <nl> ppp CascadingBoolean.java <nl> - package com.mysema.query.support; <nl> + package com.mysema.query; <nl> new file <nl> ppp EMapBase.java <nl> + package com.mysema.query.types.expr; <nl> + import java.util.Map; <nl> + import com.mysema.query.types.operation.OBoolean; <nl> + import com.mysema.query.types.operation.ONumber; <nl> 
mmm StringExpression.java <nl> ppp StringExpression.java <nl> - public abstract class StringExpression extends ComparableExpression<String> { <nl> + public abstract class StringExpression extends LiteralExpression<String> { <nl> mmm ComparableExpressionBase.java <nl> ppp ComparableExpressionBase.java <nl> 
mmm StringExpression.java <nl> ppp StringExpression.java <nl> - import javax.persistence.Entity; <nl> + import com.querydsl.sql.Configuration; <nl> + import com.querydsl.sql.ProjectableSQLQuery; <nl> - import com.querydsl.sql.Configuration; <nl> - import com.querydsl.sql.ProjectableSQLQuery; <nl> + import javax.persistence.Entity; <nl> 
mmm SelectBase.java <nl> ppp SelectBase.java <nl> + @Test <nl> + public void Case() { <nl> + NumberExpression<Float> numExpression = employee.salary.floatValue().divide(employee2.salary.floatValue()).multiply(100); <nl> + NumberExpression<Float> numExpression2 = employee.id.when(0).then(0.0F).otherwise(numExpression); <nl> 
mmm AbstractMongodbQuery.java <nl> ppp AbstractMongodbQuery.java <nl> + public DBObject asDBObject() { <nl> + return createQuery(queryMixin.getMetadata().getWhere()); <nl> + } <nl> - return createQuery(queryMixin.getMetadata().getWhere()).toString(); <nl> + return asDBObject().toString(); <nl> mmm AbstractMetaDataExportMojo.java <nl> 
mmm SelectBase.java <nl> ppp SelectBase.java <nl> - @ExcludeIn({ORACLE, CUBRID, FIREBIRD, DERBY, SQLSERVER, SQLITE, TERADATA}) <nl> + @ExcludeIn({ORACLE, CUBRID, DERBY, SQLSERVER, SQLITE, TERADATA}) <nl> - @ExcludeIn({ORACLE, CUBRID, FIREBIRD, DERBY, SQLSERVER, SQLITE, TERADATA}) <nl> + @ExcludeIn({ORACLE, CUBRID, DERBY, SQLSERVER, SQLITE, TERADATA}) <nl> 
mmm AbstractRepository.java <nl> ppp AbstractRepository.java <nl> + import com.querydsl.jpa.hibernate.HibernateQuery; <nl> + import org.hibernate.Session; <nl> + protected <T> HibernateQuery<T> selectFromHibernateQuery(EntityPath<T> entity) { <nl> + return selectHibernateQuery(entity).from(entity); <nl> + } <nl> 
deleted file <nl> mmm PathBuilderValidator.java <nl> - package com.mysema.query.types.path; <nl> - import java.lang.reflect.Field; <nl> - import java.lang.reflect.Method; <nl> - import java.util.Collection; <nl> - import java.util.Map; <nl> - import com.google.common.primitives.Primitives; <nl> - import com.mysema.util.BeanUtils; <nl> 
mmm MetaDataExporter.java <nl> ppp MetaDataExporter.java <nl> - private static final int COLUMN_DIGITS = 9; <nl> - int columnType = columns.getInt(COLUMN_TYPE); <nl> - int columnSize = columns.getInt(COLUMN_SIZE); <nl> - int columnDigits = columns.getInt(COLUMN_DIGITS); <nl> - Class<?> clazz = configuration.getJavaType(columnType, columnSize, columnDigits, <nl> 
mmm BrowserActivity.java <nl> ppp BrowserActivity.java <nl> + import android.widget.Toast; <nl> + sessionConfigBuilder.setSupportLocalServer(true); <nl> - sessionConfigBuilder.setConnectionIntercepter(new SonicSessionConnectionInterceptor() { <nl> + sessionConfigBuilder.setConnectionInterceptor(new SonicSessionConnectionInterceptor() { <nl> 
mmm SonicSessionStatistics.java <nl> ppp SonicSessionStatistics.java <nl> mmm SonicSniSSLSocketFactory.java <nl> ppp SonicSniSSLSocketFactory.java <nl> - public Socket createSocket(String host, int port, InetAddress localHost, int localPort) throws IOException { <nl> + public Socket createSocket(String host, int port, InetAddress localHost, int localPort) throws IOException, UnknownHostException { <nl> 
mmm SonicRuntimeImpl.java <nl> ppp SonicRuntimeImpl.java <nl> - return "Mozilla/5.0 (Linux; Android 5.1.1; Nexus 6 Build/LYZ28E) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Mobile Safari/537.36"; <nl> + return ""; <nl> mmm BrowserActivity.java <nl> ppp BrowserActivity.java <nl> - import android.widget.Toast; <nl> 
mmm SonicSessionConnection.java <nl> ppp SonicSessionConnection.java <nl> - import java.io.ByteArrayOutputStream; <nl> - import java.util.ArrayList; <nl> - import java.util.HashMap; <nl> - import java.util.Set; <nl> - import java.util.concurrent.atomic.AtomicBoolean; <nl> - public final static String CUSTOM_HEAD_FILED_ETAG = "etag"; <nl> 
new file <nl> ppp GreetingFallback.java <nl> + package com.alibaba.csp.sentinel.demo.quarkus; <nl> + import com.alibaba.csp.sentinel.slots.block.BlockException; <nl> + import io.quarkus.runtime.annotations.RegisterForReflection; <nl> + @RegisterForReflection <nl> + public class GreetingFallback { <nl> + public static String globalBlockHandler(String name, BlockException ex) { <nl> 
new file <nl> ppp DubboAppContextFilter.java <nl> + package com.alibaba.csp.sentinel.adapter.dubbo; <nl> + import org.apache.dubbo.common.Constants; <nl> + import org.apache.dubbo.common.extension.Activate; <nl> + import org.apache.dubbo.rpc.Filter; <nl> + import org.apache.dubbo.rpc.Invocation; <nl> + import org.apache.dubbo.rpc.Invoker; <nl> 
mmm TransformationUtilsTest.java <nl> ppp TransformationUtilsTest.java <nl> - import static org.mockito.Matchers.eq; <nl> + import static org.mockito.ArgumentMatchers.eq; <nl> mmm StreamAssetPathFetcherTest.java <nl> ppp StreamAssetPathFetcherTest.java <nl> - import static org.mockito.Matchers.eq; <nl> + import static org.mockito.ArgumentMatchers.eq; <nl> 
mmm RequestTrackerTest.java <nl> ppp RequestTrackerTest.java <nl> - public void clearRequests_doesNotRecycleRequests() { <nl> + public void clearAndRemove_withRequestPreviouslyClearedInClearRequests_doesNothing() { <nl> + tracker.clearAndRemove(request); <nl> - assertThat(request.isRecycled()).isFalse(); <nl> 
new file <nl> ppp GlideUrl.java <nl> + package com.bumptech.glide.loader; <nl> + import java.net.MalformedURLException; <nl> + import java.net.URL; <nl> + public class GlideUrl { <nl> + private final String stringUrl; <nl> + private final URL url; <nl> + public GlideUrl(URL url) { <nl> + this.url = url; <nl> + stringUrl = null; <nl> 
mmm GlideTest.java <nl> ppp GlideTest.java <nl> + import static org.mockito.ArgumentMatchers.eq; <nl> - import static org.mockito.Matchers.eq; <nl> mmm ThumbnailStreamOpenerTest.java <nl> ppp ThumbnailStreamOpenerTest.java <nl> - import static org.mockito.Matchers.eq; <nl> + import static org.mockito.ArgumentMatchers.eq; <nl> 
mmm DrawableTransformationTest.java <nl> ppp DrawableTransformationTest.java <nl> - @Config(manifest = Config.NONE, sdk = 18) <nl> + @Config(sdk = 18) <nl> mmm LazyBitmapDrawableResourceTest.java <nl> ppp LazyBitmapDrawableResourceTest.java <nl> - import org.robolectric.annotation.Config; <nl> - @Config(manifest = Config.NONE) <nl> 
mmm TabCharacterCheck.java <nl> ppp TabCharacterCheck.java <nl> - package com.puppycrawl.tools.checkstyle.checks; <nl> + package com.puppycrawl.tools.checkstyle.checks.whitespace; <nl> mmm EmptyForIteratorPadCheckTest.java <nl> ppp EmptyForIteratorPadCheckTest.java <nl> - package com.puppycrawl.tools.checkstyle.checks; <nl> 
mmm InnerAssignmentCheck.java <nl> ppp InnerAssignmentCheck.java <nl> - package com.puppycrawl.tools.checkstyle.checks; <nl> + package com.puppycrawl.tools.checkstyle.checks.coding; <nl> mmm SimplifyBooleanReturnCheckTest.java <nl> ppp SimplifyBooleanReturnCheckTest.java <nl> - package com.puppycrawl.tools.checkstyle.checks; <nl> 
mmm RedundantThrowsCheckTest.java <nl> ppp RedundantThrowsCheckTest.java <nl> - verify(mCheckConfig, getPath("javadoc/Test1.java"), expected); <nl> + verify(mCheckConfig, getSrcPath("checks/javadoc/Input_01.java"), expected); <nl> - verify(mCheckConfig, getPath("javadoc/Test2.java"), expected); <nl> + verify(mCheckConfig, getSrcPath("checks/javadoc/Input_02.java"), expected); <nl> 
mmm TokenUtils.java <nl> ppp TokenUtils.java <nl> - final String tokentypes = <nl> + final String tokenTypes = <nl> - final ResourceBundle bundle = ResourceBundle.getBundle(tokentypes); <nl> + final ResourceBundle bundle = ResourceBundle.getBundle(tokenTypes); <nl> mmm CommonUtils.java <nl> ppp CommonUtils.java <nl> 
mmm DeclarationOrderCheck.java <nl> ppp DeclarationOrderCheck.java <nl> mmm SingleLineJavadocCheck.java <nl> ppp SingleLineJavadocCheck.java <nl> mmm AnnotationUseStyleCheck.java <nl> ppp AnnotationUseStyleCheck.java <nl> mmm BooleanExpressionComplexityCheck.java <nl> ppp BooleanExpressionComplexityCheck.java <nl> 
mmm ImportControlLoader.java <nl> ppp ImportControlLoader.java <nl> - InputStream is = null; <nl> + InputStream is; <nl> mmm JavaNCSSCheck.java <nl> ppp JavaNCSSCheck.java <nl> - boolean countable = true; <nl> + boolean countable; <nl> mmm FallThroughCheck.java <nl> ppp FallThroughCheck.java <nl> - DetailAST loopBody = null; <nl> 
mmm DynamicStatementBuilderTest.java <nl> ppp DynamicStatementBuilderTest.java <nl> - import static org.apache.storm.cassandra.DynamicStatementBuilder.*; <nl> + import static org.apache.storm.cassandra.DynamicStatementBuilder.all; <nl> + import static org.apache.storm.cassandra.DynamicStatementBuilder.async; <nl> 
mmm Stream.java <nl> ppp Stream.java <nl> - _name, <nl> - TridentUtils.fieldsConcat(getOutputFields(), functionFields), <nl> - functionFields, <nl> - new EachProcessor(inputFields, function))); <nl> + _name, <nl> + TridentUtils.fieldsConcat(getOutputFields(), functionFields), <nl> + functionFields, <nl> + new EachProcessor(inputFields, function))); <nl> 
new file <nl> ppp DevNullBolt.java <nl> + package org.apache.storm.perf.bolt; <nl> + import org.apache.storm.task.OutputCollector; <nl> + import org.apache.storm.task.TopologyContext; <nl> + import org.apache.storm.topology.OutputFieldsDeclarer; <nl> + import org.apache.storm.topology.base.BaseRichBolt; <nl> 
mmm KafkaConfig.java <nl> ppp KafkaConfig.java <nl> - public long maxOffsetBehind = 100000; <nl> + public long maxOffsetBehind = Long.MAX_VALUE; <nl> new file <nl> ppp IShellMetric.java <nl> + package backtype.storm.metric.api.rpc; <nl> + import backtype.storm.metric.api.IMetric; <nl> + public interface IShellMetric extends IMetric { <nl> 
new file <nl> ppp HttpForwardingMetricsConsumer.java <nl> + package backtype.storm.metric; <nl> + import java.util.Arrays; <nl> + import java.util.Collection; <nl> + import java.util.Map; <nl> + import java.net.URL; <nl> + import java.net.URLConnection; <nl> + import java.net.HttpURLConnection; <nl> + import com.esotericsoftware.kryo.io.Output; <nl> 
mmm StormApiResource.java <nl> ppp StormApiResource.java <nl> - @AuthNimbusOp(value = "getOwnerResourceSummaries") <nl> + @AuthNimbusOp(value = "getOwnerResourceSummaries", needsTopoId = true) <nl> mmm LogviewerLogSearchHandler.java <nl> ppp LogviewerLogSearchHandler.java <nl> + import com.codahale.metrics.ExponentiallyDecayingReservoir; <nl> 
mmm RichShellSpout.java <nl> ppp RichShellSpout.java <nl> - import backtype.storm.multilang.ShellSpout; <nl> + import backtype.storm.spout.ShellSpout; <nl> deleted file <nl> mmm ISerializer.java <nl> - package backtype.storm.multilang; <nl> - import java.io.IOException; <nl> - import java.io.InputStream; <nl> 
mmm WorkerLogs.java <nl> ppp WorkerLogs.java <nl> - import org.apache.storm.daemon.utils.PathUtil; <nl> - return PathUtil.truncatePathToLastElements(file.getCanonicalFile().toPath(), 3).toString(); <nl> + String[] splitted = file.getCanonicalPath().split(Utils.FILE_PATH_SEPARATOR); <nl> + List<String> split = takeLast(Arrays.asList(splitted), 3); <nl> 
deleted file <nl> mmm ZkInfo.java <nl> - package org.apache.storm.kinesis.spout; <nl> - import java.io.Serializable; <nl> - public class ZkInfo implements Serializable { <nl> - private final String zkUrl; <nl> - private final String zkNode; <nl> - private final Integer sessionTimeoutMs; <nl> - private final Integer connectionTimeoutMs; <nl> 
mmm FieldConstants.java <nl> ppp FieldConstants.java <nl> + public static final String DefaultStartingOffset = "-1"; <nl> mmm IPartitionManager.java <nl> ppp IPartitionManager.java <nl> - EventData receive(); <nl> + EventDataWrap receive(); <nl> mmm SimplePartitionManager.java <nl> ppp SimplePartitionManager.java <nl> 
mmm Client.java <nl> ppp Client.java <nl> - import backtype.storm.Config; <nl> - import backtype.storm.messaging.IConnection; <nl> - import backtype.storm.messaging.TaskMessage; <nl> - import backtype.storm.utils.Utils; <nl> - import org.jboss.netty.bootstrap.ClientBootstrap; <nl> - import org.jboss.netty.channel.Channel; <nl> 
mmm WorkerSlot.java <nl> ppp WorkerSlot.java <nl> - String nodeId; <nl> - int port; <nl> + private String nodeId; <nl> + private int port; <nl> - double memOnHeap = 0.0; <nl> + private double memOnHeap = 0.0; <nl> - double memOffHeap = 0.0; <nl> + private double memOffHeap = 0.0; <nl> - double cpu = 0.0; <nl> + private double cpu = 0.0; <nl> 
mmm BasicContainer.java <nl> ppp BasicContainer.java <nl> - protected final String _stormHome = System.getProperty("storm.home"); <nl> + protected final String _stormHome = System.getProperty(ConfigUtils.STORM_HOME); <nl> mmm RocksDbStore.java <nl> ppp RocksDbStore.java <nl> + import org.apache.storm.utils.ConfigUtils; <nl> 
mmm SolrConfig.java <nl> ppp SolrConfig.java <nl> + private final boolean enableKerberos; <nl> + this(zkHostString, tickTupleInterval, false); <nl> + } <nl> + public SolrConfig(String zkHostString, int tickTupleInterval, boolean enableKerberos) { <nl> + this.enableKerberos =  enableKerberos; <nl> + public boolean isKerberosEnabled() { <nl> 
mmm KafkaBolt.java <nl> ppp KafkaBolt.java <nl> mmm EsLookupBoltTest.java <nl> ppp EsLookupBoltTest.java <nl> - when(output.toValues(any(Response.class))).thenReturn(Collections.singleton(new Values(""))); <nl> mmm KafkaSpoutCommitTest.java <nl> ppp KafkaSpoutCommitTest.java <nl> - import static org.mockito.Matchers.*; <nl> 
mmm Utils.java <nl> ppp Utils.java <nl> - if (Thread.interrupted()) { <nl> - throw new InterruptedException(); <nl> - } <nl> mmm WorkerTransfer.java <nl> ppp WorkerTransfer.java <nl> + if (tuple == JCQueue.INTERRUPT) { <nl> + throw new RuntimeException(new InterruptedException("Worker Transfer Thread interrupted")); <nl> 
mmm OpaquePartitionedTridentSpoutExecutor.java <nl> ppp OpaquePartitionedTridentSpoutExecutor.java <nl> + import java.util.ArrayList; <nl> + import java.util.HashSet; <nl> + import java.util.Set; <nl> - public Object initializeTransaction(long txid, Object prevMetadata) { <nl> - return null; <nl> + public Object initializeTransaction(long txid, Object prevMetadata, Object currMetadata) { <nl> 
mmm Time.java <nl> ppp Time.java <nl> - public static void sleepSecs (long secs) throws InterruptedException { <nl> - if (secs > 0) { <nl> - sleep(secs * 1000); <nl> - } <nl> - } <nl> - public static long secsToMillis (int secs) { <nl> - return 1000*(long) secs; <nl> - } <nl> - public static long secsToMillisLong(double secs) { <nl> 
mmm CountEvictionPolicy.java <nl> ppp CountEvictionPolicy.java <nl> - private final AtomicInteger currentCount; <nl> + protected final AtomicInteger currentCount; <nl> - public boolean evict(Event<T> event) { <nl> + public Action evict(Event<T> event) { <nl> + if(evictionPolicy != null) { <nl> + evictionPolicy.setContext(System.currentTimeMillis()); <nl> 
mmm HdfsState.java <nl> ppp HdfsState.java <nl> - import org.apache.storm.hdfs.common.security.HdfsSecurityUtil; <nl> + import org.apache.storm.hdfs.security.HdfsSecurityUtil; <nl> mmm DependencyUploader.java <nl> ppp DependencyUploader.java <nl> - import org.apache.storm.blobstore.BlobStoreAclHandler; <nl> 
deleted file <nl> mmm IStorage.java <nl> - package backtype.storm.nimbus; <nl> - import java.io.IOException; <nl> - import java.io.OutputStream; <nl> - import java.nio.file.Path; <nl> - import java.util.List; <nl> - public interface IStorage { <nl> - void mkdir(Path dir) throws IOException; <nl> - OutputStream create(Path file) throws IOException; <nl> 
mmm Credentials.java <nl> ppp Credentials.java <nl> - @Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-5-14") <nl> + @Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-6") <nl> - org.apache.thrift.protocol.TMap _map442 = iprot.readMapBegin(); <nl> - struct.creds = new HashMap<String,String>(2*_map442.size); <nl> 
mmm SingleTopicKafkaSpoutConfiguration.java <nl> ppp SingleTopicKafkaSpoutConfiguration.java <nl> - package org.apache.storm.kafka.spout.builders; <nl> + package org.apache.storm.kafka.spout.config.builder; <nl> - import org.apache.storm.Config; <nl> - import org.apache.storm.generated.StormTopology; <nl> 
mmm KafkaTestBroker.java <nl> ppp KafkaTestBroker.java <nl> - import com.netflix.curator.framework.imps.CuratorFrameworkState; <nl> - import com.netflix.curator.test.InstanceSpec; <nl> - import kafka.server.KafkaConfig; <nl> - import org.apache.commons.io.FileUtils; <nl> - import java.io.File; <nl> - private int port; <nl> 
mmm RocksDbMetricsWriter.java <nl> ppp RocksDbMetricsWriter.java <nl> - try { <nl> - stringMetadata = store.rocksDbGetStringMetadata(type, s); <nl> - } <nl> - catch (RocksDBException e) { <nl> - throw new MetricException("Error reading metrics data", e); <nl> - } <nl> + stringMetadata = store.rocksDbGetStringMetadata(type, s); <nl> 
mmm LinearDRPCTopologyBuilder.java <nl> ppp LinearDRPCTopologyBuilder.java <nl> + import backtype.storm.grouping.PartialKeyGrouping; <nl> + @Override <nl> + public LinearDRPCInputDeclarer partialKeyGrouping(Fields fields) { <nl> + return customGrouping(new PartialKeyGrouping(fields)); <nl> + } <nl> + @Override <nl> 
mmm AuthUtils.java <nl> ppp AuthUtils.java <nl> + import org.apache.commons.lang.StringUtils; <nl> - public static IGroupMappingServiceProvider GetGroupMappingServiceProviderPlugin(Map conf) { <nl> + public static IGroupMappingServiceProvider GetGroupMappingServiceProviderPlugin(Map<String, Object> conf) { <nl> 
mmm Config.java <nl> ppp Config.java <nl> + public static final String SUPERVISOR_WORKER_SHUTDOWN_SLEEP_SECS = "supervisor.worker.shutdown.sleep.secs"; <nl> + public static final Object SUPERVISOR_WORKER_SHUTDOWN_SLEEP_SECS_SCHEMA = ConfigValidation.IntegerValidator; <nl> - this.jedisPool.returnResource(jedis); <nl> 
mmm StormSubmitter.java <nl> ppp StormSubmitter.java <nl> + import com.google.common.collect.Sets; <nl> + import java.util.Set; <nl> + import org.apache.storm.blobstore.NimbusBlobStore; <nl> - private static void validateConfs(Map stormConf, StormTopology topology) throws IllegalArgumentException { <nl> + private static void validateConfs(Map<String, Object> stormConf, StormTopology topology) throws IllegalArgumentException, InvalidTopologyException { <nl> 
mmm ZkHosts.java <nl> ppp ZkHosts.java <nl> - 	private static final String DEFAULT_ZK_PATH = "/brokers"; <nl> + private static final String DEFAULT_ZK_PATH = "/brokers"; <nl> - 	public String brokerZkStr = null; <nl> - 	public int refreshFreqSecs = 60; <nl> + public String brokerZkStr = null; <nl> + public int refreshFreqSecs = 60; <nl> 
mmm HdfsSpout.java <nl> ppp HdfsSpout.java <nl> - this.hdfsConfig = new Configuration(); <nl> - this.tupleCounter = 0; <nl> new file <nl> ppp KafkaOffsetLagResult.java <nl> + package org.apache.storm.kafka.monitor; <nl> + import org.json.simple.JSONAware; <nl> + public class KafkaOffsetLagResult implements JSONAware { <nl> 
mmm Cluster.java <nl> ppp Cluster.java <nl> + import org.apache.storm.networktopography.DefaultRackDNSToSwitchMapping; <nl> - if (clazz != null && !clazz.isEmpty()) { <nl> - DNSToSwitchMapping topographyMapper = <nl> - (DNSToSwitchMapping) ReflectionUtils.newInstance(clazz); <nl> - Map<String, String> resolvedSuperVisors = topographyMapper.resolve(supervisorHostNames); <nl> 
mmm IndexItemDoc.java <nl> ppp IndexItemDoc.java <nl> mmm EsState.java <nl> ppp EsState.java <nl> + import com.fasterxml.jackson.core.JsonProcessingException; <nl> + import com.fasterxml.jackson.databind.ObjectMapper; <nl> - import java.io.UnsupportedEncodingException; <nl> - import com.fasterxml.jackson.core.JsonProcessingException; <nl> 
mmm KafkaSpoutCommitTest.java <nl> ppp KafkaSpoutCommitTest.java <nl> + import static org.mockito.ArgumentMatchers.anyList; <nl> - import static org.mockito.ArgumentMatchers.anyObject; <nl> + import static org.mockito.ArgumentMatchers.anyString; <nl> - verify(collectorMock, times(recordsForPartition.size())).emit(anyObject(), anyObject(), messageIds.capture()); <nl> 
mmm KafkaSpoutConfigTest.java <nl> ppp KafkaSpoutConfigTest.java <nl> - import static org.junit.Assert.assertEquals; <nl> - import static org.junit.Assert.assertNull; <nl> - import static org.junit.Assert.assertThat; <nl> - import static org.junit.Assert.assertTrue; <nl> + import static org.hamcrest.MatcherAssert.assertThat; <nl> 
mmm DRPCServer.java <nl> ppp DRPCServer.java <nl> + import org.apache.storm.utils.ConfigUtils; <nl> - Map<String, Object> conf = Utils.readStormConfig(); <nl> + Map<String, Object> conf = ConfigUtils.readStormConfig(); <nl> mmm Worker.java <nl> ppp Worker.java <nl> - Map<String, Object> conf = Utils.readStormConfig(); <nl> 
mmm Coordinator.java <nl> ppp Coordinator.java <nl> + import java.util.List; <nl> - class Coordinator implements IPartitionedTridentSpout.Coordinator<GlobalPartitionInformation>, IOpaquePartitionedTridentSpout.Coordinator<GlobalPartitionInformation> { <nl> + class Coordinator implements IPartitionedTridentSpout.Coordinator<List<GlobalPartitionInformation>>, IOpaquePartitionedTridentSpout.Coordinator<List<GlobalPartitionInformation>> { <nl> 
deleted file <nl> mmm SaslTransportPlugin.java <nl> - package backtype.storm.security.auth; <nl> - import java.io.IOException; <nl> - import java.net.Socket; <nl> - import java.security.Principal; <nl> - import java.util.Map; <nl> - import javax.security.auth.Subject; <nl> - import javax.security.auth.login.Configuration; <nl> 
deleted file <nl> mmm Config.java <nl> - package org.apache.storm.kinesis.spout; <nl> - import com.amazonaws.services.kinesis.model.ShardIteratorType; <nl> - import org.slf4j.Logger; <nl> - import org.slf4j.LoggerFactory; <nl> - import java.io.Serializable; <nl> - import java.util.Date; <nl> - public class Config implements Serializable { <nl> 
mmm GzipBridgeSerializationDelegate.java <nl> ppp GzipBridgeSerializationDelegate.java <nl> + @Deprecated <nl> - public Object deserialize(byte[] bytes) { <nl> + public <T> T deserialize(byte[] bytes, Class<T> clazz) { <nl> - return gzipDelegate.deserialize(bytes); <nl> + return gzipDelegate.deserialize(bytes, clazz); <nl> 
mmm KerberosSaslClientHandler.java <nl> ppp KerberosSaslClientHandler.java <nl> - private String host; <nl> - public KerberosSaslClientHandler(ISaslClient client, Map storm_conf, String jaas_section, String host) throws IOException { <nl> + public KerberosSaslClientHandler(ISaslClient client, Map storm_conf, String jaas_section) throws IOException { <nl> 
mmm TransactionalKafkaSpout.java <nl> ppp TransactionalKafkaSpout.java <nl> - import storm.kafka.KafkaConfig.StaticHosts; <nl> - StaticPartitionConnections _connections; <nl> - int partitionsPerHost; <nl> + KafkaPartitionConnections _connections; <nl> - _connections = new StaticPartitionConnections(_config); <nl> 
new file <nl> ppp PersistentWordCount.java <nl> + package org.apache.storm.redis.topology; <nl> + import backtype.storm.Config; <nl> + import backtype.storm.LocalCluster; <nl> + import backtype.storm.StormSubmitter; <nl> + import backtype.storm.topology.OutputFieldsDeclarer; <nl> + import backtype.storm.topology.TopologyBuilder; <nl> 
deleted file <nl> mmm JmsProvider.java <nl> - package org.apache.storm.jms; <nl> - import java.io.Serializable; <nl> - import javax.jms.ConnectionFactory; <nl> - import javax.jms.Destination; <nl> - public interface JmsProvider extends Serializable { <nl> - public ConnectionFactory connectionFactory() throws Exception; <nl> 
mmm BatchBoltExecutor.java <nl> ppp BatchBoltExecutor.java <nl> - return (IBatchBolt) Utils.deserialize(_boltSer); <nl> + return Utils.deserialize(_boltSer, IBatchBolt.class); <nl> new file <nl> ppp ThriftSerializationDelegate.java <nl> + package backtype.storm.serialization; <nl> + import org.apache.thrift.TBase; <nl> 
mmm KinesisSpout.java <nl> ppp KinesisSpout.java <nl> + import java.util.Map; <nl> - import java.util.Map; <nl> - public KinesisSpout (KinesisConfig kinesisConfig) { <nl> + public KinesisSpout(KinesisConfig kinesisConfig) { <nl> - public Map<String, Object> getComponentConfiguration () { <nl> + public Map<String, Object> getComponentConfiguration() { <nl> 
new file <nl> ppp NoOutputException.java <nl> + package backtype.storm.multilang; <nl> + public class NoOutputException extends Exception { <nl> + public NoOutputException() { <nl> + super(); <nl> + } <nl> + public NoOutputException(String message) { <nl> + super(message); <nl> + } <nl> + public NoOutputException(String message, Throwable cause) { <nl> 
mmm WatermarkTimeTriggerPolicy.java <nl> ppp WatermarkTimeTriggerPolicy.java <nl> + private boolean started; <nl> + this.started = false; <nl> - if (event.isWatermark()) { <nl> + if (started && event.isWatermark()) { <nl> + @Override <nl> + public void start() { <nl> + started = true; <nl> + } <nl> + @Override <nl> 
deleted file <nl> mmm UserHomePagerChaseBangumiAdapter.java <nl> - package com.hotbitmapgg.bilibili.adapter; <nl> - import android.annotation.SuppressLint; <nl> - import android.support.v7.widget.RecyclerView; <nl> - import android.view.LayoutInflater; <nl> - import android.view.View; <nl> - import android.view.ViewGroup; <nl> 
mmm BannerAdapter.java <nl> ppp BannerAdapter.java <nl> + private int pos; <nl> + private ViewPagerOnItemClickListener mViewPagerOnItemClickListener; <nl> + public void setmViewPagerOnItemClickListener(ViewPagerOnItemClickListener mViewPagerOnItemClickListener) <nl> + { <nl> + this.mViewPagerOnItemClickListener = mViewPagerOnItemClickListener; <nl> 
deleted file <nl> mmm GenericClass.java <nl> - package tests; <nl> - import com.google.auto.factory.AutoFactory; <nl> - @AutoFactory <nl> - public final class GenericClass<T> {} <nl> mmm FactoryComponent.java <nl> - FactoryGeneratedFactory factory(); <nl> + FooFactory factory(); <nl> + GenericFooFactory<Number> generatedFactory(); <nl> 
mmm GwtSerialization.java <nl> ppp GwtSerialization.java <nl> - vars.formalTypes = autoVars.formalTypes; <nl> - vars.actualTypes = autoVars.actualTypes; <nl> - vars.useBuilder = !autoVars.builderTypeName.isEmpty(); <nl> - vars.builderSetterNames = autoVars.builderSetterNames; <nl> + "_CustomFieldSerializer"; <nl> 
new file <nl> ppp FakeSerializerFactory.java <nl> + package com.google.auto.value.extension.serializable.serializer.utils; <nl> + import com.google.auto.value.extension.serializable.serializer.interfaces.Serializer; <nl> + import com.google.auto.value.extension.serializable.serializer.interfaces.SerializerFactory; <nl> 
mmm SpoonJobDelegate.java <nl> ppp SpoonJobDelegate.java <nl> + import com.google.common.annotations.VisibleForTesting; <nl> + import org.eclipse.swt.widgets.Shell; <nl> - JobExecutionConfigurationDialog dialog = <nl> - new JobExecutionConfigurationDialog( spoon.getShell(), executionConfiguration, jobMeta ); <nl> 
mmm AutoDocMeta.java <nl> ppp AutoDocMeta.java <nl> + import org.pentaho.di.core.annotations.Step; <nl> + @Step( id = "AutoDoc", image = "autodoc.svg", i18nPackageName = "org.pentaho.di.trans.steps.autodoc", <nl> + name = "AutoDoc.Name", description = "AutoDoc.Description", <nl> + categoryDescription = "i18n:org.pentaho.di.trans.step:BaseStep.Category.Output" ) <nl> 
mmm WebsphereMQProviderTest.java <nl> ppp WebsphereMQProviderTest.java <nl> - import static org.pentaho.di.trans.step.jms.context.JmsProvider.ConnectionType.JNDI; <nl> - assertFalse( jmsProvider.supports( JNDI ) ); <nl> mmm JmsDelegate.java <nl> ppp JmsDelegate.java <nl> - public  class JmsDelegate { <nl> + public class JmsDelegate { <nl> 
deleted file <nl> mmm BITMAPINFOHEADER.java <nl> - package org.pentaho.di.core.clipboard; <nl> - public class BITMAPINFOHEADER { <nl> - public int biSize; <nl> - public int biWidth; <nl> - public int biHeight; <nl> - public short biPlanes; <nl> - public short biBitCount; <nl> - public int biCompression; <nl> - public int biSizeImage; <nl> 
mmm JobEntryTransTest.java <nl> ppp JobEntryTransTest.java <nl> + import static org.mockito.Mockito.spy; <nl> + import static org.mockito.Mockito.any; <nl> + import static org.mockito.Mockito.doThrow; <nl> + import static org.mockito.Mockito.verify; <nl> + import org.pentaho.di.core.Result; <nl> + import org.pentaho.di.core.exception.KettleException; <nl> 
mmm DatabaseLookupDialog.java <nl> ppp DatabaseLookupDialog.java <nl> - fdKey.bottom = new FormAttachment( wlKey, 250 ); <nl> + fdKey.bottom = new FormAttachment( wlKey, 190 ); <nl> - wOK = new Button( shell, SWT.PUSH ); <nl> - wOK.setText( BaseMessages.getString( PKG, "System.Button.OK" ) ); <nl> - wGet = new Button( shell, SWT.PUSH ); <nl> 
mmm Spoon.java <nl> ppp Spoon.java <nl> + import java.util.stream.Collectors; <nl> - List<PluginInterface> sortedCat = new ArrayList<>(); <nl> - for ( PluginInterface baseStep : baseSteps ) { <nl> - if ( baseStep.getCategory().equalsIgnoreCase( baseCategory ) ) { <nl> - sortedCat.add( baseStep ); <nl> - } <nl> 
mmm TableOutputMeta.java <nl> ppp TableOutputMeta.java <nl> - if ( getDatabaseMeta().supportsAutoGeneratedKeys() ) { <nl> + if ( getDatabaseMeta() != null && getDatabaseMeta().supportsAutoGeneratedKeys() ) { <nl> mmm PostgreSQLDatabaseMeta.java <nl> ppp PostgreSQLDatabaseMeta.java <nl> + @Override <nl> + public String getSQLListOfSequences() { <nl> 
new file <nl> ppp ConnectionViewTreeExtension.java <nl> + package org.pentaho.di.connections.ui.tree; <nl> + import org.pentaho.di.connections.ui.dialog.ConnectionDelegate; <nl> + import org.pentaho.di.core.exception.KettleException; <nl> + import org.pentaho.di.core.extension.ExtensionPoint; <nl> + import org.pentaho.di.core.extension.ExtensionPointInterface; <nl> 
mmm ErrorModel.java <nl> ppp ErrorModel.java <nl> mmm RepositoryConnectControllerTest.java <nl> ppp RepositoryConnectControllerTest.java <nl> - package org.pentaho.di.ui.repo; <nl> + package org.pentaho.di.ui.repo.controller; <nl> + import org.pentaho.di.ui.repo.controller.RepositoryConnectController; <nl> 
mmm ResolvableResource.java <nl> ppp ResolvableResource.java <nl> + @Deprecated <nl> + package org.pentaho.di.trans.steps.writetolog; <nl> + import org.junit.After; <nl> + import org.junit.Before; <nl> + import org.junit.BeforeClass; <nl> + import org.junit.ClassRule; <nl> + import org.junit.Test; <nl> + import org.pentaho.di.core.KettleEnvironment; <nl> 
mmm LoadFileInputData.java <nl> ppp LoadFileInputData.java <nl> - public String filecontent; <nl> + public byte[] filecontent; <nl> mmm JobEntryZipFileIT.java <nl> ppp JobEntryZipFileIT.java <nl> + final String zipPath = createTempZipFileName( "pdi-15013" ); <nl> - entry.processRowFile( new Job(), result, zipPath, null, null, tempFile.getAbsolutePath(), null, false ) ); <nl> 
mmm S3CsvInputMeta.java <nl> ppp S3CsvInputMeta.java <nl> + import org.pentaho.metastore.api.IMetaStore; <nl> + package org.pentaho.di.core.exception; <nl> + public class KettleRepositoryStatusException extends KettleException { <nl> + private static final long serialVersionUID = 4238089755373930933L; <nl> 
mmm GPLoadDialog.java <nl> ppp GPLoadDialog.java <nl> + private TextVar wNullAs; <nl> + wNullAs.addSelectionListener( lsDef ); <nl> + if ( input.getNullAs() != null ) { <nl> + wNullAs.setText( input.getNullAs() ); <nl> + } <nl> + inf.setNullAs( wNullAs.getText() ); <nl> + Label wlNullAs = new Label( wGPConfigTabComp, SWT.RIGHT ); <nl> 
new file <nl> ppp BrowseControllerTest.java <nl> + package org.pentaho.di.ui.repository.repositoryexplorer.controllers; <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> + import org.pentaho.di.repository.ObjectId; <nl> + import org.pentaho.di.ui.repository.repositoryexplorer.model.UIRepositoryDirectory; <nl> 
mmm TransExecutionConfigurationTest.java <nl> ppp TransExecutionConfigurationTest.java <nl> + @Test <nl> + public void testDefaultPassedBatchId() { <nl> + TransExecutionConfiguration tec = new TransExecutionConfiguration(); <nl> + assertEquals( "default passedBatchId value must be null", null, tec.getPassedBatchId() ); <nl> 
mmm TableView.java <nl> ppp TableView.java <nl> + } else { <nl> + widget.setItems( opt ); <nl> mmm StreamWindow.java <nl> ppp StreamWindow.java <nl> + import io.reactivex.Observable; <nl> - Iterable<O> buffer( Iterable<I> rowIterator ); <nl> + Iterable<O> buffer( Observable<I> observable ); <nl> mmm FileStreamTest.java <nl> 
mmm JsonOutputDialog.java <nl> ppp JsonOutputDialog.java <nl> - wCompatibilityMode <nl> - .setToolTipText( BaseMessages.getString( PKG, "JsonOutputDialog.CompatibilityMode.Tooltip" ) ); <nl> + wCompatibilityMode.setToolTipText( BaseMessages.getString( PKG, "JsonOutputDialog.CompatibilityMode.Tooltip" ) ); <nl> 
mmm ConnectionDialog.java <nl> ppp ConnectionDialog.java <nl> - private static final String LOCALHOST = "localhost"; <nl> + private static final String LOCALHOST = "127.0.0.1"; <nl> mmm SparkRunConfigurationUI.java <nl> ppp SparkRunConfigurationUI.java <nl> - import org.eclipse.swt.events.ModifyEvent; <nl> 
new file <nl> ppp MemoryGroupByTest.java <nl> + package org.pentaho.di.trans.steps.memgroupby; <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> + import org.pentaho.di.core.exception.KettleException; <nl> + import org.pentaho.di.core.row.RowMeta; <nl> + import org.pentaho.di.core.row.value.ValueMetaBinary; <nl> 
mmm ValueMetaBase.java <nl> ppp ValueMetaBase.java <nl> - try { <nl> - string = convertIntegerToCompatibleString( (Long) convertBinaryStringToNativeType( (byte[]) object ) ); <nl> - } catch ( ClassCastException e ) { <nl> - string = convertIntegerToCompatibleString( (Long) object ); <nl> - } <nl> + string = convertIntegerToCompatibleString( (Long) convertBinaryStringToNativeType( (byte[]) object ) ); <nl> 
new file <nl> ppp BeanInjectionInfo.java <nl> + package org.pentaho.di.core.injection.bean; <nl> + import java.util.ArrayList; <nl> + import java.util.Collections; <nl> + import java.util.HashMap; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import org.apache.commons.lang.StringUtils; <nl> 
mmm JobExecutorMetaTest.java <nl> ppp JobExecutorMetaTest.java <nl> + import org.pentaho.di.core.Const; <nl> + import org.pentaho.di.core.ObjectLocationSpecificationMethod; <nl> + import org.pentaho.di.core.variables.VariableSpace; <nl> + import org.pentaho.di.job.JobMeta; <nl> + import org.pentaho.di.repository.Repository; <nl> 
mmm KettleDatabaseRepository_GetObjectInformation_Test.java <nl> ppp KettleDatabaseRepository_GetObjectInformation_Test.java <nl> - import org.pentaho.di.repository.kdr.delegates.KettleDatabaseRepositoryDatabaseDelegate; <nl> - @Test <nl> - public void getObjectInformation_GetDatabaseInformation() throws Exception { <nl> 
deleted file <nl> mmm TextFormatter.java <nl> - package org.pentaho.di.ui.core.widget.text; <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - public class TextFormatter { <nl> - private List<FormatRule> rules = new ArrayList<>(); <nl> - public static TextFormatter instance; <nl> - public TextFormatter() { <nl> 
mmm KitchenCommandExecutor.java <nl> ppp KitchenCommandExecutor.java <nl> + getResult().setElapsedTimeMillis( stop.getTime() - start.getTime() ); <nl> mmm PanCommandExecutor.java <nl> ppp PanCommandExecutor.java <nl> + getResult().setElapsedTimeMillis( stop.getTime() - start.getTime() ); <nl> mmm GetTransStatusServlet.java <nl> 
mmm ValueMetaInterface.java <nl> ppp ValueMetaInterface.java <nl> + public boolean isCollatorDisabled(); <nl> + public void setCollatorDisabled( boolean collatorDisabled ); <nl> + public Locale getCollatorLocale(); <nl> + public void setCollatorLocale( Locale locale ); <nl> + public int getCollatorStrength(); <nl> 
mmm XMLOutput.java <nl> ppp XMLOutput.java <nl> + import org.pentaho.di.core.row.value.ValueMetaBase; <nl> - data.writer.writeAttribute( elementName, valueMeta.getString( valueData ) ); <nl> + if ( valueData != null ) { <nl> + data.writer.writeAttribute( elementName, valueMeta.getString( valueData ) ); <nl> 
new file <nl> ppp Slf4jLoggingEventListenerTest.java <nl> + package org.pentaho.di.core.logging; <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> + import org.mockito.Mock; <nl> + import org.mockito.runners.MockitoJUnitRunner; <nl> + import org.slf4j.Logger; <nl> 
mmm Spoon.java <nl> ppp Spoon.java <nl> + import org.pentaho.di.job.JobHopMeta; <nl> - if ( meta.hasMissingPlugins() ) { <nl> - MessageBox mb = new MessageBox( shell, SWT.OK | SWT.ICON_ERROR ); <nl> - mb.setMessage( BaseMessages.getString( PKG, "Spoon.ErrorDialog.MissingPlugin.Error" ) ); <nl> - mb.setText( BaseMessages.getString( PKG, "Spoon.ErrorDialog.MissingPlugin.Title" ) ); <nl> 
mmm TextFileInputMetaLoadSaveTest.java <nl> ppp TextFileInputMetaLoadSaveTest.java <nl> - import org.pentaho.di.trans.steps.fileinput.BaseFileInputField; <nl> - typeValidators.put( BaseFileInputField[].class.getCanonicalName(), new ArrayLoadSaveValidator<BaseFileInputField>( new TextFileInputFieldValidator() ) ); <nl> 
mmm KitchenCommandExecutor.java <nl> ppp KitchenCommandExecutor.java <nl> - Date start = Calendar.getInstance().getTime(); <nl> + Date start = Calendar.getInstance().getTime(); <nl> mmm VFSLocation.java <nl> ppp VFSLocation.java <nl> + @Override <nl> + public boolean isCanDelete() { <nl> + return false; <nl> 
mmm BaseRepositoryExplorerUISupport.java <nl> ppp BaseRepositoryExplorerUISupport.java <nl> + import org.pentaho.di.ui.repository.repositoryexplorer.controllers.NamedClustersController; <nl> + NamedClustersController namedClusterController = new NamedClustersController(); <nl> + handlers.add( namedClusterController ); <nl> 
mmm HTTPMeta.java <nl> ppp HTTPMeta.java <nl> + import org.pentaho.di.core.row.ValueMeta; <nl> + private String responseHeaderFieldName; <nl> + responseHeaderFieldName = ""; <nl> + String headerFieldName = space.environmentSubstitute( responseHeaderFieldName ); <nl> + if ( !Const.isEmpty( headerFieldName ) ) { <nl> 
mmm RepositoryOpenSaveExtensionPoint.java <nl> ppp RepositoryOpenSaveExtensionPoint.java <nl> - import org.pentaho.di.core.util.Utils; <nl> - import org.pentaho.di.repository.RepositoryObject; <nl> - import org.pentaho.di.repository.RepositoryObjectType; <nl> - import org.pentaho.di.ui.core.FileDialogOperation; <nl> 
deleted file <nl> mmm package-info.java <nl> - package samples.powermockito.junit4.bugs.github668;diff --git a/data/zhouhj/data3/powermock_git/1377/old/WhenNewCases.java b/data/zhouhj/data3/powermock_git/1377/new/WhenNewCases.java <nl> mmm WhenNewCases.java <nl> + import samples.expectnew.CreationException; <nl> 
new file <nl> ppp ConstructorObject.java <nl> + package samples.powermockito.junit4.bugs.github510; <nl> + public class ConstructorObject { <nl> + public String sayHello() { <nl> + return null; <nl> + } <nl> + } <nl> new file <nl> ppp LargeMethodInInterfaceTest.java <nl> + package org.powermock.modules.junit4.largemethod; <nl> 
mmm PerformanceTestNotNull.java <nl> ppp PerformanceTestNotNull.java <nl> - import java.util.List; <nl> - @Override <nl> - protected void accessAll(List<SimpleEntityNotNull> list, String traceName) { <nl> - startClock(traceName); <nl> - for (int i = 0; i < list.size(); i++) { <nl> - SimpleEntityNotNull entity = list.get(i); <nl> 
mmm XMLServerLoader.java <nl> ppp XMLServerLoader.java <nl> + import io.mycat.config.Versions; <nl> + if (system.getFakeMySQLVersion() != null) { <nl> + boolean validVersion = false; <nl> + String majorMySQLVersion = system.getFakeMySQLVersion(); <nl> + majorMySQLVersion = majorMySQLVersion.substring(0, majorMySQLVersion.indexOf(".", 2)); <nl> 
mmm DruidMysqlCreateTableTest.java <nl> ppp DruidMysqlCreateTableTest.java <nl> + import io.mycat.MycatServer; <nl> + 		MycatServer.getInstance().getConfig().getSchemas().putAll(schemaMap); <nl> mmm DruidMysqlSqlSubqueriesParserTest.java <nl> ppp DruidMysqlSqlSubqueriesParserTest.java <nl> + import io.mycat.MycatServer; <nl> 
mmm FrontendConnection.java <nl> ppp FrontendConnection.java <nl> + import io.mycat.net.mysql.CommandPacket; <nl> + import io.mycat.net.mysql.EOFPacket; <nl> + 	private boolean allowMultiStatements = false; <nl> + 	public boolean isAllowMultiStatements() { <nl> + 		return allowMultiStatements; <nl> + 	} <nl> 
mmm PartitionByMonth.java <nl> ppp PartitionByMonth.java <nl> + 	 <nl> + 	@Override <nl> + 	public int getPartitionNum() { <nl> + 		int nPartition = this.nPartition; <nl> + 		return nPartition; <nl> + 	} <nl> mmm PartitionByJumpConsistentHash.java <nl> ppp PartitionByJumpConsistentHash.java <nl> + 	@Override <nl> 
mmm NonBlockingSession.java <nl> ppp NonBlockingSession.java <nl> + LOGGER.warn("DEFAULT:Distributed transaction detected! Targets:" + target); <nl> mmm RollbackNodeHandler.java <nl> ppp RollbackNodeHandler.java <nl> + import io.mycat.backend.mysql.nio.MySQLConnection; <nl> - 				conn.rollback(); <nl> + 				MySQLConnection mysqlCon = (MySQLConnection) conn; <nl> 
mmm ServerParse.java <nl> ppp ServerParse.java <nl> + 	public static final int LOCK = 22; <nl> + 	public static final int UNLOCK = 23; <nl> - 				rt = loadDataCheck(stmt, i); <nl> + 				rt = lCheck(stmt, i); <nl> - 	static int loadDataCheck(String stmt, int offset) { <nl> + 	static int lCheck(String stmt, int offset) { <nl> 
new file <nl> ppp SequoiaData.java <nl> + package org.opencloudb.jdbc.sequoiadb; <nl> + import java.sql.Date; <nl> + import java.sql.Time; <nl> + import java.sql.Timestamp; <nl> + import java.sql.Types; <nl> + import java.util.HashMap; <nl> + import org.bson.BSONObject; <nl> + import org.bson.BasicBSONObject; <nl> 
mmm MultiNodeQueryHandler.java <nl> ppp MultiNodeQueryHandler.java <nl> - 						 String rowValue =  ResultSetUtil.getColumnValAsString(row, fields, 0); <nl> + 						 byte[] rv = ResultSetUtil.getColumnVal(row, fields, 0); <nl> + 						 String rowValue =  rv==null?null:new String(rv); <nl> mmm MiddlerResultHandler.java <nl> 
mmm AIOSocketWR.java <nl> ppp AIOSocketWR.java <nl> - theBuffer = con.processor.getBufferPool().allocate(); <nl> + theBuffer = con.processor.getBufferPool().allocate(con.processor.getBufferPool().getChunkSize()); <nl> mmm DistributedSequenceHandler.java <nl> ppp DistributedSequenceHandler.java <nl> - import java.util.HashSet; <nl> 
mmm UserSqlStat.java <nl> ppp UserSqlStat.java <nl> - public class SqlStat { <nl> + public class UserSqlStat { <nl> - 	public SqlStat(int count) {		 <nl> + 	public UserSqlStat(int count) {		 <nl> - public void add(String sql, long startTime, long executeTime ) { <nl> + public void add(String sql,  long executeTime, long startTime, long endTime ) { <nl> 
new file <nl> ppp MigrateUtilsTest.java <nl> + package io.mycat.server.handler; <nl> + import com.google.common.collect.Lists; <nl> + import io.mycat.route.function.PartitionByCRC32PreSlot; <nl> + import org.junit.Assert; <nl> + import org.junit.Test; <nl> + import java.util.*; <nl> + import static io.mycat.route.function.PartitionByCRC32PreSlot.Range; <nl> 
mmm NIOConnector.java <nl> ppp NIOConnector.java <nl> - import org.slf4j.Logger; import org.slf4j.LoggerFactory; <nl> + import org.slf4j.Logger; <nl> + import org.slf4j.LoggerFactory; <nl> + import io.mycat.util.SelectorUtil; <nl> - 	private final Selector selector; <nl> + 	private volatile Selector selector; <nl> 
deleted file <nl> mmm IBaseView.java <nl> - package com.blankj.base; <nl> - import android.os.Bundle; <nl> - import android.support.annotation.Nullable; <nl> - import android.view.View; <nl> - interface IBaseView extends View.OnClickListener { <nl> - void initData(@Nullable final Bundle bundle); <nl> - int bindLayout(); <nl> 
mmm LogUtilsTest.java <nl> ppp LogUtilsTest.java <nl> - LogUtils.v(null); <nl> + LogUtils.v((Object) null); <nl> - LogUtils.vTag("TAG", null); <nl> + LogUtils.vTag("TAG", (Object) null); <nl> - LogUtils.d(null); <nl> + LogUtils.d((Object) null); <nl> - LogUtils.dTag("TAG", null); <nl> + LogUtils.dTag("TAG", (Object) null); <nl> 
mmm FileUtilsTest.java <nl> ppp FileUtilsTest.java <nl> - import static com.blankj.utilcode.util.TestUtils.SEP; <nl> + import static com.blankj.utilcode.util.TestUtils.FILE_SEP; <nl> + public final class PermissionUtils { <nl> + private static int mRequestCode = -1; <nl> + private static OnPermissionListener mOnPermissionListener; <nl> 
deleted file <nl> mmm Request.java <nl> - package com.blankj.utilcode.util.http; <nl> - import android.support.annotation.NonNull; <nl> - import java.io.BufferedInputStream; <nl> - import java.io.ByteArrayInputStream; <nl> - import java.io.InputStream; <nl> - import java.io.UnsupportedEncodingException; <nl> 
new file <nl> ppp ResponseCallback.java <nl> + package com.blankj.utilcode.util.http; <nl> + public abstract class ResponseCallback { <nl> + public abstract void onResponse(Response response); <nl> + public abstract void onFailed(Exception e); <nl> + } <nl> new file <nl> ppp SSLConfig.java <nl> + package com.blankj.utilcode.util.http; <nl> 
mmm AppUtils.java <nl> ppp AppUtils.java <nl> + private String packagePath; <nl> + public String getPackagePath() { <nl> + return packagePath; <nl> + } <nl> + public void setPackagePath(String packagePath) { <nl> + this.packagePath = packagePath; <nl> + } <nl> + * @param packagePath 包路径 <nl> - public AppInfo(String name, Drawable icon, String packageName, <nl> 
new file <nl> ppp ExecutorFactory.java <nl> + package com.blankj.utilcode.util.http; <nl> + import android.os.Handler; <nl> + import android.os.Looper; <nl> + import android.support.annotation.NonNull; <nl> + import java.util.concurrent.Executor; <nl> + import java.util.concurrent.LinkedBlockingQueue; <nl> + import java.util.concurrent.ThreadFactory; <nl> 
mmm TimeUtilsTest.java <nl> ppp TimeUtilsTest.java <nl> - assertEquals(TimeUtils.string2Millis("2017-05-04 16:37", "yyyy-MM-dd HH:mm"), <nl> - TimeUtils.string2Millis("2017年05月04日16时37分", "yyyy年MM月dd日HH时mm分")); <nl> + assertEquals(timeMillis, TimeUtils.string2Millis(timeStringFormat, "yyyy年MM月dd日HH时mm分")); <nl> 
mmm UtilsApp.java <nl> ppp UtilsApp.java <nl> + import java.util.ArrayList; <nl> + import java.util.Arrays; <nl> + import java.util.Collection; <nl> + import java.util.Collections; <nl> + import java.util.LinkedList; <nl> + import java.util.List; <nl> - @RunWith(RobolectricTestRunner.class) <nl> - @Config(manifest = Config.NONE) <nl> 
mmm ToastActivity.java <nl> ppp ToastActivity.java <nl> - *     desc  : 吐司测试 <nl> + *     desc  : Toast工具类测试 <nl> mmm HandlerActivity.java <nl> ppp HandlerActivity.java <nl> - *     desc : Device工具类测试 <nl> + *     desc : Handler工具类测试 <nl> mmm LocationActivity.java <nl> ppp LocationActivity.java <nl> + import android.content.Context; <nl> 
mmm NotificationHandler.java <nl> ppp NotificationHandler.java <nl> - import android.view.inputmethod.EditorInfo; <nl> - import android.widget.TextView; <nl> - import java.lang.reflect.InvocationTargetException; <nl> - public static boolean DOPEN_NOT_DEAL = false; <nl> - public static boolean SYSTEM_NOTIFICATION = false; <nl> 
mmm BinderDelegateService.java <nl> ppp BinderDelegateService.java <nl> - import com.lody.virtual.service.am.ServiceRecord; <nl> - private ServiceRecord record; <nl> + private IBinder service; <nl> - public BinderDelegateService(ComponentName name, ServiceRecord record) { <nl> + public BinderDelegateService(ComponentName name, IBinder service) { <nl> 
deleted file <nl> mmm TransmitRegistryCallback.java <nl> - package com.alipay.sofa.rpc.transmit.registry; <nl> - import java.util.List; <nl> - public interface TransmitRegistryCallback { <nl> - void handleData(String dataId, List<String> strings); <nl> - void addData(String dataId, String add); <nl> - void deleteData(String dataId, String delete); <nl> 
new file <nl> ppp DubboConvertor.java <nl> + package com.alipay.sofa.rpc.bootstrap.dubbo; <nl> + import com.alipay.sofa.rpc.common.utils.CommonUtils; <nl> + import com.alipay.sofa.rpc.config.RegistryConfig; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + public class DubboConvertor { <nl> 
mmm MmsSmsDatabase.java <nl> ppp MmsSmsDatabase.java <nl> + public @Nullable MessageRecord getMessageRecord(long messageId) { <nl> + try { <nl> + return DatabaseFactory.getSmsDatabase(context).getMessage(messageId); <nl> + } catch (NoSuchMessageException e1) { <nl> + try { <nl> + return DatabaseFactory.getMmsDatabase(context).getMessageRecord(messageId); <nl> 
mmm DatabaseAttachment.java <nl> ppp DatabaseAttachment.java <nl> - byte[] digest, String fastPreflightId, boolean voiceNote) <nl> + byte[] digest, String fastPreflightId, boolean voiceNote, <nl> + int width, int height) <nl> - super(contentType, transferProgress, size, fileName, location, key, relay, digest, fastPreflightId, voiceNote); <nl> 
mmm ApplicationPreferencesActivity.java <nl> ppp ApplicationPreferencesActivity.java <nl> + import android.provider.ContactsContract; <nl> + import org.thoughtcrime.securesms.contacts.ContactIdentityManager; <nl> + import java.util.List; <nl> - public abstract class ContactAccessor { <nl> - public static final int UNIQUE_ID    = 0; <nl> 
mmm BasicIntroFragment.java <nl> ppp BasicIntroFragment.java <nl> - text     = getArguments().getInt(ARG_TEXT    ); <nl> - subtext  = getArguments().getInt(ARG_SUBTEXT ); <nl> + text     = getArguments().getInt(ARG_TEXT); <nl> + subtext  = getArguments().getInt(ARG_SUBTEXT); <nl> mmm ApplicationDependencies.java <nl> 
new file <nl> ppp MessageDetailsActivity.java <nl> + package org.thoughtcrime.securesms.messagedetails; <nl> + import android.graphics.drawable.ColorDrawable; <nl> + import android.os.Build; <nl> + import android.os.Bundle; <nl> + import android.view.MenuItem; <nl> + import androidx.lifecycle.ViewModelProviders; <nl> 
mmm RegistrationProgressActivity.java <nl> ppp RegistrationProgressActivity.java <nl> - import org.thoughtcrime.securesms.util.Dialogs; <nl> - Dialogs.showAlertDialog(this,                         getString(R.string.RegistrationProgressActivity_registration_conflict), <nl> + Util.showAlertDialog(this,                         getString(R.string.RegistrationProgressActivity_registration_conflict), <nl> 
new file <nl> ppp ViewOnceSlide.java <nl> + package org.thoughtcrime.securesms.mms; <nl> + import android.content.Context; <nl> + import android.net.Uri; <nl> + import androidx.annotation.NonNull; <nl> + import androidx.annotation.Nullable; <nl> + import org.thoughtcrime.securesms.attachments.Attachment; <nl> 
mmm JobMigrator.java <nl> ppp JobMigrator.java <nl> + jobSpec.getSerializedInputData(), <nl> mmm JobSpec.java <nl> ppp JobSpec.java <nl> + private final String  serializedInputData; <nl> + @Nullable String serializedInputData, <nl> - this.id                 = id; <nl> - this.factoryKey         = factoryKey; <nl> 
mmm GiphyLoader.java <nl> ppp GiphyLoader.java <nl> + import org.thoughtcrime.securesms.push.SignalServiceNetworkAccess; <nl> + .dns(SignalServiceNetworkAccess.DNS) <nl> new file <nl> ppp StaticDns.java <nl> + package org.thoughtcrime.securesms.net; <nl> + import androidx.annotation.NonNull; <nl> + import java.net.InetAddress; <nl> 
mmm StickerPreviewPopup.java <nl> ppp StickerPreviewPopup.java <nl> + import com.bumptech.glide.load.engine.DiskCacheStrategy; <nl> + .diskCacheStrategy(DiskCacheStrategy.NONE) <nl> mmm SignalGlideModule.java <nl> ppp SignalGlideModule.java <nl> mmm ConversationActivity.java <nl> ppp ConversationActivity.java <nl> 
new file <nl> ppp MigrationCompleteEvent.java <nl> + package org.thoughtcrime.securesms.migrations; <nl> + public class MigrationCompleteEvent { <nl> + private final int version; <nl> + public MigrationCompleteEvent(int version) { <nl> + this.version = version; <nl> + } <nl> + public int getVersion() { <nl> + return version; <nl> 
new file <nl> ppp UnsupportedDataMessageProtocolVersionException.java <nl> + package org.whispersystems.signalservice.internal.push; <nl> + import org.whispersystems.libsignal.util.guava.Optional; <nl> + import org.whispersystems.signalservice.api.messages.SignalServiceGroupContext; <nl> + public final class UnsupportedDataMessageProtocolVersionException extends UnsupportedDataMessageException { <nl> 
mmm ThreadDatabase.java <nl> ppp ThreadDatabase.java <nl> - import org.signal.storageservice.protos.groups.local.DecryptedGroup; <nl> - import org.signal.storageservice.protos.groups.local.DecryptedMember; <nl> - import org.whispersystems.signalservice.api.groupsv2.DecryptedGroupUtil; <nl> - import org.whispersystems.signalservice.api.util.UuidUtil; <nl> 
mmm SessionBuilder.java <nl> ppp SessionBuilder.java <nl> - import java.security.MessageDigest; <nl> - boolean hasVerification(); <nl> - com.google.protobuf.ByteString getVerification(); <nl> - public boolean hasVerification() { <nl> - return ((bitField0_ & 0x00001000) == 0x00001000); <nl> - } <nl> - public com.google.protobuf.ByteString getVerification() { <nl> 
mmm RecipientDatabase.java <nl> ppp RecipientDatabase.java <nl> + import java.io.Closeable; <nl> + private static final String NOTIFICATION_CHANNEL    = "notification_channel"; <nl> - SIGNAL_PROFILE_NAME, SIGNAL_PROFILE_AVATAR, PROFILE_SHARING <nl> + SIGNAL_PROFILE_NAME, SIGNAL_PROFILE_AVATAR, PROFILE_SHARING, NOTIFICATION_CHANNEL <nl> 
mmm SignalGroupV2Record.java <nl> ppp SignalGroupV2Record.java <nl> - import org.whispersystems.signalservice.internal.storage.protos.GroupV1Record; <nl> + import org.whispersystems.signalservice.api.util.ProtoUtil; <nl> + private final boolean        hasUnknownFields; <nl> - this.id        = id; <nl> - this.proto     = proto; <nl> 
mmm PushServiceSocket.java <nl> ppp PushServiceSocket.java <nl> - public void setProfileAvatar(ProfileAvatarData profileAvatar) <nl> + public String setProfileAvatar(ProfileAvatarData profileAvatar) <nl> + return formAttributes.getKey(); <nl> + return null; <nl> - public void writeProfile(SignalServiceProfileWrite signalServiceProfileWrite, ProfileAvatarData profileAvatar) <nl> 
mmm Recipients.java <nl> ppp Recipients.java <nl> + import android.util.Log; <nl> - if (scrub && number != null && !Patterns.EMAIL_ADDRESS.matcher(number).matches()) { <nl> + if (scrub && number != null && <nl> + !Patterns.EMAIL_ADDRESS.matcher(number).matches() && <nl> + !GroupUtil.isEncodedGroup(number)) <nl> 
mmm DirectProcessor.java <nl> ppp DirectProcessor.java <nl> mmm UnicastProcessor.java <nl> ppp UnicastProcessor.java <nl> mmm GuideTests.java <nl> ppp GuideTests.java <nl> mmm FluxMergeOrdered.java <nl> ppp FluxMergeOrdered.java <nl> mmm package-info.java <nl> ppp package-info.java <nl> mmm FluxOnAssemblyTest.java <nl> 
mmm FluxPublishOnLoop.java <nl> ppp FluxPublishOnLoop.java <nl> - import java.time.Duration; <nl> - import org.junit.Assert; <nl> - import reactor.test.subscriber.AssertSubscriber; <nl> + import reactor.test.StepVerifier; <nl> + import java.util.concurrent.atomic.AtomicBoolean; <nl> + import java.util.concurrent.atomic.AtomicInteger; <nl> 
mmm Mono.java <nl> ppp Mono.java <nl> + import reactor.core.state.Completable; <nl> - public abstract class Mono<T> implements Publisher<T>, Backpressurable, Introspectable { <nl> + public abstract class Mono<T> implements Publisher<T>, Backpressurable, Introspectable, Supplier<T>, <nl> + Completable { <nl> 
mmm FluxProcessor.java <nl> ppp FluxProcessor.java <nl> - *  flux.dispatchOn(ProcessorGroup.io()) ou <nl> + *  flux.dispatchOn(SchedulerGroup.io()) ou <nl> - 	protected static final Runnable NOOP_CANCEL = new Runnable() { <nl> - 		@Override <nl> - 		public void run() { <nl> - 		} <nl> - 	}; <nl> + 	public static <IN> FluxProcessor<IN, IN> async(final SchedulerGroup group) { <nl> 
mmm HooksTest.java <nl> ppp HooksTest.java <nl> - import org.junit.After; <nl> - 	@After <nl> - 	public void resetAllHooks() { <nl> - 		Hooks.resetOnOperatorError(); <nl> - 		Hooks.resetOnNextDropped(); <nl> - 		Hooks.resetOnErrorDropped(); <nl> - 		Hooks.resetOnOperatorDebug(); <nl> - 		Hooks.resetOnEachOperator(); <nl> 
mmm RingBuffer.java <nl> ppp RingBuffer.java <nl> - import reactor.util.Exceptions; <nl> - 	 * @throws Exceptions.InsufficientCapacityException if the necessary space in the ring buffer is not available <nl> + 	 * @throws InsufficientCapacityException if the necessary space in the ring buffer is not available <nl> 
mmm MonoSink.java <nl> ppp MonoSink.java <nl> - 	MonoSink<T> onTerminate(Disposable d); <nl> + 	MonoSink<T> onDispose(Disposable d); <nl> - import java.util.concurrent.atomic.AtomicBoolean; <nl> - 		AtomicInteger onTerminate = new AtomicInteger(); <nl> + 		AtomicInteger onDispose = new AtomicInteger(); <nl> 
mmm ExcelWriterSheetBuilder.java <nl> ppp ExcelWriterSheetBuilder.java <nl> + public void doFill(Object data) { <nl> + if (excelWriter == null) { <nl> + throw new ExcelGenerateException("Must use 'EasyExcelFactory.write().sheet()' to call this method"); <nl> + } <nl> + excelWriter.fill(data, build()); <nl> 
mmm BatchExecutor.java <nl> ppp BatchExecutor.java <nl> + int i = idx.incrementAndGet(); <nl> + if (i == 1) { <nl> + executor.submit(() -> { <nl> + try { <nl> + commitLock.lock(); <nl> + if (!condition.await(5, TimeUnit.SECONDS)) { <nl> + commit(); <nl> + } <nl> + } catch (Exception e) { <nl> + logger.error(e.getMessage(), e); <nl> 
mmm MysqlEventParserTest.java <nl> ppp MysqlEventParserTest.java <nl> - import static junit.framework.Assert.assertEquals; <nl> - import static junit.framework.Assert.assertTrue; <nl> - import junit.framework.Assert; <nl> + import org.junit.Assert; <nl> - assertTrue(entryCount.get() > 0); <nl> + Assert.assertTrue(entryCount.get() > 0); <nl> 
new file <nl> ppp TableMetaEntry.java <nl> + package com.alibaba.otter.canal.parse.inbound.mysql.tablemeta; <nl> + import java.io.Serializable; <nl> + public class TableMetaEntry implements Serializable { <nl> + private static final long serialVersionUID = -1350200637109107904L; <nl> + private String dbAddress; <nl> 
new file <nl> ppp ESTemplate.java <nl> + package com.alibaba.otter.canal.client.adapter.es.support; <nl> + import java.util.Collections; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + import java.util.concurrent.TimeUnit; <nl> + import java.util.function.Consumer; <nl> + import org.elasticsearch.action.bulk.BulkItemResponse; <nl> 
mmm AbstractEventParser.java <nl> ppp AbstractEventParser.java <nl> - LogPosition position = buildLastTranasctionPosition(transaction); <nl> + LogPosition position = buildLastTransactionPosition(transaction); <nl> + Thread.interrupted(); <nl> - LogPosition logPosition = new LogPosition(); <nl> - EntryPosition position = new EntryPosition(); <nl> 
mmm SyncUtil.java <nl> ppp SyncUtil.java <nl> - import java.io.Reader; <nl> - import java.io.StringReader; <nl> - import java.math.BigDecimal; <nl> - import java.nio.charset.StandardCharsets; <nl> - import java.sql.*; <nl> - import org.joda.time.DateTime; <nl> - public static void setPStmt(int type, PreparedStatement pstmt, Object value, int i) throws SQLException { <nl> 
mmm CollapsingTextHelper.java <nl> ppp CollapsingTextHelper.java <nl> - import android.support.design.motion.AnimationUtils; <nl> + import android.support.design.animation.AnimationUtils; <nl> mmm FloatingActionButtonImpl.java <nl> ppp FloatingActionButtonImpl.java <nl> - import android.support.design.motion.AnimationUtils; <nl> 
mmm TabLayout.java <nl> ppp TabLayout.java <nl> - mScrollAnimator.setUpdateListener(new ValueAnimatorCompat.AnimatorUpdateListener() { <nl> + mScrollAnimator.addUpdateListener(new ValueAnimatorCompat.AnimatorUpdateListener() { <nl> - animator.setUpdateListener(new ValueAnimatorCompat.AnimatorUpdateListener() { <nl> 
new file <nl> ppp InterpolateOnScrollPositionChangeHelper.java <nl> + package android.support.design.shape; <nl> + import android.view.View; <nl> + import android.view.ViewTreeObserver; <nl> + import android.view.ViewTreeObserver.OnScrollChangedListener; <nl> + import android.widget.ScrollView; <nl> + public class InterpolateOnScrollPositionChangeHelper { <nl> 
new file <nl> ppp DummyAlertFilter.java <nl> + package com.linkedin.thirdeye.detector.email.filter; <nl> + import com.linkedin.thirdeye.datalayer.dto.MergedAnomalyResultDTO; <nl> + import java.util.Collections; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import java.util.Properties; <nl> 
mmm PercentileTDigestQueriesTest.java <nl> ppp PercentileTDigestQueriesTest.java <nl> - BrokerResponseNative brokerResponse = getBrokerResponseForQuery(getAggregationQuery(percentile)); <nl> + BrokerResponseNative brokerResponse = getBrokerResponseForPqlQuery(getAggregationQuery(percentile)); <nl> - BrokerResponseNative brokerResponse = getBrokerResponseForQuery(getGroupByQuery(percentile)); <nl> 
mmm FixedByteWidthRowColDataFileWriterTest.java <nl> ppp FixedByteWidthRowColDataFileWriterTest.java <nl> - public class TestFixedByteWidthRowColDataFileWriter { <nl> + public class FixedByteWidthRowColDataFileWriterTest { <nl> new file <nl> ppp FixedByteSkipListSCMVReaderTest.java <nl> + package com.linkedin.pinot.index.reader; <nl> 
new file <nl> ppp PinotFSFactoryTest.java <nl> + package com.linkedin.pinot.filesystem; <nl> + import java.io.File; <nl> + import java.io.IOException; <nl> + import java.lang.reflect.Constructor; <nl> + import java.net.URI; <nl> + import org.apache.commons.configuration.Configuration; <nl> + import org.apache.commons.configuration.PropertiesConfiguration; <nl> 
mmm RealtimeSegmentTest.java <nl> ppp RealtimeSegmentTest.java <nl> - provider.init(config); <nl> + final String tableName = RealtimeSegmentTest.class.getSimpleName() + ".noTable"; <nl> + provider.init(config, tableName); <nl> - segment = new RealtimeSegmentImpl(schema, 100000); <nl> + segment = new RealtimeSegmentImpl(schema, 100000, tableName, "noSegment", AVRO_DATA); <nl> 
mmm BloomFilterConfig.java <nl> ppp BloomFilterConfig.java <nl> + private final int _maxSizeInBytes; <nl> + private final boolean _loadOnHeap; <nl> - public BloomFilterConfig(@JsonProperty(value = "fpp", required = true) double fpp) { <nl> - Preconditions.checkArgument(fpp > 0.0 && fpp < 1.0, "Invalid fpp (false positive probability): %s", fpp); <nl> 
new file <nl> ppp TestStarTreeMetadata.java <nl> + package com.linkedin.pinot.core.startree; <nl> + import com.linkedin.pinot.common.data.StarTreeIndexSpec; <nl> + import com.linkedin.pinot.common.segment.StarTreeMetadata; <nl> + import com.linkedin.pinot.core.indexsegment.IndexSegment; <nl> + import com.linkedin.pinot.core.indexsegment.generator.SegmentGeneratorConfig; <nl> 
new file <nl> ppp OnHeapGuavaBloomFilterCreator.java <nl> + package org.apache.pinot.core.segment.creator.impl.bloom; <nl> + import com.google.common.hash.BloomFilter; <nl> + import com.google.common.hash.Funnels; <nl> + import java.io.DataOutputStream; <nl> + import java.io.File; <nl> + import java.io.FileOutputStream; <nl> 
new file <nl> ppp DetectionOnboardResourceTest.java <nl> + package com.linkedin.thirdeye.anomaly.onboard; <nl> + import com.fasterxml.jackson.databind.ObjectMapper; <nl> + import com.linkedin.thirdeye.anomaly.job.JobConstants; <nl> + import java.io.IOException; <nl> + import java.util.Collections; <nl> + import java.util.Map; <nl> 
mmm StreamConsumerFactory.java <nl> ppp StreamConsumerFactory.java <nl> - public abstract StreamConsumer createStreamConsumer(String clientId, int partition); <nl> + public abstract PartitionLevelConsumer createPartitionLevelConsumer(String clientId, int partition); <nl> + public abstract StreamLevelConsumer createStreamLevelConsumer(String clientId); <nl> 
mmm TimeBasedAnomalyMerger.java <nl> ppp TimeBasedAnomalyMerger.java <nl> - import com.linkedin.pinot.pql.parsers.utils.Pair; <nl> - import com.linkedin.thirdeye.anomaly.detection.TimeSeriesUtil; <nl> - import com.linkedin.thirdeye.anomaly.override.OverrideConfigHelper; <nl> + import com.linkedin.thirdeye.anomaly.detection.AnomalyDetectionInputContextBuilder; <nl> 
mmm BalancedRandomRoutingTableBuilderTest.java <nl> ppp BalancedRandomRoutingTableBuilderTest.java <nl> - new RoutingConfig(null, Collections.singletonMap(RoutingConfig.ENABLE_DYNAMIC_COMPUTING_KEY, "true"))) <nl> - .build(); <nl> + new RoutingConfig(null, Collections.singletonMap(RoutingConfig.ENABLE_DYNAMIC_COMPUTING_KEY, "true"), null, <nl> 
mmm MinionStarter.java <nl> ppp MinionStarter.java <nl> - CommonConstants.Minion.INSTANCE_PREFIX + NetUtil.getHostAddress() + "_" <nl> + CommonConstants.Helix.PREFIX_OF_MINION_INSTANCE + NetUtil.getHostAddress() + "_" <nl> + CommonConstants.Minion.DEFAULT_HELIX_PORT); <nl> - final MinionMetrics minionMetrics = new MinionMetrics( <nl> 
mmm DateTimeFieldSpec.java <nl> ppp DateTimeFieldSpec.java <nl> + import javax.annotation.Nullable; <nl> + public DateTimeFieldSpec(String name, DataType dataType, String format, String granularity, <nl> + @Nullable Object defaultNullValue, @Nullable String transformFunction) { <nl> + this(name, dataType, format, granularity); <nl> 
new file <nl> ppp STLTest.java <nl> + package com.linkedin.thirdeye.anomaly.lib.scanstatistics; <nl> + import java.io.BufferedWriter; <nl> + import java.io.File; <nl> + import java.io.FileOutputStream; <nl> + import java.io.IOException; <nl> + import java.io.OutputStream; <nl> + import java.io.OutputStreamWriter; <nl> 
new file <nl> ppp SummaryResource.java <nl> + package com.linkedin.thirdeye.dashboard.resources; <nl> + import com.linkedin.thirdeye.constant.MetricAggFunction; <nl> + import java.util.Arrays; <nl> + import java.util.List; <nl> + import javax.ws.rs.DefaultValue; <nl> + import javax.ws.rs.GET; <nl> + import javax.ws.rs.Path; <nl> 
mmm FixedByteSingleValueMultiColReader.java <nl> ppp FixedByteSingleValueMultiColReader.java <nl> - indexDataBuffer.copyTo(offset, dst); <nl> + indexDataBuffer.copyTo(offset, dst, 0, length); <nl> mmm DimensionBuffer.java <nl> ppp DimensionBuffer.java <nl> - import com.linkedin.pinot.core.segment.creator.impl.V1Constants; <nl> 
mmm QueryRunner.java <nl> ppp QueryRunner.java <nl> + import com.linkedin.pinot.tools.perf.PerfBenchmarkDriver; <nl> + import com.linkedin.pinot.tools.perf.PerfBenchmarkDriverConf; <nl> - import java.util.concurrent.TimeUnit; <nl> mmm ClusterStarter.java <nl> ppp ClusterStarter.java <nl> + import com.linkedin.pinot.tools.perf.PerfBenchmarkDriver; <nl> 
mmm PqlUtilsTest.java <nl> ppp PqlUtilsTest.java <nl> - public void getBetweenClause(DateTime start, DateTime end, TimeSpec timeFieldSpec, String expected) throws ExecutionException { <nl> - String betweenClause = PqlUtils.getBetweenClause(start, end, timeFieldSpec, "collection"); <nl> + public void getBetweenClause(DateTime start, DateTime end, TimeSpec timeSpec, String expected) throws ExecutionException { <nl> 
mmm TestSegmentAssignmentStrategy.java <nl> ppp TestSegmentAssignmentStrategy.java <nl> + import com.linkedin.pinot.requestHandler.BrokerRequestUtils; <nl> + final String zkPath = "/" + HELIX_CLUSTER_NAME; <nl> + if (_zkClient.exists(zkPath)) { <nl> + _zkClient.deleteRecursive(zkPath); <nl> + } <nl> - addOneSegment(RESOURCE_NAME_RANDOM); <nl> 
mmm DefaultOfflineRoutingTableBuilder.java <nl> ppp DefaultOfflineRoutingTableBuilder.java <nl> - public class DefaultOfflineRoutingTableBuilder extends BaseRoutingTableBuilder { <nl> + public class DefaultOfflineRoutingTableBuilder implements RoutingTableBuilder { <nl> - public void computeRoutingTableFromExternalView(String tableName, ExternalView externalView, <nl> 
new file <nl> ppp StarTreeGeneratorStandalone.java <nl> + package com.linkedin.thirdeye.tools; <nl> + import java.io.File; <nl> + import java.io.FileInputStream; <nl> + import java.io.IOException; <nl> + import java.util.ArrayList; <nl> + import java.util.HashMap; <nl> + import java.util.List; <nl> + import org.apache.hadoop.conf.Configuration; <nl> 
mmm IntermediateResultsBlock.java <nl> ppp IntermediateResultsBlock.java <nl> + public IntermediateResultsBlock() { <nl> + } <nl> - if (_processingExceptions != null && _processingExceptions.size() > 0) { <nl> - return getProcessingExceptionsDataTable(); <nl> - } <nl> - throw new UnsupportedOperationException("No data inside IntermediateResultsBlock."); <nl> 
mmm ScatterGatherImpl.java <nl> ppp ScatterGatherImpl.java <nl> - import java.util.ArrayList; <nl> - import java.util.Arrays; <nl> - import java.util.HashMap; <nl> - import java.util.List; <nl> - import java.util.Map; <nl> - import java.util.Map.Entry; <nl> - import java.util.concurrent.CountDownLatch; <nl> - import java.util.concurrent.ExecutorService; <nl> 
mmm ThirdEyeClient.java <nl> ppp ThirdEyeClient.java <nl> + import com.linkedin.thirdeye.detector.ThirdEyeDetectorConfiguration; <nl> mmm ThirdEyeDetectorApplication.java <nl> ppp ThirdEyeDetectorApplication.java <nl> + import java.io.File; <nl> + import com.linkedin.thirdeye.client.pinot.PinotThirdEyeClientConfig; <nl> 
mmm SegmentCreationJob.java <nl> ppp SegmentCreationJob.java <nl> - import org.apache.hadoop.fs.permission.FsPermission; <nl> - import org.apache.pinot.hadoop.job.mapper.SegmentCreationMapper; <nl> + import org.apache.pinot.hadoop.job.mappers.SegmentCreationMapper; <nl> + import org.apache.pinot.hadoop.utils.JobPreparationHelper; <nl> 
mmm AbstractManager.java <nl> ppp AbstractManager.java <nl> + import org.apache.commons.lang3.NotImplementedException; <nl> + default List<E> findByPredicateJsonVal(Predicate predicate) { <nl> + throw new NotImplementedException("Not Implemented"); <nl> + } <nl> + default List<E> list(long limit, long offset) { <nl> 
mmm DetectionTaskRunner.java <nl> ppp DetectionTaskRunner.java <nl> + import org.apache.commons.lang.NullArgumentException; <nl> + if (datasetConfig == null) { <nl> + LOG.error("Dataset [" + dataset + "] is not found"); <nl> + throw new NullArgumentException( <nl> + "Dataset [" + dataset + "] is not found with function : " + anomalyFunctionSpec <nl> 
mmm OfflineClusterIntegrationTest.java <nl> ppp OfflineClusterIntegrationTest.java <nl> + @Test <nl> + public void testCaseStatementWithLogicalTransformFunction() <nl> + throws Exception { <nl> + String sqlQuery = <nl> + "SELECT ArrDelay" <nl> + + ", CASE WHEN ArrDelay > 50 OR ArrDelay < 10 THEN 10 ELSE 0 END" <nl> 
new file <nl> ppp FixedBitIntReaderTest.java <nl> + package org.apache.pinot.core.io.reader.impl; <nl> + import java.io.File; <nl> + import java.io.IOException; <nl> + import java.util.Random; <nl> + import org.apache.commons.io.FileUtils; <nl> + import org.apache.pinot.core.io.writer.impl.FixedBitSVForwardIndexWriter; <nl> 
mmm GitHuntNavigator.java <nl> ppp GitHuntNavigator.java <nl> - package com.example.apollographql.sample.feed; <nl> + package com.apollographql.apollo.sample.feed; <nl> mmm RxApollo.java <nl> ppp RxApollo.java <nl> - package com.apollographql.android.rx; <nl> + package com.apollographql.apollo.rx; <nl> mmm GitHuntApplication.java <nl> 
mmm NoOpApolloStore.java <nl> ppp NoOpApolloStore.java <nl> + import com.apollographql.apollo.cache.normalized.ApolloStoreOperation; <nl> - @Override public void clearAll() { <nl> + @Nonnull @Override public ApolloStoreOperation<Boolean> clearAll() { <nl> + return ApolloStoreOperation.emptyOperation(Boolean.FALSE); <nl> 
mmm RealResponseReader.java <nl> ppp RealResponseReader.java <nl> - private final Operation operation; <nl> + private final Operation.Variables operationVariables; <nl> - public RealResponseReader(Operation operation, R recordSet, FieldValueResolver<R> fieldValueResolver, <nl> - Map<ScalarType, CustomTypeAdapter> customTypeAdapters, ResponseReaderShadow<R> readerShadow) { <nl> 
mmm ResponseReader.java <nl> ppp ResponseReader.java <nl> - <T> T readConditional(ResponseField.ConditionalTypeField field, ConditionalTypeReader<T> conditionalTypeReader); <nl> + <T> T readConditional(ResponseField field, ConditionalTypeReader<T> conditionalTypeReader); <nl> mmm ResponseField.java <nl> ppp ResponseField.java <nl> 
mmm ApolloServerInterceptor.java <nl> ppp ApolloServerInterceptor.java <nl> - static final String HEADER_CONTENT_TYPE = "Content-Type"; <nl> + static final String HEADER_CONTENT_TYPE = "CONTENT_TYPE"; <nl> - jsonWriter.name("operationName").value(operation.name().name()); <nl> mmm OperationServerMessage.java <nl> 
mmm AndroidEditor.java <nl> ppp AndroidEditor.java <nl> - Build build = new Build(sketch); <nl> + JavaBuild build = new JavaBuild(sketch); <nl> - Build build = new Build(sketch); <nl> + JavaBuild build = new JavaBuild(sketch); <nl> - Build build = new Build(sketch); <nl> + JavaBuild build = new JavaBuild(sketch); <nl> 
mmm PApplet.java <nl> ppp PApplet.java <nl> mmm ContributionPanel.java <nl> ppp ContributionPanel.java <nl> - updateButton.setEnabled(!contribListing.hasListDownloadFailed()); <nl> - installRemoveButton.setEnabled(installRemoveButton.getText().equals(Language.text("contrib.remove")) ||!contribListing.hasListDownloadFailed()); <nl> 
mmm LocalContribution.java <nl> ppp LocalContribution.java <nl> - import java.awt.EventQueue; <nl> - import java.lang.reflect.InvocationTargetException; <nl> - try { <nl> - EventQueue.invokeAndWait(new Runnable() { <nl> - @Override <nl> - public void run() { <nl> - Contribution advertisedVersion = <nl> - contribListing.getAvailableContribution(LocalContribution.this); <nl> 

deleted file <nl> mmm Language.java <nl> - package processing.app; <nl> - import java.io.File; <nl> - import java.util.HashMap; <nl> - import java.util.Locale; <nl> - import java.util.ResourceBundle; <nl> - import processing.core.PApplet; <nl> - public class Language { <nl> - private static Language instance = null; <nl> 
mmm DebugTray.java <nl> ppp DebugTray.java <nl> + import java.awt.event.ActionEvent; <nl> + import javax.swing.border.EmptyBorder; <nl> + import processing.app.EditorButton; <nl> + import processing.app.Language; <nl> + static public final int GAP = 13; <nl> + EditorButton continueButton; <nl> + EditorButton stepButton; <nl> 
mmm XML.java <nl> ppp XML.java <nl> + */ <nl> mmm IntList.java <nl> ppp IntList.java <nl> mmm JSONArray.java <nl> ppp JSONArray.java <nl> mmm PGL.java <nl> ppp PGL.java <nl> - canvasAWT.requestFocus(); <nl> - canvasNEWT.requestFocus(); <nl> + protected void requestFocus() { <nl> + if (canvas != null) { <nl> + System.out.println("request focus for the GL canvas"); <nl> 
mmm StatusPanel.java <nl> ppp StatusPanel.java <nl> - import javax.swing.ImageIcon; <nl> + Icon icon = null; <nl> - Icon contribIcon = new ImageIcon(Toolkit.getLibImage("/icons/pde-48.png")); <nl> - iconLabel.setIcon(contribIcon); <nl> - } else { <nl> - iconLabel.setIcon(null); <nl> + iconLabel.setIcon(icon); <nl> 
mmm Manifest.java <nl> ppp Manifest.java <nl> - package processing.app.tools.android; <nl> + package processing.mode.android; <nl> mmm Permissions.java <nl> ppp Permissions.java <nl> - package processing.app.tools.android; <nl> + package processing.mode.android; <nl> mmm Export.java <nl> ppp Export.java <nl> + package processing.mode.android; <nl> 
mmm PJOGL.java <nl> ppp PJOGL.java <nl> - @Override <nl> - protected void reinitSurface() { <nl> - sinkFBO = backFBO = frontFBO = null; <nl> - fboLayerCreated = false; <nl> - fboLayerInUse = false; <nl> - firstFrame = true; <nl> - } <nl> + getGL(glDrawable); <nl> - STENCIL_TEST    = GL.GL_STENCIL_TEST; <nl> mmm PGL.java <nl> 
mmm PShapeOpenGL.java <nl> ppp PShapeOpenGL.java <nl> - import java.lang.ref.WeakReference; <nl> - protected WeakReference<PGraphicsOpenGL> pg; <nl> + protected PGraphicsOpenGL pg; <nl> - this.pg = new WeakReference<PGraphicsOpenGL>(pg); <nl> + this.pg = pg; <nl> - PGraphicsOpenGL g = pg.get(); <nl> - if (g == null) return null; <nl> 
mmm PShapeSVG.java <nl> ppp PShapeSVG.java <nl> - package processing.candy; <nl> + package processing.core; <nl> - import processing.core.*; <nl> - public class SVG extends PShape { <nl> + public class PShapeSVG extends PShape { <nl> - 	public SVG(PApplet parent, String filename) { <nl> + 	public PShapeSVG(PApplet parent, String filename) { <nl> 
mmm PImage.java <nl> ppp PImage.java <nl> - * @param img image to use as the mask <nl> + * @param maskArray array of integers used as the alpha channel, needs to be the same length as the image's pixel array <nl> mmm Serial.java <nl> ppp Serial.java <nl> - * @param event the port where new data is available <nl> 
new file <nl> ppp ErrorBar.java <nl> + package processing.mode.java2; <nl> + import java.awt.Color; <nl> + import java.awt.Cursor; <nl> + import java.awt.Dimension; <nl> + import java.awt.Graphics; <nl> + import java.awt.Graphics2D; <nl> + import java.awt.RenderingHints; <nl> + import java.awt.event.MouseAdapter; <nl> 
mmm JavaEditor.java <nl> ppp JavaEditor.java <nl> - new Welcome(base, Preferences.getSketchbookPath().equals(Preferences.getOldSketchbookPath())); <nl> + try { <nl> + new Welcome(base, Preferences.getSketchbookPath().equals(Preferences.getOldSketchbookPath())); <nl> + } catch (IOException ioe) { <nl> + Base.showWarning("Unwelcome Error", <nl> 
mmm ContributionManagerDialog.java <nl> ppp ContributionManagerDialog.java <nl> - import javax.swing.border.EmptyBorder; <nl> - public class ManagerFrame { <nl> + public class ContributionManagerDialog { <nl> - static final int BORDER = 8; <nl> + static final int FILTER_WIDTH = 180; <nl> + static final int ICON_WIDTH = 50; <nl> 
deleted file <nl> mmm MvcConfigurer.java <nl> - package org.apache.rocketmq.console.config; <nl> - import org.springframework.context.annotation.Configuration; <nl> - import org.springframework.core.Ordered; <nl> - import org.springframework.web.servlet.config.annotation.PathMatchConfigurer; <nl> - import org.springframework.web.servlet.config.annotation.ViewControllerRegistry; <nl> 
mmm Utils.java <nl> ppp Utils.java <nl> - public static List<BrokerData> examineBrokerData(DefaultMQAdminExt defaultMQAdminExt, String topic, String cluster) throws RemotingException, MQClientException, InterruptedException { <nl> + public static List<BrokerData> examineBrokerData(DefaultMQAdminExt defaultMQAdminExt, String topic, <nl> 
deleted file <nl> mmm LoginFileTest.java <nl> - package org.apache.rocketmq.console.service.impl; <nl> - import org.apache.rocketmq.console.config.RMQConfigure; <nl> - import org.junit.After; <nl> - import org.junit.Assert; <nl> - import org.junit.Before; <nl> - import org.junit.Test; <nl> - public class LoginFileTest { <nl> 
new file <nl> ppp PinyinUtilTest.java <nl> + package cn.hutool.extra.pinyin; <nl> + import org.junit.Assert; <nl> + import org.junit.Test; <nl> + public class PinyinUtilTest { <nl> + 	@Test <nl> + 	public void toPinyinTest(){ <nl> + 		final String pinyin = PinyinUtil.toPinyin("你好", false); <nl> + 		Assert.assertEquals("ni hao", pinyin); <nl> 
new file <nl> ppp CRC16Test.java <nl> + package cn.hutool.core.io.checksum; <nl> + import cn.hutool.core.io.checksum.crc16.CRC16CCITT; <nl> + import cn.hutool.core.io.checksum.crc16.CRC16CCITTFalse; <nl> + import cn.hutool.core.io.checksum.crc16.CRC16DNP; <nl> + import cn.hutool.core.io.checksum.crc16.CRC16IBM; <nl> 
mmm ServiceLoaderUtil.java <nl> ppp ServiceLoaderUtil.java <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - 		return load(clazz,null); <nl> + 		return ServiceLoader.load(clazz); <nl> - 		if(loader==null) { <nl> - 			loader = Thread.currentThread().getContextClassLoader(); <nl> - 		} <nl> 
mmm CollUtilTest.java <nl> ppp CollUtilTest.java <nl> - 	public void intersectionDistinctTest() { <nl> + 	public void intersectionTest2() { <nl> mmm TreeNodeConfig.java <nl> ppp TreeNodeConfig.java <nl> - import java.io.Serializable; <nl> - public class TreeNodeConfig implements Serializable { <nl> - 	private static final long serialVersionUID = 1L; <nl> 
new file <nl> ppp BasicAuthorizationConfiguration.java <nl> + package org.hswebframework.web.authorization.starter; <nl> + import org.hswebframework.web.authorization.basic.web.UserTokenForTypeParser; <nl> + import org.hswebframework.web.authorization.token.UserTokenManager; <nl> + import org.hswebframework.web.service.authorization.UserService; <nl> 
mmm SimplePermissionEntity.java <nl> ppp SimplePermissionEntity.java <nl> - private static final long   serialVersionUID = -5505339187716888516L; <nl> + private static final long serialVersionUID = -5505339187716888516L; <nl> - private              String name; <nl> + private String name; <nl> - if (parents != null) { <nl> 
mmm DefaultAuthorizingHandler.java <nl> ppp DefaultAuthorizingHandler.java <nl> - logger.info("执行权限控制:权限{}({}),操作{}.", <nl> + logger.info("do permission access handle : permissions{}({}),actions{} ,definition:{}.{} ({})", <nl> - permissionsDef, <nl> - actionsDef); <nl> + permissionsDef, actionsDef <nl> + , definition.getPermissions(), <nl> 
mmm SimpleMenuGroupEntity.java <nl> ppp SimpleMenuGroupEntity.java <nl> + import lombok.Getter; <nl> + import lombok.NoArgsConstructor; <nl> + import lombok.Setter; <nl> + @Getter <nl> + @Setter <nl> + @NoArgsConstructor <nl> + private static final long serialVersionUID = 349586524046467254L; <nl> - private List<SimpleMenuGroupEntity> children; <nl> 
mmm JsonReader.java <nl> ppp JsonReader.java <nl> - return new BufferedSourceJsonReader(source); <nl> + return new JsonUtf8Reader(source); <nl> - BufferedSinkJsonWriter.string(buffer, strings[i]); <nl> + JsonUt8Writer.string(buffer, strings[i]); <nl> mmm JsonValueWriterTest.java <nl> ppp JsonValueWriterTest.java <nl> 
mmm PolymorphicJsonAdapterFactory.java <nl> ppp PolymorphicJsonAdapterFactory.java <nl> - *   <li>Base types may be classes or interfaces. You may not use {@code Object.class} as a base <nl> - *       type. <nl> + *   <li>Base types may be classes or interfaces. <nl> - if (baseType == Object.class) { <nl> 
new file <nl> ppp ApiImportParserFactory.java <nl> + package io.metersphere.api.parse; <nl> + import io.metersphere.commons.constants.ApiImportPlatform; <nl> + import io.metersphere.commons.constants.FileType; <nl> + import io.metersphere.performance.parse.EngineSourceParser; <nl> + import io.metersphere.performance.parse.xml.XmlEngineSourceParse; <nl> 
mmm IssuesService.java <nl> ppp IssuesService.java <nl> + boolean zentao = isIntegratedPlatform(orgId, IssuesManagePlatform.Zentao.toString()); <nl> + String zentaoId = getZentaoProjectId(issuesRequest.getTestCaseId()); <nl> - if (StringUtils.isBlank(tapdId) && StringUtils.isBlank(jiraKey)) { <nl> + if (zentao) { <nl> 
new file <nl> ppp MD5Util.java <nl> + package io.metersphere.api.dubbo.utils; <nl> + import java.security.MessageDigest; <nl> + import java.security.NoSuchAlgorithmException; <nl> + public class MD5Util { <nl> + private static MessageDigest md; <nl> + private static final char[] hexCode = "0123456789ABCDEF".toCharArray(); <nl> 
mmm QueryTestPlanRequest.java <nl> ppp QueryTestPlanRequest.java <nl> mmm ExtUserMapper.java <nl> ppp ExtUserMapper.java <nl> + String getDefaultLanguage(String paramKey); <nl> deleted file <nl> mmm RegistryParamService.java <nl> - package io.metersphere.service; <nl> - import io.metersphere.base.domain.SystemParameter; <nl> 
mmm EngineFactory.java <nl> ppp EngineFactory.java <nl> + import io.metersphere.config.KafkaProperties; <nl> + private static KafkaProperties kafkaProperties; <nl> + HashMap<String, String> env = new HashMap<String, String>() {{ <nl> + put("BOOTSTRAP_SERVERS", kafkaProperties.getBootstrapServers()); <nl> + put("LOG_TOPIC", kafkaProperties.getLog().getTopic()); <nl> 
new file <nl> ppp TestPlanStatus.java <nl> + package io.metersphere.commons.constants; <nl> + public enum TestPlanStatus { <nl> + Prepare, Running, Completed <nl> + } <nl> mmm JtlResolver.java <nl> ppp JtlResolver.java <nl> - private static RequestStatisticsDTO getOneRpsResult(Map<String, List<Metric>> map){ <nl> 
new file <nl> ppp APITestResult.java <nl> + package io.metersphere.api.dto; <nl> + import io.metersphere.base.domain.ApiTestWithBLOBs; <nl> + import lombok.Getter; <nl> + import lombok.Setter; <nl> + @Setter <nl> + @Getter <nl> + public class APITestResult extends ApiTestWithBLOBs { <nl> + private String projectName; <nl> 
mmm UserController.java <nl> ppp UserController.java <nl> - @RequiresRoles(value = {RoleConstants.ORG_ADMIN, RoleConstants.TEST_MANAGER}, logical = Logical.OR) <nl> + @RequiresRoles(value = {RoleConstants.ORG_ADMIN, RoleConstants.TEST_MANAGER, RoleConstants.TEST_USER, RoleConstants.TEST_MANAGER}, logical = Logical.OR) <nl> 
mmm PerformanceReportController.java <nl> ppp PerformanceReportController.java <nl> - public List<LoadTestReport> recentProjects(@PathVariable int count) { <nl> + public List<ReportDTO> recentProjects(@PathVariable int count) { <nl> + String currentWorkspaceId = SessionUtils.getCurrentWorkspaceId(); <nl> 
mmm KeyValue.java <nl> ppp KeyValue.java <nl> + private String description; <nl> + public KeyValue(String name, String value, String description) { <nl> + this.name = name; <nl> + this.value = value; <nl> + this.description = description; <nl> + } <nl> deleted file <nl> mmm SwaggerParser.java <nl> - package io.metersphere.api.parse; <nl> 
new file <nl> ppp JarConfigController.java <nl> + package io.metersphere.controller; <nl> + import com.github.pagehelper.Page; <nl> + import com.github.pagehelper.PageHelper; <nl> + import io.metersphere.base.domain.JarConfig; <nl> + import io.metersphere.commons.constants.RoleConstants; <nl> + import io.metersphere.commons.utils.PageUtils; <nl> 
mmm TestCaseReviewDTO.java <nl> ppp TestCaseReviewDTO.java <nl> + private String creatorName; <nl> new file <nl> ppp JsonPathUtils.java <nl> + package io.metersphere.commons.utils; <nl> + import java.util.ArrayList; <nl> + import java.util.Collections; <nl> + import java.util.HashMap; <nl> + import java.util.Iterator; <nl> 
mmm NotificationAndIndicationManager.java <nl> ppp NotificationAndIndicationManager.java <nl> - import static rx.Observable.just; <nl> + import com.polidea.rxandroidble.internal.util.ActiveCharacteristicNotification; <nl> + import java.util.Map; <nl> - import java.util.concurrent.Callable; <nl> + import rx.Completable; <nl> 
deleted file <nl> mmm DeviceModuleBinder.java <nl> - package com.polidea.rxandroidble2.internal; <nl> - import com.polidea.rxandroidble2.RxBleDevice; <nl> - import com.polidea.rxandroidble2.internal.connection.Connector; <nl> - import com.polidea.rxandroidble2.internal.connection.ConnectorImpl; <nl> - import bleshadow.dagger.Binds; <nl> 
mmm ConfigurationParser.java <nl> ppp ConfigurationParser.java <nl> - import java.io.BufferedReader; <nl> - import java.io.File; <nl> - import java.io.FileNotFoundException; <nl> - import java.io.FileReader; <nl> - import java.io.IOException; <nl> - import java.io.Reader; <nl> + import org.slf4j.Logger; <nl> 
mmm BaseMessageViewHolder.java <nl> ppp BaseMessageViewHolder.java <nl> - protected boolean mIsEarPhoneOn; <nl> mmm VideoViewHolder.java <nl> ppp VideoViewHolder.java <nl> + } else { <nl> + mDisplayNameTv.setVisibility(View.GONE); <nl> + } else { <nl> + mDisplayNameTv.setVisibility(View.GONE); <nl> mmm ScrollMoreListener.java <nl> 
mmm ChatInputView.java <nl> ppp ChatInputView.java <nl> - private LinearLayout mCameraBtnContainer; <nl> + private View mCameraBtnContainer; <nl> + private View mVoiceBtnContainer; <nl> + private View mPhotoBtnContainer; <nl> + private View mEmojiBtnContainer; <nl> - View voiceBtnContainer = findViewById(R.id.aurora_framelayout_menuitem_voice); <nl> 
mmm SecurityFrameInjector.java <nl> ppp SecurityFrameInjector.java <nl> - 								return IOUtils.readFully(is, -1, true); <nl> + 								return IOUtils.readAllBytes(is); <nl> mmm ClassLoader.java <nl> ppp ClassLoader.java <nl> - static synchronized void loadLibraryWithClassLoader(String libName, ClassLoader loader) { <nl> 
mmm Unsafe.java <nl> ppp Unsafe.java <nl> - 	private Unsafe() {} <nl> - 	 <nl> mmm SimpleIndyGenerator.java <nl> ppp SimpleIndyGenerator.java <nl> - 			cacheDescriptor = cacheDescriptor.previous(); <nl> - 		} <nl> + 		cacheDescriptor = cacheDescriptor.previous(); <nl> - 			if (topLayer > 0) { <nl> - 				cacheDescriptor = cacheDescriptor.previous(); <nl> 
mmm StringBuilder.java <nl> ppp StringBuilder.java <nl> + 	public static J9ObjectPointer convertPointerFromToken(int token) <nl> + 	{ <nl> + 		return convertPointerFromToken((long)token & 0xFFFFFFFFL); <nl> + 	} <nl> + 	 <nl> - 	 <nl> - 	jdk.internal.util.StaticProperty.jdkSerialFilter(); <nl> - 								return IOUtils.readFully(is, Integer.MAX_VALUE, false); <nl> 
mmm TestJps.java <nl> ppp TestJps.java <nl> + import static org.testng.AssertJUnit.assertEquals; <nl> + import java.io.File; <nl> - import org.openj9.test.util.StringUtilities; <nl> - 		assertTrue(TEST_PROCESS_ID_MISSING, StringUtilities.searchSubstring(vmId, jpsOutput).isPresent()); <nl> - 		assertTrue(CHILD_IS_MISSING, StringUtilities.searchSubstring(tgtMgr.targetId, jpsOutput).isPresent()); <nl> 
mmm TargetManager.java <nl> ppp TargetManager.java <nl> + import java.lang.management.ManagementFactory; <nl> + import com.ibm.lang.management.OperatingSystemMXBean; <nl> + import com.ibm.lang.management.RuntimeMXBean; <nl> - 		try { <nl> - 			Class<?> attachHandlerClass = Class.forName(TargetManager.COM_IBM_TOOLS_ATTACH_TARGET_ATTACH_HANDLER); <nl> 
mmm ArrayletAllocateTestRunner.java <nl> ppp ArrayletAllocateTestRunner.java <nl> - 		return super.getCustomCommandLineOptions() + " -Xdisableexcessivegc "; <nl> + 		return super.getCustomCommandLineOptions() + " -Xdisableexcessivegc"; <nl> + 	} <nl> + 	 <nl> + 	@Override <nl> + 	public String getCommandLine() { <nl> 
mmm ClassPathSettingClassLoaderTest.java <nl> ppp ClassPathSettingClassLoaderTest.java <nl> - package j9vm.test.classunloading.classestoload; <nl> - import j9vm.test.classunloading.FinalizationIndicator; <nl> - public class DependentClassToLoad1 implements InterfaceToLoad1 { <nl> - 	private static FinalizationIndicator indicator = new FinalizationIndicator( DependentClassToLoad1.class.getName()); <nl> 
mmm CoreInfoCommand.java <nl> ppp CoreInfoCommand.java <nl> mmm ValueTypeGenerator.java <nl> ppp ValueTypeGenerator.java <nl> + 		} else if (J9ConfigFlags.arch_aarch64) { <nl> + 			jitRegisterNames = new String[] { <nl> + 					"jit_r0", <nl> + 					"jit_r1", <nl> + 					"jit_r2", <nl> + 					"jit_r3", <nl> + 					"jit_r4", <nl> 
mmm Message.java <nl> ppp Message.java <nl> + case 'f': <nl> - result.append(format(s,fspec)); <nl> + s = Util.escapeControlCharacters(s); <nl> + result.append(format(s, fspec)); <nl> - 	   return message; <nl> + return message; <nl> mmm SortTest.java <nl> ppp SortTest.java <nl> - 	private static final Pattern SeedPattern = makePattern("-srand", 6, "=(\\d+)"); <nl> 
mmm Class.java <nl> ppp Class.java <nl> new file <nl> ppp CpuUtilizationHelper.java <nl> + package com.ibm.lang.management.internal; <nl> + import static com.ibm.lang.management.CpuLoadCalculationConstants.*; <nl> + final class CpuUtilizationHelper { <nl> + 	SysinfoCpuTime oldestTime = null; <nl> + 	SysinfoCpuTime interimTime = null; <nl> 
mmm JITHelpers.java <nl> ppp JITHelpers.java <nl> - 	public int findElementFromArray(Object array, byte ch, int offset, int length) { <nl> - 		for (int i = offset; i < length; i++) { <nl> - 			if(getByteFromArrayByIndex(array, i) == ch) { <nl> - 				return i; <nl> - 			} <nl> - 		} <nl> - 		return -1; <nl> - 	} <nl> 
mmm FindModulesCommand.java <nl> ppp FindModulesCommand.java <nl> + import static com.ibm.j9ddr.vm29.tools.ddrinteractive.commands.FindModulesCommand.Status.*; <nl> - 	private enum Subcommand { <nl> - 		MODULE, PACKAGE, HELP, INVALID <nl> + 	enum Status { <nl> + 		MODULE, PACKAGE, HELP <nl> - 		final Subcommand subcommand; <nl> 
new file <nl> ppp Test_StrictMath_Fma.java <nl> + package org.openj9.test.java.lang; <nl> + import org.testng.annotations.Test; <nl> + import org.testng.AssertJUnit; <nl> + @Test(groups={ "level.sanity" }, invocationCount=2) <nl> + public class Test_StrictMath_Fma <nl> + { <nl> + @Test <nl> + 	public void test_StrictMath_fma_double() <nl> 
mmm String.java <nl> ppp String.java <nl> - import java.util.stream.IntStream; <nl> - 	 <nl> - 	@Override <nl> - 	public IntStream chars() { <nl> - 		return CharSequence.super.chars(); <nl> - 	} <nl> - 	 <nl> - 	@Override <nl> - 	public IntStream codePoints() { <nl> - 		return CharSequence.super.codePoints(); <nl> 
mmm String.java <nl> ppp String.java <nl> - 		byte[] buffer = value; <nl> - 			if (buffer.length != currentLength) { <nl> - 				buffer = new byte[currentLength]; <nl> - 				compressedArrayCopy(value, 0, buffer, 0, currentLength); <nl> - 			} <nl> + 			byte[] buffer = new byte[currentLength]; <nl> + 			compressedArrayCopy(value, 0, buffer, 0, currentLength); <nl> 
mmm DumpConfigurationUnavailableException.java <nl> ppp DumpConfigurationUnavailableException.java <nl> - package com.ibm.jvm; <nl> + package com.ibm.jvm; <nl> + import openj9.management.internal.DumpConfigurationUnavailableExceptionBase; <nl> + 	public DumpConfigurationUnavailableException(DumpConfigurationUnavailableExceptionBase cause) { <nl> 
deleted file <nl> mmm MkTreeGen.java <nl> - package org.testKitGen; <nl> - import java.io.File; <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - public class MkTreeGen { <nl> - 	private MkTreeGen() { <nl> - 	} <nl> - 	public static void start() { <nl> - 		traverse(new ArrayList<String>()); <nl> 
mmm PlatformMBeanProvider.java <nl> ppp PlatformMBeanProvider.java <nl> - 		ComponentBuilder.create(ExtendedMemoryMXBeanImpl.getInstance()) <nl> + 		ComponentBuilder.create(ManagementFactory.MEMORY_MXBEAN_NAME, ExtendedMemoryMXBeanImpl.getInstance()) <nl> - 		ComponentBuilder.create(ExtendedOperatingSystemMXBeanImpl.getInstance()) <nl> 
mmm GetPid.java <nl> ppp GetPid.java <nl> + 			System.in.read(); <nl> + 		} catch (Exception e) { <nl> + 		} <nl> mmm IPC.java <nl> ppp IPC.java <nl> - import java.io.File; <nl> - import java.nio.file.Files; <nl> - import java.nio.file.LinkOption; <nl> - import java.nio.file.Paths; <nl> - import java.nio.file.attribute.PosixFilePermission; <nl> 
mmm UnsafeTestBase.java <nl> ppp UnsafeTestBase.java <nl> - 	protected static jdk.internal.misc.Unsafe myUnsafe; <nl> + 	protected static Unsafe myUnsafe; <nl> - 	protected final String OPAQUE = "Opaque"; <nl> - 	protected final String UNALIGNED = "Unaligned"; <nl> + 	protected final String COMPAREANDSWAP = "CompareAndSwap"; <nl> 
mmm MkTreeGen.java <nl> ppp MkTreeGen.java <nl> - 			if ((!Options.getJdkVersion().equalsIgnoreCase("Panama")) && (!Options.getJdkVersion().equalsIgnoreCase("Valhalla"))) { <nl> + 			if ((Options.getJdkVersion() != "Panama") && (Options.getJdkVersion() != "Valhalla")) { <nl> mmm J9DDRClassLoader.java <nl> 
mmm MethodHandleProxies.java <nl> ppp MethodHandleProxies.java <nl> - 	 <nl> + 	MethodType asCollectorType(Class<?> clz, int num1) { <nl> + 		throw OpenJDKCompileStub.OpenJDKCompileStubThrowError(); <nl> + 	} <nl> mmm System.java <nl> ppp System.java <nl> + 		StringCoding.encode(String.LATIN1, new byte[1]); <nl> 
mmm Unsafe.java <nl> ppp Unsafe.java <nl> + 	private Unsafe() {} <nl> + 	 <nl> mmm Jcmd.java <nl> ppp Jcmd.java <nl> - import openj9.internal.tools.attach.target.DiagnosticUtils; <nl> + import openj9.internal.tools.attach.diagnostics.base.DiagnosticUtils; <nl> - package openj9.internal.tools.attach.target; <nl> 
mmm AddressSpace.java <nl> ppp AddressSpace.java <nl> - if (offset <= 0xffc) <nl> + if (offset < 0xffd) <nl> - return read(address); <nl> + return readInt(address) >>> 24; <nl> - 		int ch1 = read(address); <nl> - 		int ch2 = read(address + 1); <nl> - 		return (ch1 << 8) | ch2; <nl> + return readInt(address) >>> 16; <nl> 
new file <nl> ppp Test_Thread_Extra.java <nl> + package org.openj9.test.java.lang; <nl> + import org.testng.annotations.AfterMethod; <nl> + import org.testng.annotations.Test; <nl> + import org.testng.Assert; <nl> + import org.testng.AssertJUnit; <nl> + import java.lang.ref.WeakReference; <nl> + @Test(groups = { "level.sanity" }) <nl> 
deleted file <nl> mmm MyObject.java <nl> - package com.ibm.jvmti.tests.fieldwatch; <nl> - class MyObject { <nl> - 	static int staticIntField; <nl> - 	static long staticLongField; <nl> - 	static double staticDoubleField; <nl> - 	static float staticSingleField; <nl> - 	static Object staticObjField; <nl> - 	int instanceIntField; <nl> 
deleted file <nl> mmm snmp001.java <nl> - package com.ibm.jvmti.tests.setNativeMethodPrefix; <nl> - import com.ibm.jvmti.tests.util.Util; <nl> - public class snmp001 { <nl> - 	public static native boolean setPrefix(); <nl> - 	public static void nat() { <nl> - 		$$J9$$nat(); <nl> - 	} <nl> - 	public static native void $$J9$$nat(); <nl> 
mmm ValueTypeTests.java <nl> ppp ValueTypeTests.java <nl> - 		return createAssorted(makeMethod, fields, null); <nl> - 	} <nl> - 	static Object createAssorted(MethodHandle makeMethod, String[] fields, Object[] initFields) throws Throwable { <nl> - 		boolean useInitFields = initFields != null; <nl> - 				args[i] = createPoint2D(useInitFields ? (int[])initFields[i] : defaultPointPositions1); <nl> 
mmm OpenJ9VirtualMachine.java <nl> ppp OpenJ9VirtualMachine.java <nl> - package openj9.internal.tools.attach.diagnostics.base; <nl> + package openj9.internal.tools.attach.target; <nl> - import openj9.internal.tools.attach.target.IPC; <nl> - package openj9.internal.tools.attach.diagnostics.base; <nl> + package openj9.internal.tools.attach.target; <nl> 
mmm AlgorithmVersion.java <nl> ppp AlgorithmVersion.java <nl> + 	public static final String BYTECODE_VERSION = "ALG_VM_BYTECODE_VERSION"; <nl> mmm ByteCodeDumper.java <nl> ppp ByteCodeDumper.java <nl> + import static com.ibm.j9ddr.vm29.j9.BCNames.JBwithfield; <nl> + import static com.ibm.j9ddr.vm29.j9.BCNames.JBdefaultvalue; <nl> 
mmm DiagnosticsInfo.java <nl> ppp DiagnosticsInfo.java <nl> mmm Attachment.java <nl> ppp Attachment.java <nl> + import openj9.tools.attach.diagnostics.base.DiagnosticUtils; <nl> - 					replyWithProperties(makeExceptionProperties(e)); <nl> + 					replyWithProperties(DiagnosticProperties.makeExceptionProperties(e)); <nl> 
mmm StringBuffer.java <nl> ppp StringBuffer.java <nl> + 	if (newLength < stringLength) { <nl> + 		newLength = stringLength; <nl> + 	} <nl> - 			value = new char[(newLength + 1) / 2]; <nl> + 			if (newLength == Integer.MAX_VALUE) { <nl> + 				value = new char[(newLength / 2) + 1]; <nl> + 			} else { <nl> + 				value = new char[(newLength + 1) / 2]; <nl> 
mmm ThreadMXBean.java <nl> ppp ThreadMXBean.java <nl> new file <nl> ppp decomp005.java <nl> + package com.ibm.jvmti.tests.decompResolveFrame; <nl> + public class decomp005 <nl> + { <nl> + 	private static boolean pass; <nl> + 	private static boolean entered; <nl> + 	private native boolean triggerDecompile(); <nl> 
mmm MkGen.java <nl> ppp MkGen.java <nl> - 			String condition_platform = null; <nl> - 			if (!var.isValid()) { <nl> - 				condition_platform = name + "_INVALID_PLATFORM_CHECK"; <nl> - 				f.write(condition_platform + "=$(filter " + Options.getSpec() + ", $(SPEC))\n"); <nl> - 			} <nl> - 			if (testInfo.getIterations() != Integer.parseInt(Options.getIterations())) { <nl> 
mmm OpenJ9VirtualMachine.java <nl> ppp OpenJ9VirtualMachine.java <nl> + 	public Properties getThreadInfo() throws IOException { <nl> + 		AttachmentConnection.streamSend(commandStream, Command.GET_THREAD_GROUP_INFO); <nl> + 		return IPC.receiveProperties(responseStream, true); <nl> + 	} <nl> + package openj9.tools.attach.diagnostics.info; <nl> 
deleted file <nl> mmm ThreadMXBeanTestCaseCommon.java <nl> - package org.openj9.test.java.lang.management.ThreadMXBean; <nl> - import java.lang.management.ThreadInfo; <nl> - import org.testng.log4testng.Logger; <nl> - public abstract class ThreadMXBeanTestCaseCommon { <nl> - 	protected Logger logger = Logger.getLogger(getClass()); <nl> 
mmm snmp001.java <nl> ppp snmp001.java <nl> - SDK_VERSION = '10' <nl> - SPEC = 'linux_ppc-64_cmprssptrs_le_valhalla_nestmates' <nl> - TEST_TARGET = '_sanity' <nl> + package com.ibm.jvmti.tests.setNativeMethodPrefix; <nl> - timeout(time: 10, unit: 'HOURS') { <nl> - node('master') { <nl> - retry(5){ <nl> - checkout scm <nl> 
mmm AttachAPIStress.java <nl> ppp AttachAPIStress.java <nl> + 		TargetManager.setVerbose(false); <nl> + 		TargetManager.setVerbose(false); <nl> + 		TargetManager.setVerbose(false); <nl> mmm TargetManager.java <nl> ppp TargetManager.java <nl> - import org.openj9.test.util.StringPrintStream; <nl> + 	static boolean verbose = false; <nl> 
mmm LockInfo.java <nl> ppp LockInfo.java <nl> - 	private final LockInfoBase baseInfo; <nl> + 	private final String className; <nl> + 	private final int identityHashCode; <nl> + 	private LockInfo(Object object) { <nl> + 		this(object.getClass().getName(), System.identityHashCode(object)); <nl> + 	} <nl> - 		baseInfo = new LockInfoBase(className, identityHashCode); <nl> 
mmm J9ObjectFieldOffsetIterator_V1.java <nl> ppp J9ObjectFieldOffsetIterator_V1.java <nl> - 	 <nl> - 	 <nl> - 	 <nl> - 	 <nl> - 			} <nl> + 			} <nl> - 		ObjectFieldInfo fieldInfo  = new ObjectFieldInfo(romClass); <nl> + 		ObjectFieldInfo fieldInfo = new ObjectFieldInfo(romClass); <nl> - 			UDATA hiddenObjectOffset =  firstObjectOffset.add(J9Object.SIZEOF + (fieldInfo.getNonBackfilledInstanceObjectCount() * fj9object_t_SizeOf)); <nl> 
mmm MethodHandles.java <nl> ppp MethodHandles.java <nl> - 		 <nl> - 		MemberName resolveOrFail(byte b, MemberName mn) throws ReflectiveOperationException { <nl> - 			throw OpenJDKCompileStub.OpenJDKCompileStubThrowError(); <nl> - 		} <nl> - 		MemberName resolveOrFail(byte b, Class<?> cls, String str, MethodType mt) throws NoSuchMethodException, IllegalAccessException { <nl> 
mmm InfoThreadCommand.java <nl> ppp InfoThreadCommand.java <nl> - 		Class<?> ddriClass; <nl> + 		Class<?> ddriClass = null; <nl> - 		Constructor<?> constructor; <nl> + 		Constructor<?> constructor = null; <nl> - 			constructor = ddriClass.getConstructor(List.class, PrintStream.class); <nl> + 			constructor = ddriClass.getConstructor(new Class[]{List.class, PrintStream.class}); <nl> 
mmm IndyTest.java <nl> ppp IndyTest.java <nl> + import org.openj9.test.util.VersionCheck; <nl> + 	@Test(groups = { "level.extended" }) <nl> + 	public void test_CallSiteNullErrorRethrown () { <nl> + 		try { <nl> + 			com.ibm.j9.jsr292.indyn.GenIndyn.test_CallSiteNullErrorRethrown(); <nl> + 			Assert.fail("BootstrapMethodError or NullPointerException should be thrown."); <nl> 
deleted file <nl> mmm J9UnmodifiableClass.java <nl> - package com.ibm.oti.vm; <nl> - import java.lang.annotation.ElementType; <nl> - import java.lang.annotation.Retention; <nl> - import java.lang.annotation.RetentionPolicy; <nl> - import java.lang.annotation.Target; <nl> - @Retention(RetentionPolicy.RUNTIME) <nl> 
mmm MethodHandleNatives.java <nl> ppp MethodHandleNatives.java <nl> + 	 <nl> + 	static boolean refKindIsMethod(byte kind) { <nl> + 		throw OpenJDKCompileStub.OpenJDKCompileStubThrowError(); <nl> + 	} <nl> + 	 <nl> + 	static boolean refKindIsField(byte kind) { <nl> + 		throw OpenJDKCompileStub.OpenJDKCompileStubThrowError(); <nl> 
new file <nl> ppp TestClassRelationshipVerifier.java <nl> + package org.openj9.test.classRelationshipVerifier; <nl> + import java.lang.reflect.*; <nl> + import org.testng.annotations.Test; <nl> + import org.testng.Assert; <nl> + import org.objectweb.asm.*; <nl> + @Test(groups = { "level.sanity" }) <nl> + public class TestClassRelationshipVerifier { <nl> 
mmm AddressSpace.java <nl> ppp AddressSpace.java <nl> - if (offset < 0xffd) <nl> + if (offset <= 0xffc) <nl> - return readInt(address) >>> 24; <nl> + return read(address); <nl> - return readInt(address) >>> 16; <nl> + 		int ch1 = read(address); <nl> + 		int ch2 = read(address + 1); <nl> + 		return (ch1 << 8) | ch2; <nl> 
deleted file <nl> mmm ThreadGroupInfo.java <nl> - package openj9.tools.attach.diagnostics.info; <nl> - import static com.ibm.oti.util.Msg.getString; <nl> - import java.io.IOException; <nl> - import java.lang.management.LockInfo; <nl> - import java.lang.management.ManagementFactory; <nl> - import java.lang.management.ThreadInfo; <nl> 
mmm IPC.java <nl> ppp IPC.java <nl> - package com.ibm.tools.attach.target; <nl> + package com.ibm.tools.attach.target; <nl> + import java.io.File; <nl> - import java.security.SecureRandom; <nl> - import java.io.File; <nl> + import java.security.SecureRandom; <nl> - import java.util.Set; <nl> + import java.util.Set; <nl> 
mmm J9IndexableObjectHelper.java <nl> ppp J9IndexableObjectHelper.java <nl> - 		boolean showObjectHeader = tabLevel <= 1; <nl> - 				for (superclassIndex = 0; (superclassIndex <= depth) && !found; superclassIndex++) { <nl> - 					J9ClassPointer superclass; <nl> - 					if (superclassIndex == depth) { <nl> - 						superclass = clazz; <nl> 
mmm MethodHandles.java <nl> ppp MethodHandles.java <nl> - * @exception	IndexOutOfBoundsException when {@code index < 0} or <nl> - *				{@code index >= length()} <nl> + * @exception	IndexOutOfBoundsException when <code>index < 0</code> or <nl> + *				<code>index >= length()</code> <nl> - * @exception	StringIndexOutOfBoundsException when {@code start < 0, start > end} or <nl> 
mmm VarargsCollectorHandle.java <nl> ppp VarargsCollectorHandle.java <nl> - 	 <nl> + 	@Override <nl> - 			args = Arrays.copyOf(args, mhLength); <nl> - 			args[mhLength - 1] = trailingArgs; <nl> - 			return this.asFixedArity().invokeWithArguments(args); <nl> + 			Object[] newArgs = new Object[mhLength]; <nl> 
mmm MethodHandles.java <nl> ppp MethodHandles.java <nl> + 		private void accessCheckArgRetTypes(MethodType type) throws IllegalAccessException { <nl> + 			if (INTERNAL_PRIVILEGED != accessMode) { <nl> + 				for (Class<?> para : type.arguments) { <nl> + 					if (!para.isPrimitive()) { <nl> + 						checkClassAccess(para); <nl> 
mmm GetCommandsTask.java <nl> ppp GetCommandsTask.java <nl> + 			VH_STRING_FROM_CHILD = MethodHandles.lookup() <nl> + 					.in(StaticHelperChild.class) <nl> + 					.findStaticVarHandle(StaticHelperChild.class, "l1", String.class); <nl> + 	 <nl> + 	@Test <nl> + 	public void testReferenceInParentFromChild_get() { <nl> 
mmm MessagePreviewCreator.java <nl> ppp MessagePreviewCreator.java <nl> - package com.fsck.k9.message.preview; <nl> + package com.fsck.k9.message.extractors; <nl> mmm TextPartFinderTest.java <nl> ppp TextPartFinderTest.java <nl> - package com.fsck.k9.message.preview; <nl> + package com.fsck.k9.message.extractors; <nl> 
mmm MessagingController.java <nl> ppp MessagingController.java <nl> - int progress = 0; <nl> - int todo = commands.size(); <nl> - if (todo == 0) { <nl> - return; <nl> - } <nl> - for (MessagingListener l : getListeners()) { <nl> - l.pendingCommandsProcessing(account); <nl> - l.synchronizeMailboxProgress(account, null, progress, todo); <nl> 
mmm DeviceNotificationsTest.java <nl> ppp DeviceNotificationsTest.java <nl> - private NotificationsHolder notificationsHolder; <nl> + private NotificationData notificationData; <nl> - notificationsHolder = createFakeNotificationsHolder(account); <nl> + notificationData = createFakeNotificationData(account); <nl> 
mmm AccountSetupIncoming.java <nl> ppp AccountSetupIncoming.java <nl> + import java.net.URI; <nl> + import java.net.URISyntaxException; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + import com.fsck.k9.backend.BackendManager; <nl> + import com.fsck.k9.preferences.Protocols; <nl> + import com.fsck.k9.ui.R; <nl> 
mmm MessageTest.java <nl> ppp MessageTest.java <nl> - import com.fsck.k9.mail.internet.MimeMessageHelper; <nl> - import org.apache.commons.io.IOUtils; <nl> - import org.apache.james.mime4j.codec.Base64InputStream; <nl> - import org.apache.james.mime4j.util.MimeUtil; <nl> - import android.test.AndroidTestCase; <nl> 
mmm MessageProvider.java <nl> ppp MessageProvider.java <nl> - package com.fsck.k9.external; <nl> + package com.fsck.k9.provider; <nl> + import com.fsck.k9.DI; <nl> + import timber.log.Timber; <nl> - import com.fsck.k9.BuildConfig; <nl> - import com.fsck.k9.DI; <nl> - import timber.log.Timber; <nl> - public static String AUTHORITY = BuildConfig.APPLICATION_ID + ".messageprovider"; <nl> 
mmm AccountSetupOutgoing.java <nl> ppp AccountSetupOutgoing.java <nl> - public static final String EXTRA_ACCOUNT = "account"; <nl> + private static final String EXTRA_ACCOUNT = "account"; <nl> mmm AccountSetupCheckSettings.java <nl> ppp AccountSetupCheckSettings.java <nl> - import android.app.Application; <nl> 
mmm AccountSetupCheckSettings.java <nl> ppp AccountSetupCheckSettings.java <nl> - char[] sha1sum = Hex.encodeHex(sha1.digest(chain[i].getEncoded())); <nl> - chainInfo.append("Fingerprint (SHA-1): ").append(new String(sha1sum)).append("\n"); <nl> + String sha1sum = Hex.encodeHex(sha1.digest(chain[i].getEncoded())); <nl> 
mmm AttachmentPresenter.java <nl> ppp AttachmentPresenter.java <nl> - if (attachmentViewInfo.firstClassAttachment) { <nl> + if (!attachmentViewInfo.inlineAttachment) { <nl> mmm AttachmentViewInfo.java <nl> ppp AttachmentViewInfo.java <nl> - public final boolean firstClassAttachment; <nl> + public final boolean inlineAttachment; <nl> 
mmm MockImapServer.java <nl> ppp MockImapServer.java <nl> + import com.fsck.k9.mail.helpers.KeyStoreProvider; <nl> - private static final String KEYSTORE_PASSWORD = "password"; <nl> - private static final String KEYSTORE_RESOURCE = "/keystore.jks"; <nl> + private final KeyStoreProvider keyStoreProvider; <nl> 
deleted file <nl> mmm SwipeGestureDetector.java <nl> - package com.fsck.k9.activity.misc; <nl> - import android.content.Context; <nl> - import android.view.MotionEvent; <nl> - import android.view.GestureDetector.SimpleOnGestureListener; <nl> - public class SwipeGestureDetector extends SimpleOnGestureListener { <nl> 
new file <nl> ppp UserForImap.java <nl> + package com.fsck.k9.endtoend.framework; <nl> + public class UserForImap { <nl> + public static final UserForImap TEST_USER = new UserForImap("test-username", "test-password", "test-email@example.com"); <nl> + public final String loginUsername; <nl> + public final String password; <nl> 
mmm FolderList.java <nl> ppp FolderList.java <nl> - mListView.setScrollingCacheEnabled(true); <nl> + mListView.setScrollingCacheEnabled(false); <nl> + int oldUnreadMessageCount = folderHolder.unreadMessageCount; <nl> + mUnreadMessageCount += unreadMessageCount - oldUnreadMessageCount; <nl> + informUserOfStatus(); <nl> 
mmm NotificationActionCreator.java <nl> ppp NotificationActionCreator.java <nl> + import java.util.ArrayList; <nl> + import com.fsck.k9.activity.MessageCompose; <nl> - public PendingIntent createMarkAllAsReadPendingIntent(Account account, List<MessageReference> messageReferences, <nl> - int notificationId) { <nl> 
mmm TextBody.java <nl> ppp TextBody.java <nl> + qp.close(); <nl> mmm AccountSettings.java <nl> ppp AccountSettings.java <nl> - new V(1, new EnumSetting(FolderMode.class, FolderMode.NOT_SECOND_CLASS)) <nl> + new V(1, new EnumSetting<FolderMode>(FolderMode.class, FolderMode.NOT_SECOND_CLASS)) <nl> - new V(1, new EnumSetting(FolderMode.class, FolderMode.FIRST_CLASS)) <nl> 

mmm LocalFolder.java <nl> ppp LocalFolder.java <nl> - import java.io.ByteArrayInputStream; <nl> - import java.io.ByteArrayOutputStream; <nl> - import java.io.File; <nl> - import java.io.FileInputStream; <nl> - import java.io.FileOutputStream; <nl> - import java.io.IOException; <nl> - import java.io.InputStream; <nl> 
mmm CertificateErrorNotificationsTest.java <nl> ppp CertificateErrorNotificationsTest.java <nl> - private NotificationController controller; <nl> + private NotificationHelper notificationHelper; <nl> - controller = createFakeNotificationController(notificationManager, builder); <nl> + notificationHelper = createFakeNotificationHelper(notificationManager, builder); <nl> 
mmm MessageHeader.java <nl> ppp MessageHeader.java <nl> - public void showSubjectLine() { <nl> - mSubjectView.setVisibility(VISIBLE); <nl> + public void hideSubjectLine() { <nl> + mSubjectView.setVisibility(GONE); <nl> mmm MessageViewFragment.java <nl> ppp MessageViewFragment.java <nl> - import android.content.SharedPreferences.Editor; <nl> 
mmm MessageViewFragment.java <nl> ppp MessageViewFragment.java <nl> - public void onSelectText() { <nl> - } <nl> mmm DeviceNotifications.java <nl> ppp DeviceNotifications.java <nl> - import static com.fsck.k9.notification.NotificationController.platformSupportsExtendedNotifications; <nl> - if (isPrivacyModeActive() || !platformSupportsExtendedNotifications()) { <nl> 
mmm ImapSyncTest.java <nl> ppp ImapSyncTest.java <nl> - import com.fsck.k9.mail.Store; <nl> + import com.fsck.k9.mail.store.RemoteStore; <nl> - private Store remoteStore; <nl> + private RemoteStore remoteStore; <nl> mmm ChooseFolder.java <nl> ppp ChooseFolder.java <nl> - if (mHideCurrentFolder && name.equals(mFolder)) { <nl> 
mmm QuotedMessageHelper.java <nl> ppp QuotedMessageHelper.java <nl> - package com.fsck.k9.helper; <nl> + package com.fsck.k9.message.html; <nl> + import com.fsck.k9.helper.Utility; <nl> mmm HtmlSanitizer.java <nl> ppp HtmlSanitizer.java <nl> - package com.fsck.k9.helper; <nl> + package com.fsck.k9.message.html; <nl> 
mmm Pop3FolderTest.java <nl> ppp Pop3FolderTest.java <nl> + private static final int MAX_DOWNLOAD_SIZE = -1; <nl> - folder.fetch(messageList, fetchProfile, mockListener); <nl> + folder.fetch(messageList, fetchProfile, mockListener, MAX_DOWNLOAD_SIZE); <nl> - folder.fetch(messageList, fetchProfile, mockListener); <nl> 
mmm WebDavStoreUriCreator.java <nl> ppp WebDavStoreUriCreator.java <nl> - * @see StoreConfig#getStoreUri() <nl> mmm SwipeGestureDetector.java <nl> ppp SwipeGestureDetector.java <nl> mmm K9RemoteControl.java <nl> ppp K9RemoteControl.java <nl> + import android.content.ContextWrapper; <nl> mmm OpenPgpUtils.java <nl> 
mmm Preferences.java <nl> ppp Preferences.java <nl> - private Storage mStorage; <nl> + private Storage storage; <nl> - private Context mContext; <nl> + private Context context; <nl> - mStorage = Storage.getStorage(context); <nl> - mContext = context; <nl> - if (mStorage.isEmpty()) { <nl> + storage = Storage.getStorage(context); <nl> 
mmm WebDavStore.java <nl> ppp WebDavStore.java <nl> - buffer.append(" FROM SCOPE('hierarchical traversal of \""+this.mUrl+"\"')\r\n"); <nl> + buffer.append(" FROM SCOPE('hierarchical traversal of \""+this.mUrl+"\"')\r\n"); <nl> mmm Identity.java <nl> ppp Identity.java <nl> - 	{ <nl> + { <nl> - 	{ <nl> + { <nl> 
mmm CharsetSupportTest.java <nl> ppp CharsetSupportTest.java <nl> + import org.junit.runner.RunWith; <nl> + import org.robolectric.RobolectricTestRunner; <nl> + import org.robolectric.annotation.Config; <nl> + @RunWith(RobolectricTestRunner.class) <nl> + @Config(manifest = Config.NONE) <nl> mmm DecoderUtilTest.java <nl> 
new file <nl> ppp ImapFolderPusher.java <nl> + package com.fsck.k9.mail.store.imap; <nl> + import java.io.IOException; <nl> + import java.net.SocketException; <nl> + import java.util.ArrayList; <nl> + import java.util.Collections; <nl> + import java.util.HashSet; <nl> + import java.util.Iterator; <nl> + import java.util.LinkedList; <nl> 
mmm PgpMessageBuilder.java <nl> ppp PgpMessageBuilder.java <nl> + private static final int REQUEST_USER_INTERACTION = 1; <nl> - public static final int REQUEST_USER_INTERACTION = 1; <nl> - private boolean opportunisticSkipEncryption; <nl> - private boolean opportunisticSecondPass; <nl> - boolean shouldEncrypt = cryptoStatus.isEncryptionEnabled() && !opportunisticSkipEncryption; <nl> 
mmm K9.java <nl> ppp K9.java <nl> - public static void loadPrefs(Preferences prefs) { <nl> - SharedPreferences sprefs = prefs.getPreferences(); <nl> + @Override <nl> + public void onCreate() { <nl> + maybeSetupStrictMode(); <nl> + super.onCreate(); <nl> + app = this; <nl> + galleryBuggy = checkForBuggyGallery(); <nl> 
mmm DynamicPluginManager.java <nl> ppp DynamicPluginManager.java <nl> - private ILogger mLogger = ShadowLoggerFactory.getLogger("shadow::DynamicPluginManager"); <nl> + private static final ILogger mLogger = ShadowLoggerFactory.getLogger(DynamicPluginManager.class); <nl> mmm ApkClassLoader.java <nl> ppp ApkClassLoader.java <nl> 
mmm InstalledPlugin.java <nl> ppp InstalledPlugin.java <nl> + final public String businessName; <nl> - PluginPart(int pluginType, File file, File oDexDir, File libraryDir, String[] dependsOn, String[] hostWhiteList) { <nl> + PluginPart(int pluginType, String businessName, File file, File oDexDir, File libraryDir, String[] dependsOn, String[] hostWhiteList) { <nl> 
mmm InstalledDao.java <nl> ppp InstalledDao.java <nl> - String businessName = cursor.getString(cursor.getColumnIndex(InstalledPluginDBHelper.COLUMN_BUSINESS_NAME)); <nl> - installedPlugin.plugins.put(partKey, new InstalledPlugin.PluginPart(type, businessName, pluginFile, oDexDir, libDir, dependsOn, hostWhiteList)); <nl> 
mmm SpecificationTest.java <nl> ppp SpecificationTest.java <nl> + import static org.hamcrest.Matchers.contains; <nl> + import static org.hamcrest.Matchers.hasItem; <nl> + import java.util.EnumSet; <nl> - SerializationFormat.THRIFT_BINARY)))); <nl> + SerializationFormat.THRIFT_COMPACT)))); <nl> - assertThat(services.get(HelloService.class.getName()).debugPath(), is("/hello")); <nl> 
mmm DocService.java <nl> ppp DocService.java <nl> - import com.linecorp.armeria.server.Service; <nl> - final List<Service> services = config.services().stream() <nl> + final List<ServiceEntry> services = config.services().stream() <nl> - .map(ServiceEntry::service).collect(Collectors.toList()); <nl> + .collect(Collectors.toList()); <nl> 
mmm ArmeriaServerHttpRequestTest.java <nl> ppp ArmeriaServerHttpRequestTest.java <nl> + assertThat(req.initId()).isEqualTo(ctx.uuid().toString()); <nl> mmm RequestContext.java <nl> ppp RequestContext.java <nl> + import java.util.UUID; <nl> + UUID uuid(); <nl> mmm RequestLog.java <nl> ppp RequestLog.java <nl> 
mmm ConsumesBinary.java <nl> ppp ConsumesBinary.java <nl> + import com.linecorp.armeria.common.MediaTypeNames; <nl> - @Consumes("application/binary") <nl> + @Consumes(MediaTypeNames.APPLICATION_BINARY) <nl> mmm ConsumesJson.java <nl> ppp ConsumesJson.java <nl> + import com.linecorp.armeria.common.MediaTypeNames; <nl> 
mmm ContentTooLargeException.java <nl> ppp ContentTooLargeException.java <nl> - return Exceptions.isVerbose() ? new ContentTooLargeException() : INSTANCE; <nl> + return Flags.verboseExceptions() ? new ContentTooLargeException() : INSTANCE; <nl> mmm ResponseTimeoutException.java <nl> ppp ResponseTimeoutException.java <nl> 
mmm ServerRequestContextAdapterTest.java <nl> ppp ServerRequestContextAdapterTest.java <nl> - final HttpServerRequest res = newRouteRequest(Route.builder() <nl> + final HttpServerRequest res1 = newRouteRequest(Route.builder() <nl> - assertThat(res.route()).isEqualTo("/foo/:/hoge"); <nl> + assertThat(res1.route()).isEqualTo("/foo/:bar/hoge"); <nl> 
mmm RequestContextTest.java <nl> ppp RequestContextTest.java <nl> - try (PushHandle ignored = RequestContext.push(context, false)) { <nl> + try (PushHandle ignored = RequestContext.push(context)) { <nl> - private class DummyRequestContext extends NonWrappingRequestContext { <nl> + private class DummyRequestContext extends AbstractRequestContext { <nl> 
mmm ArmeriaAutoConfigurationTest.java <nl> ppp ArmeriaAutoConfigurationTest.java <nl> - import static net.javacrumbs.jsonunit.JsonMatchers.jsonPartMatches; <nl> - import static org.hamcrest.Matchers.is; <nl> - assertThatJson(msg.content().toStringUtf8()).matches( <nl> - jsonPartMatches("services[0].exampleHttpHeaders[0].x-additional-header", <nl> 
mmm DecoratingClientFactory.java <nl> ppp DecoratingClientFactory.java <nl> + import com.linecorp.armeria.common.SessionProtocol; <nl> - public ReleasableHolder<EventLoop> acquireEventLoop(Endpoint endpoint) { <nl> - return delegate().acquireEventLoop(endpoint); <nl> + public ReleasableHolder<EventLoop> acquireEventLoop(Endpoint endpoint, SessionProtocol sessionProtocol) { <nl> 
mmm ArmeriaCallFactoryTest.java <nl> ppp ArmeriaCallFactoryTest.java <nl> - import com.google.common.base.Throwables; <nl> + import com.linecorp.armeria.common.util.Exceptions; <nl> - Throwables.getStackTraceAsString(cause)); <nl> + Exceptions.traceText(cause)); <nl> - Throwables.getStackTraceAsString(e)); <nl> 
mmm SessionOptionsTest.java <nl> ppp SessionOptionsTest.java <nl> - import static com.linecorp.armeria.client.SessionOption.MAX_CONCURRENCY; <nl> - import static org.hamcrest.Matchers.greaterThan; <nl> - assertThat(options.maxConcurrency(), greaterThan(0)); <nl> - TRUST_MANAGER_FACTORY.newValue(trustManagerFactory), <nl> 
mmm DropwizardMetricsIntegrationTest.java <nl> ppp DropwizardMetricsIntegrationTest.java <nl> - import com.linecorp.armeria.client.logging.DropwizardMetricCollectingClient; <nl> + import com.linecorp.armeria.client.metric.DropwizardMetricCollectingClient; <nl> - import com.linecorp.armeria.server.logging.DropwizardMetricCollectingService; <nl> 
new file <nl> ppp ServerSentEventsService.java <nl> + package example.armeria.server.annotated; <nl> + import static com.google.common.base.Preconditions.checkArgument; <nl> + import java.time.Duration; <nl> + import java.util.List; <nl> + import org.reactivestreams.Publisher; <nl> + import com.google.common.collect.ImmutableList; <nl> 
mmm LoggingServiceTest.java <nl> ppp LoggingServiceTest.java <nl> - import java.util.function.Function; <nl> + import java.util.function.BiFunction; <nl> + import com.linecorp.armeria.common.RequestContext; <nl> - final Function<HttpHeaders, ?> requestHeadersSanitizer = headers -> sanitizedRequestHeaders; <nl> 
new file <nl> ppp OAuth2Token.java <nl> + package com.linecorp.armeria.server.http.auth; <nl> + import static java.util.Objects.requireNonNull; <nl> + public final class OAuth2Token { <nl> + public static OAuth2Token of(String accessToken) { <nl> + return new OAuth2Token(accessToken); <nl> + } <nl> + private final String accessToken; <nl> 
mmm SampleMapper.java <nl> ppp SampleMapper.java <nl> - Sample findByName(String name); <nl> + Sample findByname(String name); <nl> deleted file <nl> mmm MybatisTestCustomFilterIntegrationTest.java <nl> - package org.mybatis.spring.boot.test.autoconfigure; <nl> - import org.junit.Test; <nl> - import org.junit.runner.RunWith; <nl> 
mmm CityMapperImpl.java <nl> ppp CityMapperImpl.java <nl> mmm SpringBootVFS.java <nl> ppp SpringBootVFS.java <nl> - import org.apache.ibatis.io.VFS; <nl> - import org.springframework.core.io.Resource; <nl> - import org.springframework.core.io.support.PathMatchingResourcePatternResolver; <nl> - import org.springframework.core.io.support.ResourcePatternResolver; <nl> 
mmm LiquibaseUpdate.java <nl> ppp LiquibaseUpdate.java <nl> mmm LiquibaseDatabaseDiff.java <nl> ppp LiquibaseDatabaseDiff.java <nl> - * @parameter property="liquibase.referenceDriver" <nl> + * @paramater property="liquibase.referenceDriver" <nl> - * @parameter property="liquibase.referencePassword" <nl> + * @paramater property="liquibase.referencePassword" <nl> 
mmm CommandLineUtils.java <nl> ppp CommandLineUtils.java <nl> - public static void doDiff(Database referenceDatabase, Database targetDatabase, String snapshotTypes, <nl> - CompareControl.SchemaComparison[] schemaComparisons, ObjectChangeFilter objectChangeFilter, PrintStream output) throws LiquibaseException { <nl> 
mmm JdbcSnapshotGenerator.java <nl> ppp JdbcSnapshotGenerator.java <nl> + import liquibase.database.core.InformixDatabase; <nl> - objectName = objectName.trim(); <nl> + if (!(database instanceof InformixDatabase)) { <nl> + objectName = objectName.trim(); <nl> + } <nl> mmm ResultSetCache.java <nl> ppp ResultSetCache.java <nl> 
mmm AddAutoIncrementChange.java <nl> ppp AddAutoIncrementChange.java <nl> - new SetNullableStatement(catalogName, this.schemaName, getTableName(), getColumnName(), <nl> - null, false), <nl> - new AddDefaultValueStatement(catalogName, this.schemaName, getTableName(), getColumnName(), <nl> - getColumnDataType(), nvf) <nl> 
mmm ResultSetCache.java <nl> ppp ResultSetCache.java <nl> + import liquibase.CatalogAndSchema; <nl> - String rowSchema = resultSetExtractor.getSchemaKey(row).toLowerCase(); <nl> + String rowSchema = CatalogAndSchema.CatalogAndSchemaCase.ORIGINAL_CASE. <nl> + equals(resultSetExtractor.database.getSchemaAndCatalogCase())?resultSetExtractor.getSchemaKey(row): <nl> 
mmm AbstractDatabase.java <nl> ppp AbstractDatabase.java <nl> - 	protected List<DatabaseFunction> databaseFunctions; <nl> + 	protected List<DatabaseFunction> databaseFunctions = new ArrayList<DatabaseFunction>(); <nl> - 	public void setDatabaseFunctions(List<DatabaseFunction> databaseFunctions) { <nl> - 		this.databaseFunctions = databaseFunctions; <nl> 
new file <nl> ppp LiquibaseSyncHubMojo.java <nl> + package org.liquibase.maven.plugins; <nl> + import liquibase.Contexts; <nl> + import liquibase.LabelExpression; <nl> + import liquibase.Liquibase; <nl> + import liquibase.changelog.ChangeLogParameters; <nl> + import liquibase.command.*; <nl> + import liquibase.command.core.SyncHubCommand; <nl> 
mmm AbstractJdbcDatabase.java <nl> ppp AbstractJdbcDatabase.java <nl> + import java.io.IOException; <nl> + import java.io.Writer; <nl> + import java.math.BigInteger; <nl> + import java.sql.ResultSet; <nl> + import java.sql.SQLException; <nl> + import java.text.DateFormat; <nl> + import java.text.ParseException; <nl> 
mmm DB2TypeConverter.java <nl> ppp DB2TypeConverter.java <nl> - return new NumberType("NUMERIC"); <nl> + return new NumberType("DECFLOAT(16)"); <nl> mmm CreateDatabaseChangeLogTableGeneratorFirebird.java <nl> ppp CreateDatabaseChangeLogTableGeneratorFirebird.java <nl> - package liquibase.sqlgenerator.core; <nl> 
mmm Column.java <nl> ppp Column.java <nl> - private static final Pattern OBJECT_DATA_TYPE_PATTERN = Pattern.compile("(.*)#\\{(.*)\\}"); <nl> - ParsedNode defaultValueNode = parsedNode.getChild(null, "defaultValue"); <nl> - try { <nl> - if (defaultValueNode != null) { <nl> - Object value = defaultValueNode.getValue(); <nl> 
mmm XMLChangeLogSAXParser.java <nl> ppp XMLChangeLogSAXParser.java <nl> + import liquibase.changelog.ChangeLogParameter; <nl> + import java.util.List; <nl> - public DatabaseChangeLog parse(String physicalChangeLogLocation, Map<String, Object> changeLogParameters, ResourceAccessor resourceAccessor) throws ChangeLogParseException { <nl> 
new file <nl> ppp MySQLConnSupplierWindows.java <nl> + package liquibase.database.core.supplier; <nl> + public class MySQLConnSupplierWindows extends MySQLConnSupplier { <nl> + @Override <nl> + public String getConfigurationName() { <nl> + return "windows"; <nl> + } <nl> + } <nl> mmm DerbyConnSupplier.java <nl> 
mmm AbstractDatabaseTest.java <nl> ppp AbstractDatabaseTest.java <nl> - assertEquals("schemaName.tableName", database.escapeTableName("catalogName", "schemaName", "tableName")); <nl> + assertEquals("catalogName.schemaName.tableName", database.escapeTableName("catalogName", "schemaName", "tableName")); <nl> 
mmm RenameColumnExecuteTest.java <nl> ppp RenameColumnExecuteTest.java <nl> - assertCorrect("alter table table_name change column_name new_name int", MySQLDatabase.class); <nl> + assertCorrect("alter table table_name change column_name new_name int", MySQLDatabase.class, MariaDBDatabase.class); <nl> mmm AbstractIntegrationTest.java <nl> 
mmm DiffToChangeLog.java <nl> ppp DiffToChangeLog.java <nl> - import liquibase.database.AbstractJdbcDatabase; <nl> - import liquibase.database.Database; <nl> - import liquibase.database.ObjectQuotingStrategy; <nl> - import liquibase.database.OfflineConnection; <nl> + import liquibase.database.*; <nl> + import liquibase.snapshot.DatabaseSnapshot; <nl> 
new file <nl> ppp LockServiceExecuteTest.java <nl> + package liquibase.lock; <nl> + import liquibase.database.Database; <nl> + import liquibase.database.DatabaseFactory; <nl> + import liquibase.database.template.Executor; <nl> + import liquibase.database.template.JdbcOutputTemplate; <nl> + import liquibase.exception.JDBCException; <nl> 
mmm LiquibaseDatabaseDiff.java <nl> ppp LiquibaseDatabaseDiff.java <nl> + import liquibase.command.AbstractSelfConfiguratingCommand; <nl> + import liquibase.command.CommandExecutionException; <nl> + import liquibase.command.CommandFactory; <nl> + import liquibase.command.LiquibaseCommand; <nl> + import liquibase.command.core.DiffCommand; <nl> 
mmm AddPrimaryKeyStatement.java <nl> ppp AddPrimaryKeyStatement.java <nl> - import liquibase.change.ColumnConfig; <nl> - import liquibase.util.StringUtil; <nl> - private ColumnConfig[] columns; <nl> + private String columnNames; <nl> - public AddPrimaryKeyStatement(String catalogName, String schemaName, String tableName, ColumnConfig[] columns, String constraintName) { <nl> 
mmm Main.java <nl> ppp Main.java <nl> - import liquibase.lockservice.LockServiceImpl; <nl> + import liquibase.lockservice.LockService; <nl> + import liquibase.lockservice.LockServiceFactory; <nl> - LockServiceImpl.getInstance(database).forceReleaseLock(); <nl> + LockService lockService = LockServiceFactory.getInstance().getLockService(database); <nl> 
mmm ReorganizeTableGeneratorDB2.java <nl> ppp ReorganizeTableGeneratorDB2.java <nl> + import liquibase.database.core.DB2Database.DataServerType; <nl> - return database instanceof DB2Database && !((DB2Database) database).isZOS(); <nl> + return database instanceof DB2Database && ((DB2Database) database).getDataServerType() != DataServerType.DB2Z; <nl> 
mmm XxlJobConfig.java <nl> ppp XxlJobConfig.java <nl> - @Bean <nl> + @Bean(initMethod = "start", destroyMethod = "destroy") <nl> mmm XxlJobServiceImpl.java <nl> ppp XxlJobServiceImpl.java <nl> - 		Set<String> executerAddressSet = new HashSet<String>(); <nl> + 		Set<String> executorAddressSet = new HashSet<String>(); <nl> 
mmm ClusterEventEncoderTest.java <nl> ppp ClusterEventEncoderTest.java <nl> - import static org.agrona.BufferUtil.allocateDirectAligned; <nl> - private final UnsafeBuffer buffer = new UnsafeBuffer(allocateDirectAligned(MAX_EVENT_LENGTH, CACHE_LINE_LENGTH)); <nl> + private final UnsafeBuffer buffer = new UnsafeBuffer(new byte[MAX_EVENT_LENGTH]); <nl> 
mmm ArchiveAndReplaySystemTest.java <nl> ppp ArchiveAndReplaySystemTest.java <nl> + @Override <nl> - System.out.println( <nl> - "ArchiveAndReplaySystemTest failed with random seed:" + ArchiveAndReplaySystemTest.this.seed); <nl> + System.out.println("ArchiveAndReplaySystemTest failed with random seed:" + <nl> 
mmm SecondsAtBitsPerSecondTest.java <nl> ppp SecondsAtBitsPerSecondTest.java <nl> mmm MessageSizePatternTest.java <nl> ppp MessageSizePatternTest.java <nl> - p.getNext(), is(1000)); <nl> + p.getNext(), is(1000)); <nl> - p.getNext(), is(1000)); <nl> + p.getNext(), is(1000)); <nl> - p.getNext(), both(greaterThanOrEqualTo(1000)).and(lessThanOrEqualTo(1001))); <nl> 
mmm NetworkPublication.java <nl> ppp NetworkPublication.java <nl> + import uk.co.real_logic.aeron.driver.stats.SystemCounters; <nl> mmm DirectPublicationTest.java <nl> ppp DirectPublicationTest.java <nl> + import uk.co.real_logic.aeron.driver.stats.SystemCounters; <nl> mmm SenderTest.java <nl> ppp SenderTest.java <nl> 
mmm TimerWheelTest.java <nl> ppp TimerWheelTest.java <nl> - assertThat(wheel.calculateDelayInMsec(), allOf(greaterThanOrEqualTo(90L), lessThanOrEqualTo(110L))); <nl> + assertThat(wheel.calculateDelayInMs(), allOf(greaterThanOrEqualTo(90L), lessThanOrEqualTo(110L))); <nl> - assertThat(wheel.calculateDelayInMsec(), is(1L)); <nl> 
mmm AeronClient.java <nl> ppp AeronClient.java <nl> + conductor.clientTimeout(clientId); <nl> mmm CmdInterceptor.java <nl> ppp CmdInterceptor.java <nl> + case ON_CLIENT_TIMEOUT: <nl> + LOGGER.log(CMD_OUT_ON_CLIENT_TIMEOUT, buffer, index, length); <nl> + break; <nl> mmm DriverEventsListener.java <nl> ppp DriverEventsListener.java <nl> 
mmm Session.java <nl> ppp Session.java <nl> + void close(); <nl> mmm RecordingSessionTest.java <nl> ppp RecordingSessionTest.java <nl> - assertNotEquals("Expect some work", 0, session.doWork()); <nl> + session.doWork(); <nl> + session.close(); <nl> mmm SessionWorker.java <nl> ppp SessionWorker.java <nl> - sessionCleanup(session.sessionId()); <nl> 
mmm Archive.java <nl> ppp Archive.java <nl> + import io.aeron.UnavailableCounterHandler; <nl> + import org.agrona.collections.MutableReference; <nl> - import static org.agrona.SystemUtil.getDurationInNanos; <nl> - import static org.agrona.SystemUtil.getSizeAsInt; <nl> - import static org.agrona.SystemUtil.loadPropertiesFiles; <nl> 
mmm MessagesAtBitsPerSecondInterval.java <nl> ppp MessagesAtBitsPerSecondInterval.java <nl> - 	private final long goalBitsPerSecond; <nl> - 	private final long messages; <nl> + private final long goalBitsPerSecond; <nl> + private final long messages; <nl> - 	public MessagesAtBitsPerSecondInterval(long messages, long bitsPerSecond) <nl> 
mmm Subscription.java <nl> ppp Subscription.java <nl> mmm NewConnectionHandler.java <nl> ppp NewConnectionHandler.java <nl> mmm Publication.java <nl> ppp Publication.java <nl> - { <nl> + { <nl> mmm InactiveConnectionHandler.java <nl> ppp InactiveConnectionHandler.java <nl> mmm AeronUri.java <nl> ppp AeronUri.java <nl> 
mmm RateSubscriber.java <nl> ppp RateSubscriber.java <nl> - final MediaDriver driver = EMBEDDED_MEDIA_DRIVER ? MediaDriver.launch() : null; <nl> + final MediaDriver driver = EMBEDDED_MEDIA_DRIVER ? MediaDriver.launchEmbedded() : null; <nl> + if(EMBEDDED_MEDIA_DRIVER) <nl> + { <nl> + ctx.dirName(driver.contextDirName()); <nl> 
new file <nl> ppp PubSubOptions.java <nl> + package uk.co.real_logic.aeron.tools; <nl> + import org.apache.commons.cli.*; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + public class PubSubOptions <nl> + { <nl> + final Options options; <nl> + boolean useEmbeddedDriver; <nl> + long randomSeed; <nl> 
mmm ControlSessionDemuxer.java <nl> ppp ControlSessionDemuxer.java <nl> + case TaggedReplicateRequestDecoder.TEMPLATE_ID: <nl> + { <nl> + final TaggedReplicateRequestDecoder decoder = decoders.taggedReplicateRequest; <nl> + decoder.wrap( <nl> + buffer, <nl> + offset + MessageHeaderDecoder.ENCODED_LENGTH, <nl> 
mmm MediaDriver.java <nl> ppp MediaDriver.java <nl> - import uk.co.real_logic.aeron.common.CommonContext; <nl> - import uk.co.real_logic.aeron.common.IdleStrategy; <nl> - import uk.co.real_logic.aeron.common.IoUtil; <nl> - import uk.co.real_logic.aeron.common.TimerWheel; <nl> - import uk.co.real_logic.aeron.common.concurrent.UnsafeBuffer; <nl> 
mmm TermGapScanner.java <nl> ppp TermGapScanner.java <nl> - final UnsafeBuffer termBuffer, final int termId, int completedOffset, final int hwmOffset, final GapHandler handler) <nl> + final UnsafeBuffer termBuffer, final int termId, int rebuildOffset, final int hwmOffset, final GapHandler handler) <nl> - final int frameLength = frameLengthVolatile(termBuffer, completedOffset); <nl> 
mmm BasicSubscriber.java <nl> ppp BasicSubscriber.java <nl> + import uk.co.real_logic.aeron.FragmentAssemblyAdapter; <nl> - .newConnectionHandler(SamplesUtil::printNewConnection) <nl> - .inactiveConnectionHandler(SamplesUtil::printInactiveConnection); <nl> - final DataHandler dataHandler = printStringMessage(STREAM_ID); <nl> 
mmm BufferUsageStrategy.java <nl> ppp BufferUsageStrategy.java <nl> - import java.nio.ByteBuffer; <nl> - public class Appender <nl> + public class LogAppender <nl> - public Appender(final AtomicBuffer logBuffer, <nl> - final AtomicBuffer stateBuffer, <nl> - final byte[] defaultHeader, <nl> - final int maxFrameLength) <nl> 
new file <nl> ppp RecyclerScrollMoreListener.java <nl> + package com.stfalcon.chatkit.features.utils; <nl> + import android.support.v7.widget.GridLayoutManager; <nl> + import android.support.v7.widget.LinearLayoutManager; <nl> + import android.support.v7.widget.RecyclerView; <nl> + import android.support.v7.widget.StaggeredGridLayoutManager; <nl> 
mmm MySqlCreateTableStatement.java <nl> ppp MySqlCreateTableStatement.java <nl> - protected SQLSelect            query; <nl> + @Deprecated <nl> - return query; <nl> + return select; <nl> + @Deprecated <nl> - this.query = query; <nl> + this.select = query; <nl> - this.acceptChild(visitor, getQuery()); <nl> + this.acceptChild(visitor, getSelect()); <nl> 
mmm OracleSchemaStatVisitor.java <nl> ppp OracleSchemaStatVisitor.java <nl> - x.getLeft().accept(this); <nl> - x.getRight().accept(this); <nl> - { <nl> - String leftTable = (String) x.getLeft().getAttribute(ATTR_TABLE); <nl> - String rightTable = (String) x.getRight().getAttribute(ATTR_TABLE); <nl> - if (leftTable != null && leftTable.equals(rightTable)) { <nl> 
mmm MySqlDescribteTest.java <nl> ppp MySqlDescribteTest.java <nl> - SQLStatement statemen = statementList.get(0); <nl> + SQLStatement stmt = statementList.get(0); <nl> - statemen.accept(visitor); <nl> + stmt.accept(visitor); <nl> mmm OracleOutputVisitor.java <nl> ppp OracleOutputVisitor.java <nl> - x.getForStatement().accept(this); <nl> 
new file <nl> ppp MySqlCreateTableTest8.java <nl> + package com.alibaba.druid.bvt.sql.mysql; <nl> + import java.util.List; <nl> + import junit.framework.Assert; <nl> + import com.alibaba.druid.sql.MysqlTest; <nl> + import com.alibaba.druid.sql.ast.SQLStatement; <nl> + import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlCreateTableStatement; <nl> 
mmm SQLBuilder.java <nl> ppp SQLBuilder.java <nl> mmm SQLBuilderImpl.java <nl> ppp SQLBuilderImpl.java <nl> mmm MySqlSelectQueryBlock.java <nl> ppp MySqlSelectQueryBlock.java <nl> + public Limit(SQLExpr rowCount){ <nl> + this.setRowCount(rowCount); <nl> + } <nl> deleted file <nl> mmm MySqlSelectBuilderImpl.java <nl> 
new file <nl> ppp WallCheckResult.java <nl> + package com.alibaba.druid.wall; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + import com.alibaba.druid.sql.ast.SQLStatement; <nl> + public class WallCheckResult { <nl> + private final List<Violation>    violations    = new ArrayList<Violation>(2); <nl> 
deleted file <nl> mmm StickyRandomDataSourceSelector.java <nl> - package com.alibaba.druid.pool.ha.selector; <nl> - import com.alibaba.druid.pool.DruidDataSource; <nl> - import com.alibaba.druid.pool.ha.HighAvailableDataSource; <nl> - import com.alibaba.druid.support.logging.Log; <nl> - import com.alibaba.druid.support.logging.LogFactory; <nl> 
mmm SQLInSubQueryExpr.java <nl> ppp SQLInSubQueryExpr.java <nl> + if (subQuery != null) { <nl> + subQuery.setParent(this); <nl> + } <nl> new file <nl> ppp MySqlWallTest67.java <nl> + package com.alibaba.druid.bvt.filter.wall; <nl> + import junit.framework.TestCase; <nl> + import org.junit.Assert; <nl> + import com.alibaba.druid.wall.WallProvider; <nl> 
mmm OracleGroupingSetTest.java <nl> ppp OracleGroupingSetTest.java <nl> + "( calendar_month_desc, co.country_id) );\n"; <nl> mmm Case0.java <nl> ppp Case0.java <nl> - user = "dragoon"; <nl> - password = "dragoon"; <nl> + jdbcUrl = "jdbc:fake:dragoon_v25masterdb"; <nl> + user = "dragoon25"; <nl> + password = "dragoon25"; <nl> 
mmm WallFunctionStat.java <nl> ppp WallFunctionStat.java <nl> - import java.util.Collections; <nl> - import java.util.Map; <nl> - public Map<String, Object> toMap() { <nl> - return Collections.<String, Object>singletonMap("invokeCount", invokeCount); <nl> - } <nl> mmm MySqlWallDescribteTest.java <nl> ppp MySqlWallDescribteTest.java <nl> 
mmm AsyncCloseTest3.java <nl> ppp AsyncCloseTest3.java <nl> - import java.lang.management.ManagementFactory; <nl> - import java.lang.reflect.Field; <nl> + import junit.framework.TestCase; <nl> - import com.alibaba.druid.support.logging.Log; <nl> - import com.alibaba.druid.support.logging.NoLoggingImpl; <nl> 
mmm DruidDataSourceMBean.java <nl> ppp DruidDataSourceMBean.java <nl> + boolean isUseGlobalDataSourceStat(); <nl> mmm MySqlASTVisitorAdapter.java <nl> ppp MySqlASTVisitorAdapter.java <nl> + @Override <nl> + public boolean visit(MySqlChecksumTableStatement x) { <nl> + return true; <nl> + } <nl> + @Override <nl> 
mmm JdbcUtils.java <nl> ppp JdbcUtils.java <nl> - public static Class<?> loadDriverClass(String className) { <nl> - Class<?> clazz = null; <nl> - if (className == null) { <nl> - return null; <nl> - } <nl> - ClassLoader ctxClassLoader = Thread.currentThread().getContextClassLoader(); <nl> - if (ctxClassLoader != null) { <nl> 
mmm SQLExprParser.java <nl> ppp SQLExprParser.java <nl> - sqlExpr = parseAliasExpr(lexer.stringVal()); <nl> + sqlExpr = new SQLIdentifierExpr('"' + lexer.stringVal() + '"'); <nl> - protected SQLExpr parseAliasExpr(String alias) { <nl> - return new SQLIdentifierExpr('"' + alias + '"'); <nl> - } <nl> mmm SQLCharExpr.java <nl> 
new file <nl> ppp MySqlPartitionByHash.java <nl> + package com.alibaba.druid.sql.dialect.mysql.ast.statement; <nl> + import java.util.List; <nl> + import com.alibaba.druid.sql.ast.SQLExpr; <nl> + import com.alibaba.druid.sql.ast.SQLName; <nl> + import com.alibaba.druid.sql.ast.SQLPartitioningClause; <nl> + import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObjectImpl; <nl> 
new file <nl> ppp DruidConsole.java <nl> + package com.alibaba.druid.pool.console; <nl> + import java.io.Console; <nl> + import java.io.PrintWriter; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import javax.management.Attribute; <nl> + import javax.management.AttributeList; <nl> 
deleted file <nl> mmm AesDecrypterTest.java <nl> - package com.alibaba.druid.support.security.decryptor; <nl> - import com.alibaba.druid.pool.DecryptException; <nl> - import com.alibaba.druid.pool.SensitiveParameters; <nl> - import junit.framework.Assert; <nl> - import org.junit.Test; <nl> - public class AesDecrypterTest { <nl> 
new file <nl> ppp PGSelectTest9.java <nl> + package com.alibaba.druid.bvt.sql.postgresql; <nl> + import java.util.List; <nl> + import junit.framework.Assert; <nl> + import com.alibaba.druid.sql.PGTest; <nl> + import com.alibaba.druid.sql.ast.SQLStatement; <nl> + import com.alibaba.druid.sql.dialect.postgresql.parser.PGSQLStatementParser; <nl> 
mmm OracleEvalVisitor.java <nl> ppp OracleEvalVisitor.java <nl> + @Override <nl> + public void unregisterFunction(String funcName) { <nl> + functions.remove(funcName); <nl> + } <nl> new file <nl> ppp MySqlWallTest144.java <nl> + package com.alibaba.druid.bvt.filter.wall; <nl> + import junit.framework.TestCase; <nl> 
mmm MySqlExceptionSorterTest_oceanbase.java <nl> ppp MySqlExceptionSorterTest_oceanbase.java <nl> - Assert.assertTrue(sorter.isExceptionFatal(new SQLException("", "", -9000))); <nl> + SQLException exception = new SQLException("", "", -9000); <nl> + Assert.assertTrue(sorter.isExceptionFatal(exception)); <nl> 
deleted file <nl> mmm LocalVirtualMachine.java <nl> - package com.alibaba.druid.pool.console; <nl> - import java.io.File; <nl> - import java.io.IOException; <nl> - import java.util.HashMap; <nl> - import java.util.List; <nl> - import java.util.Map; <nl> - import java.util.Properties; <nl> - import java.util.Set; <nl> 
mmm DruidDriverPanel.java <nl> ppp DruidDriverPanel.java <nl> - package com.alibaba.druid.support.jconsole; <nl> - import java.util.ArrayList; <nl> - import java.util.LinkedHashMap; <nl> - import com.alibaba.druid.support.jconsole.model.DruidTableCellRenderer; <nl> - import com.alibaba.druid.support.jconsole.model.DruidTableModel; <nl> 
mmm DruidDataSourcePanel.java <nl> ppp DruidDataSourcePanel.java <nl> - package com.alibaba.druid.support.jconsole; <nl> - public class DruidDataSourcePanel extends DruidPanel { <nl> - private static final long serialVersionUID = 1L; <nl> - } <nl> + package com.alibaba.druid.support.jconsole; <nl> + import java.util.ArrayList; <nl> 
mmm SQLSelectParser.java <nl> ppp SQLSelectParser.java <nl> - if (lexer.token() == Token.UNION) { <nl> - throw new SQLParseException("TODO"); <nl> - } <nl> mmm MySqlASTVisitor.java <nl> ppp MySqlASTVisitor.java <nl> + import com.alibaba.druid.sql.dialect.mysql.ast.expr.MySqlOutFileExpr; <nl> + boolean visit(MySqlOutFileExpr x); <nl> 
mmm OracleOutputVisitor.java <nl> ppp OracleOutputVisitor.java <nl> - print("SELECT "); <nl> + print("SELECT "); <nl> - if (x.getHints().size() > 0) { <nl> - printAndAccept(x.getHints(), ", "); <nl> - } <nl> + if (x.getHints().size() > 0) { <nl> + } <nl> mmm WallVisitor.java <nl> ppp WallVisitor.java <nl> + boolean isSqlModified(); <nl> 
mmm JdbcUtilsTest2.java <nl> ppp JdbcUtilsTest2.java <nl> - public void test_kdb() throws Exception { <nl> - assertEquals(JdbcConstants.KDB_DRIVER, JdbcUtils.getDriverClassName("jdbc:inspur:")); <nl> - } <nl> mmm SQLEvalVisitorUtils.java <nl> ppp SQLEvalVisitorUtils.java <nl> - || JdbcConstants.ENTERPRISEDB.equals(dbType)) { <nl> 
mmm ProductSpuMapper.java <nl> ppp ProductSpuMapper.java <nl> - List<ProductSpuDO> selectByIds(Collection<Integer> ids); <nl> + List<ProductSpuDO> selectByIds(@Param("ids") Collection<Integer> ids); <nl> mmm ProductAttrBO.java <nl> ppp ProductAttrBO.java <nl> + import java.io.Serializable; <nl> - public class ProductAttrBO { <nl> 
mmm AdminController.java <nl> ppp AdminController.java <nl> - @ApiImplicitParam(name = "nickname", value = "昵称，模糊匹配", required = true, example = "小王"), <nl> + @ApiImplicitParam(name = "nickname", value = "昵称，模糊匹配", example = "小王"), <nl> mmm ProductSkuAddOrUpdateDTO.java <nl> ppp ProductSkuAddOrUpdateDTO.java <nl> 
mmm AdminServiceImpl.java <nl> ppp AdminServiceImpl.java <nl> - import cn.iocoder.mall.admin.api.bo.AdminBO; <nl> - import cn.iocoder.mall.admin.api.bo.AdminPageBO; <nl> + import cn.iocoder.mall.admin.api.bo.admin.AdminBO; <nl> + import cn.iocoder.mall.admin.api.bo.admin.AdminPageBO; <nl> - import cn.iocoder.mall.admin.api.dto.AdminAddDTO; <nl> 
new file <nl> ppp OffsetTimeTest.java <nl> + package libcore.java.time; <nl> + import org.junit.Test; <nl> + import java.time.OffsetTime; <nl> + import java.time.ZoneOffset; <nl> + import java.time.temporal.ChronoUnit; <nl> + import java.time.temporal.TemporalUnit; <nl> + import java.time.temporal.UnsupportedTemporalTypeException; <nl> 
new file <nl> ppp UserPrincipal.java <nl> + package java.nio.file.attribute; <nl> + import java.security.Principal; <nl> + public interface UserPrincipal extends Principal { } <nl> mmm Posix.java <nl> ppp Posix.java <nl> - import android.system.Int32Ref; <nl> + import libcore.util.MutableInt; <nl> - public native int ioctlInt(FileDescriptor fd, int cmd, Int32Ref javaArg) <nl> 
mmm CharsetEncoder.java <nl> ppp CharsetEncoder.java <nl> + import java.lang.ref.WeakReference; <nl> + * @hide <nl> - protected CharsetEncoder(Charset cs, <nl> - float averageBytesPerChar, <nl> - float maxBytesPerChar, <nl> - byte[] replacement, <nl> - boolean trusted) <nl> + protected CharsetEncoder(Charset cs, float averageBytesPerChar, float maxBytesPerChar, byte[] replacement, <nl> 
new file <nl> ppp TestZoneTextPrinterParser.java <nl> + package test.java.time.format; <nl> + import static org.junit.Assert.assertEquals; <nl> + import com.tngtech.java.junit.dataprovider.DataProvider; <nl> + import com.tngtech.java.junit.dataprovider.DataProviderRunner; <nl> + import com.tngtech.java.junit.dataprovider.UseDataProvider; <nl> 
mmm AnonymousClassConverterTest.java <nl> ppp AnonymousClassConverterTest.java <nl> - String param0 = options.isJDT() ? "param0" : "i"; <nl> - String superOuter = options.isJDT() ? "superOuter$" : "x0"; <nl> - + "Test_A_1 *self, Test_A *outer$, Test_B *capture$0, Test_B *" + superOuter + ", " <nl> - + "jint " + param0 + ") {", <nl> 
mmm NilCheckResolver.java <nl> ppp NilCheckResolver.java <nl> + import com.google.devtools.j2objc.ast.QualifiedName; <nl> + @Override <nl> + public boolean visit(QualifiedName node) { <nl> + if (!needsNilCheck(node.getQualifier())) { <nl> + return true; <nl> + } <nl> + IVariableBinding var = TreeUtil.getVariableBinding(node); <nl> 
mmm FileLock.java <nl> ppp FileLock.java <nl> + package libcore.java.nio.channels; <nl> + import junit.framework.TestCase; <nl> + import java.io.IOException; <nl> + import java.nio.channels.InterruptedByTimeoutException; <nl> + public class InterruptedByTimeoutExceptionTest extends TestCase { <nl> + public void test_empty() { <nl> 
new file <nl> ppp FunctionDeclaration.java <nl> + package com.google.devtools.j2objc.ast; <nl> + import org.eclipse.jdt.core.dom.ITypeBinding; <nl> + import java.util.List; <nl> + public class FunctionDeclaration extends BodyDeclaration { <nl> + private String name = null; <nl> + private final ChildLink<Type> returnType = ChildLink.create(Type.class, this); <nl> 
mmm EnumRewriter.java <nl> ppp EnumRewriter.java <nl> + import com.google.devtools.j2objc.util.NameTable; <nl> - header.append("#ifdef J2OBJC_RENAME_ALIASES\n"); <nl> + header.append("#ifdef J2OBJC_RENAME2_ALIASES\n"); <nl> + "#define %s_valueOfWithNSString_ %s_valueOfWithNSString_\n", <nl> - String bareTypeName = typeName.endsWith("Enum") <nl> 
new file <nl> ppp InstantTest.java <nl> + package libcore.java.time; <nl> + import org.junit.Test; <nl> + import java.time.Instant; <nl> + import java.time.temporal.ChronoUnit; <nl> + import java.time.temporal.TemporalUnit; <nl> + import static org.junit.Assert.assertEquals; <nl> + public class InstantTest { <nl> 
mmm FileUpLoadChooserImpl.java <nl> ppp FileUpLoadChooserImpl.java <nl> - AgentWebUtils.toastShowShort(mActivity, String.format(mFileUploadMsgConfig.getMaxFileLengthLimit(), (AgentWebConfig.MAX_FILE_LENGTH / 1024 / 1024) + "")); <nl> + if (mAgentWebUIController.get() != null) { <nl> + mAgentWebUIController.get().showMessage(String.format(mFileUploadMsgConfig.getMaxFileLengthLimit(), (AgentWebConfig.MAX_FILE_LENGTH / 1024 / 1024) + ""), TAG.concat("|convertFileAndCallBack")); <nl> 
mmm GPUImage3x3TextureSamplingFilter.java <nl> ppp GPUImage3x3TextureSamplingFilter.java <nl> - private float mTexelWidth; <nl> + private float mTexelWidth; <nl> mmm GPUImageSobelEdgeDetection.java <nl> ppp GPUImageSobelEdgeDetection.java <nl> mmm GPUImageEmbossFilter.java <nl> ppp GPUImageEmbossFilter.java <nl> 
mmm InventoryStreamProcessor.java <nl> ppp InventoryStreamProcessor.java <nl> + import org.apache.skywalking.oap.server.core.storage.annotation.Storage; <nl> - registerDAO = storageDAO.newRegisterDao(stream.storage().builder().newInstance()); <nl> + registerDAO = storageDAO.newRegisterDao(stream.builder().newInstance()); <nl> 
new file <nl> ppp AnnotationMethodHandlerAdapterInstrumentation.java <nl> + package org.apache.skywalking.apm.plugin.spring.mvc.commons.define; <nl> + import net.bytebuddy.description.method.MethodDescription; <nl> + import net.bytebuddy.matcher.ElementMatcher; <nl> + import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint; <nl> 
new file <nl> ppp SpringComponentInstrumentation.java <nl> + package org.apache.skywalking.apm.plugin.spring.annotations.component; <nl> + import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch; <nl> + import org.apache.skywalking.apm.plugin.spring.annotations.AbstractSpringBeanInstrumentation; <nl> 
mmm ClassInstanceMethodsInterceptor.java <nl> ppp ClassInstanceMethodsInterceptor.java <nl> - import com.a.eye.skywalking.api.logging.api.ILog; <nl> - import com.a.eye.skywalking.api.logging.api.LogManager; <nl> + import com.a.eye.skywalking.api.logging.ILog; <nl> + import com.a.eye.skywalking.api.logging.LogManager; <nl> 
new file <nl> ppp ClusterNodeExistException.java <nl> + package org.skywalking.apm.collector.cluster; <nl> + public class ClusterNodeExistException extends ClusterException { <nl> + public ClusterNodeExistException(String message) { <nl> + super(message); <nl> + } <nl> + public ClusterNodeExistException(String message, Throwable cause) { <nl> 
new file <nl> ppp HystrixCommandRunInterceptor.java <nl> + package org.apache.skywalking.apm.plugin.hystrix.v1; <nl> + import java.lang.reflect.Method; <nl> + import org.apache.skywalking.apm.agent.core.context.ContextManager; <nl> + import org.apache.skywalking.apm.agent.core.context.ContextSnapshot; <nl> 
deleted file <nl> mmm EnhanceRequireObjectCache.java <nl> - package org.apache.skywalking.apm.plugin.hystrix.v1; <nl> - import org.apache.skywalking.apm.agent.core.context.ContextSnapshot; <nl> - public class EnhanceRequireObjectCache { <nl> - private final String operationNamePrefix; <nl> - private ContextSnapshot contextSnapshot; <nl> 
mmm CollectorBootStartUp.java <nl> ppp CollectorBootStartUp.java <nl> - } catch (ConfigFileNotFoundException e) { <nl> - logger.error(e.getMessage(), e); <nl> - } catch (ModuleNotFoundException e) { <nl> - logger.error(e.getMessage(), e); <nl> - } catch (ProviderNotFoundException e) { <nl> - logger.error(e.getMessage(), e); <nl> 
mmm ModuleQuery.java <nl> ppp ModuleQuery.java <nl> - import java.util.List; <nl> + import java.util.List; <nl> mmm ConfigFileNotFoundException.java <nl> ppp ConfigFileNotFoundException.java <nl> mmm ApplicationConfiguration.java <nl> ppp ApplicationConfiguration.java <nl> - import java.util.*; <nl> + import java.util.HashMap; <nl> 
mmm DependencyResource.java <nl> ppp DependencyResource.java <nl> - import io.kubernetes.client.models.V1ObjectMeta; <nl> - import io.kubernetes.client.models.V1OwnerReference; <nl> + import io.kubernetes.client.openapi.models.V1ObjectMeta; <nl> + import io.kubernetes.client.openapi.models.V1OwnerReference; <nl> 
mmm EndpointRelation.java <nl> ppp EndpointRelation.java <nl> + @Getter @Setter private int serviceId; <nl> + @Getter @Setter private String serviceName; <nl> + @Getter @Setter private int serviceInstanceId; <nl> + @Getter @Setter private String serviceInstanceName; <nl> + @Getter @Setter private int childServiceId; <nl> 
mmm AlarmRuleCtl.java <nl> ppp AlarmRuleCtl.java <nl> 
mmm SearchController.java <nl> ppp SearchController.java <nl> + import com.a.eye.skywalking.registry.RegistryCenterFactory; <nl> + import com.a.eye.skywalking.registry.api.RegistryCenter; <nl> + import com.a.eye.skywalking.registry.impl.zookeeper.ZookeeperConfig; <nl> + import com.a.eye.skywalking.web.client.routing.RoutingServerWatcher; <nl> 
mmm AlarmStandardPersistence.java <nl> ppp AlarmStandardPersistence.java <nl> - record.setTimeBucket(TimeBucket.getSecondTimeBucket(message.getStartTime())); <nl> + record.setTimeBucket(TimeBucket.getRecordTimeBucket(message.getStartTime())); <nl> mmm SegmentSpanListener.java <nl> ppp SegmentSpanListener.java <nl> 
new file <nl> ppp NodeComponentRemoteData.java <nl> + package org.skywalking.apm.collector.remote.grpc.data.node; <nl> + import org.skywalking.apm.collector.core.data.Data; <nl> + import org.skywalking.apm.collector.remote.RemoteDataMapping; <nl> + import org.skywalking.apm.collector.remote.grpc.data.GRPCRemoteData; <nl> 
new file <nl> ppp XMemcachedConstructorWithComplexArgInterceptorTest.java <nl> + package org.skywalking.apm.plugin.xmemcached.v2; <nl> + import static org.mockito.Mockito.times; <nl> + import static org.mockito.Mockito.verify; <nl> + import java.net.InetSocketAddress; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> 
deleted file <nl> mmm RequestSpanAssert.java <nl> - package com.a.eye.skywalking.testframework.api; <nl> - import com.a.eye.skywalking.network.grpc.RequestSpan; <nl> - import com.a.eye.skywalking.network.grpc.TraceId; <nl> - import com.a.eye.skywalking.testframework.api.exception.SpanDataNotEqualsException; <nl> 
mmm AbstractSpan.java <nl> ppp AbstractSpan.java <nl> + AbstractSpan start(long starttime); <nl> mmm AbstractTracingSpan.java <nl> ppp AbstractTracingSpan.java <nl> + @Override <nl> + public AbstractSpan start(long startTime) { <nl> + this.startTime = startTime; <nl> + return this; <nl> + } <nl> mmm ComponentsDefine.java <nl> 
mmm NodeMappingHourAgg.java <nl> ppp NodeMappingHourAgg.java <nl> - return WorkerConfig.WorkerNum.Node.NodeMappingHourAgg.Size; <nl> + return WorkerConfig.WorkerNum.Node.NodeMappingHourAgg.Value; <nl> mmm NodeMappingDayAgg.java <nl> ppp NodeMappingDayAgg.java <nl> - return WorkerConfig.WorkerNum.Node.NodeMappingDayAgg.Size; <nl> 
new file <nl> ppp AnalysisResultController.java <nl> + package com.ai.cloud.skywalking.web.controller; <nl> + public class AnalysisResultController { <nl> + } <nl> mmm CallChainMapperTest.java <nl> ppp CallChainMapperTest.java <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> - import java.util.ArrayList; <nl> 
new file <nl> ppp TraceAnnotationTest.java <nl> + package org.skywalking.apm.toolkit.activation.trace; <nl> + import java.lang.reflect.Method; <nl> + import java.util.List; <nl> + import org.junit.Before; <nl> + import org.junit.Rule; <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> 
mmm TraceContextActivation.java <nl> ppp TraceContextActivation.java <nl> + public static final String INTERCEPT_CLASS = "org.apache.skywalking.apm.toolkit.activation.trace.TraceContextInterceptor"; <nl> + public static final String ENHANCE_CLASS = "org.apache.skywalking.apm.toolkit.trace.TraceContext"; <nl> 
deleted file <nl> mmm TransportClientHandlerInterceptor.java <nl> - package org.apache.skywalking.apm.plugin.servicecomb.v1; <nl> - import java.lang.reflect.Method; <nl> - import java.net.URI; <nl> - import org.apache.servicecomb.core.Invocation; <nl> - import org.apache.skywalking.apm.agent.core.context.CarrierItem; <nl> 
mmm ServiceReferenceMetricEsPersistenceDAO.java <nl> ppp ServiceReferenceMetricEsPersistenceDAO.java <nl> - serviceReferenceMetric.setEntryServiceId(((Number)source.get(ServiceReferenceMetricTable.COLUMN_ENTRY_SERVICE_ID)).intValue()); <nl> - source.put(ServiceReferenceMetricTable.COLUMN_ENTRY_SERVICE_ID, data.getEntryServiceId()); <nl> 
mmm InstanceMetric.java <nl> ppp InstanceMetric.java <nl> - new Column(InstanceMetricTable.COLUMN_CALLS, new AddOperation()), <nl> - new Column(InstanceMetricTable.COLUMN_ERROR_CALLS, new AddOperation()), <nl> - new Column(InstanceMetricTable.COLUMN_DURATION_SUM, new AddOperation()), <nl> - new Column(InstanceMetricTable.COLUMN_ERROR_DURATION_SUM, new AddOperation()), <nl> 
mmm ServiceMetricEsPersistenceDAO.java <nl> ppp ServiceMetricEsPersistenceDAO.java <nl> - serviceMetric.setCalls(((Number)source.get(ServiceMetricTable.COLUMN_CALLS)).longValue()); <nl> - serviceMetric.setErrorCalls(((Number)source.get(ServiceMetricTable.COLUMN_ERROR_CALLS)).longValue()); <nl> - serviceMetric.setDurationSum(((Number)source.get(ServiceMetricTable.COLUMN_DURATION_SUM)).longValue()); <nl> 
mmm H2StorageDAO.java <nl> ppp H2StorageDAO.java <nl> - import org.apache.skywalking.oap.server.core.storage.IMetricsDAO; <nl> - import org.apache.skywalking.oap.server.core.storage.IRecordDAO; <nl> - import org.apache.skywalking.oap.server.core.storage.IRegisterDAO; <nl> - import org.apache.skywalking.oap.server.core.storage.StorageBuilder; <nl> 
mmm IstioTelemetryGRPCHandlerTest.java <nl> ppp IstioTelemetryGRPCHandlerTest.java <nl> - package org.apache.skywalking.oap.server.core.register.annotation; <nl> + package org.apache.skywalking.oap.server.receiver.istio.telemetry.provider; <nl> - import java.lang.annotation.*; <nl> - import org.apache.skywalking.oap.server.core.source.Scope; <nl> 
mmm TraceSegment.java <nl> ppp TraceSegment.java <nl> - import com.a.eye.skywalking.messages.ISerializable; <nl> - public class TraceSegment implements ISerializable<SegmentMessage> { <nl> + public class TraceSegment { <nl> - public interface ISerializable<T> { <nl> - T serialize(); <nl> - void deserialize(T message); <nl> 
deleted file <nl> mmm MySQLRegisterTableLockDAO.java <nl> - package org.apache.skywalking.oap.server.storage.plugin.jdbc.mysql; <nl> - import java.sql.Connection; <nl> - import java.sql.SQLException; <nl> - import java.util.HashMap; <nl> - import java.util.Map; <nl> - import org.apache.skywalking.oap.server.core.source.Scope; <nl> 
mmm MappingJackson2MessageConverter.java <nl> ppp MappingJackson2MessageConverter.java <nl> - import org.springframework.core.GenericTypeResolver; <nl> + import org.springframework.util.ClassUtils; <nl> - 		if (contentType != null && (contentType.getCharset() != null)) { <nl> + 		if (contentType != null && contentType.getCharset() != null) { <nl> 
mmm IBarDataSet.java <nl> ppp IBarDataSet.java <nl> + import com.github.mikephil.charting.utils.Fill; <nl> + import java.util.List; <nl> + List<Fill> getFills(); <nl> + Fill getFill(int index); <nl> + private Type mType = Type.EMPTY; <nl> + @Nullable <nl> + private Integer mColor = null; <nl> + private Integer mFinalColor = null; <nl> 
deleted file <nl> mmm RealmRadarDataSet.java <nl> - package com.github.mikephil.charting.data.realm.implementation; <nl> - import android.graphics.Color; <nl> - import com.github.mikephil.charting.data.Entry; <nl> - import com.github.mikephil.charting.data.RadarEntry; <nl> - import com.github.mikephil.charting.data.realm.base.RealmLineRadarDataSet; <nl> 
mmm Legend.java <nl> ppp Legend.java <nl> - ABOVE_CHART_LEFT, ABOVE_CHART_RIGHT, ABOVE_CHART_CENTER, <nl> - || mPosition == LegendPosition.BELOW_CHART_CENTER <nl> - || mPosition == LegendPosition.ABOVE_CHART_LEFT <nl> - || mPosition == LegendPosition.ABOVE_CHART_RIGHT <nl> - || mPosition == LegendPosition.ABOVE_CHART_CENTER) { <nl> 
mmm HorizontalBarChart.java <nl> ppp HorizontalBarChart.java <nl> - float barspace = set.getBarSpace(); <nl> - float spaceHalf = barspace / 2f; <nl> + float barWidth = mData.getBarWidth(); <nl> - float top = x - 0.5f + spaceHalf; <nl> - float bottom = x + 0.5f - spaceHalf; <nl> + float top = x - barWidth / 2f; <nl> 
new file <nl> ppp RealmDatabaseActivityHorizontalBar.java <nl> + package com.xxmassdeveloper.mpchartexample.realm; <nl> + import android.graphics.Color; <nl> + import android.os.Bundle; <nl> + import android.view.WindowManager; <nl> + import com.github.mikephil.charting.animation.Easing; <nl> + import com.github.mikephil.charting.charts.HorizontalBarChart; <nl> 
mmm BarLineChartBase.java <nl> ppp BarLineChartBase.java <nl> - import com.github.mikephil.charting.interfaces.datasets.IBarLineScatterCandleBubbleDataSet; <nl> + import com.github.mikephil.charting.highlight.Highlight; <nl> + import com.github.mikephil.charting.interfaces.datasets.IBarLineScatterCandleBubbleDataSet; <nl> 
new file <nl> ppp ElasticMeterRegistryCompatibilityTest.java <nl> + package io.micrometer.elastic; <nl> + import io.micrometer.core.instrument.MeterRegistry; <nl> + import io.micrometer.core.instrument.MockClock; <nl> + import io.micrometer.core.lang.Nullable; <nl> + import io.micrometer.core.tck.MeterRegistryCompatibilityKit; <nl> 
mmm HumioConfig.java <nl> ppp HumioConfig.java <nl> + @Deprecated <nl> - String v = get(prefix() + ".repository"); <nl> - return v == null ? "sandbox" : v; <nl> + return ""; <nl> - import static io.micrometer.core.instrument.util.StringEscapeUtils.escapeJson; <nl> - import java.util.Arrays; <nl> - import java.util.HashMap; <nl> 
mmm PersonController.java <nl> ppp PersonController.java <nl> - @Timed(quantiles = 0.95) <nl> + @Timed(percentiles = true) <nl> mmm SpectatorMeterRegistry.java <nl> ppp SpectatorMeterRegistry.java <nl> - private Collection<com.netflix.spectator.api.Tag> toSpectatorTags(Iterable<io.micrometer.core.instrument.Tag> tags) { <nl> 
mmm NewRelicConfig.java <nl> ppp NewRelicConfig.java <nl> + default boolean meterNameEventTypeEnabled() { <nl> + String v = get(prefix() + ".meterNameEventTypeEnabled"); <nl> + return Boolean.parseBoolean(v); <nl> + } <nl> + default String eventType() { <nl> + String v = get(prefix() + ".eventType"); <nl> + if (v == null) <nl> 
mmm MeterRegistriesProvider.java <nl> ppp MeterRegistriesProvider.java <nl> - import com.netflix.spectator.api.DefaultRegistry; <nl> - import io.micrometer.core.instrument.simple.SimpleMeterRegistry; <nl> - import io.micrometer.core.instrument.spectator.SpectatorMeterRegistry; <nl> - import io.prometheus.client.CollectorRegistry; <nl> 
mmm WebfluxMetricsWebFilter.java <nl> ppp WebfluxMetricsWebFilter.java <nl> - public class MetricsWebFilter implements WebFilter { <nl> + public class WebfluxMetricsWebFilter implements WebFilter { <nl> + private final String metricName; <nl> - public MetricsWebFilter(MeterRegistry registry, WebMetricsTagProvider tagProvider) { <nl> 
deleted file <nl> mmm ElasticMeterRegistry.java <nl> - package io.micrometer.elastic; <nl> - import io.micrometer.core.instrument.*; <nl> - import io.micrometer.core.instrument.config.NamingConvention; <nl> - import io.micrometer.core.instrument.distribution.HistogramSnapshot; <nl> - import io.micrometer.core.instrument.step.StepMeterRegistry; <nl> 
mmm DefaultWebMvcTagsProvider.java <nl> ppp DefaultWebMvcTagsProvider.java <nl> - return Arrays.asList(WebMvcTags.method(request), WebMvcTags.uri(request)); <nl> + return Arrays.asList(WebMvcTags.method(request), WebMvcTags.uri(request, null)); <nl> + package io.micrometer.spring.security; <nl> + import io.micrometer.core.instrument.MeterRegistry; <nl> 
deleted file <nl> mmm HttpRequest.java <nl> - package io.micrometer.core.ipc.http; <nl> - import io.micrometer.core.instrument.util.JsonUtils; <nl> - import io.micrometer.core.instrument.util.StringUtils; <nl> - import io.micrometer.core.lang.Nullable; <nl> - import java.io.ByteArrayOutputStream; <nl> - import java.io.IOException; <nl> 
new file <nl> ppp StringToTimeUnitConverter.java <nl> + package io.micrometer.spring.autoconfigure.export; <nl> + import org.springframework.boot.context.properties.ConfigurationPropertiesBinding; <nl> + import org.springframework.core.annotation.Order; <nl> + import org.springframework.core.convert.converter.Converter; <nl> 
mmm Head302Test.java <nl> ppp Head302Test.java <nl> - import com.ning.http.client.RequestType; <nl> - } <nl> + } <nl> mmm AsyncProvidersBasicTest.java <nl> ppp AsyncProvidersBasicTest.java <nl> - import com.ning.http.client.RequestType; <nl> - Request request = new RequestBuilder(RequestType.GET).setUrl(getTargetUrl()).build(); <nl> 
mmm HttpHandler.java <nl> ppp HttpHandler.java <nl> - exitAfterHandler(channel, future, response, handler, status, httpRequest, responseHeaders); <nl> + return interceptors.intercept(channel, future, handler, response, status, responseHeaders) <nl> + || exitAfterHandler(channel, future, response, handler, status, httpRequest, responseHeaders); <nl> 
mmm AdvancedConfig.java <nl> ppp AdvancedConfig.java <nl> + import static org.asynchttpclient.util.Assertions.*; <nl> - if (responseBodyPartFactory == null) <nl> - throw new NullPointerException("responseBodyPartFactory"); <nl> - if (nettyWebSocketFactory == null) <nl> - throw new NullPointerException("nettyWebSocketFactory"); <nl> 
new file <nl> ppp BasicAuthTest.java <nl> + package com.ning.http.client.async; <nl> + import com.ning.http.client.AsyncHttpClient; <nl> + import com.ning.http.client.Realm; <nl> + import com.ning.http.client.Response; <nl> + import org.apache.log4j.ConsoleAppender; <nl> + import org.apache.log4j.Level; <nl> 
new file <nl> ppp BadAsyncHttpClient.java <nl> + package org.asynchttpclient; <nl> + import java.io.IOException; <nl> + public class BadAsyncHttpClient implements AsyncHttpClient { <nl> + public BadAsyncHttpClient() { <nl> + throw new BadAsyncHttpClientException("Because I am bad!!"); <nl> + } <nl> + public BadAsyncHttpClient(AsyncHttpProvider provider) { <nl> 
deleted file <nl> mmm UnmodifiableHeaders.java <nl> - package com.ning.http.client; <nl> - import java.util.Collection; <nl> - import java.util.Collections; <nl> - import java.util.Iterator; <nl> - import java.util.List; <nl> - import java.util.Map; <nl> - import java.util.Set; <nl> - class UnmodifiableHeaders extends Headers { <nl> 
mmm Url.java <nl> ppp Url.java <nl> - public class Url implements Cloneable, Serializable { <nl> + public class Url implements Serializable { <nl> - result = base.clone(); <nl> + result = new Url(base.scheme, base.host, base.port, base.path, base.params); <nl> - if (Protocol.valueOf(s.toUpperCase()) == null) { <nl> 
deleted file <nl> mmm ContinuationWebSocketFrame.java <nl> - package com.ning.http.client.providers.netty.netty4; <nl> - import org.jboss.netty.buffer.ChannelBuffer; <nl> - import org.jboss.netty.buffer.ChannelBuffers; <nl> - import org.jboss.netty.util.CharsetUtil; <nl> - public class ContinuationWebSocketFrame extends WebSocketFrame { <nl> 
mmm DefaultAsyncHttpClientConfig.java <nl> ppp DefaultAsyncHttpClientConfig.java <nl> + private final boolean aggregateWebSocketFrameFragments; <nl> + boolean aggregateWebSocketFrameFragments, <nl> + this.aggregateWebSocketFrameFragments = aggregateWebSocketFrameFragments; <nl> + @Override <nl> + public boolean isAggregateWebSocketFrameFragments() { <nl> 
mmm BinaryImporter.java <nl> ppp BinaryImporter.java <nl> 
deleted file <nl> mmm PixelReader.java <nl> - package com.jme3.texture.plugins.ktx; <nl> - import java.io.DataInput; <nl> - import java.io.IOException; <nl> - import java.nio.ByteBuffer; <nl> - public interface PixelReader { <nl> - public int readPixels(int pixelWidth, int pixelHeight, byte[] pixelData, ByteBuffer buffer, DataInput in) throws IOException; <nl> 
new file <nl> ppp OpenVRTrackedController.java <nl> + package com.jme3.input.vr; <nl> + import com.jme3.app.VREnvironment; <nl> + import com.jme3.math.Matrix4f; <nl> + import com.jme3.math.Quaternion; <nl> + import com.jme3.math.Vector3f; <nl> + public class OpenVRTrackedController implements VRTrackedController{ <nl> 
mmm LwjglGL.java <nl> ppp LwjglGL.java <nl> - public void glBlendFuncSeparate(int param1, int param2, int param3, int param4) { <nl> - GL14.glBlendFuncSeparate(param1, param2, param3, param4); <nl> - } <nl> mmm JmeIosGLES.java <nl> ppp JmeIosGLES.java <nl> - 	public static native void glBlendFuncSeparate(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha); <nl> 
mmm IntSerializer.java <nl> ppp IntSerializer.java <nl> + @SuppressWarnings("unchecked") <nl> mmm DoubleSerializer.java <nl> ppp DoubleSerializer.java <nl> + @SuppressWarnings("unchecked") <nl> mmm BooleanSerializer.java <nl> ppp BooleanSerializer.java <nl> + @SuppressWarnings("unchecked") <nl> mmm MapSerializer.java <nl> 
mmm RotateTool.java <nl> ppp RotateTool.java <nl> - private Vector2f lastScreenCoord; <nl> - lastScreenCoord = null; <nl> - actionPerformed(new ScaleUndo(toolController.getSelectedSpatial(), startRotate, lastRotate)); <nl> + actionPerformed(new RotateUndo(toolController.getSelectedSpatial(), startRotate, lastRotate)); <nl> 
deleted file <nl> mmm JmeCrossHatchFilter.java <nl> - package com.jme3.gde.core.filters.impl; <nl> - import com.jme3.gde.core.filters.AbstractFilterNode; <nl> - import com.jme3.gde.core.filters.FilterNode; <nl> - import com.jme3.post.filters.CrossHatchFilter; <nl> - import org.openide.loaders.DataObject; <nl> 
new file <nl> ppp FbxImage.java <nl> + package com.jme3.scene.plugins.fbx.objects; <nl> + import java.io.File; <nl> + import com.jme3.asset.AssetManager; <nl> + import com.jme3.texture.Image; <nl> + import com.jme3.texture.Texture; <nl> + import com.jme3.texture.image.ColorSpace; <nl> + import com.jme3.util.BufferUtils; <nl> 
deleted file <nl> mmm ListDeploymentGroups.java <nl> - package com.example.deploy; <nl> - import software.amazon.awssdk.regions.Region; <nl> - import software.amazon.awssdk.services.codedeploy.CodeDeployClient; <nl> - import software.amazon.awssdk.services.codedeploy.model.CodeDeployException; <nl> - import software.amazon.awssdk.services.codedeploy.model.ListDeploymentGroupsRequest; <nl> 
mmm CreateSecurityGroup.java <nl> ppp CreateSecurityGroup.java <nl> + import software.amazon.awssdk.regions.Region; <nl> - import software.amazon.awssdk.services.ec2.model.CreateSecurityGroupResponse; <nl> + import software.amazon.awssdk.services.ec2.model.CreateSecurityGroupResponse; <nl> - Ec2Client ec2 = Ec2Client.create(); <nl> 
mmm StockTrade.java <nl> ppp StockTrade.java <nl> - package com.example.kinesis; <nl> - import java.io.IOException; <nl> - import com.fasterxml.jackson.databind.DeserializationFeature; <nl> - import com.fasterxml.jackson.databind.ObjectMapper; <nl> - public class StockTrade { <nl> - private final static ObjectMapper JSON = new ObjectMapper(); <nl> 
mmm CopyObject.java <nl> ppp CopyObject.java <nl> - System.err.println(e.getErrorMessage()); <nl> + System.err.println(e.errorMessage()); <nl> mmm DeleteWebsiteConfiguration.java <nl> ppp DeleteWebsiteConfiguration.java <nl> - System.err.println(e.getErrorMessage()); <nl> + System.err.println(e.errorMessage()); <nl> 
mmm UpdateTable.java <nl> ppp UpdateTable.java <nl> - import software.amazon.awssdk.services.s3.model.S3Exception; <nl> + import software.amazon.awssdk.services.dynamodb.model.DynamoDBException; <nl> - import software.amazon.awssdk.services.s3.model.S3Exception; <nl> + import software.amazon.awssdk.services.dynamodb.model.DynamoDBException; <nl> 
mmm ListNamedQueryExample.java <nl> ppp ListNamedQueryExample.java <nl> + import software.amazon.awssdk.regions.Region; <nl> + import software.amazon.awssdk.services.athena.model.AthenaException; <nl> - AthenaClientFactory factory = new AthenaClientFactory(); <nl> - AthenaClient athenaClient = factory.createClient(); <nl> 
deleted file <nl> mmm ListRules.java <nl> - package com.example.eventbridge; <nl> - import software.amazon.awssdk.regions.Region; <nl> - import software.amazon.awssdk.services.eventbridge.EventBridgeClient; <nl> - import software.amazon.awssdk.services.eventbridge.model.ListRulesRequest; <nl> - import software.amazon.awssdk.services.eventbridge.model.ListRulesResponse; <nl> 
deleted file <nl> mmm CreateContainer.java <nl> - package aws.example.mediastore; <nl> - import com.amazonaws.services.mediastore.AWSMediaStore; <nl> - import com.amazonaws.services.mediastore.AWSMediaStoreClientBuilder; <nl> - import com.amazonaws.services.mediastore.model.Container; <nl> - import com.amazonaws.services.mediastore.model.CreateContainerRequest; <nl> 
mmm ActivityWorker.java <nl> ppp ActivityWorker.java <nl> mmm WorkflowStarter.java <nl> ppp WorkflowStarter.java <nl> mmm ActivityWorkerWithGracefulShutdown.java <nl> ppp ActivityWorkerWithGracefulShutdown.java <nl> mmm SendReceiveMessages.java <nl> ppp SendReceiveMessages.java <nl> mmm LongPolling.java <nl> 
new file <nl> ppp ListJobs.java <nl> + package aws.example.s3control; <nl> + import com.amazonaws.AmazonServiceException; <nl> + import com.amazonaws.SdkClientException; <nl> + import com.amazonaws.auth.profile.ProfileCredentialsProvider; <nl> + import com.amazonaws.services.s3control.AWSS3Control; <nl> + import com.amazonaws.services.s3control.AWSS3ControlClient; <nl> 
mmm CopyObject.java <nl> ppp CopyObject.java <nl> + getPresignedUrl(presigner, bucketName,keyName); <nl> + } <nl> + public static void getPresignedUrl( S3Presigner presigner, String bucketName,String keyName ) { <nl> - IoUtils.copy(signedPayload, httpOutputStream); <nl> + IoUtils.copy(signedPayload, httpOutputStream); <nl> 
mmm DescribeRegionsAndZones.java <nl> ppp DescribeRegionsAndZones.java <nl> mmm CreateInstance.java <nl> ppp CreateInstance.java <nl> mmm DeleteSecurityGroup.java <nl> ppp DeleteSecurityGroup.java <nl> mmm AllocateAddress.java <nl> ppp AllocateAddress.java <nl> mmm DeleteKeyPair.java <nl> ppp DeleteKeyPair.java <nl> 
mmm DeleteItem.java <nl> ppp DeleteItem.java <nl> - DynamoDbClient ddb = DynamoDbClient.builder() <nl> - .region(region) <nl> - .build(); <nl> - deleteDymamoDBItem(ddb, tableName, key, keyVal); <nl> - } <nl> - public static void deleteDymamoDBItem(DynamoDbClient ddb, String tableName, String key, String keyVal) { <nl> 
mmm hbase-snapshot-import.java <nl> ppp hbase-snapshot-import.java <nl> mmm custom-emrfs-materials.java <nl> ppp custom-emrfs-materials.java <nl> mmm hbase-snapshot-restore.java <nl> ppp hbase-snapshot-restore.java <nl> mmm runjobflow-configurationclassification.java <nl> ppp runjobflow-configurationclassification.java <nl> 
mmm SubscribeHTTPS.java <nl> ppp SubscribeHTTPS.java <nl> - package com.example.sns; <nl> - import software.amazon.awssdk.regions.Region; <nl> - import software.amazon.awssdk.services.sns.SnsClient; <nl> - import software.amazon.awssdk.services.sns.model.SnsException; <nl> - import software.amazon.awssdk.services.sns.model.SubscribeRequest; <nl> 
new file <nl> ppp HlsJobCreationSample.java <nl> + package com.amazonaws.services.elastictranscoder.samples; <nl> + import java.util.Arrays; <nl> + import java.util.List; <nl> + import com.amazonaws.services.elastictranscoder.AmazonElasticTranscoder; <nl> + import com.amazonaws.services.elastictranscoder.AmazonElasticTranscoderClient; <nl> 
deleted file <nl> mmm CreateHostedZone.java <nl> - package com.example.route; <nl> - import software.amazon.awssdk.regions.Region; <nl> - import software.amazon.awssdk.services.route53.Route53Client; <nl> - import software.amazon.awssdk.services.route53.model.Route53Exception; <nl> - import software.amazon.awssdk.services.route53.model.CreateHostedZoneRequest; <nl> 
new file <nl> ppp DetectKeyPhrases.java <nl> + package com.example.comprehend; <nl> + import software.amazon.awssdk.regions.Region; <nl> + import software.amazon.awssdk.services.comprehend.ComprehendClient; <nl> + import software.amazon.awssdk.services.comprehend.model.DetectKeyPhrasesRequest; <nl> + import software.amazon.awssdk.services.comprehend.model.DetectKeyPhrasesResponse; <nl> 
new file <nl> ppp CreateDeliveryStream.java <nl> + package com.example.firehose; <nl> + import software.amazon.awssdk.regions.Region; <nl> + import software.amazon.awssdk.services.firehose.FirehoseClient; <nl> + import software.amazon.awssdk.services.firehose.model.FirehoseException; <nl> + import software.amazon.awssdk.services.firehose.model.CreateDeliveryStreamRequest; <nl> 
new file <nl> ppp ListMetrics.java <nl> + package com.example.cloudwatch; <nl> + import software.amazon.awssdk.services.cloudwatch.CloudWatchClient; <nl> + import software.amazon.awssdk.services.cloudwatch.model.ListMetricsRequest; <nl> + import software.amazon.awssdk.services.cloudwatch.model.ListMetricsResponse; <nl> 
deleted file <nl> mmm ListCampaigns.java <nl> - package com.example.personalize; <nl> - import software.amazon.awssdk.regions.Region; <nl> - import software.amazon.awssdk.services.personalize.PersonalizeClient; <nl> - import software.amazon.awssdk.services.personalize.model.CampaignSummary; <nl> - import software.amazon.awssdk.services.personalize.model.ListCampaignsRequest; <nl> 
deleted file <nl> mmm DeployApplication.java <nl> - package com.example.deploy; <nl> - import software.amazon.awssdk.regions.Region; <nl> - import software.amazon.awssdk.services.codedeploy.CodeDeployClient; <nl> - import software.amazon.awssdk.services.codedeploy.model.S3Location; <nl> - import software.amazon.awssdk.services.codedeploy.model.RevisionLocation; <nl> 
new file <nl> ppp DescribeSolution.java <nl> + package com.example.personalize; <nl> + import software.amazon.awssdk.regions.Region; <nl> + import software.amazon.awssdk.services.personalize.PersonalizeClient; <nl> + import software.amazon.awssdk.services.personalize.model.DescribeSolutionRequest; <nl> + import software.amazon.awssdk.services.personalize.model.DescribeSolutionResponse; <nl> 
mmm ChainProcessingContext.java <nl> ppp ChainProcessingContext.java <nl> + import org.thingsboard.server.extensions.api.device.DeviceMetaData; <nl> + public DeviceMetaData getDeviceMetaData() { <nl> + return md.deviceMetaData; <nl> + } <nl> + public String getDeviceName() { <nl> + return md.deviceMetaData.getDeviceName(); <nl> 
mmm CassandraEntitiesToSqlMigrateService.java <nl> ppp CassandraEntitiesToSqlMigrateService.java <nl> - import org.thingsboard.server.common.data.UUIDConverter; <nl> - import org.thingsboard.server.dao.util.NoSqlAnyDao; <nl> - import static org.thingsboard.server.service.install.migrate.CassandraToSqlColumn.jsonColumn; <nl> 
deleted file <nl> mmm TbCheckMessageNodeConfiguration.java <nl> - package org.thingsboard.rule.engine.filter; <nl> - import lombok.Data; <nl> - import org.thingsboard.rule.engine.api.NodeConfiguration; <nl> - import java.util.Collections; <nl> - import java.util.List; <nl> - @Data <nl> - public class TbCheckMessageNodeConfiguration implements NodeConfiguration { <nl> 
mmm AbstractControllerTest.java <nl> ppp AbstractControllerTest.java <nl> + private static final long DEFAULT_TIMEOUT = -1L; <nl> - return readResponse(doPost(urlTemplate, params).andExpect(resultMatcher), responseClass); <nl> + return readResponse(doPost(urlTemplate, content, params).andExpect(resultMatcher), responseClass); <nl> 
mmm EventEntity.java <nl> ppp EventEntity.java <nl> + import java.util.UUID; <nl> + import static org.thingsboard.server.dao.model.ModelConstants.EPOCH_DIFF; <nl> + import static org.thingsboard.server.dao.model.ModelConstants.TS_COLUMN; <nl> + @Column(name = TS_COLUMN) <nl> + private long ts; <nl> + this.ts = getTs(event.getId().getId()); <nl> 
deleted file <nl> mmm HostRequestLimitPolicy.java <nl> - package org.thingsboard.server.common.transport.quota; <nl> - import org.springframework.beans.factory.annotation.Value; <nl> - import org.springframework.stereotype.Component; <nl> - @Component <nl> - public class HostRequestLimitPolicy { <nl> - private final long limit; <nl> 
mmm DeviceApiSqlTest.java <nl> ppp DeviceApiSqlTest.java <nl> - public class DeviceApiSqlTest extends BaseHttpDeviceApiTest { <nl> + public class DeviceApiSqlTest extends BaseHttpDeviceApiTest{ <nl> mmm JpaDaoTestSuite.java <nl> ppp JpaDaoTestSuite.java <nl> - "org.thingsboard.server.dao.sql.*AASDTest" <nl> 
mmm ActorSystemContext.java <nl> ppp ActorSystemContext.java <nl> - getScheduler().schedule(() -> ctx.tell(msg), delayInMs, TimeUnit.MILLISECONDS); <nl> + if (delayInMs > 0) { <nl> + getScheduler().schedule(() -> ctx.tell(msg), delayInMs, TimeUnit.MILLISECONDS); <nl> + } else { <nl> + ctx.tell(msg); <nl> + } <nl> 
mmm BasicJsFilter.java <nl> ppp BasicJsFilter.java <nl> - protected static Object getValue(KvEntry attr) { <nl> - switch (attr.getDataType()) { <nl> - case STRING: <nl> - return attr.getStrValue().get(); <nl> - case LONG: <nl> - return attr.getLongValue().get(); <nl> - case DOUBLE: <nl> - return attr.getDoubleValue().get(); <nl> 
mmm TenantActor.java <nl> ppp TenantActor.java <nl> - deviceActors.values().forEach(actorRef -> actorRef.tell(msg, ActorRef.noSender())); <nl> mmm RpcManagerActor.java <nl> ppp RpcManagerActor.java <nl> - log.debug("{} Forwarding msg to session actor", address); <nl> + log.debug("{} Forwarding msg to session actor: {}", address, msg); <nl> 
mmm CassandraDashboardInfoDao.java <nl> ppp CassandraDashboardInfoDao.java <nl> - import com.google.common.util.concurrent.AsyncFunction; <nl> - import com.google.common.util.concurrent.Futures; <nl> - import com.google.common.util.concurrent.ListenableFuture; <nl> - import org.springframework.beans.factory.annotation.Autowired; <nl> 
mmm TBKafkaConsumerTemplate.java <nl> ppp TBKafkaConsumerTemplate.java <nl> + import org.thingsboard.server.common.msg.queue.TopicPartitionInfo; <nl> - import org.thingsboard.server.common.msg.queue.TopicPartitionInfo; <nl> - topicNames.forEach(this::createTopicIfNotExists); <nl> + topicNames.forEach(admin::createTopicIfNotExists); <nl> 
new file <nl> ppp TbMsgCountNodeConfiguration.java <nl> + package org.thingsboard.rule.engine.action; <nl> + import lombok.Data; <nl> + import org.thingsboard.rule.engine.api.NodeConfiguration; <nl> + @Data <nl> + public class TbMsgCountNodeConfiguration implements NodeConfiguration<TbMsgCountNodeConfiguration> { <nl> 
mmm TimescaleTimeseriesCleanUpService.java <nl> ppp TimescaleTimeseriesCleanUpService.java <nl> - package org.thingsboard.server.service.ttl.timeseries; <nl> + package org.thingsboard.server.service.ttl; <nl> mmm PsqlTimeseriesCleanUpService.java <nl> ppp PsqlTimeseriesCleanUpService.java <nl> - package org.thingsboard.server.service.ttl.timeseries; <nl> 
mmm JsonMqttAdaptor.java <nl> ppp JsonMqttAdaptor.java <nl> - import org.thingsboard.server.transport.mqtt.MqttTopics; <nl> + import org.thingsboard.server.common.data.device.profile.MqttTopics; <nl> mmm MqttSslHandlerProvider.java <nl> ppp MqttSslHandlerProvider.java <nl> + import org.thingsboard.server.common.transport.auth.ValidateDeviceCredentialsResponse; <nl> 
mmm DefaultSubscriptionManagerService.java <nl> ppp DefaultSubscriptionManagerService.java <nl> + import org.thingsboard.server.common.data.kv.StringDataEntry; <nl> + @Override <nl> + public void onAttributesDelete(TenantId tenantId, EntityId entityId, String scope, List<String> keys, TbCallback callback) { <nl> 
new file <nl> ppp ValidationCallback.java <nl> + package org.thingsboard.server.controller; <nl> + import com.google.common.util.concurrent.FutureCallback; <nl> + import org.springframework.http.ResponseEntity; <nl> + import org.springframework.web.context.request.async.DeferredResult; <nl> + import org.thingsboard.server.actors.plugin.ValidationResult; <nl> 
mmm TenantServiceImpl.java <nl> ppp TenantServiceImpl.java <nl> + oAuth2Service.deleteClientRegistrationsByTenantId(tenantId); <nl> mmm CustomOAuth2ClientMapper.java <nl> ppp CustomOAuth2ClientMapper.java <nl> + import org.thingsboard.server.common.data.id.TenantId; <nl> - public SecurityUser getOrCreateUserByClientPrincipal(OAuth2AuthenticationToken token, String providerAccessToken, OAuth2MapperConfig config) { <nl> 

deleted file <nl> mmm MethodImplCache.java <nl> - package clojure.lang; <nl> - public final class MethodImplCache{ <nl> - public final IPersistentMap protocol; <nl> - public final Keyword methodk; <nl> - public final int shift; <nl> - public final int mask; <nl> - public MethodImplCache(IPersistentMap protocol, Keyword methodk){ <nl> 
mmm NodeContext.java <nl> ppp NodeContext.java <nl> + import javax.lang.model.element.Modifier; <nl> + public Modifier[] publicFinalModifiers() { <nl> + return isFinal <nl> + ? new Modifier[] { Modifier.PUBLIC } <nl> + : new Modifier[] { Modifier.PUBLIC, Modifier.FINAL }; <nl> + } <nl> mmm AddDeques.java <nl> 
mmm PackageSanityTests.java <nl> ppp PackageSanityTests.java <nl> + clazz == CaffeineSpec.class || <nl> mmm CacheGenerator.java <nl> ppp CacheGenerator.java <nl> - import com.github.benmanes.caffeine.cache.testing.CacheSpec.MaximumSize; <nl> + import com.github.benmanes.caffeine.cache.testing.CacheSpec.Maximum; <nl> 
mmm IsValidUnboundedLocalCache.java <nl> ppp IsValidUnboundedLocalCache.java <nl> - import org.hamcrest.Factory; <nl> - @Factory <nl> mmm IsFutureValue.java <nl> ppp IsFutureValue.java <nl> - import org.hamcrest.Factory; <nl> - @Factory <nl> - @Factory <nl> mmm IsValidAsyncCache.java <nl> ppp IsValidAsyncCache.java <nl> 
deleted file <nl> mmm SingleConsumerQueueBenchmark.java <nl> - package mpsc; <nl> - import java.util.Queue; <nl> - import org.openjdk.jmh.annotations.Scope; <nl> - import org.openjdk.jmh.annotations.Setup; <nl> - import org.openjdk.jmh.annotations.State; <nl> - import com.github.benmanes.caffeine.SingleConsumerQueue; <nl> 
mmm TencentPhotoTraceReader.java <nl> ppp TencentPhotoTraceReader.java <nl> - import java.io.IOException; <nl> - public Stream<AccessEvent> events() throws IOException { <nl> + public Stream<AccessEvent> events() { <nl> mmm AbstractTraceReader.java <nl> ppp AbstractTraceReader.java <nl> + import java.io.UncheckedIOException; <nl> 
mmm BaseNoGui.java <nl> ppp BaseNoGui.java <nl> - getPlatform().init(); <nl> + getPlatform().init(); <nl> new file <nl> ppp RegQueryParser.java <nl> + package processing.app.windows; <nl> + import com.google.common.base.Predicate; <nl> + import com.google.common.collect.Iterables; <nl> + import java.util.Arrays; <nl> 
mmm ContributionsIndexer.java <nl> ppp ContributionsIndexer.java <nl> - private ContributionsIndex index; <nl> + private final ContributionsIndex index; <nl> + index = new EmptyContributionIndex(); <nl> - index = parseIndex(bundledIndexFile); <nl> + mergeContributions(bundledIndexFile); <nl> - mergeContributions(parseIndex(defaultIndexFile), defaultIndexFile); <nl> 
mmm Compiler.java <nl> ppp Compiler.java <nl> - File coresFolder = new File(t.getFolder(), "cores"); <nl> - File coreFolder = new File(coresFolder, core.substring(core.indexOf(':') + 1)); <nl> + File coreFolder = new File(t.getFolder(), "cores"); <nl> + coreFolder = new File(coreFolder, core.substring(core.indexOf(':') + 1)); <nl> 
deleted file <nl> mmm PreferencesMap.java <nl> - package processing.app.helpers; <nl> - import java.io.File; <nl> - import java.io.FileInputStream; <nl> - import java.io.FileNotFoundException; <nl> - import java.io.IOException; <nl> - import java.io.InputStream; <nl> - import java.util.HashMap; <nl> - import java.util.HashSet; <nl> 
mmm Archiver.java <nl> ppp Archiver.java <nl> - dateFormat = new SimpleDateFormat(_("yyMMdd")); <nl> + dateFormat = new SimpleDateFormat("yyMMdd"); <nl> mmm Base.java <nl> ppp Base.java <nl> - import java.util.List; <nl> - import processing.app.debug.TargetPackage; <nl> - import processing.app.debug.TargetPlatform; <nl> 
mmm DropdownInstalledLibraryItem.java <nl> ppp DropdownInstalledLibraryItem.java <nl> - import cc.arduino.contributions.libraries.LibrariesIndex; <nl> - private final LibrariesIndex index; <nl> - public DropdownInstalledLibraryItem(LibrariesIndex index) { <nl> - this.index = index; <nl> - } <nl> - return new InstalledLibraryPredicate(index); <nl> 
mmm Base.java <nl> ppp Base.java <nl> - if (path.toLowerCase().endsWith(".pde")) continue; <nl> - String platformname = getBoardPreferences().get("platform"); <nl> - Map<String, String> platformPrefs = getPlatformPreferences(platformname); <nl> - String targetname = platformPrefs.get("name"); <nl> - String libraryPath = platformPrefs.get("library.core.path"); <nl> 
mmm Uploader.java <nl> ppp Uploader.java <nl> - String avrBasePath; <nl> - if(Base.isLinux()) { <nl> - avrBasePath = new String(Base.getHardwarePath() + "/tools/"); <nl> - } <nl> - else { <nl> - avrBasePath = new String(Base.getHardwarePath() + "/tools/avr/bin/"); <nl> - } <nl> - commandArray[0] = avrBasePath + commandArray[0]; <nl> 
mmm BaseNoGui.java <nl> ppp BaseNoGui.java <nl> - if (!data.getFolder().exists()) { <nl> - showError(_("No sketch"), _("Can't find the sketch in the specified path"), null); <nl> - } <nl> + if (!data.getFolder().exists()) showError(_("No sketch"), _("Can't find the sketch in the specified path"), null); <nl> 
mmm EditorTab.java <nl> ppp EditorTab.java <nl> + textArea.setAutoIndentEnabled(PreferencesData.getBoolean("editor.indent")); <nl> + textArea.setCloseCurlyBraces(PreferencesData.getBoolean("editor.auto_close_braces", true)); <nl> - } <nl> + } <nl> mmm CommandLineTest.java <nl> ppp CommandLineTest.java <nl> - arduinoPath = new File(buildPath, "build/windows/work/arduino"); <nl> 
mmm Preferences.java <nl> ppp Preferences.java <nl> - import processing.app.helpers.PreferencesMap; <nl> - table.put("runtime.os", PConstants.platformNames[PApplet.platform]); <nl> - File hardwareFolder = Base.getHardwareFolder(); <nl> - table.put("runtime.hardware.path", hardwareFolder.getAbsolutePath()); <nl> 
mmm Base.java <nl> ppp Base.java <nl> + import cc.arduino.DefaultUncaughtExceptionHandler; <nl> - installer.updateIndex(); <nl> + List<String> downloadedPackageIndexFiles = installer.updateIndex(); <nl> + installer.deleteUnknownFiles(downloadedPackageIndexFiles); <nl> - ContributedPlatform installed = indexer.getIndex().getInstalled(boardToInstallParts[0], boardToInstallParts[1]); <nl> 
mmm OnePlusNLayoutHelperEx.java <nl> ppp OnePlusNLayoutHelperEx.java <nl> - helper.measureChild(child1, <nl> + helper.measureChildWithMargins(child1, <nl> + 0.5f); <nl> - helper.measureChild(child2, <nl> + helper.measureChildWithMargins(child2, <nl> - helper.measureChild(child3, <nl> + helper.measureChildWithMargins(child3, <nl> 
new file <nl> ppp UriTemplateParser.java <nl> + package org.atmosphere.util.uri; <nl> + import java.util.ArrayList; <nl> + import java.util.HashMap; <nl> + import java.util.HashSet; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import java.util.NoSuchElementException; <nl> + import java.util.Set; <nl> 
mmm AtmosphereResourceImpl.java <nl> ppp AtmosphereResourceImpl.java <nl> - import org.atmosphere.container.Servlet30CometSupport; <nl> - Servlet30CometSupport.endAsyncContext(req); <nl> + asyncSupport.complete(this); <nl> mmm JBossWebCometSupport.java <nl> ppp JBossWebCometSupport.java <nl> + import org.atmosphere.cpr.AsyncSupport; <nl> 
new file <nl> ppp UriComponent.java <nl> + package org.atmosphere.util.uri; <nl> + import java.io.UnsupportedEncodingException; <nl> + import java.net.URI; <nl> + import java.net.URLDecoder; <nl> + import java.nio.ByteBuffer; <nl> + import java.nio.CharBuffer; <nl> + import java.nio.charset.Charset; <nl> + import java.util.ArrayList; <nl> 
mmm AtmosphereFramework.java <nl> ppp AtmosphereFramework.java <nl> + import static org.atmosphere.cpr.ApplicationConfig.BROADCASTER_SHAREABLE_LISTENERS; <nl> - protected final List<BroadcasterListener> broadcasterListeners = new ArrayList<BroadcasterListener>(); <nl> + protected final List<BroadcasterListener> broadcasterListeners = Collections.synchronizedList(new ArrayList<BroadcasterListener>()); <nl> 
mmm WebSocket.java <nl> ppp WebSocket.java <nl> - AtmosphereResource<?,?> atmosphereResource(); <nl> + AtmosphereResource<?,?> resource(); <nl> new file <nl> ppp UriTemplate.java <nl> + package org.atmosphere.util.uri; <nl> + import java.util.Collections; <nl> + import java.util.Comparator; <nl> + import java.util.HashMap; <nl> 
mmm AtmosphereResourceConfigurator.java <nl> ppp AtmosphereResourceConfigurator.java <nl> - AtmosphereProviders.TrackableResourceProvider.class, <nl> mmm ApplicationConfig.java <nl> ppp ApplicationConfig.java <nl> - String SUPPORT_TRACKABLE = ApplicationConfig.class.getPackage().getName() + ".Trackable"; <nl> 
new file <nl> ppp UriTemplate.java <nl> + package org.atmosphere.util.uri; <nl> + import java.util.Collections; <nl> + import java.util.Comparator; <nl> + import java.util.HashMap; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import java.util.regex.Matcher; <nl> + import java.util.regex.Pattern; <nl> 
mmm BroadcasterConfig.java <nl> ppp BroadcasterConfig.java <nl> + if (executorService.isShutdown()) { <nl> + return; <nl> + } <nl> mmm TypedChannel.java <nl> ppp TypedChannel.java <nl> mmm FrameworkConfig.java <nl> ppp FrameworkConfig.java <nl> + String ATMOSPHERE_HANDLER_MAPPING = AtmosphereHandler.class.getName() + ".contextRoot"; <nl> 
mmm TomcatCometSupportTest.java <nl> ppp TomcatCometSupportTest.java <nl> + try { <nl> + } catch (Throwable t) { <nl> + t.printStackTrace(); <nl> + } <nl> mmm DefaultAsyncSupportResolver.java <nl> ppp DefaultAsyncSupportResolver.java <nl> + import org.atmosphere.container.Tomcat7AsyncSupportWithWebSocket; <nl> 
mmm DefaultBroadcasterFactory.java <nl> ppp DefaultBroadcasterFactory.java <nl> + import org.atmosphere.di.InjectorProvider; <nl> + InjectorProvider.getInjector().inject(b); <nl> + InjectorProvider.getInjector().inject(b); <nl> new file <nl> ppp GuiceInjector.java <nl> + package org.atmosphere.plugin.guice; <nl> 
mmm ApplicationConfig.java <nl> ppp ApplicationConfig.java <nl> new file <nl> ppp AtmosphereResourceSessionFactory.java <nl> + package org.atmosphere.cpr; <nl> + public abstract class AtmosphereResourceSessionFactory { <nl> + 	private static final AtmosphereResourceSessionFactory DEFAULT = new DefaultAtmosphereResourceSessionFactory(); <nl> 
mmm GwtResponseWriterImpl.java <nl> ppp GwtResponseWriterImpl.java <nl> - import com.google.gwt.rpc.server.ClientOracle; <nl> - import com.google.gwt.rpc.server.RPC; <nl> - import com.google.gwt.user.client.rpc.SerializationException; <nl> - import com.google.gwt.user.server.rpc.SerializationPolicy; <nl> - import com.google.gwt.user.server.rpc.impl.ServerSerializationStreamWriter; <nl> 
mmm HeronConfigReader.java <nl> ppp HeronConfigReader.java <nl> deleted file <nl> mmm NullLauncher.java <nl> - package com.twitter.heron.spi.scheduler; <nl> - import com.twitter.heron.proto.system.ExecutionEnvironment; <nl> - import com.twitter.heron.spi.common.PackingPlan; <nl> - import com.twitter.heron.spi.scheduler.context.LaunchContext; <nl> 
mmm LaunchRunnerTest.java <nl> ppp LaunchRunnerTest.java <nl> - package com.twitter.heron.scheduler; <nl> + package com.twitter.heron.scheduler.service; <nl> mmm SchedulerMainTest.java <nl> ppp SchedulerMainTest.java <nl> - package com.twitter.heron.scheduler; <nl> + package com.twitter.heron.scheduler.service; <nl> 
new file <nl> ppp SkewDetector.java <nl> + package com.twitter.heron.healthmgr.detectors; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import java.util.logging.Logger; <nl> + import javax.inject.Inject; <nl> + import com.microsoft.dhalion.detector.Symptom; <nl> 
mmm Keys.java <nl> ppp Keys.java <nl> - public static final String LOGGING_DIR = "heron.logging.directory"; <nl> + public static final String LOGGING_DIRECTORY = "heron.logging.directory"; <nl> + public static final String INTERNALS_CONFIG_FILE = "heron.internals.config.file"; <nl> + public static final String TOPOLOGY_DEFINITION_FILE = "heron.topology.definition.file"; <nl> 
deleted file <nl> mmm SchedulerStateManagerAdaptor.java <nl> - package com.twitter.heron.spi.scheduler; <nl> - import com.google.common.util.concurrent.ListenableFuture; <nl> - import com.twitter.heron.api.generated.TopologyAPI; <nl> - import com.twitter.heron.proto.scheduler.Scheduler; <nl> - import com.twitter.heron.proto.system.ExecutionEnvironment; <nl> 
mmm TMasterUtils.java <nl> ppp TMasterUtils.java <nl> + import java.net.MalformedURLException; <nl> + import com.google.common.annotations.VisibleForTesting; <nl> + @VisibleForTesting <nl> - SchedulerStateManagerAdaptor stateManager) { <nl> + SchedulerStateManagerAdaptor stateManager, <nl> + NetworkUtils.TunnelConfig tunnelConfig) { <nl> 
mmm AssertPacking.java <nl> ppp AssertPacking.java <nl> + import java.util.HashSet; <nl> - import org.junit.Assert; <nl> + import com.twitter.heron.common.basics.Pair; <nl> + import com.twitter.heron.spi.packing.InstanceId; <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.junit.Assert.assertNotEquals; <nl> 
mmm SlaveLooper.java <nl> ppp SlaveLooper.java <nl> - public RunnableLock() { <nl> + RunnableLock() { <nl> mmm HeronTopology.java <nl> ppp HeronTopology.java <nl> - public HeronTopology setName(String name) { <nl> - this.name = name; <nl> + public HeronTopology setName(String topologyName) { <nl> + this.name = topologyName; <nl> 
mmm TimeTriggerPolicy.java <nl> ppp TimeTriggerPolicy.java <nl> - import java.util.Map; <nl> - import com.twitter.heron.api.windowing.EvictionPolicy; <nl> - import com.twitter.heron.api.windowing.TriggerPolicy; <nl> - public class TimeTriggerPolicy<T extends Serializable> implements TriggerPolicy<T, Void> { <nl> 
mmm Streamlet.java <nl> ppp Streamlet.java <nl> - <T> Streamlet<T> map(SerializableFunction<? super R, ? extends T> mapFn); <nl> + <T> Streamlet<T> map(SerializableFunction<R, ? extends T> mapFn); <nl> - <K, V> KVStreamlet<K, V> mapToKV(SerializableFunction<? super R, ? extends KeyValue<K, V>> mapFn); <nl> 
mmm AbstractGmsServiceBroker.java <nl> ppp AbstractGmsServiceBroker.java <nl> - throw new IllegalArgumentException("Cast service not supported"); <nl> + callGetService(GmsService.CAST, callback, versionCode, packageName, params); <nl> new file <nl> ppp MediaRouterCallbackImpl.java <nl> + package com.google.android.gms.cast.framework.internal; <nl> 
deleted file <nl> mmm DiscoveryManagerImpl.java <nl> - package com.google.android.gms.cast.framework.internal; <nl> - import android.os.RemoteException; <nl> - import android.util.Log; <nl> - import com.google.android.gms.cast.framework.IDiscoveryManager; <nl> - import com.google.android.gms.cast.framework.IDiscoveryManagerListener; <nl> 
mmm ConsoleReporter.java <nl> ppp ConsoleReporter.java <nl> + * @param filter          the metric filter to match <nl> - TimeUnit durationUnit) { <nl> - super(registry, "console-reporter"); <nl> + TimeUnit durationUnit, <nl> + MetricFilter filter) { <nl> + super(registry, "console-reporter", filter); <nl> mmm AbstractPollingReporter.java <nl> 
mmm MetricRegistry.java <nl> ppp MetricRegistry.java <nl> - private final String name; <nl> - public MetricRegistry(String name) { <nl> - if (name == null || name.isEmpty()) { <nl> - throw new IllegalArgumentException("A registry needs a name"); <nl> - } <nl> - this.name = name; <nl> + public MetricRegistry() { <nl> 
mmm AbstractReporter.java <nl> ppp AbstractReporter.java <nl> - public abstract class AbstractReporter { <nl> + import java.util.concurrent.ScheduledExecutorService; <nl> + import java.util.concurrent.TimeUnit; <nl> + public abstract class AbstractReporter implements Runnable { <nl> + protected final ScheduledExecutorService tickThread; <nl> 
mmm MeteredTest.java <nl> ppp MeteredTest.java <nl> - import org.junit.After; <nl> - private InstrumentedWithMetered instance; <nl> - private MetricsRegistry registry; <nl> + InstrumentedWithMetered instance; <nl> + MetricsRegistry registry; <nl> - this.registry = new MetricsRegistry(); <nl> - final Injector injector = Guice.createInjector(new InstrumentationModule() { <nl> 
mmm JmxReporter.java <nl> ppp JmxReporter.java <nl> - registered.add(objectName); <nl> + registered.remove(objectName); <nl> mmm MetricsModule.java <nl> ppp MetricsModule.java <nl> - json.writeNumberField("m15_rate", timer.getOneMinuteRate() * rateFactor); <nl> - json.writeNumberField("m1_rate", timer.getFifteenMinuteRate() * rateFactor); <nl> 
new file <nl> ppp Header.java <nl> + package com.netflix.zuul.message; <nl> + public class Header implements Cloneable <nl> + { <nl> + private final HeaderName name; <nl> + private final String value; <nl> + public Header(HeaderName name, String value) <nl> + { <nl> + if (name == null) throw new NullPointerException("Header name cannot be null!"); <nl> 
deleted file <nl> mmm SampleSessionContextDecorator.java <nl> - package com.netflix.zuul.context; <nl> - import com.netflix.zuul.origins.OriginManager; <nl> - import javax.inject.Inject; <nl> - import java.util.UUID; <nl> - public class SampleSessionContextDecorator implements SessionContextDecorator <nl> - { <nl> 
new file <nl> ppp Contact.java <nl> + package flow.sample.tree.model; <nl> + public final class Contact { <nl> + public final String id; <nl> + public final String name; <nl> + public final String email; <nl> + public Contact(String id, String name, String email) { <nl> + this.id = id; <nl> + this.name = name; <nl> 
mmm ShardedJedis.java <nl> ppp ShardedJedis.java <nl> - @Deprecated <nl> - public ScanResult<Entry<String, String>> hscan(String key, int cursor) { <nl> - 	Jedis j = getShard(key); <nl> - 	return j.hscan(key, cursor); <nl> - } <nl> - @Deprecated <nl> - public ScanResult<String> sscan(String key, int cursor) { <nl> 
mmm JedisCommands.java <nl> ppp JedisCommands.java <nl> - @Deprecated <nl> - @Deprecated <nl> - @Deprecated <nl> - ScanResult<Map.Entry<String, String>> hscan(final String key, final String cursor); <nl> - ScanResult<String> sscan(final String key, final String cursor); <nl> - ScanResult<Tuple> zscan(final String key, final String cursor); <nl> 
mmm BinaryClient.java <nl> ppp BinaryClient.java <nl> + import static redis.clients.jedis.Protocol.Keyword.FREQ; <nl> + import static redis.clients.jedis.Protocol.Keyword.HELP; <nl> + public void objectHelp() { <nl> + sendCommand(OBJECT, HELP.raw); <nl> + } <nl> + public void objectFreq(final byte[] key) { <nl> 
mmm Commands.java <nl> ppp Commands.java <nl> + public void zrevrangeByScore(final String key, final double max, <nl> + final double min); <nl> + public void zrevrangeByScore(final String key, final String max, <nl> + final String min); <nl> + public void zrevrangeByScore(final String key, final double max, <nl> 
mmm BinaryShardedJedis.java <nl> ppp BinaryShardedJedis.java <nl> + public Long pexpire(byte[] key, final long milliseconds) { <nl> + Jedis j = getShard(key); <nl> + return j.pexpire(key, milliseconds); <nl> + } <nl> + @Deprecated <nl> + public Long pexpire(String key, final long milliseconds) { <nl> + Jedis j = getShard(key); <nl> 
mmm HashesCommandsTest.java <nl> ppp HashesCommandsTest.java <nl> + import static redis.clients.jedis.tests.utils.AssertUtil.assertCollectionContains; <nl> - assertTrue(arrayContains(bvals, bbar)); <nl> - assertTrue(arrayContains(bvals, bcar)); <nl> + assertCollectionContains(bvals, bbar); <nl> + assertCollectionContains(bvals, bcar); <nl> 
mmm BinaryRedisPipeline.java <nl> ppp BinaryRedisPipeline.java <nl> + Response<Long> pfadd(final byte[] key, final byte[]... elements); <nl> + Response<Long> pfcount(final byte[] key); <nl> mmm Jedis.java <nl> ppp Jedis.java <nl> - import java.net.URI; <nl> - import java.util.AbstractMap; <nl> - import java.util.ArrayList; <nl> 
new file <nl> ppp PipelineBlock.java <nl> + package redis.clients.jedis; <nl> + import java.util.Map; <nl> + import redis.clients.jedis.BinaryClient.LIST_POSITION; <nl> + public abstract class PipelineBlock implements Commands { <nl> + private Client client; <nl> + public void setClient(Client client) { <nl> 
mmm JedisClusterCommand.java <nl> ppp JedisClusterCommand.java <nl> + import redis.clients.util.SafeEncoder; <nl> + return runWithRetries(SafeEncoder.encode(key), this.redirections, false, false); <nl> + } <nl> + public T run(int keyCount, String... keys) { <nl> + if (keys == null || keys.length == 0) { <nl> 
mmm ListCommandsTest.java <nl> ppp ListCommandsTest.java <nl> + size = jedis.rpush("foo", "bar", "foo"); <nl> + assertEquals(4, size); <nl> + bsize = jedis.rpush(bfoo, bbar, bfoo); <nl> + assertEquals(4, bsize); <nl> + size = jedis.lpush("foo", "bar", "foo"); <nl> + assertEquals(4, size); <nl> + bsize = jedis.lpush(bfoo, bbar, bfoo); <nl> 
mmm ClassViewer.java <nl> ppp ClassViewer.java <nl> + panelArea = new RSyntaxTextArea(); <nl> + panelArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA); <nl> + panelArea.setAntiAliasingEnabled(true); <nl> + scrollPane = new RTextScrollPane(panelArea); <nl> + panelArea.setText(Decompiler.textifier.decompileClassNode(cn, b)); <nl> 
mmm TaskRestController.java <nl> ppp TaskRestController.java <nl> - 		counterService.increment("web.task.list"); <nl> + 		counterService.increment("task.list"); <nl> - 	public ResponseEntity<?> create(@RequestBody Task task, UriComponentsBuilder uriBuilder) { <nl> + 	public ResponseEntity<?> create(@RequestBody Task task, <nl> 
new file <nl> ppp Future.java <nl> + package java.util.concurrent; <nl> + public interface Future<V> { <nl> + boolean cancel(boolean mayInterruptIfRunning); <nl> + boolean isCancelled(); <nl> + boolean isDone(); <nl> + V get() throws InterruptedException, ExecutionException; <nl> + V get(long timeout, TimeUnit unit) <nl> 
mmm AbstractMapTest.java <nl> ppp AbstractMapTest.java <nl> - abstract protected <T1, T2> Map<T1, T2> emptyMap(); <nl> + abstract protected <T1 extends Comparable<? super T1>, T2> Map<T1, T2> emptyMap(); <nl> - abstract protected <K, V> Map<K, V> mapOfTuples(Tuple2<? extends K, ? extends V>... entries); <nl> 
mmm Seq.java <nl> ppp Seq.java <nl> + Seq<T> leftPadTo(int length, T element); <nl> 
mmm HashMapTest.java <nl> ppp HashMapTest.java <nl> + import javaslang.Tuple2; <nl> - import javaslang.Tuple2; <nl> - return HashMap.<Integer, T>collector(); <nl> + return HashMap.<Integer, T> collector(); <nl> - @Override <nl> - protected <K  extends Comparable<? super K>, V> Map<K, V> of(K key, V value) { <nl> 
mmm Function6Test.java <nl> ppp Function6Test.java <nl> - public void shouldRecognizeApplicabilityOfNull() { <nl> - final Function6<Object, Object, Object, Object, Object, Object, Object> f = (o1, o2, o3, o4, o5, o6) -> null; <nl> - assertThat(f.isApplicableTo(null, null, null, null, null, null)).isTrue(); <nl> 
mmm Tuple2Test.java <nl> ppp Tuple2Test.java <nl> + @Test <nl> + public void shouldAppendTuple2() { <nl> + Tuple2<Integer, Integer> tuple = Tuple.of(1, 2); <nl> + Tuple3<Integer, Integer, Integer> actual = tuple.append(2016); <nl> + Tuple3<Integer, Integer, Integer> expected = Tuple.of(1, 2, 2016); <nl> + assertThat(actual).isEqualTo(expected); <nl> 
mmm Gen.java <nl> ppp Gen.java <nl> - @Override <nl> - default boolean isEmpty() { <nl> - return false; <nl> - } <nl> mmm Tree.java <nl> ppp Tree.java <nl> - import java.util.Arrays; <nl> - import java.util.Iterator; <nl> - import java.util.Objects; <nl> + import java.util.*; <nl> - @Override <nl> - throw new NoSuchElementException("last of Nil"); <nl> 
mmm Tuple7Test.java <nl> ppp Tuple7Test.java <nl> + @Test <nl> + public void shouldAppendTuple7() { <nl> + Tuple8<Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer> actual = createIntTuple(1, 2, 3, 4, 5, 6, 7).append(42); <nl> + Tuple8<Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer> expected = Tuple.of(1, 2, 3, 4, 5, 6, 7, 42); <nl> 
mmm SortedSet.java <nl> ppp SortedSet.java <nl> + @Override <nl> + <U, R> SortedSet<R> zipWith(Iterable<? extends U> that, BiFunction<? super T, ? super U, ? extends R> mapper); <nl> + @Override <nl> + <U> SortedSet<U> zipWithIndex(BiFunction<? super T, ? super Long, ? extends U> mapper); <nl> mmm Seq.java <nl> 
mmm JmhRunner.java <nl> ppp JmhRunner.java <nl> mmm LazyBenchmark.java <nl> ppp LazyBenchmark.java <nl> mmm CharSeqBenchmark.java <nl> ppp CharSeqBenchmark.java <nl> mmm ListBenchmark.java <nl> ppp ListBenchmark.java <nl> mmm HashSetBenchmark.java <nl> ppp HashSetBenchmark.java <nl> mmm MemoryUsage.java <nl> ppp MemoryUsage.java <nl> 
mmm API.java <nl> ppp API.java <nl> - public boolean isApplicable(T obj) { <nl> - return Objects.equals(obj, prototype); <nl> + public Option<T> apply(T obj) { <nl> + return Objects.equals(obj, prototype) ? Option.some(obj) : Option.none(); <nl> - public boolean isApplicable(T obj) { <nl> - return predicate.test(obj); <nl> 
mmm Function2.java <nl> ppp Function2.java <nl> - import javaslang.control.Try; <nl> - import javaslang.control.Try; <nl> + import java.util.function.Supplier; <nl> - public interface Function0<R> extends λ<R> { <nl> + public interface Function0<R> extends λ<R>, Supplier<R> { <nl> + @Override <nl> + default R get() { <nl> 
mmm AbstractValueTest.java <nl> ppp AbstractValueTest.java <nl> + import javaslang.AbstractIterableTest; <nl> - public abstract class AbstractValueTest { <nl> + public abstract class AbstractValueTest extends AbstractIterableTest { <nl> new file <nl> ppp AbstractIterableTest.java <nl> + package javaslang; <nl> 
mmm Either.java <nl> ppp Either.java <nl> - return either.mapLeft((Function<L, U>) mapper).left(); <nl> + return either.mapLeft(mapper).left(); <nl> - return either.hashCode(); <nl> + return Objects.hashCode(either); <nl> - return either.map((Function<R, U>) mapper).right(); <nl> + return either.map(mapper).right(); <nl> 
deleted file <nl> mmm MatchableProcessor.java <nl> - package javaslang; <nl> - import javax.annotation.processing.AbstractProcessor; <nl> - import javax.annotation.processing.Filer; <nl> - import javax.annotation.processing.RoundEnvironment; <nl> - import javax.lang.model.SourceVersion; <nl> - import javax.lang.model.element.PackageElement; <nl> 
deleted file <nl> mmm DeobfuscationTransformer.java <nl> - package cpw.mods.fml.common.asm.transformers; <nl> - import org.objectweb.asm.ClassReader; <nl> - import org.objectweb.asm.ClassWriter; <nl> - import org.objectweb.asm.Opcodes; <nl> - import org.objectweb.asm.commons.RemappingClassAdapter; <nl> - import org.objectweb.asm.tree.ClassNode; <nl> 
deleted file <nl> mmm UnpackedBakedQuad.java <nl> - package net.minecraftforge.client.model.pipeline; <nl> - import com.google.common.collect.ImmutableList; <nl> - import net.minecraft.client.renderer.model.BakedQuad; <nl> - import net.minecraft.client.renderer.texture.TextureAtlasSprite; <nl> - import net.minecraft.client.renderer.vertex.VertexFormat; <nl> 
new file <nl> ppp ForgePacket.java <nl> + package net.minecraft.src.forge.packets; <nl> + import java.io.ByteArrayOutputStream; <nl> + import java.io.DataInputStream; <nl> + import java.io.DataOutputStream; <nl> + import java.io.IOException; <nl> + import java.util.List; <nl> + import net.minecraft.src.BaseMod; <nl> 
mmm IForgeBlockState.java <nl> ppp IForgeBlockState.java <nl> + import net.minecraft.client.renderer.block.model.IBakedModel; <nl> mmm IForgeBlock.java <nl> ppp IForgeBlock.java <nl> - import net.minecraft.block.*; <nl> + import net.minecraft.block.Block; <nl> + import net.minecraft.block.BlockBed; <nl> + import net.minecraft.block.BlockFarmland; <nl> 
new file <nl> ppp GuiUnicodeGlyphButton.java <nl> + package cpw.mods.fml.client.config; <nl> + import net.minecraft.client.Minecraft; <nl> + import org.lwjgl.opengl.GL11; <nl> + public class GuiUnicodeGlyphButton extends GuiButtonExt <nl> + { <nl> + public String glyph; <nl> + public float  glyphScale; <nl> + public GuiUnicodeGlyphButton(int id, int xPos, int yPos, int width, int height, String displayString, String glyph, float glyphScale) <nl> 
new file <nl> ppp ItemModelProvider.java <nl> + package net.minecraftforge.client.model.generators; <nl> + import net.minecraft.data.DataGenerator; <nl> + public abstract class ItemModelProvider extends ModelProvider<ItemModelBuilder> { <nl> + public ItemModelProvider(DataGenerator generator, String modid, ExistingFileHelper existingFileHelper) { <nl> 
mmm ConditionalAdvancement.java <nl> ppp ConditionalAdvancement.java <nl> - import com.google.gson.Gson; <nl> - import net.minecraft.util.ResourceLocation; <nl> - public static Advancement.Builder read(Gson gson, ResourceLocation recipeId, JsonObject json) <nl> - { <nl> + public static boolean processConditions(JsonObject json) { <nl> 

mmm SelectAlbumBottomSheet.java <nl> ppp SelectAlbumBottomSheet.java <nl> + import android.os.Environment; <nl> + import android.support.v7.app.AlertDialog; <nl> + import android.widget.AdapterView; <nl> - newFolderDialog(); <nl> mmm SettingActivity.java <nl> ppp SettingActivity.java <nl> + import android.content.res.ColorStateList; <nl> 
mmm SelectAlbumBottomSheet.java <nl> ppp SelectAlbumBottomSheet.java <nl> + public void setHidden(boolean hidden) { <nl> + this.hidden = hidden; <nl> + } <nl> - ArrayList<Album> albumArrayList= new ArrayList<Album>(); <nl> + LinearLayout llNewFolder; <nl> + ArrayList<Album> albumArrayList = null; <nl> - String currentPath; <nl> 
mmm StopLibrary.java <nl> ppp StopLibrary.java <nl> + import java.util.Map.Entry; <nl> - import org.ansj.recognition.impl.FilterRecognition; <nl> + import org.ansj.recognition.impl.StopRecognition; <nl> + import org.ansj.util.MyStaticValue; <nl> - public class FilterLibrary { <nl> + public class StopLibrary { <nl> 
mmm TestError.java <nl> ppp TestError.java <nl> - 		String str = "欢迎使用ansj_seg,(ansj中文分词)在这里如果你遇到什么问题都可以联系我.我一定尽我所能.帮助大家.ansj_seg更快,更准,更自由!" ; <nl> + 		 <nl> + 		MyStaticValue.isNumRecognition = false ; <nl> + 		 <nl> + 		MyStaticValue.isQuantifierRecognition = false ; <nl> + 		 <nl> + 		UserDefineLibrary.insertWord("中性粒细胞百分数neut%","clear",2000); <nl> 
mmm ProcessUtils.java <nl> ppp ProcessUtils.java <nl> - public static int select(boolean v, int telnetPortPid) throws InputMismatchException { <nl> - Map<Integer, String> processMap = listProcessByJps(v); <nl> + public static long select(boolean v, long telnetPortPid) throws InputMismatchException { <nl> 
mmm Many.java <nl> ppp Many.java <nl> - String resultMapId() default ""; <nl> - private static final long serialVersionUID = -6424540398559729838L; <nl> + private static final long serialVersionUID = -4724728412955527868L; <nl> - private final Map<Method, MapperMethod> methodCache; <nl> + private final Map<Method, MapperMethodInvoker> methodCache; <nl> 
mmm Update.java <nl> ppp Update.java <nl> + import org.apache.ibatis.builder.annotation.StatementAnnotationMetadata; <nl> + import org.apache.ibatis.mapping.SqlCommandType; <nl> + import java.lang.annotation.Repeatable; <nl> + @Repeatable(Update.List.class) <nl> + @StatementAnnotationMetadata(commandType = SqlCommandType.UPDATE) <nl> 
mmm PooledConnection.java <nl> ppp PooledConnection.java <nl> 
mmm MultipleResultTest.java <nl> ppp MultipleResultTest.java <nl> - import java.nio.file.Paths; <nl> - import java.util.Collections; <nl> - import org.apache.ibatis.datasource.unpooled.UnpooledDataSource; <nl> + import org.apache.ibatis.testcontainers.PgContainer; <nl> - import org.junit.jupiter.api.AfterAll; <nl> 
mmm DefaultResultSetHandler.java <nl> ppp DefaultResultSetHandler.java <nl> - return createByConstructorSignature(rsw, resultType, constructorArgTypes, constructorArgs, columnPrefix); <nl> + return createByConstructorSignature(rsw, resultType, constructorArgTypes, constructorArgs); <nl> - value = getRowValue(rsw, resultMap, constructorMapping.getColumnPrefix()); <nl> 
new file <nl> ppp PersonMapper.java <nl> + package org.apache.ibatis.submitted.enumtypehandler_on_annotation; <nl> + import org.apache.ibatis.annotations.*; <nl> + import org.apache.ibatis.submitted.enumtypehandler_on_annotation.Person.PersonType; <nl> + import org.apache.ibatis.type.EnumOrdinalTypeHandler; <nl> 
mmm GameTimer.java <nl> ppp GameTimer.java <nl> - 	STAMINA("stamina", 2, ChronoUnit.MINUTES), <nl> - 	ANTIFIRE("antifire", 6, ChronoUnit.MINUTES), <nl> - 	EXANTIFIRE("exantifire", 12, ChronoUnit.MINUTES), <nl> - 	OVERLOAD("overload", 5, ChronoUnit.MINUTES), <nl> - 	CANNON("cannon", 25, ChronoUnit.MINUTES), <nl> 
mmm ProgressBarComponent.java <nl> ppp ProgressBarComponent.java <nl> + 	private Point preferredLocation = new Point(); <nl> + 		graphics.translate(preferredLocation.x, preferredLocation.y); <nl> - 		final int barY = -metrics.getHeight(); <nl> + 		final int barY = 0; <nl> + 		graphics.translate(-preferredLocation.x, -preferredLocation.y); <nl> 
mmm Client.java <nl> ppp Client.java <nl> + 	Widget getViewportWidget(); <nl> mmm WidgetID.java <nl> ppp WidgetID.java <nl> + 	static final int PRAYER_GROUP_ID = 541; <nl> + 	static class Prayer <nl> + 	{ <nl> + 		static final int THICK_SKIN = 4; <nl> + 		static final int BURST_OF_STRENGTH = 5; <nl> + 		static final int CLARITY_OF_THOUGHT = 6; <nl> 
mmm Deob.java <nl> ppp Deob.java <nl> + import net.runelite.deob.deobfuscators.arithmetic.ModArith; <nl> - 		new MethodInliner().run(group); <nl> + 		 <nl> + 		new ModArith().run(group); <nl> mmm Execution.java <nl> ppp Execution.java <nl> + import net.runelite.deob.deobfuscators.arithmetic.Encryption; <nl> + 	private Encryption encryption; <nl> 
mmm Perspective.java <nl> ppp Perspective.java <nl> - 	 * @param x the ground coordinate on the x axis <nl> - 	 * @param y the ground coordinate on the y axis <nl> + 	 * @param localX the ground coordinate on the x axis <nl> + 	 * @param localY the ground coordinate on the y axis <nl> - 	public static int getTileHeight(Client client, int x, int y, int plane) <nl> 
mmm TimersPlugin.java <nl> ppp TimersPlugin.java <nl> - 		if (!config.enabled()) <nl> - 		{ <nl> - 			infoBoxManager.removeIf(t -> t instanceof TimerTimer); <nl> - 			return; <nl> - 		} <nl> - 		if (!config.enabled()) <nl> - 		{ <nl> - 			return; <nl> - 		} <nl> - 		if (!config.enabled()) <nl> - 		{ <nl> - 			return; <nl> 
new file <nl> ppp RoguesDenPlugin.java <nl> + package net.runelite.client.plugins.roguesden; <nl> + import com.google.common.eventbus.Subscribe; <nl> + import com.google.inject.Binder; <nl> + import com.google.inject.Provides; <nl> + import java.time.temporal.ChronoUnit; <nl> + import java.util.HashMap; <nl> 
mmm PuzzleSolverPlugin.java <nl> ppp PuzzleSolverPlugin.java <nl> - import java.util.concurrent.ScheduledExecutorService; <nl> - 	@Inject <nl> - 	private ScheduledExecutorService executorService; <nl> deleted file <nl> mmm IDAStar.java <nl> - package net.runelite.client.plugins.puzzlesolver.solver.pathfinding; <nl> 
mmm GameTimer.java <nl> ppp GameTimer.java <nl> + package net.runelite.client.plugins.barbarianassault; <nl> - package net.runelite.client.plugins.skillcalculator; <nl> + import java.time.Duration; <nl> + import java.time.Instant; <nl> + import java.time.LocalTime; <nl> + import java.time.format.DateTimeFormatter; <nl> 
mmm RSClientMixin.java <nl> ppp RSClientMixin.java <nl> - 		int[] varps = getVarps(); <nl> - 		return varps[setting.getId()]; <nl> + 		int[] settings = getSettings(); <nl> + 		return settings[setting.getId()]; <nl> - 	@FieldHook("clientVarps") <nl> + 	@FieldHook("settings") <nl> mmm ChatCommandsPlugin.java <nl> 
mmm LumbridgeDiaryRequirement.java <nl> ppp LumbridgeDiaryRequirement.java <nl> + 		add("Get a slayer task from Chaeldar.", <nl> + 			new Requirement("Combat", 70)); <nl> mmm PohOverlay.java <nl> ppp PohOverlay.java <nl> + 		if (config.showPortalNexus()) <nl> + 		{ <nl> + 			iconList.add(PohIcons.PORTALNEXUS); <nl> 
mmm DevToolsPlugin.java <nl> ppp DevToolsPlugin.java <nl> + import javax.swing.ImageIcon; <nl> + 	private NavigationButton navButton; <nl> + 	private DevToolsPanel panel; <nl> - 		final DevToolsPanel panel = injector.getInstance(DevToolsPanel.class); <nl> - 		final NavigationButton navButton = new NavigationButton( <nl> 
new file <nl> ppp MultipleOfItemRequirement.java <nl> + package net.runelite.client.plugins.cluescrolls.clues.item; <nl> + import net.runelite.api.Client; <nl> + import net.runelite.api.Item; <nl> + import net.runelite.api.ItemComposition; <nl> + public class MultipleOfItemRequirement implements ItemRequirement <nl> 
mmm DevToolsOverlay.java <nl> ppp DevToolsOverlay.java <nl> - import javax.annotation.Nullable; <nl> - 	public DevToolsOverlay(@Nullable Client client, DevToolsPlugin plugin) <nl> + 	public DevToolsOverlay(Client client, DevToolsPlugin plugin) <nl> mmm DevToolsPanel.java <nl> ppp DevToolsPanel.java <nl> - import javax.annotation.Nullable; <nl> 
mmm XpTrackerPlugin.java <nl> ppp XpTrackerPlugin.java <nl> - 			.name("XP Tracker") <nl> + 			.tooltip("XP Tracker") <nl> mmm PluginToolbar.java <nl> ppp PluginToolbar.java <nl> - 			.compare(a.getName(), b.getName()) <nl> + 			.compare(a.getTooltip(), b.getTooltip()) <nl> mmm HiscorePlugin.java <nl> ppp HiscorePlugin.java <nl> 
mmm XpGlobesConfig.java <nl> ppp XpGlobesConfig.java <nl> + 	@ConfigItem( <nl> + 		keyName = "enableCustomArcColor", <nl> + 		name = "Enable custom arc color", <nl> + 		description = "Enables the custom coloring of the globe's arc instead of using the skill's default color.", <nl> + 		position = 2 <nl> + 	) <nl> 
mmm TileIndicatorsOverlay.java <nl> ppp TileIndicatorsOverlay.java <nl> + import net.runelite.client.ui.overlay.OverlayLayer; <nl> + 		setLayer(OverlayLayer.ABOVE_SCENE); <nl> mmm PlayerIndicatorsOverlay.java <nl> ppp PlayerIndicatorsOverlay.java <nl> + import net.runelite.client.ui.overlay.OverlayPriority; <nl> 
mmm Renderable.java <nl> ppp Renderable.java <nl> - 		net.runelite.rs.api.Model model = renderable.getModel(); <nl> - 		return model != null ? new Model(model) : null; <nl> + 		return new Model(renderable.getModel()); <nl> - 		if (renderable == null) <nl> - 		{ <nl> - 			return null; <nl> - 		} <nl> - 		if (renderable instanceof net.runelite.rs.api.Model) <nl> 
mmm ArchiveEntry.java <nl> ppp ArchiveEntry.java <nl> - import java.util.Arrays; <nl> + import lombok.Data; <nl> + @Data <nl> - 	@Override <nl> - 	public String toString() <nl> - 	{ <nl> - 		return "ArchiveEntry{" + "id=" + id + ", archiveId=" + archiveId + ", nameHash=" + nameHash + ", crc=" + crc + ", revision=" + revision + '}'; <nl> 
mmm LootTrackerPlugin.java <nl> ppp LootTrackerPlugin.java <nl> + import java.util.stream.Collectors; <nl> + import net.runelite.api.ItemComposition; <nl> + import net.runelite.api.ItemID; <nl> + import net.runelite.http.api.item.ItemPrice; <nl> - 		final Collection<ItemStack> stackedItems = stack(items); <nl> 
mmm WallObjectQuery.java <nl> ppp WallObjectQuery.java <nl> - @Deprecated <nl> mmm DecorativeObjectQuery.java <nl> ppp DecorativeObjectQuery.java <nl> - @Deprecated <nl> mmm KourendLibraryOverlay.java <nl> ppp KourendLibraryOverlay.java <nl> - import lombok.AccessLevel; <nl> - import lombok.Setter; <nl> - 	@Setter(AccessLevel.PACKAGE) <nl> 
mmm PrayerBarOverlay.java <nl> ppp PrayerBarOverlay.java <nl> + import java.awt.image.BufferedImage; <nl> + import net.runelite.api.SpriteID; <nl> + import net.runelite.client.util.ImageUtil; <nl> + 	private static final int HD_PRAYER_BAR_PADDING = 1; <nl> + 	private static final BufferedImage HD_FRONT_BAR = ImageUtil.getResourceStreamFromClass(PrayerPlugin.class, "front.png"); <nl> 
mmm FaloTheBardClue.java <nl> ppp FaloTheBardClue.java <nl> - import net.runelite.client.plugins.cluescrolls.clues.item.AnyRequirementCollection; <nl> - import net.runelite.client.plugins.cluescrolls.clues.item.ItemRequirement; <nl> - import net.runelite.client.plugins.cluescrolls.clues.item.RangeItemRequirement; <nl> 
mmm Calls.java <nl> ppp Calls.java <nl> - import java.time.Duration; <nl> - import java.time.Instant; <nl> - import java.time.LocalTime; <nl> - import java.time.format.DateTimeFormatter; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> - class GameTimer <nl> + public enum Calls <nl> - 	final private Instant startTime = Instant.now(); <nl> 
mmm RSGrandExchangeOffer.java <nl> ppp RSGrandExchangeOffer.java <nl> + import net.runelite.api.GrandExchangeOffer; <nl> - public interface RSGrandExchangeOffer <nl> + public interface RSGrandExchangeOffer extends GrandExchangeOffer <nl> + 	@Override <nl> + 	@Override <nl> + 	@Override <nl> + 	@Override <nl> 
mmm ChatHistoryPlugin.java <nl> ppp ChatHistoryPlugin.java <nl> + import net.runelite.api.events.ChatMessage; <nl> - import net.runelite.api.events.SetMessage; <nl> - 	public void onSetMessage(SetMessage message) <nl> + 	public void onChatMessage(ChatMessage chatMessage) <nl> - 		if (message.getValue().equals(WELCOME_MESSAGE)) <nl> 
mmm ClientPluginToolbar.java <nl> ppp ClientPluginToolbar.java <nl> - import com.google.common.collect.ComparisonChain; <nl> + import java.util.HashMap; <nl> - import java.util.TreeMap; <nl> - import com.google.common.collect.ComparisonChain; <nl> + import java.util.HashMap; <nl> - import java.util.TreeMap; <nl> 
mmm TagManager.java <nl> ppp TagManager.java <nl> - import net.runelite.client.plugins.cluescrolls.clues.item.ItemRequirement; <nl> + import net.runelite.client.plugins.cluescrolls.clues.emote.ItemRequirement; <nl> mmm RangeItemRequirement.java <nl> ppp RangeItemRequirement.java <nl> - package net.runelite.client.plugins.cluescrolls.clues.item; <nl> 
new file <nl> ppp RSMouseInput.java <nl> + package net.runelite.rs.api; <nl> + import java.awt.event.FocusListener; <nl> + import java.awt.event.MouseListener; <nl> + import java.awt.event.MouseMotionListener; <nl> + public interface RSMouseInput extends MouseListener, MouseMotionListener, FocusListener <nl> 
mmm ColorScheme.java <nl> ppp ColorScheme.java <nl> + 	public static final Color DARKER_GRAY_HOVER_COLOR = new Color(60,  60 , 60); <nl> mmm MaterialTabGroup.java <nl> ppp MaterialTabGroup.java <nl> - 		this.display.setLayout(new BorderLayout()); <nl> + 		if (display != null) <nl> + 		{ <nl> + 			this.display.setLayout(new BorderLayout()); <nl> 
new file <nl> ppp FairyRingClueTest.java <nl> + package net.runelite.client.plugins.cluescrolls.clues; <nl> + import static org.junit.Assert.assertNull; <nl> + import org.junit.Test; <nl> + public class FairyRingClueTest <nl> + { <nl> + 	@Test <nl> + 	public void forTextEmptyString() <nl> + 	{ <nl> + 		assertNull(FairyRingClue.forText("")); <nl> 
mmm ClientUI.java <nl> ppp ClientUI.java <nl> + import net.runelite.api.Constants; <nl> - 			int width = config.gameSize().width; <nl> - 			int height = config.gameSize().height; <nl> - 			if (width > 7680) <nl> - 			{ <nl> - 				width = 7680; <nl> - 			} <nl> - 			if (height > 2160) <nl> - 			{ <nl> - 				height = 2160; <nl> 
new file <nl> ppp CatchrateOverlay.java <nl> + package net.runelite.client.plugins.hunter; <nl> + import java.awt.Dimension; <nl> + import java.awt.Graphics2D; <nl> + import java.awt.Point; <nl> + import java.time.Duration; <nl> + import java.time.Instant; <nl> + import javax.inject.Inject; <nl> + import net.runelite.client.ui.overlay.Overlay; <nl> 
mmm FrameDumper.java <nl> ppp FrameDumper.java <nl> - 				Files.asCharSink(new File(outDir, archive.getArchiveId() + ".json"), Charset.defaultCharset()).write(gson.toJson(frames)); <nl> + 				Files.write(gson.toJson(frames), new File(outDir, archive.getArchiveId() + ".json"), Charset.defaultCharset()); <nl> 
mmm MouseHighlightOverlay.java <nl> ppp MouseHighlightOverlay.java <nl> - import net.runelite.api.VarClient; <nl> + import net.runelite.api.VarClientInt; <nl> - 			int tooltipTimeout = varcs.getIntVar(VarClient.TOOLTIP_TIMEOUT); <nl> + 			int tooltipTimeout = varcs.getIntVar(VarClientInt.TOOLTIP_TIMEOUT); <nl> 
mmm SkillChallengeClue.java <nl> ppp SkillChallengeClue.java <nl> - 				any("", item(ItemID.GRACEFUL_HOOD), item(ItemID.GRACEFUL_HOOD_11851), item(ItemID.GRACEFUL_HOOD_13579), item(ItemID.GRACEFUL_HOOD_13580), item(ItemID.GRACEFUL_HOOD_13591), item(ItemID.GRACEFUL_HOOD_13592), item(ItemID.GRACEFUL_HOOD_13603), item(ItemID.GRACEFUL_HOOD_13604), item(ItemID.GRACEFUL_HOOD_13615), item(ItemID.GRACEFUL_HOOD_13616), item(ItemID.GRACEFUL_HOOD_13627), item(ItemID.GRACEFUL_HOOD_13628), item(ItemID.GRACEFUL_HOOD_13667), item(ItemID.GRACEFUL_HOOD_13668), item(ItemID.GRACEFUL_HOOD_21061), item(ItemID.GRACEFUL_HOOD_21063), item(ItemID.GRACEFUL_HOOD_24743), item(ItemID.GRACEFUL_HOOD_24745)), <nl> 
mmm SettingsActivity.java <nl> ppp SettingsActivity.java <nl> - import com.kabouzeid.gramophone.preferences.LibraryPreference; <nl> - import com.kabouzeid.gramophone.preferences.LibraryPreferenceDialog; <nl> - } else if (preference instanceof LibraryPreference) { <nl> - return LibraryPreferenceDialog.newInstance(); <nl> 
mmm DeleteSongsDialog.java <nl> ppp DeleteSongsDialog.java <nl> + import android.support.v4.app.DialogFragment; <nl> - public class DeleteSongsDialog extends LeakDetectDialogFragment { <nl> + public class DeleteSongsDialog extends DialogFragment { <nl> deleted file <nl> mmm LeakDetectDialogFragment.java <nl> 
mmm ArtistLoader.java <nl> ppp ArtistLoader.java <nl> - public static Artist getArtist(@NonNull final Context context, int artistId) { <nl> + public static Artist getArtist(@NonNull final Context context, long artistId) { <nl> - private static Artist getOrCreateArtist(List<Artist> artists, int artistId) { <nl> 
mmm AppIntroActivity.java <nl> ppp AppIntroActivity.java <nl> - .image(R.drawable.ic_folder_black_24dp) <nl> + .image(R.drawable.ic_folder_white_24dp) <nl> mmm PlaylistAdapter.java <nl> ppp PlaylistAdapter.java <nl> - return playlist.id == favoritePlaylistId ? R.drawable.ic_favorite_black_24dp : R.drawable.ic_queue_music_black_24dp; <nl> 
new file <nl> ppp SynchronizedLyricsLRC.java <nl> + package com.kabouzeid.gramophone.model.lyrics; <nl> + import java.util.regex.Matcher; <nl> + import java.util.regex.Pattern; <nl> + class SynchronizedLyricsLRC extends AbsSynchronizedLyrics { <nl> + private static final Pattern LRC_LINE_PATTERN = Pattern.compile("((?:\\[.*?\\])+)(.*)"); <nl> 
mmm DeepLinkCallback.java <nl> ppp DeepLinkCallback.java <nl> mmm SampleApplication.java <nl> ppp SampleApplication.java <nl> deleted file <nl> mmm JavaWriter.java <nl> - package com.airbnb.deeplinkdispatch.javawriter; <nl> - import java.io.Closeable; <nl> - import java.io.IOException; <nl> - import java.io.Writer; <nl> 
mmm MainActivity.java <nl> ppp MainActivity.java <nl> - findViewById(R.id.irc_btn).setOnClickListener(mMainButtonClicked); <nl> - } else if (id == R.id.irc_btn) { <nl> - IRCConnectActivity.show(MainActivity.this); <nl> deleted file <nl> mmm IRCClientConnection.java <nl> - package com.facebook.stetho.sample; <nl> 
new file <nl> ppp SampleDebugApplication.java <nl> + package com.facebook.stetho.sample; <nl> + import java.util.ArrayList; <nl> + import android.app.Application; <nl> + import android.content.Context; <nl> + import com.facebook.stetho.DumperPluginsProvider; <nl> + import com.facebook.stetho.Stetho; <nl> + import com.facebook.stetho.dumpapp.DumperPlugin; <nl> 
mmm AndroidDOMProvider.java <nl> ppp AndroidDOMProvider.java <nl> + @Override <nl> + public void setAttributesAsText(Object element, String text) { <nl> + verifyThreadAccess(); <nl> + Descriptor descriptor = mDescriptorMap.get(element.getClass()); <nl> + if (descriptor != null) { <nl> + descriptor.setAttributesAsText(element, text); <nl> 
mmm Cargo.java <nl> ppp Cargo.java <nl> + import se.citerus.dddsample.domain.model.handling.HandlingEvent; <nl> - * to happen <b>asynchronously</b> since {@link se.citerus.dddsample.domain.model.handling.HandlingEvent} is in a different aggregate. <nl> + * to happen <b>asynchronously</b> since {@link HandlingEvent} is in a different aggregate. <nl> 
mmm RealmListTests.java <nl> ppp RealmListTests.java <nl> + case CREATE_SNAPSHOT: results.createSnapshot(); <nl> mmm RealmList.java <nl> ppp RealmList.java <nl> + @Override <nl> + public OrderedRealmCollectionSnapshot<E> createSnapshot() { <nl> + if (!managedMode) { <nl> + throw new UnsupportedOperationException(ONLY_IN_MANAGED_MODE_MESSAGE); <nl> 
mmm ImplicitTransaction.java <nl> ppp ImplicitTransaction.java <nl> - parent.promoteToWrite(); <nl> + parent.promoteToWrite(); <nl> mmm RealmProcessor.java <nl> ppp RealmProcessor.java <nl> - Set<String> classesToValidate = new HashSet<>(); <nl> - boolean done = false; <nl> + private static Set<String> classesToValidate = new HashSet<String>(); <nl> 
new file <nl> ppp JNITransactions.java <nl> + package com.tightdb; <nl> + import static org.testng.AssertJUnit.assertEquals; <nl> + import java.io.File; <nl> + import java.util.Date; <nl> + import org.testng.annotations.AfterMethod; <nl> + import org.testng.annotations.BeforeMethod; <nl> + import org.testng.annotations.Test; <nl> 
mmm AutomaticSyncPolicy.java <nl> ppp AutomaticSyncPolicy.java <nl> + @Override <nl> + public boolean equals(Object o) { <nl> + if (this == o) return true; <nl> + if (o == null || getClass() != o.getClass()) return false; <nl> + AutomaticSyncPolicy that = (AutomaticSyncPolicy) o; <nl> + if (recurringErrors != that.recurringErrors) return false; <nl> 
mmm PrimaryKeyTests.java <nl> ppp PrimaryKeyTests.java <nl> - Table t = sharedRealm.createTable(Table.getTableNameForClass("TestTable")); <nl> + Table t = sharedRealm.createTable("TestTable"); <nl> - Table t = sharedRealm.createTable(Table.getTableNameForClass("class_TestTable")); <nl> + Table t = sharedRealm.createTable("TestTable"); <nl> 
deleted file <nl> mmm SyncCrypto.java <nl> - package io.realm.internal.android.crypto; <nl> - import java.security.KeyStoreException; <nl> - public interface SyncCrypto { <nl> - String encrypt(String plainText) throws KeyStoreException; <nl> - String decrypt(String cipherText) throws KeyStoreException; <nl> 
mmm DynamicRealmObject.java <nl> ppp DynamicRealmObject.java <nl> + public DynamicRealm getDynamicRealm() { <nl> + final BaseRealm realm = realmGet$proxyState().getRealm$realm(); <nl> + realm.checkIfValid(); <nl> + if (!isValid()) { <nl> + throw new IllegalStateException(MSG_DELETED_OBJECT); <nl> + } <nl> + return (DynamicRealm) realm; <nl> 
mmm Collection.java <nl> ppp Collection.java <nl> - import java.lang.ref.WeakReference; <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> + import java.util.NoSuchElementException; <nl> - private final WeakReference<Collection> collectionWeakReference; <nl> + Collection iteratorCollection; <nl> 
mmm SyncConfigurationTests.java <nl> ppp SyncConfigurationTests.java <nl> - public void not_equals_same() { <nl> + public void equals_same() { <nl> - assertFalse(config1.equals(config2)); <nl> + assertTrue(config1.equals(config2)); <nl> new file <nl> ppp RealmFileUserStore.java <nl> + package io.realm; <nl> + import java.util.ArrayList; <nl> 
mmm TableQueryTest.java <nl> ppp TableQueryTest.java <nl> - 		assertEquals(1, employees.firstName.eq("john", false).findAll().size()); <nl> - 		assertEquals(1, employees.firstName.equal("john", false).findAll().size()); <nl> - 		 <nl> - 		assertEquals(2, employees.firstName.neq("John").findAll().size()); <nl> 
mmm KillableThread.java <nl> ppp KillableThread.java <nl> - package io.realm.examples.concurrency; <nl> + package io.realm.examples.service; <nl> deleted file <nl> mmm ConcurrencyExampleActivity.java <nl> - package io.realm.examples.concurrency; <nl> - import android.app.Activity; <nl> - import android.content.Intent; <nl> 
mmm PermissionChange.java <nl> ppp PermissionChange.java <nl> + import edu.umd.cs.findbugs.annotations.SuppressFBWarnings; <nl> + @SuppressFBWarnings("EI_EXPOSE_REP") <nl> + @SuppressFBWarnings("EI_EXPOSE_REP") <nl> mmm ClassMetaData.java <nl> ppp ClassMetaData.java <nl> - Utils.error("A default public constructor with no argument must be declared if a custom constructor is declared."); <nl> 
mmm BaseRealm.java <nl> ppp BaseRealm.java <nl> - boolean callbackExecuted = OsObjectStore.callWithLock(configuration, new Runnable() { <nl> + RealmCache.invokeWithGlobalRefCount(configuration, new RealmCache.Callback() { <nl> - public void run() { <nl> + public void onResult(int count) { <nl> + if (count != 0) { <nl> 
mmm AnnotationTypes.java <nl> ppp AnnotationTypes.java <nl> new file <nl> ppp Owner.java <nl> + package io.realm.entities; <nl> + import io.realm.RealmList; <nl> + import io.realm.RealmObject; <nl> + public class Owner extends RealmObject { <nl> + private String name; <nl> + private RealmList<Dog> dogs; <nl> + private Cat cat; <nl> 
new file <nl> ppp RealmJson.java <nl> + package io.realm.internal; <nl> + import android.util.JsonReader; <nl> + import java.io.IOException; <nl> + import org.json.JSONException; <nl> + import org.json.JSONObject; <nl> + import io.realm.RealmObject; <nl> + public interface RealmJson { <nl> + public <E extends RealmObject> void populateUsingJsonObject(E obj, JSONObject json) throws JSONException; <nl> 
deleted file <nl> mmm Context.java <nl> - package com.tightdb; <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - class Context { <nl> - private List<Long> abandonedSubtables = new ArrayList<Long>(); <nl> - private List<Long> abandonedTableViews = new ArrayList<Long>(); <nl> - private List<Long> abandonedQueries = new ArrayList<Long>(); <nl> 
mmm JNIViewTest.java <nl> ppp JNIViewTest.java <nl> - TableView v = t.where().equalTo(2, false).findAll(); <nl> + TableView v = t.where().equalTo(new long[]{2}, false).findAll(); <nl> - TableView view = t.where().equalTo(0, 2).findAll(); <nl> + TableView view = t.where().equalTo(new long[]{0}, 2).findAll(); <nl> 
mmm RxJavaTests.java <nl> ppp RxJavaTests.java <nl> - import android.test.AndroidTestCase; <nl> + import android.support.test.annotation.UiThreadTest; <nl> + import android.support.test.rule.UiThreadTestRule; <nl> + import android.support.test.runner.AndroidJUnit4; <nl> + import org.junit.After; <nl> + import org.junit.Before; <nl> 
deleted file <nl> mmm TestTightdbGraph.java <nl> - package com.tightdb.example.graph; <nl> - import java.io.File; <nl> - import java.util.ArrayList; <nl> - import java.util.Date; <nl> - import com.tightdb.*; <nl> - public class TestTightdbGraph { <nl> - 	static String filename = "graph.tightdb"; <nl> - 	 <nl> 
mmm RealmSchema.java <nl> ppp RealmSchema.java <nl> + public RealmObjectSchema createWithPrimaryKeyField(String className, String primaryKeyFieldName, Class<?> fieldType, <nl> + FieldAttribute... attributes) { <nl> + checkEmpty(className, EMPTY_STRING_MSG); <nl> + RealmObjectSchema.checkLegalName(primaryKeyFieldName); <nl> 
deleted file <nl> mmm ExpectedValue.java <nl> - package io.realm.internal.test; <nl> - public class ExpectedValue { <nl> - public Object value; <nl> - public ExpectedValue(Object value) { <nl> - this.value = value; <nl> - } <nl> - } <nl> mmm RealmTest.java <nl> - public class ParameterizedTestExample extends AndroidTestCase { <nl> 
mmm DynTableViewIntro.java <nl> ppp DynTableViewIntro.java <nl> mmm TypedTableViewIntro.java <nl> ppp TypedTableViewIntro.java <nl> - } <nl> + } <nl> mmm TableTest.java <nl> ppp TableTest.java <nl> + import com.tightdb.test.TestEmployeeRow; <nl> + @Test <nl> + public void testAddEmptyRow() { <nl> + long size = employees.size(); <nl> 
mmm SimpleRealmProxy.java <nl> ppp SimpleRealmProxy.java <nl> + @Override <nl> + public int getObject_id() { <nl> + realm.assertThread(); <nl> + return (int) row.getLong(Realm.columnIndices.get("Simple").get("object_id")); <nl> + } <nl> + @Override <nl> + public void setObject_id(int value) { <nl> + realm.assertThread(); <nl> 
deleted file <nl> mmm JNIParameterizedTestExample.java <nl> - package io.realm.internal; <nl> - import junit.framework.Test; <nl> - import junit.framework.TestCase; <nl> - import java.util.Arrays; <nl> - import java.util.Collection; <nl> - public class JNIParameterizedTestExample extends TestCase { <nl> - private int input_one; <nl> 
mmm RealmQuery.java <nl> ppp RealmQuery.java <nl> - this.columns = Realm.columnIndices.getClassFields(clazz); <nl> + this.columns = realm.columnIndices.getClassFields(clazz); <nl> - public RealmQuery<E> isNull(String fieldName) { <nl> - if (containsDot(fieldName)) { <nl> - throw new IllegalArgumentException("Following multiple relationships is not supported."); <nl> 
mmm GridViewExampleActivity.java <nl> ppp GridViewExampleActivity.java <nl> - import com.google.gson.Gson; <nl> - import com.google.gson.reflect.TypeToken; <nl> - import java.util.Arrays; <nl> - import java.util.Collection; <nl> + List<City> items = new ArrayList<City>(); <nl> - JsonArray json = new JsonParser().parse(new InputStreamReader(stream)).getAsJsonArray(); <nl> 
mmm GroupToStringTest.java <nl> ppp GroupToStringTest.java <nl> - table.addColumn(ColumnType.BOOLEAN, "boolean"); <nl> + table.addColumn(ColumnType.ColumnTypeBool, "boolean"); <nl> - table2.addColumn(ColumnType.BOOLEAN, "boolean"); <nl> + table2.addColumn(ColumnType.ColumnTypeBool, "boolean"); <nl> mmm TableView.java <nl> 
mmm UserStore.java <nl> ppp UserStore.java <nl> - import io.realm.android.SharedPrefsUserStore; <nl> - String CURRENT_USER_KEY = "realm$currentUser"; <nl> - SyncUser put(String key, SyncUser user); <nl> + void put(SyncUser user); <nl> - SyncUser get(String key); <nl> + SyncUser get(); <nl> - SyncUser remove(String key); <nl> 
mmm Table.java <nl> ppp Table.java <nl> - private static final String PRIMARY_KEY_TABLE_NAME = "pk"; <nl> + static final String PRIMARY_KEY_TABLE_NAME = "pk"; <nl> - sharedRealm.createTable(PRIMARY_KEY_TABLE_NAME); <nl> + sharedRealm.createPkTable(); <nl> mmm ConflictingFieldName.java <nl> ppp ConflictingFieldName.java <nl> 
new file <nl> ppp ManualSyncPolicy.java <nl> + package io.realm.sync; <nl> + public class ManualSyncPolicy implements SyncPolicy { <nl> + @Override <nl> + public void apply(SyncSession session) { <nl> + } <nl> + } <nl> mmm SharedGroupManager.java <nl> ppp SharedGroupManager.java <nl> - this.sharedGroup = new SharedGroup( <nl> 
mmm RealmProxyMediator.java <nl> ppp RealmProxyMediator.java <nl> - return new RealmException(clazz + " is not part of the schema for this Realm."); <nl> + return new RealmException("Could not find the generated proxy class for " + clazz + ". Annotation processor may not have been executed."); <nl> mmm RealmProxyMediatorGenerator.java <nl> 
mmm DocGenerator.java <nl> ppp DocGenerator.java <nl> + import java.io.IOException; <nl> + 	private static List<Constructor> constructors = new ArrayList<Constructor>(); <nl> - 		 <nl> - 		describeAndGen(new TableDesc(methods), "Table", context); <nl> - 		describeAndGen(new RowDesc(methods), "Row", context); <nl> 
mmm Table.java <nl> ppp Table.java <nl> - return parent != null && ((Group) parent).immutable; <nl> + if(parent == null) { <nl> + return false; <nl> + } else { <nl> + return ((Group)parent).immutable; <nl> + } <nl> mmm City.java <nl> ppp City.java <nl> mmm KillableThread.java <nl> ppp KillableThread.java <nl> mmm RealmProcessor.java <nl> 
mmm SyncTestUtils.java <nl> ppp SyncTestUtils.java <nl> - Realm.init(InstrumentationRegistry.getTargetContext()); <nl> + Realm.init(InstrumentationRegistry.getContext()); <nl> mmm UserFactory.java <nl> ppp UserFactory.java <nl> - private static synchronized void initFactory(boolean forceReset) { <nl> - if (configuration == null || forceReset) { <nl> 
deleted file <nl> mmm RealmEventHandler.java <nl> - package io.realm; <nl> - import java.lang.ref.WeakReference; <nl> - public class RealmEventHandler implements Runnable { <nl> - private WeakReference<Realm> realmRef; <nl> - public RealmEventHandler(Realm realm) { <nl> - realmRef = new WeakReference<Realm>(realm); <nl> 
mmm TestHelper.java <nl> ppp TestHelper.java <nl> mmm RealmObjectSchema.java <nl> ppp RealmObjectSchema.java <nl> + if (containsAttribute(attributes, FieldAttribute.PRIMARY_KEY)) { <nl> + checkAddPrimaryKeyForSync(); <nl> + } <nl> + * @throws UnsupportedOperationException if this method is called on a synced Realm. <nl> 
deleted file <nl> mmm TimeStamp.java <nl> - package io.realm.examples.realmadapters.models; <nl> - import io.realm.RealmObject; <nl> - public class TimeStamp extends RealmObject { <nl> - private String timeStamp; <nl> - public String getTimeStamp() { <nl> - return timeStamp; <nl> - } <nl> - public void setTimeStamp(String timeStamp) { <nl> 
mmm AbstractTable.java <nl> ppp AbstractTable.java <nl> - 		defineTableStructure(); <nl> + 		if (table != null && table.getTableSpec().getColumnCount() <= 0) { <nl> + 			final TableSpec spec = new TableSpec(); <nl> + 			specifyStructure(spec); <nl> + 			table.updateFromSpec(spec); <nl> + 		} <nl> + 	 <nl> - 	private void defineTableStructure() { <nl> 
mmm SyncSessionTests.java <nl> ppp SyncSessionTests.java <nl> + @Test <nl> + @RunTestInLooperThread <nl> + public void registerConnectionListener() { <nl> + SyncUser user = UserFactory.createUniqueUser(Constants.AUTH_URL); <nl> + SyncConfiguration syncConfiguration = configFactory <nl> + .createSyncConfigurationBuilder(user, Constants.SYNC_SERVER_URL) <nl> 
deleted file <nl> mmm SyncCrypto.java <nl> - package io.realm.internal.android.crypto; <nl> - import java.security.KeyStoreException; <nl> - public interface SyncCrypto { <nl> - String encrypt(String plainText) throws KeyStoreException; <nl> - String decrypt(String cipherText) throws KeyStoreException; <nl> 
mmm DynTableIntro.java <nl> ppp DynTableIntro.java <nl> - Assert(tbl3.getSubTableSize(1, 0) == 2); <nl> + Assert(tbl3.getSubtableSize(1, 0) == 2); <nl> mmm AbstractTable.java <nl> ppp AbstractTable.java <nl> - table.getInternalMethods().insertSubTable(columnIndex, rowIndex, values); <nl> + table.getInternalMethods().insertSubtable(columnIndex, rowIndex, values); <nl> 
deleted file <nl> mmm Person.java <nl> - package io.realm.examples.threads.model; <nl> - import io.realm.RealmObject; <nl> - import io.realm.annotations.PrimaryKey; <nl> - public class Person extends RealmObject { <nl> - @PrimaryKey <nl> - private String id; <nl> - private String name; <nl> - private int age; <nl> 
mmm TableQuery.java <nl> ppp TableQuery.java <nl> - return not().isEmpty(columnIndices, tablePtrs); <nl> + nativeIsNotEmpty(nativePtr, columnIndices, tablePtrs); <nl> + queryValidated = false; <nl> + return this; <nl> + private native void nativeIsNotEmpty(long nativePtr, long[] columnIndices, long[] tablePtrs); <nl> 
new file <nl> ppp BaseRealm.java <nl> + package io.realm; <nl> + import android.os.Handler; <nl> + import android.os.Looper; <nl> + import android.os.Message; <nl> + import java.io.Closeable; <nl> + import java.io.File; <nl> + import java.lang.ref.Reference; <nl> + import java.lang.ref.ReferenceQueue; <nl> + import java.lang.ref.WeakReference; <nl> 
mmm RealmQuery.java <nl> ppp RealmQuery.java <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - import io.realm.internal.TableOrView; <nl> + private Table table; <nl> - TableOrView dataStore = getTable(); <nl> - this.query = dataStore.where(); <nl> + this.table = realm.getTable(clazz); <nl> 
deleted file <nl> mmm Person.java <nl> - package io.realm.examples.realmmigrationexample.model; <nl> - import io.realm.RealmList; <nl> - import io.realm.RealmObject; <nl> - import io.realm.annotations.Ignore; <nl> - public class Person extends RealmObject { <nl> - private String fullName; <nl> - private int age; <nl> 
mmm BaseRealm.java <nl> ppp BaseRealm.java <nl> - * In most cases it is better to use {@link RealmChangeListener}s to be notified about changes to the <nl> - * Realm on a given thread than it is to use this method. <nl> + * This means this method will throw a {@link RealmException} if <nl> + * {@link RealmConfiguration.Builder#allowQueriesOnUiThread(boolean)} was used with {@code true} to <nl> 
mmm RealmQuery.java <nl> ppp RealmQuery.java <nl> + import java.lang.UnsupportedOperationException; <nl> mmm HandlerController.java <nl> ppp HandlerController.java <nl> + while (iteratorStrongListeners.hasNext()) { <nl> - while (iteratorWeakListeners.hasNext() && !realm.isClosed()) { <nl> + while (iteratorWeakListeners.hasNext()) { <nl> 
mmm JNIBinaryTypeTest.java <nl> ppp JNIBinaryTypeTest.java <nl> - 	@Test <nl> - 	public void test() { <nl> - 	    ByteBuffer buf = ByteArrayToByteBuffer(testArray); <nl> - 	    byte[] arr = ByteBufferToByteArray(buf); <nl> - 	 <nl> - 	    assertEquals(testArray, arr); <nl> - 	} <nl> - 	 <nl> - private static byte[] ByteBufferToByteArray(ByteBuffer buf) { <nl> 
mmm TableOrView.java <nl> ppp TableOrView.java <nl> + public static final int NO_MATCH = -1; <nl> mmm Row.java <nl> ppp Row.java <nl> - if (columnName == null) <nl> - throw new IllegalArgumentException("Column name can not be null."); <nl> + if (columnName == null) throw new IllegalArgumentException("Column name can not be null."); <nl> 
mmm RealmTest.java <nl> ppp RealmTest.java <nl> + import java.util.Arrays; <nl> + import java.util.List; <nl> + import io.realm.typed.entities.Dog; <nl> + public void testLinkList() { <nl> + User user1 = new User(); <nl> + user1.setName("Rasmus"); <nl> + user1.setEmail("ra@realm.io"); <nl> + user1.setId(0); <nl> 
mmm RealmProcessorTest.java <nl> ppp RealmProcessorTest.java <nl> + private JavaFileObject emptyModel = JavaFileObjects.forResource("some/test/Empty.java"); <nl> + @Test <nl> + public void compileEmptyFile() { <nl> + ASSERT.about(javaSource()) <nl> + .that(emptyModel) <nl> + .compilesWithoutError(); <nl> + } <nl> 
mmm RealmAsyncQueryTests.java <nl> ppp RealmAsyncQueryTests.java <nl> + @Test <nl> + @RunTestInLooperThread <nl> + public void findFirstAsync_withSorting() { <nl> + Realm realm = looperThread.getRealm(); <nl> + realm.beginTransaction(); <nl> + realm.insert(new Dog("Milo")); <nl> + realm.insert(new Dog("Fido")); <nl> 
mmm RunTestInLooperThread.java <nl> ppp RunTestInLooperThread.java <nl> - @Target(METHOD) @Retention(RUNTIME) <nl> + @Target(METHOD) <nl> + @Retention(RUNTIME) <nl> - Class<? extends RunInLooperThread.RunnableBefore> value() default RunInLooperThread.RunnableBefore.class; <nl> + String threadName() default "RunTestInLooperThread"; <nl> 
mmm OsObject.java <nl> ppp OsObject.java <nl> + private static final String OBJECT_ID_COLUMN_NAME = nativeGetObjectIdColumName(); <nl> + public static boolean isObjectIdColumn(String columnName) { <nl> + return OBJECT_ID_COLUMN_NAME.equals(columnName); <nl> + } <nl> + private static native String nativeGetObjectIdColumName(); <nl> 
mmm RealmTest.java <nl> ppp RealmTest.java <nl> + import java.io.File; <nl> - import io.realm.entities.NonLatinFieldNames; <nl> - private final static String FIELD_STRING = "columnString"; <nl> - private final static String FIELD_LONG = "columnLong"; <nl> - private final static String FIELD_FLOAT = "columnFloat"; <nl> 
new file <nl> ppp Phone.java <nl> + package com.tightdb.generated; <nl> + import com.tightdb.*; <nl> + import com.tightdb.lib.*; <nl> + public class Phone extends AbstractCursor<Phone> { <nl> + public final StringCursorColumn<Phone, PhoneView, PhoneQuery> type; <nl> + public final StringCursorColumn<Phone, PhoneView, PhoneQuery> number; <nl> 
mmm NotificationsTest.java <nl> ppp NotificationsTest.java <nl> - public void testFailureOnNonLooperThread() throws InterruptedException, ExecutionException { <nl> - ExecutorService executorService = Executors.newSingleThreadExecutor(); <nl> - Future<Boolean> future = executorService.submit(new Callable<Boolean>() { <nl> 
mmm RealmNotifierTests.java <nl> ppp RealmNotifierTests.java <nl> - new Thread(new Runnable() { <nl> - @Override <nl> - public void run() { <nl> - SharedRealm sharedRealm = getSharedRealm(config); <nl> - sharedRealm.beginTransaction(); <nl> - sharedRealm.commitTransaction(); <nl> - sharedRealm.close(); <nl> - } <nl> 
mmm Realm.java <nl> ppp Realm.java <nl> - public <E extends RealmObject> RealmTableOrViewList<E> allObjects(Class<E> clazz) { <nl> + public <E extends RealmObject> ResultList<E> allObjects(Class<E> clazz) { <nl> deleted file <nl> mmm RealmList.java <nl> - package io.realm; <nl> - import java.util.List; <nl> 
mmm Realm.java <nl> ppp Realm.java <nl> + import java.lang.ref.SoftReference; <nl> + public static final String DEFAULT_REALM_NAME = "default.realm"; <nl> + private static final Map<String, ThreadRealm> realms = new HashMap<String, ThreadRealm>(); <nl> - private SharedGroup sg; <nl> + private SharedGroup sharedGroup; <nl> 
deleted file <nl> mmm CompositeMediator.java <nl> - package io.realm.internal.modules; <nl> - import android.util.JsonReader; <nl> - import org.json.JSONException; <nl> - import org.json.JSONObject; <nl> - import java.io.IOException; <nl> - import java.util.ArrayList; <nl> - import java.util.HashMap; <nl> - import java.util.List; <nl> 
mmm RealmProxyClassGenerator.java <nl> ppp RealmProxyClassGenerator.java <nl> - private List<VariableElement> fields; <nl> + private List<VariableElement> fields = new ArrayList<VariableElement>(); <nl> + private Map<String, String> getters = new HashMap<String, String>(); <nl> + private Map<String, String> setters = new HashMap<String, String>(); <nl> 
mmm Realm.java <nl> ppp Realm.java <nl> + import android.annotation.TargetApi; <nl> + import android.os.Build; <nl> + import android.util.JsonReader; <nl> + import org.json.JSONArray; <nl> + import org.json.JSONObject; <nl> + import java.io.IOException; <nl> + import java.io.InputStream; <nl> + import java.io.InputStreamReader; <nl> 
mmm AdapterExampleActivity.java <nl> ppp AdapterExampleActivity.java <nl> - import io.realm.RealmConfiguration; <nl> - RealmConfiguration realmConfig = new RealmConfiguration.Builder(this).build(); <nl> - Realm.deleteRealm(realmConfig); <nl> - realm = Realm.getInstance(realmConfig); <nl> + Realm.deleteRealmFile(this); <nl> 
mmm ExampleRealmTest.java <nl> ppp ExampleRealmTest.java <nl> new file <nl> ppp RealmFileUserStore.java <nl> + package io.realm; <nl> + import java.util.ArrayList; <nl> + import java.util.Collection; <nl> + import java.util.Collections; <nl> + public class RealmFileUserStore implements UserStore { <nl> + protected RealmFileUserStore(String path) { <nl> 
new file <nl> ppp ProgressListener.java <nl> + package io.realm; <nl> + public interface ProgressListener { <nl> + void onChange(Progress progress); <nl> + } <nl> mmm ExampleRealmTest.java <nl> ppp ExampleRealmTest.java <nl> - import org.robolectric.RobolectricGradleTestRunner; <nl> + import org.robolectric.RobolectricTestRunner; <nl> 
mmm RunInLooperThread.java <nl> ppp RunInLooperThread.java <nl> + import java.util.concurrent.ThreadFactory; <nl> - Class<? extends RunnableBefore> runnableBefore = annotation.value(); <nl> + final String threadName = annotation.threadName(); <nl> + Class<? extends RunnableBefore> runnableBefore = annotation.before(); <nl> 
new file <nl> ppp AuthTests.java <nl> + package io.realm.objectserver; <nl> + import android.support.test.InstrumentationRegistry; <nl> + import android.support.test.runner.AndroidJUnit4; <nl> + import org.junit.AfterClass; <nl> + import org.junit.BeforeClass; <nl> + import org.junit.Rule; <nl> + import org.junit.Test; <nl> 
mmm ErrorCode.java <nl> ppp ErrorCode.java <nl> + MULTIPLE_CHOICES(300), <nl> + MOVED_PERMANENTLY(301), <nl> + FOUND(302), <nl> + SEE_OTHER(303), <nl> + NOT_MODIFIED(304), <nl> + USE_PROXY(305), <nl> + TEMPORARY_REDIRECT(307), <nl> + PERMANENT_REDIRECT(308), <nl> + BAD_REQUEST(400), <nl> + UNAUTHORIZED(401), <nl> 
mmm AddPersonJob.java <nl> ppp AddPersonJob.java <nl> - Realm realm = Realm.getInstance(context); <nl> + Realm realm = Realm.getInstance(context, false); <nl> - } <nl> + } <nl> mmm Realm.java <nl> ppp Realm.java <nl> - return Realm.getInstance(context, DEFAULT_REALM_NAME); <nl> + if (Looper.myLooper() != null) { <nl> 
mmm RealmCache.java <nl> ppp RealmCache.java <nl> - import io.realm.internal.OsObjectStore; <nl> - BaseRealm.deleteRealm(configuration); <nl> + Realm.deleteRealm(configuration); <nl> - private static void copyAssetFileIfNeeded(final RealmConfiguration configuration) { <nl> - final File realmFileFromAsset = configuration.hasAssetFile() ? <nl> 
mmm DynamicRealmObject.java <nl> ppp DynamicRealmObject.java <nl> - this.row = row instanceof CheckedRow ? (CheckedRow) row : ((UncheckedRow) row).convertToChecked(); <nl> + this.row = (row instanceof CheckedRow) ? (CheckedRow) row : ((UncheckedRow) row).convertToChecked(); <nl> - boolean isString = value instanceof String; <nl> 
mmm LinkingObjectsManagedTests.java <nl> ppp LinkingObjectsManagedTests.java <nl> - RealmResults<AllJavaTypes> distinctParents = child.getListParents().where().distinct("fieldId"); <nl> + RealmResults<AllJavaTypes> distinctParents = child.getListParents().where().distinctValues("fieldId").findAll(); <nl> 
deleted file <nl> mmm GithubApi.java <nl> - package io.realm.examples.rxjava.retrofit; <nl> - import retrofit.http.GET; <nl> - import retrofit.http.Path; <nl> - import rx.Observable; <nl> - public interface GithubApi { <nl> - @GET("/users/{user}") <nl> - Observable<GitHubUser> user(@Path("user") String user); <nl> 
mmm BaseRealm.java <nl> ppp BaseRealm.java <nl> - <E extends RealmModel> E get(Class<E> clazz, Row row) { <nl> - E result = configuration.getSchemaMediator().newInstance(clazz, this, row, schema.getColumnInfo(clazz), <nl> - false, Collections.<String> emptyList()); <nl> - RealmObjectProxy proxy = (RealmObjectProxy) result; <nl> 
mmm ExecutionError.java <nl> ppp ExecutionError.java <nl> + import com.google.common.annotations.GwtCompatible; <nl> + @GwtCompatible <nl> + package java.util.concurrent; <nl> + public interface Callable<V> { <nl> + V call() throws Exception; <nl> + } <nl> mmm UncheckedExecutionException.java <nl> ppp UncheckedExecutionException.java <nl> 
mmm ByteSourceTest.java <nl> ppp ByteSourceTest.java <nl> - suite.addTest(ByteSourceTester.tests("ByteSource.wrap[byte[]]", <nl> - SourceSinkFactories.byteArraySourceFactory(), true)); <nl> - suite.addTest(ByteSourceTester.tests("ByteSource.empty[]", <nl> - SourceSinkFactories.emptyByteSourceFactory(), true)); <nl> 
mmm MultimapsCollectionTest.java <nl> ppp MultimapsCollectionTest.java <nl> + import com.google.common.collect.testing.google.SetMultimapTestSuiteBuilder; <nl> + import com.google.common.collect.testing.google.TestSetMultimapGenerator; <nl> + suite.addTest(transformSuite()); <nl> + suite.addTest(filterSuite()); <nl> 
new file <nl> ppp SetMultimapEqualsTester.java <nl> + package com.google.common.collect.testing.google; <nl> + import static com.google.common.collect.testing.features.CollectionSize.SEVERAL; <nl> + import com.google.common.annotations.GwtCompatible; <nl> + import com.google.common.collect.SetMultimap; <nl> 
mmm Stats.java <nl> ppp Stats.java <nl> mmm StatsAccumulator.java <nl> ppp StatsAccumulator.java <nl> mmm CacheBuilder.java <nl> ppp CacheBuilder.java <nl> - * maximumSize}{@code (0)}, ignoring any otherwise-specificed maximum size or weight. This can be <nl> + * maximumSize}{@code (0)}, ignoring any otherwise-specified maximum size or weight. This can be <nl> 
mmm ForwardingMapTest.java <nl> ppp ForwardingMapTest.java <nl> + import com.google.common.collect.testing.features.CollectionFeature; <nl> - MapFeature.ALLOWS_NULL_KEYS, MapFeature.GENERAL_PURPOSE) <nl> + MapFeature.ALLOWS_NULL_KEYS, MapFeature.GENERAL_PURPOSE, <nl> + CollectionFeature.KNOWN_ORDER) <nl> - MapFeature.ALLOWS_NULL_QUERIES) <nl> 
mmm AbstractGraph.java <nl> ppp AbstractGraph.java <nl> + import static com.google.common.base.Preconditions.checkState; <nl> - import com.google.common.base.Joiner; <nl> + import com.google.common.math.IntMath; <nl> + import com.google.common.primitives.Ints; <nl> + import java.util.AbstractSet; <nl> + import java.util.Iterator; <nl> 
mmm DataTableTypeRegistryTest.java <nl> ppp DataTableTypeRegistryTest.java <nl> + @Test <nl> + @SuppressWarnings("unchecked") <nl> + public void returns_default_data_table_type_for_cell_if_none_match_and_default_registered() { <nl> + registry.defineDataTableType(DataTableType.cell(DataTableTypeRegistryTest.class)); <nl> 
new file <nl> ppp TableParser.java <nl> + package io.cucumber.datatable; <nl> + import com.google.common.base.Joiner; <nl> + import gherkin.AstBuilder; <nl> + import gherkin.Parser; <nl> + import gherkin.ast.GherkinDocument; <nl> + import gherkin.pickles.Compiler; <nl> + import gherkin.pickles.Pickle; <nl> + import gherkin.pickles.PickleTable; <nl> 
mmm BuiltInParameterTransformer.java <nl> ppp BuiltInParameterTransformer.java <nl> + if (Boolean.class.equals(toValueClass) || boolean.class.equals(toValueClass)) { <nl> + return Boolean.parseBoolean(fromValue); <nl> + } <nl> mmm Exe.java <nl> ppp Exe.java <nl> + private Process process; <nl> + private File stderrFile; <nl> 
mmm Gherkin.java <nl> ppp Gherkin.java <nl> - addErrorAttachment(messages, error, uri); <nl> + addParseError(messages, error, uri); <nl> - addErrorAttachment(messages, e, uri); <nl> + addParseError(messages, e, uri); <nl> - private void addErrorAttachment(List<Envelope> messages, ParserException e, String uri) { <nl> 
mmm CucumberExpression.java <nl> ppp CucumberExpression.java <nl> + import java.lang.reflect.Constructor; <nl> - Transform transform; <nl> + Transform transform = null; <nl> - transform = transformLookup.lookup(expressionTypeName); <nl> - } else if (targetType != null) { <nl> - transform = transformLookup.lookup(targetType); <nl> 
mmm GenericParameterTypeTest.java <nl> ppp GenericParameterTypeTest.java <nl> - super("stringlist", new TypeReference<List<String>>() { <nl> - }.getType(), false, singletonList(".*")); <nl> + super("stringlist", singletonList(".*"), new TypeReference<List<String>>() { <nl> + }.getType(), true, false); <nl> 
mmm EnumParameterTypeTest.java <nl> ppp EnumParameterTypeTest.java <nl> - import java.util.List; <nl> - import java.util.Locale; <nl> - public enum Mood { <nl> - happy, <nl> - meh, <nl> - sad <nl> - } <nl> - public void converts_to_enum() { <nl> - ParameterTypeRegistry registry = new ParameterTypeRegistry(Locale.ENGLISH); <nl> 
mmm RSetReactive.java <nl> ppp RSetReactive.java <nl> - import java.util.Iterator; <nl> - public interface RSetReactive<V> extends RCollectionReactive<V> { <nl> + public interface RSetReactive<V> extends RCollectionReactive<V>, RSortableReactive<Set<V>> { <nl> - @Test <nl> - public void shouldUseDefaultCodec() throws Exception { <nl> 
mmm MasterSlaveConnectionManager.java <nl> ppp MasterSlaveConnectionManager.java <nl> - @Override <nl> - public <K, V> PubSubConnectionEntry psubscribe(String channelName) { <nl> - PubSubConnectionEntry сonnEntry = name2PubSubConnection.get(channelName); <nl> - if (сonnEntry != null) { <nl> - return сonnEntry; <nl> 
mmm MarshallingCodec.java <nl> ppp MarshallingCodec.java <nl> - import org.jboss.marshalling.ByteInput; <nl> - import org.jboss.marshalling.ByteOutput; <nl> - import org.jboss.marshalling.Marshaller; <nl> - import org.jboss.marshalling.MarshallerFactory; <nl> - import org.jboss.marshalling.Marshalling; <nl> 
mmm DefaultConnectionListener.java <nl> ppp DefaultConnectionListener.java <nl> - import org.redisson.connection.ConnectionEntry.Mode; <nl> + import org.redisson.connection.ConnectionEntry.NodeType; <nl> - public void onConnect(MasterSlaveServersConfig config, Mode serverMode, FutureConnectionListener connectionListener) <nl> 
mmm AbstractCacheMap.java <nl> ppp AbstractCacheMap.java <nl> + public static class CachedValue { <nl> + private final Object key; <nl> + private final Object value; <nl> + long ttl; <nl> + long maxIdleTime; <nl> + long creationTime; <nl> + long lastAccess; <nl> + public CachedValue(Object key, Object value, long ttl, long maxIdleTime) { <nl> 
mmm MasterSlaveEntry.java <nl> ppp MasterSlaveEntry.java <nl> + import java.util.concurrent.Semaphore; <nl> - PubSubConnectionEntry pubSubEntry = connectionManager.getPubSubEntry(channelName); <nl> + Semaphore semaphore = connectionManager.getSemaphore(channelName); <nl> + semaphore.acquireUninterruptibly(); <nl> 
mmm RedissonTransactionalSet.java <nl> ppp RedissonTransactionalSet.java <nl> + @Override <nl> + public <T> RFuture<Collection<T>> readSortAsync(String byPattern, List<String> getPatterns, SortOrder order, int offset, int count, boolean alpha) { <nl> + return transactionalSet.readSortAsync(byPattern, getPatterns, order, offset, count, alpha); <nl> 
mmm RedissonScoredSortedSet.java <nl> ppp RedissonScoredSortedSet.java <nl> - List<Object> params = new ArrayList<Object>(); <nl> - params.add(getName()); <nl> - if (byPattern != null) { <nl> - params.add("BY"); <nl> - params.add(byPattern); <nl> - } <nl> - if (offset != -1 && count != -1) { <nl> - params.add("LIMIT"); <nl> 
mmm SelfRefIT.java <nl> ppp SelfRefIT.java <nl> - import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*; <nl> + import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*; <nl> + import java.io.File; <nl> + import java.io.IOException; <nl> + import org.apache.commons.io.IOUtils; <nl> 
mmm SchemaRule.java <nl> ppp SchemaRule.java <nl> - schema = schema.derive(schemaNode); <nl> mmm GenerationConfig.java <nl> ppp GenerationConfig.java <nl> + import java.util.Map; <nl> + Map<String, String> getFormatTypeMapping(); <nl> new file <nl> ppp FormatTypeMappingIT.java <nl> + package org.jsonschema2pojo.integration.config; <nl> 
mmm Arguments.java <nl> ppp Arguments.java <nl> - @Parameter(names = { "-c3", "--commons-lang3" }, description = "Whether to use commons-lang 3.x imports instead of commons-lang 2.x imports when adding equals, hashCode and toString methods.") <nl> + @Parameter(names = { "-c3", "--commons-lang3" }, description = "Deprecated. Please remove it from your command-line arguments.") <nl> 
new file <nl> ppp PlainYamlTypesIT.java <nl> + package org.jsonschema2pojo.integration.yaml; <nl> + import static java.util.Arrays.*; <nl> + import static org.hamcrest.Matchers.*; <nl> + import static org.jsonschema2pojo.integration.util.CodeGenerationHelper.*; <nl> + import static org.junit.Assert.*; <nl> 
mmm Jsonschema2PojoMojo.java <nl> ppp Jsonschema2PojoMojo.java <nl> + private String targetVersion = "1.6"; <nl> + public void setTargetVersion(String targetVersion) { <nl> + this.targetVersion = targetVersion; <nl> + } <nl> + @Override <nl> + public String getTargetVersion() { <nl> + return targetVersion; <nl> 
mmm GlobalKeyObserver.java <nl> ppp GlobalKeyObserver.java <nl> - package com.stardust.auojs.inrt.rt; <nl> + package com.stardust.auojs.inrt.autojs; <nl> mmm AutoJs.java <nl> ppp AutoJs.java <nl> - package com.stardust.auojs.inrt.rt; <nl> + package com.stardust.auojs.inrt.autojs; <nl> - import android.widget.CheckBox; <nl> 
mmm Dimensions.java <nl> ppp Dimensions.java <nl> - public static int parseToPixel(String dimension, DisplayMetrics metrics, ViewGroup parent, boolean horizontal) { <nl> - if (dimension.endsWith("%")) { <nl> + public static int parseToPixel(String dimension, View view, ViewGroup parent, boolean horizontal) { <nl> 
mmm DiscoveryLoadBalancerTest.java <nl> ppp DiscoveryLoadBalancerTest.java <nl> - import org.powermock.core.classloader.annotations.PowerMockIgnore; <nl> - @PowerMockIgnore("com.google.*") <nl> mmm ZoneAwareLoadBalancerTest.java <nl> ppp ZoneAwareLoadBalancerTest.java <nl> + @Ignore <nl> - config.setClientName("testChooseZone"); <nl> 
deleted file <nl> mmm LoadBalancerRetrySameServerCommand.java <nl> - package com.netflix.loadbalancer.reactive; <nl> - import com.netflix.client.ClientException; <nl> - import com.netflix.client.ExecutionContextListenerInvoker; <nl> - import com.netflix.client.ExecutionInfo; <nl> - import com.netflix.client.RetryHandler; <nl> 
mmm RxMovieProxyExampleTest.java <nl> ppp RxMovieProxyExampleTest.java <nl> + import com.netflix.client.netty.http.NettyHttpClient; <nl> + import io.netty.buffer.ByteBuf; <nl> + import io.reactivex.netty.protocol.http.client.HttpClient; <nl> + import static org.junit.Assert.assertEquals; <nl> + @Test <nl> + public void testTransportFactoryWithInjection() { <nl> 
mmm NFHttpClient.java <nl> ppp NFHttpClient.java <nl> + 	private DynamicIntProperty maxTotalConnectionProperty; <nl> + 	private DynamicIntProperty maxConnectionPerHostProperty; <nl> + 	 <nl> + 	    maxTotalConnectionProperty = new DynamicIntProperty(this.name + "." + config.getNameSpace() + "." + CommonClientConfigKey.MaxTotalHttpConnections.key(), <nl> 
mmm HttpClientResponse.java <nl> ppp HttpClientResponse.java <nl> - public void close() throws IOException { <nl> + public void close() { <nl> new file <nl> ppp AsyncStreamingClientApp.java <nl> + package com.netflix.ribbon.examples; <nl> + import java.util.List; <nl> + import java.util.concurrent.Future; <nl> 
mmm Http.java <nl> ppp Http.java <nl> - String uriTemplate() default ""; <nl> + String uri() default ""; <nl> mmm RxMovieTemplateExample.java <nl> ppp RxMovieTemplateExample.java <nl> - private final HttpResourceGroup httpResourceGroup = Ribbon.createHttpResourceGroup("movieServiceClient", <nl> - ClientOptions.create() <nl> 
mmm Job.java <nl> ppp Job.java <nl> + private boolean mDeleted; <nl> + cancel(false); <nl> + } <nl> + mDeleted = deleted; <nl> + return mDeleted; <nl> + } <nl> + private static final Object COMMON_MONITOR = new Object(); <nl> - public JobRequest getPendingRequest(@SuppressWarnings("SameParameterValue") boolean cleanUpOrphanedJob) { <nl> 
mmm PersistableBundleCompat.java <nl> ppp PersistableBundleCompat.java <nl> - public static PersistableBundleCompat fromXml(String xml) { <nl> + public static PersistableBundleCompat fromXml(@NonNull String xml) { <nl> mmm JobManager.java <nl> ppp JobManager.java <nl> + import android.app.Application; <nl> 
mmm TSMeta.java <nl> ppp TSMeta.java <nl> - private static final byte[] FAMILY = "name".getBytes(CHARSET); <nl> + public static final byte[] FAMILY = "name".getBytes(CHARSET); <nl> mmm TestUID.java <nl> ppp TestUID.java <nl> + private byte[] UID_TABLE = "tsdb-uid".getBytes(MockBase.ASCII()); <nl> - "tsdb".getBytes(MockBase.ASCII()), false, false); <nl> 
mmm TestSuggestRpc.java <nl> ppp TestSuggestRpc.java <nl> - public void before() { <nl> + public void before() throws Exception { <nl> new file <nl> ppp BaseTestPutRpc.java <nl> + package net.opentsdb.tsd; <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.mockito.Matchers.any; <nl> 
mmm ViewAction1.java <nl> ppp ViewAction1.java <nl> - import rx.functions.Action1; <nl> + import rx.functions.Action1; <nl> - import static org.mockito.Matchers.any; <nl> - import static org.mockito.Matchers.eq; <nl> - import static org.mockito.Mockito.mock; <nl> - import static org.mockito.Mockito.never; <nl> 
mmm OperatorBroadcastRegister.java <nl> ppp OperatorBroadcastRegister.java <nl> - class OnSubscribeBroadcastRegister implements Observable.OnSubscribe<Intent> { <nl> + class OperatorBroadcastRegister implements Observable.OnSubscribe<Intent> { <nl> - public OnSubscribeBroadcastRegister(Context context, IntentFilter intentFilter, String broadcastPermission, Handler schedulerHandler) { <nl> 
new file <nl> ppp ViewActionSetEnabledTest.java <nl> + package rx.android.functions; <nl> + import android.app.Activity; <nl> + import android.view.View; <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> + import org.robolectric.Robolectric; <nl> + import org.robolectric.RobolectricTestRunner; <nl> 
mmm LineChart.java <nl> ppp LineChart.java <nl> - 	public void configureProxy(int daemonPort) { <nl> - 		this.daemonPort = daemonPort; <nl> + 	public void configureProxy(int _daemonPort) { <nl> + 		this.daemonPort = _daemonPort; <nl> mmm TestAction.java <nl> ppp TestAction.java <nl> - 		return null; <nl> - 	private String getTitle() { <nl> 
mmm TotalTPSGraphConsumer.java <nl> ppp TotalTPSGraphConsumer.java <nl> - * @since 4.1 <nl> + * @since 5.0 <nl> mmm AbstractFunctionByKey.java <nl> ppp AbstractFunctionByKey.java <nl> - * @since 4.1 <nl> + * @since 5.0 <nl> mmm RecorderDialog.java <nl> ppp RecorderDialog.java <nl> mmm DynamicSPNegoSchemeFactory.java <nl> 
mmm TestResultWrapperConverter.java <nl> ppp TestResultWrapperConverter.java <nl> - public boolean canConvert(Class arg0) { <nl> mmm MultiPropertyConverter.java <nl> ppp MultiPropertyConverter.java <nl> - public boolean canConvert(Class arg0) { <nl> mmm BooleanPropertyConverter.java <nl> ppp BooleanPropertyConverter.java <nl> 
mmm HTTPSampler.java <nl> ppp HTTPSampler.java <nl> - * @param url              <code>UrlConfig</code> of the URL request <nl> + * @param method            http/https <nl> + * @param res               the sample result <nl> mmm Filter.java <nl> ppp Filter.java <nl> - 	 * @param String regexp <nl> + 	 * @param regexp <nl> 
new file <nl> ppp TestRegexFunction.java <nl> + package org.apache.jmeter.functions; <nl> + import java.util.Collection; <nl> + import java.util.LinkedList; <nl> + import org.apache.jmeter.engine.util.CompoundVariable; <nl> + import org.apache.jmeter.junit.JMeterTestCase; <nl> + import org.apache.jmeter.samplers.SampleResult; <nl> 
mmm TitanEntityManager.java <nl> ppp TitanEntityManager.java <nl> - new Object[] {settings.getTitanDbname(), settings.getTitanUrl()})); <nl> + new String[] {settings.getTitanDbname(), settings.getTitanUrl()})); <nl> mmm NamespaceTextModel.java <nl> ppp NamespaceTextModel.java <nl> - public class NamespaceModifyModel implements FormModel{ <nl> 
mmm ConfigServiceTest.java <nl> ppp ConfigServiceTest.java <nl> + import com.ctrip.framework.apollo.enums.ConfigSourceType; <nl> + @Override <nl> + public ConfigSourceType getSourceType() { <nl> + return null; <nl> + } <nl> + @Override <nl> + public boolean removeChangeListener(ConfigChangeListener listener) { <nl> 
mmm NotificationController.java <nl> ppp NotificationController.java <nl> + import com.google.common.collect.Sets; <nl> + import java.util.Set; <nl> - return Foundation.server().getDataCenter(); <nl> + String dataCenter = Foundation.server().getDataCenter(); <nl> + return dataCenter; <nl> + if (cluster == null) { <nl> 
mmm AllTests.java <nl> ppp AllTests.java <nl> - package com.ctrip.apollo.configserver; <nl> + package com.ctrip.apollo.configservice; <nl> - import com.ctrip.apollo.configserver.controller.ConfigControllerTest; <nl> + import com.ctrip.apollo.configservice.controller.ConfigControllerTest; <nl> mmm DiscoveryService.java <nl> 
mmm ConfigFileControllerIntegrationTest.java <nl> ppp ConfigFileControllerIntegrationTest.java <nl> - private Gson gson = new Gson(); <nl> + private static final Gson GSON = new Gson(); <nl> - Map<String, String> configs = gson.fromJson(response.getBody(), mapResponseType); <nl> + Map<String, String> configs = GSON.fromJson(response.getBody(), mapResponseType); <nl> 
deleted file <nl> mmm ApolloConfigSample.java <nl> - package net.ameizi; <nl> - import com.ctrip.framework.apollo.spring.annotation.EnableApolloConfig; <nl> - import org.springframework.context.annotation.Bean; <nl> - import org.springframework.context.annotation.Configuration; <nl> - @Configuration <nl> - @EnableApolloConfig <nl> 
mmm BeanUtils.java <nl> ppp BeanUtils.java <nl> + import java.beans.PropertyDescriptor; <nl> - public static <T> List<T> batchTransform(final Class<T> clazz, List srcList) { <nl> + public static <T> List<T> batchTransform(final Class<T> clazz, List<? extends Object> srcList) { <nl> - return Collections.EMPTY_LIST; <nl> 
new file <nl> ppp ClusterServiceTest.java <nl> + package com.ctrip.apollo.biz.service; <nl> + import java.util.Date; <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> + import org.springframework.beans.factory.annotation.Autowired; <nl> + import org.springframework.boot.test.SpringApplicationConfiguration; <nl> 
mmm AppModule.java <nl> ppp AppModule.java <nl> - import java.io.IOException; <nl> - import org.apache.tapestry5.*; <nl> + import org.apache.tapestry5.SymbolConstants; <nl> - import org.apache.tapestry5.ioc.OrderedConfiguration; <nl> - import org.apache.tapestry5.ioc.annotations.Local; <nl> - import org.apache.tapestry5.services.Request; <nl> 
mmm HelloServerHandler.java <nl> ppp HelloServerHandler.java <nl> - import io.netty.channel.ChannelHandler; <nl> + import io.netty.util.concurrent.FastThreadLocal; <nl> - @ChannelHandler.Sharable <nl> - 	private static final ThreadLocal<DateFormat> FORMAT = new ThreadLocal<DateFormat>() { <nl> - @Override <nl> 
new file <nl> ppp PlaintextServlet.java <nl> + package fi.markoa.tfb.servlet3; <nl> + import org.slf4j.Logger; <nl> + import org.slf4j.LoggerFactory; <nl> + import javax.servlet.ServletException; <nl> + import javax.servlet.annotation.WebServlet; <nl> + import javax.servlet.http.HttpServlet; <nl> + import javax.servlet.http.HttpServletRequest; <nl> 
new file <nl> ppp PlaintextServlet.java <nl> + package hello; <nl> + import co.paralleluniverse.fibers.Suspendable; <nl> + import co.paralleluniverse.fibers.servlet.FiberHttpServlet; <nl> + import javax.servlet.ServletException; <nl> + import javax.servlet.http.HttpServletRequest; <nl> + import javax.servlet.http.HttpServletResponse; <nl> 
deleted file <nl> mmm WorldController.java <nl> - package com.techempower.act.pgsql.controller; <nl> - import act.controller.Controller; <nl> - import com.techempower.act.pgsql.domain.World; <nl> - import com.techempower.act.sql.controller.SqlWorldControllerBase; <nl> - import javax.inject.Inject; <nl> - import javax.inject.Singleton; <nl> 
new file <nl> ppp DatabaseQueryServlet.java <nl> + package fi.markoa.tfb.servlet3; <nl> + import com.google.common.util.concurrent.*; <nl> + import org.slf4j.Logger; <nl> + import org.slf4j.LoggerFactory; <nl> + import javax.servlet.AsyncContext; <nl> + import javax.servlet.ServletException; <nl> + import javax.servlet.annotation.WebServlet; <nl> 
mmm FortunesServlet.java <nl> ppp FortunesServlet.java <nl> - private static final String UTF8 = "UTF-8"; <nl> - private static final String CONTENT_TYPE_HTML_UTF8 = "text/html;charset=UTF-8"; <nl> - res.setCharacterEncoding(UTF8); <nl> - res.setContentType(CONTENT_TYPE_HTML_UTF8); <nl> + res.setHeader(Common.HEADER_CONTENT_TYPE, Common.CONTENT_TYPE_HTML); <nl> 
new file <nl> ppp PostgresUpdateServlet.java <nl> + package hello; <nl> + import java.io.*; <nl> + import java.sql.*; <nl> + import java.util.*; <nl> + import java.util.concurrent.*; <nl> + import javax.annotation.*; <nl> + import javax.servlet.*; <nl> + import javax.servlet.http.*; <nl> + import javax.sql.*; <nl> 
deleted file <nl> mmm HelloFortuneController.java <nl> - package hello.web; <nl> - import hello.domain.*; <nl> - import java.io.*; <nl> - import java.util.*; <nl> - import java.util.concurrent.*; <nl> - import javax.servlet.http.*; <nl> - import org.hibernate.Session; <nl> - import org.hibernate.Transaction; <nl> 
mmm QueriesController.java <nl> ppp QueriesController.java <nl> - import org.javalite.activeweb.AppController; <nl> + import java.io.IOException; <nl> - import java.util.Date; <nl> - import java.util.LinkedList; <nl> - import java.util.concurrent.ThreadLocalRandom; <nl> - public class QueriesController extends AppController { <nl> 
mmm Main.java <nl> ppp Main.java <nl> - import org.rapidoid.config.Conf; <nl> - import org.rapidoid.setup.App; <nl> - 		App.args(args); <nl> - 		Conf.HTTP.set("maxPipeline", 128); <nl> - 		Conf.HTTP.set("timeout", 0); <nl> mmm WicketApplication.java <nl> ppp WicketApplication.java <nl> - import com.zaxxer.hikari.HikariDataSource; <nl> 
deleted file <nl> mmm DataService.java <nl> - package services; <nl> - import interfaces.Constants; <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - import java.util.concurrent.ThreadLocalRandom; <nl> - import org.apache.commons.lang.StringUtils; <nl> - import models.Fortune; <nl> - import models.World; <nl> 
mmm World.java <nl> ppp World.java <nl> - writer.writeByte(com.dslplatform.json.JsonWriter.OBJECT_START); <nl> - writer.writeAscii("\"id\":"); <nl> + writer.writeAscii("{\"id\":"); <nl> deleted file <nl> mmm UpdatesPostgresqlGetHandlerTest.java <nl> - package com.networknt.techempower.handler; <nl> - import com.networknt.client.Client; <nl> 
mmm Benchmarks.java <nl> ppp Benchmarks.java <nl> - import com.kolich.curacao.annotations.Controller; <nl> - import com.kolich.curacao.annotations.RequestMapping; <nl> - import com.kolich.curacao.mappers.request.matchers.AntPathMatcher; <nl> + import curacao.annotations.Controller; <nl> + import curacao.annotations.RequestMapping; <nl> 
deleted file <nl> mmm NettyServer.java <nl> - package hello; <nl> - import co.paralleluniverse.comsat.webactors.netty.AutoWebActorHandler; <nl> - import co.paralleluniverse.embedded.containers.AbstractEmbeddedServer; <nl> - import io.netty.bootstrap.ServerBootstrap; <nl> - import io.netty.buffer.PooledByteBufAllocator; <nl> 
mmm HelloDbResponse.java <nl> ppp HelloDbResponse.java <nl> - import java.util.*; <nl> - import java.util.concurrent.*; <nl> + import java.util.concurrent.ThreadLocalRandom; <nl> - import com.fasterxml.jackson.databind.*; <nl> + import org.hibernate.IdentifierLoadAccess; <nl> - import org.hibernate.Transaction; <nl> 
new file <nl> ppp Bootstrap.java <nl> + package app.config; <nl> + import net.javapla.jawn.core.ApplicationConfig; <nl> + import net.javapla.jawn.core.spi.ApplicationBootstrap; <nl> + import app.db.DbModule; <nl> + public class Bootstrap implements ApplicationBootstrap { <nl> + @Override <nl> + public void bootstrap(ApplicationConfig config) { <nl> 
new file <nl> ppp DataLoader.java <nl> + package com.techempower.beyondj.dataset; <nl> + import org.springframework.context.support.ClassPathXmlApplicationContext; <nl> + public class DataLoader { <nl> + public static void main(String[] args) { <nl> + new ClassPathXmlApplicationContext( <nl> + "classpath*:**/beyondj-data-loader-jpa-spring-config.xml"); <nl> 
new file <nl> ppp AppBootstrap.java <nl> + package app.config; <nl> + import org.javalite.activeweb.AppContext; <nl> + import org.javalite.activeweb.Bootstrap; <nl> + import com.google.inject.Guice; <nl> + import org.javalite.activeweb.Configuration; <nl> + public class AppBootstrap extends Bootstrap { <nl> 
new file <nl> ppp DatabaseUpdatesServlet.java <nl> + package fi.markoa.tfb.servlet3; <nl> + import com.google.common.util.concurrent.FutureCallback; <nl> + import com.google.common.util.concurrent.Futures; <nl> + import com.google.common.util.concurrent.ListenableFuture; <nl> + import org.slf4j.Logger; <nl> 
deleted file <nl> mmm TestSuite.java <nl> - package mangooio; <nl> - import mangoo.io.testing.MangooRunner; <nl> - public class TestSuite extends MangooRunner { <nl> - } <nl> new file <nl> + package hello.pages; <nl> + import java.util.ArrayList; <nl> + import java.util.Collections; <nl> + import java.util.List; <nl> 
new file <nl> ppp HelloFortuneControllerTest.java <nl> + package hello.controllers; <nl> + import hello.model.Fortune; <nl> + import ninja.NinjaDocTester; <nl> + import org.doctester.testbrowser.Request; <nl> + import org.doctester.testbrowser.Response; <nl> + import org.junit.Test; <nl> + import static org.junit.Assert.*; <nl> 
new file <nl> ppp HelloDbUpdatesResource.java <nl> + package hellowicket.dbupdates; <nl> + import java.io.IOException; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + import java.util.Random; <nl> + import org.apache.wicket.request.resource.AbstractResource; <nl> + import org.hibernate.CacheMode; <nl> 
mmm HelloServerHandler.java <nl> ppp HelloServerHandler.java <nl> + import java.text.SimpleDateFormat; <nl> + import java.util.*; <nl> + import java.util.concurrent.ScheduledFuture; <nl> + import java.util.concurrent.TimeUnit; <nl> + import com.fasterxml.jackson.databind.*; <nl> + import io.netty.channel.Channel; <nl> 
new file <nl> ppp LoggerProducer.java <nl> + package com.techempower.ee7.util; <nl> + import javax.enterprise.inject.Produces; <nl> + import javax.enterprise.inject.spi.InjectionPoint; <nl> + import org.jboss.logging.Logger; <nl> + public class LoggerProducer { <nl> + @Produces <nl> + Logger produceLog(InjectionPoint injectionPoint) { <nl> 
new file <nl> ppp World.java <nl> + package com.techempower.act.sql.domain; <nl> + import act.data.annotation.Data; <nl> + import com.techempower.act.domain.IWorld; <nl> + import javax.persistence.Column; <nl> + import javax.persistence.GeneratedValue; <nl> + import javax.persistence.Id; <nl> + import javax.persistence.MappedSuperclass; <nl> 
deleted file <nl> mmm FastFourierTransform.java <nl> - package com.jwetherell.algorithms.mathematics; <nl> - public class FastFourierTransform { <nl> - private FastFourierTransform() { } <nl> - public static void cooleyTukeyFFT(Complex[] coefficients) { <nl> - final int size = coefficients.length; <nl> - if (size <= 1) <nl> 
mmm RecyclerPreloadModelProvider.java <nl> ppp RecyclerPreloadModelProvider.java <nl> - import com.amaze.filemanager.GlideApp; <nl> - import com.amaze.filemanager.GlideRequest; <nl> + import com.bumptech.glide.Glide; <nl> - private GlideRequest<Drawable> request; <nl> + private RequestBuilder<Drawable> request; <nl> 
new file <nl> ppp RandomAccessStream.java <nl> + package com.amaze.filemanager.utils.streams; <nl> + import java.io.IOException; <nl> + import java.io.InputStream; <nl> + import java.util.stream.Stream; <nl> + public abstract class RandomAccessStream extends InputStream { <nl> + private long markedPosition; <nl> 
mmm MainFragment.java <nl> ppp MainFragment.java <nl> - public boolean GO_BACK_ITEM, SHOW_THUMBS, COLORISE_ICONS, SHOW_DIVIDERS; <nl> + public boolean GO_BACK_ITEM, SHOW_THUMBS, COLORISE_ICONS, SHOW_DIVIDERS, SHOW_HEADERS; <nl> - private static final HashMap<String, String> MIME_TYPES = new HashMap<>(); <nl> 
mmm ColorPref.java <nl> ppp ColorPref.java <nl> + import android.graphics.Color; <nl> + import android.view.MenuItem; <nl> + import com.afollestad.materialdialogs.Theme; <nl> - import com.amaze.filemanager.ui.views.preference.CheckBox; <nl> + import com.amaze.filemanager.ui.dialogs.ColorPickerDialog; <nl> + import com.amaze.filemanager.ui.views.preference.InvalidablePreferenceCategory; <nl> 
mmm RootHelper.java <nl> ppp RootHelper.java <nl> - import com.amaze.filemanager.utils.OnFileFound; <nl> - import com.amaze.filemanager.utils.OpenMode; <nl> + import com.amaze.filemanager.utils.OpenMode; <nl> - public static ArrayList<HybridFileParcelable> getFilesList(String path, boolean showHidden, OnFileFound listener) { <nl> 
mmm PreferenceUtils.java <nl> ppp PreferenceUtils.java <nl> + import com.amaze.filemanager.utils.color.ColorUsage; <nl> - @Deprecated <nl> - @Deprecated <nl> mmm MainActivity.java <nl> ppp MainActivity.java <nl> + import android.accounts.Account; <nl> + import android.support.design.widget.BottomSheetDialogFragment; <nl> 
mmm RecyclerAdapter.java <nl> ppp RecyclerAdapter.java <nl> + import android.os.CountDownTimer; <nl> + import com.amaze.filemanager.utils.AnimUtils; <nl> + import java.util.concurrent.CountDownLatch; <nl> - mainFrag.mActionMode.invalidate(); <nl> + } <nl> + } <nl> + @Override <nl> + public void onViewAttachedToWindow(RecyclerView.ViewHolder holder) { <nl> 
mmm FileUtil.java <nl> ppp FileUtil.java <nl> - RootUtils.mountOwnerRW(f.getPath()); <nl> + RootUtils.mountOwnerRW(f.getParent()); <nl> - RootUtils.mountOwnerRO(f.getPath()); <nl> + RootUtils.mountOwnerRO(f.getParent()); <nl> mmm RarAdapter.java <nl> ppp RarAdapter.java <nl> + if(utilsProvider.getAppTheme().equals(AppTheme.DARK)) <nl> 
mmm Drawer.java <nl> ppp Drawer.java <nl> - if (file.contains(OTGUtil.PREFIX_OTG) || file.startsWith(OTGUtil.PREFIX_MEDIA_REMOVABLE)) { <nl> + if (file.contains(OTGUtil.PREFIX_OTG)) { <nl> - && (meta.path.contains(OTGUtil.PREFIX_OTG) <nl> - || meta.path.startsWith(OTGUtil.PREFIX_MEDIA_REMOVABLE)) <nl> + && meta.path.contains(OTGUtil.PREFIX_OTG) <nl> 
mmm SingletonUsbOtg.java <nl> ppp SingletonUsbOtg.java <nl> - package com.amaze.filemanager.filesystem; <nl> + package com.amaze.filemanager.filesystem.usb; <nl> + import android.bluetooth.BluetoothClass; <nl> + import android.support.annotation.NonNull; <nl> - private Uri usbOtgRoot = null; <nl> - private boolean hasRootBeenRequested = false; <nl> 
deleted file <nl> mmm ProgressiveService.java <nl> - package com.amaze.filemanager.asynchronous.services; <nl> - import android.app.Service; <nl> - import com.amaze.filemanager.activities.MainActivity; <nl> - import com.amaze.filemanager.fragments.ProcessViewerFragment; <nl> - import com.amaze.filemanager.utils.DatapointParcelable; <nl> 
mmm FileUtils.java <nl> ppp FileUtils.java <nl> - String mime = MimeTypes.getMimeType(a.get(0).getPath(), a.get(0).isDirectory()); <nl> + String mime = MimeTypes.getMimeType(a.get(0)); <nl> - if (!mime.equals(MimeTypes.getMimeType(f.getPath(), f.isDirectory()))) { <nl> + if (!mime.equals(MimeTypes.getMimeType(f))) { <nl> 
mmm MainFragment.java <nl> ppp MainFragment.java <nl> - import android.widget.LinearLayout; <nl> - public LinearLayout buttons; <nl> - public LinearLayout pathbar; <nl> - private TextView pathname, mFullPath; <nl> - mToolbarContainer = (AppBarLayout) getActivity().findViewById(R.id.lin); <nl> + mToolbarContainer = getMainActivity().getAppbar().getAppbarLayout(); <nl> 
mmm Main.java <nl> ppp Main.java <nl> + import android.text.format.Formatter; <nl> - Layoutelements layoutelements = new Layoutelements(Icons.loadMimeIcon(getActivity(), mFile[i].getPath(), !IS_LIST, res), name, mFile[i].getPath(), "", "", Futils.readableFileSize(mFile[i].length()), mFile[i].length(), false, mFile[i].lastModified() + "", false); <nl> 
mmm ProcessViewerFragment.java <nl> ppp ProcessViewerFragment.java <nl> - import com.amaze.filemanager.asynchronous.services.ProgressiveService; <nl> + import com.amaze.filemanager.asynchronous.services.ProgressiveServiceAbstract; <nl> - ObtainableServiceBinder<? extends ProgressiveService> binder = <nl> 
mmm Utils.java <nl> ppp Utils.java <nl> - import com.amaze.filemanager.activities.MainActivity; <nl> - import com.leinardi.android.speeddial.SpeedDialView; <nl> - import com.leinardi.android.speeddial.UiUtils; <nl> - import androidx.annotation.Nullable; <nl> - public static void invalidateFab( <nl> - MainActivity mainActivity, @Nullable Runnable callback, boolean open) { <nl> 
mmm CryptUtil.java <nl> ppp CryptUtil.java <nl> - ArrayList<HybridFile> failedOps) throws GeneralSecurityException, IOException { <nl> + ArrayList<HybridFile> failedOps, String targetFilename) throws GeneralSecurityException, IOException { <nl> - encrypt(context, sourceFile, hFile); <nl> + encrypt(context, sourceFile, hFile, targetFilename); <nl> 
mmm CompressedHelper.java <nl> ppp CompressedHelper.java <nl> + public static final char SEPARATOR_CHAR = '/'; <nl> mmm Extractor.java <nl> ppp Extractor.java <nl> + import com.amaze.filemanager.filesystem.compressed.CompressedHelper; <nl> + protected String fixEntryName(String entryName){ <nl> + if(entryName.indexOf('\\') > 0) { <nl> 
mmm TextReader.java <nl> ppp TextReader.java <nl> - getFutils().showPropertiesDialogWithoutPermissions(mFile, this, getAppTheme()); <nl> + getFutils().showPropertiesDialogWithoutPreference(mFile, this, getAppTheme()); <nl> mmm Operations.java <nl> ppp Operations.java <nl> - !Operations.isFileNameValid(file.getName())) { <nl> 
mmm ZipService.java <nl> ppp ZipService.java <nl> - ServiceWatcherUtil.POSITION += len; <nl> + ServiceWatcherUtil.position += len; <nl> mmm TarExtractor.java <nl> ppp TarExtractor.java <nl> - ServiceWatcherUtil.POSITION += len; <nl> + ServiceWatcherUtil.position += len; <nl> mmm CopyService.java <nl> ppp CopyService.java <nl> 
mmm ThemedActivity.java <nl> ppp ThemedActivity.java <nl> + import android.support.annotation.RequiresApi; <nl> - public boolean checkStorage = true; <nl> - if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && checkStorage && !checkStoragePermission()) { <nl> - requestStoragePermission(); <nl> - } <nl> - } <nl> 
mmm BoltCollector.java <nl> ppp BoltCollector.java <nl> - random = new Random(); <nl> - random.setSeed(System.currentTimeMillis()); <nl> + random = new Random(Utils.secureRandomLong()); <nl> mmm TaskHeartbeatTrigger.java <nl> ppp TaskHeartbeatTrigger.java <nl> - queue.publish(new TimerEvent(opCode, object), false); <nl> 
mmm CropWindowHandler.java <nl> ppp CropWindowHandler.java <nl> + private float mMaxCropWindowWidth; <nl> + private float mMaxCropWindowHeight; <nl> - return mMaxCropResultWidth / mScaleFactorWidth; <nl> + return Math.min(mMaxCropWindowWidth, mMaxCropResultWidth / mScaleFactorWidth); <nl> - return mMaxCropResultHeight / mScaleFactorHeight; <nl> 
mmm JavacTransformer.java <nl> ppp JavacTransformer.java <nl> - import java.util.List; <nl> + import com.sun.tools.javac.comp.Enter; <nl> + import com.sun.tools.javac.comp.MemberEnter; <nl> + import com.sun.tools.javac.util.List; <nl> - 	public boolean transform(Context context, Iterable<JCCompilationUnit> compilationUnits) { <nl> 
mmm ConfigurationKeys.java <nl> ppp ConfigurationKeys.java <nl> - 	 * <br> <nl> + 	 * <br /> <nl> - 	 * <br> <nl> + 	 * <br /> <nl> - 	 * <br> <nl> + 	 * <br /> <nl> mmm HandleConstructor.java <nl> ppp HandleConstructor.java <nl> - 		private HandleConstructor handleConstructor = new HandleConstructor(); <nl> - 		 <nl> 
mmm SetterAndWithMethodJavadoc.java <nl> ppp SetterAndWithMethodJavadoc.java <nl> mmm HandlerUtil.java <nl> ppp HandlerUtil.java <nl> - import java.util.regex.Matcher; <nl> - 	 <nl> - 	private static final Pattern SECTION_FINDER = Pattern.compile("^\\s*\\**\\s*[-*][-*]+\\s*([GS]ETTER|WITH(?:ER)?)\\s*[-*][-*]+\\s*\\**\\s*$", Pattern.MULTILINE | Pattern.CASE_INSENSITIVE); <nl> 
mmm JavacJavaUtilMapSingularizer.java <nl> ppp JavacJavaUtilMapSingularizer.java <nl> + import lombok.core.handlers.HandlerUtil; <nl> + import com.sun.tools.javac.tree.JCTree.JCAnnotation; <nl> + import com.sun.tools.javac.tree.JCTree.JCMethodDecl; <nl> + import com.sun.tools.javac.tree.JCTree.JCModifiers; <nl> 
mmm EclipseJavaUtilListSetSingularizer.java <nl> ppp EclipseJavaUtilListSetSingularizer.java <nl> - import org.eclipse.jdt.internal.compiler.ast.EqualExpression; <nl> - import org.eclipse.jdt.internal.compiler.ast.IfStatement; <nl> - import org.eclipse.jdt.internal.compiler.ast.NullLiteral; <nl> - import org.eclipse.jdt.internal.compiler.ast.OperatorIds; <nl> 
mmm EclipseJavaUtilSingularizer.java <nl> ppp EclipseJavaUtilSingularizer.java <nl> - 		switchStat.statements = switchContents.toArray(new Statement[switchContents.size()]); <nl> + 		switchStat.statements = switchContents.toArray(new Statement[0]); <nl> mmm HandleBuilder.java <nl> ppp HandleBuilder.java <nl> 
mmm HttpHostValuesTestCase.java <nl> ppp HttpHostValuesTestCase.java <nl> - import io.undertow.servlet.test.SimpleServletTestCase; <nl> - public static void setup() throws ServletException { <nl> + public static void setup() { <nl> - .setClassLoader(SimpleServletTestCase.class.getClassLoader()) <nl> + .setClassLoader(HttpHostValuesTestCase.class.getClassLoader()) <nl> 
mmm BlockingSenderImpl.java <nl> ppp BlockingSenderImpl.java <nl> - private boolean inCall; <nl> + private volatile Thread inCall; <nl> + private volatile Thread sendThread; <nl> - if (inCall) { <nl> + sendThread = Thread.currentThread(); <nl> + if (inCall == Thread.currentThread()) { <nl> - if (inCall) { <nl> 
mmm ServletPathMappingTestCase.java <nl> ppp ServletPathMappingTestCase.java <nl> + import io.undertow.servlet.test.util.TestClassIntrospector; <nl> + .setClassIntrospecter(TestClassIntrospector.INSTANCE) <nl> mmm FilterInfo.java <nl> ppp FilterInfo.java <nl> - private volatile InstanceFactory instanceFactory; <nl> 
mmm ProxyConnectionPool.java <nl> ppp ProxyConnectionPool.java <nl> - import java.io.Closeable; <nl> - import java.io.IOException; <nl> - import java.net.InetSocketAddress; <nl> - import java.net.URI; <nl> - import java.util.ArrayDeque; <nl> - import java.util.Deque; <nl> - import java.util.Map; <nl> - import java.util.concurrent.ConcurrentMap; <nl> 
mmm HttpParser.java <nl> ppp HttpParser.java <nl> - builder.headers.put(nextStandardHeader, nextHeaderValues); <nl> + if(nextHeaderValues.size() == 1) { <nl> + builder.headers.put(nextStandardHeader, nextHeaderValues.get(0)); <nl> + } else { <nl> + builder.headers.putAll(nextStandardHeader, nextHeaderValues); <nl> 
mmm Http2ClientProvider.java <nl> ppp Http2ClientProvider.java <nl> + import io.undertow.UndertowOptions; <nl> + import io.undertow.client.ClientStatistics; <nl> + import io.undertow.conduits.ByteActivityCallback; <nl> + import io.undertow.conduits.BytesReceivedStreamSourceConduit; <nl> + import io.undertow.conduits.BytesSentStreamSinkConduit; <nl> 
mmm ResourceHandler.java <nl> ppp ResourceHandler.java <nl> + import io.undertow.server.handlers.encoding.ContentEncodedResource; <nl> + import io.undertow.server.handlers.encoding.ContentEncodedResourceManager; <nl> + private volatile ContentEncodedResourceManager contentEncodedResourceManager; <nl> + final ContentEncodedResourceManager contentEncodedResourceManager = ResourceHandler.this.contentEncodedResourceManager; <nl> 
mmm URLRewritingSessionTestCase.java <nl> ppp URLRewritingSessionTestCase.java <nl> - final SessionAttachmentHandler handler = new SessionAttachmentHandler(new InMemorySessionManager(), sessionConfig); <nl> + final SessionAttachmentHandler handler = new SessionAttachmentHandler(new InMemorySessionManager(""), sessionConfig); <nl> 
mmm Handshake.java <nl> ppp Handshake.java <nl> - import java.io.IOException; <nl> + import org.xnio.IoFuture; <nl> - exchange.sendData(payload, new WebSocketHttpExchange.WriteCallback() { <nl> + exchange.sendData(payload).addNotifier(new IoFuture.Notifier<Void, Object>() { <nl> - public void onWrite(final WebSocketHttpExchange exchange) { <nl> 
mmm Connectors.java <nl> ppp Connectors.java <nl> - } else { <nl> - header.append("; SameSite"); <nl> - } else { <nl> - header.append("; SameSite"); <nl> - } else { <nl> - header.append("; SameSite"); <nl> + final StringBuilder pathBuilder = new StringBuilder(); <nl> + int currentPathPartIndex = 0; <nl> - String encodedPart = encodedPath.substring(0, i); <nl> 
new file <nl> ppp SyncServerBuilder.java <nl> + package io.objectbox.sync.server; <nl> + import io.objectbox.BoxStore; <nl> + import io.objectbox.sync.SyncChangesListener; <nl> + import io.objectbox.sync.SyncCredentials; <nl> + import javax.annotation.Nullable; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> 
new file <nl> ppp package-info.java <nl> + @ParametersAreNonnullByDefault <nl> + package io.objectbox.sync; <nl> + import javax.annotation.ParametersAreNonnullByDefault;new file <nl> ppp SyncBuilder.java <nl> + package io.objectbox.sync; <nl> + import io.objectbox.BoxStore; <nl> + import io.objectbox.annotation.apihint.Experimental; <nl> 
new file <nl> ppp SyncClientListener.java <nl> + package io.objectbox.sync; <nl> + @SuppressWarnings({"unused"}) <nl> + public interface SyncClientListener { <nl> + void onLogin(); <nl> + void onLoginFailure(long response); <nl> + void onSyncComplete(); <nl> + void onDisconnect(); <nl> + } <nl> new file <nl> ppp SyncChangesListener.java <nl> 
deleted file <nl> mmm Sync.java <nl> - package io.objectbox.sync; <nl> - import io.objectbox.BoxStore; <nl> - import io.objectbox.annotation.apihint.Experimental; <nl> - import io.objectbox.sync.server.SyncServerBuilder; <nl> - @SuppressWarnings({"unused", "WeakerAccess"}) <nl> - @Experimental <nl> - public final class Sync { <nl> 
mmm AuthenticationFilter.java <nl> ppp AuthenticationFilter.java <nl> + public static final String EXCLUDED_PATHS_PARAM_NAME = "excludedPaths"; <nl> + public static final String EXCLUDED_PATHS_DELIMITER_PARAM_NAME = "delimiters"; <nl> + protected void processExcludedPaths( FilterConfig config ) throws Exception { <nl> 
mmm CachingSessionDAO.java <nl> ppp CachingSessionDAO.java <nl> - import org.jsecurity.cache.CacheProvider; <nl> - import org.jsecurity.cache.CacheProviderAware; <nl> + import org.jsecurity.cache.CacheManager; <nl> + import org.jsecurity.cache.CacheManagerAware; <nl> - * <p>This implementation caches all active sessions in a cache created by a required {@link CacheProvider}.  All <nl> 
mmm RedisDeployCenterImpl.java <nl> ppp RedisDeployCenterImpl.java <nl> - boolean isRun = isRun(host, port); <nl> - if (isRun) { <nl> - return true; <nl> - } <nl> - boolean isCreate = runInstance(host, port, maxMemory, isCluster); <nl> - return isCreate; <nl> + return runInstance(host, port, maxMemory, isCluster); <nl> 
mmm BaseController.java <nl> ppp BaseController.java <nl> + import com.sohu.cache.entity.InstanceSlotModel; <nl> + import com.sohu.cache.redis.RedisCenter; <nl> + 	private List<Integer> getStartToEndSlotList(int startSlot, int endSlot) { <nl> + 		List<Integer> slotList = new ArrayList<Integer>(); <nl> + 		if (startSlot == endSlot) { <nl> 
mmm APatchTool.java <nl> ppp APatchTool.java <nl> - public static String replaceAnnotation = "Lcom/alipay/euler/andfix/annotation/MethodReplace;"; <nl> + public static String replaceAnnotation = "Lcom/taobao/sophix/core/dex/hot/MethodReplace;"; <nl> mmm Formater.java <nl> ppp Formater.java <nl> - public static String dotStringList(Set<String> strings) { <nl> 
mmm TPatchTask.java <nl> ppp TPatchTask.java <nl> - if (apkBO.getVersionName().equals(newApkBO)){ <nl> + if (apkBO.getVersionName().equals(newApkBO.getVersionName())){ <nl> + ((DexPatchInput)tpatchInput).excludeClasses = patchContext.excludeClasses; <nl> + tPatchContext.excludeClasses = tBuildType.getPatchConfig() <nl> 
mmm MockAnnotationProcessor.java <nl> ppp MockAnnotationProcessor.java <nl> + if(annotation.serializable()){ <nl> + 	mockSettings.serializable(); <nl> + } <nl> new file <nl> ppp MocksSerializationForAnnotationTest.java <nl> + package org.mockitousage.basicapi; <nl> + import static org.mockito.Matchers.anyObject; <nl> 
mmm BridgeMethodPuzzleTest.java <nl> ppp BridgeMethodPuzzleTest.java <nl> - import static org.junit.Assert.assertEquals; <nl> - import static org.junit.Assert.assertThat; <nl> - import static org.mockito.Mockito.mock; <nl> - import static org.mockito.Mockito.verify; <nl> - import static org.mockito.util.ExtraMatchers.hasBridgeMethod; <nl> 
mmm Calls.java <nl> ppp Calls.java <nl> + import org.mockito.invocation.MatchableInvocation; <nl> - InvocationMatcher wanted = data.getWanted(); <nl> + MatchableInvocation wanted = data.getWanted(); <nl> mmm NumberOfInvocationsChecker.java <nl> ppp NumberOfInvocationsChecker.java <nl> + import org.mockito.invocation.MatchableInvocation; <nl> 
mmm NumberOfInvocationsCheckerTest.java <nl> ppp NumberOfInvocationsCheckerTest.java <nl> - MockitoVerificationMode mode = VerificationModeFactory.times(100); <nl> + Times mode = VerificationModeFactory.times(100); <nl> - MockitoVerificationMode mode = VerificationModeFactory.times(100); <nl> + Times mode = VerificationModeFactory.times(100); <nl> 
mmm IMockitoConfiguration.java <nl> ppp IMockitoConfiguration.java <nl> - import org.mockito.internal.returnvalues.EmptyReturnValues; <nl> + import org.mockito.internal.returnvalues.ReturnsEmptyValues; <nl> - public static final Answer RETURNS_DEFAULTS = new GloballyConfiguredReturnValues(); <nl> + public static final Answer RETURNS_DEFAULTS = new GloballyConfiguredAnswer(); <nl> 
mmm Invocation.java <nl> ppp Invocation.java <nl> - import org.mockito.Incubating; <nl> - @Incubating <nl> - @Incubating <nl> - @Incubating <nl> mmm Location.java <nl> ppp Location.java <nl> - import org.mockito.Incubating; <nl> - @Incubating <nl> - import org.mockito.Incubating; <nl> - @Incubating <nl> - @Incubating <nl> 
mmm AtLeastXNumberOfInvocationsChecker.java <nl> ppp AtLeastXNumberOfInvocationsChecker.java <nl> - import static org.mockito.internal.exceptions.Reporter.tooLittleActualInvocationsInOrder; <nl> - import static org.mockito.internal.invocation.InvocationMarker.markVerifiedInOrder; <nl> - import static org.mockito.internal.invocation.InvocationsFinder.findAllMatchingUnverifiedChunks; <nl> 
deleted file <nl> mmm DeprecatedMockAnnotationTest.java <nl> - package org.mockitousage.annotation; <nl> - import org.junit.Before; <nl> - import org.junit.Test; <nl> - import org.mockito.InjectMocks; <nl> - import org.mockito.MockitoAnnotations; <nl> - import java.awt.*; <nl> - import static org.junit.Assert.assertNotNull; <nl> 
mmm Reporter.java <nl> ppp Reporter.java <nl> - public void wantedDiffersFromActualInOrder(String wanted, String actual, HasStackTrace actualInvocationStackTrace) { <nl> - WantedDiffersFromActual cause1 = new WantedDiffersFromActual(join( <nl> - "Actual invocation in order:", <nl> - actual <nl> - )); <nl> - cause1.setStackTrace(actualInvocationStackTrace.getStackTrace()); <nl> 
new file <nl> ppp AtLeastXNumberOfInvocationsCheckerInOrderTest.java <nl> + package org.mockito.internal.verification.checkers; <nl> + import org.junit.Rule; <nl> + import org.junit.Test; <nl> + import org.junit.rules.ExpectedException; <nl> + import org.mockito.exceptions.verification.VerificationInOrderFailure; <nl> 
mmm PluginSwitchTest.java <nl> ppp PluginSwitchTest.java <nl> + import org.mockitousage.plugins.resolver.MyMockResolver; <nl> + MyMockResolver.class.getName(), <nl> mmm PluginLoader.java <nl> ppp PluginLoader.java <nl> + import java.util.Collections; <nl> + import java.util.List; <nl> + @SuppressWarnings("unchecked") <nl> 
mmm WebSocketSessionHandler.java <nl> ppp WebSocketSessionHandler.java <nl> + package com.thoughtworks.go.agent.statusapi; <nl> + import fi.iki.elonen.NanoHTTPD; <nl> + import fi.iki.elonen.NanoHTTPD.Response.Status; <nl> + abstract class HttpHandler { <nl> + NanoHTTPD.Response process() { <nl> + if (isPassed()) { <nl> 
mmm PipelineConfigServiceIntegrationTest.java <nl> ppp PipelineConfigServiceIntegrationTest.java <nl> + import com.thoughtworks.go.config.materials.PluggableSCMMaterialConfig; <nl> - import com.thoughtworks.go.domain.config.Admin; <nl> + import com.thoughtworks.go.domain.config.*; <nl> + import com.thoughtworks.go.domain.scm.SCM; <nl> 
new file <nl> ppp RequestContext.java <nl> + package com.thoughtworks.go.api.representers; <nl> + import org.apache.commons.lang.text.StrSubstitutor; <nl> + import java.net.MalformedURLException; <nl> + import java.net.URL; <nl> + import java.util.Map; <nl> + public class RequestContext { <nl> + private final String host; <nl> 
mmm BasicCruiseConfig.java <nl> ppp BasicCruiseConfig.java <nl> + import java.util.concurrent.ConcurrentMap; <nl> - @IgnoreTraversal <nl> - private PipelineNameToConfigMap pipelineNameToConfigMap; <nl> - @IgnoreTraversal <nl> - private AllPipelineConfigs allPipelineConfigs; <nl> + private ConcurrentMap<CaseInsensitiveString, PipelineConfig> pipelineNameToConfigMap = new ConcurrentHashMap<>(); <nl> 
mmm AbstractFetchTask.java <nl> ppp AbstractFetchTask.java <nl> - public abstract class AbstractFetchTask extends AbstractTask implements Serializable { <nl> + public abstract class AbstractFetchTask extends AbstractTask implements FetchArtifactConfig { <nl> mmm MagicalGoConfigXmlWriterTest.java <nl> ppp MagicalGoConfigXmlWriterTest.java <nl> 
mmm PluggableTask.java <nl> ppp PluggableTask.java <nl> - private ConfigurationPropertyBuilder builder; <nl> - this.builder = new ConfigurationPropertyBuilder(); <nl> - this(); <nl> - protected PluggableTask(PluginConfiguration pluginConfiguration, Configuration configuration, ConfigurationPropertyBuilder builder) { <nl> 
mmm CcTrayViewAuthorityTest.java <nl> ppp CcTrayViewAuthorityTest.java <nl> - import org.junit.After; <nl> - import java.util.Collections; <nl> - import java.util.Set; <nl> - import static org.junit.Assert.assertFalse; <nl> - import static org.junit.Assert.assertTrue; <nl> - private PluginRoleUsersStore pluginRoleUsersStore; <nl> 
mmm StageStatusPluginNotifierTest.java <nl> ppp StageStatusPluginNotifierTest.java <nl> + import com.thoughtworks.go.domain.JobInstance; <nl> + import com.thoughtworks.go.domain.JobState; <nl> + import com.thoughtworks.go.domain.Pipeline; <nl> - import com.thoughtworks.go.domain.StageIdentifier; <nl> - import com.thoughtworks.go.domain.StageResult; <nl> 
mmm MaterialUpdateService.java <nl> ppp MaterialUpdateService.java <nl> + import java.util.concurrent.ConcurrentMap; <nl> - private ConcurrentHashMap<Material, Date> inProgress = new ConcurrentHashMap<Material, Date>(); <nl> - private ConcurrentHashMap<Material, Long> materialLastUpdateTimeMap = new ConcurrentHashMap<Material, Long>(); <nl> 
mmm Toggles.java <nl> ppp Toggles.java <nl> + * Copyright 2019 ThoughtWorks, Inc. <nl> + * <nl> + * Licensed under the Apache License, Version 2.0 (the "License"); <nl> + * you may not use this file except in compliance with the License. <nl> + * You may obtain a copy of the License at <nl> + * <nl> + * <nl> 
mmm HgCommandTest.java <nl> ppp HgCommandTest.java <nl> + import java.io.File; <nl> + import java.io.FileOutputStream; <nl> + import java.io.IOException; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> - import java.io.File; <nl> - import java.io.FileOutputStream; <nl> - import java.io.IOException; <nl> 
deleted file <nl> mmm FetchTaskRepresenter.java <nl> - package com.thoughtworks.go.apiv6.shared.representers.stages.tasks; <nl> - import com.thoughtworks.go.api.base.OutputWriter; <nl> - import com.thoughtworks.go.api.representers.ConfigurationPropertyRepresenter; <nl> - import com.thoughtworks.go.api.representers.JsonReader; <nl> 
mmm DeploymentContextWriterTest.java <nl> ppp DeploymentContextWriterTest.java <nl> + import org.eclipse.jetty.http.HttpFields; <nl> + import org.eclipse.jetty.http.HttpVersion; <nl> + import org.eclipse.jetty.http.MetaData; <nl> - request.setUri(new HttpURI("/go/admin?tab=oAuth")); <nl> - request.setServerName("url"); <nl> 
mmm AgentService.java <nl> ppp AgentService.java <nl> - AgentInstances agents() { <nl> - return agentInstances; <nl> + public AgentsViewModel agents() { <nl> + return toAgentViewModels(agentInstances.allAgents()); <nl> + public List<TriStateSelection> getResourceSelections(List<String> uuids) { <nl> + return TriStateSelection.forAgentsResources(goConfigService.getAllResources(), agentConfigService.findAgents(uuids)); <nl> 
mmm AgentUpgradeService.java <nl> ppp AgentUpgradeService.java <nl> - try(final CloseableHttpResponse response = httpClient.execute(method)) { <nl> + try (final CloseableHttpResponse response = httpClient.execute(method)) { <nl> mmm RemoteRegistrationRequesterTest.java <nl> ppp RemoteRegistrationRequesterTest.java <nl> 
mmm CcTrayStageStatusChangeHandlerTest.java <nl> ppp CcTrayStageStatusChangeHandlerTest.java <nl> + import com.thoughtworks.go.config.PluginRoleConfig; <nl> - import java.util.Date; <nl> - import java.util.HashSet; <nl> - import java.util.List; <nl> + import java.util.*; <nl> - Viewers viewers = viewers("viewer1", "viewer2"); <nl> 
mmm ApplicationInitializerTest.java <nl> ppp ApplicationInitializerTest.java <nl> + private BackupScheduler backupScheduler; <nl> + @Mock <nl> mmm BackupServiceTest.java <nl> ppp BackupServiceTest.java <nl> + package com.thoughtworks.go.server.service; <nl> + import com.thoughtworks.go.config.BackupConfig; <nl> 
new file <nl> ppp AdminsControllerV1.java <nl> + package com.thoughtworks.go.apiv1.adminsconfig.spring; <nl> + import com.thoughtworks.go.api.spring.ApiAuthenticationHelper; <nl> + import com.thoughtworks.go.apiv1.adminsconfig.AdminControllerV1Delegate; <nl> + import com.thoughtworks.go.server.service.AdminsConfigService; <nl> 
mmm AgentServiceTest.java <nl> ppp AgentServiceTest.java <nl> - "Please check the agent installation. Click <a href='/go/help/agent_guid_issue.html' target='_blank'>here</a> for more info.", <nl> mmm Extension.java <nl> ppp Extension.java <nl> mmm DirectoryEntries.java <nl> ppp DirectoryEntries.java <nl> - HtmlElement element = p().content("Artifacts for this job instance are unavailable as they may have been <a href='/go/help/delete_artifacts.html' target='blank'>purged by Go</a> or deleted externally. " <nl> 
mmm DownloadableFileTest.java <nl> ppp DownloadableFileTest.java <nl> - package com.thoughtworks.go.util; <nl> - import org.junit.After; <nl> - import org.junit.Before; <nl> - import org.junit.Rule; <nl> - import org.junit.Test; <nl> - import org.junit.rules.TemporaryFolder; <nl> - import java.io.File; <nl> - import java.io.IOException; <nl> 
mmm ConfigRepoCommand.java <nl> ppp ConfigRepoCommand.java <nl> - return isUserAuthorized(); <nl> - } <nl> - private boolean isUserAuthorized() { <nl> - if (!securityService.isUserAdmin(username)) { <nl> - result.forbidden(EntityType.ConfigRepo.forbiddenToEdit(configRepo.getId(), username.getUsername()), forbidden()); <nl> 
new file <nl> ppp UpdateRequestRepresenter.java <nl> + package com.thoughtworks.go.apiv4.agents.representers; <nl> + import com.google.gson.JsonArray; <nl> + import com.google.gson.JsonElement; <nl> + import com.thoughtworks.go.api.util.HaltApiResponses; <nl> + import com.thoughtworks.go.util.TriState; <nl> 
mmm PartialConfigChangedListener.java <nl> ppp PartialConfigChangedListener.java <nl> mmm GoRepoConfigDataSourceTest.java <nl> ppp GoRepoConfigDataSourceTest.java <nl> + import com.thoughtworks.go.domain.config.Configuration; <nl> + import org.junit.Assert; <nl> - public void shouldCallPluginLoadOnCheckout_WhenMaterialInWatchList() <nl> 
mmm PipelineConfigServiceIntegrationTest.java <nl> ppp PipelineConfigServiceIntegrationTest.java <nl> - @Test <nl> - public void shouldShowPipelineConfigErrorMessageWhenPipelineConfigHasApprovalRelatedErrors() { <nl> - PipelineConfig pipeline = GoConfigMother.createPipelineConfigWithMaterialConfig(UUID.randomUUID().toString(), new DependencyMaterialConfig(pipelineConfig.name(), pipelineConfig.first().name())); <nl> 
mmm CachedGoConfig.java <nl> ppp CachedGoConfig.java <nl> - ServerHealthState state = ServerHealthState.error(INVALID_CRUISE_CONFIG_XML, GoConfigValidity.invalid(e).errorMessage(), HealthStateType.invalidConfig()); <nl> + ServerHealthState state = ServerHealthState.error(INVALID_CRUISE_CONFIG_XML, e.getMessage(), HealthStateType.invalidConfig()); <nl> 
mmm ServerConfigService.java <nl> ppp ServerConfigService.java <nl> - import org.apache.commons.lang.StringUtils; <nl> - public boolean hasAutoregisterKey() { <nl> - return StringUtils.isNotBlank(getAutoregisterKey()); <nl> - } <nl> - public Long elasticJobStarvationThreshold() { <nl> - return serverConfig().getElasticConfig().getJobStarvationTimeout(); <nl> 
mmm AccessTokensRepresenter.java <nl> ppp AccessTokensRepresenter.java <nl> - import com.thoughtworks.go.domain.AccessToken; <nl> - allTokens.forEach(token -> AccessTokenWriter.addChild(artifactStoreWriter -> AccessTokenRepresenter.toJSON(artifactStoreWriter, token, false))); <nl> + allTokens.forEach(token -> AccessTokenWriter.addChild(artifactStoreWriter -> AccessTokenRepresenter.toJSON(artifactStoreWriter, token))); <nl> 
mmm ConfigSaveValidationContext.java <nl> ppp ConfigSaveValidationContext.java <nl> + import com.thoughtworks.go.config.elastic.ClusterProfiles; <nl> + @Override <nl> + public ClusterProfiles getClusterProfiles() { <nl> + return this.getCruiseConfig().getElasticConfig().getClusterProfiles(); <nl> + } <nl> mmm ElasticProfile.java <nl> 
mmm GoPartialConfigTest.java <nl> ppp GoPartialConfigTest.java <nl> - public void shouldReturnLatestPartialAfterCheckout_AndWatchListNotEmpty() <nl> + public void shouldReturnLatestPartialAfterCheckout_AndWatchListNotEmpty() throws Exception <nl> - public void shouldReturnEmptyArray_WhenFirstParsingFailed() <nl> 
mmm MockRequestDispatcher.java <nl> ppp MockRequestDispatcher.java <nl> - package com.thoughtworks.go.spark.mocks; <nl> + package com.thoughtworks.go.http.mocks; <nl> - package com.thoughtworks.go.spark.mocks; <nl> - import org.eclipse.jgit.annotations.Nullable; <nl> + package com.thoughtworks.go.http.mocks; <nl> 
mmm User.java <nl> ppp User.java <nl> + public Username getUsername() { <nl> + return Username.valueOf(name); <nl> + } <nl> - public boolean hasViewPermissionForPipeline(String username, String pipelineName) { <nl> - return hasViewPermissionForGroup(username, groupName); <nl> + return hasViewPermissionForGroup(CaseInsensitiveString.str(username.getUsername()), groupName); <nl> 
mmm PipelineConfigServicePerformanceTest.java <nl> ppp PipelineConfigServicePerformanceTest.java <nl> - pipelineConfigService.updatePipelineConfig(user, pipelineConfig, "group", entityHashingService.md5ForEntity(pipelineConfig), result); <nl> + pipelineConfigService.updatePipelineConfig(user, pipelineConfig, entityHashingService.md5ForEntity(pipelineConfig), result); <nl> 
mmm ServerSubprocessExecutionContext.java <nl> ppp ServerSubprocessExecutionContext.java <nl> + @Override <nl> + public void setGitShallowClone(boolean value) { <nl> + systemEnvironment.set(SystemEnvironment.GO_SERVER_SHALLOW_CLONE, value); <nl> + } <nl> mmm ConfigRepoPlugin.java <nl> ppp ConfigRepoPlugin.java <nl> 
mmm AuthenticationHelper.java <nl> ppp AuthenticationHelper.java <nl> mmm DevelopmentServer.java <nl> ppp DevelopmentServer.java <nl> 
mmm Routes.java <nl> ppp Routes.java <nl> - public static final String INTERNAL_BASE = "/api/admin/internal/roles"; <nl> deleted file <nl> mmm UpdatePipelineConfigsAuthCommand.java <nl> - package com.thoughtworks.go.config.update; <nl> - import com.thoughtworks.go.config.*; <nl> - import com.thoughtworks.go.config.exceptions.EntityType; <nl> 
mmm ServerStatusService.java <nl> ppp ServerStatusService.java <nl> - public String captureServerInfo(Username username, LocalizedOperationResult result) throws IOException { <nl> - if (!securityService.isUserAdmin(username)) { <nl> - result.unauthorized(LocalizedMessage.string("UNAUTHORIZED_TO_ADMINISTER"), HealthStateType.unauthorised()); <nl> 
deleted file <nl> mmm LogConfiguratorTest.java <nl> - package com.thoughtworks.go.logging; <nl> - import org.junit.After; <nl> - import org.junit.Before; <nl> - import org.junit.Rule; <nl> - import org.junit.Test; <nl> - import org.junit.rules.TemporaryFolder; <nl> - import java.io.ByteArrayOutputStream; <nl> 
deleted file <nl> mmm SQLExecuteCallbackFactoryTest.java <nl> - package org.apache.shardingsphere.shardingjdbc.executor; <nl> - import org.apache.shardingsphere.underlying.executor.constant.ConnectionMode; <nl> - import org.apache.shardingsphere.underlying.common.database.type.DatabaseTypes; <nl> - import org.apache.shardingsphere.underlying.executor.StatementExecuteUnit; <nl> 
deleted file <nl> mmm TruncateTableExtractor.java <nl> - package io.shardingsphere.core.parsing.antlr.extractor.statement.type; <nl> - public abstract class TruncateTableExtractor extends DDLStatementExtractor { <nl> - } <nl> deleted file <nl> mmm SQLServerTruncateTableExtractor.java <nl> - package io.shardingsphere.core.parsing.antlr.extractor.statement.type.dialect.sqlserver; <nl> 
mmm SQLRewriteEngineTest.java <nl> ppp SQLRewriteEngineTest.java <nl> - assertThat(rewriteEngine.rewrite(true).toSQL(null, tableTokens, null, shardingDataSourceMetaData).getSql(), is("SELECT table_y.id FROM table_y WHERE table_y.id=?")); <nl> + assertThat(rewriteEngine.rewrite(false).toSQL(null, tableTokens, null, shardingDataSourceMetaData).getSql(), is("SELECT table_y.id FROM table_y WHERE table_y.id=?")); <nl> 
mmm SQLRouteTest.java <nl> ppp SQLRouteTest.java <nl> - assertEquals("assert default datasource name", "main", result.getRoutingResult().getRoutingUnits().getTableUnits().iterator().next().getDataSourceName()); <nl> + assertEquals("assert default datasource name", "main", result.getRoutingResult().getRoutingUnits().iterator().next().getDataSourceName()); <nl> 
deleted file <nl> mmm MySQLDistinctClauseParser.java <nl> - package io.shardingsphere.core.parsing.parser.dialect.mysql.clause; <nl> - import io.shardingsphere.core.parsing.lexer.LexerEngine; <nl> - import io.shardingsphere.core.parsing.lexer.dialect.mysql.MySQLKeyword; <nl> - import io.shardingsphere.core.parsing.lexer.token.Keyword; <nl> 
new file <nl> ppp AbstractBackendHandler.java <nl> + package io.shardingsphere.proxy.backend; <nl> + import com.google.common.base.Optional; <nl> + import io.shardingsphere.proxy.transport.mysql.constant.ServerErrorCode; <nl> + import io.shardingsphere.proxy.transport.mysql.packet.command.CommandResponsePackets; <nl> 
new file <nl> ppp BinaryResultSetRowPacket.java <nl> + package io.shardingjdbc.proxy.transport.mysql.packet.command.statement.execute; <nl> + import io.shardingjdbc.proxy.transport.mysql.packet.MySQLPacket; <nl> + import io.shardingjdbc.proxy.transport.mysql.packet.MySQLPacketPayload; <nl> + import lombok.Getter; <nl> 
mmm AbstractShardingJDBCDatabaseAndTableTest.java <nl> ppp AbstractShardingJDBCDatabaseAndTableTest.java <nl> - import org.apache.shardingsphere.shardingjdbc.jdbc.core.connection.ShardingConnection; <nl> - import org.h2.tools.RunScript; <nl> - import org.junit.AfterClass; <nl> - import java.io.InputStreamReader; <nl> 
deleted file <nl> mmm InsertNamesAndValuesAssert.java <nl> - package org.apache.shardingsphere.core.parse.integrate.asserts.insert; <nl> - import com.google.common.base.Joiner; <nl> - import org.apache.shardingsphere.core.parse.integrate.asserts.SQLStatementAssertMessage; <nl> - import org.apache.shardingsphere.core.parse.integrate.jaxb.insert.ExpectedInsertColumnsAndValues; <nl> 
deleted file <nl> mmm YamlColumnMetaData.java <nl> - package org.apache.shardingsphere.governance.core.metadata.yaml; <nl> - import lombok.Getter; <nl> - import lombok.Setter; <nl> - import org.apache.shardingsphere.infra.yaml.config.YamlConfiguration; <nl> - @Getter <nl> - @Setter <nl> - public final class YamlColumnMetaData implements YamlConfiguration { <nl> 
mmm UpdateSetWhereExtractor.java <nl> ppp UpdateSetWhereExtractor.java <nl> - import com.google.common.base.Optional; <nl> + import java.util.Map; <nl> + import org.apache.shardingsphere.core.parsing.antlr.extractor.impl.ColumnSegmentExtractor; <nl> + import org.apache.shardingsphere.core.parsing.antlr.sql.segment.column.ColumnSegment; <nl> 
mmm InlineShardingAlgorithm.java <nl> ppp InlineShardingAlgorithm.java <nl> - Closure<?> closure = new InlineExpressionParser(properties.get(ALGORITHM_EXPRESSION).toString()).evaluateClosure(); <nl> + String algorithmExpression = InlineExpressionParser.handlePlaceHolder(properties.get(ALGORITHM_EXPRESSION).toString().trim()); <nl> 
new file <nl> ppp ColumnMetaDataLoaderTest.java <nl> + package org.apache.shardingsphere.sql.parser.binder.metadata.column; <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> + import org.mockito.Mock; <nl> + import org.mockito.junit.MockitoJUnitRunner; <nl> 
mmm EncryptSQLRewriterParameterizedTest.java <nl> ppp EncryptSQLRewriterParameterizedTest.java <nl> - import org.apache.shardingsphere.infra.metadata.datasource.DataSourceMetaDatas; <nl> + import org.apache.shardingsphere.infra.metadata.datasource.DataSourcesMetaData; <nl> - return new ShardingSphereMetaData("sharding_db", mock(DataSourceMetaDatas.class), ruleSchemaMetaData); <nl> 
mmm ExecuteEventListenerTest.java <nl> ppp ExecuteEventListenerTest.java <nl> - executorEngine.execute(SQLType.DML, Collections.singleton(new StatementUnit(new SQLExecutionUnit("ds_0", new SQLUnit("insert into ...", Collections.singletonList(Collections.<Object>singletonList(1)))), statement)), new ExecuteCallback<Integer>() { <nl> 
deleted file <nl> mmm SQLServerSelect.java <nl> - package com.alibaba.druid.sql.dialect.sqlserver.ast; <nl> - import com.alibaba.druid.sql.ast.SQLExpr; <nl> - import com.alibaba.druid.sql.ast.statement.SQLSelect; <nl> - import com.alibaba.druid.sql.context.SelectSQLContext; <nl> - import com.alibaba.druid.sql.dialect.sqlserver.visitor.SQLServerASTVisitor; <nl> 
mmm SelectClauseExtractor.java <nl> ppp SelectClauseExtractor.java <nl> + import java.util.HashMap; <nl> + import org.antlr.v4.runtime.ParserRuleContext; <nl> + import org.antlr.v4.runtime.tree.ParseTree; <nl> + import org.antlr.v4.runtime.tree.TerminalNodeImpl; <nl> + import io.shardingsphere.core.parsing.antlr.sql.segment.expr.SubquerySegment; <nl> 
new file <nl> ppp TypedPropertyValue.java <nl> + package org.apache.shardingsphere.underlying.common.properties.common; <nl> + import lombok.Getter; <nl> + @Getter <nl> + public final class TypedPropertyValue { <nl> + private Object value; <nl> + public TypedPropertyValue(final TypedPropertyKey key, final String value) throws TypedPropertyValueException { <nl> 
mmm PreparedQueryShardingEngineTest.java <nl> ppp PreparedQueryShardingEngineTest.java <nl> - import org.junit.Test; <nl> - import java.sql.SQLException; <nl> - @Test(expected = SQLException.class) <nl> - public void assertWithRouteException() { <nl> - when(routingEngine.route(getParameters())).thenThrow(SQLException.class); <nl> 
mmm StreamQueryResult.java <nl> ppp StreamQueryResult.java <nl> + import org.apache.shardingsphere.core.rule.EncryptRule; <nl> - import org.apache.shardingsphere.core.strategy.encrypt.ShardingEncryptorEngine; <nl> - public StreamQueryResult(final ResultSet resultSet, final ShardingRule shardingRule, final ShardingEncryptorEngine shardingEncryptorEngine) { <nl> 
mmm GroupByCouplingResultSet.java <nl> ppp GroupByCouplingResultSet.java <nl> - groupByContexts = resultSetMergeContext.getSqlParsedResult().getGroupByContexts(); <nl> - aggregationColumns = resultSetMergeContext.getSqlParsedResult().getAggregationColumns(); <nl> + groupByContexts = resultSetMergeContext.getSqlParsedResult().getSqlContext().getGroupByContexts(); <nl> 
mmm RowDataPacket.java <nl> ppp RowDataPacket.java <nl> - import lombok.Getter; <nl> + import lombok.Data; <nl> - @Getter <nl> + @Data <nl> mmm MySQLConnector.java <nl> ppp MySQLConnector.java <nl> - import lombok.RequiredArgsConstructor; <nl> - @RequiredArgsConstructor <nl> + public MySQLConnector(final int serverId, final String host, final int port, final String username, final String password) { <nl> 
mmm SQLBuilder.java <nl> ppp SQLBuilder.java <nl> - import lombok.AccessLevel; <nl> - @Getter(AccessLevel.PRIVATE) <nl> - private boolean removeDerivedSQLToken; <nl> - private boolean hasExistedDerivedSQLToken; <nl> - public void buildSQL(final String label, final String token) { <nl> - buildSQL(label, token, false); <nl> 
mmm ClusterConfigurationYamlSwapper.java <nl> ppp ClusterConfigurationYamlSwapper.java <nl> + yamlHeartBeatConfiguration.setThreadCount(clusterConfiguration.getHeartBeat().getThreadCount()); <nl> + heartBeatConfiguration.setThreadCount(yamlConfiguration.getHeartBeat().getThreadCount()); <nl> new file <nl> 
mmm DefaultKeyword.java <nl> ppp DefaultKeyword.java <nl> + DUPLICATE, <nl> + package io.shardingsphere.core.parsing.parser.dialect.mysql.clause; <nl> + import io.shardingsphere.core.parsing.lexer.LexerEngine; <nl> + import io.shardingsphere.core.parsing.lexer.token.DefaultKeyword; <nl> + import io.shardingsphere.core.parsing.lexer.token.Keyword; <nl> 
mmm SQLParserFactory.java <nl> ppp SQLParserFactory.java <nl> + import io.shardingsphere.core.parsing.antlr.sql.statement.dcl.DCLStatement; <nl> - import io.shardingsphere.core.parsing.parser.sql.dcl.DCLStatement; <nl> - import io.shardingsphere.core.parsing.parser.sql.dcl.alter.AlterUserParserFactory; <nl> 
mmm AntlrParsingEngine.java <nl> ppp AntlrParsingEngine.java <nl> + import io.shardingsphere.core.parsing.parser.sql.SQLParser; <nl> - import lombok.AccessLevel; <nl> - import lombok.NoArgsConstructor; <nl> + import lombok.AllArgsConstructor; <nl> - @NoArgsConstructor(access = AccessLevel.PRIVATE) <nl> - public final class AntlrParsingEngine { <nl> 
mmm YamlProxyConfiguration.java <nl> ppp YamlProxyConfiguration.java <nl> + import io.shardingsphere.core.rule.ProxyAuthority; <nl> - import io.shardingsphere.core.yaml.sharding.DataSourceParameter; <nl> + import io.shardingsphere.core.rule.DataSourceParameter; <nl> - * @author zhaojun <nl> - public class YamlProxyConfiguration { <nl> 
mmm ShardingProxyClient.java <nl> ppp ShardingProxyClient.java <nl> - private static final int MAX_CONNECTIONS = RuleRegistry.getInstance().getProxyBackendSimpleDbConnections(); <nl> + private static final int MAX_CONNECTIONS = 10; <nl> - private static final int CONNECTION_TIMEOUT = RuleRegistry.getInstance().getProxyBackendConnectionTimeout(); <nl> 
mmm DDLAssertEngine.java <nl> ppp DDLAssertEngine.java <nl> - import io.shardingsphere.dbtest.config.bean.DDLSubAssert; <nl> + import io.shardingsphere.dbtest.config.bean.AssertSubDefinition; <nl> + import io.shardingsphere.dbtest.config.bean.DDLDataSetAssert; <nl> + import io.shardingsphere.dbtest.config.bean.ParameterDefinition; <nl> 
mmm EncryptConnection.java <nl> ppp EncryptConnection.java <nl> - public Statement createStatement() { <nl> + public Statement createStatement() throws SQLException { <nl> - public Statement createStatement(final int resultSetType, final int resultSetConcurrency) { <nl> + public Statement createStatement(final int resultSetType, final int resultSetConcurrency) throws SQLException { <nl> 
deleted file <nl> mmm ClientFactory.java <nl> - package com.saaavsaaa.client.zookeeper; <nl> - import com.saaavsaaa.client.untils.Listener; <nl> - import org.apache.zookeeper.Watcher; <nl> - import java.io.IOException; <nl> - public class ClientFactory { <nl> - private UsualClient client; <nl> - private String namespace; <nl> 
mmm AuthenticationYamlSwapper.java <nl> ppp AuthenticationYamlSwapper.java <nl> - import com.google.common.base.Preconditions; <nl> - import com.google.common.base.Strings; <nl> + import com.google.common.base.Function; <nl> + import com.google.common.collect.Maps; <nl> - import org.apache.shardingsphere.core.yaml.config.common.YamlAuthentication; <nl> 
new file <nl> ppp ConnectionStrictlyExecutorEngine.java <nl> + package io.shardingsphere.core.executor.type.connection; <nl> + import com.google.common.util.concurrent.ListenableFuture; <nl> + import io.shardingsphere.core.constant.SQLType; <nl> + import io.shardingsphere.core.executor.BaseStatementUnit; <nl> 
mmm ShardingMetaDataLoader.java <nl> ppp ShardingMetaDataLoader.java <nl> - import org.apache.shardingsphere.infra.metadata.schema.loader.spi.LogicMetaDataLoader; <nl> + import org.apache.shardingsphere.infra.metadata.schema.loader.spi.ShardingSphereMetaDataLoader; <nl> - public final class ShardingMetaDataLoader implements LogicMetaDataLoader<ShardingRule> { <nl> 
mmm SubquerySegment.java <nl> ppp SubquerySegment.java <nl> + public Optional<WhereSegment> getWhereSegment() { <nl> + return Optional.fromNullable(whereSegment); <nl> + } <nl> - package org.apache.shardingsphere.core.parse.antlr.extractor.impl.common.expression; <nl> + package org.apache.shardingsphere.core.parse.antlr.extractor.impl.dml; <nl> 
deleted file <nl> mmm AllHandlerTests.java <nl> - package io.shardingsphere.transaction.handler; <nl> - import org.junit.runner.RunWith; <nl> - import org.junit.runners.Suite; <nl> - import org.junit.runners.Suite.SuiteClasses; <nl> - @RunWith(Suite.class) <nl> - @SuiteClasses({ <nl> - DataSourceTransactionManagerHandlerTest.class, <nl> 
mmm ComplexRoutingEngineTest.java <nl> ppp ComplexRoutingEngineTest.java <nl> - ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration(); <nl> + ShardingRuleConfiguration shardingRuleConfig = new ShardingRuleConfiguration(); <nl> mmm TableTokenAssert.java <nl> ppp TableTokenAssert.java <nl> 
mmm ExecutorEngine.java <nl> ppp ExecutorEngine.java <nl> mmm DataSourceGsonTypeAdapter.java <nl> ppp DataSourceGsonTypeAdapter.java <nl> mmm UnsupportedSQLParsingEngineTest.java <nl> ppp UnsupportedSQLParsingEngineTest.java <nl> mmm OrchestrationMasterSlaveDataSourceBeanDefinitionParser.java <nl> ppp OrchestrationMasterSlaveDataSourceBeanDefinitionParser.java <nl> 
mmm GlobalRegistry.java <nl> ppp GlobalRegistry.java <nl> - import org.apache.shardingsphere.shardingproxy.config.yaml.YamlDataSourceParameter; <nl> + import org.apache.shardingsphere.shardingproxy.util.DataSourceParameter; <nl> - public void init(final Map<String, Map<String, YamlDataSourceParameter>> schemaDataSources, <nl> 
mmm SQL92DDLVisitor.java <nl> ppp SQL92DDLVisitor.java <nl> + import org.apache.shardingsphere.sql.parser.autogen.SQL92StatementParser.ConstraintDefinitionContext; <nl> + import org.apache.shardingsphere.sql.parser.autogen.SQL92StatementParser.DataTypeOptionContext; <nl> - import org.apache.shardingsphere.sql.parser.autogen.SQL92StatementParser.GeneratedDataTypeContext; <nl> 
mmm GovernanceSchemaContexts.java <nl> ppp GovernanceSchemaContexts.java <nl> + import com.google.common.collect.Maps; <nl> - protected abstract Map<String, DataSource> getAddedDataSources(SchemaContext oldSchemaContext, Map<String, DataSourceConfiguration> newDataSourceConfigs); <nl> + private Map<String, DataSource> getAddedDataSources(final SchemaContext oldSchemaContext, final Map<String, DataSourceConfiguration> newDataSources) { <nl> 
mmm AtomikosTransactionManagerTest.java <nl> ppp AtomikosTransactionManagerTest.java <nl> - import io.shardingsphere.core.exception.ShardingException; <nl> - import lombok.SneakyThrows; <nl> - import javax.transaction.SystemException; <nl> - import static org.mockito.Mockito.doThrow; <nl> - @SneakyThrows <nl> 
mmm AllMySQLCommandPacketTests.java <nl> ppp AllMySQLCommandPacketTests.java <nl> - import io.shardingsphere.proxy.transport.mysql.packet.command.query.text.TextResultSetRowPacketTest; <nl> - import io.shardingsphere.proxy.transport.mysql.packet.command.query.text.fieldlist.ComFieldListPacketTest; <nl> - import io.shardingsphere.proxy.transport.mysql.packet.command.query.text.query.ComQueryPacketTest; <nl> 
mmm CommonExpressionSegment.java <nl> ppp CommonExpressionSegment.java <nl> - private boolean text = false; <nl> deleted file <nl> mmm AbstractFromWhereExtractor.java <nl> - package io.shardingsphere.core.parsing.antlr.extractor.impl; <nl> - import com.google.common.base.Optional; <nl> - import com.google.common.base.Preconditions; <nl> 
mmm PreparedQueryShardingEngineTest.java <nl> ppp PreparedQueryShardingEngineTest.java <nl> - import org.junit.Test; <nl> - import java.sql.SQLException; <nl> - @Test(expected = SQLException.class) <nl> - public void assertWithRouteException() { <nl> - when(routingEngine.route(getParameters())).thenThrow(SQLException.class); <nl> 
mmm XaTransactionEvent.java <nl> ppp XaTransactionEvent.java <nl> - package io.shardingsphere.transaction.event; <nl> + package io.shardingsphere.transaction.common.event; <nl> mmm LocalTransactionEvent.java <nl> ppp LocalTransactionEvent.java <nl> - package io.shardingsphere.transaction.event; <nl> + package io.shardingsphere.transaction.common.event; <nl> 
mmm InsertValuesClauseParser.java <nl> ppp InsertValuesClauseParser.java <nl> + import io.shardingsphere.core.exception.ShardingException; <nl> + GeneratedKeyCondition result; <nl> - return new GeneratedKeyCondition(column, ((SQLPlaceholderExpression) sqlExpression).getIndex(), null); <nl> + result = new GeneratedKeyCondition(column, ((SQLPlaceholderExpression) sqlExpression).getIndex(), null); <nl> 
mmm MySQLCommandExecutor.java <nl> ppp MySQLCommandExecutor.java <nl> - synchronized (backendConnection) { <nl> - try { <nl> - backendConnection.wait(); <nl> - } catch (final InterruptedException ignored) { <nl> - } <nl> - } <nl> + backendConnection.getResourceSynchronizer().doAwait(); <nl> mmm BatchPreparedStatementExecutor.java <nl> 
mmm EncryptTableRuleConfiguration.java <nl> ppp EncryptTableRuleConfiguration.java <nl> + import lombok.AllArgsConstructor; <nl> + import lombok.NoArgsConstructor; <nl> + @NoArgsConstructor <nl> + @AllArgsConstructor <nl> mmm EncryptDataSource.java <nl> ppp EncryptDataSource.java <nl> - public final class EncryptDataSource extends AbstractUnsupportedOperationDataSource implements AutoCloseable { <nl> 
mmm JDBCExecuteWorker.java <nl> ppp JDBCExecuteWorker.java <nl> - import io.shardingsphere.proxy.transport.mysql.constant.ColumnType; <nl> - import lombok.Getter; <nl> - import java.util.concurrent.Callable; <nl> - public abstract class JDBCExecuteWorker implements Callable<CommandResponsePackets> { <nl> + public abstract class JDBCExecuteWorker { <nl> 
mmm SQLParserFactory.java <nl> ppp SQLParserFactory.java <nl> + import org.apache.shardingsphere.core.parsing.lexer.dialect.postgresql.PostgreSQLKeyword; <nl> + if (DatabaseType.PostgreSQL == dbType && PostgreSQLKeyword.SHOW == tokenType) { <nl> + return new AntlrParsingEngine(dbType, sql, shardingRule, shardingTableMetaData); <nl> 
mmm AllYamlTests.java <nl> ppp AllYamlTests.java <nl> + import org.apache.shardingsphere.core.yaml.sharding.YamlEncryptorConfigurationTest; <nl> - YamlMasterSlaveRuleConfigurationTest.class <nl> + YamlMasterSlaveRuleConfigurationTest.class, <nl> + YamlEncryptorConfigurationTest.class <nl> new file <nl> ppp ShardingEncryptorStrategyTest.java <nl> 
mmm SQLRewriteEngine.java <nl> ppp SQLRewriteEngine.java <nl> - import org.apache.shardingsphere.core.rewrite.SQLBuilder; <nl> + import org.apache.shardingsphere.core.rewrite.builder.SQLBuilder; <nl> - public interface SQLRewriteEngine { <nl> + public abstract class SQLRewriteEngine { <nl> - SQLBuilder rewrite(); <nl> 
mmm PostgreSQLParser.java <nl> ppp PostgreSQLParser.java <nl> + import com.dangdang.ddframe.rdb.sharding.api.rule.ShardingRule; <nl> - import com.dangdang.ddframe.rdb.sharding.api.rule.ShardingRule; <nl> - import java.util.List; <nl> - public PostgreSQLParser(final String sql, final ShardingRule shardingRule, final List<Object> parameters) { <nl> 
mmm TopAndRowNumberDecoratorMergedResultTest.java <nl> ppp TopAndRowNumberDecoratorMergedResultTest.java <nl> - import org.apache.shardingsphere.core.metadata.table.TableMetaData; <nl> - new GroupBy(Collections.<OrderByItem>emptyList(), 0), new OrderBy(Collections.<OrderByItem>emptyList(), false), new SelectItems(0, 0, false, Collections.<SelectItem>emptyList(), Collections.<String, TableMetaData>emptyMap()), <nl> 
mmm CommonSelectItem.java <nl> ppp CommonSelectItem.java <nl> - * @author sunbufu <nl> - private final String owner; <nl> - private final String name; <nl> + private final String expression; <nl> - @Override <nl> - public final String getExpression() { <nl> - return null == owner ? name : owner + "." + name; <nl> 
mmm AbstractBackendHandler.java <nl> ppp AbstractBackendHandler.java <nl> - import io.shardingsphere.core.parsing.parser.dialect.mysql.statement.UseStatement; <nl> - import io.shardingsphere.shardingproxy.config.ProxyContext; <nl> - import io.shardingsphere.shardingproxy.frontend.common.FrontendHandler; <nl> 
mmm SeataATShardingTransactionManagerTest.java <nl> ppp SeataATShardingTransactionManagerTest.java <nl> + import org.apache.shardingsphere.core.execute.ShardingExecuteDataMap; <nl> + ShardingExecuteDataMap.getDataMap().clear(); <nl> + assertTrue(ShardingExecuteDataMap.getDataMap().containsKey("SEATA_TX_XID")); <nl> 
mmm ConfigCenter.java <nl> ppp ConfigCenter.java <nl> - import com.google.common.eventbus.Subscribe; <nl> + import org.apache.shardingsphere.infra.callback.governance.DataSourceCallback; <nl> + import org.apache.shardingsphere.infra.callback.governance.RuleCallback; <nl> + import org.apache.shardingsphere.infra.callback.governance.SchemaNameCallback; <nl> 
mmm ShowTablesMergedResult.java <nl> ppp ShowTablesMergedResult.java <nl> - if (shardingMetaData.getTableMetaDataMap().keySet().contains(actualTableName)) { <nl> + if (shardingMetaData.getTableMetaDataMap().keySet().contains(actualTableName) && tableNames.add(actualTableName)) { <nl> - } else if (!shardingMetaData.isSupportedDatabaseType()) { <nl> 
mmm ShardingDatabasesConfigurationPrecise.java <nl> ppp ShardingDatabasesConfigurationPrecise.java <nl> + import java.util.LinkedList; <nl> + shardingRuleConfig.getBroadcastTables().add("t_address"); <nl> mmm LocalShardingDatabasesAndTablesConfiguration.java <nl> ppp LocalShardingDatabasesAndTablesConfiguration.java <nl> 
mmm SchemaContext.java <nl> ppp SchemaContext.java <nl> - package org.apache.shardingsphere.infra.context; <nl> + package org.apache.shardingsphere.kernal.context; <nl> + import org.apache.shardingsphere.kernal.context.runtime.RuntimeContext; <nl> - import org.apache.shardingsphere.infra.context.runtime.RuntimeContext; <nl> 
mmm AbstractConnectionAdapter.java <nl> ppp AbstractConnectionAdapter.java <nl> + import java.util.HashMap; <nl> - import java.util.concurrent.CopyOnWriteArrayList; <nl> - private final Collection<Connection> cachedConnections = new CopyOnWriteArrayList<>(); <nl> + private final Map<String, Connection> cachedConnections = new HashMap<>(); <nl> 
mmm BatchPreparedStatementExecutor.java <nl> ppp BatchPreparedStatementExecutor.java <nl> + import io.shardingsphere.core.executor.threadlocal.ExecutorDataMap; <nl> + import io.shardingsphere.core.executor.threadlocal.ExecutorExceptionHandler; <nl> - return accumulate(executorEngine.execute(sqlType, batchPreparedStatementUnits, new ExecuteCallback<int[]>() { <nl> 
mmm Bootstrap.java <nl> ppp Bootstrap.java <nl> + private static final String PORT_KEY = "shardingsphere.port"; <nl> + System.setProperty(PORT_KEY, String.valueOf(port)); <nl> - ProxyConfiguration proxyConfiguration = converter.convert(shardingConfig, String.valueOf(port)); <nl> + ProxyConfiguration proxyConfiguration = converter.convert(shardingConfig); <nl> 
mmm MySQLBackendHandler.java <nl> ppp MySQLBackendHandler.java <nl> + import com.google.common.collect.Maps; <nl> + import java.util.Map; <nl> - package io.shardingsphere.proxy.transport.mysql.packet.command.text.fieldlist; <nl> - import io.shardingsphere.core.constant.DatabaseType; <nl> - import io.shardingsphere.core.constant.ShardingConstant; <nl> 
mmm EncryptSQLRewriteEngine.java <nl> ppp EncryptSQLRewriteEngine.java <nl> + import org.apache.shardingsphere.core.rewrite.placeholder.SelectItemsPlaceholder; <nl> - appendItemsToken(sqlBuilder, (SelectItemsToken) each, count); <nl> + appendSelectItemsPlaceholder(sqlBuilder, (SelectItemsToken) each, count); <nl> 
new file <nl> ppp SQLServerDataSourceMetaDataTest.java <nl> + package io.shardingsphere.core.metadata.datasource.dialect; <nl> + import io.shardingsphere.core.exception.ShardingException; <nl> + import org.junit.Test; <nl> + import static org.hamcrest.CoreMatchers.is; <nl> + import static org.junit.Assert.assertThat; <nl> 
mmm SQLStatementCounterMetricsTrackerTest.java <nl> ppp SQLStatementCounterMetricsTrackerTest.java <nl> - import static org.junit.Assert.assertEquals; <nl> - assertEquals(tracker.metricsLabel(), MetricsLabelEnum.SQL_STATEMENT_COUNT.getName()); <nl> - assertEquals(tracker.metricsType(), MetricsTypeEnum.COUNTER.name()); <nl> 
new file <nl> ppp DerivedAlias.java <nl> + package io.shardingsphere.core.parsing.parser.constant; <nl> + import lombok.AccessLevel; <nl> + import lombok.RequiredArgsConstructor; <nl> + @RequiredArgsConstructor(access = AccessLevel.PRIVATE) <nl> + public enum DerivedAlias { <nl> + AGGREGATION_DISTINCT_DERIVED("AGGREGATION_DISTINCT_DERIVED_"); <nl> 
new file <nl> ppp MemoryStrictlyStatementExecutor.java <nl> + package io.shardingsphere.core.executor.statement; <nl> + import io.shardingsphere.core.constant.SQLType; <nl> + import io.shardingsphere.core.executor.sql.SQLExecuteCallback; <nl> + import io.shardingsphere.core.executor.sql.SQLExecuteTemplate; <nl> 
mmm BaseDCLIntegrateTest.java <nl> ppp BaseDCLIntegrateTest.java <nl> + import com.google.common.base.Splitter; <nl> + import com.google.common.base.Strings; <nl> + import io.shardingsphere.core.constant.DatabaseType; <nl> - import org.junit.After; <nl> + import java.sql.Connection; <nl> + import java.sql.Statement; <nl> 
mmm OracleTruncateParser.java <nl> ppp OracleTruncateParser.java <nl> - import com.dangdang.ddframe.rdb.sharding.parsing.lexer.token.Keyword; <nl> - @Override <nl> - protected Keyword[] getSkipWordsBetweenKeywordAndTableName() { <nl> - return new Keyword[] {}; <nl> - } <nl> mmm SQLServerCreateParser.java <nl> 
mmm EncryptRule.java <nl> ppp EncryptRule.java <nl> + public boolean isCipherColumn(final String columnName) { <nl> + Collection<String> result = new LinkedList<>(); <nl> + for (EncryptTable each : tables.values()) { <nl> + result.addAll(each.getCipherColumns()); <nl> + } <nl> + return result.contains(columnName); <nl> 
deleted file <nl> mmm PreparedQueryShardingEngineTest.java <nl> - package org.apache.shardingsphere.core.shard; <nl> - import lombok.SneakyThrows; <nl> - import org.apache.shardingsphere.core.rule.ShardingRule; <nl> - import org.apache.shardingsphere.encrypt.rule.EncryptRule; <nl> - import org.apache.shardingsphere.sql.parser.SQLParserEngine; <nl> 
deleted file <nl> mmm SqlParameter.java <nl> - package com.dangdang.ddframe.rdb.common.jaxb; <nl> - import lombok.Getter; <nl> - import lombok.Setter; <nl> - import javax.xml.bind.annotation.XmlAccessType; <nl> - import javax.xml.bind.annotation.XmlAccessorType; <nl> - import javax.xml.bind.annotation.XmlElement; <nl> 
new file <nl> ppp MariaDBXADataSourceDefinitionTest.java <nl> + package org.apache.shardingsphere.transaction.xa.jta.datasource.properties.dialect; <nl> + import org.apache.shardingsphere.core.config.DatabaseAccessConfiguration; <nl> + import org.hamcrest.CoreMatchers; <nl> + import org.junit.Test; <nl> + import java.util.Arrays; <nl> 
mmm AbstractBaseExecutorTest.java <nl> ppp AbstractBaseExecutorTest.java <nl> - import io.shardingsphere.core.executor.type.memory.MemoryStrictlyExecutorEngine; <nl> + import io.shardingsphere.core.executor.engine.memory.MemoryStrictlyExecutorEngine; <nl> mmm MemoryQueryResult.java <nl> ppp MemoryQueryResult.java <nl> 
deleted file <nl> mmm ThirdTestConfigurationRepository.java <nl> - package org.apache.shardingsphere.driver.orchestration.fixture; <nl> - import lombok.Getter; <nl> - import lombok.Setter; <nl> - import org.apache.shardingsphere.orchestration.repository.api.ConfigurationRepository; <nl> - import org.apache.shardingsphere.orchestration.repository.api.config.OrchestrationRepositoryConfiguration; <nl> 
new file <nl> ppp ExtractorRuleDefinitionTest.java <nl> + package org.apache.shardingsphere.core.parse.rule.registry.extractor; <nl> + import org.apache.shardingsphere.core.parse.extractor.impl.common.schema.SchemaExtractor; <nl> + import org.apache.shardingsphere.core.parse.rule.jaxb.entity.extractor.ExtractorRuleDefinitionEntity; <nl> 
mmm HistoryDataSyncTask.java <nl> ppp HistoryDataSyncTask.java <nl> - import info.avalon566.shardingscaling.core.job.sync.executor.Event; <nl> - import info.avalon566.shardingscaling.core.job.sync.executor.EventType; <nl> - import info.avalon566.shardingscaling.core.job.sync.executor.Reporter; <nl> + import info.avalon566.shardingscaling.core.execute.executor.Event; <nl> 
mmm MasterSlavePreparedStatement.java <nl> ppp MasterSlavePreparedStatement.java <nl> - import org.apache.shardingsphere.core.route.router.masterslave.MasterSlaveRouter; <nl> + import org.apache.shardingsphere.masterslave.route.router.MasterSlaveRouter; <nl> mmm BackendConnection.java <nl> ppp BackendConnection.java <nl> 
mmm ShardingOrchestrationListenerManager.java <nl> ppp ShardingOrchestrationListenerManager.java <nl> - import org.apache.shardingsphere.orchestration.core.registrycenter.listener.StateChangedListenerManager; <nl> + import org.apache.shardingsphere.orchestration.core.registrycenter.listener.RegistryListenerManager; <nl> 
mmm RuntimeContext.java <nl> ppp RuntimeContext.java <nl> - public interface RuntimeContext extends AutoCloseable { <nl> + public interface RuntimeContext<T extends BaseRule> extends AutoCloseable { <nl> + T getRule(); <nl> - public final class ShadowRuntimeContext extends AbstractRuntimeContext { <nl> + public final class ShadowRuntimeContext extends AbstractRuntimeContext<ShadowRule> { <nl> 
mmm SpringBootConfiguration.java <nl> ppp SpringBootConfiguration.java <nl> - import org.apache.shardingsphere.core.yaml.swapper.root.RuleConfigurationsYamlSwapper; <nl> + import org.apache.shardingsphere.core.yaml.swapper.root.RuleRootConfigurationsYamlSwapper; <nl> - import org.apache.shardingsphere.shardingjdbc.spring.boot.sharding.SpringBootShardingRuleConfigurationProperties; <nl> 
new file <nl> ppp DataSourceMetaDataFactoryTest.java <nl> + package io.shardingsphere.core.metadata.datasource; <nl> + import io.shardingsphere.core.constant.DatabaseType; <nl> + import io.shardingsphere.core.metadata.datasource.dialect.H2DataSourceMetaData; <nl> + import io.shardingsphere.core.metadata.datasource.dialect.MySQLDataSourceMetaData; <nl> 
mmm FromWhereExtractor.java <nl> ppp FromWhereExtractor.java <nl> + import java.util.Collection; <nl> + import java.util.Map; <nl> + import org.antlr.v4.runtime.ParserRuleContext; <nl> - import com.google.common.base.Preconditions; <nl> - import io.shardingsphere.core.parsing.antlr.extractor.OptionalSQLSegmentExtractor; <nl> 
mmm DataSourceCallback.java <nl> ppp DataSourceCallback.java <nl> - package org.apache.shardingsphere.infra.eventbus.event; <nl> - import lombok.Getter; <nl> - import lombok.RequiredArgsConstructor; <nl> - import org.apache.shardingsphere.infra.config.DataSourceConfiguration; <nl> - import java.util.Map; <nl> 
mmm SimpleQueryShardingEngineTest.java <nl> ppp SimpleQueryShardingEngineTest.java <nl> - import org.apache.shardingsphere.core.route.SQLRouteResult; <nl> - SQLRouteResult sqlRouteResult = createSQLRouteResult(); <nl> - sqlRouteResult.getSqlStatement().setLogicSQL("SELECT 1"); <nl> - when(routingEngine.route(getSql())).thenReturn(sqlRouteResult); <nl> 
mmm TransactionEvent.java <nl> ppp TransactionEvent.java <nl> - package io.shardingsphere.core.transaction.event; <nl> + package io.shardingsphere.transaction.common.event; <nl> deleted file <nl> mmm ProxyTransactionLoader.java <nl> - package io.shardingsphere.proxy.util; <nl> - import io.shardingsphere.core.constant.TransactionType; <nl> 
new file <nl> ppp ShardingErrorLogTags.java <nl> + package org.apache.shardingsphere.opentracing.constant; <nl> + import lombok.AccessLevel; <nl> + import lombok.NoArgsConstructor; <nl> + @NoArgsConstructor(access = AccessLevel.PRIVATE) <nl> + public final class ShardingErrorLogTags { <nl> + public static final String EVENT = "event"; <nl> 
mmm OrchestrationConfiguration.java <nl> ppp OrchestrationConfiguration.java <nl> - public static final String MASTER_SLAVE = "masterslave"; <nl> - public static final String SHARDING = "sharding"; <nl> - private final String type; <nl> + private final OrchestrationType type; <nl> mmm OrchestrationShardingDataSourceBeanDefinitionParser.java <nl> 
mmm SQLServerDMLVisitor.java <nl> ppp SQLServerDMLVisitor.java <nl> - TableSegment table = (TableSegment) visit(ctx.tableName()); <nl> - result.setTable(table); <nl> - result.getAllSQLSegments().add(table); <nl> + result.setTable((TableSegment) visit(ctx.tableName())); <nl> - CollectionValue<TableSegment> tables = (CollectionValue<TableSegment>) visit(ctx.tableReferences()); <nl> 
deleted file <nl> mmm SQLBuilderTest.java <nl> - package org.apache.shardingsphere.core.rewrite.builder; <nl> - import org.apache.shardingsphere.core.parse.constant.QuoteCharacter; <nl> - import org.apache.shardingsphere.core.rewrite.token.pojo.SQLToken; <nl> - import org.apache.shardingsphere.core.rewrite.token.pojo.TableToken; <nl> 
mmm KeyGeneratorFactory.java <nl> ppp KeyGeneratorFactory.java <nl> + import com.google.common.base.Predicate; <nl> + import com.google.common.collect.Collections2; <nl> + import io.shardingsphere.core.exception.ShardingConfigurationException; <nl> + import io.shardingsphere.spi.NewInstanceServiceLoader; <nl> 
mmm DecoratorEntry.java <nl> ppp DecoratorEntry.java <nl> - public interface DecoratorEntry<T extends BaseRule> { <nl> + public interface DecoratorEntry<T extends BaseRule> extends ResultProcessEntry { <nl> - public abstract class MergeEntry { <nl> + public final class MergeEntry { <nl> - private final Collection<BaseRule> rules; <nl> 
new file <nl> ppp CreateViewStatementTestCase.java <nl> + package org.apache.shardingsphere.test.sql.parser.parameterized.jaxb.cases.domain.statement.ddl; <nl> + import org.apache.shardingsphere.test.sql.parser.parameterized.jaxb.cases.domain.statement.SQLParserTestCase; <nl> + public final class CreateViewStatementTestCase extends SQLParserTestCase { <nl> 
new file <nl> ppp ColumnExtractResult.java <nl> + package io.shardingsphere.core.parsing.antlr.extractor.statement.handler.result; <nl> + import com.google.common.base.Optional; <nl> + import lombok.Getter; <nl> + import lombok.RequiredArgsConstructor; <nl> + @RequiredArgsConstructor <nl> + @Getter <nl> + public class ColumnExtractResult implements ExtractResult{ <nl> 
new file <nl> ppp OracleOptimizerRegistry.java <nl> + package io.shardingsphere.core.parsing.antlr.optimizer.registry.dialect; <nl> + import io.shardingsphere.core.parsing.antlr.parser.SQLStatementType; <nl> + import io.shardingsphere.core.parsing.antlr.optimizer.impl.SQLStatementOptimizer; <nl> + import io.shardingsphere.core.parsing.antlr.optimizer.impl.ddl.AlterTableOptimizer; <nl> 
mmm OrchestrationShardingDataSource.java <nl> ppp OrchestrationShardingDataSource.java <nl> + import com.google.common.eventbus.Subscribe; <nl> + import io.shardingsphere.core.api.config.MasterSlaveRuleConfiguration; <nl> + import io.shardingsphere.core.event.orche.state.CircuitStateEventBusEvent; <nl> + import io.shardingsphere.core.event.orche.state.DisabledStateEventBusEvent; <nl> 
mmm ValueASTNode.java <nl> ppp ValueASTNode.java <nl> - import lombok.Getter; <nl> - import lombok.RequiredArgsConstructor; <nl> - @RequiredArgsConstructor <nl> - @Getter <nl> - public final class LiteralValue implements ASTNode { <nl> + public interface ValueASTNode<T> extends ASTNode { <nl> - private final String literal; <nl> 
new file <nl> ppp SQLVisitorFactory.java <nl> + package org.apache.shardingsphere.sql.parser.core.visitor; <nl> + import lombok.AccessLevel; <nl> + import lombok.NoArgsConstructor; <nl> + import lombok.SneakyThrows; <nl> + import org.apache.shardingsphere.spi.NewInstanceServiceLoader; <nl> + import org.apache.shardingsphere.sql.parser.api.SQLVisitor; <nl> 
new file <nl> ppp Bootstrap.java <nl> + package io.shardingsphere.shardingui; <nl> + import org.springframework.boot.SpringApplication; <nl> + import org.springframework.boot.autoconfigure.SpringBootApplication; <nl> + @SpringBootApplication <nl> + public class Bootstrap { <nl> + public static void main(final String[] args) { <nl> 
mmm ComFieldListPacket.java <nl> ppp ComFieldListPacket.java <nl> - import io.shardingsphere.proxy.backend.common.SQLPacketsBackendHandler; <nl> - public ComFieldListPacket(final int sequenceId, final int connectionId, final MySQLPacketPayload mysqlPacketPayload) { <nl> - super(sequenceId, connectionId); <nl> 
mmm OrderBy.java <nl> ppp OrderBy.java <nl> mmm AbstractBaseParseTest.java <nl> ppp AbstractBaseParseTest.java <nl> - @Getter(AccessLevel.PROTECTED) <nl> - private final String testCaseName; <nl> - this.testCaseName = testCaseName; <nl> mmm MySQLParser.java <nl> ppp MySQLParser.java <nl> mmm SelectItem.java <nl> 
mmm FixtureXATransactionManager.java <nl> ppp FixtureXATransactionManager.java <nl> - import io.shardingsphere.core.event.transaction.xa.XATransactionContext; <nl> + import io.shardingsphere.transaction.context.XATransactionContext; <nl> mmm XATransactionManager.java <nl> ppp XATransactionManager.java <nl> 
mmm TransparentSchema.java <nl> ppp TransparentSchema.java <nl> - import org.apache.shardingsphere.core.metadata.ShardingSphereMetaData; <nl> + import org.apache.shardingsphere.underlying.common.metadata.ShardingSphereMetaData; <nl> mmm PreparedQueryShardingEngineTest.java <nl> ppp PreparedQueryShardingEngineTest.java <nl> 
mmm OrchestrationShardingDataSourceFactory.java <nl> ppp OrchestrationShardingDataSourceFactory.java <nl> + public static void closeQuietly(final DataSource dataSource) { <nl> + if (dataSource instanceof OrchestrationShardingDataSource) { <nl> + ((OrchestrationShardingDataSource) dataSource).close(); <nl> 
mmm InsertOptimizeEngineTest.java <nl> ppp InsertOptimizeEngineTest.java <nl> + import io.shardingsphere.core.parsing.parser.expression.SQLNumberExpression; <nl> + import io.shardingsphere.core.parsing.parser.token.ItemsToken; <nl> + import java.util.Collections; <nl> - private InsertStatement insertStatement; <nl> 
deleted file <nl> mmm CreateViewStatementTestCase.java <nl> - package org.apache.shardingsphere.test.sql.parser.parameterized.jaxb.cases.domain.statement.ddl; <nl> - import org.apache.shardingsphere.test.sql.parser.parameterized.jaxb.cases.domain.statement.SQLParserTestCase; <nl> - public final class CreateViewStatementTestCase extends SQLParserTestCase { <nl> 
mmm Limit.java <nl> ppp Limit.java <nl> - package com.dangdang.ddframe.rdb.sharding.parsing.parser.context; <nl> + package com.dangdang.ddframe.rdb.sharding.parsing.parser.context.limit; <nl> mmm SQLRewriteEngine.java <nl> ppp SQLRewriteEngine.java <nl> - import com.dangdang.ddframe.rdb.sharding.parsing.parser.context.Limit; <nl> 
mmm SnowflakeKeyGenerator.java <nl> ppp SnowflakeKeyGenerator.java <nl> + @Getter <nl> + private final String type = "SNOWFLAKE"; <nl> mmm YamlShardingRuleConfigurationTest.java <nl> ppp YamlShardingRuleConfigurationTest.java <nl> - keyGeneratorConfiguration.setClassName(SnowflakeKeyGenerator.class.getName()); <nl> 
deleted file <nl> mmm TableMetaDataFactory.java <nl> - package io.shardingsphere.core.metadata.table; <nl> - import com.google.common.base.Function; <nl> - import com.google.common.collect.Lists; <nl> - import io.shardingsphere.core.parsing.antlr.sql.segment.definition.column.ColumnDefinitionSegment; <nl> 
mmm SubqueryConditionFiller.java <nl> ppp SubqueryConditionFiller.java <nl> - import org.apache.shardingsphere.core.parse.antlr.filler.sharding.dml.ShardingOrPredicateFiller; <nl> + import org.apache.shardingsphere.core.parse.antlr.filler.sharding.dml.OrConditionFiller; <nl> - public final class SubqueryPredicateFiller implements SQLSegmentFiller<SubqueryPredicateSegment>, ShardingRuleAwareFiller, ShardingTableMetaDataAwareFiller { <nl> 
mmm StatementExecuteWorker.java <nl> ppp StatementExecuteWorker.java <nl> - import io.shardingsphere.proxy.transport.mysql.constant.StatusFlag; <nl> - return new CommandResponsePackets(new OKPacket(1, affectedRows, lastInsertId, StatusFlag.SERVER_STATUS_AUTOCOMMIT.getValue(), 0, "")); <nl> + return new CommandResponsePackets(new OKPacket(1, affectedRows, lastInsertId)); <nl> 
deleted file <nl> mmm WorkerThreadSpec.java <nl> - package com.karumi.dexter.listener.threaddecorator; <nl> - import android.os.Handler; <nl> - import android.os.Looper; <nl> - class WorkerThreadSpec implements ThreadSpec { <nl> - private final Handler handler; <nl> - WorkerThreadSpec() { <nl> - Looper.prepare(); <nl> 
new file <nl> ppp UpsertDeParser.java <nl> + package net.sf.jsqlparser.util.deparser; <nl> + import java.util.Iterator; <nl> + import net.sf.jsqlparser.expression.Expression; <nl> + import net.sf.jsqlparser.expression.ExpressionVisitor; <nl> + import net.sf.jsqlparser.expression.operators.relational.ExpressionList; <nl> 
mmm CreateTableTest.java <nl> ppp CreateTableTest.java <nl> + @Test <nl> + public void testIssue770Using() throws JSQLParserException { <nl> + assertSqlCanBeParsedAndDeparsed("CREATE TABLE `department_region` (`ID` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '自增主键', `DEPARTMENT_ID` int(10) unsigned NOT NULL COMMENT '部门ID', PRIMARY KEY (`ID`) KEY `DISTRICT_CODE` (`DISTRICT_CODE`)  USING BTREE) ENGINE=InnoDB AUTO_INCREMENT=420 DEFAULT CHARSET=utf8", true); <nl> 
new file <nl> ppp RateLimiterMethodInterceptor.java <nl> + package io.github.resilience4j.ratpack.internal; <nl> + import com.google.inject.Provider; <nl> + import io.github.resilience4j.ratelimiter.RateLimiterConfig; <nl> + import io.github.resilience4j.ratelimiter.RateLimiterRegistry; <nl> + import io.github.resilience4j.ratelimiter.RequestNotPermitted; <nl> 
mmm SpringBootCommonTest.java <nl> ppp SpringBootCommonTest.java <nl> - import io.github.resilience4j.circuitbreaker.CircuitBreaker; <nl> - 		@Override <nl> - 		protected void createHealthIndicatorForCircuitBreaker(CircuitBreaker circuitBreaker, CircuitBreakerConfigurationProperties circuitBreakerProperties) { <nl> 
deleted file <nl> mmm AsyncRetryEventPublisherTest.java <nl> - package io.github.resilience4j.retry; <nl> - import io.github.resilience4j.test.AsyncHelloWorldService; <nl> - import io.vavr.control.Try; <nl> - import org.junit.Before; <nl> - import org.junit.Test; <nl> - import org.slf4j.Logger; <nl> - import javax.xml.ws.WebServiceException; <nl> 
mmm FriendsListFragment.java <nl> ppp FriendsListFragment.java <nl> + import org.qii.weiciyuan.support.error.WeiboException; <nl> - public CommentBean reply() { <nl> + public CommentBean reply() throws WeiboException { <nl> - String jsonData = null; <nl> - try { <nl> - jsonData = HttpUtility.getInstance().executeNormalTask(HttpMethod.Post, url, map); <nl> 
mmm PreambleGeneratorTest.java <nl> ppp PreambleGeneratorTest.java <nl> - import static com.facebook.litho.specmodels.generator.PreambleGenerator.generateSourceDelegate; <nl> - when(mDependencyInjectionHelper.hasSpecInjection()).thenReturn(true); <nl> + "  super(\"Test\");\n  final Object testObject = new TestObject();\n" <nl> 
mmm ComponentGlobalKeyWithExperimentTest.java <nl> ppp ComponentGlobalKeyWithExperimentTest.java <nl> - ComponentsConfiguration.isNestedTreeResolutionExperimentEnabled = true; <nl> + ComponentsConfiguration.isReconciliationEnabled = true; <nl> - ComponentsConfiguration.isNestedTreeResolutionExperimentEnabled = false; <nl> 
mmm MountDelegate.java <nl> ppp MountDelegate.java <nl> - import androidx.annotation.Nullable; <nl> - public interface MountDelegateTarget { <nl> - void notifyMount(MountDelegateInput input, RenderTreeNode renderTreeNode, int position); <nl> - void notifyUnmount(int position); <nl> - boolean needsRemount(); <nl> 
mmm TestMount.java <nl> ppp TestMount.java <nl> - TestMount testMountRef = mTestMount; <nl> - release(); <nl> - return testMountRef; <nl> - } <nl> - @Override <nl> - protected void release() { <nl> - super.release(); <nl> - mTestMount = null; <nl> - mContext = null; <nl> + return mTestMount; <nl> mmm TestDrawableComponent.java <nl> 
mmm LayoutStateCalculateTopsAndBottomsTest.java <nl> ppp LayoutStateCalculateTopsAndBottomsTest.java <nl> - heightSpec); <nl> + heightSpec, <nl> + LayoutState.CalculateLayoutSource.TEST); <nl> mmm LayoutStateRecyclingTest.java <nl> ppp LayoutStateRecyclingTest.java <nl> - 1, <nl> - mUnspecifiedSizeSpec); <nl> 
mmm HorizontalScrollSpec.java <nl> ppp HorizontalScrollSpec.java <nl> - import com.facebook.R; <nl> + import com.facebook.litho.R; <nl> mmm EditTextSpec.java <nl> ppp EditTextSpec.java <nl> - import com.facebook.R; <nl> + import com.facebook.litho.R; <nl> mmm ImageSpec.java <nl> ppp ImageSpec.java <nl> - import com.facebook.R; <nl> 
mmm CommonPropsHolder.java <nl> ppp CommonPropsHolder.java <nl> - public void transitionKey(@Nullable String key) { <nl> - getOrCreateOtherProps().transitionKey(key); <nl> + public void transitionKey(@Nullable String key, @Nullable String ownerKey) { <nl> + getOrCreateOtherProps().transitionKey(key, ownerKey); <nl> 
mmm DelegateMethodValidationTest.java <nl> ppp DelegateMethodValidationTest.java <nl> - new SpecMethodModel<DelegateMethod, Void>( <nl> - ImmutableList.of((Annotation) () -> OnCreateMountContent.class), <nl> - ImmutableList.of(Modifier.STATIC), <nl> - "onCreateMountContent", <nl> - new TypeSpec(ClassName.bestGuess("java.lang.MadeUpClass")), <nl> 
new file <nl> ppp ParallelTransitionSet.java <nl> + package com.facebook.litho; <nl> + import com.facebook.litho.animation.AnimationBinding; <nl> + import com.facebook.litho.animation.ParallelBinding; <nl> + import java.util.List; <nl> + public class ParallelTransitionSet extends TransitionSet { <nl> + public <T extends Transition> ParallelTransitionSet(T... children) { <nl> 
new file <nl> ppp AppearingComponent.java <nl> + package com.facebook.litho.animation; <nl> + public class AppearingComponent extends AnimatedComponent { <nl> + public AppearingComponent(String key) { <nl> + super(key); <nl> + } <nl> + @Override <nl> + public AppearingDimensionComponentProperty x() { <nl> + return new AppearingDimensionComponentProperty(this, AnimatedProperties.X); <nl> 
mmm StateGenerator.java <nl> ppp StateGenerator.java <nl> - import static com.facebook.litho.specmodels.generator.GeneratorConstants.STATE_TRANSITIONS_FIELD_NAME; <nl> - if (hasUpdateStateWithTransition(specModel)) { <nl> - methodSpec.addStatement( <nl> - "$L.$L = prevStateContainer.$L", <nl> - STATE_CONTAINER_FIELD_NAME, <nl> 
mmm ViewportManager.java <nl> ppp ViewportManager.java <nl> - private final Runnable mLastItemAttachedRunnable = <nl> - new Runnable() { <nl> - @Override <nl> - public void run() { <nl> - notifyLastItemAttached(); <nl> - } <nl> - }; <nl> - @UiThread <nl> - void notifyLastItemAttached() { <nl> - if (mViewportChangedListeners == null || mViewportChangedListeners.isEmpty()) { <nl> 
deleted file <nl> mmm TransitionTest.java <nl> - package com.facebook.litho; <nl> - import com.facebook.litho.testing.testrunner.ComponentsTestRunner; <nl> - import com.facebook.litho.Transition.TransitionType; <nl> - import com.facebook.litho.TransitionProperties.PropertyType; <nl> - import org.junit.Before; <nl> 
new file <nl> ppp ClearTextTriggerExampleComponentSpec.java <nl> + package com.facebook.samples.litho.triggers; <nl> + import com.facebook.litho.ClickEvent; <nl> + import com.facebook.litho.Column; <nl> + import com.facebook.litho.Component; <nl> + import com.facebook.litho.ComponentContext; <nl> + import com.facebook.litho.Handle; <nl> 
mmm ComponentContext.java <nl> ppp ComponentContext.java <nl> - ComponentLayout.Builder newLayoutBuilder( <nl> + InternalNode newLayoutBuilder( <nl> - final InternalNode node = <nl> - (InternalNode) component.createLayout(component.getScopedContext(), false); <nl> + final InternalNode node = component.createLayout(component.getScopedContext(), false); <nl> 
mmm Component.java <nl> ppp Component.java <nl> + private static final String DUPLICATE_MANUAL_KEY = "Component:DuplicateManualKey"; <nl> + private static final String MISMATCHING_BASE_CONTEXT = "Component:MismatchingBaseContext"; <nl> + private static final String NULL_PARENT_KEY = "Component:NullParentKey"; <nl> 
new file <nl> ppp LZ4SafeUtils.java <nl> + package org.mapdb; <nl> + import static org.mapdb.LZ4Constants.*; <nl> + import org.mapdb.DBException.LZ4Exception; <nl> + enum LZ4SafeUtils { <nl> + ; <nl> + static int hash(byte[] buf, int i) { <nl> + return LZ4Utils.hash(SafeUtils.readInt(buf, i)); <nl> + } <nl> + static int hash64k(byte[] buf, int i) { <nl> 
mmm Volume.java <nl> ppp Volume.java <nl> mmm LongConcurrentLRUMap.java <nl> ppp LongConcurrentLRUMap.java <nl> mmm Engine.java <nl> ppp Engine.java <nl> - * <p/> <nl> + * <p> <nl> - * <p/> <nl> + * <p> <nl> mmm Caches.java <nl> ppp Caches.java <nl> - * <p/> <nl> + * <p> <nl> mmm BTreeKeySerializer.java <nl> ppp BTreeKeySerializer.java <nl> 
mmm BTreeSetTest.java <nl> ppp BTreeSetTest.java <nl> - hs = new BTreeMap(engine,BTreeMap.createRootRef(engine,BTreeKeySerializer.BASIC,null,0), <nl> + hs = new BTreeMap(engine,false, <nl> + BTreeMap.createRootRef(engine,BTreeKeySerializer.BASIC,null,0), <nl> - 0, false).keySet(); <nl> + 0).keySet(); <nl> mmm HTreeSetTest.java <nl> 
deleted file <nl> mmm SerializerArrayTest.java <nl> - package org.mapdb.serializer; <nl> - import org.junit.Test; <nl> - import org.mapdb.Serializer; <nl> - import java.io.IOException; <nl> - import java.util.Arrays; <nl> - import static org.junit.Assert.assertTrue; <nl> - public class SerializerArrayTest { <nl> 
mmm DB.java <nl> ppp DB.java <nl> - catPut(name+".hashSalt",Utils.RANDOM.nextInt()), <nl> + catPut(name+".hashSalt",new Random().nextInt()), <nl> - catPut(name+".hashSalt",Utils.RANDOM.nextInt()), <nl> + catPut(name+".hashSalt",new Random().nextInt()), <nl> mmm Caches.java <nl> ppp Caches.java <nl> + import java.util.Random; <nl> 
mmm InfiniteIncrementNumberPublisher.java <nl> ppp InfiniteIncrementNumberPublisher.java <nl> mmm AsyncSubscriber.java <nl> ppp AsyncSubscriber.java <nl> mmm SyncSubscriberWhiteboxTest.java <nl> ppp SyncSubscriberWhiteboxTest.java <nl> mmm AsyncIterablePublisher.java <nl> ppp AsyncIterablePublisher.java <nl> 
mmm WildcardTypeName.java <nl> ppp WildcardTypeName.java <nl> + import javax.lang.model.type.TypeMirror; <nl> - TypeName extendsBound = TypeName.get(mirror.getExtendsBound()); <nl> - TypeName superBound = TypeName.get(mirror.getSuperBound()); <nl> - return superBound != null ? supertypeOf(superBound) : subtypeOf(extendsBound); <nl> 
mmm TestFiler.java <nl> ppp TestFiler.java <nl> - package com.squareup.javawriter; <nl> + package com.squareup.javapoet; <nl> mmm TypesTest.java <nl> ppp TypesTest.java <nl> - package com.squareup.javawriter; <nl> + package com.squareup.javapoet; <nl> mmm JavaWriter.java <nl> ppp JavaWriter.java <nl> - package com.squareup.javawriter; <nl> 
mmm TypeSpecTest.java <nl> ppp TypeSpecTest.java <nl> + "}\n"); <nl> - @Test public void annotationToString() throws Exception { <nl> - AnnotationSpec annotation = AnnotationSpec.builder(SuppressWarnings.class) <nl> - .addMember("value", "$S", "unused") <nl> - .build(); <nl> - assertThat(annotation.toString()).isEqualTo("@java.lang.SuppressWarnings(\"unused\")"); <nl> 
deleted file <nl> mmm ActivityRuntimeOption.java <nl> - package com.yanzhenjie.permission.runtime.option; <nl> - import com.yanzhenjie.permission.runtime.setting.SettingRequest; <nl> - public interface ActivityRuntimeOption extends RuntimeOption { <nl> - SettingRequest setting(); <nl> - }diff --git a/data/zhouhj/data5/AndPermission_git/188/old/Boot.java b/data/zhouhj/data5/AndPermission_git/188/new/Boot.java <nl> 
mmm MainActivity.java <nl> ppp MainActivity.java <nl> - Nammu.askForPermission(MainActivity.this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, permissionReadstorageCallback); <nl> + Nammu.askForPermission(MainActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE, permissionReadstorageCallback); <nl> 
mmm TestDDLWithRemoteMetastoreSecondNamenode.java <nl> ppp TestDDLWithRemoteMetastoreSecondNamenode.java <nl> - executeQuery("CREATE TABLE " + tableName + (baseTable == null ? <nl> + executeQuery("CREATE EXTERNAL TABLE " + tableName + (baseTable == null ? <nl> + buildLocationClause(tableLocation)); <nl> mmm TestCatalogNonDefaultClient.java <nl> 
mmm AbstractInstanceRegistry.java <nl> ppp AbstractInstanceRegistry.java <nl> - Object[] args = { <nl> - instanceInfo.getStatus().name(), <nl> - instanceInfo.getOverriddenStatus().name(), <nl> - instanceInfo.getId() <nl> - }; <nl> - + "Hence setting the status to overridden status", args); <nl> + + "Hence setting the status to overridden status", instanceInfo.getStatus().name(), <nl> 
mmm Jersey2TransportClientFactories.java <nl> ppp Jersey2TransportClientFactories.java <nl> - import java.util.Optional; <nl> - import javax.net.ssl.HostnameVerifier; <nl> - import javax.net.ssl.SSLContext; <nl> - return newTransportClientFactory(clientConfig, additionalFilters, myInstanceInfo, Optional.empty(), Optional.empty()); <nl> 
mmm DefaultEurekaClientConfig.java <nl> ppp DefaultEurekaClientConfig.java <nl> - import java.util.LinkedHashMap; <nl> - import java.util.Map; <nl> mmm InstanceInfo.java <nl> ppp InstanceInfo.java <nl> + * <nl> + * @param hostName <nl> + *            the host name of the instance. <nl> + * @return the {@link InstanceInfo} builder. <nl> 
mmm DefaultEurekaClientConfig.java <nl> ppp DefaultEurekaClientConfig.java <nl> - import com.netflix.discovery.converters.CodecWrapper.CodecType; <nl> - public String getJsonCodecName() { <nl> + public String getEncoderName() { <nl> - namespace + "jsonCodecName", null).get(); <nl> + namespace + "encoderName", null).get(); <nl> 
mmm FlexibleSpaceToolbarScrollViewActivity.java <nl> ppp FlexibleSpaceToolbarScrollViewActivity.java <nl> - import android.content.res.TypedArray; <nl> - import android.support.v7.app.ActionBarActivity; <nl> - import android.util.TypedValue; <nl> - public class FlexibleSpaceToolbarScrollViewActivity extends ActionBarActivity implements ObservableScrollViewCallbacks { <nl> 
mmm Vector.java <nl> ppp Vector.java <nl> - import java.applet.Applet; <nl> - import java.applet.AudioClip; <nl> - import java.net.MalformedURLException; <nl> + import javax.sound.sampled.LineListener; <nl> + import javax.sound.sampled.LineEvent; <nl> + private static final int MONO   = 1; <nl> + private static final int STEREO = 2; <nl> 
mmm ClassGen.java <nl> ppp ClassGen.java <nl> + 			if(f.getAttributes().contains(AttributeFlag.DONT_GENERATE)) { <nl> + 				continue; <nl> + 			} <nl> mmm TestStringBuilderElimination.java <nl> ppp TestStringBuilderElimination.java <nl> + import org.junit.Test; <nl> + 	@Test <nl> mmm MethodNode.java <nl> ppp MethodNode.java <nl> 
mmm ClassInfo.java <nl> ppp ClassInfo.java <nl> + 		} else { <nl> + 			this.alias = null; <nl> mmm CacheObject.java <nl> ppp CacheObject.java <nl> + import jadx.gui.jobs.RefreshJob; <nl> + 	private RefreshJob refreshJob; <nl> + 	public RefreshJob getRefreshJob() { <nl> + 		return refreshJob; <nl> + 	} <nl> + 	public void setRefreshJob(RefreshJob refreshJob) { <nl> 
mmm JadxDecompiler.java <nl> ppp JadxDecompiler.java <nl> + 	JavaMethod getJavaMethodByNode(MethodNode mth) { <nl> + 		JavaMethod javaMethod = methodsMap.get(mth); <nl> + 		if (javaMethod != null) { <nl> + 			return javaMethod; <nl> + 		} <nl> + 		JavaClass javaClass = classesMap.get(mth.getParentClass()); <nl> 
mmm RegionMakerVisitor.java <nl> ppp RegionMakerVisitor.java <nl> - 					IfRegion ifregion = (IfRegion) region; <nl> - 					IContainer elsRegion = ifregion.getElseRegion(); <nl> - 					if (elsRegion instanceof IfRegion) { <nl> - 						elsRegion.getAttributes().add(AttributeFlag.ELSE_IF_CHAIN); <nl> - 					} else if (elsRegion instanceof Region) { <nl> 
mmm ClassCodeContentPanel.java <nl> ppp ClassCodeContentPanel.java <nl> - 	public CodePanel getJavaCodePanel() { <nl> - 		return javaCodePanel; <nl> - 	} <nl> mmm SearchDialog.java <nl> ppp SearchDialog.java <nl> - 		resultsTable.setEnabled(true); <nl> - 		resultsTable.setEnabled(false); <nl> mmm JClass.java <nl> 
new file <nl> ppp JNodeCache.java <nl> + package jadx.gui.utils; <nl> + import jadx.api.JavaClass; <nl> + import jadx.api.JavaField; <nl> + import jadx.api.JavaMethod; <nl> + import jadx.api.JavaNode; <nl> + import jadx.core.utils.exceptions.JadxRuntimeException; <nl> + import jadx.gui.treemodel.JClass; <nl> 
mmm NClass.java <nl> ppp NClass.java <nl> - 	private int id; <nl> + 	private final int id; <nl> - 	public void setId(int id) { <nl> - 		this.id = id; <nl> - 	} <nl> mmm IntegrationTest.java <nl> ppp IntegrationTest.java <nl> - 			try { <nl> - 				invoke("check"); <nl> - 			} catch (InvocationTargetException ie) { <nl> 
mmm NullnessPropagationTransferCases6.java <nl> ppp NullnessPropagationTransferCases6.java <nl> - public static class HasStaticFields { <nl> + static class HasStaticFields { <nl> deleted file <nl> mmm EndPosMap7.java <nl> - package com.google.errorprone; <nl> - import com.sun.tools.javac.tree.JCTree; <nl> - import com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition; <nl> 
mmm CheckReturnValueTest.java <nl> ppp CheckReturnValueTest.java <nl> + "   org.junit.Assert.assertThrows(IllegalStateException.class, foo::f);", <nl> mmm CheckReturnValueNegativeCases.java <nl> ppp CheckReturnValueNegativeCases.java <nl> + private void callRunnable(Runnable runnable) { <nl> + runnable.run(); <nl> 
new file <nl> ppp IncompatibleArgumentTypeMultimapIntegration.java <nl> + package com.google.errorprone.bugpatterns.collectionincompatibletype.testdata; <nl> + import com.google.errorprone.annotations.CompatibleWith; <nl> + public class IncompatibleArgumentTypeMultimapIntegration { <nl> + interface Multimap<K, V> { <nl> 
mmm InjectMatchers.java <nl> ppp InjectMatchers.java <nl> + import static com.google.errorprone.matchers.ChildMultiMatcher.MatchType.AT_LEAST_ONE; <nl> + import static com.google.errorprone.matchers.Matchers.annotations; <nl> + private static final Matcher<Tree> DAGGER_COMPONENT_MATCHER = <nl> + anyOf(hasAnnotation("dagger.Component"), hasAnnotation("dagger.Subcomponent")); <nl> 
mmm DescribingMatcher.java <nl> ppp DescribingMatcher.java <nl> + protected final BugPattern annotation; <nl> - BugPattern annotation = this.getClass().getAnnotation(BugPattern.class); <nl> + annotation = this.getClass().getAnnotation(BugPattern.class); <nl> + " not annotated with @BugPattern"); <nl> + diagnosticMessage = getCustomDiagnosticMessage(); <nl> 
mmm ScannerSupplierTest.java <nl> ppp ScannerSupplierTest.java <nl> + import com.google.errorprone.ErrorProneJavaCompilerTest; <nl> - ScannerSupplier ss = ScannerSupplier.fromBugCheckers(new ArrayEquals()); <nl> + ScannerSupplier ss = ScannerSupplier.fromBugCheckers( <nl> + new ErrorProneJavaCompilerTest.UnsuppressibleArrayEquals()); <nl> 
mmm Suppliers.java <nl> ppp Suppliers.java <nl> + import com.google.common.base.Function; <nl> + import com.google.common.collect.ImmutableList; <nl> + import com.google.common.collect.Iterables; <nl> + public static final Supplier<Type> STRING_TYPE = <nl> + new Supplier<Type>() { <nl> + @Override <nl> + public Type get(VisitorState state) { <nl> 
mmm OrderingFrom.java <nl> ppp OrderingFrom.java <nl> - import static com.google.errorprone.bugpatterns.BugChecker.MethodInvocationTreeMatcher; <nl> - import static com.google.errorprone.matchers.Matchers.*; <nl> + import static com.google.errorprone.matchers.Matchers.allOf; <nl> + import static com.google.errorprone.matchers.Matchers.argument; <nl> 
deleted file <nl> mmm IndexedPosition7.java <nl> - package com.google.errorprone.fixes; <nl> - import com.sun.tools.javac.tree.JCTree; <nl> - import java.util.Map; <nl> - public class IndexedPosition7 extends AbstractIndexedPosition { <nl> - public IndexedPosition7(int startPos, int endPos) { <nl> - super(startPos, endPos); <nl> 
mmm RoboListActivity.java <nl> ppp RoboListActivity.java <nl> + import roboguice.inject.RoboInjector; <nl> - import com.google.inject.Injector; <nl> - final Injector injector = RoboGuice.getInjector(this); <nl> + final RoboInjector injector = RoboGuice.getInjector(this); <nl> - injector.injectMembers(this); <nl> 
mmm RoboActivityGroup.java <nl> ppp RoboActivityGroup.java <nl> + import android.content.Context; <nl> + import android.util.AttributeSet; <nl> + import android.view.View; <nl> + @Override <nl> + public View onCreateView(String name, Context context, AttributeSet attrs) { <nl> + if (name.indexOf('.') != -1) <nl> 
mmm PhotoDTO.java <nl> ppp PhotoDTO.java <nl> + private String location; <nl> + private String description; <nl> mmm CommentController.java <nl> ppp CommentController.java <nl> - import run.halo.app.model.params.PostCommentParam; <nl> + import run.halo.app.model.params.CommentParam; <nl> + @GetMapping("{menuId:\\d+}") <nl> 
mmm TencentCosProperties.java <nl> ppp TencentCosProperties.java <nl> - public enum TencentYunProperties implements PropertyEnum { <nl> + public enum TencentCosProperties implements PropertyEnum { <nl> - public enum QnYunProperties implements PropertyEnum { <nl> + public enum QiniuOssProperties implements PropertyEnum { <nl> 
mmm HaloConfiguration.java <nl> ppp HaloConfiguration.java <nl> mmm UserController.java <nl> ppp UserController.java <nl> mmm PostModel.java <nl> ppp PostModel.java <nl> - import java.util.Optional; <nl> - ThemeService themeService, <nl> - PostCategoryService postCategoryService, <nl> - CategoryService categoryService, <nl> 
mmm InstallController.java <nl> ppp InstallController.java <nl> + import cc.ryanc.halo.model.enums.BlogProperties; <nl> + import cn.hutool.core.date.DateUtil; <nl> - final Map<String, String> options = new HashMap<>(); <nl> - optionService.saveOptions(options); <nl> + final Map<BlogProperties, Object> options = new HashMap<>(); <nl> 
mmm CommentController.java <nl> ppp CommentController.java <nl> - import cc.ryanc.halo.model.dto.JsonResult; <nl> - import cn.hutool.core.util.StrUtil; <nl> + import org.apache.commons.lang3.StringUtils; <nl> - import org.springframework.web.bind.annotation.*; <nl> + import org.springframework.web.bind.annotation.GetMapping; <nl> 
mmm SheetCommentController.java <nl> ppp SheetCommentController.java <nl> - public List<SheetCommentWithSheetVO> listLatest(@RequestParam(name = "top", defaultValue = "10") int top) { <nl> - Page<SheetComment> sheetCommentPage = sheetCommentService.pageLatest(top); <nl> + public List<SheetCommentWithSheetVO> listLatest(@RequestParam(name = "top", defaultValue = "10") int top, <nl> 
mmm BaseCommentParam.java <nl> ppp BaseCommentParam.java <nl> - @NotBlank(message = "评论者名称不能为空") <nl> - @Size(max = 50, message = "Length of comment author name must not be more than {max}") <nl> + @NotBlank(message = "评论者昵称不能为空") <nl> + @Size(max = 50, message = "评论者昵称的字符长度不能超过 {max}") <nl> - @Size(max = 255, message = "邮箱的长度不能超过 {max}") <nl> 
mmm RenderableShadowNode.java <nl> ppp RenderableShadowNode.java <nl> - paint.setFlags(Paint.ANTI_ALIAS_FLAG); <nl> + paint.setFlags(Paint.ANTI_ALIAS_FLAG | Paint.DEV_KERN_TEXT_FLAG | Paint.SUBPIXEL_TEXT_FLAG); <nl> - paint.setFlags(Paint.ANTI_ALIAS_FLAG); <nl> + paint.setFlags(Paint.ANTI_ALIAS_FLAG | Paint.DEV_KERN_TEXT_FLAG | Paint.SUBPIXEL_TEXT_FLAG); <nl> 
mmm SvgViewShadowNode.java <nl> ppp SvgViewShadowNode.java <nl> + import java.util.Stack; <nl> 
mmm SvgViewShadowNode.java <nl> ppp SvgViewShadowNode.java <nl> - import com.facebook.react.uimanager.ReactShadowNodeImpl; <nl> - private String mbbWidth; <nl> - private String mbbHeight; <nl> - private Matrix mInvViewBoxMatrix = new Matrix(); <nl> - private boolean mInvertible = true; <nl> + private Matrix mViewBoxMatrix; <nl> 
mmm ModelWithPrivateViewClickListener_.java <nl> ppp ModelWithPrivateViewClickListener_.java <nl> - if (super.getClickListener() instanceof WrappedEpoxyModelClickListener) { <nl> - ((com.airbnb.epoxy.WrappedEpoxyModelClickListener) super.getClickListener()).bind(holder, object); <nl> - } <nl> - super.setClickListener(new WrappedEpoxyModelClickListener(this, clickListener)); <nl> 
mmm ModelWithSuperAttributes_.java <nl> ppp ModelWithSuperAttributes_.java <nl> - if (!(o instanceof ModelWithSuperAttributes)) { <nl> + if (!(o instanceof ModelWithSuperAttributes_)) { <nl> mmm ModelWithSuper_.java <nl> ppp ModelWithSuper_.java <nl> - if (!(o instanceof ModelWithSuper)) { <nl> + if (!(o instanceof ModelWithSuper_)) { <nl> 
new file <nl> ppp ConfigurationTest.java <nl> + package com.alicp.jetcache.anno.inittestbeans; <nl> + import org.springframework.context.annotation.Bean; <nl> + import org.springframework.context.annotation.Configuration; <nl> + @Configuration <nl> + public class ConfigurationTest { <nl> + @Bean <nl> + public InitTestBean postConstructorTest() { <nl> 
mmm KryoValueDecoder.java <nl> ppp KryoValueDecoder.java <nl> - public static final KryoValueDecoder INSTANCE = new KryoValueDecoder(); <nl> + public static final KryoValueDecoder INSTANCE = new KryoValueDecoder(true); <nl> + public KryoValueDecoder(boolean useIdentityNumber) { <nl> + super(useIdentityNumber); <nl> 
mmm TrafficChangeWithNodeOrderingReusingTest.java <nl> ppp TrafficChangeWithNodeOrderingReusingTest.java <nl> - import com.graphhopper.storage.*; <nl> + import com.graphhopper.storage.CHGraph; <nl> + import com.graphhopper.storage.CHProfile; <nl> + import com.graphhopper.storage.GraphBuilder; <nl> + import com.graphhopper.storage.GraphHopperStorage; <nl> 
mmm CGIARProvider.java <nl> ppp CGIARProvider.java <nl> - import com.graphhopper.storage.DAType; <nl> - import com.graphhopper.storage.Directory; <nl> - import com.graphhopper.storage.GHDirectory; <nl> - import com.graphhopper.util.Downloader; <nl> - import org.slf4j.Logger; <nl> - import org.slf4j.LoggerFactory; <nl> 
mmm PathBidirRefTest.java <nl> ppp PathBidirRefTest.java <nl> + import com.graphhopper.routing.weighting.FastestWeighting; <nl> - PathBidirRef pw = new PathBidirRef(g, carEncoder); <nl> + PathBidirRef pw = new PathBidirRef(g, carEncoder, new FastestWeighting(carEncoder)); <nl> - PathBidirRef pw = new PathBidirRef(g, carEncoder); <nl> 
mmm AcceptWay.java <nl> ppp AcceptWay.java <nl> + public boolean accept( Map<String, String> osmProperties ) { <nl> + boolean includeWay = false; <nl> + String value = osmProperties.get("highway"); <nl> + if (value != null) { <nl> + if (foot && footEncoder.isAllowed(osmProperties)) { <nl> + includeWay = true; <nl> 
mmm AbstractRoutingAlgorithmTester.java <nl> ppp AbstractRoutingAlgorithmTester.java <nl> - QueryGraph qGraph = QueryGraph.lookup(getGraph(ghStorage, weighting), Arrays.asList(from, to)); <nl> + QueryGraph qGraph = QueryGraph.lookup(getGraph(ghStorage, weighting), from, to); <nl> - QueryGraph qGraph = QueryGraph.lookup(getGraph(ghStorage, defaultOpts.getWeighting()), Arrays.asList(from, to)); <nl> 
mmm SpatialRuleSet.java <nl> ppp SpatialRuleSet.java <nl> - * @param currentMaxSpeed The current max speed value or -1 if no value has been set yet <nl> + * @param currentMaxSpeed The current max speed value or {@link Double#NaN} if no value has been set yet <nl> mmm OSMValueExtractorTest.java <nl> ppp OSMValueExtractorTest.java <nl> 
mmm AbstractGraphStorageTester.java <nl> ppp AbstractGraphStorageTester.java <nl> + @Test <nl> + public void testPropertiesWithNoInit() <nl> + { <nl> + graph = createGraph(); <nl> + assertEquals(0, graph.edge(0, 1).getFlags()); <nl> + assertEquals(0, graph.edge(0, 2).getDistance(), 1e-6); <nl> + } <nl> - graph.edge(0, 1, 10, carEncoder.setProperties(120, true, true)); <nl> 
mmm GraphHopper.java <nl> ppp GraphHopper.java <nl> - private void postProcessing() <nl> + protected void postProcessing() <nl> - private void initIndex() <nl> + protected void initIndex() <nl> - private void optimize() <nl> + protected void optimize() <nl> - public void prepare() <nl> + protected void prepare() <nl> 
mmm CmdArgs.java <nl> ppp CmdArgs.java <nl> - import java.io.File; <nl> + import java.util.Arrays; <nl> + { <nl> + } <nl> + { <nl> + } <nl> - Helper.loadProperties(map, new InputStreamReader(new FileInputStream( <nl> - new File(configLocation).getAbsoluteFile()), "UTF-8")); <nl> + Helper.loadProperties(map, new InputStreamReader(new FileInputStream(configLocation), "UTF-8")); <nl> 
mmm ID2LocationFullIndexTest.java <nl> ppp ID2LocationFullIndexTest.java <nl> - public class ID2LocationSimpleQTTest { <nl> + public class ID2LocationFullIndexTest { <nl> - ID2LocationIndex idx = new ID2LocationSimpleQT(ID2LocationQTTest.createSampleGraph()); <nl> - assertEquals(10, idx.findID(3.65, 1.38)); <nl> 
mmm Helper.java <nl> ppp Helper.java <nl> + public static String readString(InputStream is, String encoding) throws IOException { <nl> + InputStream in = is instanceof BufferedInputStream <nl> + ? (BufferedInputStream) is : new BufferedInputStream(is);; <nl> + try { <nl> + byte[] buffer = new byte[4096]; <nl> 
mmm SamlProtocol.java <nl> ppp SamlProtocol.java <nl> + import org.apache.http.HttpEntity; <nl> + import org.apache.http.HttpResponse; <nl> + import org.apache.http.NameValuePair; <nl> + import org.apache.http.client.HttpClient; <nl> + import org.apache.http.client.entity.UrlEncodedFormEntity; <nl> + import org.apache.http.client.methods.HttpPost; <nl> 
mmm DefaultJpaConnectionProviderFactory.java <nl> ppp DefaultJpaConnectionProviderFactory.java <nl> - updater.update(connection); <nl> + updater.update(session, connection); <nl> new file <nl> ppp ThreadLocalSessionContext.java <nl> + package org.keycloak.connections.jpa.updater.liquibase; <nl> + import org.keycloak.models.KeycloakSession; <nl> 
mmm AdminService.java <nl> ppp AdminService.java <nl> - import org.keycloak.services.resources.RealmsResource; <nl> - return Flows.forms(realm, request, uriInfo).setError(message).createErrorPage(); <nl> + return Flows.forms(realm, uriInfo).setError(message).createErrorPage(); <nl> mmm LoginFormsProvider.java <nl> 
deleted file <nl> mmm ModAuthMellonUnprotectedResource2.java <nl> - package org.keycloak.testsuite.mod_auth_mellon; <nl> - import org.keycloak.testsuite.page.AbstractPageWithInjectedUrl; <nl> - import java.net.MalformedURLException; <nl> - import java.net.URL; <nl> - public class ModAuthMellonUnprotectedResource2 extends AbstractPageWithInjectedUrl { <nl> 
mmm UserStorageProviderModel.java <nl> ppp UserStorageProviderModel.java <nl> - if (val == null) { <nl> - importEnabled = true; <nl> - } else { <nl> - importEnabled = Boolean.valueOf(val); <nl> - } <nl> + if (val == null) importEnabled = false; <nl> + importEnabled = Boolean.valueOf(val); <nl> - if (val == null) { <nl> 
mmm GetCmd.java <nl> ppp GetCmd.java <nl> + out.println("    --no-config           Don't use config file - no authentication info is loaded or saved"); <nl> - out.println("    -t, --token TOKEN     Registration access token to use"); <nl> - out.println("                          an authenticated sessions. This allows on-the-fly transient authentication that does"); <nl> 
mmm PhotozClientAuthzTestApp.java <nl> ppp PhotozClientAuthzTestApp.java <nl> + import static org.keycloak.testsuite.util.WaitUtils.waitUntilElement; <nl> - authorizationData.setPermissions(Permissions.allPermits(results, authorization, resourceServer)); <nl> + authorizationData.setPermissions(Permissions.permits(results, authorization, resourceServer.getId())); <nl> 
mmm TimePolicyProvider.java <nl> ppp TimePolicyProvider.java <nl> - private final SimpleDateFormat dateFormat; <nl> - public TimePolicyProvider() { <nl> - this.dateFormat = new SimpleDateFormat(DEFAULT_DATE_PATTERN); <nl> - } <nl> + SimpleDateFormat dateFormat = new SimpleDateFormat(DEFAULT_DATE_PATTERN); <nl> 
new file <nl> ppp SalesPostSigTransientServlet.java <nl> + package org.keycloak.testsuite.adapter.page; <nl> + import org.jboss.arquillian.container.test.api.OperateOnDeployment; <nl> + import org.jboss.arquillian.test.api.ArquillianResource; <nl> + import java.net.URL; <nl> + public class SalesPostSigTransientServlet extends SAMLServletWithLogout { <nl> 
mmm ResetCredentials.java <nl> ppp ResetCredentials.java <nl> - public void waitForInfoMessagePresent() { <nl> + public String getInfoMessage() { <nl> + return info.getText(); <nl> mmm LoginForm.java <nl> ppp LoginForm.java <nl> - import static org.keycloak.testsuite.util.WaitUtils.waitAjaxForElement; <nl> - import static org.keycloak.testsuite.util.WaitUtils.waitAjaxForElementNotPresent; <nl> 
mmm UserAttributeLDAPStorageMapperFactory.java <nl> ppp UserAttributeLDAPStorageMapperFactory.java <nl> - public class UserAttributeLDAPStorageMapperFactory extends AbstractLDAPStorageMapperFactory { <nl> + public class UserAttributeLDAPStorageMapperFactory extends AbstractLDAPStorageMapperFactory implements LDAPConfigDecorator { <nl> 
mmm UserTest.java <nl> ppp UserTest.java <nl> - import org.keycloak.testsuite.pages.ProceedPage; <nl> - @Page <nl> - protected ProceedPage proceedPage; <nl> - proceedPage.assertCurrent(); <nl> - Assert.assertThat(proceedPage.getInfo(), Matchers.containsString("Update Password")); <nl> - proceedPage.clickProceedLink(); <nl> 
new file <nl> ppp ArrayListMetric.java <nl> + package org.keycloak.testsuite.performance.metrics.impl; <nl> + import java.util.ArrayList; <nl> + import java.util.Collections; <nl> + import org.keycloak.testsuite.performance.metrics.ComputedMetric; <nl> + public class ArrayListMetric extends ArrayList<Long> implements ComputedMetric { <nl> 
mmm SAMLParserTest.java <nl> ppp SAMLParserTest.java <nl> - import org.keycloak.dom.saml.v2.assertion.AssertionType; <nl> - import org.keycloak.dom.saml.v2.assertion.NameIDType; <nl> + import java.io.IOException; <nl> + import java.util.Scanner; <nl> - @Test <nl> - public void testSaml20AuthnResponseNonAsciiNameDefaultUtf8() throws Exception { <nl> 
mmm UsersResource.java <nl> ppp UsersResource.java <nl> + import org.keycloak.services.managers.Auth; <nl> + private RealmAuth auth; <nl> - public UsersResource(RealmModel realm, TokenManager tokenManager) { <nl> + public UsersResource(RealmModel realm, RealmAuth auth, TokenManager tokenManager) { <nl> + this.auth = auth; <nl> 

mmm DeploymentTargetModifier.java <nl> ppp DeploymentTargetModifier.java <nl> + public static final String AUTH_SERVER_CURRENT = "auth-server-current"; <nl> + checkAuthServerTestDeployment(deployments, testClass); <nl> + private void checkAuthServerTestDeployment(List<DeploymentDescription> descriptions, TestClass testClass) { <nl> 
mmm AuthorizationEndpoint.java <nl> ppp AuthorizationEndpoint.java <nl> + private OIDCResponseMode parsedResponseMode; <nl> + errorResponse = checkOIDCParams(params); <nl> + if (errorResponse != null) { <nl> + return errorResponse; <nl> + } <nl> + this.parsedResponseMode = parsedResponseMode; <nl> + return null; <nl> 
mmm KeycloakUndertowAccount.java <nl> ppp KeycloakUndertowAccount.java <nl> mmm UndertowAuthenticatedActionsHandler.java <nl> ppp UndertowAuthenticatedActionsHandler.java <nl> mmm UndertowKeycloakAuthMech.java <nl> ppp UndertowKeycloakAuthMech.java <nl> mmm UndertowUserSessionManagement.java <nl> ppp UndertowUserSessionManagement.java <nl> 
mmm PolicyAdapter.java <nl> ppp PolicyAdapter.java <nl> - import java.util.LinkedList; <nl> - import java.util.List; <nl> - cacheSession.registerPolicyInvalidation(cached.getId(), cached.getName(), cached.getResourceServerId()); <nl> + cacheSession.registerPolicyInvalidation(cached.getId(), cached.getName(), cached.getResourcesIds(), cached.getResourceServerId()); <nl> 
mmm RealmModel.java <nl> ppp RealmModel.java <nl> + boolean isPasswordCredentialGrantAllowed(); <nl> + void setPasswordCredentialGrantAllowed(boolean passwordCredentialGrantAllowed); <nl> + String getEmailTheme(); <nl> + void setEmailTheme(String name); <nl> - private static final String MONGO_HOST = "keycloak.audit.mongo.host"; <nl> 
mmm RealmModel.java <nl> ppp RealmModel.java <nl> + AuthenticationFlowModel getBrowserFlow(); <nl> + void setBrowserFlow(AuthenticationFlowModel flow); <nl> + AuthenticationFlowModel getRegistrationFlow(); <nl> + void setRegistrationFlow(AuthenticationFlowModel flow); <nl> + AuthenticationFlowModel getDirectGrantFlow(); <nl> 
deleted file <nl> mmm UserMapStorageFactory.java <nl> - package org.keycloak.testsuite.federation; <nl> - import java.util.HashMap; <nl> - import org.keycloak.Config; <nl> - import org.keycloak.component.ComponentModel; <nl> - import org.keycloak.models.KeycloakSession; <nl> - import org.keycloak.models.KeycloakSessionFactory; <nl> 
mmm OAuth2Constants.java <nl> ppp OAuth2Constants.java <nl> + String ACR_VALUES = "acr_values"; <nl> mmm OIDCLoginProtocol.java <nl> ppp OIDCLoginProtocol.java <nl> + public static final String ACR_PARAM = "acr_values"; <nl> mmm OAuth2IdentityProviderConfig.java <nl> ppp OAuth2IdentityProviderConfig.java <nl> 
mmm SerializedBrokeredIdentityContext.java <nl> ppp SerializedBrokeredIdentityContext.java <nl> + import java.util.ArrayList; <nl> + import java.util.Collections; <nl> + import org.keycloak.models.Constants; <nl> + @JsonIgnore <nl> - if (entry.getKey().startsWith("user.attributes.")) { <nl> - ContextDataEntry ctxEntry = entry.getValue(); <nl> 
deleted file <nl> mmm EAP6FUSEHawtioAdapterTest.java <nl> - package org.keycloak.testsuite.adapter.example; <nl> - import org.keycloak.testsuite.arquillian.annotation.AppServerContainer; <nl> - @AppServerContainer("app-server-eap6-fuse") <nl> - public class EAP6FUSEHawtioAdapterTest extends AbstractHawtioAdapterTest { <nl> 
deleted file <nl> mmm ScriptBasedAuthenticatorTest.java <nl> - package org.keycloak.testsuite.admin.authentication; <nl> - import org.junit.Assert; <nl> - import org.junit.Test; <nl> - import org.keycloak.testsuite.ProfileAssume; <nl> - import javax.ws.rs.BadRequestException; <nl> - import java.util.HashMap; <nl> 
mmm UpdateCmd.java <nl> ppp UpdateCmd.java <nl> + out.println("    --no-config           Don't use config file - no authentication info is loaded or saved"); <nl> - out.println("    --token TOKEN         Registration access token to use"); <nl> - out.println("                          an authenticated sessions. This allows on-the-fly transient authentication that does"); <nl> 
mmm CredentialRepresentation.java <nl> ppp CredentialRepresentation.java <nl> + @Override <nl> + public int hashCode() { <nl> + final int prime = 31; <nl> + int result = 1; <nl> + result = prime * result + ((algorithm == null) ? 0 : algorithm.hashCode()); <nl> + result = prime * result + ((config == null) ? 0 : config.hashCode()); <nl> 
new file <nl> ppp SocialResource.java <nl> + package org.keycloak.social.resources; <nl> + import java.io.Serializable; <nl> + import java.net.URI; <nl> + import java.net.URISyntaxException; <nl> + import java.util.HashMap; <nl> + import java.util.Iterator; <nl> + import java.util.LinkedList; <nl> + import java.util.List; <nl> 
mmm UserModelTest.java <nl> ppp UserModelTest.java <nl> - protected void commit() { <nl> - identitySession.getTransaction().commit(); <nl> - identitySession.close(); <nl> - identitySession = factory.createSession(); <nl> - identitySession.getTransaction().begin(); <nl> - realmManager = new RealmManager(identitySession); <nl> 
deleted file <nl> mmm MigrateJsonOperation.java <nl> - package org.keycloak.subsystem.server.extension; <nl> - import java.io.IOException; <nl> - import java.nio.file.Files; <nl> - import java.nio.file.Path; <nl> - import java.nio.file.Paths; <nl> - import java.util.List; <nl> - import org.jboss.as.controller.AttributeDefinition; <nl> 
new file <nl> ppp AssertionUtilTest.java <nl> + package org.keycloak.saml.processing.core.saml.v2.util; <nl> + import static org.junit.Assert.assertFalse; <nl> + import static org.junit.Assert.assertTrue; <nl> + import java.io.ByteArrayInputStream; <nl> + import java.io.InputStream; <nl> + import java.security.cert.X509Certificate; <nl> 
mmm CredentialInputValidator.java <nl> ppp CredentialInputValidator.java <nl> + import java.util.List; <nl> + Set<String> getDisableableCredentialTypes(RealmModel realm, UserModel user); <nl> mmm UserCredentialManager.java <nl> ppp UserCredentialManager.java <nl> + import java.util.Set; <nl> - void disableCredential(RealmModel realm, UserModel user, String credentialType); <nl> 
mmm RefreshTokenTest.java <nl> ppp RefreshTokenTest.java <nl> - import org.keycloak.services.resources.TokenService; <nl> + import org.keycloak.protocol.oidc.OpenIDConnectService; <nl> - URI uri = TokenService.refreshUrl(builder).build("test"); <nl> + URI uri = OpenIDConnectService.refreshUrl(builder).build("test"); <nl> 
mmm SAMLIdentityProviderConfig.java <nl> ppp SAMLIdentityProviderConfig.java <nl> + public static final String ADD_EXTENSIONS_ELEMENT_WITH_KEY_INFO = "addExtensionsElementWithKeyInfo"; <nl> + public static final String BACKCHANNEL_SUPPORTED = "backchannelSupported"; <nl> + public static final String ENCRYPTION_PUBLIC_KEY = "encryptionPublicKey"; <nl> 
mmm RegistrationProfile.java <nl> ppp RegistrationProfile.java <nl> + import org.keycloak.provider.ProviderConfigProperty; <nl> + @Override <nl> + public String getHelpText() { <nl> + return null; <nl> + } <nl> + @Override <nl> + public List<ProviderConfigProperty> getConfigProperties() { <nl> + return null; <nl> 
mmm AuthRealm.java <nl> ppp AuthRealm.java <nl> - import org.keycloak.protocol.oidc.OIDCLoginProtocolService; <nl> - import javax.ws.rs.core.UriBuilder; <nl> + import javax.ws.rs.core.UriBuilder; <nl> + import org.keycloak.protocol.oidc.OIDCLoginProtocolService; <nl> - public URI getOIDCLogoutUrl() { <nl> - return OIDCLoginProtocolService.logoutUrl(UriBuilder.fromPath(getAuthRoot())) <nl> 
mmm LoginPage.java <nl> ppp LoginPage.java <nl> + @FindBy(id = "totp") <nl> + private WebElement totp; <nl> + public void loginTotp(String username, String password, String code) { <nl> + usernameInput.clear(); <nl> + usernameInput.sendKeys(username); <nl> + passwordInput.clear(); <nl> + passwordInput.sendKeys(password); <nl> 
mmm EventType.java <nl> ppp EventType.java <nl> - CUSTOM_REQUIRED_ACTION_ERROR(true), <nl> - EXECUTE_ACTIONS(true); <nl> + CUSTOM_REQUIRED_ACTION_ERROR(true); <nl> mmm LoginActionsService.java <nl> ppp LoginActionsService.java <nl> - if (!checks.verifyCode(code, ClientSessionModel.Action.AUTHENTICATE.name())) { <nl> 
mmm JpaUserProvider.java <nl> ppp JpaUserProvider.java <nl> + @Override <nl> + public List<UserModel> getRoleMembers(RealmModel realm, RoleModel role) { <nl> + TypedQuery<UserEntity> query = em.createNamedQuery("usersInRole", UserEntity.class); <nl> + query.setParameter("roleId", role.getId()); <nl> + List<UserEntity> results = query.getResultList(); <nl> 
mmm UserCredentialStoreManager.java <nl> ppp UserCredentialStoreManager.java <nl> + import org.keycloak.models.CredentialValidationOutput; <nl> + import org.keycloak.models.UserCredentialModel; <nl> + import org.keycloak.models.UserFederationProviderModel; <nl> + import org.keycloak.models.utils.CredentialValidation; <nl> 
new file <nl> ppp AccountLinkTest.java <nl> + package org.keycloak.testsuite.broker; <nl> + import org.jboss.arquillian.graphene.page.Page; <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> + import org.keycloak.admin.client.resource.RealmResource; <nl> + import org.keycloak.common.util.MultivaluedHashMap; <nl> 
mmm SPMetadataDescriptor.java <nl> ppp SPMetadataDescriptor.java <nl> + if (wantAuthnRequestsSigned) { <nl> + descriptor += <nl> + "        <KeyDescriptor use=\"signing\">\n" + <nl> + "                <dsig:X509Data>\n" + <nl> + "                    <dsig:X509Certificate>\n" + certificatePem + "\n" + <nl> + "                    </dsig:X509Certificate>\n" + <nl> 
mmm RealmAdminResource.java <nl> ppp RealmAdminResource.java <nl> - * @param maxResults Paging size <nl> + * @param maxResults Maximum results size (defaults to 100) <nl> + } else { <nl> + query.maxResults(Constants.DEFAULT_MAX_RESULTS); <nl> - * @param maxResults <nl> + * @param maxResults Maximum results size (defaults to 100) <nl> 
mmm StatementUtil.java <nl> ppp StatementUtil.java <nl> - if (multivalued == false) { <nl> + if (!multivalued) { <nl> mmm WildflyRequestAuthenticator.java <nl> ppp WildflyRequestAuthenticator.java <nl> - if ((next instanceof Group) == false) <nl> + if (!(next instanceof Group)) <nl> mmm Jetty9SamlSessionStore.java <nl> 
new file <nl> ppp KeycloakWebSecurityConfigurerAdapter.java <nl> + package org.keycloak.adapters.springsecurity.config; <nl> + import org.keycloak.adapters.springsecurity.AdapterDeploymentContextBean; <nl> + import org.keycloak.adapters.springsecurity.authentication.KeycloakAuthenticationEntryPoint; <nl> 
mmm RealmEntity.java <nl> ppp RealmEntity.java <nl> + @Column(name="EDIT_USERNAME_ALLOWED") <nl> + protected boolean editUsernameAllowed; <nl> + public boolean isEditUsernameAllowed() { <nl> + return editUsernameAllowed; <nl> + } <nl> + public void setEditUsernameAllowed(boolean editUsernameAllowed) { <nl> + this.editUsernameAllowed = editUsernameAllowed; <nl> 
mmm ClientSessionModel.java <nl> ppp ClientSessionModel.java <nl> - public static final String ACTION_KEY = "action_key"; <nl> mmm SamlService.java <nl> ppp SamlService.java <nl> - import org.jboss.resteasy.annotations.cache.NoCache; <nl> - import org.keycloak.services.util.CacheControlUtil; <nl> - @NoCache <nl> 
mmm AdapterTest.java <nl> ppp AdapterTest.java <nl> - SocialLinkModel socialLink = new SocialLinkModel("google", user.getLoginName()); <nl> + SocialLinkModel socialLink = new SocialLinkModel("google", "google1", user.getLoginName()); <nl> mmm ImportTest.java <nl> ppp ImportTest.java <nl> + Assert.assertEquals(socialLinkModel.getSocialUserId(), "facebook1"); <nl> 
mmm AdapterTest.java <nl> ppp AdapterTest.java <nl> - Assert.assertEquals(2, otherRealm.getUsers().size()); <nl> + Assert.assertEquals(1, otherRealm.getUsers().size()); <nl> mmm OAuthClientEntity.java <nl> ppp OAuthClientEntity.java <nl> - public class OAuthClientEntity extends AbstractMongoIdentifiableEntity implements MongoEntity { <nl> 
new file <nl> ppp ProfileHelper.java <nl> + package org.keycloak.utils; <nl> + import org.keycloak.common.Profile; <nl> + import javax.ws.rs.WebApplicationException; <nl> + import javax.ws.rs.core.Response; <nl> + public class ProfileHelper { <nl> + public static void requirePreview() { <nl> + if (!Profile.isPreviewEnabled()) { <nl> 
mmm TestingResourceProvider.java <nl> ppp TestingResourceProvider.java <nl> - import org.keycloak.testsuite.forms.PassThroughAuthenticator; <nl> - import org.keycloak.testsuite.forms.PassThroughClientAuthenticator; <nl> - import org.keycloak.testsuite.rest.representation.AuthenticatorState; <nl> - @POST <nl> 
mmm KeycloakServer.java <nl> ppp KeycloakServer.java <nl> - import org.keycloak.services.filters.ClientConnectionFilter; <nl> - @Deprecated <nl> - public class ClientConnectionFilter implements Filter { <nl> - @Override <nl> - public void init(FilterConfig filterConfig) throws ServletException { <nl> - } <nl> 
mmm MongoOAuthClientEntity.java <nl> ppp MongoOAuthClientEntity.java <nl> + import java.util.List; <nl> - public void afterRemove(MongoStoreInvocationContext invocationContext) { <nl> + public void afterRemove(MongoStoreInvocationContext context) { <nl> - .and("clientId").is(getId()) <nl> + .and("associatedClientIds").is(getId()) <nl> 
mmm CustomerDatabaseClient.java <nl> ppp CustomerDatabaseClient.java <nl> - static class TypedList extends ArrayList<String> { <nl> - } <nl> + static class TypedList extends ArrayList<String> {} <nl> - SkeletonKeySession session = (SkeletonKeySession) req.getAttribute(SkeletonKeySession.class.getName()); <nl> 
mmm ExecutionTest.java <nl> ppp ExecutionTest.java <nl> - package org.keycloak.testsuite.admin.authentication; <nl> + package org.keycloak.testsuite.authentication; <nl> mmm FlowTest.java <nl> ppp FlowTest.java <nl> - package org.keycloak.testsuite.admin.authentication; <nl> + package org.keycloak.testsuite.authentication; <nl> 
mmm LDAPIdentityStoreRegistry.java <nl> ppp LDAPIdentityStoreRegistry.java <nl> - import org.keycloak.models.LDAPConstants; <nl> + import org.keycloak.storage.ldap.mappers.LDAPConfigDecorator; <nl> - private Map<String, LDAPIdentityStoreContext> ldapStores = new ConcurrentHashMap<String, LDAPIdentityStoreContext>(); <nl> 
deleted file <nl> mmm WildflyPermissiveModeAdapterTest.java <nl> - package org.keycloak.testsuite.adapter.example.authorization; <nl> - import org.jboss.arquillian.container.test.api.RunAsClient; <nl> - import org.keycloak.testsuite.arquillian.annotation.AppServerContainer; <nl> - @RunAsClient <nl> - @AppServerContainer("app-server-wildfly") <nl> 
mmm OAuthClient.java <nl> ppp OAuthClient.java <nl> - public class LogoutUrlBuilder { <nl> - private final UriBuilder b = OIDCLoginProtocolService.logoutUrl(UriBuilder.fromUri(baseUrl)); <nl> - public LogoutUrlBuilder idTokenHint(String idTokenHint) { <nl> - if (idTokenHint != null) { <nl> - b.queryParam("id_token_hint", idTokenHint); <nl> 
mmm SetPasswordCmd.java <nl> ppp SetPasswordCmd.java <nl> + out.println("    --token               Token to use to invoke on Keycloak.  Other credential may be ignored if this flag is set."); <nl> mmm ConfigData.java <nl> ppp ConfigData.java <nl> + import com.fasterxml.jackson.annotation.JsonIgnore; <nl> + @JsonIgnore <nl> 
mmm AggregatePolicyForm.java <nl> ppp AggregatePolicyForm.java <nl> - import static org.keycloak.testsuite.util.UIUtils.performOperationWithPageReload; <nl> - import static org.openqa.selenium.By.tagName; <nl> - import java.util.List; <nl> - import java.util.function.BiFunction; <nl> - import java.util.function.Function; <nl> 
new file <nl> ppp BasePopupUnsafe.java <nl> + package razerdp.basepopup; <nl> + import android.annotation.SuppressLint; <nl> + import android.text.TextUtils; <nl> + import androidx.annotation.Nullable; <nl> + import java.util.HashMap; <nl> + import java.util.LinkedList; <nl> + import java.util.Map; <nl> + import razerdp.util.log.PopupLog; <nl> 
mmm RandomLoadBalance.java <nl> ppp RandomLoadBalance.java <nl> - public DivideUpstream select(final List<DivideUpstream> upstreamList, final String ip) { <nl> + public DivideUpstream select(final List<DivideUpstream> upstreamList) { <nl> mmm SelectorDTO.java <nl> ppp SelectorDTO.java <nl> - private Integer rank; <nl> 
mmm PluginService.java <nl> ppp PluginService.java <nl> new file <nl> ppp EnumServiceImpl.java <nl> + package org.dromara.soul.admin.service.impl; <nl> + import com.google.common.collect.Maps; <nl> + import org.dromara.soul.admin.service.EnumService; <nl> + import org.dromara.soul.admin.vo.EnumVO; <nl> + import org.dromara.soul.common.enums.*; <nl> 
mmm HystrixTest.java <nl> ppp HystrixTest.java <nl> - .andCommandPropertiesDefaults(HystrixCommandProperties.Setter().withExecutionIsolationThreadTimeoutInMilliseconds(timeout)) <nl> + .andCommandPropertiesDefaults(HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(timeout)) <nl> mmm CommandPropertiesTest.java <nl> 
mmm CommandExecutor.java <nl> ppp CommandExecutor.java <nl> - import com.netflix.hystrix.contrib.javanica.utils.FutureDecorator; <nl> - public static Object execute(HystrixExecutable executable, ExecutionType executionType, MetaHolder metaHolder) throws RuntimeException { <nl> + public static Object execute(HystrixExecutable executable, ExecutionType executionType) throws RuntimeException { <nl> 
deleted file <nl> mmm HystrixRequestEventsStream.java <nl> - package com.netflix.hystrix.contrib.reactivesocket.requests; <nl> - import com.fasterxml.jackson.core.JsonGenerator; <nl> - import com.netflix.hystrix.ExecutionResult; <nl> - import com.netflix.hystrix.HystrixEventType; <nl> - import com.netflix.hystrix.contrib.reactivesocket.BasePayloadSupplier; <nl> 
mmm HystrixCommandFactory.java <nl> ppp HystrixCommandFactory.java <nl> + import com.netflix.hystrix.HystrixInvokable; <nl> + ObservableExecutionMode observableExecutionMode() default ObservableExecutionMode.EAGER; <nl> mmm HystrixCommandAspect.java <nl> ppp HystrixCommandAspect.java <nl> + import com.netflix.hystrix.HystrixInvokable; <nl> 
deleted file <nl> mmm HystrixMetricsReactiveSocketServer.java <nl> - package com.netflix.hystrix.examples.reactivesocket; <nl> - import com.netflix.hystrix.contrib.reactivesocket.EventStreamRequestHandler; <nl> - import com.netflix.hystrix.examples.demo.HystrixCommandAsyncDemo; <nl> - import io.netty.bootstrap.ServerBootstrap; <nl> 
deleted file <nl> mmm Metric.java <nl> - package org.xbib.metrics; <nl> - public interface Metric { <nl> - } <nl> mmm MetricsLogger.java <nl> - long submitted = metric.getSubmitted().count(); <nl> - long succeeded = metric.getSucceeded().count(); <nl> - long failed = metric.getFailed().count(); <nl> + long submitted = metric.getSubmitted().getCount(); <nl> 
mmm SimpleRiverMouth.java <nl> ppp SimpleRiverMouth.java <nl> + @Override <nl> + public synchronized void release() { <nl> + try { <nl> + flush(); <nl> + } catch (IOException e) { <nl> + logger.error(e.getMessage(), e); <nl> + } <nl> + } <nl> mmm RiverContext.java <nl> ppp RiverContext.java <nl> + RiverContext shutdown(); <nl> 
new file <nl> ppp SqlserverRepository.java <nl> + package org.dromara.hmily.repository.database.sqlserver; <nl> + import lombok.extern.slf4j.Slf4j; <nl> + import org.dromara.hmily.repository.database.manager.AbstractHmilyDatabase; <nl> + import org.dromara.hmily.spi.HmilySPI; <nl> + @HmilySPI(value = "sqlserver") <nl> 
mmm MotanHmilyAccountApplication.java <nl> ppp MotanHmilyAccountApplication.java <nl> + import org.springframework.context.ConfigurableApplicationContext; <nl> + @Service("inlineService") <nl> + public class InlineServiceImpl implements InlineService { <nl> + private static final Logger LOGGER = LoggerFactory.getLogger(InlineServiceImpl.class); <nl> 
deleted file <nl> mmm SingleTaskUtil.java <nl> - package com.liulishuo.okdownload.sample.comprehensive.single; <nl> - import android.util.SparseArray; <nl> - import android.widget.TextView; <nl> - import com.liulishuo.okdownload.DownloadTask; <nl> - import com.liulishuo.okdownload.core.Util; <nl> - import com.liulishuo.okdownload.core.breakpoint.BlockInfo; <nl> 
mmm MethodDefinition.java <nl> ppp MethodDefinition.java <nl> - import org.jf.dexlib.Util.ExceptionWithContext; <nl> + import org.jf.util.ExceptionWithContext; <nl> mmm Item.java <nl> ppp Item.java <nl> - import org.jf.dexlib.Util.ExceptionWithContext; <nl> + import org.jf.util.ExceptionWithContext; <nl> mmm ReadContext.java <nl> 
mmm DexBackedMethodImplementation.java <nl> ppp DexBackedMethodImplementation.java <nl> - @Nonnull public final DexFile dexFile; <nl> + @Nonnull public final DexFileBuffer dexFile; <nl> - public DexBackedMethodImplementation(@Nonnull DexFile dexFile, <nl> + public DexBackedMethodImplementation(@Nonnull DexFileBuffer dexFile, <nl> 
mmm PanicResponderActivity.java <nl> ppp PanicResponderActivity.java <nl> + import org.shadowice.flocke.andotp.Database.Entry; <nl> - import org.shadowice.flocke.andotp.Utilities.KeyStoreHelper; <nl> + import java.util.ArrayList; <nl> - if (response.contains("accounts")) { <nl> - DatabaseHelper.wipeDatabase(this); <nl> 
mmm EntryThumbnail.java <nl> ppp EntryThumbnail.java <nl> - public static EntryThumbnails valueOfIgnoreCase(String thumbnail) { <nl> - for (EntryThumbnails entryThumbnails : values()) <nl> - if (entryThumbnails.name().equalsIgnoreCase(thumbnail)) return entryThumbnails; <nl> - throw new IllegalArgumentException(); <nl> 
mmm TikaHtmlParser.java <nl> ppp TikaHtmlParser.java <nl> mmm TLDList.java <nl> ppp TLDList.java <nl> mmm Parser.java <nl> ppp Parser.java <nl> mmm PageFetcher.java <nl> ppp PageFetcher.java <nl> mmm AuthInfo.java <nl> ppp AuthInfo.java <nl> 
new file <nl> ppp PostgresDBService.java <nl> + package edu.uci.ics.crawler4j.examples.db; <nl> + import edu.uci.ics.crawler4j.crawler.Page; <nl> + public interface PostgresDBService { <nl> + void store(Page webPage); <nl> + void close(); <nl> + }new file <nl> ppp PostgresCrawlerFactory.java <nl> + package edu.uci.ics.crawler4j.examples.crawler; <nl> 
new file <nl> ppp MemberValueVisitor.java <nl> + package javassist.bytecode.annotation; <nl> + public interface MemberValueVisitor <nl> + { <nl> + public void visitAnnotationMemberValue(AnnotationMemberValue node); <nl> + public void visitArrayMemberValue(ArrayMemberValue node); <nl> + public void visitBooleanMemberValue(BooleanMemberValue node); <nl> 
mmm TransformAccessArrayField.java <nl> ppp TransformAccessArrayField.java <nl> + import javassist.CannotCompileException; <nl> + import javassist.bytecode.MethodInfo; <nl> + import javassist.bytecode.analysis.Analyzer; <nl> + import javassist.bytecode.analysis.Frame; <nl> - public class TransformAccessArrayField extends Transformer { <nl> 
mmm JobService.java <nl> ppp JobService.java <nl> - import com.github.kfcfans.powerjob.server.akka.OhMyServer; <nl> - import com.github.kfcfans.powerjob.server.akka.requests.RunJobOrWorkflowReq; <nl> - import com.github.kfcfans.powerjob.server.persistence.core.model.AppInfoDO; <nl> - import com.github.kfcfans.powerjob.server.persistence.core.repository.AppInfoRepository; <nl> 
mmm FrequentTaskTracker.java <nl> ppp FrequentTaskTracker.java <nl> + req.setStartTime(createTime); <nl> - req.setReportTime(System.currentTimeMillis()); <nl> mmm ServerScheduleJobReq.java <nl> ppp ServerScheduleJobReq.java <nl> - private long taskTimeoutMS; <nl> - private long taskTimeoutMS; <nl> + @Data <nl> 
deleted file <nl> mmm WorkerActor.java <nl> - package com.github.kfcfans.oms.worker.actors; <nl> - import akka.actor.AbstractActor; <nl> - public class WorkerActor extends AbstractActor { <nl> - @Override <nl> - public Receive createReceive() { <nl> - return null; <nl> - } <nl> - } <nl> new file <nl> + package com.github.kfcfans.oms.worker.pojo.request; <nl> 
mmm GenericTypeDescription.java <nl> ppp GenericTypeDescription.java <nl> mmm ParameterDescription.java <nl> ppp ParameterDescription.java <nl> - import java.util.ArrayList; <nl> mmm TypeList.java <nl> ppp TypeList.java <nl> mmm MethodList.java <nl> ppp MethodList.java <nl> - }} <nl> + } <nl> + } <nl> mmm GenericTypeList.java <nl> 
mmm RecordComponentDescription.java <nl> ppp RecordComponentDescription.java <nl> + import net.bytebuddy.build.CachedReturnPlugin; <nl> + @CachedReturnPlugin.Enhance <nl> mmm TypePool.java <nl> ppp TypePool.java <nl> + @CachedReturnPlugin.Enhance <nl> mmm MethodDescription.java <nl> ppp MethodDescription.java <nl> 
mmm TypeExtensionDelegate.java <nl> ppp TypeExtensionDelegate.java <nl> - public TypeExtensionDelegate(TypeDescription instrumentedType, ClassFileVersion classFileVersion) { <nl> + public TypeExtensionDelegate(TypeDescription instrumentedType, <nl> + ClassFileVersion classFileVersion) { <nl> - String name = String.format("%s$%s$%d", specialMethodInvocation.getMethodDescription().getName(), <nl> 
mmm MethodVariableAccess.java <nl> ppp MethodVariableAccess.java <nl> - public static MethodVariableAccess forType(TypeDescription typeDescription) { <nl> + public static MethodVariableAccess of(TypeDescription typeDescription) { <nl> - List<StackManipulation> stackManipulations = new ArrayList<StackManipulation>(methodDescription.getParameters().size() * 2); <nl> 
mmm ArgumentBinderTest.java <nl> ppp ArgumentBinderTest.java <nl> - import static org.junit.Assert.assertEquals; <nl> - @Test <nl> - public void testAnnotationType() throws Exception { <nl> - assertEquals(Argument.class, Argument.Binder.INSTANCE.getHandledType()); <nl> + @Override <nl> + protected TargetMethodAnnotationDrivenBinder.ParameterBinder<Argument> getSimpleBinder() { <nl> 
mmm InlineDynamicTypeBuilder.java <nl> ppp InlineDynamicTypeBuilder.java <nl> + compiledMethodRegistry.getTypeInitializer(), <nl> mmm TypeWriterDefaultTest.java <nl> ppp TypeWriterDefaultTest.java <nl> + import net.bytebuddy.instrumentation.type.InstrumentedType; <nl> + private InstrumentedType.TypeInitializer typeInitializer; <nl> 
mmm GCEvent.java <nl> ppp GCEvent.java <nl> - private double pause; <nl> - this.pause = pause; <nl> + this.setPause(pause); <nl> - sb.append(pause); <nl> + sb.append(getPause()); <nl> - public void setPause(double pause) { <nl> - this.pause = pause; <nl> - } <nl> - public double getPause() { <nl> - return pause; <nl> 
deleted file <nl> mmm CsvSummaryExportFormatter.java <nl> - package com.tagtraum.perf.gcviewer.exp.summary; <nl> - public class CsvSummaryExportFormatter implements ISummaryExportFormatter { <nl> - 	private String separator = "; "; <nl> - 	 <nl> - 	public String formatLine(String tag, String value, String units) { <nl> 
new file <nl> ppp ObjectResult.java <nl> + package org.nlpcn.es4sql.jdbc; <nl> + import java.util.List; <nl> + public class ObjectResult { <nl> + private final List<String> headers; <nl> + private final List<List<Object>> lines; <nl> + public ObjectResult(List<String> headers, List<List<Object>> lines) { <nl> 
mmm DialogsActivity.java <nl> ppp DialogsActivity.java <nl> - import com.prolificinteractive.materialcalendarview.OnDateChangedListener; <nl> + import com.prolificinteractive.materialcalendarview.OnDateSelectedListener; <nl> - public static class SimpleCalendarDialogFragment extends DialogFragment implements OnDateChangedListener { <nl> 
mmm DialogsActivity.java <nl> ppp DialogsActivity.java <nl> - import com.prolificinteractive.materialcalendarview.OnDateChangedListener; <nl> + import com.prolificinteractive.materialcalendarview.OnDateSelectedListener; <nl> - public static class SimpleCalendarDialogFragment extends DialogFragment implements OnDateChangedListener { <nl> 
mmm SequenceMatcher.java <nl> ppp SequenceMatcher.java <nl> - *    List<T> groupNodes(), List<T> groupNodes(int g) <nl> + *    List&lt;T&gt; groupNodes(), List&lt;T&gt; groupNodes(int g) <nl> + * Functions for replacing <nl> + * <pre><code> <nl> + *    List&lt;T&gt; replaceFirst(List&lt;T&gt; seq), List replaceAll(List&lt;T&gt; seq) <nl> 
mmm Languages.java <nl> ppp Languages.java <nl> - public static enum Language {Arabic,Chinese,English,German,French,Hebrew,Spanish,UniversalEnglish,Unknown} <nl> + public static enum Language {Arabic,Chinese,English,German,French,Hebrew,Spanish,Unknown} <nl> - case UniversalEnglish: <nl> - tlpp = new EnglishTreebankParserParams(); <nl> 
deleted file <nl> mmm BasicRelationExtractor.java <nl> - package edu.stanford.nlp.ie.machinereading; <nl> - import java.io.*; <nl> - import java.util.ArrayList; <nl> - import java.util.Collections; <nl> - import java.util.List; <nl> - import java.util.Map; <nl> - import java.util.logging.Level; <nl> - import java.util.logging.Logger; <nl> 
mmm DirectedMultiGraph.java <nl> ppp DirectedMultiGraph.java <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> 
mmm NaturalLogicAnnotator.java <nl> ppp NaturalLogicAnnotator.java <nl> - for (SemanticGraphEdge edge : tree.getOutEdgesSorted(root)) { <nl> + for (SemanticGraphEdge edge : tree.outgoingEdgeIterable(root)) { <nl> mmm AnnotatorImplementations.java <nl> ppp AnnotatorImplementations.java <nl> + import edu.stanford.nlp.util.MetaClass; <nl> 
mmm IOUtils.java <nl> ppp IOUtils.java <nl> - ClassNotFoundException { <nl> - try { <nl> - ObjectInputStream ois = new ObjectInputStream(new BufferedInputStream( <nl> - new GZIPInputStream(new FileInputStream(file)))); <nl> + ClassNotFoundException { <nl> + try (ObjectInputStream ois = new ObjectInputStream(new BufferedInputStream( <nl> 
mmm StanfordCoreNLPServer.java <nl> ppp StanfordCoreNLPServer.java <nl> + import static edu.stanford.nlp.pipeline.StanfordCoreNLP.CUSTOM_ANNOTATOR_PREFIX; <nl> - if (PropertiesUtils.getBool(props, "enforceRequirements", true)) { <nl> + if (!PropertiesUtils.hasPropertyPrefix(props, CUSTOM_ANNOTATOR_PREFIX) && PropertiesUtils.getBool(props, "enforceRequirements", true)) { <nl> 
mmm LinearClassifierFactory.java <nl> ppp LinearClassifierFactory.java <nl> - import java.util.function.DoubleUnaryOperator; <nl> - import java.util.function.Function; <nl> - import edu.stanford.nlp.optimization.*; <nl> + import edu.stanford.nlp.optimization.CGMinimizer; <nl> + import edu.stanford.nlp.optimization.DiffFunction; <nl> 
deleted file <nl> mmm ApplyPatterns.java <nl> - package edu.stanford.nlp.patterns.surface; <nl> - import java.util.List; <nl> - import java.util.Set; <nl> - import java.util.Map.Entry; <nl> - import java.util.concurrent.Callable; <nl> - import java.util.regex.Pattern; <nl> - import edu.stanford.nlp.ling.CoreLabel; <nl> 
mmm CoreMapExpressionExtractor.java <nl> ppp CoreMapExpressionExtractor.java <nl> - package edu.stanford.nlp.ling.tokensregex; <nl> - import edu.stanford.nlp.io.IOUtils; <nl> - import edu.stanford.nlp.ling.CoreAnnotations; <nl> - import edu.stanford.nlp.ling.tokensregex.parser.ParseException; <nl> - import edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser; <nl> 
mmm PriorityQueue.java <nl> ppp PriorityQueue.java <nl> - SimpleNode jjtn000 = new SimpleNode(JJTTREELIST); <nl> - boolean jjtc000 = true; <nl> - jjtree.openNodeScope(jjtn000);List<AuxiliaryTree> trees = Generics.newArrayList(); <nl> - AuxiliaryTree tree; <nl> - try { <nl> - tree = TreeRoot(requiresFoot); <nl> 
mmm ScorePatterns.java <nl> ppp ScorePatterns.java <nl> + import java.lang.reflect.InvocationTargetException; <nl> - abstract Counter<SurfacePattern> score() throws IOException, InterruptedException, ExecutionException; <nl> + protected Properties props; <nl> + abstract Counter<SurfacePattern> score() throws IOException, InterruptedException, ExecutionException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException; <nl> 
mmm PTBLexer.java <nl> ppp PTBLexer.java <nl> - "\2\102\1\165\1\112\3\165\1\102\1\112\1\156\3\107\1\165\2\113"+ <nl> - "\1\113\24\113\1\165\7\113\30\112\1\165\10\112\1\113\1\112\1\113"+ <nl> + "\2\102\1\165\1\112\3\165\1\102\1\112\1\156\3\107\1\165\27\113"+ <nl> + "\1\165\7\113\30\112\1\165\10\112\1\113\1\112\1\113\1\112\1\113"+ <nl> 
mmm PTBLexer.java <nl> ppp PTBLexer.java <nl> - "\1\170\10\0\1\143\1\13\1\45\1\46\1\44\22\0\1\10\1\2"+ <nl> - "\1\12\1\35\1\106\1\165\1\14\1\135\1\150\1\151\1\154\1\76"+ <nl> - "\1\137\1\3\1\114\1\5\1\141\1\36\1\140\1\127\1\140\1\157"+ <nl> - "\4\140\1\7\1\23\1\1\1\11\1\4\1\2\1\146\1\54\1\116"+ <nl> - "\1\66\1\53\1\71\1\122\1\72\1\56\1\70\1\126\1\51\1\62"+ <nl> 
mmm LexicalizedParser.java <nl> ppp LexicalizedParser.java <nl> + import edu.stanford.nlp.parser.common.ArgUtils; <nl> + import edu.stanford.nlp.parser.common.ParserGrammar; <nl> - import edu.stanford.nlp.parser.common.ParserQueryFactory; <nl> - public class LexicalizedParser implements Function<List<? extends HasWord>, Tree>, Serializable, ParserQueryFactory { <nl> 
mmm TaggerConfig.java <nl> ppp TaggerConfig.java <nl> mmm EnglishGrammaticalRelations.java <nl> ppp EnglishGrammaticalRelations.java <nl> - "VP < (/^(?:VB|AUX)/=target < " + copularWordRegex + " [ $++ (/^(?:ADJP|NP$|WHNP$)/ !< VBN|VBD) | $++ (S <: (ADJP < JJ)) ] )", <nl> + "VP < (/^(?:VB|AUX)/=target < " + copularWordRegex + " [ $++ (/^(?:ADJP|NP$|WHNP$)/ !< (VBN|VBD !$++ /^N/)) | $++ (S <: (ADJP < JJ)) ] )", <nl> 
mmm LogLikelihoodFunction.java <nl> ppp LogLikelihoodFunction.java <nl> - public static final String VARIABLE_TRAINING_VALUE = "learning.LogLikelihoodFunction.VARIABLE_TRAINING_VALUE"; <nl> - @Override <nl> - public FunctionSummaryAtPoint getSummaryForInstance(GraphicalModel model, ConcatVector weights) { <nl> 
new file <nl> ppp IdleTransition.java <nl> + package edu.stanford.nlp.parser.shiftreduce; <nl> + public class IdleTransition implements Transition { <nl> + public boolean isLegal(State state) { <nl> + return state.finished; <nl> + } <nl> + public State apply(State state) { <nl> + return state; <nl> + } <nl> + @Override <nl> 
mmm LabeledScoredTreeReaderFactory.java <nl> ppp LabeledScoredTreeReaderFactory.java <nl> mmm TreeGraphNode.java <nl> ppp TreeGraphNode.java <nl> - protected TreeGraph tg; <nl> + protected GrammaticalStructure tg; <nl> - public TreeGraphNode(Tree t, TreeGraph graph) { <nl> + public TreeGraphNode(Tree t, GrammaticalStructure graph) { <nl> 
mmm NERDemo.java <nl> ppp NERDemo.java <nl> + import edu.stanford.nlp.sequences.DocumentReaderAndWriter; <nl> + import edu.stanford.nlp.util.Triple; <nl> + System.out.println("---"); <nl> + List<Triple<String, Integer, Integer>> list = classifier.classifyToCharacterOffsets(fileContents); <nl> + for (Triple<String, Integer, Integer> item : list) { <nl> 
mmm MetaClassTest.java <nl> ppp MetaClassTest.java <nl> + import java.io.IOException; <nl> - private static final String CLASS =  MetaClassTest.class.getName(); <nl> - public static interface ISomething{ <nl> - public String display(); <nl> - } <nl> - public static class IInstSomething implements ISomething{ <nl> 
mmm XMLOutputter.java <nl> ppp XMLOutputter.java <nl> mmm LinearClassifier.java <nl> ppp LinearClassifier.java <nl> - assert iFeature < weights.length; <nl> - assert iLabel < weights[iFeature].length; <nl> - assert labelIndex.indexOf(label, false) >= 0; <nl> mmm MetaClassTest.java <nl> ppp MetaClassTest.java <nl> 
mmm SimpleCharStream.java <nl> ppp SimpleCharStream.java <nl> - protected boolean trackLineColumn = false; <nl> + protected boolean trackLineColumn = true; <nl> - void setTrackLineColumn(boolean trackLineColumn) { this.trackLineColumn = trackLineColumn; } <nl> + void setTrackLineColumn(boolean tlc) { trackLineColumn = tlc; } <nl> 
mmm CoreMapExpressionExtractor.java <nl> ppp CoreMapExpressionExtractor.java <nl> + import edu.stanford.nlp.ling.CoreAnnotation; <nl> - private static Redwood.RedwoodChannels log = Redwood.channels(CoreMapExpressionExtractor.class); <nl> + private static final Redwood.RedwoodChannels log = Redwood.channels(CoreMapExpressionExtractor.class); <nl> 
mmm SentenceITest.java <nl> ppp SentenceITest.java <nl> - new Sentence("George Bush lives in the United States.").ners()); <nl> + new Sentence("George Bush lives in the United States.").nerTags()); <nl> mmm Sentence.java <nl> ppp Sentence.java <nl> - public List<String> ners(Properties props) { <nl> + public List<String> nerTags(Properties props) { <nl> 
mmm MulticoreWrapper.java <nl> ppp MulticoreWrapper.java <nl> - Future<JobResult<O>> result = queue.take(); <nl> + queue.take(); <nl> mmm EnglishGrammaticalStructure.java <nl> ppp EnglishGrammaticalStructure.java <nl> - TreeGraphNode subj = getNodeInRelation(t, NOMINAL_SUBJECT); <nl> + TreeGraphNode subj = t.getNodeInRelation(NOMINAL_SUBJECT); <nl> 
mmm FrenchLexer.java <nl> ppp FrenchLexer.java <nl> - "\1\156\10\0\1\115\1\4\1\37\1\40\1\36\22\0\1\116\1\3"+ <nl> - "\1\152\1\27\1\125\1\104\1\6\1\126\1\143\1\144\1\150\1\73"+ <nl> - "\1\120\1\66\1\123\1\2\1\153\1\77\5\30\1\154\2\30\1\113"+ <nl> - "\1\15\1\1\1\104\1\5\1\3\1\127\1\45\1\137\1\57\1\44"+ <nl> 
mmm StanfordCoreNLPITest.java <nl> ppp StanfordCoreNLPITest.java <nl> + import edu.stanford.nlp.ie.machinereading.structure.MachineReadingAnnotations; <nl> + import edu.stanford.nlp.ie.machinereading.structure.RelationMention; <nl> - String text = "Barack Obama is the 44th President of the United States.  He is the first African American president."; <nl> 
mmm ScorePatterns.java <nl> ppp ScorePatterns.java <nl> - import java.util.Set; <nl> + protected TwoDimensionalCounter<Integer, String> negandUnLabeledPatternsandWords4Label = new TwoDimensionalCounter<Integer, String>(); <nl> + protected TwoDimensionalCounter<Integer, String> allPatternsandWords4Label = new TwoDimensionalCounter<Integer, String>(); <nl> 
mmm MatchCostFunction.java <nl> ppp MatchCostFunction.java <nl> - public double multiMatchDeltaCost(List<K> k, V v, int n); <nl> + public double multiMatchDeltaCost(List<K> k, V v, List<Match<K,V>> prevMultiMatch, List<Match<K,V>> curMultiMatch); <nl> mmm Match.java <nl> ppp Match.java <nl> + public Object getCustom() { <nl> 
mmm DescriptionPattern.java <nl> ppp DescriptionPattern.java <nl> + import edu.stanford.nlp.trees.HeadFinder; <nl> - VariableStrings variableStrings) { <nl> + VariableStrings variableStrings, <nl> + HeadFinder headFinder) { <nl> - namesToNodes, variableStrings); <nl> + namesToNodes, variableStrings, headFinder); <nl> 
mmm LanguageInfo.java <nl> ppp LanguageInfo.java <nl> + import edu.stanford.nlp.io.IOUtils; <nl> + import java.io.*; <nl> + public static Properties getLanguageProperties(String inputString) throws IOException { <nl> + Properties props = new Properties(); <nl> + InputStream is = IOUtils.getInputStreamFromURLOrClasspathOrFileSystem(getLanguagePropertiesFile(inputString)); <nl> 
mmm NonDict2.java <nl> ppp NonDict2.java <nl> - import org.slf4j.Logger; <nl> - import org.slf4j.LoggerFactory; <nl> - private static Logger logger = LoggerFactory.getLogger(NonDict2.class); <nl> - logger.info("INFO: flags.usePk=true | building NonDict2 from "+path); <nl> + System.err.println("INFO: flags.usePk=true | building NonDict2 from "+path); <nl> 
mmm WordsToSentencesAnnotatorTest.java <nl> ppp WordsToSentencesAnnotatorTest.java <nl> + import edu.stanford.nlp.ling.CoreLabel; <nl> + public void testTokenizeNLsDoesntChangeSsplitResults() { <nl> + String text = "This is one sentence\n\nThis is not another with default ssplit settings."; <nl> + Properties props = new Properties(); <nl> 
mmm AbstractSequenceClassifier.java <nl> ppp AbstractSequenceClassifier.java <nl> - public int windowSize; <nl> + protected int windowSize; <nl> mmm TokenizerAnnotator.java <nl> ppp TokenizerAnnotator.java <nl> - abstract Tokenizer<CoreLabel> getTokenizer(Reader r); <nl> + abstract public Tokenizer<CoreLabel> getTokenizer(Reader r); <nl> 
mmm PennTreebankLanguagePack.java <nl> ppp PennTreebankLanguagePack.java <nl> + @Override <nl> + public boolean supportsGrammaticalStructures() { <nl> + return true; <nl> + } <nl> mmm UnnamedDependency.java <nl> ppp UnnamedDependency.java <nl> - return ((label instanceof HasWord) ? <nl> - ((HasWord) label).word() : label.value()); <nl> 
mmm ShiftReduceParser.java <nl> ppp ShiftReduceParser.java <nl> - Index<Transition> transitionIndex; <nl> - Map<String, Weight> featureWeights; <nl> + final Index<Transition> transitionIndex; <nl> + final Map<String, Weight> featureWeights; <nl> - ShiftReduceOptions op; <nl> + final ShiftReduceOptions op; <nl> 
mmm CollectionUtils.java <nl> ppp CollectionUtils.java <nl> + import java.util.HashMap; <nl> - for (double v : a) { <nl> - result.add(new Double(v)); <nl> + for (int i = 0; i < a.length; i++) { <nl> + result.add(new Double(a[i])); <nl> - @Override <nl> - @Override <nl> - @Override <nl> - @Override <nl> - @Override <nl> 
mmm TypesafeMap.java <nl> ppp TypesafeMap.java <nl> - private static final Redwood.RedwoodChannels log = Redwood.channels(CRFClassifierWithLOP.class); <nl> + private static Redwood.RedwoodChannels log = Redwood.channels(CRFClassifierWithLOP.class); <nl> - private List<Set<Integer>> featureIndicesSetArray; <nl> 
mmm TregexMatcher.java <nl> ppp TregexMatcher.java <nl> + import edu.stanford.nlp.trees.HeadFinder; <nl> mmm SemanticHeadFinder.java <nl> ppp SemanticHeadFinder.java <nl> + import edu.stanford.nlp.trees.tregex.TregexMatcher; <nl> + import edu.stanford.nlp.trees.tregex.TregexPattern; <nl> + private final boolean makeCopulaHead; <nl> 
mmm LexicalizedParser.java <nl> ppp LexicalizedParser.java <nl> + @Override <nl> + public String[] defaultCoreNLPFlags() { <nl> + return getTLPParams().defaultCoreNLPFlags(); <nl> + } <nl> mmm ParserAnnotator.java <nl> ppp ParserAnnotator.java <nl> - public static final String[] DEFAULT_FLAGS = { "-retainTmpSubcategories" }; <nl> 
mmm FindNearestNeighbors.java <nl> ppp FindNearestNeighbors.java <nl> - import edu.stanford.nlp.parser.lexparser.ArgUtils; <nl> + import edu.stanford.nlp.parser.common.ArgUtils; <nl> + import edu.stanford.nlp.parser.common.ParserQuery; <nl> - import edu.stanford.nlp.parser.lexparser.ParserQuery; <nl> mmm LexicalizedParserITest.java <nl> 
mmm PTBEscapingProcessor.java <nl> ppp PTBEscapingProcessor.java <nl> - protected char[] escapeChars = {'/', '*'}; <nl> - protected String[] replaceEscapes = {"\\/", "\\*"}; <nl> + @Override <nl> + @Override <nl> - for (int i = 0; i < inputSize; i++) { <nl> - HasWord hw = input.get(i); <nl> + for (HasWord hw : input) { <nl> 
new file <nl> ppp IdleTransition.java <nl> + package edu.stanford.nlp.parser.shiftreduce; <nl> + public class IdleTransition implements Transition { <nl> + public boolean isLegal(State state) { <nl> + return state.finished; <nl> + } <nl> + public State apply(State state) { <nl> + return apply(state, 0.0); <nl> 
mmm IntervalTree.java <nl> ppp IntervalTree.java <nl> + import edu.stanford.nlp.ling.tokensregex.matcher.Match; <nl> - for (int argIndex = 0; argIndex < args.length; ++argIndex) { <nl> + String sentimentModelPath = null; <nl> + SentimentModel sentimentModel = null; <nl> + for (int argIndex = 0; argIndex < args.length; ) { <nl> 
mmm AbstractCollinsHeadFinder.java <nl> ppp AbstractCollinsHeadFinder.java <nl> + public class BinaryTransition implements Transition { <nl> + public final String label; <nl> + public final Side side; <nl> + public enum Side { <nl> + LEFT, RIGHT <nl> + } <nl> + public BinaryTransition(String label, Side side) { <nl> 
mmm SloppyMath.java <nl> ppp SloppyMath.java <nl> + public static int pythonMod(int num, int modulus) { <nl> + return (num % modulus + modulus) % modulus; <nl> + } <nl> - public static void main(String[] args) { <nl> + public static void main(String[] args) throws IOException { <nl> + boolean stdin = false; <nl> 
mmm ParserAnnotatorUtils.java <nl> ppp ParserAnnotatorUtils.java <nl> - import edu.stanford.nlp.trees.GrammaticalStructure; <nl> mmm SloppyMath.java <nl> ppp SloppyMath.java <nl> + public static int pythonMod(int num, int modulus) { <nl> + return (num % modulus + modulus) % modulus; <nl> + } <nl> + @Override <nl> 
mmm SloppyMath.java <nl> ppp SloppyMath.java <nl> + public static int pythonMod(int num, int modulus) { <nl> + return (num % modulus + modulus) % modulus; <nl> + } <nl> - prob += regularGradientAndValue(); <nl> + prob = regularGradientAndValue(); <nl> mmm SGDWithAdaGradAndFOBOS.java <nl> ppp SGDWithAdaGradAndFOBOS.java <nl> 
mmm MatchCostFunction.java <nl> ppp MatchCostFunction.java <nl> - public double cost(K k1, K k2); <nl> + public double cost(K k1, K k2, int n); <nl> mmm TokensRegexNERAnnotator.java <nl> ppp TokensRegexNERAnnotator.java <nl> - *          For this types, only if the matched expression has NER type matchting the <nl> 
mmm TreeGraphNode.java <nl> ppp TreeGraphNode.java <nl> + import static edu.stanford.nlp.trees.GrammaticalRelation.DEPENDENT; <nl> + import static edu.stanford.nlp.trees.GrammaticalRelation.GOVERNOR; <nl> + public TreeGraphNode getGovernor() { <nl> + return getNodeInRelation(GOVERNOR); <nl> + } <nl> + public TreeGraphNode getNodeInRelation(GrammaticalRelation r) { <nl> 
mmm MetaClass.java <nl> ppp MetaClass.java <nl> - return (E) IOUtils.getBufferedReaderFromClasspathOrFileSystem(value); <nl> + return (E) IOUtils.readerFromString(value); <nl> mmm MultiClassPrecisionRecallExtendedStats.java <nl> ppp MultiClassPrecisionRecallExtendedStats.java <nl> - return score(IOUtils.getBufferedFileReader(filename), delimiter, boundary); <nl> 
mmm LanguageInfo.java <nl> ppp LanguageInfo.java <nl> + import java.util.*; <nl> + public enum HumanLanguage {ARABIC, CHINESE, ENGLISH, FRENCH, GERMAN, SPANISH} <nl> + public static final String ARABIC_PROPERTIES = "StanfordCoreNLP-arabic.properties"; <nl> + public static final HashMap<HumanLanguage,String> languageToPropertiesFile; <nl> 
mmm CoreNLPProtos.java <nl> ppp CoreNLPProtos.java <nl> - public static void registerAllExtensions( <nl> - com.google.protobuf.ExtensionRegistryLite registry) { <nl> - } <nl> - registerAllExtensions( <nl> - (com.google.protobuf.ExtensionRegistryLite) registry); <nl> - Unknown(0), <nl> + Unknown(0, 0), <nl> - Any(1), <nl> 
new file <nl> ppp Classifier.java <nl> + package edu.stanford.nlp.parser.nndep; <nl> + import edu.stanford.nlp.util.CollectionUtils; <nl> + import edu.stanford.nlp.util.Pair; <nl> + import edu.stanford.nlp.util.concurrent.MulticoreWrapper; <nl> + import edu.stanford.nlp.util.concurrent.ThreadsafeProcessor; <nl> 
mmm AbstractSequenceClassifier.java <nl> ppp AbstractSequenceClassifier.java <nl> - public List<FeatureFactory<IN>> featureFactories; <nl> + public List<FeatureFactory<IN>> featureFactories; <nl> - cliqueWriter = IOUtils.getPrintWriterOrDie("features-" + flags.printFeatures + ".txt"); <nl> + cliqueWriter = IOUtils.getPrintWriterOrDie("feats-" + flags.printFeatures + ".txt"); <nl> 
mmm StanfordCoreNLP.java <nl> ppp StanfordCoreNLP.java <nl> + public static boolean usesBinaryTrees(Properties props) { <nl> + String annotators = props.getProperty("annotators"); <nl> + Set<String> annoNames = Generics.newHashSet(Arrays.asList(getRequiredProperty(props, "annotators").split("[, \t]+"))); <nl> 
mmm Tsurgeon.java <nl> ppp Tsurgeon.java <nl> - * <p> <nl> + * </p><p> <nl> + * The parser also has the ability to collect multiple <nl> + * TsurgeonPatterns into one pattern by itself by enclosing each <nl> + * pattern in <code>[ ... ]</code>.  For example, <nl> + * <br> <nl> + * <code>Tsurgeon.parseOperation("[relabel foo BAR] [prune bar]")</code> <nl> 
mmm SentenceIndex.java <nl> ppp SentenceIndex.java <nl> - public abstract Map<Integer, Set<String>> queryIndex(Collection<Integer> patterns, ConcurrentHashIndex<SurfacePattern> patternIndex); <nl> + public abstract Map<Integer, Set<String>> queryIndex(Collection<Integer> patterns,  PatternIndex patternIndex); <nl> 
mmm ConcatVectorTable.java <nl> ppp ConcatVectorTable.java <nl> - public ConcatVectorTable(int[] dimensions) { <nl> - super(dimensions); <nl> + NDArray<Supplier<ConcatVector>> originalThunks = null; <nl> + public ConcatVectorTable(int[] dimensions) { <nl> + super(dimensions); <nl> + } <nl> + public static ConcatVectorTable readFromStream(InputStream stream) throws IOException { <nl> 
mmm MultiCoreMapNodePattern.java <nl> ppp MultiCoreMapNodePattern.java <nl> + public StringSequenceAnnotationPattern(Class textKey, Map<List<String>, Object> targets, boolean ignoreCase) { <nl> + this.textKey = textKey; <nl> + phraseTable = new PhraseTable(false, ignoreCase, false); <nl> + for (List<String> target:targets.keySet()) { <nl> 
mmm SentimentPipeline.java <nl> ppp SentimentPipeline.java <nl> - import java.util.ArrayList; <nl> - import java.util.Arrays; <nl> - import java.util.List; <nl> - PENNTREES, VECTORS, ROOT, PROBABILITIES <nl> + PENNTREES, VECTORS, ROOT <nl> - static int outputTreeVectors(PrintStream out, Tree tree, int index) { <nl> 
mmm TypedDependency.java <nl> ppp TypedDependency.java <nl> - public String toString(String format) { <nl> - return reln + "(" + gov.toString(format) + ", " + dep.toString(format) + ")"; <nl> - } <nl> mmm EnglishGrammaticalRelations.java <nl> ppp EnglishGrammaticalRelations.java <nl> - "VP < VP < (/^(?:TO|MD|VB.*|AUXG?|POS)$/=target)", <nl> 
mmm Annotator.java <nl> ppp Annotator.java <nl> - put(STANFORD_TOKENIZE,                 new HashSet<>(Arrays.asList())); <nl> - put(STANFORD_CLEAN_XML,                new HashSet<>(Arrays.asList(STANFORD_TOKENIZE))); <nl> - put(STANFORD_SSPLIT,                   new HashSet<>(Arrays.asList(STANFORD_TOKENIZE))); <nl> 
mmm ParserAnnotatorITest.java <nl> ppp ParserAnnotatorITest.java <nl> + private void assertParseOK(ParserAnnotator parser) { <nl> + AnnotationPipeline pipeline = new AnnotationPipeline(); <nl> + pipeline.addAnnotator(new PTBTokenizerAnnotator(false)); <nl> + pipeline.addAnnotator(new WordsToSentencesAnnotator(false)); <nl> 
mmm TextOutputter.java <nl> ppp TextOutputter.java <nl> - os.print(sentence.get(SemanticGraphCoreAnnotations.CollapsedDependenciesAnnotation.class).toList()); <nl> - os.print("\n"); <nl> + pipeline.getDependencyTreePrinter().printTree(tree, os); <nl> mmm NumberAnnotator.java <nl> ppp NumberAnnotator.java <nl> 
mmm TrieMap.java <nl> ppp TrieMap.java <nl> - *   fast lookup times for sequences where there are many possible keys (e.g. sequences over Strings) <nl> - * Can be used for fairly efficient look up of sequence by prefix <nl> + * fast lookup times for sequences where there are many possible keys (e.g. sequences over Strings). <nl> 
mmm SequenceMatchRules.java <nl> ppp SequenceMatchRules.java <nl> - *        pattern: ( <TokenSequencePattern> ) | /<TextPattern>/, <nl> + *        pattern: ( &lt;TokenSequencePattern&gt; ) | /&lt;TextPattern&gt;/, <nl> - *     value: 1 <nl> + *     result: 1 <nl> - * Extraction rule fields: <nl> + * Extraction rule fields (most fields are optional): <nl> 
mmm DefaultPaths.java <nl> ppp DefaultPaths.java <nl> mmm Counters.java <nl> ppp Counters.java <nl> - public static void serializeStringCounter(Counter<String> c, <nl> - String filename, <nl> - double minMagnitude) throws IOException { <nl> - PrintWriter writer = IOUtils.getPrintWriter(filename); <nl> - for (Entry<String, Double> entry : c.entrySet()) { <nl> 
mmm NeuralCorefDataExporter.java <nl> ppp NeuralCorefDataExporter.java <nl> - document, m1, m2, dictionaries, conll)) { <nl> + document, m1, m2, dictionaries)) { <nl> mmm CorefScorer.java <nl> ppp CorefScorer.java <nl> + logger.info(line); <nl> + logger.info(sb.toString()); <nl> - public static void printFinalConllScore(String summary) { <nl> 
mmm EnglishUnknownWordModel.java <nl> ppp EnglishUnknownWordModel.java <nl> - * <i>Implementation note: the contents of this class tend to overlap somewhat <nl> + * <i>Implementation note</i>: the contents of this class tend to overlap somewhat <nl> mmm Pattern.java <nl> ppp Pattern.java <nl> - * @Author Sonal Gupta @sonalg. <nl> 
mmm TreeAnnotatorAndBinarizer.java <nl> ppp TreeAnnotatorAndBinarizer.java <nl> - private TreeFactory tf; <nl> - private TreebankLanguagePack tlp; <nl> - private TreeTransformer annotator; <nl> - private TreeTransformer binarizer; <nl> - private TreeTransformer postSplitter; <nl> - private boolean forceCNF; <nl> 
mmm FilterConfusingRules.java <nl> ppp FilterConfusingRules.java <nl> + import java.io.Serializable; <nl> - public class FilterConfusingRules implements Predicate<Tree> { <nl> + public class FilterConfusingRules implements Predicate<Tree>, Serializable { <nl> mmm EnglishGrammaticalStructure.java <nl> ppp EnglishGrammaticalStructure.java <nl> 
mmm IOUtils.java <nl> ppp IOUtils.java <nl> - import java.nio.ByteBuffer; <nl> - import java.nio.CharBuffer; <nl> - import java.nio.charset.CharacterCodingException; <nl> - import java.nio.charset.Charset; <nl> - import java.nio.charset.CharsetDecoder; <nl> - private static final Redwood.RedwoodChannels log = Redwood.channels(IOUtils.class); <nl> 
mmm NERFeatureFactory.java <nl> ppp NERFeatureFactory.java <nl> - boolean doFE = cInfo.get(0).containsKey(CoreAnnotations.DomainAnnotation.class); <nl> - String domain = (doFE ? cInfo.get(0).get(CoreAnnotations.DomainAnnotation.class) : null); <nl> + String domain = cInfo.get(0).get(CoreAnnotations.DomainAnnotation.class); <nl> 
deleted file <nl> mmm AnnotatedTextReader.java <nl> - package edu.stanford.nlp.patterns.surface; <nl> - import java.io.BufferedReader; <nl> - import java.io.IOException; <nl> - import java.io.StringReader; <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - import java.util.Map; <nl> - import java.util.Set; <nl> 
mmm UniversalDependenciesFeatureAnnotator.java <nl> ppp UniversalDependenciesFeatureAnnotator.java <nl> - package edu.stanford.nlp.trees.ud; <nl> + package edu.stanford.nlp.trees.ud; <nl> - private static String ORDINAL_EXPRESSION = "^(first|second|third|fourth|fifth|sixth|seventh|eigth|ninth|tenth|([0-9,.]+(th|st|nd|rd)))$"; <nl> 
mmm EnglishGrammaticalRelations.java <nl> ppp EnglishGrammaticalRelations.java <nl> - "ADVP < (SBAR=target < (IN < /^(?i:as|that)/) < (S < (VP !< TO)))", <nl> + "ADVP < (SBAR=target [ < WHNP | ( < (IN < /^(?i:as|that)/) < (S < (VP !< TO))) ])", <nl> mmm ParseException.java <nl> ppp ParseException.java <nl> 
mmm TokenSequencePattern.java <nl> ppp TokenSequencePattern.java <nl> + *     If only one attribute, the {} can be dropped. <nl> + * Special expressions: indicated by double braces: <code>{{ expr }}</code> <nl> + *   <br/> See {@link edu.stanford.nlp.ling.tokensregex.types.Expressions} for syntax. <nl> + * </p> <nl> 
mmm BaseFragment.java <nl> ppp BaseFragment.java <nl> + protected boolean mAnimationEnterLoaded; <nl> - if (mInitDataCame) { <nl> + if (mInitDataCame && !mAnimationEnterLoaded) { <nl> + mAnimationEnterLoaded = true; <nl> mmm FileIOUtils.java <nl> ppp FileIOUtils.java <nl> mmm ScreenUtils.java <nl> ppp ScreenUtils.java <nl> 
mmm DemoViewPagerAdapter.java <nl> ppp DemoViewPagerAdapter.java <nl> - import android.support.v4.app.FragmentManager; <nl> - import android.support.v4.app.FragmentPagerAdapter; <nl> + import androidx.fragment.app.FragmentManager; <nl> + import androidx.fragment.app.FragmentPagerAdapter; <nl> mmm AHNotification.java <nl> 
mmm BaseActivity.java <nl> ppp BaseActivity.java <nl> - @Nullable @LayoutRes <nl> - protected abstract int getContentView(); <nl> + @LayoutRes protected abstract int getContentView(); <nl> - implements IIssueTimelineContract.View{ <nl> + implements IIssueTimelineContract.View { <nl> + @AutoAccess String editingCommentId; <nl> 
mmm ViewerActivity.java <nl> ppp ViewerActivity.java <nl> + import com.thirtydegreesray.openhub.mvp.model.CommitFile; <nl> + public enum ViewerType{ <nl> + RepoFile, MarkDown, DiffFile <nl> + } <nl> - intent.putExtras(BundleBuilder.builder().put("title", title) <nl> - .put("mdSource", mdSource).build()); <nl> 
new file <nl> ppp CollectionsPresenter.java <nl> + package com.thirtydegreesray.openhub.mvp.presenter; <nl> + import com.thirtydegreesray.openhub.AppConfig; <nl> + import com.thirtydegreesray.openhub.dao.DaoSession; <nl> + import com.thirtydegreesray.openhub.http.core.HttpObserver; <nl> + import com.thirtydegreesray.openhub.http.core.HttpResponse; <nl> 
mmm FileWorldGeneratorImplementation.java <nl> ppp FileWorldGeneratorImplementation.java <nl> - 	WorldSettings.GameType gameType; <nl> + 	FileWorldGenerator fwparams; <nl> - 		FileWorldGenerator fwparams = (FileWorldGenerator)params; <nl> - 		this.gameType = GameType.SURVIVAL; <nl> + 		this.fwparams = (FileWorldGenerator)params; <nl> 
mmm RewardForTouchingBlockTypeImplementation.java <nl> ppp RewardForTouchingBlockTypeImplementation.java <nl> + import net.minecraft.block.properties.IProperty; <nl> - import net.minecraftforge.common.MinecraftForge; <nl> - import net.minecraftforge.fml.common.eventhandler.SubscribeEvent; <nl> + import com.microsoft.Malmo.Schemas.Variation; <nl> 
mmm RewardForTouchingBlockTypeImplementation.java <nl> ppp RewardForTouchingBlockTypeImplementation.java <nl> - import com.microsoft.Malmo.Schemas.Variation; <nl> + import com.microsoft.Malmo.Schemas.BlockVariant; <nl> - import com.microsoft.Malmo.Utils.MinecraftTypeHelper; <nl> - if (match && this.spec.getColour() != null && !this.spec.getColour().isEmpty()) <nl> 
mmm AdminServiceFilterTest.java <nl> ppp AdminServiceFilterTest.java <nl> - import voldemort.client.protocol.admin.AdminClientRequestFormat; <nl> + import voldemort.client.protocol.admin.AdminClient; <nl> - private AdminClientRequestFormat getAdminClient() { <nl> + private AdminClient getAdminClient() { <nl> 
mmm GenerateData.java <nl> ppp GenerateData.java <nl> + @SuppressWarnings("deprecation") <nl> mmm BdbStorageConfiguration.java <nl> ppp BdbStorageConfiguration.java <nl> - import com.sleepycat.je.*; <nl> + import com.sleepycat.je.Database; <nl> + import com.sleepycat.je.DatabaseConfig; <nl> + import com.sleepycat.je.DatabaseException; <nl> 
mmm PausableStorageEngine.java <nl> ppp PausableStorageEngine.java <nl> + @Override <nl> + public List<Versioned<V>> multiVersionPut(K key, final List<Versioned<V>> values) { <nl> + blockIfNecessary(); <nl> + return inner.multiVersionPut(key, values); <nl> + } <nl> mmm AbstractStorageEngine.java <nl> ppp AbstractStorageEngine.java <nl> 
mmm StoreVersionManager.java <nl> ppp StoreVersionManager.java <nl> - throw new PersistenceFailureException( <nl> - "Failed to create the disabled marker for version " + version + " in rootDir: " + rootDir + <nl> - "\nThe store/version will remain disabled only until the next restart.", e); <nl> + throw new PersistenceFailureException("Failed to create the disabled marker at path: " + <nl> 
new file <nl> ppp StoreSwapper.java <nl> + package voldemort.store.readonly; <nl> + import java.io.File; <nl> + import java.io.StringReader; <nl> + import java.util.ArrayList; <nl> + import java.util.HashMap; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import java.util.concurrent.Callable; <nl> 
mmm VPageIndexEntry.java <nl> ppp VPageIndexEntry.java <nl> - public class VPageIndexEntry<LK extends Comparable<LK>> <nl> - { <nl> - private static final String PAGE_ID = "pageId"; <nl> - private static final String LAST_INDEX = "lastIndex"; <nl> - private final Map<String, Object> _map; <nl> - private final Serializer<LK> _serializer; <nl> 
new file <nl> ppp MD5CheckSum.java <nl> + package voldemort.store.readonly.checksum; <nl> + import java.security.MessageDigest; <nl> + import java.security.NoSuchAlgorithmException; <nl> + public class MD5CheckSum extends CheckSum { <nl> + private MessageDigest checkSumGenerator = null; <nl> + public MD5CheckSum() throws NoSuchAlgorithmException { <nl> 
mmm FilesystemStorageEngine.java <nl> ppp FilesystemStorageEngine.java <nl> + public ClosableIterator<String> keys() { <nl> + return StoreUtils.keys(entries()); <nl> + } <nl> mmm MongoDBStorageEngine.java <nl> ppp MongoDBStorageEngine.java <nl> + public ClosableIterator<ByteArray> keys() { <nl> + return StoreUtils.keys(entries()); <nl> 
new file <nl> ppp NodeValueTest.java <nl> + package voldemort.store.routed; <nl> + import com.google.common.collect.HashMultimap; <nl> + import com.google.common.collect.Multimap; <nl> + import org.apache.log4j.Logger; <nl> + import org.junit.Test; <nl> + import voldemort.TestUtils; <nl> + import voldemort.utils.ByteArray; <nl> 
mmm BlockingClientRequest.java <nl> ppp BlockingClientRequest.java <nl> + public void timeOut() { <nl> + delegate.timeOut(); <nl> + } <nl> + public boolean isTimedOut() { <nl> + return delegate.isTimedOut(); <nl> + } <nl> mmm ClientRequest.java <nl> ppp ClientRequest.java <nl> + public void timeOut(); <nl> + public boolean isTimedOut(); <nl> 
mmm FilesystemStorageEngine.java <nl> ppp FilesystemStorageEngine.java <nl> - public ClosableIterator<String> keys() { <nl> - return StoreUtils.keys(entries()); <nl> - } <nl> mmm SocketServer.java <nl> ppp SocketServer.java <nl> - import java.util.concurrent.BlockingQueue; <nl> - import java.util.concurrent.LinkedBlockingQueue; <nl> 
mmm AsyncOperationStatus.java <nl> ppp AsyncOperationStatus.java <nl> - return "Task(id = " + getId() + ", description = " + getDescription() + ", complete = " <nl> - + isComplete() + ", status = " + getStatus() + ")"; <nl> + StringBuilder builder = new StringBuilder(); <nl> + builder.append("AsyncOperationStatus(id = "); <nl> 
mmm AvroReflectiveSerializerTest.java <nl> ppp AvroReflectiveSerializerTest.java <nl> - import java.io.ByteArrayOutputStream; <nl> - import java.io.IOException; <nl> - import org.apache.log4j.Logger; <nl> - private static final Logger logger = Logger.getLogger(SerializationUtils.class); <nl> + private static final String ONLY_JAVA_CLIENTS_SUPPORTED = "Only Java clients are supported currently, so the format of the schema-info should be: <schema-info>java=foo.Bar</schema-info> where foo.Bar is the fully qualified name of the message."; <nl> 
mmm AbstractStoreClientFactory.java <nl> ppp AbstractStoreClientFactory.java <nl> - DefaultStoreClient<K, V> storeClient = new DefaultStoreClient<K, V>(storeName, <nl> - resolver, <nl> - this, <nl> - 3); <nl> - registerJmx(JmxUtils.createObjectName(JmxUtils.getPackageName(storeClient.getClass()), <nl> - "store-" + storeName + jmxId), storeClient); <nl> 
mmm TextFileStorageEngineTest.java <nl> ppp TextFileStorageEngineTest.java <nl> - package voldemort.store.filesystem; <nl> + package voldemort.store.textfile; <nl> + import voldemort.store.textfile.TextFileStorageEngine; <nl> - public class FilesystemStorageEngineTest extends AbstractStoreTest<String, String> { <nl> 
mmm StackSampleAnalyzerCmd.java <nl> ppp StackSampleAnalyzerCmd.java <nl> - 		@SuppressWarnings("unused") <nl> - @SuppressWarnings("unused") <nl> - 		@SuppressWarnings("unused") <nl> - 		@SuppressWarnings("unused") <nl> - 		            return new StackTraceReader() { <nl> + 		            return new StackTraceReader.StackTraceReaderDelegate() { <nl> 
new file <nl> ppp JsonLocation.java <nl> + package org.gridkit.jvmtool.jackson; <nl> + public class JsonLocation <nl> + { <nl> + private static final long serialVersionUID = 1L; <nl> + public final static JsonLocation NA = new JsonLocation("N/A", -1L, -1L, -1, -1); <nl> + final long _totalBytes; <nl> + final long _totalChars; <nl> 
mmm MemoryIndex.java <nl> ppp MemoryIndex.java <nl> - new FieldInfo(fieldName, true, fieldInfos.size(), false, false, false, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null, null)); <nl> + new FieldInfo(fieldName, true, fieldInfos.size(), false, false, false, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null, null, null)); <nl> 
mmm ClusteringComponent.java <nl> ppp ClusteringComponent.java <nl> + import java.util.HashMap; <nl> - import com.google.common.collect.Maps; <nl> - private final LinkedHashMap<String, SearchClusteringEngine> searchClusteringEngines = Maps.newLinkedHashMap(); <nl> + private final LinkedHashMap<String, SearchClusteringEngine> searchClusteringEngines = new LinkedHashMap<>(); <nl> 
mmm NorwegianStemmer.java <nl> ppp NorwegianStemmer.java <nl> - import org.tartarus.snowball.SnowballProgram; <nl> + import org.tartarus.snowball.SnowballProgram; <nl> - private Among a_0[] = { <nl> - new Among ( "a", -1, 1, "", this), <nl> - new Among ( "e", -1, 1, "", this), <nl> - new Among ( "ede", 1, 1, "", this), <nl> 
mmm CoreDescriptor.java <nl> ppp CoreDescriptor.java <nl> - log.info("Created CoreDescriptor: " + coreProperties); <nl> + log.debug("Created CoreDescriptor: " + coreProperties); <nl> - if (log.isInfoEnabled()) { <nl> - log.info("makePath: " + path); <nl> - } <nl> + log.debug("makePath: {}", path); <nl> - if (log.isInfoEnabled()) { <nl> 
mmm PostingsEnum.java <nl> ppp PostingsEnum.java <nl> - public static final int NONE = 0x0; <nl> + public static final short NONE = 0; <nl> - public static final int FREQS = 0x1; <nl> + public static final short FREQS = 1 << 3; <nl> - public static final int POSITIONS = 0x3; <nl> + public static final short POSITIONS = FREQS | 1 << 4; <nl> 
mmm ScheduledTriggers.java <nl> ppp ScheduledTriggers.java <nl> - ScheduledTrigger scheduledTrigger = new ScheduledTrigger(newTrigger, zkClient, queueStats); <nl> + ScheduledTrigger st; <nl> + try { <nl> + st = new ScheduledTrigger(newTrigger, zkClient, queueStats); <nl> + } catch (Exception e) { <nl> + if (isClosed) { <nl> 
mmm ChildFieldValueSourceParser.java <nl> ppp ChildFieldValueSourceParser.java <nl> + @SuppressWarnings("unchecked") <nl> - return type ==Type.STRING ?  new BytesToStringComparator((FieldComparator<BytesRef>) comparator): comparator; <nl> + return type ==Type.STRING ?  new BytesToStringComparator((FieldComparator<BytesRef>) comparator) <nl> 
mmm ParallelLeafReader.java <nl> ppp ParallelLeafReader.java <nl> + @Override <nl> + public byte[] getMinPackedValue(String fieldName) throws IOException { <nl> + LeafReader reader = fieldToReader.get(fieldName); <nl> + if (reader == null) { <nl> + return null; <nl> + } <nl> + DimensionalValues dimValues = reader.getDimensionalValues(); <nl> 
mmm SpellCheckResponse.java <nl> ppp SpellCheckResponse.java <nl> - * @return <nl> + * @return first collated query string <nl> - * @return <nl> + * @return all collations <nl> mmm CzechAnalyzer.java <nl> ppp CzechAnalyzer.java <nl> mmm StrUtils.java <nl> ppp StrUtils.java <nl> - * @return <nl> + * @return parsed boolean value (or def, if s is null or invalid) <nl> 
mmm AllGroupHeadsCollectorTest.java <nl> ppp AllGroupHeadsCollectorTest.java <nl> + import org.apache.lucene.queries.function.ValueSource; <nl> + import org.apache.lucene.queries.function.valuesource.BytesRefFieldSource; <nl> + import org.apache.lucene.search.grouping.function.FunctionAllGroupHeadsCollector; <nl> 
mmm WeightedSpanTermExtractor.java <nl> ppp WeightedSpanTermExtractor.java <nl> - import org.apache.lucene.index.FilterIndexReader; <nl> - import org.apache.lucene.index.TermEnum; <nl> - import org.apache.lucene.search.ConstantScoreRangeQuery; <nl> - if(mtq.getConstantScoreRewrite()) { <nl> + if(mtq.getRewriteMethod() == MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE) { <nl> 
mmm TransactionLog.java <nl> ppp TransactionLog.java <nl> - public final static String END_MESSAGE="SOLR_TLOG_END"; <nl> + public final static String END_MESSAGE = "SOLR_TLOG_END"; <nl> - Map<String,Integer> globalStringMap = new HashMap<>(); <nl> + Map<String, Integer> globalStringMap = new HashMap<>(); <nl> 
mmm SoraniAnalyzer.java <nl> ppp SoraniAnalyzer.java <nl> - if (getVersion().onOrAfter(Version.LUCENE_5_4_0)) { <nl> - result = new DecimalDigitFilter(result); <nl> - } <nl> + result = new DecimalDigitFilter(result); <nl> mmm PersianAnalyzer.java <nl> ppp PersianAnalyzer.java <nl> - if (getVersion().onOrAfter(Version.LUCENE_5_4_0)) { <nl> 
mmm RequestHandlersTest.java <nl> ppp RequestHandlersTest.java <nl> + import org.apache.solr.common.util.NamedList; <nl> + @Test <nl> + public void testStatistics() { <nl> + SolrCore core = h.getCore(); <nl> + SolrRequestHandler updateHandler = core.getRequestHandler("/update"); <nl> + SolrRequestHandler termHandler = core.getRequestHandler("/terms"); <nl> 
mmm NorwegianMinimalStemFilterFactory.java <nl> ppp NorwegianMinimalStemFilterFactory.java <nl> + import static org.apache.lucene.analysis.no.NorwegianLightStemmer.BOKMAAL; <nl> + import static org.apache.lucene.analysis.no.NorwegianLightStemmer.NYNORSK; <nl> + private final int flags; <nl> + String variant = get(args, "variant"); <nl> 
mmm TestUniqueTermCount.java <nl> ppp TestUniqueTermCount.java <nl> + import java.io.IOException; <nl> + import org.apache.lucene.search.CollectionStatistics; <nl> + import org.apache.lucene.search.TermStatistics; <nl> + import org.apache.lucene.search.similarities.Similarity; <nl> - class TestSimilarity extends DefaultSimilarity { <nl> 
mmm BaseTokenFilterFactory.java <nl> ppp BaseTokenFilterFactory.java <nl> + import org.apache.solr.core.Config; <nl> + import org.apache.solr.schema.IndexSchema; <nl> + import org.apache.lucene.util.Version; <nl> + protected Version luceneMatchVersion = null; <nl> + String matchVersion = args.get(IndexSchema.LUCENE_MATCH_VERSION_PARAM); <nl> 
mmm MinShouldMatchSumScorer.java <nl> ppp MinShouldMatchSumScorer.java <nl> - return new DocIdSetIterator() { <nl> + return TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator()); <nl> + } <nl> + @Override <nl> + public TwoPhaseIterator twoPhaseIterator() { <nl> + DocIdSetIterator approximation = new DocIdSetIterator() { <nl> 
mmm PendingSoftDeletes.java <nl> ppp PendingSoftDeletes.java <nl> + assert pendingDeleteCount >= 0 : " illegal pending delete count: " + pendingDeleteCount; <nl> - int numPendingDeletes() { <nl> + protected int numPendingDeletes() { <nl> + assert pendingDeleteCount >= 0 : " illegal pending delete count: " + pendingDeleteCount; <nl> 
new file <nl> ppp SVNEolCheckTask.java <nl> + package org.apache.lucene.validation; <nl> + import java.io.BufferedReader; <nl> + import java.io.File; <nl> + import java.io.IOException; <nl> + import java.io.InputStream; <nl> + import java.io.InputStreamReader; <nl> + import java.nio.charset.Charset; <nl> + import java.util.ArrayList; <nl> 
mmm AbstractDistribZkTestBase.java <nl> ppp AbstractDistribZkTestBase.java <nl> - import org.apache.solr.servlet.SolrDispatchFilter; <nl> - ZkStateReader zkStateReader = ((SolrDispatchFilter) jettys.get(0) <nl> - .getDispatchFilter().getFilter()).getCores().getZkController() <nl> + ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController() <nl> 
mmm FieldReader.java <nl> ppp FieldReader.java <nl> + import org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat; <nl> - long indexStartFP, int longsSize, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm, boolean openedFromWriter) throws IOException { <nl> + long indexStartFP, int longsSize, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm, boolean openedFromWriter, Lucene50PostingsFormat.FSTLoadMode fstLoadMode) throws IOException { <nl> 
mmm LevenshteinAutomata.java <nl> ppp LevenshteinAutomata.java <nl> - final String input; <nl> + final int alphaMax; <nl> - this.input = input; <nl> - int length = Character.codePointCount(input, 0, input.length()); <nl> - word = new int[length]; <nl> - for (int i = 0, j = 0, cp = 0; i < input.length(); i += Character.charCount(cp)) { <nl> 
mmm TestDocTermOrdsRewriteMethod.java <nl> ppp TestDocTermOrdsRewriteMethod.java <nl> mmm TestNumericDocValuesUpdates.java <nl> ppp TestNumericDocValuesUpdates.java <nl> - import org.apache.lucene.util.LuceneTestCase.SuppressCodecs; <nl> - @SuppressCodecs({"Lucene40","Lucene41","Lucene42","Lucene45"}) <nl> 
deleted file <nl> mmm SolrScraperConfig.java <nl> - package org.apache.solr.prometheus.scraper.config; <nl> - import net.thisptr.jackson.jq.exception.JsonQueryException; <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - public class SolrScraperConfig implements Cloneable { <nl> - private SolrQueryConfig query = new SolrQueryConfig(); <nl> 
mmm IndexSplitter.java <nl> ppp IndexSplitter.java <nl> + import java.util.HashMap; <nl> - info.getUseCompoundFile(), info.getCodec(), info.getDiagnostics(), info.getId()); <nl> + info.getUseCompoundFile(), info.getCodec(), info.getDiagnostics(), info.getId(), new HashMap<>()); <nl> mmm IndexWriter.java <nl> 
mmm MMapDirectoryFactory.java <nl> ppp MMapDirectoryFactory.java <nl> + import java.io.File; <nl> + import java.io.IOException; <nl> + import java.nio.file.Path; <nl> - import org.apache.lucene.store.NoLockFactory; <nl> - import org.apache.solr.core.DirectoryFactory.DirContext; <nl> - import java.io.File; <nl> 
new file <nl> ppp TestPoint2D.java <nl> + package org.apache.lucene.geo; <nl> + import org.apache.lucene.index.PointValues.Relation; <nl> + import org.apache.lucene.util.LuceneTestCase; <nl> + public class TestPoint2D extends LuceneTestCase { <nl> + public void testTriangleDisjoint() { <nl> + Component2D point2D = Point2D.create(new double[] {0, 0}); <nl> 
mmm BufferedUpdates.java <nl> ppp BufferedUpdates.java <nl> - * are converted to a FrozenDeletes instance. */ <nl> + * are converted to a FrozenBufferedUpdates instance. */ <nl> + final String segmentName; <nl> - public BufferedUpdates() { <nl> + public BufferedUpdates(String segmentName) { <nl> + this.segmentName = segmentName; <nl> 
mmm QueryComponent.java <nl> ppp QueryComponent.java <nl> - Sort groupSort = searcher.weightSort(sortSpec.getSort()); <nl> - if (groupSort == null) { <nl> - groupSort = Sort.RELEVANCE; <nl> - } <nl> + final SortSpec groupSortSpec = searcher.weightSortSpec(sortSpec, Sort.RELEVANCE); <nl> - Sort sortWithinGroup = sortWithinGroupStr == null ?  groupSort : searcher.weightSort(SortSpecParsing.parseSortSpec(sortWithinGroupStr, req).getSort()); <nl> 
mmm DocumentsWriterFlushControl.java <nl> ppp DocumentsWriterFlushControl.java <nl> - final long expected = (2 * (ramBufferBytes)) + ((numPending + numFlushingDWPT() + numBlockedFlushes()) * peakDelta) + (perThreadPool.getActiveThreadState() * peakDelta); <nl> + final long expected = (2 * (ramBufferBytes)) + ((numPending + numFlushingDWPT() + numBlockedFlushes()) * peakDelta); <nl> 
mmm SolrIndexSplitterTest.java <nl> ppp SolrIndexSplitterTest.java <nl> - import java.io.File; <nl> - import java.io.UnsupportedEncodingException; <nl> - import java.util.List; <nl> + import com.google.common.collect.Lists; <nl> - import com.google.common.collect.Lists; <nl> + import java.io.File; <nl> + import java.io.UnsupportedEncodingException; <nl> 
mmm LocalizedTestCase.java <nl> ppp LocalizedTestCase.java <nl> + @Override <nl> + @Override <nl> + @Override <nl> mmm TestDocIdSet.java <nl> ppp TestDocIdSet.java <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> mmm SimpleStringInterner.java <nl> ppp SimpleStringInterner.java <nl> + @Override <nl> 
deleted file <nl> mmm Lucene50DocValuesConsumer.java <nl> - package org.apache.lucene.codecs.lucene50; <nl> - import java.io.IOException; <nl> - import java.util.Arrays; <nl> - import java.util.Collections; <nl> - import java.util.HashMap; <nl> - import java.util.HashSet; <nl> - import java.util.Iterator; <nl> 
new file <nl> ppp SolrFilter.java <nl> + package org.apache.solr.handler.sql; <nl> + import org.apache.calcite.plan.*; <nl> + import org.apache.calcite.rel.RelNode; <nl> + import org.apache.calcite.rel.core.Filter; <nl> + import org.apache.calcite.rel.metadata.RelMetadataQuery; <nl> + import org.apache.calcite.rex.RexCall; <nl> 
mmm StreamingSolrClients.java <nl> ppp StreamingSolrClients.java <nl> + private final int runnerCount = Integer.getInteger("solr.cloud.replication.runners", 1); <nl> - client = new ConcurrentUpdateSolrClient(url, httpClient, 100, 1, updateExecutor, true) { <nl> + client = new ConcurrentUpdateSolrClient(url, httpClient, 100, runnerCount, updateExecutor, true) { <nl> 
mmm TestBulkSchemaAPI.java <nl> ppp TestBulkSchemaAPI.java <nl> + import org.apache.solr.schema.IndexSchema; <nl> + restTestHarness.checkAdminResponseStatus("/admin/cores?wt=xml&action=RELOAD&core=" + coreName, "0"); <nl> - assertEquals("5.0.0", String.valueOf(analyzer.get("luceneMatchVersion"))); <nl> + assertEquals("5.0.0", String.valueOf(analyzer.get(IndexSchema.LUCENE_MATCH_VERSION_PARAM))); <nl> 
mmm CheckIndex.java <nl> ppp CheckIndex.java <nl> - public int numDeleted; <nl> - int numFields; <nl> + public LiveDocStatus liveDocStatus; <nl> + public FieldInfoStatus fieldInfoStatus; <nl> + public static final class LiveDocStatus { <nl> + private LiveDocStatus() { <nl> + } <nl> + public int numDeleted; <nl> 
deleted file <nl> mmm FastLRUCache.java <nl> - package org.apache.solr.search; <nl> - import java.lang.invoke.MethodHandles; <nl> - import java.util.List; <nl> - import java.util.Map; <nl> - import java.util.Set; <nl> - import java.util.concurrent.ConcurrentHashMap; <nl> - import java.util.concurrent.CopyOnWriteArrayList; <nl> 
mmm HttpSolrCall.java <nl> ppp HttpSolrCall.java <nl> + import static org.apache.solr.common.cloud.ZkStateReader.BASE_URL_PROP; <nl> + import static org.apache.solr.common.cloud.ZkStateReader.COLLECTION_PROP; <nl> + import static org.apache.solr.common.cloud.ZkStateReader.CORE_NAME_PROP; <nl> + import static org.apache.solr.common.cloud.ZkStateReader.NODE_NAME_PROP; <nl> 
mmm SimpleTextFieldsWriter.java <nl> ppp SimpleTextFieldsWriter.java <nl> - import org.apache.lucene.index.FieldInfo.IndexOptions; <nl> - boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_ONLY) > 0; <nl> + boolean hasFreqs = terms.hasFreqs(); <nl> mmm BloomFilteringPostingsFormat.java <nl> 
mmm AddReplicaSuggester.java <nl> ppp AddReplicaSuggester.java <nl> + @SuppressWarnings({"rawtypes"}) <nl> + @SuppressWarnings({"rawtypes"}) <nl> + @SuppressWarnings({"unchecked"}) <nl> mmm Clause.java <nl> ppp Clause.java <nl> + @SuppressWarnings({"unchecked"}) <nl> + @SuppressWarnings({"rawtypes"}) <nl> - private String validateObjectInNodeset(Map<String, Object> m, Map map) { <nl> 
mmm CheapBastardCodec.java <nl> ppp CheapBastardCodec.java <nl> - import org.apache.lucene.codecs.lucene410.Lucene410Codec; <nl> + import org.apache.lucene.util.TestUtil; <nl> - super("CheapBastard", new Lucene410Codec()); <nl> + super("CheapBastard", TestUtil.getDefaultCodec()); <nl> mmm TestAllFilesHaveChecksumFooter.java <nl> 
deleted file <nl> mmm StdOutTeeWriter.java <nl> - package org.apache.lucene.gradle; <nl> - import java.io.IOException; <nl> - import java.io.PrintStream; <nl> - import java.io.Writer; <nl> - class StdOutTeeWriter extends Writer { <nl> - private final Writer delegate; <nl> - private final PrintStream out = System.out; <nl> 
mmm MiniSolrCloudCluster.java <nl> ppp MiniSolrCloudCluster.java <nl> - log.info("waitForJettyToStop: {}", runner.getNodeName()); <nl> + log.info("waitForJettyToStop: {}", runner.getLocalPort()); <nl> mmm NodeLostTrigger.java <nl> ppp NodeLostTrigger.java <nl> + log.trace("Current Live Nodes for {}: {}", name, newLiveNodes); <nl> 
deleted file <nl> mmm Constants.java <nl> - package org.apache.lucene.facet.simple; <nl> - public final class Constants { <nl> - public static final char DEFAULT_DELIM_CHAR = '\u001F'; <nl> - private Constants() { <nl> - } <nl> - } <nl> deleted file <nl> mmm SortedSetDocValuesReaderState.java <nl> - package org.apache.lucene.facet.simple; <nl> 
mmm IntPoint.java <nl> ppp IntPoint.java <nl> + import java.io.IOException; <nl> + import java.util.Arrays; <nl> + import org.apache.lucene.search.PointInSetQuery; <nl> + import org.apache.lucene.util.BytesRefIterator; <nl> + public static PointInSetQuery newSetQuery(String field, int... valuesIn) throws IOException { <nl> 
mmm _TestUtil.java <nl> ppp _TestUtil.java <nl> + import java.util.Map; <nl> + import java.util.HashMap; <nl> + import org.junit.Assert; <nl> + public static <T> void assertAttributeReflection(final AttributeImpl att, Map<String,T> reflectedValues) { <nl> + final Map<String,Object> map = new HashMap<String,Object>(); <nl> 
new file <nl> ppp SolrSchema.java <nl> + package org.apache.solr.handler.sql; <nl> + import com.google.common.collect.ImmutableMap; <nl> + import org.apache.calcite.rel.type.*; <nl> + import org.apache.calcite.schema.Table; <nl> + import org.apache.calcite.schema.impl.AbstractSchema; <nl> + import org.apache.calcite.sql.type.SqlTypeFactoryImpl; <nl> 
new file <nl> ppp NestableJsonFacet.java <nl> + package org.apache.solr.client.solrj.response.json; <nl> + import java.util.HashMap; <nl> + import java.util.HashSet; <nl> + import java.util.Map; <nl> + import java.util.Set; <nl> + import org.apache.solr.common.util.NamedList; <nl> + public class NestableJsonFacet { <nl> 
new file <nl> ppp FakeGroupMapping.java <nl> + package org.apache.solr.cloud.hdfs; <nl> + import java.util.Collections; <nl> + import java.util.List; <nl> + import org.apache.hadoop.security.GroupMappingServiceProvider; <nl> + public class FakeGroupMapping implements GroupMappingServiceProvider { <nl> + @Override <nl> 
mmm FacetRequest.java <nl> ppp FacetRequest.java <nl> - return new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg + " , path="+getPathStr()); <nl> + return new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg + " ,path="+getPathStr()); <nl> - throw err("Unknown facet type key=" + key + " class=" + (parsedValue == null ? "null" : parsedValue.getClass().getName())); <nl> 
new file <nl> ppp CompositeBreakIterator.java <nl> + package org.apache.lucene.analysis.icu.segmentation; <nl> + import com.ibm.icu.lang.UScript; <nl> + import com.ibm.icu.text.BreakIterator; <nl> + final class CompositeBreakIterator { <nl> + private final ICUTokenizerConfig config; <nl> + private final BreakIteratorWrapper wordBreakers[] = new BreakIteratorWrapper[UScript.CODE_LIMIT]; <nl> 
mmm TestDistributedGrouping.java <nl> ppp TestDistributedGrouping.java <nl> - simpleQuery("q", "*:*", "rows", 100, "fl", "id," + i1, "group", "true", "group.field", i1, "group.limit", 10, "sort", "score desc, _docid_ asc, id asc"); <nl> - simpleQuery("q", "*:*", "rows", 100, "fl", "id," + i1, "group", "true", "group.field", i1, "group.limit", 10); <nl> 
new file <nl> ppp SolrToEnumerableConverterRule.java <nl> + package org.apache.solr.handler.sql; <nl> + import org.apache.calcite.adapter.enumerable.EnumerableConvention; <nl> + import org.apache.calcite.plan.RelTraitSet; <nl> + import org.apache.calcite.rel.RelNode; <nl> + import org.apache.calcite.rel.convert.ConverterRule; <nl> 
mmm SolrCore.java <nl> ppp SolrCore.java <nl> - toLog.add("webapp", req.getContext().get("webapp")); <nl> - if (log.isInfoEnabled()) { <nl> - StringBuilder sb = new StringBuilder(logid); <nl> + if (log.isInfoEnabled() && toLog.size() > 0) { <nl> + StringBuilder sb = new StringBuilder(); <nl> - sb.append(name).append("=").append(val).append(" "); <nl> 
mmm AssertingPointsFormat.java <nl> ppp AssertingPointsFormat.java <nl> - public void writeField(FieldInfo fieldInfo, PointsReader values) throws IOException { <nl> + public void writeField(FieldInfo fieldInfo, PointsReader values, double maxMBSortInHeap) throws IOException { <nl> - in.writeField(fieldInfo, values); <nl> 
mmm V2Request.java <nl> ppp V2Request.java <nl> - public Builder GET() { <nl> - this.method = METHOD.GET; <nl> - return this; <nl> - } <nl> - public Builder POST() { <nl> - this.method = METHOD.POST; <nl> - return this; <nl> - } <nl> - public Builder DELETE() { <nl> - this.method = METHOD.DELETE; <nl> - return this; <nl> 
mmm ShortField.java <nl> ppp ShortField.java <nl> + import org.apache.solr.search.QParser; <nl> - public ValueSource getValueSource(SchemaField field) { <nl> + @Override <nl> + public ValueSource getValueSource(SchemaField field, QParser qparser) { <nl> mmm BoolField.java <nl> ppp BoolField.java <nl> + import org.apache.solr.search.QParser; <nl> 
mmm DocumentWriter.java <nl> ppp DocumentWriter.java <nl> + private Similarity similarity; <nl> - DocumentWriter(Directory d, Analyzer a, int mfl) { <nl> - directory = d; <nl> - analyzer = a; <nl> - maxFieldLength = mfl; <nl> + DocumentWriter(Directory directory, Analyzer analyzer, <nl> + Similarity similarity, int maxFieldLength) { <nl> 
mmm CSVField.java <nl> ppp CSVField.java <nl> mmm JSONParser.java <nl> ppp JSONParser.java <nl> mmm CSVConfig.java <nl> ppp CSVConfig.java <nl> mmm JaspellTernarySearchTrie.java <nl> ppp JaspellTernarySearchTrie.java <nl> - * <nl> - * @author Bruno Martins <nl> - * <nl> mmm CharBuffer.java <nl> ppp CharBuffer.java <nl> 
mmm Field.java <nl> ppp Field.java <nl> mmm ScoringRewrite.java <nl> ppp ScoringRewrite.java <nl> - *  @see #setRewriteMethod */ <nl> + *  @see MultiTermQuery#setRewriteMethod */ <nl> - *  @see #setRewriteMethod */ <nl> + *  @see MultiTermQuery#setRewriteMethod */ <nl> mmm BoostAttribute.java <nl> ppp BoostAttribute.java <nl> 
mmm CoreContainer.java <nl> ppp CoreContainer.java <nl> + containerHandlers.put("/blob-get", blobRepository.blobRead); <nl> - coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, (Exception) e)); <nl> + coreInitFailures.put(cd.getName(), new CoreLoadFailure(cd, e)); <nl> mmm PackageManager.java <nl> 
mmm SimCloudManager.java <nl> ppp SimCloudManager.java <nl> + import java.util.Locale; <nl> + import java.util.Set; <nl> + import org.apache.solr.client.solrj.cloud.autoscaling.ReplicaInfo; <nl> + import org.apache.solr.client.solrj.request.AbstractUpdateRequest; <nl> + import org.apache.solr.client.solrj.request.QueryRequest; <nl> 
mmm TestFstDirect.java <nl> ppp TestFstDirect.java <nl> - import java.io.BufferedReader; <nl> - import java.io.InputStreamReader; <nl> - import java.util.Collections; <nl> - import java.util.HashSet; <nl> - import java.util.Random; <nl> - import java.util.Set; <nl> - import org.junit.Ignore; <nl> - private static final int COUNT = 10_000_000; <nl> 
deleted file <nl> mmm ParentArray.java <nl> - package org.apache.lucene.facet.taxonomy.directory; <nl> - import java.io.IOException; <nl> - import org.apache.lucene.facet.taxonomy.TaxonomyReader; <nl> - import org.apache.lucene.index.CorruptIndexException; <nl> - import org.apache.lucene.index.DocsAndPositionsEnum; <nl> 
mmm MappingMultiPostingsEnum.java <nl> ppp MappingMultiPostingsEnum.java <nl> + final String field; <nl> - public MappingMultiPostingsEnum(MergeState mergeState) { <nl> + public MappingMultiPostingsEnum(String field, MergeState mergeState) { <nl> + this.field = field; <nl> - return current.nextPosition(); <nl> 
mmm DoubleRange.java <nl> ppp DoubleRange.java <nl> + import org.apache.lucene.search.FilteredDocIdSet; <nl> - final Bits fastMatchBits; <nl> + final DocIdSet fastMatchDocs; <nl> - DocIdSet dis = fastMatchFilter.getDocIdSet(context, null); <nl> - if (dis == null) { <nl> + fastMatchDocs = fastMatchFilter.getDocIdSet(context, null); <nl> 
mmm TestCharBlockArray.java <nl> ppp TestCharBlockArray.java <nl> + import java.nio.ByteBuffer; <nl> + import java.nio.charset.CharsetDecoder; <nl> + import java.nio.charset.CodingErrorAction; <nl> + import org.apache.lucene.util.IOUtils; <nl> - String s = new String(buffer, 0, size); <nl> + CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder() <nl> 
new file <nl> ppp TriggerSetPropertiesIntegrationTest.java <nl> + package org.apache.solr.cloud.autoscaling; <nl> + import java.lang.invoke.MethodHandles; <nl> + import java.util.ArrayList; <nl> + import java.util.Collections; <nl> + import java.util.HashSet; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> 
mmm LogLevel.java <nl> ppp LogLevel.java <nl> - import org.apache.logging.log4j.Level; <nl> - import org.apache.logging.log4j.core.LoggerContext; <nl> - import org.apache.logging.log4j.core.config.Configuration; <nl> - import org.apache.logging.log4j.core.config.LoggerConfig; <nl> + import org.apache.log4j.Level; <nl> 
mmm DokanyVolume.java <nl> ppp DokanyVolume.java <nl> - import com.google.common.base.Strings; <nl> + import org.cryptomator.common.mountpoint.InvalidMountPointException; <nl> + import org.cryptomator.common.mountpoint.MountPointChooser; <nl> - import java.io.IOException; <nl> - import java.nio.file.DirectoryNotEmptyException; <nl> 
mmm VaultDetailMissingVaultController.java <nl> ppp VaultDetailMissingVaultController.java <nl> - import javafx.fxml.FXML; <nl> - import org.cryptomator.common.vaults.VaultListManager; <nl> - 	@FXML <nl> - 	public void recheck() { <nl> - 		VaultListManager.redetermineVaultState(vault.get()); <nl> - 	} <nl> mmm FxApplicationStarter.java <nl> 
mmm WebDavServletContextFactory.java <nl> ppp WebDavServletContextFactory.java <nl> - 			try { <nl> - 				final Class<?> applicationClass = Class.forName("com.apple.eawt.Application"); <nl> - 				final Class<?> openFilesHandlerClass = Class.forName("com.apple.eawt.OpenFilesHandler"); <nl> - 				final Method getApplication = applicationClass.getMethod("getApplication"); <nl> 
mmm InitializeController.java <nl> ppp InitializeController.java <nl> + 			directory.getCryptor().randomizeMasterKey(); <nl> + 	 <nl> + 	 <nl> - 		alert.setHeaderText(null); <nl> + 		alert.setHeaderText(localization.getString("initialize.alert.directoryIsNotEmpty.header")); <nl> + 	 <nl> + 	 <nl> mmm AbstractCryptor.java <nl> 
mmm DokanyVolume.java <nl> ppp DokanyVolume.java <nl> - 	public DokanyVolume(VaultSettings vaultSettings, ExecutorService executorService, @Named("orderedMountPointChoosers") SortedSet<MountPointChooser> choosers) { <nl> + 	public DokanyVolume(VaultSettings vaultSettings, ExecutorService executorService, @Named("orderedMountPointChoosers") Iterable<MountPointChooser> choosers) { <nl> 
mmm FxApplicationModule.java <nl> ppp FxApplicationModule.java <nl> + import dagger.Binds; <nl> + import javafx.application.Application; <nl> + import javafx.application.Platform; <nl> + import javafx.stage.Stage; <nl> - class FxApplicationModule { <nl> + abstract class FxApplicationModule { <nl> - 	Consumer<Runnable> provideShutdownTaskScheduler() { <nl> 
mmm AuthMethodPickerActivityTest.java <nl> ppp AuthMethodPickerActivityTest.java <nl> - Button emailButton = (Button) authMethodPickerActivity.findViewById(R.id.email_provider); <nl> + Button emailButton = (Button) authMethodPickerActivity.findViewById(R.id.email_button); <nl> + assertEquals(providers.size(), <nl> 
mmm AuthViewModelBase.java <nl> ppp AuthViewModelBase.java <nl> - import com.google.android.gms.auth.api.credentials.Credentials; <nl> + import com.firebase.ui.auth.util.GoogleApiUtils; <nl> - mCredentialsClient = Credentials.getClient(getApplication()); <nl> + mCredentialsClient = GoogleApiUtils.getCredentialsClient(getApplication()); <nl> 
mmm ResourceObserver.java <nl> ppp ResourceObserver.java <nl> + import android.util.Log; <nl> + Log.d("DIALOG", "Shown by: " + resource.toString()); <nl> mmm PhoneActivityTest.java <nl> ppp PhoneActivityTest.java <nl> - String.valueOf(((CountryInfo) mCountryListSpinner.getTag()).getCountryCode())); <nl> + String.valueOf((mCountryListSpinner.getSelectedCountryInfo()).getCountryCode())); <nl> 
mmm ChooseAccountActivity.java <nl> ppp ChooseAccountActivity.java <nl> - import android.net.ConnectivityManager; <nl> - import static com.firebase.ui.auth.ui.ResultCodes.RESULT_NO_NETWORK; <nl> - if (!hasNetworkConnection()) { <nl> - Log.d(TAG, "No network connection"); <nl> - finish(RESULT_NO_NETWORK, new Intent()); <nl> 
mmm EmailFlowControllerTest.java <nl> ppp EmailFlowControllerTest.java <nl> - import static org.mockito.Mockito.any; <nl> - import static org.mockito.Mockito.anyString; <nl> - import static org.mockito.Mockito.when; <nl> - import static junit.framework.Assert.assertEquals; <nl> - import com.firebase.ui.auth.api.FactoryHeadlessAPIShadow; <nl> 
mmm ConfirmRecoverPasswordActivity.java <nl> ppp ConfirmRecoverPasswordActivity.java <nl> - import com.firebase.ui.auth.ui.NoControllerBaseActivity; <nl> + import com.firebase.ui.auth.ui.AppCompatBase; <nl> - public class ConfirmRecoverPasswordActivity <nl> - extends NoControllerBaseActivity <nl> - implements View.OnClickListener { <nl> 
mmm FirebaseOAuthToken.java <nl> ppp FirebaseOAuthToken.java <nl> - package com.firebase.ui.com.firebasei.ui.authimpl; <nl> + package com.firebase.ui.authimpl; <nl> mmm FirebaseAuthHelper.java <nl> ppp FirebaseAuthHelper.java <nl> - package com.firebase.ui.com.firebasei.ui.authimpl; <nl> + package com.firebase.ui.authimpl; <nl> 
deleted file <nl> mmm GoogleApiClientTaskHelper.java <nl> - package com.firebase.ui.auth.util; <nl> - import android.app.Activity; <nl> - import android.os.Bundle; <nl> - import android.support.annotation.NonNull; <nl> - import android.support.annotation.Nullable; <nl> - import com.google.android.gms.common.ConnectionResult; <nl> 
mmm ProgressDialogHolder.java <nl> ppp ProgressDialogHolder.java <nl> - if (isProgressDialogShowing()) { <nl> + if (mProgressDialog != null) { <nl> + mProgressDialog = null; <nl> - mProgressDialog = null; <nl> mmm WelcomeBackPasswordPrompt.java <nl> ppp WelcomeBackPasswordPrompt.java <nl> - import android.widget.Button; <nl> 
mmm Preconditions.java <nl> ppp Preconditions.java <nl> - private Preconditions() {} <nl> + private Preconditions() { <nl> + } <nl> mmm AbstractTextContainerDeserializer.java <nl> ppp AbstractTextContainerDeserializer.java <nl> - return name == null ? container : builder().withOperation(name).withText(container.getText()).withProps(container.getProps()).build(); <nl> 
mmm RenamePreference.java <nl> ppp RenamePreference.java <nl> - public void testRename_User() throws Exception { <nl> - rename(TrayStorage.Type.USER); <nl> - } <nl> - private void rename(final TrayStorage.Type type) { <nl> + public void testRename_User() throws Exception { <nl> + rename(TrayStorage.Type.USER); <nl> 
mmm AuthTest.java <nl> ppp AuthTest.java <nl> + private volatile KsqlUserContextProvider userContextProvider; <nl> - return Optional.empty(); <nl> + return Optional.ofNullable(userContextProvider); <nl> - protected HttpResponse<Buffer> sendRequest(final WebClient client, final String uri, <nl> + protected HttpResponse<Buffer> sendGetRequest(final String uri) throws Exception { <nl> 
mmm Histogram.java <nl> ppp Histogram.java <nl> - private BlockingStrategy lockingStrategy; <nl> + private final BlockingStrategy lockingStrategy; <nl> mmm ProducerType.java <nl> ppp ProducerType.java <nl> mmm EventProcessorInfo.java <nl> ppp EventProcessorInfo.java <nl> mmm Disruptor.java <nl> ppp Disruptor.java <nl> 
mmm MemoryPubSubStore.java <nl> ppp MemoryPubSubStore.java <nl> + import com.corundumstudio.socketio.store.pubsub.PubSubType; <nl> - public void publish(String name, PubSubMessage msg) { <nl> + public void publish(PubSubType type, PubSubMessage msg) { <nl> - public <T extends PubSubMessage> void subscribe(String name, PubSubListener<T> listener, Class<T> clazz) { <nl> 
mmm MyKafkaTableSource.java <nl> ppp MyKafkaTableSource.java <nl> - package com.zhisheng.sql.blink.stream.customTableSource; <nl> + package com.zhisheng.sql.blink.stream.tableSource; <nl> mmm MyAppendStreamTableSink.java <nl> ppp MyAppendStreamTableSink.java <nl> - package com.zhisheng.sql.blink.stream.customTableSink; <nl> 
mmm GeminiLimitOrder.java <nl> ppp GeminiLimitOrder.java <nl> mmm HuobiTradeServiceRaw.java <nl> ppp HuobiTradeServiceRaw.java <nl> - import org.knowm.xchange.service.trade.params.TradeHistoryParams; <nl> + import org.knowm.xchange.service.trade.params.CurrencyPairParam; <nl> - HuobiOrder[] getHuobiTradeHistory(TradeHistoryParams tradeHistoryParams) throws IOException { <nl> 
deleted file <nl> mmm CoinmateWebsocketOpenOrderTest.java <nl> - package info.bitrich.xchange.coinmate; <nl> - import com.fasterxml.jackson.core.type.TypeReference; <nl> - import com.fasterxml.jackson.databind.JsonNode; <nl> - import info.bitrich.xchange.coinmate.dto.CoinmateWebsocketOpenOrder; <nl> - import info.bitrich.xchangestream.service.netty.StreamingObjectMapperHelper; <nl> 
mmm OkexTradeServiceRaw.java <nl> ppp OkexTradeServiceRaw.java <nl> - OrderPlacementResponse res = okex.marginPlaceOrder(apikey, digest, timestamp(), passphrase, req); <nl> + OrderPlacementResponse res = <nl> + okex.marginPlaceOrder(apikey, digest, timestamp(), passphrase, req); <nl> - String instrumentId, String from, String to, Integer limit, String state) throws IOException { <nl> 
mmm CoinmateStreamingMarketDataService.java <nl> ppp CoinmateStreamingMarketDataService.java <nl> - import com.fasterxml.jackson.databind.DeserializationFeature; <nl> - String channelName = "order_book-" + getChannelPostfix(currencyPair); <nl> + String channelName = "order_book-" + CoinmateStreamingAdapter.getChannelPostfix(currencyPair); <nl> 
mmm Cryptowatch.java <nl> ppp Cryptowatch.java <nl> - @Path("/") <nl> + @Path("0") <nl> - @QueryParam("before") Long before, <nl> - @QueryParam("after") Long after, <nl> - @QueryParam("periods") Integer periods); <nl> + @QueryParam("before") long before, <nl> + @QueryParam("after") long after, <nl> + @QueryParam("periods") int periods); <nl> 
mmm HuobiBaseService.java <nl> ppp HuobiBaseService.java <nl> + import org.knowm.xchange.huobi.dto.HuobiResultV2; <nl> + protected <R> R checkResult(HuobiResultV2<R> huobiResult) { <nl> + if (!huobiResult.isSuccess()) { <nl> + String huobiError = huobiResult.getMessage(); <nl> + if (huobiError.length() == 0) { <nl> 
mmm CoinmateStreamingAccountService.java <nl> ppp CoinmateStreamingAccountService.java <nl> - package info.bitrich.xchange.coinmate; <nl> + package info.bitrich.xchangestream.coinmate; <nl> - import info.bitrich.xchange.coinmate.dto.CoinmateWebsocketBalance; <nl> + import info.bitrich.xchangestream.coinmate.dto.CoinmateWebsocketBalance; <nl> 
mmm LgoAdaptersTest.java <nl> ppp LgoAdaptersTest.java <nl> - LgoPlaceOrder bidOrder = LgoAdapters.adaptMarketOrder(marketOrder); <nl> + LgoPlaceOrder bidOrder = LgoAdapters.adaptEncryptedMarketOrder(marketOrder); <nl> - LgoPlaceOrder bidOrder = LgoAdapters.adaptMarketOrder(marketOrder); <nl> + LgoPlaceOrder bidOrder = LgoAdapters.adaptEncryptedMarketOrder(marketOrder); <nl> 
mmm DirectProxy.java <nl> ppp DirectProxy.java <nl> - import java.util.Collections; <nl> - public class MockServerAutoAllocatedPortIntegrationTest extends AbstractMockServerNettyIntegrationTest { <nl> + public class MockServerAutoAllocatedPortIntegrationTest extends AbstractRestartableMockServerNettyIntegrationTest { <nl> 
mmm OQueryOperatorPlus.java <nl> ppp OQueryOperatorPlus.java <nl> - import java.math.BigDecimal; <nl> - import java.util.Date; <nl> + import java.math.BigDecimal; <nl> + import java.util.Date; <nl> + package com.orientechnologies.orient.core.sql.operator; <nl> + import com.orientechnologies.orient.core.sql.operator.math.OQueryOperatorMultiply; <nl> 
mmm RequireTransactionTest.java <nl> ppp RequireTransactionTest.java <nl> + import static org.junit.Assert.assertFalse; <nl> + import static org.junit.Assert.assertTrue; <nl> + import org.junit.AfterClass; <nl> + import org.junit.BeforeClass; <nl> + import org.junit.Test; <nl> - import org.junit.Test; <nl> + import com.tinkerpop.blueprints.impls.orient.OrientGraph; <nl> 
mmm OIndexRemoteMultiValue.java <nl> ppp OIndexRemoteMultiValue.java <nl> - public OIndexRemoteMultiValue(final String iName, final String iWrappedType, final ORID iRid, <nl> + public OIndexRemoteMultiValue(final String iName, final String iWrappedType, final String algorithm, final ORID iRid, <nl> - super(iName, iWrappedType, iRid, iIndexDefinition, iConfiguration, clustersToIndex); <nl> 
mmm ORoundRobinClusterSelectionStrategy.java <nl> ppp ORoundRobinClusterSelectionStrategy.java <nl> + import com.orientechnologies.orient.core.record.impl.ODocument; <nl> - public int getCluster(final OClass clazz) { <nl> + public int getCluster(final OClass clazz, final ODocument doc) { <nl> mmm ODocument.java <nl> 
mmm OrderByStep.java <nl> ppp OrderByStep.java <nl> - private final long timeoutMillis; <nl> - public OrderByStep( <nl> - OOrderBy orderBy, OCommandContext ctx, long timeoutMillis, boolean profilingEnabled) { <nl> - this(orderBy, null, ctx, timeoutMillis, profilingEnabled); <nl> + public OrderByStep(OOrderBy orderBy, OCommandContext ctx, boolean profilingEnabled) { <nl> 
mmm ODistributedMessageService.java <nl> ppp ODistributedMessageService.java <nl> + void registerRequest(final long id, final ODistributedResponseManager currentResponseMgr); <nl> new file <nl> ppp ODistributedMessage.java <nl> + package com.orientechnologies.orient.server.distributed; <nl> + import java.io.DataInput; <nl> 
mmm ODocumentComparator.java <nl> ppp ODocumentComparator.java <nl> mmm TestOrderBy.java <nl> ppp TestOrderBy.java <nl> - @Test <nl> + @Test(enabled = false) <nl> mmm OTxTask.java <nl> ppp OTxTask.java <nl> - for (String f : ((ODocument) record).fieldNames()) { <nl> - final Object fValue = ((ODocument) record).field(f); <nl> 
mmm OLocalPaginatedStorage.java <nl> ppp OLocalPaginatedStorage.java <nl> - lastLSN = writeAheadLog.end(); <nl> + lastLSN = writeAheadLog.end(); <nl> mmm OHashTableDirectory.java <nl> ppp OHashTableDirectory.java <nl> + import com.orientechnologies.orient.core.exception.OStorageException; <nl> - return atomicOperationsManager.startAtomicOperation(this); <nl> 
mmm FetchTemporaryFromTxStep.java <nl> ppp FetchTemporaryFromTxStep.java <nl> - if (schema.getName().equals(className)) { <nl> + if (schema == null) <nl> + return className == null; <nl> + else if (schema.getName().equals(className)) { <nl> - } <nl> - if (schema.isSubClassOf(className)) { <nl> + } else if (schema.isSubClassOf(className)) { <nl> 
mmm ONodeJoin.java <nl> ppp ONodeJoin.java <nl> + import com.orientechnologies.orient.distributed.impl.coordinator.transaction.OSessionOperationId; <nl> + import java.util.Optional; <nl> + @Override <nl> + public Optional<OSessionOperationId> getRequesterSequential() { <nl> + return Optional.empty(); <nl> + } <nl> 
new file <nl> ppp InsertValuesStep.java <nl> + package com.orientechnologies.orient.core.sql.executor; <nl> + import com.orientechnologies.common.concur.OTimeoutException; <nl> + import com.orientechnologies.orient.core.command.OCommandContext; <nl> + import com.orientechnologies.orient.core.exception.OCommandExecutionException; <nl> 
mmm ORecordIteratorClass.java <nl> ppp ORecordIteratorClass.java <nl> - import java.util.Arrays; <nl> + import com.orientechnologies.orient.core.db.record.ORecordOperation; <nl> + import java.util.Arrays; <nl> - import java.io.IOException; <nl> - import org.testng.Assert; <nl> - import org.testng.annotations.Optional; <nl> 
mmm IndexChangesInterpretationTest.java <nl> ppp IndexChangesInterpretationTest.java <nl> - { "p1", "p1", "p1", "p1" }, { "r1", "r", "r", "r1" }, { "d", "d", "d", "d" }, <nl> - { "p1 p2", "{p1 p2}", "p2", "{p1 p2}" }, { "p1 r1", "", "", "" }, { "p1 r2", "r p1", "p1", "{p1 r2}" }, <nl> - { "r1 r2", "r", "r", "{r1 r2}" }, { "r1 p1", "r p1", "p1", "p1" }, <nl> 
mmm OFetchHelper.java <nl> ppp OFetchHelper.java <nl> - private static int getDepthLevel(final OFetchPlan iFetchPlan, final String iFieldPath, final int iCurrentLevel) { <nl> - return iFetchPlan.getDepthLevel(iFieldPath, iCurrentLevel); <nl> + private static int getDepthLevel(final OFetchPlan iFetchPlan, final String iFieldPath) { <nl> 
mmm OGlobalConfiguration.java <nl> ppp OGlobalConfiguration.java <nl> + @Deprecated <nl> mmm AbstractRemoteTaskTest.java <nl> ppp AbstractRemoteTaskTest.java <nl> - to.fromStream(in, new ODefaultRemoteTaskFactoryV2()); <nl> + to.fromStream(in, new ODefaultRemoteTaskFactoryV3()); <nl> deleted file <nl> mmm ODefaultRemoteTaskFactoryV1.java <nl> 
mmm OHttpRequestException.java <nl> ppp OHttpRequestException.java <nl> + * <nl> + *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com) <nl> + *  * <nl> + *  *  Licensed under the Apache License, Version 2.0 (the "License"); <nl> + *  *  you may not use this file except in compliance with the License. <nl> 
new file <nl> ppp OSecurityTrackerHook.java <nl> + package com.orientechnologies.orient.core.metadata.security; <nl> + import com.orientechnologies.orient.core.db.document.ODatabaseDocument; <nl> + import com.orientechnologies.orient.core.hook.ODocumentHookAbstract; <nl> + import com.orientechnologies.orient.core.metadata.schema.OImmutableClass; <nl> 
new file <nl> ppp OOutPathItemOpt.java <nl> + package com.orientechnologies.orient.core.sql.parser; <nl> + public class OOutPathItemOpt extends OOutPathItem { <nl> + public OOutPathItemOpt(int id) { <nl> + super(id); <nl> + } <nl> + public OOutPathItemOpt(OrientSql p, int id) { <nl> + super(p, id); <nl> + } <nl> 
new file <nl> ppp LuceneMixIndexTest.java <nl> + package com.orientechnologies.lucene.test; <nl> + import com.orientechnologies.orient.core.command.script.OCommandScript; <nl> + import com.orientechnologies.orient.core.metadata.schema.OClass; <nl> + import com.orientechnologies.orient.core.metadata.schema.OSchema; <nl> 
mmm OHashIndexFactory.java <nl> ppp OHashIndexFactory.java <nl> - import java.util.Collections; <nl> - import java.util.HashSet; <nl> - import java.util.Set; <nl> - import com.orientechnologies.common.log.OLogManager; <nl> - import com.orientechnologies.orient.core.storage.impl.local.paginated.base.ODurablePage; <nl> 
mmm CellBTreeMultiValueV2BucketAppendNewLeafEntryPO.java <nl> ppp CellBTreeMultiValueV2BucketAppendNewLeafEntryPO.java <nl> - public final class CellBTreeMultiValueV2BucketAppendNewLeafEntryPO extends PageOperationRecord { <nl> + public class CellBTreeMultiValueV2BucketAppendNewLeafEntryPO extends PageOperationRecord { <nl> 
mmm ODatabaseInternal.java <nl> ppp ODatabaseInternal.java <nl> + @Deprecated <nl> mmm ODatabase.java <nl> ppp ODatabase.java <nl> + @Deprecated <nl> + @Deprecated <nl> + @Deprecated <nl> + @Deprecated <nl> + public class OrientDBSettings { <nl> + public Map<String, Object> configurations; <nl> + public static OrientDBSettings fromMap(Map<String, Object> configurations) { <nl> 
mmm OViewRemote.java <nl> ppp OViewRemote.java <nl> - protected OViewRemote(OSchemaShared iOwner, String iName) { <nl> - super(iOwner, iName); <nl> - } <nl> - protected OViewRemote(OSchemaShared iOwner, String iName, int[] iClusterIds) { <nl> - super(iOwner, iName, iClusterIds); <nl> - } <nl> mmm OViewImpl.java <nl> 
mmm ODatabaseRecordTx.java <nl> ppp ODatabaseRecordTx.java <nl> + * <nl> + *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com) <nl> + *  * <nl> + *  *  Licensed under the Apache License, Version 2.0 (the "License"); <nl> + *  *  you may not use this file except in compliance with the License. <nl> 
mmm OETLHandler.java <nl> ppp OETLHandler.java <nl> + import com.orientechnologies.common.thread.OThreadPoolExecutorWithLogging; <nl> + import java.util.concurrent.LinkedBlockingQueue; <nl> + import java.util.concurrent.TimeUnit; <nl> - private ExecutorService pool       = Executors.newFixedThreadPool(1); <nl> 
mmm OStructuralDistributedMember.java <nl> ppp OStructuralDistributedMember.java <nl> + import com.orientechnologies.orient.distributed.impl.structural.raft.ORaftOperation; <nl> + public void propagate(OLogId id, ORaftOperation operation) { <nl> + channel.propagate(id, operation); <nl> + } <nl> + public void confirm(OLogId id) { <nl> 
mmm OSQLFunctionShortestPath.java <nl> ppp OSQLFunctionShortestPath.java <nl> - if (iParams != null && iParams.length > 2 && iParams[3] instanceof Collection) { <nl> + if (iParams != null && iParams.length > 3 && iParams[3] instanceof Collection) { <nl> mmm StorageNamingTests.java <nl> ppp StorageNamingTests.java <nl> 
mmm OEdge.java <nl> ppp OEdge.java <nl> - public static final String DIRECTION_OUT = "out"; <nl> - public static final String DIRECTION_IN  = "in"; <nl> - @Deprecated <nl> - public static final String DIRECITON_OUT = DIRECTION_OUT; <nl> - @Deprecated <nl> - public static final String DIRECITON_IN  = DIRECTION_IN; <nl> 
mmm ORecordSerializerBinaryV0.java <nl> ppp ORecordSerializerBinaryV0.java <nl> - OType type = getTypeFromValue(value, true); <nl> + OType type = getTypeFromValueEmbedded(value); <nl> - type = getTypeFromValue(itemValue, true); <nl> + type = getTypeFromValueEmbedded(itemValue); <nl> - type = getTypeFromValue(fieldValue, false); <nl> 
mmm StorageNamingTests.java <nl> ppp StorageNamingTests.java <nl> + @Override <nl> + public boolean supportIncremental() { <nl> + return false; <nl> + } <nl> mmm OrientDBDistributed.java <nl> ppp OrientDBDistributed.java <nl> - public OStorage fullSync(String dbName, String backupPath, OrientDBConfig config) { <nl> 
mmm OExecutionPlanCache.java <nl> ppp OExecutionPlanCache.java <nl> - if (statement == null) { <nl> - return null; <nl> - } <nl> - if (statement == null) { <nl> - return; <nl> - } <nl> - if (statement == null) { <nl> - return; <nl> - } <nl> - if (statement == null) { <nl> - return null; <nl> - } <nl> mmm OServerCommandAuthenticatedServerAbstract.java <nl> 
mmm ODatabase.java <nl> ppp ODatabase.java <nl> - schema.reload(); <nl> mmm AsyncIndexTest.java <nl> ppp AsyncIndexTest.java <nl> - if(graph.exists()){ <nl> - graph.open("admin", "admin"); <nl> + if(graph2.exists()){ <nl> + graph2.open("admin", "admin"); <nl> - graph.create(); <nl> + graph2.create(); <nl> mmm TestSharding.java <nl> 
mmm OStorageRemoteAsyncOperationTest.java <nl> ppp OStorageRemoteAsyncOperationTest.java <nl> - storage = new OStorageRemote("mock", "mock", null) { <nl> + storage = new OStorageRemote("mock",null, "mock", null) { <nl> mmm ODatabaseDocumentTx.java <nl> ppp ODatabaseDocumentTx.java <nl> + @Deprecated <nl> - return null; <nl> 
mmm SQLFunctionSymmetricDifferenceTest.java <nl> ppp SQLFunctionSymmetricDifferenceTest.java <nl> - import java.util.*; <nl> + import java.util.ArrayList; <nl> + import java.util.Arrays; <nl> + import java.util.HashSet; <nl> + import java.util.List; <nl> + import java.util.Set; <nl> - final OSQLFunctionSymmetricDifference merger = new OSQLFunctionSymmetricDifference(); <nl> 
mmm OCompositeKeySerializer.java <nl> ppp OCompositeKeySerializer.java <nl> mmm OStreamSerializerSBTreeIndexRIDContainer.java <nl> ppp OStreamSerializerSBTreeIndexRIDContainer.java <nl> mmm OUUIDSerializer.java <nl> ppp OUUIDSerializer.java <nl> mmm ODecimalSerializer.java <nl> ppp ODecimalSerializer.java <nl> 
mmm ORecordSerializerRaw.java <nl> ppp ORecordSerializerRaw.java <nl> - public <RET> RET deserializeFieldFromEmbedded(byte[]record, String iFieldName, int serializerVersion){ <nl> + public <RET> RET deserializeFieldFromEmbedded(byte[]record, int offset, String iFieldName, int serializerVersion){ <nl> - public String[] getFieldNamesEmbedded(ODocument reference, byte[] iSource, int serializerVersion) { <nl> 
mmm BlueprintsConcurrentGraphChangesTestTx.java <nl> ppp BlueprintsConcurrentGraphChangesTestTx.java <nl> - public class BlueprintsConcurrentAddEdgeTestInTx extends BlueprintsConcurrentAddEdgeTestNoTx { <nl> + public class BlueprintsConcurrentGraphChangesTestTx extends BlueprintsConcurrentGraphChangesTestNoTx { <nl> 
mmm OWOWCache.java <nl> ppp OWOWCache.java <nl> - public void makeFuzzyCheckpoint(final long segmentId) throws IOException { <nl> + public void makeFuzzyCheckpoint(final long segmentId, Optional<byte[]> lastMetadata) throws IOException { <nl> - writeAheadLog.logFuzzyCheckPointStart(startLSN); <nl> + writeAheadLog.logFuzzyCheckPointStart(startLSN, lastMetadata); <nl> 
mmm ODistributedCoordinatorTest.java <nl> ppp ODistributedCoordinatorTest.java <nl> + import com.orientechnologies.orient.core.db.ODatabaseDocumentInternal; <nl> - public ONodeResponse execute(ODistributedMember nodeFrom, OLogId opId, ODistributedExecutor executor) { <nl> + public ONodeResponse execute(ODistributedMember nodeFrom, OLogId opId, ODistributedExecutor executor, <nl> 
mmm AsyncFileTest.java <nl> ppp AsyncFileTest.java <nl> - final AsyncFile file = new AsyncFile(buildDirectoryPath, 1, true); <nl> + final AsyncFile file = new AsyncFile(buildDirectoryPath, true); <nl> - AsyncFile file = new AsyncFile(buildDirectoryPath, 1, true); <nl> + AsyncFile file = new AsyncFile(buildDirectoryPath, true); <nl> 
mmm OGlobalConfiguration.java <nl> ppp OGlobalConfiguration.java <nl> - CACHE_LOCAL_ENABLED("cache.local.enabled", "Use the local cache", Boolean.class, true), <nl> + CACHE_LOCAL_ENABLED("cache.level1.enabled", "Use the level-1 cache", Boolean.class, true), <nl> + CACHE_LOCAL_SIZE("cache.level1.size", "Size of the cache that keeps the record in memory", Integer.class, -1), <nl> 
mmm ODefaultSQLFunctionFactory.java <nl> ppp ODefaultSQLFunctionFactory.java <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + import java.util.Set; <nl> - import com.orientechnologies.orient.core.sql.functions.sequence.OSQLFunctionSequence; <nl> - import java.util.HashMap; <nl> - import java.util.Map; <nl> 
mmm JingleTransport.java <nl> ppp JingleTransport.java <nl> - 	public abstract void disconnect(); <nl> mmm Downloadable.java <nl> ppp Downloadable.java <nl> - 	public final String[] VALID_IMAGE_EXTENSIONS = {"webp", "jpeg", "jpg", "png", "jpe"}; <nl> + 	public final String[] VALID_EXTENSIONS = {"webp", "jpeg", "jpg", "png", "jpe"}; <nl> 
new file <nl> ppp Color.java <nl> + package eu.siacs.conversations.ui.util; <nl> + import android.content.Context; <nl> + import android.content.res.Resources; <nl> + import android.support.annotation.AttrRes; <nl> + import android.support.annotation.ColorInt; <nl> + import android.util.TypedValue; <nl> + public class Color { <nl> 
mmm MessagePacket.java <nl> ppp MessagePacket.java <nl> + import android.util.Pair; <nl> + import java.text.ParseException; <nl> + import eu.siacs.conversations.parser.AbstractParser; <nl> - 		Element body = this.findChild("body"); <nl> - 		if (body != null) { <nl> - 			return body.getContent(); <nl> - 		} else { <nl> 
mmm JingleSocks5Transport.java <nl> ppp JingleSocks5Transport.java <nl> + 					fileInputStream = connection.getFileInputStream(); <nl> - 					long size = file.getSize(); <nl> + 					long size = file.getExpectedSize(); <nl> - 					fileOutputStream = createOutputStream(file); <nl> + 					fileOutputStream = connection.getFileOutputStream(); <nl> 
mmm UIHelper.java <nl> ppp UIHelper.java <nl> - 			if (message.getStatus() == Message.STATUS_RECEIVED) { <nl> - 				return new Pair<>(context.getString(R.string.received_x_file, <nl> - 						getFileDescriptionString(context, message)), true); <nl> - 			} else { <nl> - 				return new Pair<>(getFileDescriptionString(context, message), true); <nl> 
mmm UriHandlerActivity.java <nl> ppp UriHandlerActivity.java <nl> - } <nl> + } <nl> new file <nl> ppp Marker.java <nl> + package eu.siacs.conversations.ui.widget; <nl> + import android.graphics.Bitmap; <nl> + import android.graphics.Canvas; <nl> + import android.graphics.Point; <nl> + import org.osmdroid.util.GeoPoint; <nl> 
deleted file <nl> mmm LocationActivity.java <nl> - package eu.siacs.conversations.ui; <nl> - import android.Manifest; <nl> - import android.annotation.TargetApi; <nl> - import android.content.Context; <nl> - import android.content.SharedPreferences; <nl> - import android.content.pm.PackageManager; <nl> - import android.graphics.Bitmap; <nl> 
mmm XmppAxolotlSession.java <nl> ppp XmppAxolotlSession.java <nl> - 	public byte[] processReceiving(AxolotlKey encryptedKey) throws CryptoFailedException { <nl> + 	byte[] processReceiving(AxolotlKey encryptedKey) throws CryptoFailedException { <nl> - 				if (encryptedKey.prekey) { <nl> - 					PreKeySignalMessage preKeySignalMessage = new PreKeySignalMessage(encryptedKey.key); <nl> 
mmm BaseBindPlayerEvent.java <nl> ppp BaseBindPlayerEvent.java <nl> - public abstract class BaseCoverBindPlayerObserver extends BaseBindCover implements IPlayer { <nl> + public abstract class BaseBindPlayerEvent extends BaseBindEventReceiver implements IPlayer { <nl> - public BaseCoverBindPlayerObserver(@NonNull Context context) { <nl> 
mmm GroupValue.java <nl> ppp GroupValue.java <nl> + return getBoolean(key, false); <nl> + } <nl> + public boolean getBoolean(String key, boolean defaultValue){ <nl> - return false; <nl> + return defaultValue; <nl> + return getInt(key, 0); <nl> + } <nl> + public int getInt(String key, int defaultValue){ <nl> - return -1; <nl> 
mmm FloatWindowParams.java <nl> ppp FloatWindowParams.java <nl> + private boolean defaultAnimation = true; <nl> + public boolean isDefaultAnimation() { <nl> + return defaultAnimation; <nl> + } <nl> + public FloatWindowParams setDefaultAnimation(boolean defaultAnimation) { <nl> + this.defaultAnimation = defaultAnimation; <nl> 
mmm JobItem.java <nl> ppp JobItem.java <nl> + import com.google.gwt.resources.client.ClientBundle; <nl> + import com.google.gwt.resources.client.ImageResource; <nl> + public interface JobResources extends ClientBundle <nl> + { <nl> + @Source("spinner_2x.png") <nl> + ImageResource jobSpinner(); <nl> + @Source("select_2x.png") <nl> 
mmm PanmirrorZoteroServerOperations.java <nl> ppp PanmirrorZoteroServerOperations.java <nl> + void zoteroGetCollectionSpecs(ServerRequestCallback<JavaScriptObject> callback); <nl> mmm SourceColumnManager.java <nl> ppp SourceColumnManager.java <nl> - import com.google.gwt.dom.client.Element; <nl> - import org.rstudio.core.client.dom.DomUtils; <nl> 
mmm PanmirrorCommandPaletteEntry.java <nl> ppp PanmirrorCommandPaletteEntry.java <nl> - import org.rstudio.studio.client.application.ui.CommandPaletteEntry; <nl> + import org.rstudio.studio.client.application.ui.CommandPaletteCommand; <nl> - public class PanmirrorCommandPaletteEntry extends CommandPaletteEntry <nl> 
new file <nl> ppp CommandPalette.java <nl> + package org.rstudio.studio.client.application.ui; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import org.rstudio.core.client.DebouncedCommand; <nl> + import org.rstudio.core.client.ElementIds; <nl> + import org.rstudio.core.client.StringUtil; <nl> 
mmm PanmirrorCommandPaletteItem.java <nl> ppp PanmirrorCommandPaletteItem.java <nl> - return super.labelMatchesSearch(cmd_.getFullMenuText(), keywords); <nl> + return super.labelMatchesSearch("visual editor " + cmd_.getFullMenuText(), keywords); <nl> deleted file <nl> mmm PanmirrorServerOperations.java <nl> 
mmm PanmirrorEditor.java <nl> ppp PanmirrorEditor.java <nl> + public native String getSelectedText(); <nl> + public native void replaceSelection(String value); <nl> new file <nl> ppp SetEditorSelectionEvent.java <nl> + package org.rstudio.studio.client.workbench.views.source.editors.text.events; <nl> + import org.rstudio.studio.client.application.events.CrossWindowEvent; <nl> 
new file <nl> ppp LabelBase.java <nl> + package com.google.gwt.user.client.ui; <nl> + import com.google.gwt.dom.client.Document; <nl> + import com.google.gwt.dom.client.Element; <nl> + import com.google.gwt.dom.client.Style.WhiteSpace; <nl> + import com.google.gwt.i18n.shared.DirectionEstimator; <nl> + import com.google.gwt.i18n.shared.HasDirectionEstimator; <nl> 
mmm ToolbarButton.java <nl> ppp ToolbarButton.java <nl> - this(text, title, leftImg, new ClickHandler() { <nl> - public void onClick(ClickEvent event) <nl> - { <nl> - eventBus.fireEvent(targetEvent); <nl> - } <nl> - }); <nl> + this(text, title, leftImg, event -> eventBus.fireEvent(targetEvent)); <nl> - this(text, title, new SimpleImageResourceProvider(leftImage), (ClickHandler)null); <nl> 
new file <nl> ppp TabLayoutPanel.java <nl> + package com.google.gwt.user.client.ui; <nl> + import com.google.gwt.aria.client.Id; <nl> + import com.google.gwt.aria.client.Roles; <nl> + import com.google.gwt.aria.client.SelectedValue; <nl> + import com.google.gwt.dom.client.Document; <nl> + import com.google.gwt.dom.client.Element; <nl> 
mmm PaneManager.java <nl> ppp PaneManager.java <nl> - ArrayList<Widget> sourceColumns; <nl> + ArrayList<Widget> sourceColumns = new ArrayList<>(); <nl> - sourceColumns = new ArrayList<>(sourceColumnManager_.getWidgets(true)); <nl> - else <nl> - sourceColumns =  new ArrayList<>(); <nl> + { <nl> + if (userPrefs_.allowSourceColumns().getGlobalValue()) <nl> 
mmm VisualModeChunks.java <nl> ppp VisualModeChunks.java <nl> - import org.rstudio.core.client.CommandWithArg; <nl> - import com.google.gwt.user.client.Command; <nl> - chunks.createChunkEditor = (type, index, getPos) -> <nl> + chunks.createChunkEditor = (type, index, callbacks) -> <nl> - index, getPos, sentinel_, target_, sync_); <nl> 
mmm PanmirrorEditLinkDialog.java <nl> ppp PanmirrorEditLinkDialog.java <nl> + capabilities_ = capabilities; <nl> - text_.setVisible(href_.getType() != PanmirrorLinkType.Heading); <nl> - textLabel_.setVisible(text_.isVisible()); <nl> - title_.setVisible(text_.isVisible()); <nl> - titleLabel_.setVisible(text_.isVisible()); <nl> 
mmm EditSession.java <nl> ppp EditSession.java <nl> mmm PanmirrorUIContext.java <nl> ppp PanmirrorUIContext.java <nl> - public Getter getDocumentPath; <nl> mmm VisualModePanmirrorContext.java <nl> ppp VisualModePanmirrorContext.java <nl> - import org.rstudio.studio.client.workbench.views.source.editors.text.TextEditingTarget; <nl> 
mmm UserStateAccessor.java <nl> ppp UserStateAccessor.java <nl> - import com.google.gwt.core.client.JsArrayString; <nl> - import org.rstudio.core.client.JsArrayUtil; <nl> - public PrefValue<Boolean> serverEditorFontEnabled() <nl> - { <nl> - return bool("server_editor_font_enabled", false); <nl> - } <nl> - public PrefValue<String> serverEditorFont() <nl> 
mmm PanmirrorZoteroServer.java <nl> ppp PanmirrorZoteroServer.java <nl> - JsArray<PanmirrorZoteroCollectionSpec> cached) <nl> + JsArray<PanmirrorZoteroCollectionSpec> cached, <nl> + boolean useCache) <nl> + useCache, <nl> mmm PanmirrorPandocFormatConfig.java <nl> ppp PanmirrorPandocFormatConfig.java <nl> - import jsinterop.annotations.JsOverlay; <nl> 
mmm LatexProgramSelectWidget.java <nl> ppp LatexProgramSelectWidget.java <nl> - useSecurePackageDownload_, "secure_download"); <nl> + useSecurePackageDownload_, "secure_download", "Help on secure package downloads for R"); <nl> mmm ProjectPackratPreferencesPane.java <nl> ppp ProjectPackratPreferencesPane.java <nl> 
mmm StringUtil.java <nl> ppp StringUtil.java <nl> + public static String getCssIdentifier(String string) <nl> + { <nl> + Pattern pattern = Pattern.create("(^-?[a-zA-Z_][a-zA-Z0-9\\-_]+$)"); <nl> + if (pattern.test(string)) <nl> + return string; <nl> + else <nl> + { <nl> + StringBuilder builder = new StringBuilder(); <nl> 
mmm DomUtils.java <nl> ppp DomUtils.java <nl> + public static final native DOMRect getBoundingClientRect(Element el) <nl> mmm AceEditor.java <nl> ppp AceEditor.java <nl> - import com.google.gwt.user.client.ui.ScrollPanel; <nl> - public void scrollToCursor(ScrollPanel scrollPanel, <nl> - int paddingVert, <nl> 
mmm TextEditorContainer.java <nl> ppp TextEditorContainer.java <nl> - addStyleName("ace_editor_theme"); <nl> mmm ObjectExplorerEditingTarget.java <nl> ppp ObjectExplorerEditingTarget.java <nl> - public void onActivate(boolean forUser) <nl> + public void onActivate() <nl> - super.onActivate(forUser); <nl> + super.onActivate(); <nl> 
mmm PromiseServerRequestCallback.java <nl> ppp PromiseServerRequestCallback.java <nl> - if (progress != null) <nl> + if (progress != null && progressDelayMs >= 0) <nl> new file <nl> ppp PanmirrorInsertCitePreviewPair.java <nl> + package org.rstudio.studio.client.panmirror.dialogs.model; <nl> + import jsinterop.annotations.JsType; <nl> 
mmm RStudioGinjector.java <nl> ppp RStudioGinjector.java <nl> + void injectMembers(ShinyApplicationSatellite satellite); <nl> - ShinyApplicationSatellite getShinyApplicationSatellite(); <nl> mmm ShinyServerOperations.java <nl> ppp ShinyServerOperations.java <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> 
mmm RStudioGinModule.java <nl> ppp RStudioGinModule.java <nl> + import org.rstudio.studio.client.panmirror.server.PanmirrorXRefServerOperations; <nl> + bind(PanmirrorXRefServerOperations.class).to(RemoteServer.class); <nl> new file <nl> ppp PanmirrorXRefServer.java <nl> + package org.rstudio.studio.client.panmirror.server; <nl> 
mmm VisualMode.java <nl> ppp VisualMode.java <nl> - SourceDocAddedEvent.Handler, <nl> - VisualModeSpelling.Context <nl> + SourceDocAddedEvent.Handler <nl> - visualModeSpelling_ = new VisualModeSpelling(docUpdateSentinel_, docDisplay, this); <nl> + visualModeSpelling_ = new VisualModeSpelling(docUpdateSentinel_, docDisplay_); <nl> 
mmm PanmirrorWidget.java <nl> ppp PanmirrorWidget.java <nl> - import java.util.List; <nl> - import org.rstudio.studio.client.application.ui.CommandPaletteEntry; <nl> - import org.rstudio.studio.client.application.ui.CommandPaletteEntrySource; <nl> - CommandPaletteEntrySource, <nl> - @Override <nl> - public List<CommandPaletteEntry> getCommandPaletteEntries() <nl> 
mmm SourceDocument.java <nl> ppp SourceDocument.java <nl> - public final static String XT_RMARKDOWN = "rmarkdown"; <nl> + public final static String XT_RMARKDOWN_PREFIX = "rmarkdown-"; <nl> + public final static String XT_RMARKDOWN_DOCUMENT = "rmarkdown-document"; <nl> + public final static String XT_RMARKDOWN_NOTEBOOK = "rmarkdown-notebook"; <nl> 
mmm PaneManager.java <nl> ppp PaneManager.java <nl> - import org.rstudio.studio.client.workbench.views.source.SourceShim; <nl> + import org.rstudio.studio.client.workbench.views.source.Source; <nl> + import org.rstudio.studio.client.workbench.views.source.SourcePane; <nl> - SourceShim source, <nl> + Source source, <nl> 
mmm FilesList.java <nl> ppp FilesList.java <nl> - return new Long(arg0.getLength()).compareTo( <nl> - new Long(arg1.getLength())); <nl> + return Long.valueOf(arg0.getLength()).compareTo( <nl> + Long.valueOf(arg1.getLength())); <nl> mmm HttpLogEntry.java <nl> ppp HttpLogEntry.java <nl> - Double timestamp = new Double(getTimestampNative()); <nl> 
deleted file <nl> mmm PanmirrorUIChunks.java <nl> - package org.rstudio.studio.client.panmirror.ui; <nl> - import jsinterop.annotations.JsFunction; <nl> - import jsinterop.annotations.JsType; <nl> - @JsType <nl> - public class PanmirrorUIChunks <nl> - { <nl> - public CreateChunkEditor createChunkEditor; <nl> 
mmm PaneManager.java <nl> ppp PaneManager.java <nl> - SourceColumn column = sourceColumnManager_.findByName(name); <nl> + SourceColumn column = sourceColumnManager_.getByName(name); <nl> + panel_.resetLeftWidgets(sourceColumnManager_.getWidgets(true)); <nl> mmm Source.java <nl> ppp Source.java <nl> - columnManager_.findByName(name)); <nl> 
mmm TextEditingTargetWidget.java <nl> ppp TextEditingTargetWidget.java <nl> + SourceColumnManager mgr = RStudioGinjector.INSTANCE.getSourceColumnManager(); <nl> - event -> commands_.shinyCompareTest().execute()); <nl> + event -> { <nl> + mgr.setActive(column_); <nl> + commands_.shinyCompareTest().execute(); <nl> 
mmm TextEditingTargetWidget.java <nl> ppp TextEditingTargetWidget.java <nl> mmm MathJaxRenderQueue.java <nl> ppp MathJaxRenderQueue.java <nl> - import org.rstudio.studio.client.common.mathjax.MathJax.MathJaxTypesetCallback; <nl> - callback_ = new MathJaxTypesetCallback() <nl> + callback_ = new MathJaxTypeset.Callback() <nl> 
new file <nl> ppp PreviewReplaceEvent.java <nl> + package org.rstudio.studio.client.workbench.views.output.find.events; <nl> + import com.google.gwt.event.shared.EventHandler; <nl> + import com.google.gwt.event.shared.GwtEvent; <nl> + public class PreviewReplaceEvent extends GwtEvent<PreviewReplaceEvent.Handler> <nl> 
mmm PanmirrorUIContext.java <nl> ppp PanmirrorUIContext.java <nl> - public BooleanGetter isActiveTab; <nl> - @JsFunction <nl> - public interface BooleanGetter <nl> - { <nl> - Boolean get(); <nl> - } <nl> mmm PopoutDocEvent.java <nl> ppp PopoutDocEvent.java <nl> - import org.rstudio.core.client.Debug; <nl> - Debug.logToConsole("new PopoutDocEvent for: " + originator_.getDocId()); <nl> 
mmm ProjectPreferencesPane.java <nl> ppp ProjectPreferencesPane.java <nl> - import org.rstudio.core.client.prefs.PreferencesDialogBaseResources; <nl> - import com.google.gwt.user.client.ui.Label; <nl> - protected void addHeader(String caption) <nl> - { <nl> - PreferencesDialogBaseResources baseRes = <nl> - PreferencesDialogBaseResources.INSTANCE; <nl> 
mmm FindResultContext.java <nl> ppp FindResultContext.java <nl> + import java.util.ArrayList; <nl> + public void setReplace(String value) <nl> + { <nl> + replace_ = value; <nl> + } <nl> + public String getReplace() <nl> + { <nl> + return replace_; <nl> + } <nl> + private String replace_; <nl> + FindResultContext() <nl> 
mmm ElementIds.java <nl> ppp ElementIds.java <nl> - public final static String VISUAL_MD_LIST_INSERT_CITE_ID = "visual_md_insert_cite_id"; <nl> - public static String getVisualMdInsertCiteId() { return getElementId(VISUAL_MD_LIST_INSERT_CITE_ID); } <nl> - public final static String VISUAL_MD_LIST_INSERT_CITE_PREVIEW = "visual_md_insert_cite_preview"; <nl> 
mmm A11y.java <nl> ppp A11y.java <nl> - public static void setARIARequired(Element element) <nl> - { <nl> - element.setAttribute("aria-required", "true"); <nl> - } <nl> mmm BrowseAddinsDialog.java <nl> ppp BrowseAddinsDialog.java <nl> - @Override <nl> - public void focusFirstControl() <nl> - { <nl> - filterWidget_.focus(); <nl> 
deleted file <nl> mmm ShowHelpHandler.java <nl> - package org.rstudio.studio.client.workbench.views.help.events; <nl> - import com.google.gwt.event.shared.EventHandler; <nl> - public interface ShowHelpHandler extends EventHandler <nl> - { <nl> - void onShowHelp(ShowHelpEvent event); <nl> - } <nl> mmm LocatorEvent.java <nl> 
mmm VisualModePanmirrorFormat.java <nl> ppp VisualModePanmirrorFormat.java <nl> + import org.rstudio.core.client.regex.Match; <nl> + import org.rstudio.core.client.regex.Pattern; <nl> - public boolean isXaringanDocument() <nl> - { <nl> - List<String> formats = getOutputFormats(); <nl> - for (String format : formats) <nl> 
mmm EntityNameResolver.java <nl> ppp EntityNameResolver.java <nl> - TypeName typeNameOf(EntityDescriptor type) { <nl> + ClassName typeNameOf(EntityDescriptor type) { <nl> + ClassName embeddedTypeNameOf(EntityDescriptor embedded, EntityDescriptor parent) { <nl> + String className = parent.typeName().className() + "_" + embedded.typeName().className(); <nl> 
mmm DbIdGenerator.java <nl> ppp DbIdGenerator.java <nl> + import jodd.cache.TypeCache; <nl> - import java.util.HashMap; <nl> - import java.util.Map; <nl> - 		this.resourceManagers = new HashMap<>(); <nl> + 		this.resourceManagers = TypeCache.createDefault(); <nl> mmm ScopedProxyManager.java <nl> ppp ScopedProxyManager.java <nl> 
new file <nl> ppp DecoraParserTestDecoratedPageTest.java <nl> + package jodd.decora.parser; <nl> + import static org.mockito.Mockito.never; <nl> + import static org.mockito.Mockito.verify; <nl> + import static org.powermock.api.mockito.PowerMockito.mock; <nl> + import static org.powermock.api.mockito.PowerMockito.when; <nl> 
mmm JsonContext.java <nl> ppp JsonContext.java <nl> + import java.util.function.Function; <nl> + 	protected final boolean excludeEmpty; <nl> + 	protected final Function<Object, TypeJsonSerializer> serializerResolver; <nl> - 	public JsonContext(final JsonSerializer jsonSerializer, final Appendable appendable, final boolean excludeNulls, final boolean strictStringEncoding) { <nl> 
mmm JoddMadvocTest.java <nl> ppp JoddMadvocTest.java <nl> - 		assertTrue (JoddModule.BEAN.isLoaded()); <nl> - 		assertTrue (JoddModule.MADVOC.isLoaded()); <nl> - 		assertFalse(JoddModule.MAIL.isLoaded()); <nl> - 		assertTrue (JoddModule.PETITE.isLoaded()); <nl> - 		assertTrue (JoddModule.PROPS.isLoaded()); <nl> 
mmm ColumnValueChunk.java <nl> ppp ColumnValueChunk.java <nl> - 	@Override <nl> - 	public SqlChunk clone() { <nl> - 		return new ColumnValueChunk(name, value, objReference); <nl> - 	} <nl> - } <nl> + } <nl> mmm TableChunk.java <nl> ppp TableChunk.java <nl> - 	@Override <nl> - 	public SqlChunk clone() { <nl> - 		return new TableChunk(entity,  entityName, tableAlias, tableReference); <nl> 
mmm JoddArrayListTest.java <nl> ppp JoddArrayListTest.java <nl> - 		JoddArrayList<String> jal = (JoddArrayList<String>) jal0.clone(); <nl> + 		JoddArrayList<String> jal = jal0.clone(); <nl> - 		jal = (JoddArrayList<String>) jal0.clone(); <nl> + 		jal = jal0.clone(); <nl> - 		jal = (JoddArrayList<String>) jal0.clone(); <nl> 
new file <nl> ppp HANACloudColumnStoreDialect.java <nl> + package org.hibernate.dialect; <nl> + import java.sql.Types; <nl> + import org.hibernate.dialect.function.SQLFunctionTemplate; <nl> + import org.hibernate.dialect.function.StandardSQLFunction; <nl> + import org.hibernate.dialect.function.VarArgsSQLFunction; <nl> 
mmm AuditMetadataGenerator.java <nl> ppp AuditMetadataGenerator.java <nl> - import org.slf4j.LoggerFactory; <nl> - import org.slf4j.Logger; <nl> 
new file <nl> ppp ClassTypeEntity.java <nl> + package org.hibernate.envers.test.integration.inheritance.single.discriminatorformula; <nl> + import javax.persistence.Entity; <nl> + import javax.persistence.GeneratedValue; <nl> + import javax.persistence.Id; <nl> + @Entity <nl> + public class ClassTypeEntity { <nl> 
mmm Constants.java <nl> ppp Constants.java <nl> + public static final String CRLF = "\r\n"; <nl> mmm RowResource.java <nl> ppp RowResource.java <nl> - import javax.ws.rs.WebApplicationException; <nl> + import org.apache.hadoop.hbase.TableNotFoundException; <nl> - throw new WebApplicationException(Response.Status.NOT_FOUND); <nl> 
mmm ReplicationSourceInterface.java <nl> ppp ReplicationSourceInterface.java <nl> + import java.util.UUID; <nl> + import org.apache.hadoop.hbase.replication.ReplicationPeers; <nl> + import org.apache.hadoop.hbase.replication.ReplicationQueues; <nl> - void init( <nl> - final Configuration conf, <nl> - final FileSystem fs, <nl> 
mmm SnapshotManager.java <nl> ppp SnapshotManager.java <nl> - import org.apache.hadoop.hbase.snapshot.RestoreSnapshotHelper; <nl> - HTableDescriptor htd = RestoreSnapshotHelper.cloneTableSchema(snapshotTableDesc, tableName); <nl> + HTableDescriptor htd = new HTableDescriptor(tableName, snapshotTableDesc); <nl> 
mmm TestScannerResource.java <nl> ppp TestScannerResource.java <nl> - new HBaseRESTTestingUtility(TEST_UTIL.getConfiguration()); <nl> + new HBaseRESTTestingUtility(); <nl> - REST_TEST_UTIL.startServletContainer(); <nl> + REST_TEST_UTIL.startServletContainer(TEST_UTIL.getConfiguration()); <nl> mmm TestRowResource.java <nl> 
mmm TestMultiVersionConsistencyControl.java <nl> ppp TestMultiVersionConsistencyControl.java <nl> + AtomicLong startPoint = new AtomicLong(); <nl> - MultiVersionConsistencyControl.WriteEntry e = mvcc.beginMemstoreInsert(); <nl> + MultiVersionConsistencyControl.WriteEntry e = <nl> + mvcc.beginMemstoreInsertWithSeqNum(startPoint.incrementAndGet()); <nl> 
new file <nl> ppp QrsConfig.java <nl> + package io.quarkus.qrs.runtime; <nl> + import io.quarkus.runtime.annotations.ConfigItem; <nl> + import io.quarkus.runtime.annotations.ConfigPhase; <nl> + import io.quarkus.runtime.annotations.ConfigRoot; <nl> + import io.quarkus.runtime.configuration.MemorySize; <nl> 
mmm AsyncSyslogHandlerTest.java <nl> ppp AsyncSyslogHandlerTest.java <nl> - import org.jboss.shrinkwrap.api.ShrinkWrap; <nl> - import org.jboss.shrinkwrap.api.spec.JavaArchive; <nl> - .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class) <nl> - .addAsResource("application-async-syslog.properties", "application.properties")) <nl> 
new file <nl> ppp UniTest.java <nl> + package io.quarkus.smallrye.reactivemessaging.mutiny; <nl> + import static org.assertj.core.api.Assertions.assertThat; <nl> + import static org.awaitility.Awaitility.await; <nl> + import java.util.concurrent.TimeUnit; <nl> + import javax.inject.Inject; <nl> + import org.jboss.shrinkwrap.api.ShrinkWrap; <nl> 
new file <nl> ppp PropertyNotFoundThrowException.java <nl> + package io.quarkus.qute.runtime; <nl> + import io.quarkus.qute.Expression; <nl> + import io.quarkus.qute.ResultMapper; <nl> + import io.quarkus.qute.Results.Result; <nl> + import io.quarkus.qute.TemplateException; <nl> + import io.quarkus.qute.TemplateNode.Origin; <nl> 
mmm LoggingSetupTemplate.java <nl> ppp LoggingSetupTemplate.java <nl> + import java.util.List; <nl> + import java.util.Map.Entry; <nl> + final Map<String, CleanupFilterConfig> filters = config.filters; <nl> + List<LogCleanupFilterElement> filterElements = new ArrayList<>(filters.size()); <nl> + for (Entry<String, CleanupFilterConfig> entry : filters.entrySet()) { <nl> 
mmm BuildTimeConditionBuildItem.java <nl> ppp BuildTimeConditionBuildItem.java <nl> - switch (target.kind()) { <nl> - case CLASS: <nl> - case METHOD: <nl> - case FIELD: <nl> - this.target = target; <nl> - break; <nl> - default: <nl> - throw new IllegalArgumentException("'target' can only be a class, a field or a method"); <nl> 
mmm PrimitiveInjectionUnitTest.java <nl> ppp PrimitiveInjectionUnitTest.java <nl> - .addAsManifestResource("microprofile-config.properties")); <nl> + .addAsResource("application.properties")); <nl> mmm PersistenceAndQuarkusConfigTest.java <nl> ppp PersistenceAndQuarkusConfigTest.java <nl> - .addAsManifestResource("META-INF/microprofile-config.properties")); <nl> 
new file <nl> ppp CredentialsTest.java <nl> + package io.quarkus.reactive.pg.client; <nl> + import static io.restassured.RestAssured.given; <nl> + import org.hamcrest.CoreMatchers; <nl> + import org.jboss.shrinkwrap.api.ShrinkWrap; <nl> + import org.jboss.shrinkwrap.api.spec.JavaArchive; <nl> + import org.junit.jupiter.api.Test; <nl> 
mmm MailClientProducer.java <nl> ppp MailClientProducer.java <nl> - package io.quarkus.mailer.impl; <nl> + package io.quarkus.mailer.runtime; <nl> mmm ReactiveMailerImpl.java <nl> ppp ReactiveMailerImpl.java <nl> - package io.quarkus.mailer.impl; <nl> + package io.quarkus.mailer.runtime; <nl> mmm MailerProcessor.java <nl> 
mmm LiveReloadBuildItem.java <nl> ppp LiveReloadBuildItem.java <nl> + import io.quarkus.bootstrap.app.ClassChangeInformation; <nl> + public ClassChangeInformation getChangeInformation() { <nl> + return changeInformation; <nl> + } <nl> new file <nl> ppp ClassChangeInformation.java <nl> + package io.quarkus.bootstrap.app; <nl> 
mmm ResourceWriter.java <nl> ppp ResourceWriter.java <nl> + import java.nio.charset.StandardCharsets; <nl> + import io.quarkus.qrs.runtime.util.ServerMediaType; <nl> + private volatile ServerMediaType serverMediaType; <nl> + public ServerMediaType serverMediaType() { <nl> + if (serverMediaType == null) { <nl> 
mmm DevMojoIT.java <nl> ppp DevMojoIT.java <nl> + import java.util.Properties; <nl> - running.execute(Arrays.asList("compile", "quarkus:dev"), Collections.emptyMap()); <nl> + final Properties mvnRunProps = new Properties(); <nl> + mvnRunProps.setProperty("debug", "false"); <nl> + running.execute(Arrays.asList("compile", "quarkus:dev"), Collections.emptyMap(), mvnRunProps); <nl> 
deleted file <nl> mmm WeldBeanArchiveProcessor.java <nl> - package org.jboss.shamrock.weld.deployment; <nl> - import java.util.ArrayList; <nl> - import java.util.Collection; <nl> - import java.util.Collections; <nl> - import java.util.List; <nl> - import java.util.Set; <nl> - import javax.inject.Inject; <nl> 
mmm HibernateValidatorFunctionalityTest.java <nl> ppp HibernateValidatorFunctionalityTest.java <nl> - expected.append("failed: greeting.name (must not be null)"); <nl> + expected.append("failed: greeting.arg0 (must not be null)"); <nl> - .append("failed: echoZipCode.zipCode (size must be between 5 and 5)"); <nl> 
mmm FlywayFunctionalityTest.java <nl> ppp FlywayFunctionalityTest.java <nl> - @DisplayName("Migrates a schema correctly") <nl> - public void testFlywayFunctionality() throws Exception { <nl> - when().get("/flyway/migrate").then().body(is("OK 1")); <nl> + @DisplayName("Migrates a schema correctly using integrated instance") <nl> 
mmm SmallRyeHealthConfig.java <nl> ppp SmallRyeHealthConfig.java <nl> + @ConfigItem(defaultValue = "/well") <nl> + String wellnessPath; <nl> mmm DB2PoolProducer.java <nl> ppp DB2PoolProducer.java <nl> + import javax.enterprise.context.ApplicationScoped; <nl> + @ApplicationScoped <nl> mmm MySQLPoolProducer.java <nl> 
mmm QuarkusTestExtension.java <nl> ppp QuarkusTestExtension.java <nl> - import io.quarkus.bootstrap.util.QuarkusModelHelper; <nl> - BuildToolHelper.enableGradleAppModel(root, "TEST", QuarkusModelHelper.TEST_REQUIRED_TASKS); <nl> + BuildToolHelper.enableGradleAppModel(root, "TEST"); <nl> mmm TransformedClassesBuildItem.java <nl> 
new file <nl> ppp ZonedDateTimeJsonbConfigCustomizer.java <nl> + package io.quarkus.restclient.jsonb.deployment; <nl> + import java.lang.reflect.Type; <nl> + import java.time.ZoneId; <nl> + import java.time.ZonedDateTime; <nl> + import javax.inject.Singleton; <nl> + import javax.json.bind.JsonbConfig; <nl> + import javax.json.bind.serializer.DeserializationContext; <nl> 
mmm EndpointIndexer.java <nl> ppp EndpointIndexer.java <nl> + import static io.quarkus.qrs.deployment.framework.QrsDotNames.SUSPENDED; <nl> + import javax.ws.rs.container.AsyncResponse; <nl> - Map<DotName, AnnotationInstance>[] parameterAnnotations = new Map[info.parameters().size()]; <nl> - MethodParameter[] methodParameters = new MethodParameter[info.parameters() <nl> 
mmm KubernetesClientProcessor.java <nl> ppp KubernetesClientProcessor.java <nl> - reflectiveClasses.produce(ReflectiveClassBuildItem.weakClass(modelClasses)); <nl> + reflectiveClasses.produce(ReflectiveClassBuildItem <nl> + .builder(modelClasses).weak(true).methods(true).fields(false).build()); <nl> + ignoredJsonDeserializationClasses.produce( <nl> 
new file <nl> ppp JksConfiguration.java <nl> + package org.jboss.shamrock.vertx.runtime; <nl> + import org.eclipse.microprofile.config.inject.ConfigProperty; <nl> + import org.jboss.shamrock.runtime.ConfigGroup; <nl> + import java.util.Optional; <nl> + @ConfigGroup <nl> + public class JksConfiguration { <nl> 
new file <nl> ppp MutableJarFormatBootsInDevModeTest.java <nl> + package io.quarkus.gradle; <nl> + import static io.quarkus.gradle.LaunchUtils.dumpFileContentOnFailure; <nl> + import static io.quarkus.gradle.LaunchUtils.launch; <nl> + import static org.assertj.core.api.Assertions.assertThat; <nl> + import static org.awaitility.Awaitility.await; <nl> 
new file <nl> ppp AsyncExceptionMapperContext.java <nl> + package org.jboss.resteasy.reactive.server.spi; <nl> + import javax.ws.rs.core.Response; <nl> + public interface AsyncExceptionMapperContext { <nl> + ServerRequestContext serverRequestContext(); <nl> + void suspend(); <nl> + void resume(); <nl> + void setResponse(Response response); <nl> 
mmm HttpConfiguration.java <nl> ppp HttpConfiguration.java <nl> + @Deprecated <nl> - public boolean proxyAddressForwarding; <nl> + public Optional<Boolean> proxyAddressForwarding; <nl> + @Deprecated <nl> - public boolean allowForwarded; <nl> + public Optional<Boolean> allowForwarded; <nl> + @ConfigGroup <nl> 
mmm SmallRyeRestClientProcessor.java <nl> ppp SmallRyeRestClientProcessor.java <nl> + import io.quarkus.deployment.builditem.substrate.ServiceProviderBuildItem; <nl> + import io.quarkus.smallrye.restclient.runtime.IncomingHeadersProvider; <nl> - BuildProducer<ExtensionSslNativeSupportBuildItem> extensionSslNativeSupport) { <nl> 
mmm TestJavaBean.java <nl> ppp TestJavaBean.java <nl> - public void setSval(String sval) { <nl> + public TestJavaBean setSval(String sval) { <nl> + return this; <nl> mmm DevModeMain.java <nl> ppp DevModeMain.java <nl> - import java.nio.file.Files; <nl> - copyDotEnvFile(); <nl> - private void copyDotEnvFile() { <nl> 
mmm KafkaProcessor.java <nl> ppp KafkaProcessor.java <nl> + import javax.security.auth.spi.LoginModule; <nl> + import org.apache.kafka.common.security.authenticator.AbstractLogin; <nl> + import org.apache.kafka.common.security.authenticator.DefaultLogin; <nl> + import org.apache.kafka.common.security.authenticator.SaslClientCallbackHandler; <nl> 
mmm WebJarLocatorStandaloneBuildStep.java <nl> ppp WebJarLocatorStandaloneBuildStep.java <nl> - package io.quarkus.webjars.locator.deployment; <nl> + package io.quarkus.webjar.locator.deployment; <nl> - import io.quarkus.webjars.locator.runtime.WebJarsLocatorRecorder; <nl> + import io.quarkus.webjar.locator.runtime.WebJarLocatorRecorder; <nl> 
mmm BeanRegistrarBuildItem.java <nl> ppp BeanRegistrarBuildItem.java <nl> mmm BeanArchiveIndexBuildItem.java <nl> ppp BeanArchiveIndexBuildItem.java <nl> mmm BeanDeploymentValidatorBuildItem.java <nl> ppp BeanDeploymentValidatorBuildItem.java <nl> mmm BeanContainerListenerBuildItem.java <nl> ppp BeanContainerListenerBuildItem.java <nl> 
mmm RemoteSyncHandler.java <nl> ppp RemoteSyncHandler.java <nl> - static boolean checkForChanges; <nl> + static volatile boolean checkForChanges; <nl> - hotReplacementContext.addPreScanStep(new Runnable() { <nl> - @Override <nl> - public void run() { <nl> - if (currentSession == null) { <nl> - return; <nl> - } <nl> 
mmm PackageIT.java <nl> ppp PackageIT.java <nl> - import java.io.InputStream; <nl> - import java.nio.file.Files; <nl> - import java.nio.file.Path; <nl> - import java.util.zip.ZipEntry; <nl> - import java.util.zip.ZipInputStream; <nl> - import org.junit.Assert; <nl> - @Test <nl> - public void testRunnerUberJarHasValidCRC() throws Exception { <nl> 
mmm CodeFlowTest.java <nl> ppp CodeFlowTest.java <nl> + import static org.junit.jupiter.api.Assertions.assertNotNull; <nl> + import static org.junit.jupiter.api.Assertions.assertTrue; <nl> + import java.net.URI; <nl> + import com.gargoylesoftware.htmlunit.WebRequest; <nl> + import com.gargoylesoftware.htmlunit.WebResponse; <nl> 
new file <nl> ppp JPAFunctionalityTestEndpoint.java <nl> + package io.quarkus.it.jpa.db2; <nl> + import java.io.IOException; <nl> + import java.io.PrintWriter; <nl> + import java.util.List; <nl> + import java.util.UUID; <nl> + import javax.persistence.EntityManager; <nl> + import javax.persistence.EntityManagerFactory; <nl> 
mmm MicrometerProcessor.java <nl> ppp MicrometerProcessor.java <nl> - import io.micrometer.core.annotation.Counted; <nl> - import io.micrometer.core.annotation.Timed; <nl> - import io.quarkus.arc.deployment.AnnotationsTransformerBuildItem; <nl> - import io.quarkus.arc.processor.AnnotationsTransformer; <nl> 
mmm ArcContextProvider.java <nl> ppp ArcContextProvider.java <nl> - import java.util.Collection; <nl> - import io.quarkus.arc.ContextInstanceHandle; <nl> + import io.quarkus.arc.InjectableContext; <nl> - private static ThreadContextSnapshot NOOP_SNAPSHOT = () -> () -> { <nl> - }; <nl> - if (!isContextActiveOnThisThread(arc)) { <nl> 
new file <nl> ppp GreetingResourceTest.java <nl> + package io.quarkus.it.resteasy.jackson; <nl> + import static io.restassured.RestAssured.given; <nl> + import static org.hamcrest.CoreMatchers.containsString; <nl> + import org.junit.jupiter.api.Test; <nl> + import io.quarkus.test.junit.QuarkusTest; <nl> + @QuarkusTest <nl> 
deleted file <nl> mmm ScalaProcessor.java <nl> - package io.quarkus.scala.deployment; <nl> - import io.quarkus.deployment.annotations.BuildStep; <nl> - import io.quarkus.deployment.builditem.FeatureBuildItem; <nl> - public class ScalaProcessor { <nl> - @BuildStep <nl> - FeatureBuildItem feature() { <nl> - return new FeatureBuildItem(FeatureBuildItem.SCALA); <nl> 
mmm Consume.java <nl> ppp Consume.java <nl> - return null; <nl> + final Constraint outputConstraint = constraint == Constraint.REAL || this.constraint == Constraint.REAL ? Constraint.REAL : Constraint.ORDER_ONLY; <nl> + final ConsumeFlags outputFlags = !flags.contains(ConsumeFlag.OPTIONAL) || !this.flags.contains(ConsumeFlag.OPTIONAL) ? flags.with(this.flags).without(ConsumeFlag.OPTIONAL) : flags.with(this.flags); <nl> 
new file <nl> ppp NativeBookResourceWithParameterInjectionIT.java <nl> + package io.quarkus.it.mongodb; <nl> + import io.quarkus.test.junit.NativeImageTest; <nl> + @NativeImageTest <nl> + class NativeBookResourceWithParameterInjectionIT extends BookResourceWithParameterInjectionTest { <nl> + } <nl> mmm BookResourceTest.java <nl> 
mmm VertxCoreProcessor.java <nl> ppp VertxCoreProcessor.java <nl> + .addRuntimeInitializedClass("io.vertx.core.http.impl.VertxHttp2ClientUpgradeCodec") <nl> + .addRuntimeInitializedClass("io.vertx.core.eventbus.impl.clustered.ClusteredEventBus") <nl> - .addRuntimeInitializedClass("io.vertx.core.http.impl.VertxHttp2ClientUpgradeCodec") <nl> 
mmm RestClientFallbackTest.java <nl> ppp RestClientFallbackTest.java <nl> - String get() { <nl> + public String get() { <nl> new file <nl> ppp MutinyRestClientTest.java <nl> + package io.quarkus.restclient.mutiny.deployment; <nl> + import static org.junit.jupiter.api.Assertions.assertEquals; <nl> + import java.net.URL; <nl> 
deleted file <nl> mmm KubernetesWithDefaultsTest.java <nl> - package io.quarkus.it.kubernetes; <nl> - import static org.assertj.core.api.Assertions.assertThat; <nl> - import static org.junit.jupiter.api.Assertions.assertEquals; <nl> - import java.io.IOException; <nl> - import java.nio.file.Path; <nl> - import java.util.List; <nl> 
deleted file <nl> mmm DB2AgroalConnectionConfigurer.java <nl> - package io.quarkus.jdbc.db2.runtime; <nl> - import io.quarkus.agroal.runtime.AgroalConnectionConfigurer; <nl> - import io.quarkus.agroal.runtime.JdbcDriver; <nl> - import io.quarkus.datasource.common.runtime.DatabaseKind; <nl> - @JdbcDriver(DatabaseKind.DB2) <nl> 
deleted file <nl> mmm ObjectBeanTest.java <nl> - package io.quarkus.smallrye.faulttolerance.test; <nl> - import javax.enterprise.inject.Produces; <nl> - import javax.inject.Named; <nl> - import org.junit.jupiter.api.Test; <nl> - import org.junit.jupiter.api.extension.RegisterExtension; <nl> - import io.quarkus.test.QuarkusUnitTest; <nl> 
mmm Scheduled.java <nl> ppp Scheduled.java <nl> + import static io.quarkus.scheduler.Scheduled.ConcurrentExecution.PROCEED; <nl> + ConcurrentExecution concurrentExecution() default PROCEED; <nl> + enum ConcurrentExecution { <nl> + PROCEED, <nl> + SKIP, <nl> + } <nl> mmm SimpleScheduler.java <nl> ppp SimpleScheduler.java <nl> 
new file <nl> ppp SentryLoggerDisabledTest.java <nl> + package io.quarkus.logging.sentry; <nl> + import static io.quarkus.logging.sentry.SentryLoggerTest.getSentryHandler; <nl> + import static io.sentry.jvmti.ResetFrameCache.resetFrameCache; <nl> + import static org.assertj.core.api.Assertions.assertThat; <nl> 
mmm BasicOpenshiftTest.java <nl> ppp BasicOpenshiftTest.java <nl> + import io.fabric8.kubernetes.api.model.Service; <nl> + assertThat(m.getNamespace()).isNull(); <nl> + assertThat(openshiftList).filteredOn(h -> "Service".equals(h.getKind())).hasOnlyOneElementSatisfying(h -> { <nl> + assertThat(h).isInstanceOfSatisfying(Service.class, s -> { <nl> 
new file <nl> ppp TikaParsersConfigBuildItem.java <nl> + package io.quarkus.tika.deployment; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import io.quarkus.builder.item.SimpleBuildItem; <nl> + import io.quarkus.tika.runtime.TikaParserParameter; <nl> + public final class TikaParsersConfigBuildItem extends SimpleBuildItem { <nl> 
mmm PanacheRepository.java <nl> ppp PanacheRepository.java <nl> mmm UndertowWebsocketProcessor.java <nl> ppp UndertowWebsocketProcessor.java <nl> + import io.quarkus.arc.deployment.BeanDefiningAnnotationBuildItem; <nl> + @BuildStep <nl> + void beanDefiningAnnotations(BuildProducer<BeanDefiningAnnotationBuildItem> annotations) { <nl> 
new file <nl> ppp AxleReactiveMongoClientTest.java <nl> + package io.quarkus.mongodb.reactive.legacy; <nl> + import static com.mongodb.client.model.Filters.eq; <nl> + import static org.assertj.core.api.Assertions.assertThat; <nl> + import static org.assertj.core.api.Assertions.fail; <nl> + import java.util.ArrayList; <nl> 
mmm ArcAnnotationProcessor.java <nl> ppp ArcAnnotationProcessor.java <nl> - ArcContainer container = template.getContainer(); <nl> + ArcContainer container = template.getContainer(null); <nl> - template.setupInjection(container); <nl> + template.setupInjection(null, container); <nl> mmm ArcDeploymentTemplate.java <nl> 
mmm KnativeEventsBindingRecorder.java <nl> ppp KnativeEventsBindingRecorder.java <nl> - import java.util.function.Consumer; <nl> - import io.vertx.ext.web.Route; <nl> + @TargetClass(className = "org.flywaydb.core.internal.scanner.classpath.ClassPathScanner", onlyWith = ClassPathScannerSubstitutions.IsJBossVFSAbsent.class) <nl> 
mmm JdbcRecorder.java <nl> ppp JdbcRecorder.java <nl> - return (DataSource) principalQuery.datasource <nl> - .map(name -> Arc.container().instance(name).get()) <nl> - .orElse(Arc.container().instance(DataSource.class).get()); <nl> + if (principalQuery.datasource.isPresent()) { <nl> + return Arc.container() <nl> 
mmm JavaDocConfigDescriptionParserTest.java <nl> ppp JavaDocConfigDescriptionParserTest.java <nl> mmm DevMojo.java <nl> ppp DevMojo.java <nl> + import java.util.HashMap; <nl> + import java.util.HashSet; <nl> - String debugSuspend = "n"; <nl> - debugSuspend = "n"; <nl> + suspend = "n"; <nl> - debugSuspend = "y"; <nl> 
mmm FastJarFormatWorksTest.java <nl> ppp FastJarFormatWorksTest.java <nl> - .atMost(1, TimeUnit.MINUTES) <nl> - .until(() -> DevModeTestUtils.isCode("/hello", 200)); <nl> + .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse("/hello", 200)); <nl> mmm QuarkusDev.java <nl> ppp QuarkusDev.java <nl> 
mmm NativeImageMojo.java <nl> ppp NativeImageMojo.java <nl> - @Parameter(defaultValue = "false") <nl> + @Parameter(defaultValue = "true") <nl> mmm MojoTestBase.java <nl> ppp MojoTestBase.java <nl> - Predicate<String> datePattern = Pattern.compile("\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2},\\d{3}\\s").asPredicate(); <nl> 
new file <nl> ppp SystemPropertyTlsTrustManagersProvider.java <nl> + package io.quarkus.amazon.common.runtime; <nl> + import javax.net.ssl.TrustManager; <nl> + import software.amazon.awssdk.http.TlsTrustManagersProvider; <nl> + public class SystemPropertyTlsTrustManagersProvider implements TlsTrustManagersProvider { <nl> 
new file <nl> ppp LibraryBeanInterface.java <nl> + package org.acme; <nl> + public interface LibraryBeanInterface { <nl> + String getValue(); <nl> + } <nl> mmm AbstractSharedContext.java <nl> ppp AbstractSharedContext.java <nl> - @Override <nl> - public void destroy(ContextState state) { <nl> - if (state == this) { <nl> 
mmm NameResolutionTest.java <nl> ppp NameResolutionTest.java <nl> - import javax.enterprise.inject.literal.NamedLiteral; <nl> - assertEquals("bing", Arc.container().instance(String.class, NamedLiteral.of("producedBing")).get()); <nl> mmm BeanDeployment.java <nl> ppp BeanDeployment.java <nl> - private final IndexView index; <nl> 
deleted file <nl> mmm AddExtensionsMojo.java <nl> - package io.quarkus.maven; <nl> - import org.apache.maven.plugins.annotations.Mojo; <nl> - @Mojo(name = "add-extensions") <nl> - public class AddExtensionsMojo extends AddExtensionMojo { <nl> - } <nl> mmm QuarkusDev.java <nl> - args.add("-Dquarkus.devMode"); <nl> 
deleted file <nl> mmm GradleBuildFileFromConnector.java <nl> - package io.quarkus.gradle; <nl> - import java.io.IOException; <nl> - import java.util.Collections; <nl> - import java.util.List; <nl> - import java.util.Objects; <nl> - import java.util.stream.Collectors; <nl> - import org.apache.maven.model.Dependency; <nl> 
mmm VertxProducer.java <nl> ppp VertxProducer.java <nl> - CountDownLatch latch = new CountDownLatch(1); <nl> - AtomicReference<Throwable> problem = new AtomicReference<>(); <nl> - vertx.close(ar -> { <nl> - if (ar.failed()) { <nl> - problem.set(ar.cause()); <nl> - } <nl> - latch.countDown(); <nl> - }); <nl> - try { <nl> 
mmm MainClassBuildStep.java <nl> ppp MainClassBuildStep.java <nl> + ResultHandle activeProfile = tryBlock <nl> + .invokeStaticMethod(ofMethod(ProfileManager.class, "getActiveProfile", String.class)); <nl> - tryBlock.load(ProfileManager.getActiveProfile()), <nl> + activeProfile, <nl> new file <nl> ppp PlatformConfig.java <nl> 
mmm AbstractMongoClientProducer.java <nl> ppp AbstractMongoClientProducer.java <nl> - import org.bson.codecs.pojo.ClassModel; <nl> - private List<String> bsonDiscriminators; <nl> - PojoCodecProvider.Builder pojoCodecProviderBuilder = PojoCodecProvider.builder() <nl> + CodecProvider pojoCodecProvider = PojoCodecProvider.builder() <nl> 
mmm MultiplePersistenceUnitsCdiEntityManagerTest.java <nl> ppp MultiplePersistenceUnitsCdiEntityManagerTest.java <nl> - public class MultiplePersistenceUnitsCdiTest { <nl> + public class MultiplePersistenceUnitsCdiEntityManagerTest { <nl> new file <nl> ppp SinglePersistenceUnitCdiEntityManagerTest.java <nl> 
new file <nl> ppp SentryConfigProvider.java <nl> + package io.quarkus.logging.sentry; <nl> + import static java.lang.String.join; <nl> + import java.util.Objects; <nl> + import io.sentry.DefaultSentryClientFactory; <nl> + import io.sentry.config.provider.ConfigurationProvider; <nl> + class SentryConfigProvider implements ConfigurationProvider { <nl> 
mmm OidcIdentityProvider.java <nl> ppp OidcIdentityProvider.java <nl> - return Uni.createFrom().deferred(new Supplier<Uni<SecurityIdentity>>() { <nl> + return Uni.createFrom().deferred(new Supplier<Uni<? extends SecurityIdentity>>() { <nl> - if (resolvedContext.oidcConfig.roles.source.isPresent()) { <nl> 
new file <nl> ppp DummyBean.java <nl> + package io.quarkus.arc.test.interceptors.bindings.transitive.with.transformer; <nl> + import javax.enterprise.context.ApplicationScoped; <nl> + @ApplicationScoped <nl> + @PlainBinding <nl> + public class DummyBean { <nl> + public void ping() { <nl> + } <nl> + } <nl> new file <nl> 
mmm ScriptBuilder.java <nl> ppp ScriptBuilder.java <nl> mmm ScriptPattern.java <nl> ppp ScriptPattern.java <nl> mmm SegwitAddress.java <nl> ppp SegwitAddress.java <nl> mmm UnsafeByteArrayOutputStream.java <nl> ppp UnsafeByteArrayOutputStream.java <nl> mmm VersionMessage.java <nl> ppp VersionMessage.java <nl> mmm BlockFileLoader.java <nl> 
mmm CoinTest.java <nl> ppp CoinTest.java <nl> - assertEquals("0.001", Coin.valueOf(COIN.longValue() / 1000).toFriendlyString()); <nl> + assertEquals("0.001", COIN.divide(1000).toFriendlyString()); <nl> mmm WalletTest.java <nl> ppp WalletTest.java <nl> - Transaction tx = createFakeTx(params, Coin.valueOf(rng.nextInt((int) COIN.longValue())), myAddress); <nl> 
mmm StreamParserFactory.java <nl> ppp StreamParserFactory.java <nl> - @Nullable public StreamParser getNewParser(InetAddress inetAddress, int port); <nl> + @Nullable <nl> + StreamParser getNewParser(InetAddress inetAddress, int port); <nl> mmm CoinSelector.java <nl> ppp CoinSelector.java <nl> - public CoinSelection select(Coin target, List<TransactionOutput> candidates); <nl> 
mmm SendRequest.java <nl> ppp SendRequest.java <nl> - Address to = new Address(params, "mupBAFeT63hXfeeT4rnAUcpKHDkz1n4fdw"); <nl> + Address to = Address.fromBase58(params, "mupBAFeT63hXfeeT4rnAUcpKHDkz1n4fdw"); <nl> mmm LevelDBBlockStoreTest.java <nl> ppp LevelDBBlockStoreTest.java <nl> - Address to = new Address(params, "mrj2K6txjo2QBcSmuAzHj4nD1oXSEJE1Qo"); <nl> 
mmm BoundedOverheadBlockStore.java <nl> ppp BoundedOverheadBlockStore.java <nl> - Block genesis = params.genesisBlock.cloneAsHeader(); <nl> + Block genesis = params.getGenesisBlock().cloneAsHeader(); <nl> mmm SPVBlockStore.java <nl> ppp SPVBlockStore.java <nl> - import com.google.common.base.Preconditions; <nl> 
mmm WireMockConfiguration.java <nl> ppp WireMockConfiguration.java <nl> + import static com.github.tomakehurst.wiremock.common.BrowserProxySettings.DEFAULT_CA_KESTORE_PASSWORD; <nl> + import static com.github.tomakehurst.wiremock.common.BrowserProxySettings.DEFAULT_CA_KEYSTORE_PATH; <nl> + private String caKeystorePath = DEFAULT_CA_KEYSTORE_PATH; <nl> 
deleted file <nl> mmm ResponseDribbleAcceptanceTest.java <nl> - package com.github.tomakehurst.wiremock; <nl> - import com.github.tomakehurst.wiremock.core.Options; <nl> - import com.github.tomakehurst.wiremock.http.HttpClientFactory; <nl> - import com.github.tomakehurst.wiremock.junit.WireMockRule; <nl> - import org.apache.commons.io.IOUtils; <nl> 
deleted file <nl> mmm Jetty6FaultInjector.java <nl> - package com.github.tomakehurst.wiremock.jetty6; <nl> - import com.github.tomakehurst.wiremock.core.FaultInjector; <nl> - import javax.servlet.http.HttpServletResponse; <nl> - import java.io.IOException; <nl> - import java.net.Socket; <nl> - import static com.github.tomakehurst.wiremock.common.Exceptions.throwUnchecked; <nl> 
mmm CommandLineOptions.java <nl> ppp CommandLineOptions.java <nl> - import com.github.tomakehurst.wiremock.extension.Extension; <nl> - import com.github.tomakehurst.wiremock.extension.ExtensionLoader; <nl> - private static final String EXTENSIONS = "extensions"; <nl> + private static final String CONTAINER_THREADS = "container-threads"; <nl> 
mmm Options.java <nl> ppp Options.java <nl> + boolean trustAll(); <nl> mmm EqualToXmlPattern.java <nl> ppp EqualToXmlPattern.java <nl> - import com.google.common.collect.ImmutableSet; <nl> - import com.google.common.collect.Sets; <nl> - import java.util.*; <nl> + import java.util.Comparator; <nl> + import java.util.List; <nl> 
deleted file <nl> mmm RotatingRequestJournal.java <nl> - package com.github.tomakehurst.wiremock.verification; <nl> - import com.google.common.base.Optional; <nl> - public interface RotatingRequestJournal extends RequestJournal { <nl> - Optional<Integer> getMaxEntries(); <nl> - } <nl> mmm CommandLineOptions.java <nl> 
new file <nl> ppp EventQuery003.java <nl> + package stest.tron.wallet.dailybuild.eventquery; <nl> + import com.alibaba.fastjson.JSONObject; <nl> + import io.grpc.ManagedChannel; <nl> + import io.grpc.ManagedChannelBuilder; <nl> + import java.util.concurrent.TimeUnit; <nl> + import lombok.extern.slf4j.Slf4j; <nl> 
new file <nl> ppp HttpShieldTrc20Token001.java <nl> + package stest.tron.wallet.dailybuild.zentrc20token; <nl> + import com.alibaba.fastjson.JSONObject; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + import java.util.Optional; <nl> + import lombok.extern.slf4j.Slf4j; <nl> + import org.apache.http.HttpResponse; <nl> 
mmm WithdrawBalanceActuator.java <nl> ppp WithdrawBalanceActuator.java <nl> - import org.tron.core.db.DelegationService; <nl> + import org.tron.core.service.MortgageService; <nl> - DelegationService delegationService = chainBaseManager.getDelegationService(); <nl> + MortgageService mortgageService = chainBaseManager.getMortgageService(); <nl> 
mmm TriggerSmartContractServlet.java <nl> ppp TriggerSmartContractServlet.java <nl> - if (!jsonObject.containsKey(functionSelector) <nl> - || StringUtil.isNullOrEmpty(jsonObject.getString(functionSelector))) { <nl> - throw new InvalidParameterException("function_selector isn't set."); <nl> + boolean isFunctionSelectorSet = jsonObject.containsKey(functionSelector) <nl> 
mmm RpcApiService.java <nl> ppp RpcApiService.java <nl> - } catch (Exception e) { <nl> + } catch (ZksnarkException | ContractExeException e) { <nl> - } catch (Exception e) { <nl> + } catch (ZksnarkException | ContractValidateException e) { <nl> mmm HttpMethed.java <nl> ppp HttpMethed.java <nl> - public static String triggerContractGetTxidWithVisibleTrue(String httpNode, String ownerAddress, <nl> 
mmm Wallet.java <nl> ppp Wallet.java <nl> - private void buildShieldedTRC20Input( <nl> - ShieldedTRC20ParametersBuilder builder, <nl> + private void buildShieldedTRC20Input(ShieldedTRC20ParametersBuilder builder, <nl> - paymentAddress.getPkD(), note.getValue(), note.getRcm().toByteArray()); <nl> + paymentAddress.getPkD(), <nl> 
mmm DBExtensionTestUtils.java <nl> ppp DBExtensionTestUtils.java <nl> - import org.apache.commons.lang.text.StrSubstitutor; <nl> + import org.apache.commons.lang3.text.StrSubstitutor; <nl> 
mmm ControlFunctionRegistry.java <nl> ppp ControlFunctionRegistry.java <nl> - import com.google.refine.expr.functions.html.HtmlAttr; <nl> - import com.google.refine.expr.functions.html.HtmlText; <nl> - import com.google.refine.expr.functions.html.OwnText; <nl> - import com.google.refine.expr.functions.html.SelectHtml; <nl> 
mmm RefineServlet.java <nl> ppp RefineServlet.java <nl> - static private String ASSIGNED_VERSION = "3.5-beta"; <nl> + static private String ASSIGNED_VERSION = "3.4-SNAPSHOT"; <nl> mmm CommonDescriptionScrutinizer.java <nl> ppp CommonDescriptionScrutinizer.java <nl> - if (labelText == null) { <nl> - continue; <nl> 
mmm ReconMarkNewTopicsOperation.java <nl> ppp ReconMarkNewTopicsOperation.java <nl> - return "Mark to create new topics for cells in column " + _columnName + <nl> + return "Mark to create new items for cells in column " + _columnName + <nl> - ", one topic for each group of similar cells" : <nl> - ", one topic for each cell"); <nl> 
mmm History.java <nl> ppp History.java <nl> + import java.util.LinkedList; <nl> - 		return _pastEntries.subList(Math.max(_pastEntries.size() - count, 0), _pastEntries.size()); <nl> + 		if (count <= 0) { <nl> + 			return new LinkedList<HistoryEntry>(_pastEntries); <nl> + 		} else { <nl> + 			return _pastEntries.subList(Math.max(_pastEntries.size() - count, 0), _pastEntries.size()); <nl> 
mmm SqlExporterTests.java <nl> ppp SqlExporterTests.java <nl> + import com.fasterxml.jackson.databind.JsonNode; <nl> + import com.fasterxml.jackson.databind.node.ArrayNode; <nl> + import com.fasterxml.jackson.databind.node.ObjectNode; <nl> + import com.google.refine.util.JSONUtilities; <nl> + import com.google.refine.util.ParsingUtilities; <nl> 
mmm WbItemVariable.java <nl> ppp WbItemVariable.java <nl> - public ItemIdValue evaluate(ExpressionContext ctxt) { <nl> + public ItemIdValue evaluate(ExpressionContext ctxt) throws SkipStatementException { <nl> - return null; <nl> + throw new SkipStatementException(); <nl> mmm WikibaseSchema.java <nl> ppp WikibaseSchema.java <nl> 
mmm WbLocationVariable.java <nl> ppp WbLocationVariable.java <nl> + import org.openrefine.wikidata.schema.exceptions.SkipSchemaExpressionException; <nl> - throws SkipStatementException { <nl> + throws SkipSchemaExpressionException { <nl> - throw new SkipStatementException(); <nl> + throw new SkipSchemaExpressionException(); <nl> 
mmm ReconMarkNewTopicsOperation.java <nl> ppp ReconMarkNewTopicsOperation.java <nl> - return "Mark to create new items for cells in column " + _columnName + <nl> + return "Mark to create new topics for cells in column " + _columnName + <nl> - ", one item for each group of similar cells" : <nl> - ", one item for each cell"); <nl> 
mmm DatabaseUtils.java <nl> ppp DatabaseUtils.java <nl> - import com.fasterxml.jackson.core.JsonGenerationException; <nl> - import com.fasterxml.jackson.core.JsonParseException; <nl> - import com.fasterxml.jackson.databind.JsonMappingException; <nl> - import com.fasterxml.jackson.databind.ObjectMapper; <nl> 
new file <nl> ppp SQLiteDatabaseServiceTest.java <nl> + package com.google.refine.extension.database.sqlite; <nl> + import com.google.refine.extension.database.*; <nl> + import com.google.refine.extension.database.model.DatabaseColumn; <nl> + import com.google.refine.extension.database.model.DatabaseInfo; <nl> 
new file <nl> ppp SofaBootVersionEndpointMvcAdapter.java <nl> + package com.alipay.sofa.infra.endpoint; <nl> + import org.springframework.boot.actuate.endpoint.Endpoint; <nl> + import org.springframework.boot.actuate.endpoint.mvc.AbstractEndpointMvcAdapter; <nl> + import org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter; <nl> 
mmm HealthCheckerProcessorTest.java <nl> ppp HealthCheckerProcessorTest.java <nl> + import com.alipay.sofa.healthcheck.bean.DiskHealthChecker; <nl> + import com.alipay.sofa.healthcheck.core.HealthChecker; <nl> + import com.alipay.sofa.healthcheck.utils.HealthCheckUtils; <nl> - import java.util.HashMap; <nl> 
mmm SSLSocketChannel2.java <nl> ppp SSLSocketChannel2.java <nl> - import org.java_websocket.interfaces.ISSLChannel; <nl> - public class SSLSocketChannel2 implements ByteChannel, WrappedByteChannel, ISSLChannel { <nl> + public class SSLSocketChannel2 implements ByteChannel, WrappedByteChannel { <nl> + package org.java_websocket.util; <nl> 
mmm CloseFrameBuilder.java <nl> ppp CloseFrameBuilder.java <nl> - package org.java_websocket; <nl> + package net.tootallnate.websocket; <nl> - import org.java_websocket.exeptions.InvalidDataException; <nl> - import org.java_websocket.exeptions.InvalidFrameException; <nl> + import net.tootallnate.websocket.exeptions.InvalidDataException; <nl> 
new file <nl> ppp SecWebSocketProtocolServerExample.java <nl> + import org.java_websocket.drafts.Draft_6455; <nl> + import org.java_websocket.extensions.IExtension; <nl> + import org.java_websocket.protocols.IProtocol; <nl> + import org.java_websocket.protocols.Protocol; <nl> + import java.net.URI; <nl> + import java.net.URISyntaxException; <nl> 
mmm WebSocketImpl.java <nl> ppp WebSocketImpl.java <nl> - 	private volatile WebSocketWorker workerThread; <nl> + 	private WebSocketWorker workerThread; <nl> - 	private volatile boolean flushandclosestate = false; <nl> + 	private boolean flushandclosestate = false; <nl> - private TranslatedPayloadMetaData translateSingleFramePayloadLength(ByteBuffer buffer, Opcode optcode, int oldPayloadlength, int maxpacketsize, int realpacketsize) throws InvalidFrameException, IncompleteException, LimitExceededException { <nl> 
mmm WorkspaceDetailsComposeTest.java <nl> ppp WorkspaceDetailsComposeTest.java <nl> + import static org.eclipse.che.commons.lang.NameGenerator.generate; <nl> - import org.eclipse.che.commons.lang.NameGenerator; <nl> + import org.eclipse.che.selenium.pageobject.ToastLoader; <nl> - @Test(groups = {TestGroup.DOCKER}) <nl> 
mmm ProjectJsonRpcServiceBackEnd.java <nl> ppp ProjectJsonRpcServiceBackEnd.java <nl> + import java.util.HashSet; <nl> + import java.util.Set; <nl> + import org.eclipse.che.api.core.notification.EventService; <nl> + import org.eclipse.che.api.project.server.notification.ProjectCreatedEvent; <nl> + import org.eclipse.che.api.project.shared.dto.NewProjectConfigDto; <nl> 
mmm LoginExistedUserWithOpenShiftOAuthTest.java <nl> ppp LoginExistedUserWithOpenShiftOAuthTest.java <nl> - @Test(groups = {TestGroup.OPENSHIFT, TestGroup.MULTIUSER}) <nl> + @Test(groups = {TestGroup.OPENSHIFT, TestGroup.K8S, TestGroup.MULTIUSER}) <nl> mmm CheSeleniumSuiteModule.java <nl> ppp CheSeleniumSuiteModule.java <nl> 
mmm KeycloakEnvironmentInitializationFilter.java <nl> ppp KeycloakEnvironmentInitializationFilter.java <nl> - import org.eclipse.che.commons.auth.token.RequestTokenExtractor; <nl> + import org.eclipse.che.multiuser.api.authentication.commons.token.RequestTokenExtractor; <nl> mmm AuthenticationExceptionMapper.java <nl> 
mmm WorkspaceDaoTest.java <nl> ppp WorkspaceDaoTest.java <nl> + ImmutableMap.of("java.home", "/opt/jdk11"), <nl> + ImmutableMap.of("java.home", "/home/user/jdk11"), <nl> + ImmutableMap.of("java.home", "/home/user/jdk11"), <nl> mmm ComponentDto.java <nl> ppp ComponentDto.java <nl> + @Override <nl> + Map<String, String> getPreferences(); <nl> 
mmm WorkspacesListTest.java <nl> ppp WorkspacesListTest.java <nl> - import org.eclipse.che.selenium.core.TestGroup; <nl> - @Test(groups = TestGroup.OSIO) <nl> mmm DeleteRunningWorkspaceTest.java <nl> ppp DeleteRunningWorkspaceTest.java <nl> - import org.eclipse.che.selenium.core.TestGroup; <nl> - @Test(groups = TestGroup.OSIO) <nl> 
mmm OpenShiftInfraModule.java <nl> ppp OpenShiftInfraModule.java <nl> + import org.eclipse.che.api.workspace.server.spi.environment.InternalEnvironmentFactory; <nl> + import org.eclipse.che.workspace.infrastructure.openshift.environment.OpenShiftEnvironment; <nl> + import org.eclipse.che.workspace.infrastructure.openshift.environment.OpenShiftEnvironmentFactory; <nl> 
mmm WorkspaceLinksGenerator.java <nl> ppp WorkspaceLinksGenerator.java <nl> - import org.eclipse.che.api.core.model.workspace.Workspace; <nl> + import org.eclipse.che.api.workspace.server.model.impl.WorkspaceImpl; <nl> - public Map<String, String> genLinks(Workspace workspace, ServiceContext serviceContext) <nl> 
mmm CommandConverterTest.java <nl> ppp CommandConverterTest.java <nl> - import static org.eclipse.che.api.devfile.server.Constants.COMPONENT_NAME_COMMAND_ATTRIBUTE; <nl> + import static org.eclipse.che.api.devfile.server.Constants.COMPONENT_ALIAS_COMMAND_ATTRIBUTE; <nl> - workspaceCommand.getAttributes().put(COMPONENT_NAME_COMMAND_ATTRIBUTE, "dockerimageComponent"); <nl> 
mmm SourceEntryViewImpl.java <nl> ppp SourceEntryViewImpl.java <nl> - import com.google.gwt.user.client.EventListener; <nl> - import org.eclipse.che.ide.ext.java.shared.dto.classpath.ClasspathEntryDto; <nl> + import org.eclipse.che.jdt.ls.extension.api.dto.ClasspathEntry; <nl> - import com.google.common.base.Optional; <nl> 
mmm WorkspaceDaoTest.java <nl> ppp WorkspaceDaoTest.java <nl> - final ServerConfigImpl serverConf1 = new ServerConfigImpl("2265", "http", "path1"); <nl> - final ServerConfigImpl serverConf2 = new ServerConfigImpl("2266", "ftp", "path2"); <nl> + final ServerConfigImpl serverConf1 = <nl> + new ServerConfigImpl("2265", "http", "path1", singletonMap("key", "value")); <nl> 
mmm KubernetesPluginsToolingApplier.java <nl> ppp KubernetesPluginsToolingApplier.java <nl> - import static java.util.Collections.singletonList; <nl> - import static java.util.Collections.singletonMap; <nl> - import static java.util.stream.Collectors.toMap; <nl> - import static org.eclipse.che.api.core.model.workspace.config.MachineConfig.MEMORY_LIMIT_ATTRIBUTE; <nl> 
new file <nl> ppp MoviePresenter.java <nl> + package com.chad.baserecyclerviewadapterhelper.entity; <nl> + import android.view.View; <nl> + import android.widget.Toast; <nl> + public class MoviePresenter { <nl> + public void buyTicket(View view, Movie movie) { <nl> + Toast.makeText(view.getContext(), "buy ticket: " + movie.name, Toast.LENGTH_SHORT).show(); <nl> 
new file <nl> ppp NestAdapter.java <nl> + package com.chad.baserecyclerviewadapterhelper.adapter; <nl> + import android.text.TextPaint; <nl> + import android.text.method.LinkMovementMethod; <nl> + import android.text.style.ClickableSpan; <nl> + import android.view.View; <nl> + import android.widget.TextView; <nl> 
mmm ItemClickActivity.java <nl> ppp ItemClickActivity.java <nl> + import com.chad.library.adapter.base.BaseViewHolder; <nl> - adapter.setOnItemClickListener(new BaseQuickAdapter.OnItemClickListener() { <nl> + adapter.setOnItemClickListener(new BaseQuickAdapter.OnItemClickListener<ClickEntity>() { <nl> - public void onItemClick(BaseQuickAdapter adapter, View view, int position) { <nl> 
mmm TrendingTimespanAdapter.java <nl> ppp TrendingTimespanAdapter.java <nl> - public final class TrendingTimespanAdapter extends EnumAdapter<TrendingTimespan> { <nl> + final class TrendingTimespanAdapter extends EnumAdapter<TrendingTimespan> { <nl> mmm MockRequestHandler.java <nl> ppp MockRequestHandler.java <nl> 
deleted file <nl> mmm AspectRatioImageView.java <nl> - package com.jakewharton.u2020.ui.misc; <nl> - import android.content.Context; <nl> - import android.content.res.TypedArray; <nl> - import android.util.AttributeSet; <nl> - import android.widget.ImageView; <nl> - import com.jakewharton.u2020.R; <nl> - import static android.view.View.MeasureSpec.EXACTLY; <nl> 
mmm Memory.java <nl> ppp Memory.java <nl> - import static com.sun.btrace.BTraceUtils.Sys.Memory.*; <nl> - println(strcat(method, strcat(" in ", probeMethod))); <nl> + println(Strings.strcat(method, Strings.strcat(" in ", probeMethod))); <nl> mmm Sizeof.java <nl> ppp Sizeof.java <nl> - import static com.sun.btrace.BTraceUtils.Strings.*; <nl> 
mmm BTraceRuntime.java <nl> ppp BTraceRuntime.java <nl> + import com.sun.btrace.instr.RunnableGenerator; <nl> - import java.util.Queue; <nl> - private static final Unsafe unsafe = Unsafe.getUnsafe(); <nl> + private static volatile Unsafe unsafe = null; <nl> + public static void initUnsafe() { <nl> + if (unsafe == null) { <nl> 
deleted file <nl> mmm CopyingVisitor.java <nl> - package org.openjdk.btrace.instr; <nl> - import org.objectweb.asm.ClassVisitor; <nl> - import org.objectweb.asm.MethodVisitor; <nl> - import org.objectweb.asm.Opcodes; <nl> - import static org.objectweb.asm.Opcodes.ASM7; <nl> - class CopyingVisitor extends ClassVisitor { <nl> 
mmm MyFragmentPagerAdapter.java <nl> ppp MyFragmentPagerAdapter.java <nl> - import android.support.v4.app.FragmentPagerAdapter; <nl> + import android.support.v4.app.FragmentStatePagerAdapter; <nl> + import android.text.Html; <nl> - public class MyFragmentPagerAdapter extends FragmentPagerAdapter { <nl> + public class MyFragmentPagerAdapter extends FragmentStatePagerAdapter { <nl> 
new file <nl> ppp WxArticleAdapter.java <nl> + package com.example.jingbin.cloudreader.adapter; <nl> + import android.support.annotation.NonNull; <nl> + import android.view.ViewGroup; <nl> + import com.example.jingbin.cloudreader.R; <nl> + import com.example.jingbin.cloudreader.base.baseadapter.BaseRecyclerViewAdapter; <nl> 
mmm CustomFragment.java <nl> ppp CustomFragment.java <nl> + mIsFirst = false; <nl> - if (mIsFirst) { <nl> - mIsFirst = false; <nl> - } <nl> mmm HomeFragment.java <nl> ppp HomeFragment.java <nl> - headerBinding.banner.stopAutoPlay(); <nl> + headerBinding.banner.startAutoPlay(); <nl> + mIsFirst = false; <nl> - if (mIsFirst && viewModel.getPage() == 0) { <nl> 
mmm SecondsBasedEntryTaskSchedulerTest.java <nl> ppp SecondsBasedEntryTaskSchedulerTest.java <nl> + import java.util.Collection; <nl> + import java.util.List; <nl> - import static com.hazelcast.test.HazelcastTestSupport.sleepMillis; <nl> + import static java.util.Arrays.asList; <nl> + import static java.util.stream.Collectors.toList; <nl> 
mmm MemberCompatibilityTest_2_0.java <nl> ppp MemberCompatibilityTest_2_0.java <nl> - @Test <nl> - public void test_MCPollMCEventsCodec_decodeRequest() { <nl> - int fileClientMessageIndex = 812; <nl> - ClientMessage fromFile = clientMessages.get(fileClientMessageIndex); <nl> - MCPollMCEventsCodec.RequestParameters parameters = MCPollMCEventsCodec.decodeRequest(fromFile); <nl> 
mmm ClientLongRegisterProxy.java <nl> ppp ClientLongRegisterProxy.java <nl> + @Override <nl> + public long getAndDecrement() { <nl> + return getAndDecrementAsync().join(); <nl> + } <nl> - return invokeOnPartitionAsync(request, message -> LongRegisterAddAndGetCodec.decodeResponse(message).response); <nl> + return invokeOnPartitionAsync(request, LongRegisterAddAndGetCodec::decodeResponse); <nl> 
mmm ClientMessageReader.java <nl> ppp ClientMessageReader.java <nl> + import com.hazelcast.client.impl.protocol.exception.MaxMessageSizeExceeded; <nl> + import static java.lang.String.format; <nl> - public class ClientMessageReader { <nl> + public final class ClientMessageReader { <nl> + private int sumUntrustedMessageLength; <nl> 
mmm CountDownLatch.java <nl> ppp CountDownLatch.java <nl> + import edu.umd.cs.findbugs.annotations.SuppressFBWarnings; <nl> + import static com.hazelcast.internal.util.Preconditions.checkTrue; <nl> - import static com.hazelcast.internal.util.Preconditions.checkTrue; <nl> - private int round; <nl> - private int countDownFrom; <nl> 
mmm ReplicatedMapMBean.java <nl> ppp ReplicatedMapMBean.java <nl> - import java.util.Collection; <nl> - import java.util.Map; <nl> - import java.util.Set; <nl> - this.statsDelegate = new LocalStatsDelegate<LocalReplicatedMapStats>( <nl> - new LocalReplicatedMapStatsSupplier(managedObject), updateIntervalSec); <nl> 
mmm AbstractTopicNullTest.java <nl> ppp AbstractTopicNullTest.java <nl> + assertThrowsNPE(t -> t.publish(null)); <nl> mmm TopicProxySupport.java <nl> ppp TopicProxySupport.java <nl> - public void publishInternal(Object message) { <nl> + public void publishInternal(@Nonnull Object message) { <nl> mmm TotalOrderedTopicProxy.java <nl> 
mmm HazelcastProperty.java <nl> ppp HazelcastProperty.java <nl> + public HazelcastProperty(String name, Enum<?> defaultEnum) { <nl> + this(name, defaultEnum.name()); <nl> + } <nl> new file <nl> ppp DiagnosticsLogger.java <nl> + package com.hazelcast.internal.diagnostics; <nl> + import com.hazelcast.logging.ILogger; <nl> 
mmm SiteStreamsAdapter.java <nl> ppp SiteStreamsAdapter.java <nl> - @Override <nl> - public void onUserSuspension(long forUser, User suspendedUser) { <nl> - } <nl> - @Override <nl> - public void onUserDeletion(long forUser, User deletedUser) { <nl> - } <nl> mmm UserStreamListener.java <nl> ppp UserStreamListener.java <nl> 
mmm TwitterImpl.java <nl> ppp TwitterImpl.java <nl> + ".json?count=100")); <nl> + @Override <nl> + public IDs getRetweeterIds(long statusId, long cursor) throws TwitterException { <nl> + return getRetweeterIds(statusId, 100, cursor); <nl> + } <nl> + @Override <nl> + public IDs getRetweeterIds(long statusId, int count, long cursor) throws TwitterException { <nl> 
mmm StatusJSONImpl.java <nl> ppp StatusJSONImpl.java <nl> + private boolean wasRetweetedByMe; <nl> + 	 <nl> + } <nl> + wasRetweetedByMe = true; <nl> - return myRetweetedStatus != null; <nl> - } <nl> - public Status getMyRetweet() { <nl> - 	return myRetweetedStatus; <nl> + return wasRetweetedByMe; <nl> - EntitySupport, java.io.Serializable { <nl> 
mmm Configuration.java <nl> ppp Configuration.java <nl> - String getUserStreamBaseURL(); <nl> mmm HttpClientFactory.java <nl> ppp HttpClientFactory.java <nl> + import twitter4j.internal.logging.Logger; <nl> + private static final Logger logger = Logger.getLogger(HttpClientFactory.class); <nl> + logger.info("Use " + clazz.getName() + " as HttpClient implementation."); <nl> 
mmm AccountSettings.java <nl> ppp AccountSettings.java <nl> + String getScreenName(); <nl> mmm ConfigurationBase.java <nl> ppp ConfigurationBase.java <nl> - private boolean userStreamWithFollowingsEnabled; <nl> - setUserStreamWithFollowingsEnabled(true); <nl> - @Override <nl> - public boolean isUserStreamWithFollowingsEnabled() { <nl> 
mmm MenuFragment.java <nl> ppp MenuFragment.java <nl> - if(!gwt){ <nl> - out.add(new MenuButton("icon-exit", "$text.quit", Gdx.app::exit)).width(bw).colspan(2); <nl> - } <nl> + out.add(new MenuButton("icon-exit", "$text.quit", Gdx.app::exit)).width(bw).colspan(2); <nl> - if(!gwt){ <nl> - ui.join.show(); <nl> 
mmm BlocksFragment.java <nl> ppp BlocksFragment.java <nl> - 				get().pad(10f); <nl> + 				margin(10f); <nl> mmm HudFragment.java <nl> ppp HudFragment.java <nl> - 				get().pad(Unit.dp.inPixels(12)); <nl> + 				margin(12f); <nl> - 			String formatted = Mindustry.formatter.format(amount); <nl> + 			String formatted = Mindustry.platforms.format(amount); <nl> 
mmm TileConnection.java <nl> ppp TileConnection.java <nl> - public class TileConnection implements Connection{ <nl> + public class TileConnection implements Connection<Tile>{ <nl> - 		return Math.abs(a.worldx() - b.worldx()) + Math.abs(a.worldy() - b.worldy()); <nl> + 		return MHueristic.estimateStatic(a, b); <nl> 
mmm Block.java <nl> ppp Block.java <nl> - 	public void handleItem(Tile tile, Item item, Tile source){ <nl> + 	public void handleItem(Item item, Tile tile, Tile source){ <nl> - 				other.block().handleItem(other, item, tile); <nl> + 				other.block().handleItem(item, other, tile); <nl> - 		handleItem(tile, item, tile); <nl> 
mmm StatusController.java <nl> ppp StatusController.java <nl> + import com.badlogic.gdx.graphics.Color; <nl> + import io.anuke.ucore.util.Tmp; <nl> mmm EnvironmentFx.java <nl> ppp EnvironmentFx.java <nl> - public static Effect burning, fire, smoke, steam, fireballsmoke, ballfire, freezing, melting, wet, oily; <nl> 
mmm LiquidPowerGenerator.java <nl> ppp LiquidPowerGenerator.java <nl> - 			stream.writeByte(liquid == null ? -1 : liquid.ordinal()); <nl> + 			stream.writeByte(liquid == null ? -1 : liquid.id); <nl> - 			byte ordinal = stream.readByte(); <nl> - 			liquid = ordinal == -1 ? null : Liquid.values()[ordinal]; <nl> 
mmm NetworkIO.java <nl> ppp NetworkIO.java <nl> - Vars.ui.weaponfrag.update(); <nl> + Vars.ui.hudfrag.updateWeapons(); <nl> mmm WeaponFactory.java <nl> ppp WeaponFactory.java <nl> - Vars.ui.weaponfrag.update(); <nl> + Vars.ui.hudfrag.updateWeapons(); <nl> mmm DesktopInput.java <nl> ppp DesktopInput.java <nl> - 				ui.weaponfrag.update(); <nl> 
mmm FlamerEnemy.java <nl> ppp FlamerEnemy.java <nl> - public class FlamerType extends EnemyType { <nl> + public class FlamerEnemy extends EnemyType { <nl> - 	public FlamerType() { <nl> + 	public FlamerEnemy() { <nl> mmm DesktopLauncher.java <nl> ppp DesktopLauncher.java <nl> - 		DiscordRPC lib = DiscordRPC.INSTANCE; <nl> 
mmm MobileInput.java <nl> ppp MobileInput.java <nl> - region.getRegionWidth() * request.scale  * scaling, region.getRegionHeight() * request.scale * scaling, <nl> + region.getRegionWidth() * request.scale, region.getRegionHeight() * request.scale, <nl> - region.getRegionWidth() * lineScale * scaling, region.getRegionHeight() * lineScale * scaling, recipe.result.rotate ? result.rotation * 90 : 0); <nl> 
mmm BaseUnit.java <nl> ppp BaseUnit.java <nl> - if(!isWave){ <nl> + if(!isWave && !isFlying()){ <nl> mmm ServerControl.java <nl> ppp ServerControl.java <nl> + import io.anuke.mindustry.game.Version; <nl> - import io.anuke.mindustry.maps.Map; <nl> - import io.anuke.mindustry.game.Version; <nl> - import io.anuke.mindustry.net.*; <nl> 
mmm ServerControl.java <nl> ppp ServerControl.java <nl> + import io.anuke.mindustry.io.Version; <nl> - Timers.runTask(30f, () -> { <nl> + Timers.runTask(10f, () -> { <nl> - Timers.runTask(30f, () -> { <nl> + if (mode != ShuffleMode.off) { <nl> + Array<Map> maps = mode == ShuffleMode.both ? world.maps().getAllMaps() : <nl> 
mmm NetServer.java <nl> ppp NetServer.java <nl> - if(threads.isEnabled() && !threads.isOnThread()) return; <nl> mmm MinimapRenderer.java <nl> ppp MinimapRenderer.java <nl> - synchronized(units){ <nl> - rect.set((dx - sz) * tilesize, (dy - sz) * tilesize, sz * 2 * tilesize, sz * 2 * tilesize); <nl> - Graphics.beginClip(x, y, w, h); <nl> 
mmm MassDriver.java <nl> ppp MassDriver.java <nl> - if(selected == null || !(selected.block() instanceof MassDriver) || !(selected.dst(x * tilesize, y * tilesize) <= range)) return; <nl> + if(!(selected.block() instanceof MassDriver) || !(selected.dst(x * tilesize, y * tilesize) <= range)) return; <nl> - float sin = Mathf.absin(Time.time(), 6f, 1f); <nl> 
mmm BlockRenderer.java <nl> ppp BlockRenderer.java <nl> - Tile tile = world.rawTile(x, y); <nl> - if(tile != null){ <nl> - Block block = tile.block(); <nl> - Team team = tile.getTeam(); <nl> + synchronized(Tile.tileSetLock){ <nl> + Tile tile = world.rawTile(x, y); <nl> - if(!expanded && block != Blocks.air && world.isAccessible(x, y)){ <nl> 
mmm Separator.java <nl> ppp Separator.java <nl> - offloadNear(item); <nl> + offload(item); <nl> mmm TODOPlanetGenerator.java <nl> ppp TODOPlanetGenerator.java <nl> - return Mathf.pow((float)noise.octaveNoise3D(7, 0.48f, 1f/3f, position.x, position.y, position.z), 2.3f); <nl> + return Mathf.pow((float)noise.octaveNoise3D(7, 0.48f, 1f/3f, position.x, position.y, position.z), 2.3f) + 0.05f; <nl> 
mmm AndroidLauncher.java <nl> ppp AndroidLauncher.java <nl> + import android.content.Context; <nl> + import android.content.res.Configuration; <nl> - import android.util.DisplayMetrics; <nl> - 	boolean doubleScaleTablets = false; <nl> + 	boolean doubleScaleTablets = true; <nl> - 			DisplayMetrics metrics = new DisplayMetrics(); <nl> 
mmm Weather.java <nl> ppp Weather.java <nl> - if(!headless && sound != Sounds.none){ <nl> + if(sound != Sounds.none){ <nl> - loops.play(sound, Math.max((soundVol + noise) * state.opacity, soundVolMin)); <nl> + loops.play(sound, Core.camera.position, Math.max((soundVol + noise) * state.opacity, soundVolMin)); <nl> 
mmm MenuButton.java <nl> ppp MenuButton.java <nl> - import com.badlogic.gdx.graphics.g2d.BitmapFont; <nl> - import io.anuke.ucore.core.Core; <nl> - import io.anuke.ucore.scene.ui.Button; <nl> - import io.anuke.ucore.scene.ui.layout.Unit; <nl> - import io.anuke.ucore.util.Bundles; <nl> - public class MenuButton extends Button{ <nl> 
mmm PointDefenseTurret.java <nl> ppp PointDefenseTurret.java <nl> - public class PointDefenseEntity extends Building{ <nl> + public class PointDefenseBuild extends Building{ <nl> mmm UnitPayload.java <nl> ppp UnitPayload.java <nl> - @Override <nl> - public boolean fits(){ <nl> - return unit.hitSize <= 16f; <nl> 
mmm Wall.java <nl> ppp Wall.java <nl> - return (other != this || rotate) && this.group != BlockGroup.none && other.group == this.group && health > other.health && size >= other.size; <nl> + if(other.alwaysReplace) return true; <nl> + return (other != this || rotate) && this.group != BlockGroup.none && other.group == this.group && other != this && size >= other.size; <nl> 
mmm MapInfoDialog.java <nl> ppp MapInfoDialog.java <nl> - import io.anuke.arc.Core; <nl> - import io.anuke.arc.collection.ObjectMap; <nl> - import io.anuke.arc.scene.ui.TextArea; <nl> - import io.anuke.arc.scene.ui.TextField; <nl> - import io.anuke.mindustry.Vars; <nl> - import io.anuke.mindustry.core.Platform; <nl> 
mmm BlendFilter.java <nl> ppp BlendFilter.java <nl> - package io.anuke.mindustry.editor.generation; <nl> + package io.anuke.mindustry.maps.filters; <nl> - import io.anuke.mindustry.editor.generation.FilterOption.BlockOption; <nl> - import io.anuke.mindustry.editor.generation.FilterOption.SliderOption; <nl> 
new file <nl> ppp ProducerApp.java <nl> + package io.vertx.example.jgroups; <nl> + import io.vertx.core.AbstractVerticle; <nl> + import io.vertx.core.Vertx; <nl> + import io.vertx.core.VertxOptions; <nl> + public class ProducerApp extends AbstractVerticle { <nl> + public static void main(String[] args) { <nl> 
mmm Runner.java <nl> ppp Runner.java <nl> - public static void runClusteredExample(Class clazz, VertxOptions options) { <nl> - runExample(CORE_EXAMPLES_JAVA_DIR, clazz, options.setClustered(true), null); <nl> - } <nl> new file <nl> ppp ProducerApp.java <nl> + package io.vertx.example.ignite; <nl> + import io.vertx.core.Vertx; <nl> 
new file <nl> ppp StatsConsumerApp.java <nl> + package io.vertx.example.infinispan; <nl> + import java.util.UUID; <nl> + import io.vertx.core.AbstractVerticle; <nl> + import io.vertx.core.Vertx; <nl> + import io.vertx.core.VertxOptions; <nl> + import io.vertx.core.shareddata.Counter; <nl> + public class StatsConsumerApp extends AbstractVerticle { <nl> 
mmm WorldProvider.java <nl> ppp WorldProvider.java <nl> + import baritone.api.cache.IWorldData; <nl> + import baritone.api.cache.IWorldProvider; <nl> - public enum WorldProvider implements Helper { <nl> + public enum WorldProvider implements IWorldProvider, Helper { <nl> - public final WorldData getCurrentWorld() { <nl> 
new file <nl> ppp AirSchematic.java <nl> + package baritone.utils.schematic; <nl> + import baritone.api.utils.ISchematic; <nl> + import net.minecraft.block.state.IBlockState; <nl> + import net.minecraft.init.Blocks; <nl> + public class AirSchematic implements ISchematic { <nl> + private final int widthX; <nl> 
mmm ThisWayCommand.java <nl> ppp ThisWayCommand.java <nl> - super(baritone, Arrays.asList("thisway", "forward")); <nl> + super(baritone, "thisway", "forward"); <nl> mmm TabCompleteHelper.java <nl> ppp TabCompleteHelper.java <nl> - .flatMap(command -> command.names.stream()) <nl> + .flatMap(command -> command.getNames().stream()) <nl> 
mmm CommandInvalidArgumentException.java <nl> ppp CommandInvalidArgumentException.java <nl> - protected CommandInvalidArgumentException(ICommandArgument arg, String message) { <nl> - super(formatMessage(arg, message)); <nl> - this.arg = arg; <nl> - } <nl> - protected CommandInvalidArgumentException(ICommandArgument arg, String message, Throwable cause) { <nl> 
mmm GameEventHandler.java <nl> ppp GameEventHandler.java <nl> - dispatch(listener -> listener.onSendPacket(event)); <nl> + dispatch(behavior -> behavior.onSendPacket(event)); <nl> - dispatch(listener -> listener.onReceivePacket(event)); <nl> + dispatch(behavior -> behavior.onReceivePacket(event)); <nl> - dispatch(listener -> listener.onQueryItemSlotForBlocks(event)); <nl> 
new file <nl> ppp PathingCommandContext.java <nl> + package baritone.utils; <nl> + import baritone.api.pathing.goals.Goal; <nl> + import baritone.api.process.PathingCommand; <nl> + import baritone.api.process.PathingCommandType; <nl> + import baritone.pathing.movement.CalculationContext; <nl> + public class PathingCommandContext extends PathingCommand { <nl> 
mmm IMineBehavior.java <nl> ppp IMineBehavior.java <nl> - package baritone.api.process; <nl> + package baritone.api.behavior; <nl> - public interface IMineProcess extends IBaritoneProcess { <nl> + public interface IMineBehavior extends IBehavior { <nl> - void mineByName(int quantity, String... blocks); <nl> 
mmm AbstractTestDescriptor.java <nl> ppp AbstractTestDescriptor.java <nl> + 	@Override <nl> + 	public String toString() { <nl> + 		return getClass().getSimpleName() + ": " + getUniqueId(); <nl> + 	} <nl> mmm SampleTestCase.java <nl> ppp SampleTestCase.java <nl> + import org.junit.gen5.api.Context; <nl> - 	class InnerTestCase { <nl> 
mmm SpecificationResolverTests.java <nl> ppp SpecificationResolverTests.java <nl> - 	@org.junit.Test <nl> + 	@Test <nl> - 	@org.junit.Test <nl> + 	@Test <nl> - 	@org.junit.Test <nl> + 	@Test <nl> - 	@org.junit.Test <nl> + 	@Test <nl> - 	@org.junit.Test <nl> + 	@Test <nl> - 	@org.junit.Test(expected = IllegalArgumentException.class) <nl> 
mmm AvailableOptions.java <nl> ppp AvailableOptions.java <nl> new file <nl> ppp TokenTests.java <nl> + package org.junit.platform.launcher.tagexpression; <nl> + import static org.assertj.core.api.AssertionsForClassTypes.assertThat; <nl> + import java.util.List; <nl> + import org.junit.jupiter.api.Test; <nl> 
new file <nl> ppp XmlReportWriterTests.java <nl> + package org.junit.platform.reporting.legacy.xml; <nl> + import static java.util.Collections.singleton; <nl> + import static org.assertj.core.api.Assertions.assertThat; <nl> + import static org.junit.platform.commons.util.CollectionUtils.getOnlyElement; <nl> 
mmm ExpectedExceptionSupportTests.java <nl> ppp ExpectedExceptionSupportTests.java <nl> - import static org.assertj.core.api.Assertions.allOf; <nl> - 							message(value -> value.contains("Expected: an instance of java.io.IOException")))))); <nl> + 							message(value -> value.contains("Expected: an instance of java.io.IOException"))))); <nl> 
mmm ConsoleTestExecutor.java <nl> ppp ConsoleTestExecutor.java <nl> + import org.junit.platform.reporting.xml.XmlReportsWritingListener; <nl> - package org.junit.platform.console.tasks; <nl> + package org.junit.platform.reporting.xml; <nl> + import static org.apiguardian.api.API.Status.EXPERIMENTAL; <nl> + import org.apiguardian.api.API; <nl> 
mmm JUnit5TestDescriptorTests.java <nl> ppp JUnit5TestDescriptorTests.java <nl> - 		ClassTestDescriptor classDescriptor = new ClassTestDescriptor("class id", getClass()); <nl> + 		JUnit5TestDescriptor classDescriptor = new ClassTestDescriptor("class id", getClass()); <nl> mmm SpecificationResolver.java <nl> 
mmm DiscoveryTests.java <nl> ppp DiscoveryTests.java <nl> - import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request; <nl> + import static org.junit.gen5.launcher.main.DiscoveryRequestBuilder.request; <nl> mmm ExceptionHandlingTests.java <nl> ppp ExceptionHandlingTests.java <nl> - import static org.junit.gen5.launcher.DiscoveryRequestBuilder.request; <nl> 
mmm HierarchicalTestExecutorTests.java <nl> ppp HierarchicalTestExecutorTests.java <nl> - 		@Override <nl> - 		public String getName() { <nl> - 			return getUniqueId().toString(); <nl> - 		} <nl> - 			return getName(); <nl> + 			return getUniqueId().toString(); <nl> - 		@Override <nl> - 		public String getName() { <nl> 
mmm CompositeFilter.java <nl> ppp CompositeFilter.java <nl> - 	private static final Filter ALWAYS_INCLUDED_DISCOVERY_FILTER = obj -> included("Always included"); <nl> + 	private static final Filter ALWAYS_INCLUDED_FILTER = obj -> included("Always included"); <nl> - 		return ALWAYS_INCLUDED_DISCOVERY_FILTER; <nl> 
mmm ColoredPrintingTestListener.java <nl> ppp ColoredPrintingTestListener.java <nl> - import static org.junit.gen5.console.ColoredPrintingTestListener.Color.*; <nl> + import static org.junit.gen5.console.ColoredPrintingTestListener.Color.BLUE; <nl> + import static org.junit.gen5.console.ColoredPrintingTestListener.Color.GREEN; <nl> 
mmm GenericBeforeAndAfterAdvice.java <nl> ppp GenericBeforeAndAfterAdvice.java <nl> + import static org.junit.platform.commons.meta.API.Usage.Internal; <nl> + import org.junit.platform.commons.meta.API; <nl> + @API(Internal) <nl> mmm RuleAnnotatedMethod.java <nl> ppp RuleAnnotatedMethod.java <nl> + import static org.junit.platform.commons.meta.API.Usage.Internal; <nl> 
new file <nl> ppp package-info.java <nl> + package org.junit.gen5.commons.util; <nl> mmm ExceptionUtils.java <nl> ppp ExceptionUtils.java <nl> mmm ClasspathScanner.java <nl> ppp ClasspathScanner.java <nl> mmm FunctionUtils.java <nl> ppp FunctionUtils.java <nl> + * <h3>DISCLAIMER</h3> <nl> + * <nl> + * <p>These utilities are intended solely for usage within the JUnit framework <nl> 
mmm AbstractJUnit5TestEngineTests.java <nl> ppp AbstractJUnit5TestEngineTests.java <nl> - import org.junit.gen5.engine.ExecutionEventRecordingEngineExecutionListener; <nl> + import org.junit.gen5.engine.ExecutionEventRecorder; <nl> - 	protected ExecutionEventRecordingEngineExecutionListener executeTestsForClass(Class<?> testClass) { <nl> 
mmm EngineExecutionContext.java <nl> ppp EngineExecutionContext.java <nl> - import java.util.Collection; <nl> - 	private Collection<TestDescriptor> testDescriptors; <nl> + 	private EngineDescriptor engineDescriptor; <nl> mmm AbstractTestDescriptor.java <nl> ppp AbstractTestDescriptor.java <nl> + import java.util.HashSet; <nl> 
mmm MyInstanceIDListenerService.java <nl> ppp MyInstanceIDListenerService.java <nl> - public void onTokenRefresh() { <nl> + public void onTokenRefresh(boolean updateID) { <nl> deleted file <nl> mmm DeepLinkActivity.java <nl> - package com.google.android.gms.samples.appinvite; <nl> - import android.content.Intent; <nl> 
mmm RefPropertyTest.java <nl> ppp RefPropertyTest.java <nl> - import static org.testng.Assert.assertNotEquals; <nl> - import io.swagger.models.properties.IntegerProperty; <nl> - import io.swagger.models.properties.ObjectProperty; <nl> - private static final String PROP_1 = "prop1"; <nl> - private static final String PROP_2 = "prop2"; <nl> 
deleted file <nl> mmm SwaggerSpecFilter.java <nl> - package io.swagger.core.filter; <nl> - import io.swagger.model.ApiDescription; <nl> - import io.swagger.oas.models.Operation; <nl> - import io.swagger.oas.models.media.Schema; <nl> - import io.swagger.oas.models.parameters.Parameter; <nl> - import java.util.List; <nl> 
new file <nl> ppp IndirectImplicitParams.java <nl> + package io.swagger.resources; <nl> + import javax.ws.rs.Consumes; <nl> + import javax.ws.rs.GET; <nl> + import javax.ws.rs.POST; <nl> + import javax.ws.rs.Path; <nl> + import javax.ws.rs.PathParam; <nl> + import javax.ws.rs.Produces; <nl> + import javax.ws.rs.core.MediaType; <nl> 
mmm DefaultJaxrsConfig.java <nl> ppp DefaultJaxrsConfig.java <nl> - servletConfig.getServletContext().setAttribute("reader", new WebXMLReader(servletConfig)); <nl> - servletConfig.getServletContext().setAttribute("scanner", new DefaultJaxrsScanner()); <nl> + new SwaggerContextService().withServletConfig(servletConfig).initConfig().initScanner(); <nl> 
mmm Reader.java <nl> ppp Reader.java <nl> + if (null != formParam.getRequired() && formParam.getRequired()) { <nl> + mergedSchema.addRequiredItem(formParam.getName()); <nl> + } <nl> - private Operation parseMethod( <nl> + protected Operation parseMethod( <nl> mmm SpecFilter.java <nl> ppp SpecFilter.java <nl> 
mmm SecuritySchemeDefinition.java <nl> ppp SecuritySchemeDefinition.java <nl> + import com.fasterxml.jackson.annotation.JsonAnyGetter; <nl> + import com.fasterxml.jackson.annotation.JsonAnySetter; <nl> + import java.util.Map; <nl> + @JsonAnyGetter <nl> + Map<String, Object> getVendorExtensions(); <nl> + @JsonAnySetter <nl> 
deleted file <nl> mmm OperationParser.java <nl> - package io.swagger.jaxrs2; <nl> - import io.swagger.jaxrs2.util.ReaderUtils; <nl> - import io.swagger.oas.annotations.media.ExampleObject; <nl> - import io.swagger.oas.models.ExternalDocumentation; <nl> - import io.swagger.oas.models.examples.Example; <nl> - import io.swagger.oas.models.info.Contact; <nl> 
mmm AbstractParameter.java <nl> ppp AbstractParameter.java <nl> - import java.util.LinkedHashMap; <nl> + import java.util.HashMap; <nl> - private final Map<String, Object> vendorExtensions = new LinkedHashMap<String, Object>(); <nl> + private final Map<String, Object> vendorExtensions = new HashMap<String, Object>(); <nl> 
deleted file <nl> mmm NotFoundException.java <nl> - package com.wordnik.swagger.sample.exception; <nl> - public class NotFoundException extends ApiException { <nl> - private int code; <nl> - public NotFoundException (int code, String msg) { <nl> - super(code, msg); <nl> - this.code = code; <nl> - } <nl> - } <nl> 
mmm EnumPropertyTest.java <nl> ppp EnumPropertyTest.java <nl> + import io.swagger.v3.core.oas.models.ModelWithJacksonEnumField; <nl> + @Test(description = "it should extract enum values from fields using JsonProperty and JsonValue") <nl> + public void testExtractJacksonEnumFields() { <nl> + final Map<String, Schema> models = ModelConverters.getInstance().read(ModelWithJacksonEnumField.class); <nl> 
mmm TestSubResource.java <nl> ppp TestSubResource.java <nl> - package resources; <nl> + package io.swagger.resources; <nl> mmm SubResource.java <nl> ppp SubResource.java <nl> - package resources; <nl> + package io.swagger.resources; <nl> - import models.Employee; <nl> + import io.swagger.models.Employee; <nl> 
mmm GenericPool.java <nl> ppp GenericPool.java <nl> + import org.andengine.BuildConfig; <nl> - 	protected <T> void doAsync(final int pTitleResID, final int pMessageResID, final Callable<T> pCallable, final Callback<T> pCallback) { <nl> - 		this.doAsync(pTitleResID, pMessageResID, pCallable, pCallback, null); <nl> 
deleted file <nl> mmm AnimationPack.java <nl> - package org.andengine.util.animationpack; <nl> - import org.andengine.util.texturepack.TexturePackLibrary; <nl> - public class AnimationPack { <nl> - 	private final TexturePackLibrary mTexturePackLibrary; <nl> - 	private final AnimationPackTiledTextureRegionLibrary mAnimationPackTiledTextureRegionLibrary; <nl> 
mmm DefaultEnvironment.java <nl> ppp DefaultEnvironment.java <nl> - private final ApplicationContextConfiguration configuration; <nl> - this.configuration = configuration; <nl> - if (!this.propertySources.containsKey(EnvironmentPropertySource.NAME) && configuration.isEnvironmentPropertySource()) { <nl> - propertySources.add(new EnvironmentPropertySource( <nl> 
new file <nl> ppp OpenApiControllerVisitor.java <nl> + package io.micronaut.openapi.visitor; <nl> + import com.fasterxml.jackson.core.JsonProcessingException; <nl> + import com.fasterxml.jackson.databind.JsonNode; <nl> + import io.micronaut.core.annotation.AnnotationValue; <nl> + import io.micronaut.core.annotation.Experimental; <nl> 
deleted file <nl> mmm A.java <nl> - package io.micronaut.inject.factory.multiple; <nl> - public class A { <nl> - } <nl> mmm DefaultBeanContext.java <nl> - definition = lastChanceResolve(beanType, qualifier, throwNonUnique, beanDefinitionList); <nl> + Optional<BeanDefinition<T>> primary = beanDefinitionList.stream() <nl> 
mmm BeanDefinitionInjectProcessor.java <nl> ppp BeanDefinitionInjectProcessor.java <nl> + import java.util.function.Function; <nl> - return modelUtils.isOptional(valueType) ? genericUtils.getFirstTypeArgument(valueType).map(TypeMirror::toString).orElse(valueType.toString()) : valueType.toString(); <nl> + if(modelUtils.isOptional(valueType)) { <nl> 
mmm HttpResponse.java <nl> ppp HttpResponse.java <nl> + default String reason() { <nl> + return getStatus().getReason(); <nl> + } <nl> - public DefaultBeanContext(ClassPathResourceLoader resourceLoader) { <nl> + public DefaultBeanContext(ResourceLoader resourceLoader) { <nl> mmm AnnotatedMethodRouteBuilder.java <nl> 
mmm PetOperations.java <nl> ppp PetOperations.java <nl> - import io.reactivex.Maybe; <nl> - @Get("/vendor/{vendor}/{name}") <nl> - Maybe<T> find(String vendor, String name); <nl> new file <nl> ppp MailControllerTest.java <nl> + package example.mail; <nl> + import org.junit.AfterClass; <nl> + import org.junit.BeforeClass; <nl> 
mmm ConsulConfiguration.java <nl> ppp ConsulConfiguration.java <nl> + import org.particleframework.http.client.HttpClientConfiguration; <nl> + import org.particleframework.runtime.ApplicationConfiguration; <nl> + import javax.inject.Inject; <nl> - public class ConsulConfiguration { <nl> + public class ConsulConfiguration extends HttpClientConfiguration { <nl> 
mmm OffersController.java <nl> ppp OffersController.java <nl> + import org.particleframework.context.annotation.Value; <nl> + private final Duration offerDelay; <nl> - public OffersController(OffersRepository offersRepository) { <nl> + public OffersController(OffersRepository offersRepository, @Value("${offers.delay:5s}") Duration offerDelay) { <nl> 
new file <nl> ppp GroupPropertiesSearchSettings.java <nl> + package io.micronaut.security.ldap.configuration; <nl> + import io.micronaut.security.ldap.context.SearchSettings; <nl> + public class GroupPropertiesSearchSettings implements SearchSettings { <nl> + private final LdapConfiguration.GroupConfiguration properties; <nl> 
deleted file <nl> mmm RabbitHeaderBinder.java <nl> - package io.micronaut.configuration.rabbitmq.bind; <nl> - import io.micronaut.core.convert.ArgumentConversionContext; <nl> - import io.micronaut.core.convert.ConversionService; <nl> - import io.micronaut.messaging.annotation.Header; <nl> - import javax.inject.Singleton; <nl> 
mmm SessionForRequest.java <nl> ppp SessionForRequest.java <nl> deleted file <nl> mmm YAMLFactory.java <nl> - package io.micronaut.openapi.util; <nl> - import com.fasterxml.jackson.core.*; <nl> - import com.fasterxml.jackson.core.format.InputAccessor; <nl> - import com.fasterxml.jackson.core.format.MatchStrength; <nl> 
mmm NotNull.java <nl> ppp NotNull.java <nl> mmm EachBeanTest.java <nl> ppp EachBeanTest.java <nl> - package io.micronaut.docs.env; <nl> + package io.micronaut.docs.config.env; <nl> - import static io.micronaut.docs.env.DataSourceFactory.*; <nl> + import static io.micronaut.docs.config.env.DataSourceFactory.*; <nl> 
mmm ExecutionHandle.java <nl> ppp ExecutionHandle.java <nl> - public interface ExecutableHandle<R> { <nl> + public interface ExecutionHandle<R> { <nl> - Class[] typeArguments = null; <nl> + Class[] typeArguments = ReflectionUtils.EMPTY_CLASS_ARRAY; <nl> - * @return The type argument or null if it non-exists <nl> 
mmm SecuredAnnotationRule.java <nl> ppp SecuredAnnotationRule.java <nl> - import io.micronaut.security.Secured; <nl> + import io.micronaut.security.annotation.Secured; <nl> mmm AbstractConsulClient.java <nl> ppp AbstractConsulClient.java <nl> - import io.micronaut.http.client.Client; <nl> + import io.micronaut.http.client.annotation.Client; <nl> 
mmm AbstractPropertySourceLoader.java <nl> ppp AbstractPropertySourceLoader.java <nl> + import io.micronaut.core.io.ResourceLoader; <nl> + import io.micronaut.core.io.ResourceResolver; <nl> - public Optional<PropertySource> load(String resourceName, Environment environment, String environmentName) { <nl> 
deleted file <nl> mmm LoggersEndpoint.java <nl> - package io.micronaut.management.endpoint.loggers; <nl> - import io.micronaut.http.HttpResponse; <nl> - import io.micronaut.http.annotation.QueryValue; <nl> - import io.micronaut.http.hateos.JsonError; <nl> - import io.micronaut.management.endpoint.Endpoint; <nl> 
mmm WriteEndpointRouteBuilder.java <nl> ppp WriteEndpointRouteBuilder.java <nl> - protected void registerRoute(ExecutableMethod<?, ?> method, String id, Integer port) { <nl> + protected void registerRoute(ExecutableMethod<?, ?> method, String id) { <nl> - UriRoute uriRoute = POST(template.toString(), declaringType, method.getMethodName(), method.getArgumentTypes()) <nl> 
mmm MapPropertyResolver.java <nl> ppp MapPropertyResolver.java <nl> + import org.particleframework.core.convert.ConversionContext; <nl> - return conversionService.convert(value, requiredType, typeArguments); <nl> + return conversionService.convert(value, requiredType, ConversionContext.of(typeArguments)); <nl> 
mmm BookService.java <nl> ppp BookService.java <nl> mmm MockBookService.java <nl> ppp MockBookService.java <nl> mmm JdbcBookService.java <nl> ppp JdbcBookService.java <nl> mmm RequiresJdbc.java <nl> ppp RequiresJdbc.java <nl> mmm TextBook.java <nl> ppp TextBook.java <nl> mmm ReplacesTest.java <nl> ppp ReplacesTest.java <nl> 
mmm DefaultHttpClient.java <nl> ppp DefaultHttpClient.java <nl> - if (stream) { <nl> - ch.config().setAutoRead(false); <nl> - } <nl> new file <nl> ppp package-info.java <nl> + @Configuration <nl> + @Requires(classes = StatsdMeterRegistry.class) <nl> + package io.micronaut.configuration.metrics.micrometer.statsd; <nl> 
deleted file <nl> mmm CurrentSessionScope.java <nl> - package io.micronaut.configuration.hibernate.jpa.scope; <nl> - import io.micronaut.aop.InterceptedProxy; <nl> - import io.micronaut.context.BeanContext; <nl> - import io.micronaut.context.BeanResolutionContext; <nl> - import io.micronaut.context.exceptions.NoSuchBeanException; <nl> 
new file <nl> ppp SearchSettings.java <nl> + package io.micronaut.configuration.security.ldap.context; <nl> + public interface SearchSettings { <nl> + boolean isSubtree(); <nl> + String getBase(); <nl> + String getFilter(); <nl> + Object[] getArguments(); <nl> + String[] getAttributes(); <nl> + } <nl> new file <nl> 
new file <nl> ppp DataSourcePoolMetadataProvider.java <nl> + package io.micronaut.jdbc.metadata; <nl> + @FunctionalInterface <nl> + public interface DataSourcePoolMetadataProvider { <nl> + DataSourcePoolMetadata getDataSourcePoolMetadata(); <nl> + } <nl> new file <nl> ppp TomcatDataSourcePoolMetadata.java <nl> 
mmm HealthLevelOfDetailResolver.java <nl> ppp HealthLevelOfDetailResolver.java <nl> - protected final boolean sensitive; <nl> + private final EndpointConfiguration configuration; <nl> - public HealthLevelOfDetailResolver(@Nullable @Named("health") EndpointConfiguration healthConfiguration, <nl> + public HealthLevelOfDetailResolver(@Nullable @Named(HealthEndpoint.NAME) EndpointConfiguration healthConfiguration, <nl> 
mmm RequiresCondition.java <nl> ppp RequiresCondition.java <nl> + String pattern = requirements.get("pattern", String.class).orElse(null); <nl> + boolean hasPattern = StringUtils.isNotEmpty(pattern); <nl> + } else if (hasPattern) { <nl> + String resolved = resolvePropertyValue(property, propertyResolver, defaultValue); <nl> 
mmm NettyClientHttpRequest.java <nl> ppp NettyClientHttpRequest.java <nl> + import org.particleframework.core.util.StringUtils; <nl> + import java.net.URISyntaxException; <nl> - DefaultFullHttpRequest req = content != null ? new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, io.netty.handler.codec.http.HttpMethod.valueOf(httpMethod.name()), getUri().toString(), content) : <nl> 
new file <nl> ppp DefaultNameGenerator.java <nl> + package io.micronaut.configuration.jmx.context; <nl> + import io.micronaut.inject.BeanDefinition; <nl> + import javax.management.MalformedObjectNameException; <nl> + import javax.management.ObjectName; <nl> + import java.util.Hashtable; <nl> + public class DefaultNameGenerator implements NameGenerator { <nl> 
mmm JsonMediaTypeCodec.java <nl> ppp JsonMediaTypeCodec.java <nl> - throw new CodecException("Error decoding JSON stream for type ["+type.getName()+"]: "); <nl> + throw new CodecException("Error decoding JSON stream for type ["+type.getName()+"]: " + e.getMessage()); <nl> - throw new CodecException("Error decoding JSON stream for type ["+type.getName()+"]: "); <nl> 
mmm FileTypeHandler.java <nl> ppp FileTypeHandler.java <nl> + private static final String[] ENTITY_HEADERS = new String[] {HttpHeaders.ALLOW, HttpHeaders.CONTENT_ENCODING, HttpHeaders.CONTENT_LANGUAGE, HttpHeaders.CONTENT_LENGTH, HttpHeaders.CONTENT_LOCATION, HttpHeaders.CONTENT_MD5, HttpHeaders.CONTENT_RANGE, HttpHeaders.CONTENT_TYPE, HttpHeaders.EXPIRES, HttpHeaders.LAST_MODIFIED}; <nl> 
mmm UriRouteMatch.java <nl> ppp UriRouteMatch.java <nl> - public interface UriRouteMatch<R> extends UriMatchInfo, RouteMatch<R> { <nl> + public interface UriRouteMatch<R> extends UriMatchInfo, MethodBasedRouteMatch<R> { <nl> - abstract class AbstractRouteMatch<R> implements RouteMatch<R> { <nl> + abstract class AbstractRouteMatch<R> implements MethodBasedRouteMatch<R> { <nl> 
new file <nl> ppp ParameterNamesModuleFactory.java <nl> + package io.micronaut.jackson.modules; <nl> + import com.fasterxml.jackson.databind.Module; <nl> + import com.fasterxml.jackson.module.paramnames.ParameterNamesModule; <nl> + import io.micronaut.context.annotation.Requires; <nl> + import io.micronaut.core.annotation.Indexed; <nl> 
mmm PetType.java <nl> ppp PetType.java <nl> - DOG, CAT, RODENT, DINOSAUR <nl> + DOG, CAT, RODENT, PIG, DINOSAUR <nl> new file <nl> ppp PetClient.java <nl> + package example.offers.client.v1; <nl> + import io.reactivex.Maybe; <nl> + import org.particleframework.http.annotation.Get; <nl> + import org.particleframework.http.client.Client; <nl> 
new file <nl> ppp JacksonFeatures.java <nl> + package io.micronaut.xml.client.codec; <nl> + import com.fasterxml.jackson.databind.DeserializationFeature; <nl> + import com.fasterxml.jackson.databind.SerializationFeature; <nl> + import io.micronaut.core.annotation.Internal; <nl> + import io.micronaut.jackson.codec.JsonMediaTypeCodec; <nl> 
mmm MainActivity.java <nl> ppp MainActivity.java <nl> - package demo.particlediandroid; <nl> + package demo.micronautdiandroid; <nl> mmm SQLiteRepository.java <nl> ppp SQLiteRepository.java <nl> - package demo.particlediandroid; <nl> + package demo.micronautdiandroid; <nl> mmm RxHttpClient.java <nl> ppp RxHttpClient.java <nl> 
mmm ClaimsGenerator.java <nl> ppp ClaimsGenerator.java <nl> - * @param <T> claim object <nl> - public interface ClaimsGenerator<T> { <nl> + public interface ClaimsGenerator { <nl> - Map<String, ?> generateClaims(UserDetails userDetails, Integer expiration); <nl> + Map<String, Object> generateClaims(UserDetails userDetails, Integer expiration); <nl> 
mmm IssuesControllerTest.java <nl> ppp IssuesControllerTest.java <nl> mmm MessageController.java <nl> ppp MessageController.java <nl> mmm MyRoutes.java <nl> ppp MyRoutes.java <nl> mmm HelloController.java <nl> ppp HelloController.java <nl> mmm TraceService.java <nl> ppp TraceService.java <nl> mmm UploadController.java <nl> 
deleted file <nl> mmm EventLoopGroupFactory.java <nl> - package io.micronaut.http.server.netty; <nl> - import java.util.OptionalInt; <nl> - import java.util.concurrent.Executor; <nl> - import java.util.concurrent.ThreadFactory; <nl> - import io.netty.channel.EventLoopGroup; <nl> - import io.netty.channel.socket.ServerSocketChannel; <nl> 
deleted file <nl> mmm DelegationAdvice.java <nl> - package io.micronaut.aop.introduction.delegation; <nl> - import io.micronaut.aop.Introduction; <nl> - import io.micronaut.context.annotation.Type; <nl> - import java.lang.annotation.Documented; <nl> - import java.lang.annotation.Retention; <nl> - import static java.lang.annotation.RetentionPolicy.RUNTIME; <nl> 
mmm AnnotatedArgumentBinder.java <nl> ppp AnnotatedArgumentBinder.java <nl> - Class<A> annotationType(); <nl> + Class<A> getAnnotationType(); <nl> deleted file <nl> mmm NettyHttpServer.java <nl> - package org.particleframework.http.server.netty; <nl> - import io.netty.bootstrap.ServerBootstrap; <nl> - import io.netty.channel.*; <nl> 
mmm ConsulConfiguration.java <nl> ppp ConsulConfiguration.java <nl> - import io.micronaut.context.annotation.ConfigurationProperties; <nl> - import io.micronaut.core.util.Toggleable; <nl> - import io.micronaut.discovery.config.ConfigDiscoveryConfiguration; <nl> - import io.micronaut.discovery.consul.client.v1.ConsulClient; <nl> 
new file <nl> ppp UrlResource.java <nl> + package io.micronaut.cli.io.support; <nl> + import java.io.File; <nl> + import java.io.IOException; <nl> + import java.io.InputStream; <nl> + import java.net.HttpURLConnection; <nl> + import java.net.MalformedURLException; <nl> + import java.net.URI; <nl> + import java.net.URL; <nl> 
new file <nl> ppp RequiresSpringCloudConfig.java <nl> + package io.micronaut.discovery.spring.condition; <nl> + import io.micronaut.context.annotation.Requires; <nl> + import io.micronaut.core.util.StringUtils; <nl> + import io.micronaut.discovery.spring.SpringCloudConfigConfiguration; <nl> + import java.lang.annotation.*; <nl> 
mmm EndpointConfiguration.java <nl> ppp EndpointConfiguration.java <nl> - public class EndpointConfiguration implements Toggleable { <nl> + public class EndpointConfiguration { <nl> - private Optional<Boolean> enabled = Optional.empty(); <nl> - private Optional<Boolean> sensitive = Optional.empty(); <nl> + protected Optional<Boolean> enabled = Optional.empty(); <nl> 
mmm ClientScope.java <nl> ppp ClientScope.java <nl> + import io.micronaut.core.annotation.AnnotationMetadata; <nl> + import io.micronaut.http.annotation.FilterMatcher; <nl> + import io.micronaut.http.client.filter.HttpClientFilterResolver; <nl> - import java.util.Map; <nl> - import java.util.Objects; <nl> - import java.util.Optional; <nl> 
mmm OpenApiControllerVisitor.java <nl> ppp OpenApiControllerVisitor.java <nl> - if (returnType.isAssignable(HttpResponse.class)) { <nl> + if (isResponseType(returnType)) { <nl> + private boolean isResponseType(ClassElement returnType) { <nl> + return returnType.isAssignable(HttpResponse.class) || returnType.isAssignable("org.springframework.http.HttpEntity"); <nl> 
mmm ResourceRoute.java <nl> ppp ResourceRoute.java <nl> - ResourceRoute where(Predicate<HttpRequest> condition); <nl> + ResourceRoute where(Predicate<HttpRequest<?>> condition); <nl> mmm NettyHttpRequest.java <nl> ppp NettyHttpRequest.java <nl> - public MediaType getContentType() { <nl> + public Optional<MediaType> getContentType() { <nl> 
mmm KafkaListener.java <nl> ppp KafkaListener.java <nl> - @Parallel(shutdownOnError = true) <nl> + @Parallel <nl> + @Override <nl> + protected void addValuesToResults(List<ConvertibleValues<Object>> results, ConvertibleValues<Object> values) { <nl> + Environment environment = getEnvironment(); <nl> + if (environment != null) { <nl> 
deleted file <nl> mmm ServiceInstanceLoadBalancer.java <nl> - package org.particleframework.http.client; <nl> - import org.particleframework.discovery.ServiceInstanceList; <nl> - public interface ServiceInstanceLoadBalancer extends LoadBalancer, ServiceInstanceList { <nl> - } <nl> mmm AnnotationMetadataDelegate.java <nl> 
new file <nl> ppp TravisBean.java <nl> + package org.particleframework.inject.configurations.requirescondition; <nl> + import javax.inject.Singleton; <nl> + @Singleton <nl> + public class TravisBean { <nl> + } <nl> new file <nl> ppp package-info.java <nl> + @Configuration <nl> + @Requires(sdk = Requires.Sdk.JAVA, version = "1.9.0") <nl> 
mmm BeanListPropertyEditor.java <nl> ppp BeanListPropertyEditor.java <nl> + import java.util.HashSet; <nl> + import java.util.Set; <nl> + import io.onedev.server.web.editable.annotation.ExcludedProperties; <nl> + 		Set<String> excludedProperties = new HashSet<>(); <nl> + 		ExcludedProperties excludedPropertiesAnnotation = <nl> 
mmm FixedInCriteria.java <nl> ppp FixedInCriteria.java <nl> - 		if (!fixedIssueNumbers.isEmpty()) <nl> + 		if (fixedIssueNumbers != null && !fixedIssueNumbers.isEmpty()) <nl> - 		return build.getFixedIssueNumbers().contains(issue.getNumber()); <nl> + 		return build.getFixedIssueNumbers() != null && build.getFixedIssueNumbers().contains(issue.getNumber()); <nl> 
mmm SourceTreePage.java <nl> ppp SourceTreePage.java <nl> - import java.io.File; <nl> - import com.pmease.gitop.core.Gitop; <nl> - import com.pmease.gitop.model.storage.StorageManager; <nl> - import com.pmease.gitop.web.util.GitUtils; <nl> - 		File gitDir = Gitop.getInstance(StorageManager.class).getStorage(getProject()).ofCode(); <nl> 
mmm AbstractWicketConfig.java <nl> ppp AbstractWicketConfig.java <nl> + 		getResourceSettings().getCachingStrategy(); <nl> mmm CaretResourceReference.java <nl> ppp CaretResourceReference.java <nl> - package com.pmease.commons.wicket.resource.caret; <nl> + package com.pmease.commons.wicket.assets.caret; <nl> 
mmm GitFilter.java <nl> ppp GitFilter.java <nl> - package com.pmease.gitop.core; <nl> + package com.pmease.gitop.http; <nl> + import com.pmease.gitop.core.Gitop; <nl> new file <nl> ppp HttpServletConfigurator.java <nl> + package com.pmease.gitop.http; <nl> + import java.util.EnumSet; <nl> + import javax.inject.Inject; <nl> 
mmm AuthenticatorBean.java <nl> ppp AuthenticatorBean.java <nl> - public class AuthenticatorHolder implements Serializable { <nl> + public class AuthenticatorBean implements Serializable { <nl> mmm Setting.java <nl> ppp Setting.java <nl> - 	public enum Key {SYSTEM, MAIL, BACKUP, SECURITY, AUTHENTICATOR, ISSUE}; <nl> 
mmm ViewStateAwareAjaxLink.java <nl> ppp ViewStateAwareAjaxLink.java <nl> - package com.pmease.commons.wicket.component; <nl> - import javax.annotation.Nullable; <nl> - import org.apache.commons.lang3.StringUtils; <nl> - import org.apache.wicket.ajax.AjaxRequestTarget; <nl> - import org.apache.wicket.ajax.attributes.AjaxRequestAttributes; <nl> 
mmm ResolveCommitCommand.java <nl> ppp ResolveCommitCommand.java <nl> - "--format=\"%B%n*** commit_message_end ***%nhash:%H%nauthor:%an%ncommitter:%cn%nparents:%P%ndate:%cd\"", <nl> + "--format=%B%n*** commit_message_end ***%nhash:%H%nauthor:%an%ncommitter:%cn%nparents:%P%ndate:%cd", <nl> mmm TreeNode.java <nl> 
mmm AbstractWicketConfig.java <nl> ppp AbstractWicketConfig.java <nl> - 				target.appendJavaScript("$(document.body).trigger('sticky_kit:recalc')"); <nl> + 				target.appendJavaScript("$(document.body).trigger('sticky_kit:recalc');"); <nl> mmm CommonPage.java <nl> ppp CommonPage.java <nl> mmm RequestActivitiesPage.java <nl> 
mmm RawBlobResource.java <nl> ppp RawBlobResource.java <nl> - import java.util.List; <nl> - import com.google.common.collect.Lists; <nl> - import com.pmease.gitplex.web.util.UrlUtils; <nl> - 		final String revision = params.get("objectId").toString(); <nl> - 		 <nl> - 		List<String> paths = Lists.newArrayList(); <nl> 
mmm PersistService.java <nl> ppp PersistService.java <nl> + 	 <nl> mmm DefaultRoleManager.java <nl> ppp DefaultRoleManager.java <nl> - import com.pmease.commons.hibernate.Transactional; <nl> + import com.pmease.commons.hibernate.Sessional; <nl> - 	@Transactional <nl> + 	@Sessional <nl> - 	@Transactional <nl> + 	@Sessional <nl> 
mmm DefaultProjectManager.java <nl> ppp DefaultProjectManager.java <nl> - 	 <nl> mmm PreReceiveServlet.java <nl> ppp PreReceiveServlet.java <nl> - 		Branch branch = branchManager.findBy(project, branchName, true); <nl> + 		Branch branch = branchManager.findBy(project, branchName); <nl> + 		Preconditions.checkNotNull(branch); <nl> 
mmm InterpolativeAssistBehavior.java <nl> ppp InterpolativeAssistBehavior.java <nl> - import com.google.common.collect.Lists; <nl> - 	@Override <nl> - 	protected List<String> getHints(TerminalExpect terminalExpect) { <nl> - 		return Lists.newArrayList("Prepend '\\' to escape '@' or '\\'"); <nl> - 	} <nl> - 	 <nl> 
mmm MultiChoiceEditor.java <nl> ppp MultiChoiceEditor.java <nl> - 					getDescriptor().getDependencyPropertyNames().clear(); <nl> mmm WorkflowReconcilePanel.java <nl> ppp WorkflowReconcilePanel.java <nl> - 							 <nl> mmm DefaultValueProvider.java <nl> ppp DefaultValueProvider.java <nl> - package io.onedev.server.util.inputspec.passwordinput.defaultvalueprovider; <nl> 
mmm PullRequest.java <nl> ppp PullRequest.java <nl> + import com.pmease.gitop.model.gatekeeper.checkresult.Disapproved; <nl> + import com.pmease.gitop.model.gatekeeper.checkresult.Pending; <nl> + import com.pmease.gitop.model.gatekeeper.checkresult.PendingAndBlock; <nl> - 	private User submitter; <nl> + 	private User submittedBy; <nl> 
mmm ProjectTagsPage.java <nl> ppp ProjectTagsPage.java <nl> - 							if (protection.isNoCreation()) { <nl> + 							if (protection.isPreventCreation()) { <nl> - 							setEnabled(!project.getTagProtection(tagName, getLoginUser()).isNoDeletion()); <nl> + 							setEnabled(!project.getTagProtection(tagName, getLoginUser()).isPreventDeletion()); <nl> 
mmm RequestUpdatesPage.java <nl> ppp RequestUpdatesPage.java <nl> + import com.pmease.gitplex.core.model.PullRequest; <nl> - 								send(getPage(), Broadcast.BREADTH, new PullRequestChanged(target, getPullRequest()));								 <nl> + 								send(getPage(), Broadcast.BREADTH, <nl> + 										new PullRequestChanged(target, getPullRequest(), PullRequest.Event.REVIEW_REMOVED));								 <nl> 
mmm GeneralDao.java <nl> ppp GeneralDao.java <nl> + 	 <nl> mmm PersistenceModule.java <nl> ppp PersistenceModule.java <nl> - import com.pmease.commons.persistence.dao.GeneralDaoImpl; <nl> + import com.pmease.commons.persistence.dao.DefaultGeneralDao; <nl> - 		bind(GeneralDao.class).to(GeneralDaoImpl.class); <nl> 
mmm ProductServletConfigurator.java <nl> ppp ProductServletConfigurator.java <nl> - import java.io.File; <nl> - import com.pmease.commons.jetty.ServletContextConfigurator; <nl> + import com.pmease.commons.jetty.ServletConfigurator; <nl> - public class GitopServletContextConfigurator implements ServletContextConfigurator { <nl> 
deleted file <nl> mmm MyTab.java <nl> - package io.onedev.server.web.page.my; <nl> - import org.apache.wicket.Component; <nl> - import org.apache.wicket.model.Model; <nl> - import io.onedev.server.web.component.tabbable.PageTab; <nl> - @SuppressWarnings("serial") <nl> - public class MyTab extends PageTab { <nl> 
new file <nl> ppp GuicyInterface.java <nl> + package com.pmease.commons.product; <nl> + public interface GuicyInterface { <nl> + 	String get(); <nl> + } <nl> new file <nl> ppp TestPage.java <nl> + package com.pmease.commons.product.web; <nl> + import com.pmease.commons.wicket.page.CommonPage; <nl> + public class TestPage extends CommonPage { <nl> 
mmm DefaultBackupCommand.java <nl> ppp DefaultBackupCommand.java <nl> - package com.pmease.commons.hibernate; <nl> + package com.pmease.commons.hibernate.command; <nl> - import javax.validation.Validator; <nl> + import com.pmease.commons.hibernate.DefaultPersistManager; <nl> + import com.pmease.commons.hibernate.EntityValidator; <nl> 
mmm Kernel32.java <nl> ppp Kernel32.java <nl> + int SetThreadExecutionState(int esFlags); <nl> mmm WinNT.java <nl> ppp WinNT.java <nl> - int SERVICE_BOOT_START   = 0x00000000; <nl> - int SERVICE_SYSTEM_START = 0x00000001; <nl> - int SERVICE_AUTO_START   = 0x00000002; <nl> - int SERVICE_DEMAND_START = 0x00000003; <nl> 
mmm Pointer.java <nl> ppp Pointer.java <nl> + @Deprecated <nl> + public String getString(long offset, boolean wide) { <nl> + return wide ? getWideString(offset) : getString(offset); <nl> + } <nl> + @Deprecated <nl> + public String[] getStringArray(long offset, boolean wide) { <nl> + return getStringArray(offset, -1, wide); <nl> 
mmm Netapi32.java <nl> ppp Netapi32.java <nl> - 			Netapi32.class, W32APIOptions.DEFAULT_OPTIONS); <nl> + 			Netapi32.class, W32APIOptions.UNICODE_OPTIONS); <nl> - 	public void setFailureActions(List<SC_ACTION> actions, int resetPeriod, String rebootMsg, <nl> - 			String command) { <nl> - 		SERVICE_FAILURE_ACTIONS.ByReference actionStruct = new SERVICE_FAILURE_ACTIONS.ByReference(); <nl> 
mmm Crypt32.java <nl> ppp Crypt32.java <nl> - 			Crypt32.class, W32APIOptions.UNICODE_OPTIONS); <nl> + 			Crypt32.class, W32APIOptions.DEFAULT_OPTIONS); <nl> - W32APIOptions.UNICODE_OPTIONS); <nl> + W32APIOptions.DEFAULT_OPTIONS); <nl> - 	Rasapi32 INSTANCE = (Rasapi32) Native.loadLibrary("Rasapi32", Rasapi32.class, W32APIOptions.UNICODE_OPTIONS); <nl> 
mmm WebStartTest.java <nl> ppp WebStartTest.java <nl> - public class WebStartTest extends TestCase { <nl> + public class WebStartTest extends TestCase implements Paths { <nl> - String BUILDDIR = System.getProperty("jna.builddir", <nl> - "build" <nl> - + (Platform.is64Bit() <nl> - ? "-d64" : "")); <nl> - String codebase = new File(BUILDDIR, "jws").toURI().toURL().toString(); <nl> 
new file <nl> ppp ModuleGenerator.java <nl> + package com.sun.jna.ant; <nl> + import java.io.File; <nl> + import java.io.FileOutputStream; <nl> + import java.io.IOException; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + import org.objectweb.asm.ClassWriter; <nl> + import org.objectweb.asm.ModuleVisitor; <nl> 
mmm Dispatch.java <nl> ppp Dispatch.java <nl> - public HRESULT GetIDsOfNames(REFIID.ByValue riid, WString[] rgszNames, int cNames, <nl> + public HRESULT GetIDsOfNames(REFIID riid, WString[] rgszNames, int cNames, <nl> - public HRESULT Invoke(DISPID dispIdMember, REFIID.ByValue riid, LCID lcid, <nl> + public HRESULT Invoke(DISPID dispIdMember, REFIID riid, LCID lcid, <nl> 
mmm RpcExecuteService.java <nl> ppp RpcExecuteService.java <nl> + * @throws TxManagerException TxManagerException <nl> mmm NettyContext.java <nl> ppp NettyContext.java <nl> + @SuppressWarnings("unchecked") <nl> mmm TxLoggerHelper.java <nl> ppp TxLoggerHelper.java <nl> + * @param timeOrder  时间排序SQL <nl> + * @param timeOrder  timeOrder <nl> 
mmm SnowflakeConstant.java <nl> ppp SnowflakeConstant.java <nl> - public class SnowFlakeConstant { <nl> + public class SnowflakeConstant { <nl> mmm TMServerRunner.java <nl> ppp TMServerRunner.java <nl> - import com.codingapi.txlcn.tc.id.SnowFlakeStep; <nl> + import com.codingapi.txlcn.tc.id.SnowflakeStep; <nl> 
new file <nl> ppp DemoServiceTest.java <nl> + package com.codingapi.example.tc.service; <nl> + import lombok.SneakyThrows; <nl> + import org.apache.commons.dbutils.QueryRunner; <nl> + import org.junit.jupiter.api.Test; <nl> + import org.springframework.beans.factory.annotation.Autowired; <nl> + import org.springframework.boot.test.context.SpringBootTest; <nl> 
mmm CommandDispatcherCompletionsTest.java <nl> ppp CommandDispatcherCompletionsTest.java <nl> + @Test <nl> + public void testCommand_redirect() throws Exception { <nl> + subject.register(literal("foo")); <nl> + subject.register(literal("bar")); <nl> + subject.register(literal("redirect").redirect(subject.getRoot())); <nl> 
mmm Converter.java <nl> ppp Converter.java <nl> - import org.apache.http.HttpEntity; <nl> - Object to(HttpEntity entity, Type type) throws ConversionException; <nl> + Object to(byte[] body, Type type) throws ConversionException; <nl> + public static abstract class HttpException extends RestException { <nl> 
mmm Headers.java <nl> ppp Headers.java <nl> - public interface HeaderPairs { <nl> + public interface Headers { <nl> - List<HeaderPair> get(); <nl> + List<Header> get(); <nl> - HeaderPairs NONE = new HeaderPairs() { <nl> - @Override public List<HeaderPair> get() { <nl> + Headers NONE = new Headers() { <nl> + @Override public List<Header> get() { <nl> 
mmm WireConverterFactory.java <nl> ppp WireConverterFactory.java <nl> - public Converter<ResponseBody, ?> fromResponseBody(Type type, Annotation[] annotations) { <nl> + public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations) { <nl> - @Override public Converter<?, RequestBody> toRequestBody(Type type, Annotation[] annotations) { <nl> 
mmm Path.java <nl> ppp Path.java <nl> + boolean encode() default true; <nl> mmm RestMethodInfoTest.java <nl> ppp RestMethodInfoTest.java <nl> - Method method = TestingUtils.getMethod(Example.class, "a"); <nl> + Method method = TestingUtils.onlyMethod(Example.class); <nl> - Method method = TestingUtils.getMethod(Example.class, "a"); <nl> 
mmm UrlFetchClientTest.java <nl> ppp UrlFetchClientTest.java <nl> - import static org.mockito.Mockito.verifyNoMoreInteractions; <nl> - assertThat(fetchHeaders).hasSize(1); <nl> - assertHeader(fetchHeaders.get(0), "Content-Type", "text/plain; charset=UTF-8"); <nl> + assertThat(fetchHeaders).hasSize(0); <nl> 
mmm POST.java <nl> ppp POST.java <nl> + import java.lang.annotation.Documented; <nl> + @Documented <nl> mmm GET.java <nl> ppp GET.java <nl> + import java.lang.annotation.Documented; <nl> + @Documented <nl> mmm Path.java <nl> ppp Path.java <nl> + import java.lang.annotation.Documented; <nl> - @Retention(RUNTIME) @Target(PARAMETER) <nl> 
mmm AbstractRpcRemotingClient.java <nl> ppp AbstractRpcRemotingClient.java <nl> - LOGGER.error(FrameworkErrorCode.NetConnect.errCode, <nl> + LOGGER.error(FrameworkErrorCode.NetConnect.getErrCode(), <nl> mmm TmRpcClient.java <nl> ppp TmRpcClient.java <nl> - LOGGER.error(FrameworkErrorCode.ExceptionCaught.errCode, <nl> 
new file <nl> ppp SessionConverter.java <nl> + package io.seata.server.storage; <nl> + import io.seata.common.util.StringUtils; <nl> + import io.seata.core.model.BranchStatus; <nl> + import io.seata.core.model.BranchType; <nl> + import io.seata.core.model.GlobalStatus; <nl> + import io.seata.core.store.BranchTransactionDO; <nl> 
mmm HeadersCallback.java <nl> ppp HeadersCallback.java <nl> + import com.koushikdutta.async.http.libcore.RawHeaders; <nl> - public void onHeaders(HeadersResponse headers); <nl> + public void onHeaders(RawHeaders headers); <nl> mmm CookieTests.java <nl> ppp CookieTests.java <nl> + import android.net.Uri; <nl> 
mmm LoadBitmapStream.java <nl> ppp LoadBitmapStream.java <nl> + import android.graphics.Point; <nl> - Bitmap bitmap = ion.bitmapCache.loadBitmap(result, resizeWidth, resizeHeight); <nl> + Point size = new Point(); <nl> + Bitmap bitmap = ion.bitmapCache.loadBitmap(result, resizeWidth, resizeHeight, size); <nl> 
mmm GsonTests.java <nl> ppp GsonTests.java <nl> + JsonObject json = Ion.with(getContext()) <nl> mmm ConscryptMiddleware.java <nl> ppp ConscryptMiddleware.java <nl> - static void initialize(Context context) { <nl> + public static void initialize(Context context) { <nl> - Class clazz = gms.getClassLoader().loadClass("com.google.android.gms.common.security.ProviderInstallerImpl"); <nl> 
new file <nl> ppp HeadersResponse.java <nl> + package com.koushikdutta.ion; <nl> + import com.koushikdutta.async.http.Headers; <nl> + public class HeadersResponse { <nl> + public HeadersResponse(int code, String message, Headers headers) { <nl> + this.headers = headers; <nl> + this.code = code; <nl> + this.message = message; <nl> 
mmm DumpService.java <nl> ppp DumpService.java <nl> - 						    log.info("[merge-query] {}, {}, size/total={}/{}", dataId, group, datumList.size(), <nl> - 							    rowCount); <nl> + 						log.info("[merge-query] {}, {}, size/total={}/{}", new Object[] { dataId, group, datumList.size(), rowCount }); <nl> 
mmm BaseClusterTest.java <nl> ppp BaseClusterTest.java <nl> - import com.alibaba.nacos.common.http.HttpClientManager; <nl> + import com.alibaba.nacos.common.http.HttpClientBeanHolder; <nl> + import com.alibaba.nacos.common.http.client.NacosRestTemplate; <nl> + import org.slf4j.Logger; <nl> + import org.slf4j.LoggerFactory; <nl> 
mmm Loggers.java <nl> ppp Loggers.java <nl> mmm KeyBuilder.java <nl> ppp KeyBuilder.java <nl> - return key.endsWith(UtilsAndCommons.SWITCH_DOMAIN_NAME) || <nl> - key.endsWith(UtilsAndCommons.SWITCH_DOMAIN_NAME + UtilsAndCommons.RAFT_CACHE_FILE_SUFFIX); <nl> + return key.endsWith(UtilsAndCommons.SWITCH_DOMAIN_NAME) || key <nl> 
mmm NacosDefaultPropertySourceEnvironmentPostProcessorTest.java <nl> ppp NacosDefaultPropertySourceEnvironmentPostProcessorTest.java <nl> + "nacos.version", <nl> mmm RaftStore.java <nl> ppp RaftStore.java <nl> - import java.util.concurrent.Executors; <nl> - import java.util.concurrent.ScheduledExecutorService; <nl> 
mmm GlobalExecutor.java <nl> ppp GlobalExecutor.java <nl> - public static final long HEARTBEAT_INTERVAL_MS = TimeUnit.SECONDS.toMillis(5L); <nl> + public static final long HEARTBEAT_INTVERAL_MS = TimeUnit.SECONDS.toMillis(5L); <nl> - public static final long ADDRESS_SERVER_UPDATE_INTERVAL_MS = TimeUnit.SECONDS.toMillis(5L); <nl> 
mmm NacosNamingService.java <nl> ppp NacosNamingService.java <nl> - @Override <nl> - public void deregisterInstance(String serviceName, Instance instance) throws NacosException { <nl> - deregisterInstance(serviceName, Constants.DEFAULT_GROUP, instance); <nl> - } <nl> mmm AggrWhitelistTest.java <nl> ppp AggrWhitelistTest.java <nl> 
mmm OverrideParameterRequestWrapper.java <nl> ppp OverrideParameterRequestWrapper.java <nl> + @Override <nl> mmm DynamicDataSource.java <nl> ppp DynamicDataSource.java <nl> + @Override <nl> mmm TaskManager.java <nl> ppp TaskManager.java <nl> + @Override <nl> + @Override <nl> mmm CredentialService.java <nl> ppp CredentialService.java <nl> 
mmm HostReactor.java <nl> ppp HostReactor.java <nl> + public ServiceInfo getServiceInfoDirectlyFromServer(final String serviceName, final String clusters) throws NacosException { <nl> + String result = serverProxy.queryList(serviceName, clusters, 0, false); <nl> + if (StringUtils.isNotEmpty(result)) { <nl> 
mmm ServerHttpAgent.java <nl> ppp ServerHttpAgent.java <nl> - boolean isSSL = false; <nl> + final boolean isSSL = false; <nl> mmm ConcurrentDiskUtil.java <nl> ppp ConcurrentDiskUtil.java <nl> - static final int RETRY_COUNT = 10; <nl> - static final int SLEEP_BASETIME = 10; <nl> + private static final int RETRY_COUNT = 10; <nl> 
deleted file <nl> mmm HealthCheckExtendProvider.java <nl> - package com.alibaba.nacos.naming.healthcheck.extend; <nl> - import com.alibaba.nacos.api.naming.pojo.AbstractHealthChecker; <nl> - import com.alibaba.nacos.naming.healthcheck.HealthCheckProcessor; <nl> - import com.alibaba.nacos.naming.healthcheck.HealthCheckType; <nl> 
mmm LogFuture.java <nl> ppp LogFuture.java <nl> - 	private final Object response; <nl> + 	private Object response; <nl> - 	private final Throwable error; <nl> + 	private Throwable error; <nl> + 	public void setResponse(Object response) { <nl> + 		this.response = response; <nl> + 	} <nl> + 	public void setError(Throwable error) { <nl> 
mmm DistroFilter.java <nl> ppp DistroFilter.java <nl> + import com.alibaba.nacos.common.constant.HttpHeaderConsts; <nl> - String userAgent = req.getHeader("User-Agent"); <nl> + String userAgent = req.getHeader(HttpHeaderConsts.USER_AGENT_HEADER); <nl> mmm NamingProxy.java <nl> ppp NamingProxy.java <nl> + import com.alibaba.nacos.common.constant.HttpHeaderConsts; <nl> 
mmm HistoryController.java <nl> ppp HistoryController.java <nl> - 		Page<ConfigHistoryInfo> page = persistService.findConfigHistory(dataId, group, tenant, pageNo, pageSize); <nl> - 		return page; <nl> + 		return persistService.findConfigHistory(dataId, group, tenant, pageNo, pageSize); <nl> + 	private final CapacityService capacityService; <nl> 
mmm ConfigExportAndImportAPI_ITCase.java <nl> ppp ConfigExportAndImportAPI_ITCase.java <nl> - @SpringBootTest(classes = Nacos.class, properties = {"server.servlet.context-path=/nacos", "server.port=7003"}, <nl> - webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT) <nl> - public class ConfigExportAndImportAPI_CITCase { <nl> 
new file <nl> ppp NacosLogProcessor.java <nl> + package com.alibaba.nacos.core.distributed.raft.processor; <nl> + import com.alibaba.nacos.consistency.Serializer; <nl> + import com.alibaba.nacos.consistency.entity.Log; <nl> + import com.alibaba.nacos.core.distributed.raft.JRaftServer; <nl> + import com.alipay.sofa.jraft.rpc.RpcContext; <nl> 
mmm ConfigTest.java <nl> ppp ConfigTest.java <nl> - import java.util.Objects; <nl> mmm ExternalStoragePersistServiceImpl.java <nl> ppp ExternalStoragePersistServiceImpl.java <nl> - return this.dataSourceService.getCurrentDBUrl(); <nl> + return this.dataSourceService.getCurrentDbUrl(); <nl> mmm BaseClusterTest.java <nl> 
new file <nl> ppp ConfigurationFactoryFactory.java <nl> + package io.dropwizard.configuration; <nl> + import javax.validation.Validator; <nl> + import com.fasterxml.jackson.databind.ObjectMapper; <nl> + public interface ConfigurationFactoryFactory<T> { <nl> + public ConfigurationFactory<T> create(Class<T> klass, <nl> 
mmm ConfiguredBundle.java <nl> ppp ConfiguredBundle.java <nl> - public interface ConfiguredBundle<T> { <nl> + public interface ConfiguredBundle<T extends Configuration> { <nl> - void run(T configuration, Environment environment) throws Exception; <nl> + default void run(T configuration, Environment environment) throws Exception { <nl> 
mmm JerseyClientConfiguration.java <nl> ppp JerseyClientConfiguration.java <nl> + @Min(1) <nl> + @Max(16 * 1024) <nl> + private int workQueueSize = 8; <nl> + @JsonProperty <nl> + public int getWorkQueueSize() { <nl> + return workQueueSize; <nl> + } <nl> + @JsonProperty <nl> + public void setWorkQueueSize(int workQueueSize) { <nl> 
mmm SessionFactoryFactory.java <nl> ppp SessionFactoryFactory.java <nl> - List<Class<?>> entities) throws ClassNotFoundException { <nl> + List<Class<?>> entities) { <nl> - List<Class<?>> entities) throws ClassNotFoundException { <nl> + List<Class<?>> entities) { <nl> mmm DBIFactory.java <nl> ppp DBIFactory.java <nl> 
mmm AuthFilter.java <nl> ppp AuthFilter.java <nl> - Preconditions.checkArgument(realm != null, "Realm is not set"); <nl> - Preconditions.checkArgument(prefix != null, "Prefix is not set"); <nl> - Preconditions.checkArgument(authenticator != null, "Authenticator is not set"); <nl> - Preconditions.checkArgument(authorizer != null, "Authorizer is not set"); <nl> 
new file <nl> ppp Validators.java <nl> + package io.dropwizard.jersey.validation; <nl> + import io.dropwizard.validation.valuehandling.OptionalValidatedValueUnwrapper; <nl> + import org.hibernate.validator.HibernateValidator; <nl> + import org.hibernate.validator.HibernateValidatorConfiguration; <nl> + import org.hibernate.validator.spi.valuehandling.ValidatedValueUnwrapper; <nl> 
mmm HttpClientBuilder.java <nl> ppp HttpClientBuilder.java <nl> - import javax.net.ssl.HostnameVerifier; <nl> + import org.apache.http.client.ServiceUnavailableRetryStrategy; <nl> + import javax.net.ssl.HostnameVerifier; <nl> + public HttpClientBuilder using(ServiceUnavailableRetryStrategy serviceUnavailableRetryStrategy) { <nl> 
mmm ManagedCommand.java <nl> ppp ManagedCommand.java <nl> - service.initializeWithModules(configuration, environment); <nl> + service.initializeWithBundles(configuration, environment); <nl> mmm TemplateService.java <nl> ppp TemplateService.java <nl> - import com.yammer.dropwizard.modules.TemplateModule; <nl> 
mmm BasicCredentialsTest.java <nl> ppp BasicCredentialsTest.java <nl> - assertThat(credentials.equals(credentials)).isTrue(); <nl> - assertThat(credentials.equals(new BasicCredentials("u", "p"))).isTrue(); <nl> - assertThat(credentials.equals(null)).isFalse(); <nl> - assertThat(credentials.equals("string")).isFalse(); <nl> 
new file <nl> ppp TestMigrationDatabaseConfiguration.java <nl> + package io.dropwizard.migrations; <nl> + import io.dropwizard.db.DataSourceFactory; <nl> + import io.dropwizard.db.DatabaseConfiguration; <nl> + public class TestMigrationDatabaseConfiguration implements DatabaseConfiguration<TestMigrationConfiguration> { <nl> 
mmm ConfigurationFactory.java <nl> ppp ConfigurationFactory.java <nl> + import org.codehaus.jackson.map.DeserializationConfig; <nl> + import org.codehaus.jackson.map.Module; <nl> + public static <T> ConfigurationFactory<T> forClass(Class<T> klass, Validator validator, Iterable<Module> modules) { <nl> + return new ConfigurationFactory<T>(klass, validator, modules); <nl> 
mmm SessionFactoryFactory.java <nl> ppp SessionFactoryFactory.java <nl> + import org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl; <nl> + import org.hibernate.engine.jdbc.connections.spi.ConnectionProvider; <nl> - import org.hibernate.service.jdbc.connections.internal.DatasourceConnectionProviderImpl; <nl> 
mmm OptionalDeserializer.java <nl> ppp OptionalDeserializer.java <nl> - import org.codehaus.jackson.JsonProcessingException; <nl> - DeserializationContext ctxt) throws IOException, JsonProcessingException { <nl> + DeserializationContext ctxt) throws IOException { <nl> mmm BiDiGzipHandler.java <nl> ppp BiDiGzipHandler.java <nl> 
mmm HttpClientConfiguration.java <nl> ppp HttpClientConfiguration.java <nl> + import com.google.common.base.Optional; <nl> + @NotNull <nl> + private Optional<String> userAgent = Optional.absent(); <nl> + @JsonProperty <nl> + public Optional<String> getUserAgent() { <nl> + return userAgent; <nl> + } <nl> + @JsonProperty <nl> 
mmm DropwizardResourceConfig.java <nl> ppp DropwizardResourceConfig.java <nl> - private String urlPattern; <nl> + private static final Logger LOGGER = LoggerFactory.getLogger(JacksonMessageBodyProvider.class); <nl> + Set<ConstraintViolation<?>> constraintViolations = ConstraintViolations.copyOf(violations); <nl> 
mmm JFXTextField.java <nl> ppp JFXTextField.java <nl> - import javafx.css.*; <nl> - import javafx.scene.control.Control; <nl> + import javafx.css.CssMetaData; <nl> + import javafx.css.SimpleStyleableBooleanProperty; <nl> + import javafx.css.SimpleStyleableObjectProperty; <nl> + import javafx.css.Styleable; <nl> 
mmm DepthManager.java <nl> ppp DepthManager.java <nl> - 	private static DropShadow[] depth = new DropShadow[]{null, <nl> - 	new DropShadow(BlurType.GAUSSIAN, Color.rgb(0,0,0,0.26), 10, 0.12, -1, 2), <nl> - 	new DropShadow(BlurType.GAUSSIAN, Color.rgb(0,0,0,0.26), 15, 0.16, 0, 4), <nl> - 	new DropShadow(BlurType.GAUSSIAN, Color.rgb(0,0,0,0.26), 20, 0.19, 0, 6), <nl> 
mmm JFXDrawer.java <nl> ppp JFXDrawer.java <nl> - 		overlayPane.getStyleClass().add("c3d-drawer-overlay-pane"); <nl> + 		overlayPane.getStyleClass().add("jfx-drawer-overlay-pane"); <nl> - 		sidePane.getStyleClass().add("c3d-drawer-side-pane"); <nl> + 		sidePane.getStyleClass().add("jfx-drawer-side-pane"); <nl> 
deleted file <nl> mmm AbstractJsonEntityFieldMaker.java <nl> - package org.nutz.json; <nl> - import java.lang.reflect.Field; <nl> - import java.lang.reflect.Method; <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - import org.nutz.json.entity.JsonEntityField; <nl> - import org.nutz.lang.Mirror; <nl> 
mmm AsmClassAgent.java <nl> ppp AsmClassAgent.java <nl> - methodArray[i] = pair2.method; <nl> - methodInterceptorList[i] = pair2.listeners; <nl> + methodArray[i] = pair2.getMethod(); <nl> + methodInterceptorList[i] = pair2.getListeners(); <nl> mmm DefaultClassDefiner.java <nl> ppp DefaultClassDefiner.java <nl> 
mmm Files.java <nl> ppp Files.java <nl> - 	private static final Log log = Logs.get(); <nl> - 		Class<?> clazz = Lang.getTypeClass(type); <nl> - 		Type[] paramTypes = null; <nl> - 		if (type instanceof ParameterizedType) <nl> - 			paramTypes = ((ParameterizedType) type).getActualTypeArguments(); <nl> - 		if (clazz == null) { <nl> 
mmm Converter.java <nl> ppp Converter.java <nl> + import org.nutz.el.obj.Elobj; <nl> - import org.nutz.el.obj.IdentifierObj; <nl> + paramSize++; <nl> - if(prev instanceof IdentifierObj){ <nl> - item = new Object[]{new MethodOpt(), new LBracketOpt()}; <nl> + if(prev instanceof Elobj){ <nl> + prem = new MethodOpt(); <nl> 
mmm Localization.java <nl> ppp Localization.java <nl> + 	String defaultLang() default ""; <nl> mmm SocketAtom.java <nl> ppp SocketAtom.java <nl> - import java.util.List; <nl> + import org.nutz.lang.util.Context; <nl> + 	 <nl> + 	protected Context context; <nl> - 	protected SocketLock lock; <nl> - 	protected List<SocketAtom> atoms; <nl> 
mmm Strings.java <nl> ppp Strings.java <nl> + * @author kerbores(kerbores@gmail.com) <nl> + private static Pattern linePattern = Pattern.compile("_(\\w)"); <nl> + private static Pattern humpPattern = Pattern.compile("[A-Z]"); <nl> + public static String line2Hump(String str) { <nl> + str = str.toLowerCase(); <nl> 
new file <nl> ppp NutConfigTest.java <nl> + package org.nutz.resource; <nl> + import java.util.Map; <nl> + import org.junit.Test; <nl> + import org.nutz.conf.NutConf; <nl> + import static org.junit.Assert.*; <nl> + public class NutConfigTest { <nl> + @Test <nl> + public void nullConfigTest(){ <nl> + NutConf.load(); <nl> 
mmm Daos.java <nl> ppp Daos.java <nl> - if (null != stat) <nl> + if (null != stat) { <nl> + } <nl> - if (null != rs) <nl> + if (null != rs) { <nl> + } <nl> - if (meta == null) <nl> + if (meta == null) { <nl> + } <nl> - for (int i = 1; i <= columnCount; i++) <nl> - if (meta.getColumnName(i).equalsIgnoreCase(colName)) <nl> 
mmm Nutz.java <nl> ppp Nutz.java <nl> - return 59; <nl> + return 60; <nl> 
mmm OracleJdbcExpert.java <nl> ppp OracleJdbcExpert.java <nl> - public String wrapKeywork(String columnName, boolean force) { <nl> + public String wrapKeyword(String columnName, boolean force) { <nl> mmm MapEntityMaker.java <nl> ppp MapEntityMaker.java <nl> - ef.setColumnNameInSql(expert.wrapKeywork(columnName, true)); <nl> 
new file <nl> ppp QueueUsingTwoStacks.java <nl> + import java.util.Stack; <nl> + class QueueWithStack { <nl> + private Stack inStack; <nl> + private Stack outStack; <nl> + public QueueWithStack() { <nl> + this.inStack = new Stack(); <nl> + this.outStack = new Stack(); <nl> + } <nl> + public void insert(Object x) { <nl> 
mmm ShellSort.java <nl> ppp ShellSort.java <nl> - package sort; <nl> + package Sorts; <nl> - import static sort.SortUtils.*; <nl> + import static Sorts.SortUtils.*; <nl> - import java.util.ArrayList; <nl> - import java.util.Iterator; <nl> - import java.util.Scanner; <nl> - public class SkylineProblem { <nl> - 	Building[] building; <nl> 
new file <nl> ppp AESEncryption.java <nl> + import javax.crypto.Cipher; <nl> + import javax.crypto.KeyGenerator; <nl> + import javax.crypto.SecretKey; <nl> + import javax.xml.bind.DatatypeConverter; <nl> + public class AESEncryption { <nl> + public static void main(String[] args) throws Exception { <nl> + String plainText = "Hello World"; <nl> 
mmm MTLighterTheme.java <nl> ppp MTLighterTheme.java <nl> + public static final String SELECTION_BACKGROUND = "80CBC4"; <nl> - return "D2D4D5"; <nl> + return "80CBC4"; <nl> - @Override <nl> - protected String[] getSelectionForegroundResources() { <nl> - return new String[]{ <nl> - "mt.lighter.selectionForeground", <nl> 
new file <nl> ppp MTFormUI.java <nl> + package com.chrisrm.idea.config.ui; <nl> + import javax.swing.*; <nl> + public interface MTFormUI { <nl> + void init(); <nl> + JComponent getContent(); <nl> + void afterStateSet(); <nl> + void dispose(); <nl> + } <nl> new file <nl> ppp ConfigNotifier.java <nl> + package com.chrisrm.idea.config; <nl> 
mmm MTMonokaiThemeAction.java <nl> ppp MTMonokaiThemeAction.java <nl> - super.setSelected(e, state); <nl> mmm MTLighterThemeAction.java <nl> ppp MTLighterThemeAction.java <nl> - super.setSelected(e, state); <nl> mmm MTArcDarkThemeAction.java <nl> ppp MTArcDarkThemeAction.java <nl> - super.setSelected(e, state); <nl> 
deleted file <nl> mmm PHPAnnotator.java <nl> - package com.chrisrm.idea.annotators; <nl> - import com.intellij.openapi.editor.DefaultLanguageHighlighterColors; <nl> - import com.intellij.openapi.editor.colors.TextAttributesKey; <nl> - import com.intellij.psi.PsiElement; <nl> - import com.intellij.util.ObjectUtils; <nl> 
mmm OneDarkTheme.java <nl> ppp OneDarkTheme.java <nl> - @Override <nl> - protected String getButtonHighlightColorString() { <nl> - return "373D48"; <nl> - } <nl> - @Override <nl> - protected String[] getButtonHighlightResources() { <nl> - return new String[]{ <nl> - "Button.mt.color2", <nl> - "Button.mt.selection.color2" <nl> 
mmm DebugSQLiteDB.java <nl> ppp DebugSQLiteDB.java <nl> - package com.amitshekhar.sqlite; <nl> + package com.amitshekhar.debug.sqlite; <nl> + import android.database.sqlite.SQLiteDatabase; <nl> - import net.sqlcipher.database.SQLiteDatabase; <nl> + import com.amitshekhar.sqlite.SQLiteDB; <nl> mmm ClientServer.java <nl> 
mmm AddOrUpdateActionConfig.java <nl> ppp AddOrUpdateActionConfig.java <nl> - TypeReference<ImmutableMap<String, String>> typeRef = new TypeReference<>() {}; <nl> + TypeReference typeRef = new TypeReference<ImmutableMap<String, String>>() {}; <nl> mmm AclDAO.java <nl> ppp AclDAO.java <nl> + public List<SanitizedSecret> getBatchSanitizedSecretsFor(Client client, List<String> secretNames) { <nl> 
mmm CommandExecutor.java <nl> ppp CommandExecutor.java <nl> + import java.util.Arrays; <nl> - String password = ClientUtils.readPassword(); <nl> + char[] password = ClientUtils.readPassword(); <nl> + Arrays.fill(password, '\0'); <nl> mmm SecretsResourceIntegrationTest.java <nl> ppp SecretsResourceIntegrationTest.java <nl> 
mmm SecretGeneratorsResource.java <nl> ppp SecretGeneratorsResource.java <nl> + import javax.ws.rs.core.MediaType; <nl> - import static javax.ws.rs.core.MediaType.APPLICATION_JSON; <nl> - @Produces(APPLICATION_JSON) <nl> + @Produces(MediaType.APPLICATION_JSON) <nl> - @Consumes(APPLICATION_JSON) <nl> + @Consumes(MediaType.APPLICATION_JSON) <nl> 
mmm ListVersionsActionTest.java <nl> ppp ListVersionsActionTest.java <nl> + import java.util.Arrays; <nl> + import static org.mockito.Matchers.anyInt; <nl> + import static org.mockito.Matchers.anyLong; <nl> + import static org.mockito.Matchers.anyString; <nl> + import static org.mockito.Matchers.eq; <nl> mmm AssignActionTest.java <nl> 
new file <nl> ppp SecretSeriesJooqDao.java <nl> + package keywhiz.service.daos; <nl> + import com.fasterxml.jackson.core.JsonProcessingException; <nl> + import com.fasterxml.jackson.databind.ObjectMapper; <nl> + import com.google.common.base.Throwables; <nl> + import com.google.common.collect.ImmutableList; <nl> 
mmm Proto.java <nl> ppp Proto.java <nl> - Optional<RepositoryMirror> repositoryMirror = <nl> - kind().isIncluded() || kind().isDefinedValue() <nl> - ? declaringType().get().repository() <nl> - : Optional.<RepositoryMirror>absent(); <nl> - if (repositoryMirror.isPresent() && !typeAdaptersProvider().isPresent()) { <nl> 
mmm Processor.java <nl> ppp Processor.java <nl> + invoke(new Generator_Gsons().usingValues(values).generate()); <nl> - invoke(new Generator_Gsons().usingValues(values).generate()); <nl> mmm JsonParserReader.java <nl> ppp JsonParserReader.java <nl> - throw new IllegalStateException("Expected " + toGsonToken(expected) + " but was " + peek); <nl> 
mmm Value.java <nl> ppp Value.java <nl> + * <nl> - String[] attributeBuilder() default {"*Builder", "builder", "new"}; <nl> + String[] attributeBuilder() default {"Builder", "*Builder", "builder", "from", "build", "*Build", "new"}; <nl> - String detectedAttributeBuilder = valueAttribute.containingType.names() <nl> 
mmm ComparableMatcher.java <nl> ppp ComparableMatcher.java <nl> + import java.util.Optional; <nl> - interface Template<R, V extends Comparable<? super V>> extends ComparableMatcher<R, V>, WithMatcher<R, Self<V>>, NotMatcher<R, Self<V>>, Projection<V>, Aggregation.ComparableAggregation<V> {} <nl> + interface Template<R, V extends Comparable<? super V>> extends ComparableMatcher<R, V>, WithMatcher<R, Self<V>>, NotMatcher<R, Self<V>>, Projection<V>, AggregationTemplate<V> {} <nl> 
mmm Visibility.java <nl> ppp Visibility.java <nl> + import org.immutables.value.processor.meta.ValueMirrors.Style.BuilderVisibility; <nl> + public Visibility forBuilder(BuilderVisibility visibility) { <nl> + switch (visibility) { <nl> + case PACKAGE: <nl> + return PACKAGE; <nl> + case PUBLIC: <nl> + return PUBLIC; <nl> 
mmm TypeIntrospectionBase.java <nl> ppp TypeIntrospectionBase.java <nl> + import com.google.common.base.MoreObjects; <nl> + import com.google.common.collect.ImmutableBiMap; <nl> + import com.google.common.primitives.Primitives; <nl> + protected static final ImmutableBiMap<String, String> BOXED_TO_PRIMITIVE_TYPES; <nl> 
new file <nl> ppp Compiler.java <nl> + package org.immutables.generator; <nl> + import com.sun.tools.javac.code.Symbol.ClassSymbol; <nl> + import java.util.EnumSet; <nl> + import org.eclipse.jdt.internal.compiler.apt.model.ElementImpl; <nl> + enum Compiler { <nl> + JAVAC, ECJ; <nl> + boolean isPresent() { <nl> 
mmm StyleInfo.java <nl> ppp StyleInfo.java <nl> + @Value.Parameter <nl> + @Override <nl> + public abstract String packageGenerated(); <nl> mmm ValueMirrors.java <nl> ppp ValueMirrors.java <nl> + String packageGenerated() default "*"; <nl> mmm Constitution.java <nl> ppp Constitution.java <nl> + import org.immutables.value.processor.meta.Styles.PackageNaming; <nl> 
mmm ConditionRoutesController.java <nl> ppp ConditionRoutesController.java <nl> + import org.apache.dubbo.admin.annotation.Authority; <nl> + @Authority(needLogin = true) <nl> new file <nl> ppp Authority.java <nl> + package org.apache.dubbo.admin.annotation; <nl> + import java.lang.annotation.ElementType; <nl> 
mmm ConsumerService.java <nl> ppp ConsumerService.java <nl> - import org.apache.dubbo.metadata.identifier.MetadataIdentifier; <nl> + import org.apache.dubbo.metadata.report.identifier.MetadataIdentifier; <nl> mmm ConsumerServiceImpl.java <nl> ppp ConsumerServiceImpl.java <nl> - import org.apache.dubbo.metadata.identifier.MetadataIdentifier; <nl> 
mmm DefaultLifecycleExecutor.java <nl> ppp DefaultLifecycleExecutor.java <nl> - private MojoDescriptor getMojoDescriptorForDirectInvocation( final String task, <nl> - final MavenSession session, <nl> - final MavenProject project ) <nl> + private MojoDescriptor getMojoDescriptorForDirectInvocation( String task, <nl> 
mmm Requirement.java <nl> ppp Requirement.java <nl> mmm DuplicateParameterException.java <nl> ppp DuplicateParameterException.java <nl> mmm InvalidParameterException.java <nl> ppp InvalidParameterException.java <nl> mmm MojoDescriptor.java <nl> ppp MojoDescriptor.java <nl> mmm LifecycleXpp3ReaderTest.java <nl> 
mmm DefaultMavenMetadataCacheTest.java <nl> ppp DefaultMavenMetadataCacheTest.java <nl> - repositorySystem = new TestRepositorySystem(); <nl> + repositorySystem = new TestRepositorySystem( null, null ); <nl> mmm DefaultLifecyclesTest.java <nl> ppp DefaultLifecyclesTest.java <nl> + import org.codehaus.plexus.ContainerConfiguration; <nl> 
mmm RewritePhase.java <nl> ppp RewritePhase.java <nl> - bridgedTargetPom = new File( targetBase, bridgingLayout.pathOfArtifactMetadata( pom ).replace( '+', '-' ) ); <nl> + bridgedTargetPom = new File( targetBase, <nl> + bridgingLayout.pathOfArtifactMetadata( pom ).replace( '+', '-' ) ); <nl> mmm FileReporter.java <nl> 
mmm AbstractMavenMultiPageReport.java <nl> ppp AbstractMavenMultiPageReport.java <nl> - package org.apache.maven.reporting; <nl> - import org.apache.maven.doxia.sink.Sink; <nl> - import org.apache.maven.doxia.siterenderer.RendererException; <nl> - import org.apache.maven.reporting.sink.MultiPageSink; <nl> 
mmm MyBatisContainerInitializer.java <nl> ppp MyBatisContainerInitializer.java <nl> new file <nl> ppp ConfigurationTab.java <nl> + package org.mybatis.generator.eclipse.ui.launcher.tabs; <nl> + import org.eclipse.debug.core.ILaunchConfiguration; <nl> + import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy; <nl> 
mmm UpdateByPrimaryKeySelectiveMethodGenerator.java <nl> ppp UpdateByPrimaryKeySelectiveMethodGenerator.java <nl> - public DeleteByExampleMethodGenerator() { <nl> + private boolean generateForJava5; <nl> + public DeleteByExampleMethodGenerator(boolean generateForJava5) { <nl> + this.generateForJava5 = generateForJava5; <nl> 
deleted file <nl> mmm Avocado.java <nl> - package com.avocadojs; <nl> - import android.content.Context; <nl> - import android.util.Log; <nl> - import android.webkit.WebResourceRequest; <nl> - import android.webkit.WebResourceResponse; <nl> - import android.webkit.WebView; <nl> - import android.webkit.WebViewClient; <nl> 
mmm MpscOnSpscQueue.java <nl> ppp MpscOnSpscQueue.java <nl> - long p00, p01, p02, p03, p04, p05, p06, p07; <nl> - long p30, p31, p32, p33, p34, p35, p36, p37; <nl> + public long p00, p01, p02, p03, p04, p05, p06, p07; <nl> + public long p30, p31, p32, p33, p34, p35, p36, p37; <nl> - long p40, p41, p42, p43, p44, p45, p46; <nl> 
mmm BaselinePingPong.java <nl> ppp BaselinePingPong.java <nl> - package io.jaq.spsc.latency; <nl> + package io.jaq.jmh.spsc.latency; <nl> mmm QueueThroughputYieldBase.java <nl> ppp QueueThroughputYieldBase.java <nl> - package io.jaq.spsc.throughput; <nl> + package io.jaq.jmh.spsc.throughput; <nl> mmm QueueThroughputBusyWithBlackholeC.java <nl> 
new file <nl> ppp SingleThreadedPoll.java <nl> + package io.jaq.jmh.spsc.throughput; <nl> + import io.jaq.spsc.SPSCQueueFactory; <nl> + import java.util.Queue; <nl> + import java.util.concurrent.TimeUnit; <nl> + import org.openjdk.jmh.annotations.BenchmarkMode; <nl> + import org.openjdk.jmh.annotations.GenerateMicroBenchmark; <nl> 
deleted file <nl> mmm _1110Test.java <nl> - package com.fishercoder; <nl> - import com.fishercoder.common.classes.TreeNode; <nl> - import com.fishercoder.common.utils.TreeUtils; <nl> - import com.fishercoder.solutions._1110; <nl> - import org.junit.BeforeClass; <nl> - import org.junit.Test; <nl> - import java.util.Arrays; <nl> 
new file <nl> ppp ReplaceCellOp.java <nl> + package com.tmall.wireless.tangram.op; <nl> + import com.tmall.wireless.tangram.structure.BaseCell; <nl> + public class ReplaceCellOp extends TangramOp2<BaseCell, BaseCell> { <nl> + public ReplaceCellOp(BaseCell arg1, BaseCell arg2) { <nl> + super(OP_TYPE.REPLACE_CELL, arg1, arg2); <nl> 
mmm PreviewTest.java <nl> ppp PreviewTest.java <nl> - availability = new Task<>(); <nl> - availability.listen(); <nl> + availability = new Task<>(true); <nl> mmm IntegrationTest.java <nl> ppp IntegrationTest.java <nl> - import android.content.Context; <nl> + import android.media.MediaRecorder; <nl> - import android.view.ViewGroup; <nl> 
mmm FrameManagerTest.java <nl> ppp FrameManagerTest.java <nl> + import androidx.annotation.NonNull; <nl> - import org.junit.After; <nl> - import org.junit.Before; <nl> - import static org.mockito.Mockito.never; <nl> - import static org.mockito.Mockito.reset; <nl> - import static org.mockito.Mockito.times; <nl> 
mmm MailProviderTest.java <nl> ppp MailProviderTest.java <nl> - @Test <nl> - public void getMailById(){ <nl> + @Test public void getMailById() { <nl> - mailProvider.getMail(id).subscribe(new Subscriber<Mail>() { <nl> - @Override public void onCompleted() { <nl> - } <nl> + mailProvider.getMail(id).subscribe(new Subscriber<Mail>() { <nl> 
mmm BlueRunContainer.java <nl> ppp BlueRunContainer.java <nl> + import io.jenkins.blueocean.commons.stapler.TreeResponse; <nl> + import org.kohsuke.stapler.WebMethod; <nl> + import org.kohsuke.stapler.verb.POST; <nl> + @POST <nl> + @WebMethod(name = "") <nl> + @TreeResponse <nl> + public abstract BlueQueueItem create(); <nl> 
deleted file <nl> mmm BluePipelineNodeContainer.java <nl> - package io.jenkins.blueocean.rest.model; <nl> - public abstract class BluePipelineNodeContainer extends Container<BluePipelineNode>{ <nl> - } <nl> deleted file <nl> mmm PipelineNodeGraph.java <nl> - package io.jenkins.blueocean.service.embedded.rest; <nl> 
mmm PipelineSearch.java <nl> ppp PipelineSearch.java <nl> + import hudson.model.ItemGroup; <nl> + import io.jenkins.blueocean.commons.ServiceException; <nl> + private static final String EXCLUDED_FROM_FLATTENING_PARAM ="excludedFromFlattening"; <nl> + private static final String ORGANIZATION_PARAM="organization"; <nl> 
mmm PipelineNodeTest.java <nl> ppp PipelineNodeTest.java <nl> + import java.util.ArrayList; <nl> + private List<FlowNode> getStages(FlowGraphTable nodeGraphTable){ <nl> + List<FlowNode> nodes = new ArrayList<>(); <nl> + for(FlowGraphTable.Row row: nodeGraphTable.getRows()){ <nl> + if(PipelineNodeUtil.isStage(row.getNode()) || <nl> 
mmm Resource.java <nl> ppp Resource.java <nl> + import io.jenkins.blueocean.rest.annotation.Capability; <nl> + @Capability("io.jenkins.blueocean.rest.model.Resource") <nl> + @Capability("io.jenkins.blueocean.rest.model.GenericResource") <nl> mmm BlueMultiBranchPipeline.java <nl> ppp BlueMultiBranchPipeline.java <nl> 
mmm BluePipelineFactory.java <nl> ppp BluePipelineFactory.java <nl> - package io.jenkins.blueocean.rest.model; <nl> + package io.jenkins.blueocean.service.embedded.rest; <nl> + import hudson.model.ItemGroup; <nl> + import io.jenkins.blueocean.rest.model.BluePipeline; <nl> + import io.jenkins.blueocean.rest.model.Resource; <nl> 
mmm MessageEncoderFlyweight.java <nl> ppp MessageEncoderFlyweight.java <nl> - public interface MessageEncoderFlyweight<T extends MessageStructure> extends MessageFlyweight<T>, EncoderFlyweight<T> <nl> + public interface MessageEncoderFlyweight extends MessageFlyweight, EncoderFlyweight <nl> mmm Flyweight.java <nl> 
mmm OtfMessageDecoder.java <nl> ppp OtfMessageDecoder.java <nl> - import uk.co.real_logic.sbe.codec.java.DirectBuffer; <nl> + import uk.co.real_logic.agrona.DirectBuffer; <nl> mmm Util.java <nl> ppp Util.java <nl> + import uk.co.real_logic.agrona.DirectBuffer; <nl> - import uk.co.real_logic.sbe.codec.java.DirectBuffer; <nl> 
mmm FrameCodecEncoder.java <nl> ppp FrameCodecEncoder.java <nl> - @javax.annotation.Generated(value = { "uk.co.real_logic.generation.java.JavaGenerator" }) <nl> + @javax.annotation.Generated(value = { "uk.co.real_logic.sbe.generation.java.JavaGenerator" }) <nl> mmm MetaAttribute.java <nl> ppp MetaAttribute.java <nl> 
mmm LottieStaticValue.java <nl> ppp LottieStaticValue.java <nl> - public class LottieStaticValueCallback<T> implements LottieValueCallback<T> { <nl> + public class LottieStaticValue<T> extends LottieValueCallback<T> { <nl> - public LottieStaticValueCallback(T value) { <nl> + public LottieStaticValue(T value) { <nl> 
mmm LottePointKeyframeAnimation.java <nl> ppp LottePointKeyframeAnimation.java <nl> - if (progress < getStartDelayProgress()) { <nl> + if (progress <= 0f) { <nl> mmm LotteAnimatableShapeValue.java <nl> ppp LotteAnimatableShapeValue.java <nl> - float timePercentage = (frame - startFrame) / (float) durationFrames; <nl> 
mmm RedisUtil.java <nl> ppp RedisUtil.java <nl> + import com.shinemo.mpush.tools.thread.ThreadPoolUtil; <nl> + int i = 0; <nl> - Thread t = new Thread(new Runnable() { <nl> + ThreadPoolUtil.newThread(new Runnable() { <nl> - }); <nl> - t.setDaemon(true); <nl> - t.setName("redis-subscribe-thread"); <nl> - t.start(); <nl> 
mmm BaseMessageHandler.java <nl> ppp BaseMessageHandler.java <nl> + import com.mpush.common.message.BaseMessage; <nl> + import com.mpush.tools.Jsons; <nl> + import com.mpush.tools.common.Reflects; <nl> + import static com.mpush.api.protocol.Packet.FLAG_JSON_BODY; <nl> - public abstract class BaseMessageHandler<T extends Message> implements MessageHandler { <nl> 
mmm BaseMessage.java <nl> ppp BaseMessage.java <nl> - import com.shinemo.mpush.api.connection.Connection; <nl> + import com.shinemo.mpush.api.connection.Connection; <nl> + import com.shinemo.mpush.tools.ConfigCenter; <nl> - if (tmp.length > Constants.COMPRESS_LIMIT) { <nl> + if (tmp.length > ConfigCenter.INSTANCE.getCompressLimit()) { <nl> 
mmm NettyTCPChainedTest.java <nl> ppp NettyTCPChainedTest.java <nl> + import org.apache.camel.BindToRegistry; <nl> + import io.netty.channel.ChannelHandler; <nl> - package org.apache.camel.component.netty; <nl> - import org.apache.camel.Exchange; <nl> - import org.apache.camel.Processor; <nl> - import org.apache.camel.builder.RouteBuilder; <nl> 
mmm ResourceHelperKeyPairProvider.java <nl> ppp ResourceHelperKeyPairProvider.java <nl> + import java.util.function.Supplier; <nl> - import org.apache.camel.spi.ClassResolver; <nl> + import org.apache.camel.CamelContext; <nl> - import org.bouncycastle.openssl.PasswordFinder; <nl> - private ClassResolver classResolver; <nl> 
mmm ResteasyHttpServletRequestWrapper.java <nl> ppp ResteasyHttpServletRequestWrapper.java <nl> - copier = new ResteasyServletInputStreamCopier(getRequest().getInputStream()); <nl> deleted file <nl> mmm TestHttpBinding.java <nl> - package org.apache.camel.component.resteasy.test.beans; <nl> - import java.lang.reflect.InvocationTargetException; <nl> 
mmm CamelContextFactoryBean.java <nl> ppp CamelContextFactoryBean.java <nl> + if (beanPostProcessor instanceof org.apache.camel.spi.CamelBeanPostProcessor) { <nl> + context.setBeanPostProcessor((org.apache.camel.spi.CamelBeanPostProcessor) beanPostProcessor); <nl> + } <nl> mmm DefaultInjector.java <nl> ppp DefaultInjector.java <nl> 
mmm JmsEndpointConfigurationTest.java <nl> ppp JmsEndpointConfigurationTest.java <nl> - import org.apache.camel.impl.JndiRegistry; <nl> mmm ConsumeMessageConverterTest.java <nl> ppp ConsumeMessageConverterTest.java <nl> - import org.apache.camel.impl.JndiRegistry; <nl> mmm JmsMessageCreatedStrategyEndpointTest.java <nl> 
mmm DefaultRuntimeEndpointRegistry.java <nl> ppp DefaultRuntimeEndpointRegistry.java <nl> - answer = rc.getRoute().getId(); <nl> + answer = rc.getRouteId(); <nl> mmm OnExceptionReifier.java <nl> ppp OnExceptionReifier.java <nl> - String id = routeContext.getRoute().getId(); <nl> + String id = routeContext.getRouteId(); <nl> 
mmm BeanCallTest.java <nl> ppp BeanCallTest.java <nl> - import org.apache.camel.test.junit4.CamelTestSupport; <nl> - import org.junit.Test; <nl> + import org.apache.camel.test.junit5.CamelTestSupport; <nl> + import org.junit.jupiter.api.Test; <nl> + import static org.apache.camel.test.junit5.TestSupport.assertListSize; <nl> 
mmm EtcdStatsTest.java <nl> ppp EtcdStatsTest.java <nl> + import org.apache.camel.component.etcd.support.EtcdTestSupport; <nl> - import org.junit.Test; <nl> + import org.junit.jupiter.api.Test; <nl> mmm EtcdServiceCallRouteTest.java <nl> ppp EtcdServiceCallRouteTest.java <nl> - import org.apache.camel.component.etcd.EtcdTestSupport; <nl> 
mmm ManagedComponentTest.java <nl> ppp ManagedComponentTest.java <nl> - context.getManagementStrategy().getManagementAgent().setCreateConnector(true); <nl> deleted file <nl> mmm JmxInstrumentationWithConnectorTest.java <nl> - package org.apache.camel.management; <nl> - import java.rmi.NoSuchObjectException; <nl> 
mmm FileWatchComponentTestBase.java <nl> ppp FileWatchComponentTestBase.java <nl> - newFile.createNewFile(); <nl> + Assume.assumeTrue(newFile.createNewFile()); <nl> - log.warn("Cannot delete " + childFile); <nl> + throw new IOException(); <nl> - log.warn("Cannot delete " + file); <nl> + throw new IOException(); <nl> 
mmm AbstractComponentVerifierExtensionTest.java <nl> ppp AbstractComponentVerifierExtensionTest.java <nl> - import org.junit.Assert; <nl> - import org.junit.Test; <nl> + import org.junit.jupiter.api.Test; <nl> + import static org.junit.jupiter.api.Assertions.assertEquals; <nl> - Component component = context().getComponent(getComponentScheme()); <nl> 
mmm DataFormatReifier.java <nl> ppp DataFormatReifier.java <nl> - import org.apache.camel.model.dataformat.BoonDataFormat; <nl> - map.put(BoonDataFormat.class, BoonDataFormatReifier::new); <nl> deleted file <nl> mmm BoonDataFormat.java <nl> - package org.apache.camel.model.dataformat; <nl> - import javax.xml.bind.annotation.XmlAccessType; <nl> 
mmm XStreamDataFormatReifier.java <nl> ppp XStreamDataFormatReifier.java <nl> - properties.put("converters", definition.getConverters()); <nl> - properties.put("aliases", definition.getAliases()); <nl> - properties.put("omitFields", definition.getOmitFields()); <nl> - properties.put("implicitCollections", definition.getImplicitCollections()); <nl> 
mmm XMLEncryption11Test.java <nl> ppp XMLEncryption11Test.java <nl> - import org.apache.camel.test.junit4.CamelTestSupport; <nl> + import org.apache.camel.test.junit5.CamelTestSupport; <nl> - import org.junit.Before; <nl> - import org.junit.Test; <nl> + import org.junit.jupiter.api.BeforeEach; <nl> + import org.junit.jupiter.api.Test; <nl> 
mmm ExpressionClauseSupport.java <nl> ppp ExpressionClauseSupport.java <nl> - return expression(new SimpleExpression("body")); <nl> + return expression(new SimpleExpression("${body}")); <nl> - package org.apache.camel.language.simple; <nl> - import org.apache.camel.Expression; <nl> - import org.apache.camel.Predicate; <nl> 
mmm OpenshiftBuildConfigsProducer.java <nl> ppp OpenshiftBuildConfigsProducer.java <nl> - import io.fabric8.kubernetes.client.Watcher; <nl> - FilterWatchListMultiDeletable<BuildConfig, BuildConfigList, Boolean, Watch, Watcher<BuildConfig>> buildConfigs; <nl> - buildConfigs = getEndpoint().getKubernetesClient().adapt(OpenShiftClient.class).buildConfigs().inAnyNamespace(); <nl> 
mmm MainLogPlaceholderTest.java <nl> ppp MainLogPlaceholderTest.java <nl> - main.addRoutesBuilder(new RouteBuilder() { <nl> + main.configure().addRoutesBuilder(new RouteBuilder() { <nl> mmm MainSedaTest.java <nl> ppp MainSedaTest.java <nl> - main.addRoutesBuilder(new MyRouteBuilder()); <nl> + main.configure().addRoutesBuilder(new MyRouteBuilder()); <nl> 
mmm InfinispanConsumerEntryUpdatedTest.java <nl> ppp InfinispanConsumerEntryUpdatedTest.java <nl> - mockResult.message(0).outHeader(InfinispanConstants.EVENT_TYPE).isEqualTo("CACHE_ENTRY_MODIFIED"); <nl> - mockResult.message(0).outHeader(InfinispanConstants.IS_PRE).isEqualTo(true); <nl> - mockResult.message(0).outHeader(InfinispanConstants.CACHE_NAME).isNotNull(); <nl> 
mmm ZipkinClientRecipientListRouteTest.java <nl> ppp ZipkinClientRecipientListRouteTest.java <nl> - import org.apache.camel.test.junit4.CamelTestSupport; <nl> - import org.junit.Test; <nl> + import org.apache.camel.test.junit5.CamelTestSupport; <nl> + import org.junit.jupiter.api.Test; <nl> + import static org.junit.jupiter.api.Assertions.assertTrue; <nl> 
mmm S3CopyObjectOperationIntegrationTest.java <nl> ppp S3CopyObjectOperationIntegrationTest.java <nl> mmm ErrorHandlerReifier.java <nl> ppp ErrorHandlerReifier.java <nl> - import org.apache.camel.model.RouteDefinition; <nl> mmm BlobServiceComponentConfigurationTest.java <nl> ppp BlobServiceComponentConfigurationTest.java <nl> 
mmm QueueReplyManager.java <nl> ppp QueueReplyManager.java <nl> - new Object[] { correlationID, replyTo, correlation.size(), message }); <nl> + correlationID, replyTo, correlation.size(), message); <nl> - new Object[] { <nl> - endpoint.getReplyTo() }); <nl> + endpoint.getReplyTo()); <nl> - new Object[] { answer.getConcurrentConsumers(), answer.getMaxConcurrentConsumers(), name }); <nl> 
mmm GoogleMailComponentVerifierExtensionTest.java <nl> ppp GoogleMailComponentVerifierExtensionTest.java <nl> - import org.apache.camel.test.junit4.CamelTestSupport; <nl> - import org.junit.Assert; <nl> - import org.junit.Test; <nl> + import org.apache.camel.test.junit5.CamelTestSupport; <nl> + import org.junit.jupiter.api.Test; <nl> 
mmm ManagementAgent.java <nl> ppp ManagementAgent.java <nl> - public interface ManagementNamingStrategy { <nl> + public interface ManagementObjectNameStrategy { <nl> mmm AbstractCamelContextFactoryBean.java <nl> ppp AbstractCamelContextFactoryBean.java <nl> - import org.apache.camel.spi.ManagementNamingStrategy; <nl> 
mmm RssEntryPollingConsumer.java <nl> ppp RssEntryPollingConsumer.java <nl> + import com.rometools.rome.feed.synd.SyndFeed; <nl> - import com.rometools.rome.feed.synd.SyndFeed; <nl> mmm UpdatedDateFilterTest.java <nl> ppp UpdatedDateFilterTest.java <nl> - import org.junit.Before; <nl> - import org.junit.Test; <nl> 
mmm BomGeneratorMojo.java <nl> ppp BomGeneratorMojo.java <nl> + if (resolved.contains("${")) { <nl> + resolved = resolveVersion(project, resolved); <nl> + } <nl> mmm CamelConfigurationLocationsTest.java <nl> ppp CamelConfigurationLocationsTest.java <nl> - package org.apache.camel.spring.boot; <nl> - import org.junit.Test; <nl> 
mmm HL7ValidateTest.java <nl> ppp HL7ValidateTest.java <nl> - import org.apache.camel.test.junit4.CamelTestSupport; <nl> - import org.junit.Test; <nl> + import org.apache.camel.test.junit5.CamelTestSupport; <nl> + import org.junit.jupiter.api.Test; <nl> + import static org.apache.camel.test.junit5.TestSupport.assertIsInstanceOf; <nl> 
mmm DumpModelAsXmlSplitBodyRouteTest.java <nl> ppp DumpModelAsXmlSplitBodyRouteTest.java <nl> + import org.apache.camel.ExtendedCamelContext; <nl> - import org.apache.camel.model.ModelHelper; <nl> + import org.apache.camel.ExtendedCamelContext; <nl> - import org.apache.camel.model.ModelHelper; <nl> + import org.apache.camel.ExtendedCamelContext; <nl> 
mmm HikariConfig.java <nl> ppp HikariConfig.java <nl> + import com.zaxxer.hikari.util.DriverDataSource; <nl> - private String transactionIsolationName; <nl> + private String catalog; <nl> - private String catalog; <nl> + private String jdbcUrl; <nl> + private String transactionIsolationName; <nl> + private boolean isReadOnly; <nl> 
mmm DefaultThreadFactory.java <nl> ppp DefaultThreadFactory.java <nl> - private String threadName; <nl> - private boolean daemon; <nl> + private final String threadName; <nl> + private final boolean daemon; <nl> mmm HikariJNDIFactory.java <nl> ppp HikariJNDIFactory.java <nl> - context = (Context) (new InitialContext()); <nl> 
mmm Downloader.java <nl> ppp Downloader.java <nl> - package org.schabi.newpipe; <nl> - import android.app.NotificationManager; <nl> - import android.content.Context; <nl> - import android.content.SharedPreferences; <nl> - import android.graphics.drawable.BitmapDrawable; <nl> - import android.graphics.drawable.Drawable; <nl> 
mmm ErrorActivity.java <nl> ppp ErrorActivity.java <nl> - Thread globIpRangeThread = null; <nl> + Thread globIpRangeThread; <nl> mmm BackgroundPlayer.java <nl> ppp BackgroundPlayer.java <nl> - public int duration = 0; <nl> + public int duration; <nl> mmm SettingsActivity.java <nl> ppp SettingsActivity.java <nl> 
mmm ChannelInfoItemHolder.java <nl> ppp ChannelInfoItemHolder.java <nl> - public final TextView itemSubscriberCountView; <nl> - public final TextView itemVideoCountView; <nl> + public final TextView itemAdditionalDetailView; <nl> - itemSubscriberCountView = (TextView) v.findViewById(R.id.itemSubscriberCountView); <nl> 
mmm YoutubeSearchEngine.java <nl> ppp YoutubeSearchEngine.java <nl> - m.find(); <nl> mmm VideoPreviewInfo.java <nl> ppp VideoPreviewInfo.java <nl> + import org.schabi.newpipe.services.AbstractVideoInfo; <nl> + @SuppressWarnings("WeakerAccess") <nl> mmm PlayVideoActivity.java <nl> ppp PlayVideoActivity.java <nl> 
mmm YoutubeStreamExtractor.java <nl> ppp YoutubeStreamExtractor.java <nl> - LiveStreamException(String message) { <nl> - super(message); <nl> + LiveStreamException() { <nl> + super(); <nl> - throw new LiveStreamException("This is a Life stream. Can't use those right now."); <nl> + throw new LiveStreamException(); <nl> 
mmm FilePickerActivityHelper.java <nl> ppp FilePickerActivityHelper.java <nl> + import android.content.Context; <nl> + import android.content.Intent; <nl> + import android.os.Environment; <nl> + import android.support.annotation.NonNull; <nl> + import android.support.annotation.Nullable; <nl> + import android.support.v4.content.Loader; <nl> 
mmm LoadController.java <nl> ppp LoadController.java <nl> - import com.google.android.exoplayer2.C; <nl> - import com.google.android.exoplayer2.upstream.DefaultAllocator; <nl> - import static com.google.android.exoplayer2.DefaultLoadControl.DEFAULT_PRIORITIZE_TIME_OVER_SIZE_THRESHOLDS; <nl> - import static com.google.android.exoplayer2.DefaultLoadControl.DEFAULT_TARGET_BUFFER_BYTES; <nl> 
mmm PlayerDataSource.java <nl> ppp PlayerDataSource.java <nl> - import com.google.android.exoplayer2.source.ExtractorMediaSource; <nl> + import com.google.android.exoplayer2.source.ProgressiveMediaSource; <nl> - public ExtractorMediaSource.Factory getExtractorMediaSourceFactory() { <nl> - return new ExtractorMediaSource.Factory(cacheDataSourceFactory) <nl> 
mmm ServicePlayerActivity.java <nl> ppp ServicePlayerActivity.java <nl> + case R.id.action_settings: <nl> + NavigationHelper.openSettings(this); <nl> + return true; <nl> - return switchTo(MainVideoPlayer.class); <nl> + this.player.setRecovery(); <nl> + getApplicationContext().sendBroadcast(getPlayerShutdownIntent()); <nl> 
mmm MediaSourceManager.java <nl> ppp MediaSourceManager.java <nl> - private final PublishSubject<Long> loadSignal; <nl> + private final PublishSubject<Long> debouncedLoadSignal; <nl> - this(listener, playQueue, 1, 1000L); <nl> + this(listener, playQueue, 1, 400L); <nl> - this.loadSignal = PublishSubject.create(); <nl> 
new file <nl> ppp NavStack.java <nl> + package org.schabi.newpipe.util; <nl> + import android.app.Activity; <nl> + import android.content.Context; <nl> + import android.content.Intent; <nl> + import android.os.Bundle; <nl> + import android.support.v4.app.NavUtils; <nl> + import org.schabi.newpipe.ChannelActivity; <nl> 
mmm ContentSettingsFragment.java <nl> ppp ContentSettingsFragment.java <nl> mmm MediaSourceManager.java <nl> ppp MediaSourceManager.java <nl> - import com.google.android.exoplayer2.source.DynamicConcatenatingMediaSource; <nl> - import org.schabi.newpipe.extractor.stream.StreamInfo; <nl> - import java.util.ArrayList; <nl> 
mmm Localization.java <nl> ppp Localization.java <nl> + import android.annotation.SuppressLint; <nl> + import android.content.res.Configuration; <nl> + import android.content.res.Resources; <nl> + import android.util.DisplayMetrics; <nl> + import androidx.annotation.NonNull; <nl> + import androidx.annotation.PluralsRes; <nl> 
mmm SearchFragment.java <nl> ppp SearchFragment.java <nl> - import org.schabi.newpipe.util.AndroidTvUtils; <nl> + import org.schabi.newpipe.util.AndroidTvUtils; <nl> mmm Mp4FromDashWriter.java <nl> ppp Mp4FromDashWriter.java <nl> - import org.schabi.newpipe.streams.Mp4DashReader.TrunEntry; <nl> + import org.schabi.newpipe.streams.Mp4DashReader.TrunEntry; <nl> 
new file <nl> ppp DownloadManagerImpl.java <nl> + package us.shandian.giga.get; <nl> + import android.content.Context; <nl> + import android.util.Log; <nl> + import com.google.gson.Gson; <nl> + import org.schabi.newpipe.NewPipeSettings; <nl> + import java.io.File; <nl> + import java.io.RandomAccessFile; <nl> 
mmm ChannelActivity.java <nl> ppp ChannelActivity.java <nl> mmm SearchWorker.java <nl> ppp SearchWorker.java <nl> mmm InfoListAdapter.java <nl> ppp InfoListAdapter.java <nl> mmm SuggestionListAdapter.java <nl> ppp SuggestionListAdapter.java <nl> mmm InfoItemHolder.java <nl> ppp InfoItemHolder.java <nl> mmm MainActivity.java <nl> 
new file <nl> ppp BasePlayer.java <nl> + package org.schabi.newpipe.player; <nl> + import android.animation.Animator; <nl> + import android.animation.AnimatorListenerAdapter; <nl> + import android.animation.ValueAnimator; <nl> + import android.content.BroadcastReceiver; <nl> + import android.content.Context; <nl> 
mmm Tab.java <nl> ppp Tab.java <nl> + import org.jsoup.helper.StringUtil; <nl> + import org.schabi.newpipe.App; <nl> + import org.schabi.newpipe.extractor.NewPipe; <nl> + import org.schabi.newpipe.util.ServiceHelper; <nl> + case DEFAULT_KIOSK: <nl> + DefaultKioskTab tab = new DefaultKioskTab(); <nl> + if(!StringUtil.isBlank(tab.getKioskId())){ <nl> 
mmm HistorySettingsFragment.java <nl> ppp HistorySettingsFragment.java <nl> - private String playbackStatesClearKey; <nl> - playbackStatesClearKey = getString(R.string.clear_playback_states_key); <nl> - "Delete playback states", <nl> + "Delete view history", <nl> - if (preference.getKey().equals(playbackStatesClearKey)) { <nl> 
mmm UrlIdHandler.java <nl> ppp UrlIdHandler.java <nl> - public interface StreamUrlIdHandler { <nl> - String getVideoUrl(String videoId); <nl> - String getVideoId(String siteUrl) throws ParsingException; <nl> + public interface UrlIdHandler { <nl> + String getUrl(String videoId); <nl> + String getId(String siteUrl) throws ParsingException; <nl> 
mmm ContentSettingsFragment.java <nl> ppp ContentSettingsFragment.java <nl> - String.format(getString(R.string.service_kosk_string), <nl> + String.format(getString(R.string.service_kiosk_string), <nl> - String.format(getString(R.string.service_kosk_string), <nl> + String.format(getString(R.string.service_kiosk_string), <nl> 
mmm BackgroundPlayer.java <nl> ppp BackgroundPlayer.java <nl> + import android.widget.RemoteViews; <nl> - PendingIntent stopPI = PendingIntent.getBroadcast(owner, noteID, <nl> - new Intent(ACTION_STOP), PendingIntent.FLAG_UPDATE_CURRENT); <nl> - noteBuilder = new NotificationCompat.Builder(owner); <nl> - noteBuilder <nl> 
mmm PopupVideoPlayer.java <nl> ppp PopupVideoPlayer.java <nl> - import static org.schabi.newpipe.util.Localization.changeAppLanguage; <nl> - import static org.schabi.newpipe.util.Localization.getAppLocale; <nl> - private static void initPrettyTime(Context context) { <nl> - prettyTime = new PrettyTime(getAppLocale(context)); <nl> 
mmm SubscriptionDAO.java <nl> ppp SubscriptionDAO.java <nl> + @Override <nl> + @Query("DELETE FROM " + SUBSCRIPTION_TABLE) <nl> + int deleteAll(); <nl> mmm VideoDetailFragment.java <nl> ppp VideoDetailFragment.java <nl> + private OnVideoPlayListener onVideoPlayedListener; <nl> + @Override <nl> + public void onAttach(Context context) { <nl> 
mmm VideoItemDetailActivity.java <nl> ppp VideoItemDetailActivity.java <nl> - import android.view.MenuInflater; <nl> + import org.schabi.newpipe.services.Extractor; <nl> + import org.schabi.newpipe.services.ServiceList; <nl> + import org.schabi.newpipe.services.StreamingService; <nl> - public class VideoInfoItem implements Parcelable { <nl> 
mmm SimpleExoPlayerView.java <nl> ppp SimpleExoPlayerView.java <nl> - import android.view.Surface; <nl> - import com.google.android.exoplayer2.decoder.DecoderCounters; <nl> - MappingTrackSelector.EventListener, MetadataRenderer.Output<List<Id3Frame>> { <nl> + TrackSelector.EventListener<MappedTrackInfo>, MetadataRenderer.Output<List<Id3Frame>> { <nl> 
mmm AudioSink.java <nl> ppp AudioSink.java <nl> + default void onPositionAdvancing(long playoutStartSystemTimeMs) {} <nl> + default void onAudioPositionAdvancing(EventTime eventTime, long playoutStartSystemTimeMs) {} <nl> + if (shouldProcess && !notifiedPositionAdvancing) { <nl> + eventDispatcher.positionAdvancing(System.currentTimeMillis()); <nl> 
mmm TimelineAsserts.java <nl> ppp TimelineAsserts.java <nl> - assertWindowIds(timeline); <nl> + assertWindowTags(timeline); <nl> - public static void assertWindowIds(Timeline timeline, Object... expectedWindowIds) { <nl> + public static void assertWindowTags(Timeline timeline, Object... expectedWindowTags) { <nl> 
mmm LoopingMediaSource.java <nl> ppp LoopingMediaSource.java <nl> - public void prepareSourceInternal( <nl> - ExoPlayer player, <nl> - boolean isTopLevelSource, <nl> - @Nullable TransferListener mediaTransferListener) { <nl> - super.prepareSourceInternal(player, isTopLevelSource, mediaTransferListener); <nl> 
mmm Playlist.java <nl> ppp Playlist.java <nl> + import com.google.android.exoplayer2.source.LoadEventInfo; <nl> mmm AdsMediaSource.java <nl> ppp AdsMediaSource.java <nl> + import com.google.android.exoplayer2.source.LoadEventInfo; <nl> - import com.google.android.exoplayer2.source.MediaSourceEventListener.LoadEventInfo; <nl> 
mmm PlayerView.java <nl> ppp PlayerView.java <nl> + if (subtitleView != null) { <nl> + subtitleView.setCues(null); <nl> + } <nl> - if (subtitleView != null) { <nl> - subtitleView.setCues(null); <nl> - } <nl> + if (subtitleView != null) { <nl> + subtitleView.setCues(newTextComponent.getCurrentCues()); <nl> + } <nl> 
mmm AmrExtractorParameterizedTest.java <nl> ppp AmrExtractorParameterizedTest.java <nl> - @Parameter(0) <nl> - public ExtractorAsserts.SimulationConfig simulationConfig; <nl> + @Parameter public ExtractorAsserts.SimulationConfig simulationConfig; <nl> mmm Ac3ExtractorTest.java <nl> ppp Ac3ExtractorTest.java <nl> 
mmm PlayerActivity.java <nl> ppp PlayerActivity.java <nl> - @Override <nl> - public void onPlayWhenReadyCommitted() { <nl> - } <nl> mmm ExoPlayerImpl.java <nl> ppp ExoPlayerImpl.java <nl> - private int pendingPlayWhenReadyAcks; <nl> - pendingPlayWhenReadyAcks++; <nl> - @Override <nl> - public boolean isPlayWhenReadyCommitted() { <nl> 
mmm DefaultDrmSessionManager.java <nl> ppp DefaultDrmSessionManager.java <nl> - placeholderDrmSession.acquireReference(); <nl> + placeholderDrmSession.acquire(); <nl> - session.acquireReference(); <nl> + session.acquire(); <nl> mmm BaseRenderer.java <nl> ppp BaseRenderer.java <nl> - existingSourceSession.releaseReference(); <nl> 
mmm LibopusAudioRenderer.java <nl> ppp LibopusAudioRenderer.java <nl> + import com.google.android.exoplayer2.audio.AudioProcessor; <nl> - import com.google.android.exoplayer2.audio.BufferProcessor; <nl> - * @param bufferProcessors Optional {@link BufferProcessor}s which will process PCM audio buffers <nl> 
deleted file <nl> mmm SampleChooserActivity.java <nl> - package com.google.android.exoplayer.demo.webm; <nl> - import android.app.Activity; <nl> - import android.content.Context; <nl> - import android.content.Intent; <nl> - import android.os.Bundle; <nl> - import android.view.LayoutInflater; <nl> - import android.view.View; <nl> 
mmm C.java <nl> ppp C.java <nl> + public static final int TRACK_TYPE_UNKNOWN = -1; <nl> + public static final int TRACK_TYPE_DEFAULT = 0; <nl> + public static final int TRACK_TYPE_AUDIO = 1; <nl> + public static final int TRACK_TYPE_VIDEO = 2; <nl> + public static final int TRACK_TYPE_TEXT = 3; <nl> mmm DashChunkSource.java <nl> 
mmm MediaFormat.java <nl> ppp MediaFormat.java <nl> + public static MediaFormat createId3Format() { <nl> + return createFormatForMimeType(MimeTypes.APPLICATION_ID3); <nl> + } <nl> + public static MediaFormat createEia608Format() { <nl> + return createFormatForMimeType(MimeTypes.APPLICATION_EIA608); <nl> + } <nl> 
mmm ExoPlayerTest.java <nl> ppp ExoPlayerTest.java <nl> - public void handleMessage(int what, Object object) throws ExoPlaybackException { <nl> + public void handleMessage(int what, @Nullable Object object) throws ExoPlaybackException { <nl> - public void handleMessage(SimpleExoPlayer player, int messageType, Object message) { <nl> 
new file <nl> ppp DownloadServiceDashTest.java <nl> + package com.google.android.exoplayer2.source.dash.offline; <nl> + import static com.google.android.exoplayer2.source.dash.offline.DashDownloadTestData.TEST_MPD; <nl> + import static com.google.android.exoplayer2.source.dash.offline.DashDownloadTestData.TEST_MPD_URI; <nl> 
mmm TrackGroup.java <nl> ppp TrackGroup.java <nl> + import com.google.android.exoplayer.util.Assertions; <nl> + import java.util.Arrays; <nl> - this(false, format); <nl> + this(false, Assertions.checkNotNull(format)); <nl> + Assertions.checkState(formats.length > 0); <nl> + @Override <nl> + public int hashCode() { <nl> 
mmm TtmlNode.java <nl> ppp TtmlNode.java <nl> + import com.google.android.exoplayer.text.Cue; <nl> + import com.google.android.exoplayer.util.Assertions; <nl> - import java.util.Iterator; <nl> + import java.util.HashMap; <nl> + import java.util.Map.Entry; <nl> + import java.util.TreeMap; <nl> - private SpannableStringBuilder traverseForText(long timeUs, SpannableStringBuilder builder, <nl> 
mmm ExoHostedTest.java <nl> ppp ExoHostedTest.java <nl> - import com.google.android.exoplayer2.audio.AudioTrack; <nl> + import com.google.android.exoplayer2.audio.DefaultAudioSink; <nl> - AudioTrack.failOnSpuriousAudioTimestamp = true; <nl> + DefaultAudioSink.failOnSpuriousAudioTimestamp = true; <nl> - public void onAudioTrackUnderrun(int bufferSize, long bufferSizeMs, long elapsedSinceLastFeedMs) { <nl> 
mmm PlayerActivity.java <nl> ppp PlayerActivity.java <nl> + import com.google.android.exoplayer2.util.Assertions; <nl> - import java.util.HashMap; <nl> - import java.util.Map; <nl> - boolean seenAdsTagUri = false; <nl> + Uri adTagUri = null; <nl> - seenAdsTagUri |= sample.adTagUri != null; <nl> - if (!Util.checkCleartextTrafficPermitted(sample.uri)) { <nl> 
mmm MimeTypes.java <nl> ppp MimeTypes.java <nl> + public static final String APPLICATION_ID3 = BASE_TYPE_APPLICATION + "/id3"; <nl> new file <nl> ppp HlsChunkOperationHolder.java <nl> + package com.google.android.exoplayer.hls; <nl> + public final class HlsChunkOperationHolder { <nl> + public int queueSize; <nl> 
new file <nl> ppp HlsSampleSource.java <nl> + package com.google.android.exoplayer.hls; <nl> + import com.google.android.exoplayer.C; <nl> + import com.google.android.exoplayer.LoadControl; <nl> + import com.google.android.exoplayer.MediaFormat; <nl> + import com.google.android.exoplayer.MediaFormatHolder; <nl> 
mmm DemoPlayer.java <nl> ppp DemoPlayer.java <nl> - import com.google.android.exoplayer.metadata.MetadataTrackRenderer; <nl> - import java.util.Map; <nl> - public interface MetadataListener { <nl> - void onMetadata(Map<String, Object> metadata); <nl> - } <nl> - public static final int RENDERER_COUNT = 5; <nl> 
mmm WebvttCueParser.java <nl> ppp WebvttCueParser.java <nl> - @SuppressWarnings("nullness:argument.type.incompatible") <nl> - builder.startTimeUs = WebvttParserUtil.parseTimestampUs(cueHeaderMatcher.group(1)); <nl> - builder.endTimeUs = WebvttParserUtil.parseTimestampUs(cueHeaderMatcher.group(2)); <nl> + builder.startTimeUs = <nl> 
new file <nl> ppp Requirements.java <nl> + package com.google.android.exoplayer2.util.scheduler; <nl> + import android.content.Context; <nl> + import android.content.Intent; <nl> + import android.content.IntentFilter; <nl> + import android.net.ConnectivityManager; <nl> + import android.net.Network; <nl> + import android.net.NetworkCapabilities; <nl> 
mmm AudioRendererEventListener.java <nl> ppp AudioRendererEventListener.java <nl> + import static com.google.android.exoplayer2.util.Util.castNonNull; <nl> - if (listener != null) { <nl> - handler.post(() -> listener.onAudioEnabled(decoderCounters)); <nl> + if (handler != null) { <nl> + handler.post(() -> castNonNull(listener).onAudioEnabled(decoderCounters)); <nl> 
mmm DemoPlayer.java <nl> ppp DemoPlayer.java <nl> + import com.google.android.exoplayer.metadata.ClosedCaption; <nl> + import java.util.List; <nl> - MetadataTrackRenderer.MetadataRenderer, StreamingDrmSessionManager.EventListener { <nl> + StreamingDrmSessionManager.EventListener { <nl> - public interface MetadataListener { <nl> 
new file <nl> ppp WebmExtractorTest.java <nl> + package com.google.android.exoplayer.extractor.webm; <nl> + import com.google.android.exoplayer.C; <nl> + import com.google.android.exoplayer.MediaFormat; <nl> + import com.google.android.exoplayer.ParserException; <nl> + import com.google.android.exoplayer.drm.DrmInitData; <nl> 
mmm Samples.java <nl> ppp Samples.java <nl> + new Sample("Apple master playlist (HLS)", "uid:hls:applemaster", <nl> + + "bipbop_4x3_variant.m3u8", DemoUtil.TYPE_HLS, false), <nl> + "22727BB612D24AA4FACE4EF62726F9461A9BF57A&key=ik0", DemoUtil.TYPE_DASH, true), <nl> + public static final Sample[] HLS = new Sample[] { <nl> 
mmm TsExtractorTest.java <nl> ppp TsExtractorTest.java <nl> - public void packetStarted(long pesTimeUs, boolean dataAlignmentIndicator) {} <nl> + public void packetStarted(long pesTimeUs, @TsPayloadReader.Flags int flags) {} <nl> mmm AdtsReaderTest.java <nl> ppp AdtsReaderTest.java <nl> + import static com.google.android.exoplayer2.extractor.ts.TsPayloadReader.FLAG_DATA_ALIGNMENT_INDICATOR; <nl> 
mmm LibvpxVideoRenderer.java <nl> ppp LibvpxVideoRenderer.java <nl> - DrmSession<ExoMediaCrypto> previous = sourceDrmSession; <nl> + DrmSession.replaceSessionReferences(sourceDrmSession, session); <nl> - releaseDrmSessionIfUnused(previous); <nl> - DrmSession<ExoMediaCrypto> previous = decoderDrmSession; <nl> 
new file <nl> ppp Metadata.java <nl> + package com.google.android.exoplayer.metadata; <nl> + public class Metadata { <nl> + public final String key; <nl> + public final String value; <nl> + public Metadata(String key, String value) { <nl> + this.key = key; <nl> + this.value = value; <nl> + } <nl> + } <nl> mmm FullPlayerActivity.java <nl> 
mmm SimpleDecoderVideoRenderer.java <nl> ppp SimpleDecoderVideoRenderer.java <nl> + import com.google.android.exoplayer2.source.SampleStream; <nl> - int result = readSource(formatHolder, flagsOnlyBuffer, true); <nl> + @SampleStream.ReadDataResult int result = readSource(formatHolder, flagsOnlyBuffer, true); <nl> 
mmm TextRenderer.java <nl> ppp TextRenderer.java <nl> - updateOutput(Collections.<Cue>emptyList()); <nl> + updateOutput(Collections.emptyList()); <nl> mmm HlsMediaPeriod.java <nl> ppp HlsMediaPeriod.java <nl> - Collections.<Format>emptyList(), <nl> + Collections.emptyList(), <nl> - C.TRACK_TYPE_TEXT, <nl> - new HlsUrl[] {url}, <nl> 
new file <nl> ppp StreamKeyTest.java <nl> + package com.google.android.exoplayer2.offline; <nl> + import static com.google.common.truth.Truth.assertThat; <nl> + import android.os.Parcel; <nl> + import androidx.test.ext.junit.runners.AndroidJUnit4; <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> 
mmm AudioProcessor.java <nl> ppp AudioProcessor.java <nl> + import com.google.android.exoplayer2.Format; <nl> + import com.google.android.exoplayer2.util.Util; <nl> - * <p>Call {@link #configure(int, int, int)} to configure the processor to receive input audio, then <nl> - * call {@link #isActive()} to determine whether the processor is active in the new configuration. <nl> 
mmm EventLogger.java <nl> ppp EventLogger.java <nl> - public void onTimelineChanged(Timeline timeline, Object manifest) { <nl> + public void onTimelineChanged(Timeline timeline, Object manifest, <nl> + @Player.TimelineChangeReason int reason) { <nl> - Log.d(TAG, "sourceInfo [periodCount=" + periodCount + ", windowCount=" + windowCount); <nl> 
mmm TextTrackRenderer.java <nl> ppp TextTrackRenderer.java <nl> + import com.google.android.exoplayer.dash.mpd.AdaptationSet; <nl> - import android.os.HandlerThread; <nl> + import java.io.ByteArrayInputStream; <nl> + import java.io.InputStream; <nl> + package com.google.android.exoplayer.hls; <nl> + import com.google.android.exoplayer.MediaFormat; <nl> 
mmm TrackSelectionView.java <nl> ppp TrackSelectionView.java <nl> - if (trackSelector == null) { <nl> + MappingTrackSelector.MappedTrackInfo trackInfo = <nl> + trackSelector == null ? null : trackSelector.getCurrentMappedTrackInfo(); <nl> + if (trackSelector == null || trackInfo == null) { <nl> - MappingTrackSelector.MappedTrackInfo trackInfo = trackSelector.getCurrentMappedTrackInfo(); <nl> 
mmm LibflacAudioRenderer.java <nl> ppp LibflacAudioRenderer.java <nl> - return Format.createAudioSampleFormat( <nl> - MimeTypes.AUDIO_RAW, <nl> - streamMetadata.channels, <nl> - streamMetadata.sampleRate, <nl> - Util.getPcmEncoding(streamMetadata.bitsPerSample), <nl> + return new Format.Builder() <nl> + .setSampleMimeType(MimeTypes.AUDIO_RAW) <nl> 
new file <nl> ppp ExoCastPlayer.java <nl> + package com.google.android.exoplayer2.ext.cast; <nl> + import android.os.Looper; <nl> + import androidx.annotation.Nullable; <nl> + import com.google.android.exoplayer2.BasePlayer; <nl> + import com.google.android.exoplayer2.C; <nl> + import com.google.android.exoplayer2.ExoPlaybackException; <nl> 
new file <nl> ppp Id3Parser.java <nl> + package com.google.android.exoplayer.metadata; <nl> + import com.google.android.exoplayer.ParserException; <nl> + import com.google.android.exoplayer.parser.ts.BitsArray; <nl> + import com.google.android.exoplayer.util.MimeTypes; <nl> + import java.io.UnsupportedEncodingException; <nl> 
mmm GraphExportTest.java <nl> ppp GraphExportTest.java <nl> - 		Msg.out("\n" + testName.getMethodName()); <nl> + 		Msg.debug(this, "\n" + testName.getMethodName()); <nl> - 			Msg.out("\"" + line + "\","); <nl> + 			Msg.debug(this, "\"" + line + "\","); <nl> mmm ProgramManagerPlugin.java <nl> ppp ProgramManagerPlugin.java <nl> 
mmm DetachedWindowNode.java <nl> ppp DetachedWindowNode.java <nl> + 		adjustBounds(); <nl> + 		window.setBounds(bounds); <nl> + 		window.setVisible(true); <nl> + 	} <nl> + 	private void adjustBounds() { <nl> - 		WindowUtilities.ensureOnScreen(winMgr.getRootFrame(), bounds); <nl> - 		window.setBounds(bounds); <nl> 
mmm FileBitPatternInfoReader.java <nl> ppp FileBitPatternInfoReader.java <nl> - import java.beans.XMLDecoder; <nl> - 		try (XMLDecoder xmlDecoder = new XMLDecoder(new FileInputStream(dataFile))) { <nl> - 			fileInfo = (FileBitPatternInfo) xmlDecoder.readObject(); <nl> - 		} <nl> - 		catch (ArrayIndexOutOfBoundsException e) { <nl> 
mmm DuplicateFunctionMatchProgramCorrelatorFactory.java <nl> ppp DuplicateFunctionMatchProgramCorrelatorFactory.java <nl> - import ghidra.app.plugin.match.ExactInstructionsFunctionHasher; <nl> + import ghidra.app.plugin.prototype.match.ExactInstructionsFunctionHasher; <nl> mmm DataMatchProgramCorrelator.java <nl> 
mmm CommentHistoryAdapter.java <nl> ppp CommentHistoryAdapter.java <nl> + import java.io.IOException; <nl> + import db.*; <nl> - import java.io.IOException; <nl> - import db.*; <nl> - 	static final Schema COMMENT_HISTORY_SCHEMA = new Schema(0, "Key", new Class[] { <nl> - 		LongField.class, ByteField.class, IntField.class, IntField.class, StringField.class, <nl> 
deleted file <nl> mmm AVR8_31_GCC_O3_EmulatorTest.java <nl> - package ghidra.test.processors; <nl> - import ghidra.framework.options.Options; <nl> - import ghidra.program.model.listing.Program; <nl> - import ghidra.test.processors.support.EmulatorTestRunner; <nl> - import ghidra.test.processors.support.ProcessorEmulatorTestAdapter; <nl> 
mmm GnuDemanglerParser.java <nl> ppp GnuDemanglerParser.java <nl> + 	private static final Pattern UNNAMED_TYPE_PATTERN = <nl> + 		Pattern.compile("(\\{unnamed type#\\d+})"); <nl> - 	private String removeInternalSpaces(String name) { <nl> - 		CondensedString cs = new CondensedString(name); <nl> - 		return cs.getCondensedString(); <nl> 
mmm GhidraScriptComponentProvider.java <nl> ppp GhidraScriptComponentProvider.java <nl> - 		GhidraScriptUtil.setScriptBundlePaths(bundleStatusProvider.getModel().getEnabledPaths()); <nl> + 		GhidraScriptUtil.getBundleHost().setBundlePaths( <nl> + 			bundleStatusProvider.getModel().getEnabledPaths()); <nl> 
mmm VTFunctionAssociationTableModel.java <nl> ppp VTFunctionAssociationTableModel.java <nl> - 		return filterSettings == FilterSettings.SHOW_ALL && !hasFitler(); <nl> + 		return filterSettings == FilterSettings.SHOW_ALL && !hasFilter(); <nl> mmm ReflectionUtilitiesTest.java <nl> ppp ReflectionUtilitiesTest.java <nl> 
mmm GTableTest.java <nl> ppp GTableTest.java <nl> + 	private long testKeyTimeout = 100; <nl> + 		table.setAutoLookupTimeout(testKeyTimeout); <nl> + 		triggerText(table, "zed"); <nl> + 	} <nl> + 	@Test <nl> + 	public void testAutoLookup_SortDescending() throws Exception { <nl> + 		int column = 4; <nl> + 		sortDescending(column); <nl> 
mmm GhidraScriptComponentProvider.java <nl> ppp GhidraScriptComponentProvider.java <nl> + 	@Override <nl> + 	public void componentActivated() { <nl> + 		tableFilterPanel.requestFocus(); <nl> + 	} <nl> mmm ListingMergePanel.java <nl> ppp ListingMergePanel.java <nl> + 		@Override <nl> + 		public boolean goToExternalLocation(Navigatable navigatable, ExternalLocation externalLoc, <nl> 
mmm DecompilerCallConventionAnalyzer.java <nl> ppp DecompilerCallConventionAnalyzer.java <nl> - import ghidra.util.graph.DependencyGraph; <nl> + import ghidra.util.graph.AbstractDependencyGraph; <nl> - 			DependencyGraph<Address> graph = builder.getDependencyGraph(monitor); <nl> + 			AbstractDependencyGraph<Address> graph = builder.getDependencyGraph(monitor); <nl> 
mmm AssemblyResolvedConstructor.java <nl> ppp AssemblyResolvedConstructor.java <nl> - import com.google.common.collect.ImmutableList; <nl> - import com.google.common.collect.ImmutableSet; <nl> - import ghidra.util.StringUtilities; <nl> - 			ImmutableList<? extends AssemblyResolution> children, AssemblyPatternBlock ins, <nl> 
mmm ExportToHeaderAction.java <nl> ppp ExportToHeaderAction.java <nl> - import java.awt.Component; <nl> - 			plugin.getTool().showDialog(dlg, (Component) null); <nl> + 			plugin.getTool().showDialog(dlg); <nl> - 				plugin.getTool() <nl> - 						.setStatusInfo( <nl> - 							"Successfully exported data type(s) to " + file.getAbsolutePath()); <nl> 
deleted file <nl> mmm MDUnknownPExtendedDataType.java <nl> - package mdemangler.datatype.extended; <nl> - import mdemangler.MDMang; <nl> - public class MDUnknownPExtendedDataType extends MDExtendedType { <nl> - 	public MDUnknownPExtendedDataType(MDMang dmang) { <nl> - 		super(dmang); <nl> - 	} <nl> - 	@Override <nl> 
new file <nl> ppp AutoGeneratedDockingAction.java <nl> + package docking.actions; <nl> + public interface AutoGeneratedDockingAction { <nl> + } <nl> mmm MemoryBlockUtils.java <nl> ppp MemoryBlockUtils.java <nl> - import ghidra.util.exception.CancelledException; <nl> + 			block = program.getMemory().createInitializedBlock(name, start, fileBytes, offset, <nl> 
mmm KeyBindingsTest.java <nl> ppp KeyBindingsTest.java <nl> + 		String description = action1.getDescription(); <nl> + 		String escaped = description.replaceAll("&", "&amp;"); <nl> - 				"description is '" + actualText + "'", <nl> - 			actualText.indexOf(action1.getDescription()) != -1); <nl> + 				"description is '" + actualText + "'\n\tDescrption: " + escaped, <nl> 
mmm CoffLoader.java <nl> ppp CoffLoader.java <nl> - 				MemoryBlock block = program.getMemory().createUninitializedBlock("EXTERNAL", <nl> + 				MemoryBlock block = program.getMemory() <nl> + 						.createUninitializedBlock(MemoryBlock.EXTERNAL_BLOCK_NAME, <nl> mmm MipsAddressAnalyzer.java <nl> ppp MipsAddressAnalyzer.java <nl> 
mmm ExtensionCircleFragment.java <nl> ppp ExtensionCircleFragment.java <nl> - import com.davemorrissey.labs.subscaleview.ImageSource; <nl> - imageView.setImage(ImageSource.asset("squirrel.jpg")); <nl> + imageView.setImageAsset("squirrel.jpg"); <nl> mmm EventHandlingActivity.java <nl> ppp EventHandlingActivity.java <nl> 
deleted file <nl> mmm PreviewTrackSelector.java <nl> - package com.github.rubensousa.previewseekbar.sample.exoplayer; <nl> - import com.google.android.exoplayer2.C; <nl> - import com.google.android.exoplayer2.ExoPlaybackException; <nl> - import com.google.android.exoplayer2.RendererCapabilities; <nl> - import com.google.android.exoplayer2.source.TrackGroupArray; <nl> 
new file <nl> ppp PreviewSeekBar.java <nl> + package com.github.rubensousa.previewseekbar; <nl> + import android.content.Context; <nl> + import android.graphics.drawable.Drawable; <nl> + import android.support.annotation.ColorInt; <nl> + import android.support.annotation.ColorRes; <nl> + import android.support.v4.content.ContextCompat; <nl> 
mmm StringUtils.java <nl> ppp StringUtils.java <nl> + import java.util.regex.Pattern; <nl> + private static final Pattern BROWSWER_PATTERN = Pattern <nl> + .compile(".*Gecko.*|.*AppleWebKit.*|.*Trident.*|.*Chrome.*"); <nl> + public static boolean isFromBrowser(String userAgent) { <nl> + if (userAgent == null) { <nl> 
mmm JdbcExecutorLoaderTest.java <nl> ppp JdbcExecutorLoaderTest.java <nl> + @Test <nl> + public void testUnassignExecutorException() throws ExecutorManagerException, <nl> + IOException { <nl> + if (!isTestSetup()) { <nl> + return; <nl> + } <nl> + ExecutorLoader loader = createLoader(); <nl> + try { <nl> + loader.unassignExecutor(2); <nl> 
mmm AzkabanWebServer.java <nl> ppp AzkabanWebServer.java <nl> - 		File statsDir = new File(props.getString("azkaban.stats.dir", "stats")); <nl> - 		if (!statsDir.exists()) { <nl> - 			statsDir.mkdir(); <nl> - 		} <nl> - props.put("azkaban.stats.dir", statsDir.getCanonicalPath()); <nl> mmm ExecutorLoader.java <nl> 
mmm ProjectLogEvent.java <nl> ppp ProjectLogEvent.java <nl> - PROXY_USER(9); <nl> + PROXY_USER(9), <nl> + PURGE(10); <nl> + case 10: <nl> + return PURGE; <nl> mmm JdbcExecutorLoaderTest.java <nl> ppp JdbcExecutorLoaderTest.java <nl> + import java.util.LinkedList; <nl> + import azkaban.utils.TestUtils; <nl> + private static final String UNIT_BASE_DIR = <nl> 
mmm LongArgJob.java <nl> ppp LongArgJob.java <nl> + this.logJobProperties(); <nl> mmm ProjectManagerServlet.java <nl> ppp ProjectManagerServlet.java <nl> - } else if (hasParam(req, "purge")) { <nl> - handlePurgeProject(req, resp, session); <nl> - private void handlePurgeProject(HttpServletRequest req, <nl> - HttpServletResponse resp, Session session) throws ServletException, <nl> 
mmm FlowPreparer.java <nl> ppp FlowPreparer.java <nl> - tempDir = downloadProjectIfNotExists(project); <nl> + tempDir = downloadProjectIfNotExists(project, flow.getExecutionId()); <nl> + "completed in {} second(s)", project, flow.getExecutionId(), <nl> - File downloadProjectIfNotExists(final ProjectDirectoryMetadata proj) <nl> 
mmm MockProjectLoader.java <nl> ppp MockProjectLoader.java <nl> + 	@Override <nl> + 	public void updateProjectProperty(Project project, Props props) <nl> + 			throws ProjectManagerException { <nl> + 		 <nl> + 	} <nl> + 	@Override <nl> + 	public Props fetchProjectProperty(int projectId, int projectVer, <nl> + 			String propsName) throws ProjectManagerException { <nl> 
mmm ProcessJob.java <nl> ppp ProcessJob.java <nl> + this.logJobProperties(); <nl> - * <nl> + * <nl> mmm LongArgJob.java <nl> ppp LongArgJob.java <nl> + this.logJobProperties(); <nl> mmm JavaProcessJob.java <nl> ppp JavaProcessJob.java <nl> - getId(), maxXms)); <nl> + getId(), maxXmx)); <nl> - } <nl> + } <nl> mmm ProjectLoader.java <nl> 
mmm Condition.java <nl> ppp Condition.java <nl> - logger.info("Testing condition " + expression); <nl> + if (logger.isDebugEnabled()) { <nl> + logger.debug("Testing condition " + expression); <nl> + } <nl> mmm ProcessJobTest.java <nl> ppp ProcessJobTest.java <nl> + import azkaban.flow.CommonJobProperties; <nl> 
mmm QueuedExecutionsTest.java <nl> ppp QueuedExecutionsTest.java <nl> - final ExecutableFlow execFlow = TestUtils.createExecutableFlow("exectest1", flowName); <nl> + final ExecutableFlow execFlow = TestUtils.createTestExecutableFlow("exectest1", flowName); <nl> mmm TestUtils.java <nl> ppp TestUtils.java <nl> 
mmm LoginAbstractAzkabanServlet.java <nl> ppp LoginAbstractAzkabanServlet.java <nl> + import java.io.Writer; <nl> - Page page = newPage(req, resp, <nl> - "azkaban/webapp/servlet/velocity/login.vm"); <nl> + Page page = newPage(req, resp, "azkaban/webapp/servlet/velocity/login.vm"); <nl> - handleLogin(req, resp, "Enter username and password"); <nl> 
mmm CubeInstance.java <nl> ppp CubeInstance.java <nl> - import com.kylinolap.cube.model.CubePartitionDesc; <nl> - public int getCost(String factTable, Collection<JoinDesc> joins, Collection<TblColRef> allColumns, Collection<FunctionDesc> aggrFunctions) { <nl> + public boolean isCapable(SQLDigest digest) { <nl> 
mmm RandomKeyDistributionJob.java <nl> ppp RandomKeyDistributionJob.java <nl> - job.setJarByClass(this.getClass()); <nl> + setJobClasspath(job); <nl> mmm RowKeyDistributionCheckerJob.java <nl> ppp RowKeyDistributionCheckerJob.java <nl> - job.setJarByClass(this.getClass()); <nl> + setJobClasspath(job); <nl> mmm MergeCuboidJob.java <nl> 
mmm AclService.java <nl> ppp AclService.java <nl> - package com.kylinolap.rest.service; <nl> + package com.kylinolap.rest.security; <nl> + import java.sql.ResultSet; <nl> + import java.sql.SQLException; <nl> - import java.util.Map; <nl> - import org.springframework.beans.factory.annotation.Autowired; <nl> - import org.springframework.security.acls.model.Acl; <nl> 
mmm IIManager.java <nl> ppp IIManager.java <nl> + import com.kylinolap.metadata.realization.IRealization; <nl> + import com.kylinolap.metadata.realization.IRealizationProvider; <nl> + import com.kylinolap.metadata.realization.RealizationType; <nl> - public class IIManager { <nl> + public class IIManager implements IRealizationProvider { <nl> 
mmm QueryService.java <nl> ppp QueryService.java <nl> - import org.apache.kylin.rest.metrics.QueryMetrics; <nl> - QueryMetrics.getInstance().increase("duration", duration); <nl> - QueryMetrics.getInstance().increase("totalScanCount", (float) totalScanCount); <nl> - QueryMetrics.getInstance().increase("count", (float) 1); <nl> 
mmm NumberDictionary.java <nl> ppp NumberDictionary.java <nl> - if (len > buf.length) { <nl> - throw new IllegalArgumentException("Too many digits for NumberDictionary: " + Bytes.toString(value, offset, len) + ". Internal buffer is only " + buf.length + " bytes"); <nl> - } <nl> - throw new IllegalArgumentException("Too many digits for NumberDictionary: " + Bytes.toString(value, offset, len) + ". Expect " + MAX_DIGITS_BEFORE_DECIMAL_POINT + " digits before decimal point at max."); <nl> 
mmm DictionaryManager.java <nl> ppp DictionaryManager.java <nl> - logger.info("Checking dup dict :" + existing); <nl> - if(existingInfo == null) <nl> - logger.info("existingInfo is null"); <nl> mmm TestBase.java <nl> ppp TestBase.java <nl> - import com.kylinolap.common.util.LocalFileMetadataTestCase; <nl> + import com.kylinolap.common.util.HBaseMetadataTestCase; <nl> 
mmm MetadataManager.java <nl> ppp MetadataManager.java <nl> + import java.io.ByteArrayInputStream; <nl> + import java.io.ByteArrayOutputStream; <nl> - public void createSourceTable(TableDesc srcTable) throws IOException { <nl> + public void saveSourceTable(TableDesc srcTable) throws IOException { <nl> - String tableIdentity = srcTable.getIdentity(); <nl> 
mmm IICreateHFileJob.java <nl> ppp IICreateHFileJob.java <nl> - @SuppressWarnings("deprecation") <nl> mmm CubeManager.java <nl> ppp CubeManager.java <nl> - import java.text.SimpleDateFormat; <nl> + import com.kylinolap.dict.DateStrDictionary; <nl> - throw new IllegalStateException("No dictionary found by " + dictResPath + ", invalid cube state; cube segment" + cubeSeg.getName() + ", col " + col); <nl> 
deleted file <nl> mmm ExampleEndpoint.java <nl> - package org.apache.kylin.storage.hbase.coprocessor.endpoint.example; <nl> - import com.google.protobuf.RpcCallback; <nl> - import com.google.protobuf.RpcController; <nl> - import com.google.protobuf.Service; <nl> - import org.apache.kylin.storage.hbase.coprocessor.endpoint.example.generated.ExampleProtos; <nl> 
mmm CubeInstance.java <nl> ppp CubeInstance.java <nl> - @Override <nl> - public long getDateRangeStart() { <nl> - List<CubeSegment> readySegs = getSegments(SegmentStatusEnum.READY); <nl> - long startTime = Long.MAX_VALUE; <nl> - for (CubeSegment seg : readySegs) { <nl> - if (seg.getDateRangeStart() < startTime) <nl> 
mmm HiveTableReader.java <nl> ppp HiveTableReader.java <nl> - List<Object> allFields = currentHCatRecord.getAll(); <nl> + return getRowAsStringArray(currentHCatRecord); <nl> + } <nl> + public static String[] getRowAsStringArray(HCatRecord record) { <nl> + List<Object> allFields = record.getAll(); <nl> mmm ByteArray.java <nl> 
mmm RandomKeyDistributionJob.java <nl> ppp RandomKeyDistributionJob.java <nl> - static final Option OPTION_REGION_MB = OptionBuilder.withArgName("regionmb").hasArg().isRequired(true).withDescription("GB per Region").create("regionmb"); <nl> + static final Option OPTION_REGION_MB = OptionBuilder.withArgName("regionmb").hasArg().isRequired(true).withDescription("MB per Region").create("regionmb"); <nl> 
mmm ProjectManagerTest.java <nl> ppp ProjectManagerTest.java <nl> - ProjectManager.getInstance(this.getTestConfig()).updateRealizationToProject(RealizationType.CUBE, "cube_in_alien_project", "default", null); <nl> + ProjectManager.getInstance(this.getTestConfig()).moveRealizationToProject(RealizationType.CUBE, "cube_in_alien_project", "default", null); <nl> 
mmm UserService.java <nl> ppp UserService.java <nl> + import java.sql.PreparedStatement; <nl> + import java.sql.SQLException; <nl> + import java.util.Date; <nl> - import org.springframework.security.core.userdetails.UserDetails; <nl> - import org.springframework.security.core.userdetails.UsernameNotFoundException; <nl> 
mmm CubeSegmentValidator.java <nl> ppp CubeSegmentValidator.java <nl> - import com.kylinolap.cube.exception.CubeIntegrityException; <nl> - abstract void validate(CubeInstance cubeInstance, CubeSegment newSegment) throws CubeIntegrityException; <nl> + abstract void validate(CubeInstance cubeInstance, CubeSegment newSegment); <nl> 
mmm IIDescManager.java <nl> ppp IIDescManager.java <nl> - import com.kylinolap.common.restclient.SingleValueCache; <nl> + import com.kylinolap.common.restclient.CaseInsensitiveStringCache; <nl> - private SingleValueCache<String, IIDesc> iiDescMap = new SingleValueCache<String, IIDesc>(Broadcaster.TYPE.INVERTED_INDEX); <nl> 
mmm LookupTableEnumerator.java <nl> ppp LookupTableEnumerator.java <nl> - current[i] = Tuple.convertOptiqCellValue(row[colIdx], colDesc.getDatatype()); <nl> + current[i] = Tuple.convertOptiqCellValue(row[colIdx], colDesc.getType().getName()); <nl> deleted file <nl> mmm CliOutputConsumer.java <nl> - package com.kylinolap.job; <nl> 
mmm ProjectInstance.java <nl> ppp ProjectInstance.java <nl> - public ProjectInstance() { <nl> - } <nl> - public ProjectInstance(String name, String owner) { <nl> - this.name = name; <nl> - this.owner = owner; <nl> + public ProjectInstance() { <nl> - tables = tables == null ? new TreeSet<String>() : tables; <nl> 
mmm EditorActionHandler.java <nl> ppp EditorActionHandler.java <nl> + import org.androidannotations.holder.EComponentWithViewSupportHolder; <nl> - 	protected void processParameters(JMethod listenerMethod, JInvocation call, List<? extends VariableElement> userParameters) { <nl> + 	protected void processParameters(EComponentWithViewSupportHolder holder, JMethod listenerMethod, JInvocation call, List<? extends VariableElement> userParameters) { <nl> 
mmm ParameterizedRobolectricTestRunnerWorkaround.java <nl> ppp ParameterizedRobolectricTestRunnerWorkaround.java <nl> mmm HelloAndroidActivity.java <nl> ppp HelloAndroidActivity.java <nl> - package org.androidannotations.maveneclipse; <nl> + package com.googlecode.androidannotations.maveneclipse; <nl> - import org.androidannotations.maveneclipse.R; <nl> 
mmm SharedPrefHandler.java <nl> ppp SharedPrefHandler.java <nl> - import org.androidannotations.annotations.sharedpreferences.DefaultBoolean; <nl> - import org.androidannotations.annotations.sharedpreferences.DefaultFloat; <nl> - import org.androidannotations.annotations.sharedpreferences.DefaultInt; <nl> 
new file <nl> ppp BundleHelper.java <nl> + package com.googlecode.androidannotations.helper; <nl> + import static com.googlecode.androidannotations.helper.CanonicalNameConstants.BUNDLE; <nl> + import static com.googlecode.androidannotations.helper.CanonicalNameConstants.CHAR_SEQUENCE; <nl> + import static com.googlecode.androidannotations.helper.CanonicalNameConstants.STRING; <nl> 
new file <nl> ppp BindingObjectHandler.java <nl> + package org.androidannotations.internal.core.handler; <nl> + import javax.lang.model.element.Element; <nl> + import javax.lang.model.element.ElementKind; <nl> + import javax.lang.model.element.ExecutableElement; <nl> + import org.androidannotations.AndroidAnnotationsEnvironment; <nl> 
deleted file <nl> mmm ProduceHandler.java <nl> - package org.androidannotations.handler; <nl> - import static org.androidannotations.helper.CanonicalNameConstants.PRODUCE; <nl> - import javax.annotation.processing.ProcessingEnvironment; <nl> - import javax.lang.model.element.Element; <nl> - import javax.lang.model.element.ExecutableElement; <nl> 
mmm ViewValidator.java <nl> ppp ViewValidator.java <nl> - import com.googlecode.androidannotations.helper.HasTargetAnnotationHelper; <nl> + import com.googlecode.androidannotations.helper.ValidatorHelper; <nl> - public class ViewValidator extends HasTargetAnnotationHelper implements ElementValidator { <nl> 
new file <nl> ppp InstanceStateProcessor.java <nl> + package com.googlecode.androidannotations.processing; <nl> + import static com.sun.codemodel.JMod.PUBLIC; <nl> + import java.lang.annotation.Annotation; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + import javax.annotation.processing.ProcessingEnvironment; <nl> 
mmm EBean.java <nl> ppp EBean.java <nl> + import com.googlecode.androidannotations.api.Scope; <nl> - 		 <nl> - 			 <nl> - 			 <nl> - 			 <nl> - 			JMethod factoryMethod = holder.eBean.method(STATIC | PUBLIC, holder.eBean, GET_INSTANCE_METHOD_NAME); <nl> + 			JMethod factoryMethod = holder.eBean.method(PUBLIC | STATIC, holder.eBean, GET_INSTANCE_METHOD_NAME); <nl> 
deleted file <nl> mmm SomeGenericBeanExt.java <nl> - package org.androidannotations.ebean; <nl> - import org.androidannotations.annotations.EBean; <nl> - @EBean <nl> - public class SomeGenericBeanExt extends SomeGenericBean<String> { <nl> - } <nl> mmm EBeanTest.java <nl> - assertCompilationSuccessful(compileFiles( <nl> 
new file <nl> ppp EActivityHolder.java <nl> + package org.androidannotations.holder; <nl> + import com.sun.codemodel.*; <nl> + import org.androidannotations.api.SdkVersionHelper; <nl> + import org.androidannotations.helper.*; <nl> + import org.androidannotations.process.ProcessHolder; <nl> + import javax.lang.model.element.Element; <nl> 
new file <nl> ppp CustomSupportFragment.java <nl> + package org.androidannotations.ebean; <nl> + import android.support.v4.app.Fragment; <nl> + public class CustomSupportFragment extends Fragment { <nl> + } <nl> mmm EBeanHolder.java <nl> ppp EBeanHolder.java <nl> + 	private JFieldVar rootFragmentField; <nl> + 	private JMethod overloadedConstructor; <nl> 
mmm SomePrefs.java <nl> ppp SomePrefs.java <nl> - import java.util.Set; <nl> - 	Set<String> types(); <nl> deleted file <nl> mmm WrappedIOException.java <nl> - package org.apache.pig.impl.util; <nl> - import java.io.IOException; <nl> - public class WrappedIOException { <nl> - public static IOException wrap(final Throwable e) { <nl> 
mmm OrmLiteHolder.java <nl> ppp OrmLiteHolder.java <nl> + package org.androidannotations.holder; <nl> + import com.helger.jcodemodel.JBlock; <nl> + public interface HasSimpleLifecycleMethods extends GeneratedClassHolder { <nl> + 	JBlock getStartLifecycleAfterSuperBlock(); <nl> + 	JBlock getEndLifecycleBeforeSuperBlock(); <nl> 
deleted file <nl> mmm FragmentArguments.java <nl> - package com.googlecode.androidannotations.test15; <nl> - import java.util.ArrayList; <nl> - import android.app.Fragment; <nl> - import android.os.Bundle; <nl> - import com.googlecode.androidannotations.annotations.AfterInject; <nl> - import com.googlecode.androidannotations.annotations.EFragment; <nl> 
mmm ValidatorHelper.java <nl> ppp ValidatorHelper.java <nl> + 	public int numberOfNotAnnotatedElementParameter(ExecutableElement element) { <nl> + 		int count = 0; <nl> + 		for (VariableElement parameter : element.getParameters()) { <nl> + 			if (parameter.getAnnotationMirrors().size() == 0) { <nl> + 				count++; <nl> 
new file <nl> ppp RequiresHeader.java <nl> + package org.androidannotations.annotations.rest; <nl> + import java.lang.annotation.ElementType; <nl> + import java.lang.annotation.Retention; <nl> + import java.lang.annotation.RetentionPolicy; <nl> + import java.lang.annotation.Target; <nl> + @Retention(RetentionPolicy.CLASS) <nl> 
mmm ItemClickHandler.java <nl> ppp ItemClickHandler.java <nl> + import org.androidannotations.holder.EComponentWithViewSupportHolder; <nl> - import com.sun.codemodel.JType; <nl> - 	protected void processParameters(JMethod listenerMethod, JInvocation call, List<? extends VariableElement> parameters) { <nl> 
mmm Spinner.java <nl> ppp Spinner.java <nl> + mRippleManager.cancelRipple(this); <nl> mmm Switch.java <nl> ppp Switch.java <nl> + mRippleManager.cancelRipple(this); <nl> mmm TabPageIndicator.java <nl> ppp TabPageIndicator.java <nl> - mViewPager.setOnPageChangeListener(null); <nl> + mViewPager.removeOnPageChangeListener(this); <nl> 
mmm GraalServices.java <nl> ppp GraalServices.java <nl> - public static boolean supportsArbitraryImplicitException() { <nl> + public static boolean supportArbitraryImplicitException() { <nl> mmm MemoryAnchorNode.java <nl> ppp MemoryAnchorNode.java <nl> - if (tool.allUsagesAvailable() && hasNoUsages()) { <nl> 
mmm PolyglotExceptionImpl.java <nl> ppp PolyglotExceptionImpl.java <nl> - receiver = languageContext.toGuestValue(null, receiver); <nl> + receiver = languageContext.toGuestValue(receiver); <nl> - exceptionObject = languageContext.toGuestValue(null, exceptionObject); <nl> + exceptionObject = languageContext.toGuestValue(exceptionObject); <nl> 
mmm DatabaseBatchCompatibility.java <nl> ppp DatabaseBatchCompatibility.java <nl> - String remoteServerId = null; <nl> + String remoteServerId; <nl> mmm AbstractDbUnitTestCase.java <nl> ppp AbstractDbUnitTestCase.java <nl> - import org.sonar.jpa.dao.DaoFacade; <nl> - import org.sonar.jpa.dao.MeasuresDao; <nl> 
mmm MavenProjectConverterTest.java <nl> ppp MavenProjectConverterTest.java <nl> + import com.google.common.io.Resources; <nl> - import org.sonar.test.TestUtils; <nl> - File rootDir = TestUtils.getResource("/org/sonar/batch/maven/MavenProjectConverterTest/moduleNameShouldEqualArtifactId/"); <nl> + File rootDir = new File(Resources.getResource("org/sonar/batch/maven/MavenProjectConverterTest/moduleNameShouldEqualArtifactId/").toURI()); <nl> 
mmm SearchResponseFormat.java <nl> ppp SearchResponseFormat.java <nl> - issueBuilder.setComponentId(component.getId()); <nl> - private void completeIssueLocations(IssueDto dto, Issue.Builder issueBuilder) { <nl> + private static void completeIssueLocations(IssueDto dto, Issue.Builder issueBuilder) { <nl> 
mmm ServerUserSession.java <nl> ppp ServerUserSession.java <nl> - import org.sonar.db.user.AuthorizationDao; <nl> + import org.sonar.db.permission.PermissionDao; <nl> - private final AuthorizationDao authorizationDao; <nl> + private final PermissionDao permissionDao; <nl> - this.authorizationDao = dbClient.authorizationDao(); <nl> 
mmm IssueComputationTest.java <nl> ppp IssueComputationTest.java <nl> - import org.sonar.batch.protocol.output.BatchOutput; <nl> + import org.sonar.batch.protocol.output.BatchReport; <nl> - BatchOutput.ReportIssue.Builder inputIssue = BatchOutput.ReportIssue.newBuilder() <nl> + BatchReport.Issue.Builder inputIssue = BatchReport.Issue.newBuilder() <nl> 
mmm ZipUtilsTest.java <nl> ppp ZipUtilsTest.java <nl> - import org.apache.commons.collections.CollectionUtils; <nl> + import com.google.common.collect.Iterators; <nl> - import static org.hamcrest.CoreMatchers.is; <nl> - import static org.hamcrest.Matchers.greaterThan; <nl> - import static org.junit.Assert.assertThat; <nl> 
mmm GroupDao.java <nl> ppp GroupDao.java <nl> - import org.sonar.db.util.RowNotFoundException; <nl> + import org.sonar.db.RowNotFoundException; <nl> mmm ComponentDao.java <nl> ppp ComponentDao.java <nl> - import org.sonar.db.util.RowNotFoundException; <nl> + import org.sonar.db.RowNotFoundException; <nl> mmm RowNotFoundException.java <nl> 
mmm DefaultDebtRemediationFunction.java <nl> ppp DefaultDebtRemediationFunction.java <nl> - this.factor = sanitizeValue("factor", factor); <nl> + this.factor = sanitizeValue("coefficient", factor); <nl> - public String factor() { <nl> + public String coefficient() { <nl> - throw new IllegalArgumentException(String.format("Only factor must be set on %s", this)); <nl> 
deleted file <nl> mmm BaseMapping.java <nl> - package org.sonar.server.search.ws; <nl> - import com.google.common.collect.LinkedHashMultimap; <nl> - import com.google.common.collect.Multimap; <nl> - import java.util.Arrays; <nl> - import java.util.Set; <nl> - import javax.annotation.Nullable; <nl> - import org.sonar.api.server.ServerSide; <nl> 
mmm DebtModelLookup.java <nl> ppp DebtModelLookup.java <nl> + import javax.annotation.Nullable; <nl> - public DebtCharacteristic apply(CharacteristicDto input) { <nl> - return toCharacteristic(input); <nl> + public DebtCharacteristic apply(@Nullable CharacteristicDto input) { <nl> + return input != null ? toCharacteristic(input) : null; <nl> 
mmm ProjectBranchesParameters.java <nl> ppp ProjectBranchesParameters.java <nl> + public static final String PARAM_NAME = "name"; <nl> mmm RenameAction.java <nl> ppp RenameAction.java <nl> + import static com.google.common.base.Preconditions.checkArgument; <nl> + import static org.sonar.server.projectbranch.ws.BranchesWs.addProjectParam; <nl> 
mmm ResourceTypes.java <nl> ppp ResourceTypes.java <nl> - import com.google.common.base.Objects; <nl> + import java.util.Objects; <nl> - return input != null && Objects.equal(propertyValue, input.getStringProperty(propertyKey)); <nl> + return input != null && Objects.equals(propertyValue, input.getStringProperty(propertyKey)); <nl> 
mmm PlatformDatabaseMigrationTest.java <nl> ppp PlatformDatabaseMigrationTest.java <nl> - package org.sonar.server.db.migrations; <nl> + package org.sonar.server.platform.db.migrations; <nl> mmm PlatformLevel1.java <nl> ppp PlatformLevel1.java <nl> - import org.sonar.server.db.EmbeddedDatabaseFactory; <nl> 
mmm MeasuresMediumTest.java <nl> ppp MeasuresMediumTest.java <nl> - package org.sonar.batch.mediumtest.xoo; <nl> + package org.sonar.batch.mediumtest.measures; <nl> - import org.sonar.api.batch.analyzer.issue.AnalyzerIssue; <nl> - import org.sonar.api.rule.RuleKey; <nl> - public class XooMediumTest { <nl> + public class MeasuresMediumTest { <nl> 
mmm RenameAction.java <nl> ppp RenameAction.java <nl> - public class RenameAction implements QGateWsAction { <nl> + public class RenameAction implements QualityGatesWsAction { <nl> - action.createParam(QGatesWs.PARAM_ID) <nl> + action.createParam(QualityGatesWs.PARAM_ID) <nl> - action.createParam(QGatesWs.PARAM_NAME) <nl> 
mmm ShowAction.java <nl> ppp ShowAction.java <nl> - JsonWriter json = response.newJsonWriter().beginObject(); <nl> - writeSource(linesHtml, from, json); <nl> - json.endObject().close(); <nl> + try (JsonWriter json = response.newJsonWriter()) { <nl> + json.beginObject(); <nl> + writeSource(linesHtml, from, json); <nl> 
mmm JavaUtils.java <nl> ppp JavaUtils.java <nl> + @Deprecated <nl> mmm ResourceKeyMigration.java <nl> ppp ResourceKeyMigration.java <nl> - if (Java.KEY.equals(resourceModel.getLanguageKey())) { <nl> + if ("java".equals(resourceModel.getLanguageKey())) { <nl> mmm InputFileBuilder.java <nl> ppp InputFileBuilder.java <nl> 
mmm FacetValue.java <nl> ppp FacetValue.java <nl> - } else { <nl> - return this.getValue().compareTo(other.getValue()); <nl> + return this.getValue().compareTo(other.getValue()); <nl> - if (this == o) return true; <nl> - if (!(o instanceof FacetValue)) return false; <nl> + if (this == o) { <nl> + return true; <nl> 
mmm DefaultWsClient.java <nl> ppp DefaultWsClient.java <nl> - import org.sonarqube.ws.client.rule.RulesService; <nl> + import org.sonarqube.ws.client.rules.RulesService; <nl> mmm RuleEsResilienceTest.java <nl> ppp RuleEsResilienceTest.java <nl> - import org.sonarqube.tests.Byteman; <nl> - import org.sonarqube.ws.client.rule.CreateWsRequest; <nl> 
mmm ComponentIndexTest.java <nl> ppp ComponentIndexTest.java <nl> - import org.assertj.core.api.AbstractListAssert; <nl> + import org.assertj.core.api.ListAssert; <nl> - protected AbstractListAssert<?, ? extends List<? extends String>, String> assertSearch(String query) { <nl> + protected ListAssert<String> assertSearch(String query) { <nl> 
mmm OneIssuePerLineSensorTest.java <nl> ppp OneIssuePerLineSensorTest.java <nl> - import org.sonar.api.SonarProduct; <nl> + import org.sonar.api.internal.SonarRuntimeImpl; <nl> - context.setRuntime(Version.parse("5.4"), SonarProduct.SONARQUBE, SonarQubeSide.SCANNER); <nl> + context.setRuntime(SonarRuntimeImpl.forSonarQube(Version.parse("5.4"), SonarQubeSide.SCANNER)); <nl> 
mmm ActiveRuleBackendMediumTest.java <nl> ppp ActiveRuleBackendMediumTest.java <nl> - import org.junit.Ignore; <nl> + import org.sonar.server.platform.Platform; <nl> - @Ignore("To be fixed with DB Time zone sprint -- SONAR-5183") <nl> + Date beginning = new Date(); <nl> + assertThat(index.getByKey(activeRule.getKey())).isNull(); <nl> 
mmm PastSnapshot.java <nl> ppp PastSnapshot.java <nl> - return (projectSnapshot != null ? projectSnapshot.getCreatedAt() : null); <nl> + return projectSnapshot != null ? projectSnapshot.getCreatedAt() : null; <nl> - return (projectSnapshot != null ? projectSnapshot.getId() : null); <nl> + return projectSnapshot != null ? projectSnapshot.getId() : null; <nl> 
mmm RemoveUserAction.java <nl> ppp RemoveUserAction.java <nl> - GroupDto group = dbClient.groupDao().selectById(dbSession, groupId); <nl> + GroupDto group = dbClient.groupDao().selectNullableById(dbSession, groupId); <nl> + if (group == null) { <nl> + throw new NotFoundException(String.format("Could not find a user group with id '%s'", groupId)); <nl> 
deleted file <nl> mmm SonarConfig.java <nl> - package org.sonar.server.configuration; <nl> - import com.thoughtworks.xstream.annotations.XStreamAlias; <nl> - import org.apache.commons.lang.builder.ToStringBuilder; <nl> - import org.sonar.api.database.configuration.Property; <nl> - import org.sonar.api.measures.Metric; <nl> 
mmm SchemaMigration.java <nl> ppp SchemaMigration.java <nl> - import java.sql.Connection; <nl> - import java.sql.ResultSet; <nl> - import java.sql.SQLException; <nl> - import java.sql.Statement; <nl> - @Table(name = SchemaMigration.TABLE_NAME, uniqueConstraints = {@UniqueConstraint(columnNames = {"version"})}) <nl> 
new file <nl> ppp OneIssuePerFileSensor.java <nl> + package org.sonar.xoo.rule; <nl> + import org.sonar.api.batch.SensorContext; <nl> + import org.sonar.api.batch.fs.FileSystem; <nl> + import org.sonar.api.batch.fs.InputFile; <nl> + import org.sonar.api.batch.rule.ActiveRules; <nl> + import org.sonar.api.component.ResourcePerspectives; <nl> 
mmm DeleteActionTest.java <nl> ppp DeleteActionTest.java <nl> - tester = new WsTester(new RulesWebService(new DeleteAction(ruleService))); <nl> + tester = new WsTester(new RulesWs(new DeleteAction(ruleService))); <nl> mmm ComputationWsTest.java <nl> ppp ComputationWsTest.java <nl> - public class ComputationWebServiceTest { <nl> 
mmm DefaultIssue.java <nl> ppp DefaultIssue.java <nl> + import org.sonar.api.utils.internal.Uuids; <nl> - import java.util.UUID; <nl> - this.key = UUID.randomUUID().toString(); <nl> + this.key = Uuids.create(); <nl> - this.key = UUID.randomUUID().toString(); <nl> + this.key = Uuids.create(); <nl> mmm DefaultIssueBuilder.java <nl> 
mmm AdministrationTestSuite.java <nl> ppp AdministrationTestSuite.java <nl> - package administation.suite; <nl> + package administration.suite; <nl> - import administation.suite.administration.BulkDeletionTest; <nl> - import administation.suite.administration.ProjectAdministrationTest; <nl> - import administation.suite.administration.PropertySetsTest; <nl> 
mmm DeleteAction.java <nl> ppp DeleteAction.java <nl> - ids = Lists.transform(dbClient.metricDao().selectByKeys(dbSession, keys), new Function<MetricDto, Integer>() { <nl> + ids = Lists.transform(dbClient.metricDao().selectNullableByKeys(dbSession, keys), new Function<MetricDto, Integer>() { <nl> new file <nl> 

mmm IssueExclusionsLoader.java <nl> ppp IssueExclusionsLoader.java <nl> + import java.nio.charset.Charset; <nl> - import org.sonar.api.resources.Project; <nl> - import java.nio.charset.Charset; <nl> - public boolean shouldExecuteOnProject(Project project) { <nl> + public boolean shouldExecute() { <nl> mmm CpdExecutor.java <nl> 
mmm EmailNotificationsPlugin.java <nl> ppp EmailNotificationsPlugin.java <nl> - import org.sonar.plugins.emailnotifications.templates.alerts.AlertsEmailTemplate; <nl> new file <nl> ppp package-info.java <nl> + @ParametersAreNonnullByDefault <nl> + package org.sonar.api.utils; <nl> + import javax.annotation.ParametersAreNonnullByDefault; <nl> 
deleted file <nl> mmm HttpExceptionTest.java <nl> - package org.sonarqube.ws.client; <nl> - import org.junit.Test; <nl> - import static org.assertj.core.api.Assertions.assertThat; <nl> - public class HttpExceptionTest { <nl> - @Test <nl> - public void test_exception() throws Exception { <nl> - assertThat(exception.status()).isEqualTo(500); <nl> 
mmm ComponentDtoTest.java <nl> ppp ComponentDtoTest.java <nl> + @Test <nl> + public void toString_does_not_fail_if_empty() throws Exception { <nl> + ComponentDto dto = new ComponentDto(); <nl> + assertThat(dto.toString()).isNotEmpty(); <nl> + } <nl> mmm UserDao.java <nl> ppp UserDao.java <nl> - return selectActiveUserByLogin(session, login); <nl> 
mmm JsonReport.java <nl> ppp JsonReport.java <nl> - return ruleI18nManager.getName(ruleKey.repository(), ruleKey.rule(), Locale.getDefault()); <nl> + return ruleI18nManager.getName(ruleKey.repository(), ruleKey.rule()); <nl> mmm UserSessionFilter.java <nl> ppp UserSessionFilter.java <nl> mmm DatabaseSessionFilter.java <nl> 
mmm IssueBackendMediumTest.java <nl> ppp IssueBackendMediumTest.java <nl> + import org.junit.Ignore; <nl> - import org.sonar.api.rule.RuleKey; <nl> - import org.sonar.core.component.ComponentDto; <nl> - import org.sonar.core.issue.db.IssueDto; <nl> + import org.sonar.api.resources.Project; <nl> - import org.sonar.server.component.persistence.ComponentDao; <nl> 
new file <nl> ppp GSYVideoProgressListener.java <nl> + package com.shuyu.gsyvideoplayer.listener; <nl> + public interface GSYVideoProgressListener { <nl> + void onProgress(int progress, int secProgress, int currentPosition, int duration); <nl> + } <nl> new file <nl> ppp ScrollingActivity.java <nl> + package com.example.gsyvideoplayer; <nl> 
mmm ApiClientTest.java <nl> ppp ApiClientTest.java <nl> - ApiClient apiClient = null; <nl> + ApiClient apiClient; <nl> + JSON json; <nl> - } <nl> - @Test <nl> - public void testParseAndFormatDatetime() { <nl> - apiClient.getDatetimeFormat().setTimeZone(TimeZone.getTimeZone("UTC")); <nl> - String dateStr = "2015-11-07T03:49:09.356Z"; <nl> 
new file <nl> ppp PetApi.java <nl> + package org.openapitools.client.api; <nl> + import java.io.File; <nl> + import org.openapitools.client.model.ModelApiResponse; <nl> + import org.openapitools.client.model.Pet; <nl> + import java.io.InputStream; <nl> + import java.io.OutputStream; <nl> + import java.util.List; <nl> 
new file <nl> ppp ScalaClientCodegen.java <nl> + package org.openapitools.codegen.languages; <nl> + import org.openapitools.codegen.*; <nl> + import java.io.File; <nl> + import java.util.Arrays; <nl> + import java.util.HashMap; <nl> + import org.apache.commons.lang3.StringUtils; <nl> + public class ScalaClientCodegen extends AbstractScalaCodegen implements CodegenConfig { <nl> 
mmm Pet.java <nl> ppp Pet.java <nl> - @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-01-05T14:39:18.888+08:00") <nl> + @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-01-11T21:48:33.457Z") <nl> 
mmm CodegenProperty.java <nl> ppp CodegenProperty.java <nl> - public String jsonSchema; <nl> mmm PetApi.java <nl> ppp PetApi.java <nl> - import com.wordnik.swagger.annotations.ApiParam; <nl> + import com.wordnik.swagger.annotations.*; <nl> - @com.wordnik.swagger.annotations.Api(value = "/pet", description = "the pet API") <nl> 
mmm Category.java <nl> ppp Category.java <nl> - @XmlElement(name="id") <nl> - @XmlElement(name="name") <nl> 
mmm CSharpClientCodegen.java <nl> ppp CSharpClientCodegen.java <nl> + import io.swagger.codegen.CodegenModel; <nl> + import io.swagger.models.Model; <nl> + import java.util.ArrayList; <nl> + import java.util.Iterator; <nl> + import org.apache.commons.lang.WordUtils; <nl> + protected String localVariablePrefix = ""; <nl> 
mmm DefaultCodegen.java <nl> ppp DefaultCodegen.java <nl> + protected Map<String, String> typeAliases = new HashMap<>(); <nl> + public String getAlias(String name) { <nl> + return name; <nl> + } <nl> - 	@RequestMapping(value = "/") <nl> - 	public String index() { <nl> - 		System.out.println("swagger-ui.html"); <nl> 
new file <nl> ppp ConfluenceWikiCodegen.java <nl> + package org.openapitools.codegen.languages; <nl> + import org.openapitools.codegen.*; <nl> + import io.swagger.v3.oas.models.OpenAPI; <nl> + import io.swagger.v3.oas.models.Operation; <nl> + import io.swagger.v3.oas.models.media.*; <nl> + import java.util.HashMap; <nl> 
mmm ApiClient.java <nl> ppp ApiClient.java <nl> - import retrofit2.converter.gson.GsonConverterFactory; <nl> - import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory; <nl> + import retrofit2.GsonConverterFactory; <nl> + import retrofit2.RxJavaCallAdapterFactory; <nl> - if (authName == "api_key") { <nl> - auth = new ApiKeyAuth("header", "api_key"); <nl> 
mmm FakeApiController.java <nl> ppp FakeApiController.java <nl> - public ResponseEntity<Client> testClientModel(@ApiParam(value = "client model" ,required=true ) @RequestBody Client body) { <nl> + public ResponseEntity<Client> testClientModel(@ApiParam(value = "client model" ,required=true ) @RequestBody Client body) throws Exception { <nl> 
mmm ScalaAkkaClientOptionsProvider.java <nl> ppp ScalaAkkaClientOptionsProvider.java <nl> + public static final String DATE_LIBRARY = "joda"; <nl> + .put("dateLibrary", DATE_LIBRARY) <nl> mmm AbstractJavaCodegen.java <nl> ppp AbstractJavaCodegen.java <nl> - } else if (ModelUtils.isMapSchema(p)) { <nl> + } else if (ModelUtils.isMapSchema(p) && !ModelUtils.isComposedSchema(p)) { <nl> 
mmm HttpBasicAuth.java <nl> ppp HttpBasicAuth.java <nl> - import io.swagger.client.Pair; <nl> - import java.util.List; <nl> - public void applyToParams(List<Pair> queryParams, Map<String, String> headerParams) { <nl> + public void applyToParams(Map<String, String> queryParams, Map<String, String> headerParams) { <nl> 
mmm PhpSlimServerCodegen.java <nl> ppp PhpSlimServerCodegen.java <nl> - modelTestTemplateFiles.put("model_test.mustache", ".php"); <nl> + apiTestTemplateFiles.clear(); <nl> - supportingFiles.add(new SupportingFile("phpunit.xml.mustache", getPackagePath(), "phpunit.xml.dist")); <nl> mmm FakeApi.java <nl> ppp FakeApi.java <nl> 
mmm GeneratorInput.java <nl> ppp GeneratorInput.java <nl> - package io.swagger.generator.model; <nl> + package org.openapitools.codegen.online.model; <nl> mmm NotFoundException.java <nl> ppp NotFoundException.java <nl> - package io.swagger.generator.exception; <nl> + package org.openapitools.codegen.online.exception; <nl> 
mmm AbstractCSharpCodegen.java <nl> ppp AbstractCSharpCodegen.java <nl> + LOGGER.info("NOTE: To enable file post-processing, 'enablePostProcessFile' must be set to `true` (--enable-post-process-file for CLI)."); <nl> mmm AbstractCppCodegen.java <nl> ppp AbstractCppCodegen.java <nl> + import org.apache.commons.io.FilenameUtils; <nl> 
mmm CSharpClientCodegen.java <nl> ppp CSharpClientCodegen.java <nl> - (sourceFolder + File.separator + clientPackage).replace(".", java.io.File.separator), "Configuration.cs")); <nl> + sourceFolder + File.separator + clientPackage.replace(".", java.io.File.separator), "Configuration.cs")); <nl> - (sourceFolder + File.separator + clientPackage).replace(".", java.io.File.separator), "ApiClient.cs")); <nl> 
mmm PetApiServiceImpl.java <nl> ppp PetApiServiceImpl.java <nl> - public Response updatePetWithForm(String petId,String name,String status,SecurityContext securityContext) throws NotFoundException { <nl> + public Response updatePetWithForm(Long petId,String name,String status,SecurityContext securityContext) throws NotFoundException { <nl> 
mmm CLibcurlClientCodegen.java <nl> ppp CLibcurlClientCodegen.java <nl> + @Valid <nl> mmm AbstractJavaCodegen.java <nl> ppp AbstractJavaCodegen.java <nl> - if (property.baseType.equals("BigDecimal")) { <nl> + if ("decimal".equals(property.baseType)) { <nl> mmm CodegenParameter.java <nl> ppp CodegenParameter.java <nl> 
mmm RetrofitClientCodegen.java <nl> ppp RetrofitClientCodegen.java <nl> + supportingFiles.add(new SupportingFile("auth/basic.mustache", <nl> + (sourceFolder + File.separator + invokerPackage + File.separator + "auth").replace(".", java.io.File.separator), "BasicAuthorization.java")); <nl> + supportingFiles.add(new SupportingFile("auth/apikey.mustache", <nl> 
mmm ApiClient.java <nl> ppp ApiClient.java <nl> - authentications.put("api_key", new ApiKeyAuth("header", "api_key")); <nl> + authentications.put("test_api_client_id", new ApiKeyAuth("header", "x-test_api_client_id")); <nl> + authentications.put("test_api_client_secret", new ApiKeyAuth("header", "x-test_api_client_secret")); <nl> 
new file <nl> ppp Model200Response.java <nl> + package io.swagger.client.model; <nl> + import java.util.Objects; <nl> + import io.swagger.annotations.ApiModel; <nl> + import io.swagger.annotations.ApiModelProperty; <nl> + import com.google.gson.annotations.SerializedName; <nl> + public class Model200Response   { <nl> 
mmm Order.java <nl> ppp Order.java <nl> - package io.swagger.server.api.model; <nl> + package org.openapitools.server.api.model; <nl> mmm UserApiException.java <nl> ppp UserApiException.java <nl> - package io.swagger.server.api.verticle; <nl> + package org.openapitools.server.api.verticle; <nl> - import io.swagger.server.api.MainApiException; <nl> 
mmm WordListsApi.java <nl> ppp WordListsApi.java <nl> + String contentType = "application/json"; <nl> - String response = apiInvoker.invokeAPI(basePath, path, "POST", queryParams, body, headerParams); <nl> + String response = apiInvoker.invokeAPI(basePath, path, "POST", queryParams, body, headerParams, contentType); <nl> 
mmm JavaInflectorServerCodegen.java <nl> ppp JavaInflectorServerCodegen.java <nl> new file <nl> ppp UserApiTest.java <nl> + package io.swagger.client.api; <nl> + import io.swagger.client.ApiClient; <nl> + import io.swagger.client.model.User; <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> + import java.util.ArrayList; <nl> 
mmm PetApi.java <nl> ppp PetApi.java <nl> - import io.swagger.client.ApiInvoker; <nl> + import io.swagger.client.ApiClient; <nl> + import io.swagger.client.Configuration; <nl> - ApiInvoker apiInvoker = ApiInvoker.getInstance(); <nl> + private ApiClient apiClient; <nl> - public ApiInvoker getInvoker() { <nl> 
deleted file <nl> mmm StoreApiTest.java <nl> - package io.swagger.petstore.test; <nl> - import io.swagger.client.ApiClient; <nl> - import io.swagger.client.api.*; <nl> - import io.swagger.client.model.*; <nl> - import java.lang.reflect.Field; <nl> - import java.util.Map; <nl> - import org.junit.*; <nl> - import retrofit2.Response; <nl> 
mmm Pet.java <nl> ppp Pet.java <nl> - @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-02-22T15:34:25.436+08:00") <nl> + @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-03-14T22:17:48.808+08:00") <nl> 
mmm StoreApiTest.java <nl> ppp StoreApiTest.java <nl> + import io.swagger.client.Configuration; <nl> + import io.swagger.client.auth.*; <nl> + @BeforeClass <nl> + public static void initAuth() { <nl> + ApiKeyAuth apiKeyAuth = (ApiKeyAuth) Configuration.getAuthentication("api_key"); <nl> + apiKeyAuth.setApiKey("special-key"); <nl> 
mmm Swift3Codegen.java <nl> ppp Swift3Codegen.java <nl> - if (p instanceof MapSchema) { <nl> + if (isMapSchema(p)) { <nl> mmm Swift4Codegen.java <nl> ppp Swift4Codegen.java <nl> - if (prop instanceof MapSchema) { <nl> + if (isMapSchema(prop)) { <nl> mmm AbstractScalaCodegen.java <nl> ppp AbstractScalaCodegen.java <nl> 
mmm PetApi.java <nl> ppp PetApi.java <nl> - @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2015-10-21T11:55:29.717+08:00") <nl> + @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2015-10-30T16:36:47.681+08:00") <nl> 
mmm InlineResponse200.java <nl> ppp InlineResponse200.java <nl> mmm User.java <nl> ppp User.java <nl> mmm ApiClient.java <nl> ppp ApiClient.java <nl> - } else if (authName == "test_http_basic") { <nl> - auth = new HttpBasicAuth(); <nl> mmm JavaClientCodegen.java <nl> ppp JavaClientCodegen.java <nl> - protected String apiDocPath = "docs/"; <nl> 
mmm ApiInvoker.java <nl> ppp ApiInvoker.java <nl> - package com.wordnik.client; <nl> + package io.swagger.client; <nl> mmm DefaultGenerator.java <nl> ppp DefaultGenerator.java <nl> + config.postProcessSupportingFileData(bundle); <nl> mmm Tag.java <nl> ppp Tag.java <nl> - package com.wordnik.client.model; <nl> 
mmm PetApiService.java <nl> ppp PetApiService.java <nl> - import io.swagger.model.ModelApiResponse; <nl> + import io.swagger.model.ModelApiResponse; <nl> mmm StoreApi.java <nl> ppp StoreApi.java <nl> - @io.swagger.annotations.Api(description = "the store API") <nl> - @io.swagger.annotations.ApiOperation(value = "Delete purchase order by ID", notes = "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors", response = Void.class, tags={ "store", }) <nl> 
mmm RetrofitClientCodegen.java <nl> ppp RetrofitClientCodegen.java <nl> + import org.apache.commons.lang.StringUtils; <nl> + if (StringUtils.isEmpty(operationId)) { <nl> + throw new RuntimeException("Empty method name (operationId) not allowed"); <nl> + } <nl> mmm TizenClientCodegen.java <nl> ppp TizenClientCodegen.java <nl> 
mmm Qt5CPPGenerator.java <nl> ppp Qt5CPPGenerator.java <nl> - typeMapping.put("binary", "QString"); <nl> mmm ScalaClientCodegen.java <nl> ppp ScalaClientCodegen.java <nl> - typeMapping.put("binary", "String"); <nl> mmm SinatraServerCodegen.java <nl> ppp SinatraServerCodegen.java <nl> - typeMapping.put("binary", "string"); <nl> 
mmm UserApi.java <nl> ppp UserApi.java <nl> - final String[] accepts = { <nl> - "application/json", "application/xml" <nl> - }; <nl> - final String accept = apiClient.selectHeaderAccept(accepts); <nl> - final String[] contentTypes = { <nl> + String[] contentTypes = { <nl> - final String contentType = apiClient.selectHeaderContentType(contentTypes); <nl> 
mmm CodeGenMojo.java <nl> ppp CodeGenMojo.java <nl> + @Parameter(name = "httpUserAgent", property = "openapi.generator.maven.plugin.httpUserAgent", required = false) <nl> + private String httpUserAgent; <nl> + if (isNotEmpty(httpUserAgent)) { <nl> + configurator.setHttpUserAgent(httpUserAgent); <nl> + } <nl> 
mmm InlineResponse200.java <nl> ppp InlineResponse200.java <nl> - @ApiModel(description = "") <nl> mmm StoreApi.java <nl> ppp StoreApi.java <nl> + @DELETE("store/order/{orderId}") <nl> + Observable<Void> deleteOrder( <nl> + @Path("orderId") String orderId <nl> + ); <nl> - @POST("store/order") <nl> - Observable<Order> placeOrder( <nl> 
mmm ScalatraServerCodegen.java <nl> ppp ScalatraServerCodegen.java <nl> - supportingFiles.add(new SupportingFile("JettyMain.scala", sourceFolder, "JettyMain.scala")); <nl> + supportingFiles.add(new SupportingFile("JettyMain.mustache", sourceFolder, "JettyMain.scala")); <nl> mmm SpringBootServerOptionsProvider.java <nl> 
mmm GroovyClientCodegen.java <nl> ppp GroovyClientCodegen.java <nl> mmm AbstractJavaJAXRSServerCodegen.java <nl> ppp AbstractJavaJAXRSServerCodegen.java <nl> deleted file <nl> mmm UserApiTest.java <nl> - package io.swagger.client.api; <nl> - import io.swagger.client.ApiClient; <nl> - import io.swagger.client.model.User; <nl> 
mmm PythonClientCodegen.java <nl> ppp PythonClientCodegen.java <nl> - String module = "client"; <nl> + protected String module = "SwaggerPetstore"; <nl> + protected String invokerPackage; <nl> + protected String eggPackage; <nl> + eggPackage = module + "-python"; <nl> + invokerPackage = eggPackage + "/" + module; <nl> 
mmm PetApiTest.java <nl> ppp PetApiTest.java <nl> + @Ignore <nl> mmm Category.java <nl> ppp Category.java <nl> - @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-01-05T14:39:18.888+08:00") <nl> + @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-01-09T15:18:34.525Z") <nl> 
mmm InlineModelResolver.java <nl> ppp InlineModelResolver.java <nl> - private Swagger swagger = null; <nl> - private boolean skipMatches = false; <nl> + private Swagger swagger; <nl> + private boolean skipMatches; <nl> - } <nl> - } <nl> + } <nl> + } <nl> mmm CodegenProperty.java <nl> ppp CodegenProperty.java <nl> 
mmm ScalaAkkaClientCodegen.java <nl> ppp ScalaAkkaClientCodegen.java <nl> - embeddedTemplateDir = templateDir = "scala-akka-client"; <nl> + embeddedTemplateDir = templateDir = "akka-scala"; <nl> mmm MapTest.java <nl> ppp MapTest.java <nl> + import org.openapitools.model.StringBooleanMap; <nl> + @JsonProperty("direct_map") <nl> 
mmm CodegenResponse.java <nl> ppp CodegenResponse.java <nl> + public String dataType, baseType, containerType; <nl> + public Boolean simpleType; <nl> + public Boolean primitiveType; <nl> + public Boolean isMapContainer; <nl> + public Boolean isListContainer; <nl> new file <nl> ppp AbstractGenerator.java <nl> 
deleted file <nl> mmm Name.java <nl> - package io.swagger.client.model; <nl> - import java.util.Objects; <nl> - import io.swagger.annotations.ApiModel; <nl> - import io.swagger.annotations.ApiModelProperty; <nl> - import com.google.gson.annotations.SerializedName; <nl> - public class Name   { <nl> - @SerializedName("name") <nl> 
mmm PetApiServiceImpl.java <nl> ppp PetApiServiceImpl.java <nl> - import io.swagger.model.Pet; <nl> + import io.swagger.model.Pet; <nl> mmm PetApiService.java <nl> ppp PetApiService.java <nl> - import io.swagger.model.Pet; <nl> + import io.swagger.model.Pet; <nl> mmm EnumTest.java <nl> ppp EnumTest.java <nl> + import io.swagger.model.OuterEnum; <nl> 
mmm BasicTagGroupManager.java <nl> ppp BasicTagGroupManager.java <nl> - this.dbName = TagGroupWriter.DB_PREFIX + (product == null ? "all" : product.s3Name); <nl> + this.dbName = TagGroupWriter.DB_PREFIX + (product == null ? "all" : product.name); <nl> mmm DataWriter.java <nl> ppp DataWriter.java <nl> - import com.netflix.ice.tag.Tag; <nl> 
mmm SampleParentActivity.java <nl> ppp SampleParentActivity.java <nl> + import com.loopj.android.http.RequestHandle; <nl> + import java.util.LinkedList; <nl> + private final List<RequestHandle> requestHandles = new LinkedList<>(); <nl> + public List<RequestHandle> getRequestHandles() { <nl> + return requestHandles; <nl> 
mmm FolderPickerActivity.java <nl> ppp FolderPickerActivity.java <nl> - import com.owncloud.android.utils.DisplayUtils; <nl> - getSupportActionBar().setIcon(DisplayUtils.getSeasonalIconId()); <nl> - mServerStatusIcon = android.R.drawable.ic_secure; <nl> + mServerStatusIcon = R.drawable.ic_lock; <nl> - mServerStatusIcon = android.R.drawable.ic_partial_secure; <nl> 
mmm OperationsService.java <nl> ppp OperationsService.java <nl> + import com.owncloud.android.operations.RenameFileOperation; <nl> + public static final String EXTRA_NEWNAME = "NEWNAME"; <nl> + public static final String ACTION_RENAME = "RENAME"; <nl> + } else if (action.equals(ACTION_RENAME)) { <nl> + String remotePath = operationIntent.getStringExtra(EXTRA_REMOTE_PATH); <nl> 
mmm FileDataStorageManager.java <nl> ppp FileDataStorageManager.java <nl> - cv.put(ProviderTableMeta.OCSHARES_IS_DIRECTORY, share.isFolder() ? 1 : 0); <nl> + cv.put(ProviderTableMeta.OCSHARES_IS_DIRECTORY, share.isDirectory() ? 1 : 0); <nl> + boolean samePath = shareExists(share.getPath()); <nl> + if (samePath || <nl> 
mmm OwnCloudFileObserver.java <nl> ppp OwnCloudFileObserver.java <nl> - import com.owncloud.android.network.OwnCloudClientUtils; <nl> - import eu.alefzero.webdav.WebdavClient; <nl> mmm FileDownloader.java <nl> ppp FileDownloader.java <nl> + if (account == null || file == null) return false; <nl> - mDownloadClient = OwnCloudClientUtils.createOwnCloudClient(mLastAccount, this); <nl> 
mmm FileDataStorageManager.java <nl> ppp FileDataStorageManager.java <nl> - cv.put( <nl> - ProviderTableMeta.FILE_MODIFIED_AT_LAST_SYNC_FOR_DATA, <nl> - file.getModificationTimestampAtLastSyncForData() <nl> - ); <nl> + cv.put(ProviderTableMeta.FILE_MODIFIED_AT_LAST_SYNC_FOR_DATA, file.getModificationTimestampAtLastSyncForData()); <nl> 
mmm ErrorMessageAdapter.java <nl> ppp ErrorMessageAdapter.java <nl> + import com.owncloud.android.operations.MoveFileOperation; <nl> + } else if (operation instanceof MoveFileOperation) { <nl> + if (result.getCode() == ResultCode.INVALID_MOVE_INTO_DESCENDANT)  { <nl> + message = res.getString(R.string.move_file_invalid_into_descendent); <nl> 
mmm FolderPickerActivity.java <nl> ppp FolderPickerActivity.java <nl> + import android.os.Parcelable; <nl> + import com.owncloud.android.lib.common.utils.Log_OC; <nl> - import com.owncloud.android.lib.common.utils.Log_OC; <nl> - public class MoveActivity extends HookActivity implements FileFragment.ContainerActivity, <nl> 
mmm AuthenticatorActivity.java <nl> ppp AuthenticatorActivity.java <nl> - import com.owncloud.android.lib.common.OwnCloudAccount; <nl> - import com.owncloud.android.lib.common.OwnCloudClientManagerFactory; <nl> - import com.owncloud.android.lib.common.OwnCloudCredentialsFactory; <nl> - import com.owncloud.android.operations.DetectAuthenticationMethodOperation.AuthenticationMethod; <nl> 
mmm FileDisplayActivity.java <nl> ppp FileDisplayActivity.java <nl> + import android.content.ContentUris; <nl> + import android.os.Build; <nl> + import android.os.Environment; <nl> + import android.provider.DocumentsContract; <nl> + import android.provider.OpenableColumns; <nl> + import android.util.Log; <nl> 
mmm FileDisplayActivity.java <nl> ppp FileDisplayActivity.java <nl> + invalidateOptionsMenu(); <nl> mmm FileMenuFilter.java <nl> ppp FileMenuFilter.java <nl> + if (mFile == null || downloading || uploading || mFile.isFolder() || mFile.keepInSync()) { <nl> + toHide.add(R.id.action_favorite_file); <nl> + } else { <nl> 
mmm CreateFolderTest.java <nl> ppp CreateFolderTest.java <nl> mmm SynchronizeFileOperation.java <nl> ppp SynchronizeFileOperation.java <nl> + import org.apache.http.HttpStatus; <nl> + import org.apache.jackrabbit.webdav.DavConstants; <nl> + import org.apache.jackrabbit.webdav.MultiStatus; <nl> + import org.apache.jackrabbit.webdav.client.methods.PropFindMethod; <nl> 
mmm AuthenticatorActivity.java <nl> ppp AuthenticatorActivity.java <nl> - import java.net.URLDecoder; <nl> - import android.widget.Toast; <nl> + private static final String KEY_AUTH_MESSAGE_VISIBILITY = "AUTH_MESSAGE_VISIBILITY"; <nl> + private static final String KEY_AUTH_MESSAGE_TEXT = "AUTH_MESSAGE_TEXT"; <nl> 
mmm ChunkedUploadFileOperation.java <nl> ppp ChunkedUploadFileOperation.java <nl> - if (mPutMethod != null) { <nl> - } <nl> mmm OwnCloudServerCheckOperation.java <nl> ppp OwnCloudServerCheckOperation.java <nl> - mLatestResult = new RemoteOperationResult(false, status, get.getResponseHeaders()); <nl> + mLatestResult = new RemoteOperationResult(false, status); <nl> 
mmm FileDownloadFragment.java <nl> ppp FileDownloadFragment.java <nl> + import com.owncloud.android.files.services.FileDownloader; <nl> + @Override <nl> + public void onDownloadEvent(String downloadEvent, String downloadedRemotePath, boolean success) { <nl> + if (downloadEvent.equals(FileDownloader.getDownloadFinishMessage())) { <nl> 
deleted file <nl> mmm DownloadRemoteFileOperation.java <nl> - package com.owncloud.android.oc_framework.operations.remote; <nl> - import java.io.BufferedInputStream; <nl> - import java.io.File; <nl> - import java.io.FileOutputStream; <nl> - import java.io.IOException; <nl> - import java.util.Date; <nl> - import java.util.HashSet; <nl> 
mmm FileActivity.java <nl> ppp FileActivity.java <nl> - import android.support.v4.app.ActionBarDrawerToggle; <nl> - import android.support.v7.app.ActionBarActivity; <nl> + import android.support.v7.app.ActionBarDrawerToggle; <nl> + import android.support.v7.app.AppCompatActivity; <nl> - import android.widget.LinearLayout; <nl> 
new file <nl> ppp HookActivity.java <nl> + package com.owncloud.android.ui.activity; <nl> + public abstract class HookActivity extends FileActivity { <nl> + private static final String TAG = HookActivity.class.getName(); <nl> + } <nl> mmm PreviewMediaFragment.java <nl> ppp PreviewMediaFragment.java <nl> - if (!getFile().isShareByLink()) { <nl> 
mmm FileOperationsHelper.java <nl> ppp FileOperationsHelper.java <nl> - callerActivity.startService(service); <nl> + callerActivity.getOperationsServiceBinder().newOperation(service); <nl> - callerActivity.startService(service); <nl> + callerActivity.getOperationsServiceBinder().newOperation(service); <nl> 
mmm OCNotificationManager.java <nl> ppp OCNotificationManager.java <nl> + import com.owncloud.android.utils.DisplayUtils; <nl> - notification = new Notification(R.drawable.icon, data.getText(), System.currentTimeMillis()); <nl> + notification = new Notification(DisplayUtils.getSeasonalIconId(), data.getText(), System.currentTimeMillis()); <nl> 
mmm FileContentProvider.java <nl> ppp FileContentProvider.java <nl> + import java.security.Provider; <nl> - mFileProjectionMap.put(ProviderTableMeta.FILE_IN_CONFLICT, <nl> - ProviderTableMeta.FILE_IN_CONFLICT); <nl> + ProviderTableMeta.FILE_PERMISSIONS  + " TEXT null," <nl> + ProviderTableMeta.FILE_REMOTE_ID  + " TEXT null," <nl> 
mmm DownloadFileOperation.java <nl> ppp DownloadFileOperation.java <nl> + import com.owncloud.android.MainApp; <nl> - throw new IllegalArgumentException("Illegal null account in DownloadFileOperation creation"); <nl> + throw new IllegalArgumentException("Illegal null account in DownloadFileOperation " + <nl> 
mmm ZipkinUiConfiguration.java <nl> ppp ZipkinUiConfiguration.java <nl> - @EnableConfigurationProperties(ZipkinUIProperties.class) <nl> + @EnableConfigurationProperties(ZipkinUiProperties.class) <nl> - ZipkinUIProperties ui; <nl> + ZipkinUiProperties ui; <nl> - public ResponseEntity<ZipkinUIProperties> serveUiConfig() { <nl> 
deleted file <nl> mmm CassandraScalaSpanStoreTest.java <nl> - package zipkin.storage.cassandra; <nl> - import com.twitter.zipkin.storage.SpanStore; <nl> - import com.twitter.zipkin.storage.SpanStoreSpec; <nl> - import zipkin.storage.interop.ScalaSpanStoreAdapter; <nl> - public class CassandraScalaSpanStoreTest extends SpanStoreSpec { <nl> 
mmm ZipkinQueryApiV1.java <nl> ppp ZipkinQueryApiV1.java <nl> - QueryRequest.Builder builder = new QueryRequest.Builder() <nl> - .serviceName(serviceName) <nl> + QueryRequest.Builder builder = new QueryRequest.Builder(serviceName) <nl> mmm InMemorySpanStoreTest.java <nl> ppp InMemorySpanStoreTest.java <nl> 
mmm ElasticsearchStorage.java <nl> ppp ElasticsearchStorage.java <nl> - protected abstract String getVersion() throws IOException; <nl> + protected abstract String getVersion(); <nl> - protected abstract void ensureTemplate(String name, String indexTemplate) throws IOException; <nl> + protected abstract void ensureTemplate(String name, String indexTemplate); <nl> 
mmm StrictTraceId.java <nl> ppp StrictTraceId.java <nl> - if (next.get(0).traceId().length() > 16 && !request.test(next)) { <nl> - i.remove(); <nl> - } <nl> + if (!request.test(next)) i.remove(); <nl> - if (!next.traceId().equals(traceId)) { <nl> - i.remove(); <nl> - } <nl> + if (!next.traceId().equals(traceId)) i.remove(); <nl> 
mmm BinaryAnnotation.java <nl> ppp BinaryAnnotation.java <nl> + * <nl> + * @deprecated use {@link zipkin2.Span#tags()} <nl> + @Deprecated <nl> mmm Callback.java <nl> ppp Callback.java <nl> + * <nl> + * @deprecated use {@link zipkin2.Callback} <nl> + @Deprecated <nl> mmm Span.java <nl> ppp Span.java <nl> + * <nl> 
mmm RNPushNotification.java <nl> ppp RNPushNotification.java <nl> + import com.facebook.react.bridge.WritableArray; <nl> + @ReactMethod <nl> + public void invokeApp(ReadableMap data) { <nl> + Bundle bundle = null; <nl> - private void registerNotificationsReceiveNotificationActions(ReadableArray actions) { <nl> 
mmm Job.java <nl> ppp Job.java <nl> - *  Job class is serialized/deserialized and used server<->client commnunication <nl> + *  Job class is serialized/deserialized and used server<->client communication <nl> deleted file <nl> mmm DependencyResolverTest.java <nl> - package com.nflabs.zeppelin.spark.dep; <nl> 
mmm InterpreterCompletion.java <nl> ppp InterpreterCompletion.java <nl> 
mmm NotebookTest.java <nl> ppp NotebookTest.java <nl> + import org.apache.zeppelin.interpreter.InterpreterNotFoundException; <nl> - assertNull(note.getParagraphs().get(0).getBindedInterpreter()); <nl> + try { <nl> + note.getParagraphs().get(0).getBindedInterpreter(); <nl> + fail("Should throw InterpreterNotFoundException"); <nl> 
deleted file <nl> mmm ZANJob.java <nl> - package com.nflabs.zeppelin.server; <nl> - import java.util.HashMap; <nl> - import java.util.Map; <nl> - import org.slf4j.Logger; <nl> - import org.slf4j.LoggerFactory; <nl> - import com.nflabs.zeppelin.scheduler.Job; <nl> - import com.nflabs.zeppelin.scheduler.JobListener; <nl> 
mmm InterpreterSettingManager.java <nl> ppp InterpreterSettingManager.java <nl> - private final Map<String, List<String>> interpreterBindings = <nl> - Maps.newConcurrentMap(); <nl> - Map<String, List<String>> newBindingMap = new HashMap<>(); <nl> - for (Map.Entry<String, List<String>> entry : infoSaving.interpreterBindings.entrySet()) { <nl> 
mmm ZeppelinServerResourceParagraphRunner.java <nl> ppp ZeppelinServerResourceParagraphRunner.java <nl> - @Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21") <nl> + @Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-7-6") <nl> mmm RegisterInfo.java <nl> 
mmm ZAN.java <nl> ppp ZAN.java <nl> - package com.nflabs.zeppelin.rest; <nl> + package com.nflabs.zeppelin.zan; <nl> - import java.io.OutputStream; <nl> + import java.io.File; <nl> + import java.io.IOException; <nl> + import java.util.HashMap; <nl> + import java.util.LinkedList; <nl> + import java.util.List; <nl> 
mmm RemoteInterpreterEventClient.java <nl> ppp RemoteInterpreterEventClient.java <nl> - return null; <nl> + InvokeResourceMethodEventMessage invokeMethod = new InvokeResourceMethodEventMessage( <nl> + resourceId, <nl> + methodName, <nl> + paramTypes, <nl> + params, <nl> + null); <nl> + try { <nl> + ByteBuffer buffer = intpEventServiceClient.invokeMethod(intpGroupId, invokeMethod.toJson()); <nl> 
mmm ShellInterpreterTest.java <nl> ppp ShellInterpreterTest.java <nl> + import org.apache.zeppelin.interpreter.InterpreterException; <nl> - public void test() { <nl> + public void test() throws InterpreterException { <nl> - public void testInvalidCommand(){ <nl> + public void testInvalidCommand() throws InterpreterException { <nl> 
deleted file <nl> mmm WeakNetworkManager.java <nl> - package com.didichuxing.doraemonkit.kit.weaknetwork; <nl> - import android.os.SystemClock; <nl> - import java.io.IOException; <nl> - import java.net.SocketTimeoutException; <nl> - import java.net.UnknownHostException; <nl> - import java.util.concurrent.atomic.AtomicBoolean; <nl> 
new file <nl> ppp ThreadMethodAdapter.java <nl> + package com.didichuxing.doraemonkit.plugin.bytecode.method.thread; <nl> + import org.objectweb.asm.MethodVisitor; <nl> + import org.objectweb.asm.Opcodes; <nl> + import org.objectweb.asm.commons.LocalVariablesSorter; <nl> + public class ThreadMethodAdapter extends LocalVariablesSorter implements Opcodes { <nl> 
mmm MetainfDirectoryTreeNodeFactoryProvider.java <nl> ppp MetainfDirectoryTreeNodeFactoryProvider.java <nl> - @Override public String[] getSelectors() { return appendSelectors("jar:dir:*", "war:dir:*", "ear:dir:*"); } <nl> - @Override <nl> - public Pattern getPathPattern() { <nl> - if (externalPathPattern == null) { <nl> 
mmm WalletUtilsTest.java <nl> ppp WalletUtilsTest.java <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.web3j.crypto.Hash.sha256; <nl> + @Test <nl> + public void testGenerateBip39Wallets() throws Exception { <nl> + Bip39Wallet wallet = WalletUtils.generateBip39Wallet(PASSWORD, tempDir); <nl> 
mmm EthCompileSolidity.java <nl> ppp EthCompileSolidity.java <nl> + public Code(String code) { <nl> + this.code = code; <nl> + } <nl> mmm IpcService.java <nl> ppp IpcService.java <nl> - public IpcService(IOFacade ioFacade, boolean includeRawResponses) { <nl> - super(includeRawResponses); <nl> - this.ioFacade = ioFacade; <nl> 
mmm Sign.java <nl> ppp Sign.java <nl> - private static final X9ECParameters CURVE_PARAMS = CustomNamedCurves.getByName("secp256k1"); <nl> + public static final X9ECParameters CURVE_PARAMS = CustomNamedCurves.getByName("secp256k1"); <nl> new file <nl> ppp StructLogs.java <nl> + package org.web3j.protocol.pantheon.response; <nl> 
mmm SignedRawTransaction.java <nl> ppp SignedRawTransaction.java <nl> - import org.web3j.utils.Numeric; <nl> - private final Sign.SignatureData signatureData; <nl> + private Sign.SignatureData signatureData; <nl> - BigInteger v = Numeric.toBigInt(signatureData.getV()); <nl> + byte v = signatureData.getV(); <nl> 
mmm ResponseTest.java <nl> ppp ResponseTest.java <nl> - @Test <nl> - public void testTransactionChainId() { <nl> - Transaction transaction = new Transaction(); <nl> - transaction.setV(0x25); <nl> - assertThat(transaction.getChainId(), equalTo(1)); <nl> - } <nl> mmm RlpString.java <nl> ppp RlpString.java <nl> + import org.web3j.utils.Numeric; <nl> 
mmm BaseIndex.java <nl> ppp BaseIndex.java <nl> + @Override <nl> + public boolean isFindUsingFullTableScan() { <nl> + return false; <nl> + } <nl> mmm FunctionCursorResultSet.java <nl> ppp FunctionCursorResultSet.java <nl> - import org.h2.result.Row; <nl> - public class FunctionCursorResultSet implements Cursor { <nl> 
mmm JdbcCallableStatement.java <nl> ppp JdbcCallableStatement.java <nl> - HashMap<String, Integer> map = new HashMap<>(); <nl> + HashMap<String, Integer> map = new HashMap<>(columnCount); <nl> mmm Transaction.java <nl> ppp Transaction.java <nl> + public long getSequenceNum() { <nl> + return sequenceNum; <nl> 
mmm Update.java <nl> ppp Update.java <nl> - rows.add(oldRow); <nl> - rows.add(newRow); <nl> - if (updatedKeysCollector != null) { <nl> - updatedKeysCollector.add(key); <nl> + if (table.isMVStore()) { <nl> + done = table.lockRow(session, oldRow) == null; <nl> + } <nl> + if (!done) { <nl> + rows.add(oldRow); <nl> 
mmm SequenceMap.java <nl> ppp SequenceMap.java <nl> + import java.util.HashMap; <nl> - import java.util.Map; <nl> + import org.h2.mvstore.MVStore; <nl> - public SequenceMap(Map<String, Object> config) { <nl> - super(config); <nl> + public SequenceMap() { <nl> + super(null, null); <nl> + } <nl> + @Override <nl> 
mmm DataUtils.java <nl> ppp DataUtils.java <nl> - private static final byte[] EMPTY_BYTES = {}; <nl> - public static byte[] newBytes(int len) { <nl> - if (len == 0) { <nl> - return EMPTY_BYTES; <nl> - } <nl> - try { <nl> - return new byte[len]; <nl> - } catch (OutOfMemoryError e) { <nl> - Error e2 = new OutOfMemoryError("Requested memory: " + len); <nl> 
mmm TestBase.java <nl> ppp TestBase.java <nl> + import java.io.File; <nl> + public static String getJVM() { <nl> + return System.getProperty("java.home") + File.separatorChar + "bin" <nl> + + File.separator + "java"; <nl> + } <nl> + public class RealmConfig implements HasConfigProperties { <nl> + @Override <nl> 
mmm MVStore.java <nl> ppp MVStore.java <nl> + import java.util.BitSet; <nl> + import java.util.Deque; <nl> + import java.util.LinkedList; <nl> - import java.util.Map.Entry; <nl> + import java.util.PriorityQueue; <nl> + import java.util.Queue; <nl> + import java.util.concurrent.atomic.AtomicInteger; <nl> + import java.util.concurrent.atomic.AtomicLong; <nl> 
mmm TreeIndex.java <nl> ppp TreeIndex.java <nl> - import org.h2.table.RegularTable; <nl> + import org.h2.table.PageStoreTable; <nl> - private final RegularTable tableData; <nl> + private final PageStoreTable tableData; <nl> - public TreeIndex(RegularTable table, int id, String indexName, <nl> + public TreeIndex(PageStoreTable table, int id, String indexName, <nl> 
mmm DataType.java <nl> ppp DataType.java <nl> - TimestampWithTimeZone value = (TimestampWithTimeZone) rs.getTimestamp(columnIndex); <nl> + TimestampWithTimeZone value = (TimestampWithTimeZone) rs.getObject(columnIndex); <nl> mmm ValueTimestampTimeZone.java <nl> ppp ValueTimestampTimeZone.java <nl> + private static final TimeZone GMT_TIMEZONE = TimeZone.getTimeZone("GMT"); <nl> 
mmm MVStore.java <nl> ppp MVStore.java <nl> - import java.util.BitSet; <nl> - import java.util.Deque; <nl> - import java.util.LinkedList; <nl> - import java.util.PriorityQueue; <nl> - import java.util.Queue; <nl> + import java.util.Map.Entry; <nl> - import java.util.concurrent.atomic.AtomicInteger; <nl> - import java.util.concurrent.atomic.AtomicLong; <nl> 
new file <nl> ppp QueryCondition.java <nl> + package org.h2.jaqu; <nl> + public class QueryCondition<T, A> { <nl> + private Query<T> query; <nl> + private A x; <nl> + public QueryCondition(Query<T> query, A x) { <nl> + this.query = query; <nl> + this.x = x; <nl> + } <nl> + public QueryWhere<T> is(A y) { <nl> + query.addConditionToken(new Condition<A>(query, x, y, CompareType.EQUAL)); <nl> 
mmm PgCatalogTable.java <nl> ppp PgCatalogTable.java <nl> mmm Value.java <nl> ppp Value.java <nl> - import org.h2.engine.Mode.CharPadding; <nl> - import org.h2.util.StringUtils; <nl> - public ValueChar convertToChar() { <nl> - return convertToChar(TypeInfo.getTypeInfo(CHAR), null, CONVERT_TO, null); <nl> - } <nl> 
mmm Select.java <nl> ppp Select.java <nl> - import org.h2.expression.aggregate.Window; <nl> + import org.h2.expression.analysis.Window; <nl> mmm Window.java <nl> ppp Window.java <nl> - package org.h2.expression.aggregate; <nl> + package org.h2.expression.analysis; <nl> - static void appendOrderBy(StringBuilder builder, ArrayList<SelectOrderBy> orderBy) { <nl> 
mmm TestCases.java <nl> ppp TestCases.java <nl> - "set default ifnull((select max(id) from test for update)+1, 0)"); <nl> + "set default ifnull((select max(id) from test)+1, 0)"); <nl> mmm MVStoreTool.java <nl> ppp MVStoreTool.java <nl> - try (MVStore source = new MVStore.Builder(). <nl> - fileName(sourceFileName).readOnly().open()) { <nl> 
new file <nl> ppp ColumnNamerConfiguration.java <nl> + package org.h2.util; <nl> + import java.util.regex.Pattern; <nl> + import org.h2.engine.Mode.ModeEnum; <nl> + import static org.h2.engine.Mode.ModeEnum.*; <nl> + import org.h2.message.DbException; <nl> + public class ColumnNamerConfiguration { <nl> + private static final String DEFAULT_COMMAND = "DEFAULT"; <nl> 
mmm JdbcResultSet.java <nl> ppp JdbcResultSet.java <nl> - return index + 1; <nl> + return index.intValue() + 1; <nl> mmm FileViewer.java <nl> ppp FileViewer.java <nl> - start = Long.decode(args[++i]); <nl> + start = Long.decode(args[++i]).longValue(); <nl> - lines = Integer.decode(args[++i]); <nl> + lines = Integer.decode(args[++i]).intValue(); <nl> 
mmm JdbcPreparedStatement.java <nl> ppp JdbcPreparedStatement.java <nl> - } catch (Throwable e) { <nl> + } catch (Exception e) { <nl> mmm TraceObject.java <nl> ppp TraceObject.java <nl> - protected SQLException logAndConvert(Throwable ex) { <nl> - SQLException e = null; <nl> - try { <nl> - e = DbException.toSQLException(ex); <nl> 
mmm Explain.java <nl> ppp Explain.java <nl> - import org.h2.mvstore.db.MVTableEngine.Store; <nl> + import org.h2.mvstore.db.Store; <nl> mmm JdbcDatabaseMetaData.java <nl> ppp JdbcDatabaseMetaData.java <nl> - return true; <nl> + return false; <nl> - return true; <nl> + return false; <nl> - return true; <nl> + return false; <nl> 
mmm SimpleResultSet.java <nl> ppp SimpleResultSet.java <nl> + import java.sql.NClob; <nl> + import java.sql.RowId; <nl> + import java.sql.SQLXML; <nl> - import java.sql.NClob; <nl> - import java.sql.RowId; <nl> - import java.sql.SQLXML; <nl> + import java.sql.SQLXML; <nl> - import org.h2.util.Task; <nl> + import org.h2.util.Task; <nl> 
mmm Parser.java <nl> ppp Parser.java <nl> - import java.util.Arrays; <nl> - import org.h2.command.dml.MergeUsing; <nl> - parseUpdateSetClause(command, filter, start); <nl> - return command; <nl> - } <nl> - private void parseUpdateSetClause(Update command, TableFilter filter, int start) { <nl> - setSQL(command, "UPDATE", start); <nl> 
mmm TestMVStore.java <nl> ppp TestMVStore.java <nl> - assertEquals("Hello", map.get("1")); <nl> + assertNull(map.get("1")); <nl> - assertEquals(5, s.getVersionsToKeep()); <nl> + long version = s.getCurrentVersion(); <nl> - long version = s.getCurrentVersion(); <nl> - s.close(); <nl> + s.close(); <nl> - Map<Long,Long> seq = s.openMap("data", new SequenceMap.Builder()); <nl> 
mmm Chunk.java <nl> ppp Chunk.java <nl> - import java.util.HashMap; <nl> + import java.util.Map; <nl> - long metaRootPos; <nl> + long layoutRootPos; <nl> - HashMap<String, String> map = DataUtils.parseMap(s); <nl> - int id = DataUtils.readHexInt(map, ATTR_CHUNK, 0); <nl> - Chunk c = new Chunk(id); <nl> - c.block = DataUtils.readHexLong(map, ATTR_BLOCK, 0); <nl> 
mmm Column.java <nl> ppp Column.java <nl> + public StringBuilder getSQL(StringBuilder builder) { <nl> + return Parser.quoteIdentifier(builder, name); <nl> + } <nl> mmm IndexColumn.java <nl> ppp IndexColumn.java <nl> - StringBuilder buff = new StringBuilder(column.getSQL()); <nl> - SortOrder.typeToString(buff, sortType); <nl> 
mmm NullableKeyConcurrentMap.java <nl> ppp NullableKeyConcurrentMap.java <nl> + import org.h2.util.StringUtils; <nl> - private static final String NULL = new String(new byte[0]); <nl> + private static final String NULL = new String(); <nl> + private final boolean toUpper; <nl> + public NullableKeyConcurrentMap(boolean toUpper) { <nl> 
mmm TableBase.java <nl> ppp TableBase.java <nl> + import org.h2.index.IndexType; <nl> + import org.h2.result.SearchRow; <nl> + import org.h2.result.SortOrder; <nl> + import org.h2.value.Value; <nl> + public static int getMainIndexColumn(IndexType indexType, IndexColumn[] cols) { <nl> + if (!indexType.isPrimaryKey() || cols.length != 1) { <nl> 
mmm Session.java <nl> ppp Session.java <nl> - import org.h2.mvstore.MVStore; <nl> - import org.h2.mvstore.db.MVTableEngine; <nl> - MVTableEngine.Store store = database.getMvStore(); <nl> - if (store != null) { <nl> - if (store.getStore().isClosed()) { <nl> - database.shutdownImmediately(); <nl> - throw DbException.get(ErrorCode.DATABASE_IS_CLOSED); <nl> 
mmm FileRec.java <nl> ppp FileRec.java <nl> mmm FileMemData.java <nl> ppp FileMemData.java <nl> - import org.h2.store.fs.mem.FileMemData.Cache; <nl> - import org.h2.store.fs.mem.FileMemData.CompressItem; <nl> mmm XTS.java <nl> ppp XTS.java <nl> mmm FileNioMapped.java <nl> ppp FileNioMapped.java <nl> - import java.nio.channels.FileChannel.MapMode; <nl> 
mmm TraceSystem.java <nl> ppp TraceSystem.java <nl> + if (levelMax == ADAPTER) { <nl> + return writer.isEnabled(level); <nl> + } <nl> new file <nl> ppp TestMvccMultiThreaded2.java <nl> + package org.h2.test.mvcc; <nl> + import java.sql.Connection; <nl> + import java.sql.PreparedStatement; <nl> + import java.sql.ResultSet; <nl> 
mmm Table.java <nl> ppp Table.java <nl> - import org.h2.value.ValueEnum; <nl> mmm JdbcPreparedStatement.java <nl> ppp JdbcPreparedStatement.java <nl> mmm TestDuplicateKeyUpdate.java <nl> ppp TestDuplicateKeyUpdate.java <nl> - testEnum(conn); <nl> - private void testEnum(Connection conn) throws SQLException { <nl> 
deleted file <nl> mmm ColumnNamer.java <nl> - package org.h2.util; <nl> - import java.util.HashSet; <nl> - import java.util.Set; <nl> - import java.util.regex.Matcher; <nl> - import org.h2.engine.Session; <nl> - import org.h2.expression.Expression; <nl> - public class ColumnNamer { <nl> - private static final String DEFAULT_COLUMN_NAME = "DEFAULT"; <nl> 
mmm TestKillRestartMulti.java <nl> ppp TestKillRestartMulti.java <nl> - if (config.fast) { <nl> - return; <nl> - } <nl> mmm Database.java <nl> ppp Database.java <nl> - synchronized void close(boolean fromShutdownHook) { <nl> - if (closing) { <nl> - return; <nl> - } <nl> - throwLastBackgroundException(); <nl> - if (fileLockMethod == FileLock.LOCK_SERIALIZED && <nl> 
mmm ConditionInParameter.java <nl> ppp ConditionInParameter.java <nl> - public class ConditionInParameter extends Condition { <nl> + public final class ConditionInParameter extends Condition { <nl> + private boolean whenOperand; <nl> - public ConditionInParameter(Expression left, boolean not, Parameter parameter) { <nl> 
mmm RuleElement.java <nl> ppp RuleElement.java <nl> + @Override <nl> + public String toString() { <nl> + return name; <nl> + } <nl> mmm RuleFixed.java <nl> ppp RuleFixed.java <nl> + @Override <nl> + public String toString() { <nl> + return "#" + type; <nl> + } <nl> mmm RuleList.java <nl> ppp RuleList.java <nl> + @Override <nl> 
mmm IndexCondition.java <nl> ppp IndexCondition.java <nl> + public static final int SPATIAL_INTERSECTS = 16; <nl> + public boolean isSpatialIntersects() { <nl> + switch (compareType) { <nl> + case Comparison.SPATIAL_INTERSECTS: <nl> + return true; <nl> + default: <nl> + return false; <nl> + } <nl> + } <nl> new file <nl> 
mmm ScriptCommand.java <nl> ppp ScriptCommand.java <nl> - import org.h2.result.LocalResultFactory; <nl> - return LocalResultFactory.createRow(session, expressions, 1); <nl> + return new LocalResult(session, expressions, 1); <nl> deleted file <nl> mmm TestLocalResultFactory.java <nl> - package org.h2.test.db; <nl> 
mmm TestMultiThreadedKernel.java <nl> ppp TestMultiThreadedKernel.java <nl> + import java.sql.SQLException; <nl> + import org.h2.util.Task; <nl> - public abstract class Task { <nl> + public abstract class TaskDef { <nl> - Task task; <nl> + TaskDef task; <nl> - task = (Task) Class.forName(className).newInstance(); <nl> 
mmm JdbcResultSet.java <nl> ppp JdbcResultSet.java <nl> - return type.cast(value.convertTo(Value.TIMESTAMP_TZ).getObject()); <nl> + return type.cast(value.getObject()); <nl> - return type.cast(value.convertTo(Value.GEOMETRY).getObject()); <nl> + return type.cast(value.getObject()); <nl> mmm TestScript.java <nl> 
mmm DataHandler.java <nl> ppp DataHandler.java <nl> - import org.h2.value.CompareMode; <nl> - CompareMode getCompareMode(); <nl> mmm TestFile.java <nl> ppp TestFile.java <nl> - import org.h2.value.CompareMode; <nl> - throw unsupported("setFetchDirection"); <nl> + debugCodeCall("setFetchDirection", direction) <nl> 
mmm TestAll.java <nl> ppp TestAll.java <nl> - import org.h2.test.store.TestMVStoreStopCompact; <nl> - addTest(new TestMVStoreStopCompact()); <nl> mmm TestIndex.java <nl> ppp TestIndex.java <nl> deleted file <nl> mmm TestMVStoreStopCompact.java <nl> - package org.h2.test.store; <nl> - import java.util.Random; <nl> 
mmm ErrorCode.java <nl> ppp ErrorCode.java <nl> - public static final int COMPARING_ARRAY_TO_SCALAR = 90110; <nl> + public static final int TYPES_ARE_NOT_COMPARABLE_2 = 90110; <nl> + public boolean isWhenConditionOperand() { <nl> + return false; <nl> + } <nl> mmm SimpleCase.java <nl> ppp SimpleCase.java <nl> 
mmm RestfulClientInvoker.java <nl> ppp RestfulClientInvoker.java <nl> - 	public RestfulClientInvoker(ResteasyWebTarget parent, Class<?> declaring, Method method, ProxyConfig config) { <nl> - 		super(parent, declaring, method, config); <nl> - 	} <nl> - 	public Object invoke(Object[] args, Request req, RestfulClientResponse resp) { <nl> 
mmm SimpleConfigHandler.java <nl> ppp SimpleConfigHandler.java <nl> - import com.weibo.api.motan.util.StringTools; <nl> - public <T> ClusterSupport<T> buildClusterSupport(Class<T> interfaceClass, List<URL> registryUrls) { <nl> - ClusterSupport<T> clusterSupport = new ClusterSupport<T>(interfaceClass, registryUrls); <nl> 
deleted file <nl> mmm ConsulCommandService.java <nl> - package com.weibo.service.impl; <nl> - import com.alibaba.fastjson.JSONObject; <nl> - import com.ecwid.consul.v1.ConsulClient; <nl> - import com.weibo.api.motan.registry.support.command.RpcCommand; <nl> - import com.weibo.model.OperationRecord; <nl> - import com.weibo.service.CommandService; <nl> 
mmm ServerController.java <nl> ppp ServerController.java <nl> - import org.springframework.beans.factory.annotation.Autowired; <nl> + import javax.annotation.Resource; <nl> - import java.util.Map; <nl> + public ConsulRegistryService(ConsulClient consulClient) { <nl> + this.consulClient = consulClient; <nl> 
mmm ZookeeperRegistryFactory.java <nl> ppp ZookeeperRegistryFactory.java <nl> mmm ZookeeperRegistryTest.java <nl> ppp ZookeeperRegistryTest.java <nl> - import com.weibo.api.motan.registry.NotifyListener; <nl> + import com.weibo.api.motan.registry.support.command.CommandListener; <nl> + import com.weibo.api.motan.registry.support.command.ServiceListener; <nl> 
mmm MotanApiClientDemo.java <nl> ppp MotanApiClientDemo.java <nl> - RegistryConfig registry = new RegistryConfig(); <nl> - registry.setRegProtocol("local"); <nl> - motanDemoServiceReferer.setRegistry(registry); <nl> + RegistryConfig zookeeperRegistry = new RegistryConfig(); <nl> + zookeeperRegistry.setRegProtocol("zookeeper"); <nl> 
mmm InfinispanSubsystemXMLReader.java <nl> ppp InfinispanSubsystemXMLReader.java <nl> + import org.jboss.as.clustering.infinispan.subsystem.remote.RemoteTransactionResourceDefinition; <nl> + case TRANSACTION: { <nl> + if (this.schema.since(InfinispanSchema.VERSION_8_0)) { <nl> + this.parseRemoteTransaction(reader, address, operations); <nl> 
mmm MicroProfileMetricsSubsystemDefinition.java <nl> ppp MicroProfileMetricsSubsystemDefinition.java <nl> + static final String PROCESS_STATE_NOTIFIER = "org.wildfly.management.process-state-notifier"; <nl> - .addRequirements(CLIENT_FACTORY_CAPABILITY, MANAGEMENT_EXECUTOR, MP_CONFIG) <nl> + .addRequirements(CLIENT_FACTORY_CAPABILITY, MANAGEMENT_EXECUTOR, PROCESS_STATE_NOTIFIER, MP_CONFIG) <nl> 
mmm JdrRunner.java <nl> ppp JdrRunner.java <nl> + this.env.getZip().add(new ByteArrayInputStream(this.env.getZip().getProductDirName().getBytes(StandardCharsets.UTF_8)), "product.txt"); <nl> mmm Subsystem_2_0_ParsingTestCase.java <nl> ppp Subsystem_2_0_ParsingTestCase.java <nl> + import static org.wildfly.extension.microprofile.opentracing.SubsystemDefinition.MICROPROFILE_CONFIG_CAPABILITY_NAME; <nl> 
mmm SecurityLogger.java <nl> ppp SecurityLogger.java <nl> - @LogMessage(level = Level.WARN) <nl> - @Message(id = 3, value = "Error deleting JACC Policy") <nl> - void errorDeletingJACCPolicy(@Cause Throwable t); <nl> - package org.jboss.as.security.service; <nl> + package org.jboss.as.ee.security; <nl> - import static org.jboss.as.security.service.SecurityBootstrapService.JACC_MODULE; <nl> 
mmm InfinispanSchema.java <nl> ppp InfinispanSchema.java <nl> - static final InfinispanSchema CURRENT = VERSION_9_0; <nl> + static final InfinispanSchema CURRENT = VERSION_8_0; <nl> mmm InfinispanSubsystemXMLReader.java <nl> ppp InfinispanSubsystemXMLReader.java <nl> - case CREATE_ON_START: { <nl> - if (this.schema.since(InfinispanSchema.VERSION_9_0)) { <nl> 
deleted file <nl> mmm SecurityAPITestCase.java <nl> - package org.wildfly.test.integration.elytron.securityapi; <nl> - import static org.apache.http.HttpStatus.SC_OK; <nl> - import static org.apache.http.HttpStatus.SC_UNAUTHORIZED; <nl> - import static org.junit.Assert.assertEquals; <nl> - import static org.wildfly.test.integration.elytron.securityapi.TestAuthenticationMechanism.MESSAGE; <nl> 
mmm MicroProfileConfigConvertersTestCase.java <nl> ppp MicroProfileConfigConvertersTestCase.java <nl> + import org.jboss.as.test.shared.PermissionUtils; <nl> + import org.wildfly.test.integration.microprofile.config.smallrye.AbstractMicroProfileConfigTestCase; <nl> + package org.wildfly.test.integration.microprofile.config.smallrye; <nl> 
mmm HealthReporterService.java <nl> ppp HealthReporterService.java <nl> + import static org.wildfly.extension.microprofile.health.MicroProfileHealthSubsystemDefinition.CLIENT_FACTORY_CAPABILITY; <nl> + import static org.wildfly.extension.microprofile.health.MicroProfileHealthSubsystemDefinition.MANAGEMENT_EXECUTOR; <nl> 
mmm MicroProfileHealthHTTPEndpointTestCase.java <nl> ppp MicroProfileHealthHTTPEndpointTestCase.java <nl> - import java.io.BufferedReader; <nl> - import java.io.InputStream; <nl> - import java.io.InputStreamReader; <nl> - import org.apache.http.HttpResponse; <nl> + import org.apache.http.util.EntityUtils; <nl> 
mmm ResourceDescriptor.java <nl> ppp ResourceDescriptor.java <nl> + public ResourceDescriptor addAttributes(Collection<AttributeDefinition> attributes) { <nl> + this.attributes.addAll(attributes); <nl> + return this; <nl> + } <nl> mmm HttpInvokerDefinition.java <nl> ppp HttpInvokerDefinition.java <nl> - static final SimpleAttributeDefinition HTTP_AUTHENTICATION_FACTORY = new SimpleAttributeDefinitionBuilder(Constants.HTTP_AUTHENITCATION_FACTORY, ModelType.STRING, true) <nl> 
mmm ExternalConnectionFactoryAdd.java <nl> ppp ExternalConnectionFactoryAdd.java <nl> - import static org.wildfly.extension.messaging.activemq.jms.ConnectionFactoryAttributes.External.ENABLE_AMQ1_PREFIX; <nl> - import static org.wildfly.extension.messaging.activemq.jms.JMSTopicService.JMS_TOPIC_PREFIX; <nl> 
mmm CurrentUserCredential.java <nl> ppp CurrentUserCredential.java <nl> - package org.jboss.as.test.integration.ejb.container.interceptor.security; <nl> + package org.jboss.as.test.integration.ejb.container.interceptor.security.api; <nl> - private static final String ELYTRON_DOMAIN_CAPABILITY_NAME = "org.wildfly.security.security-domain"; <nl> 
mmm RemoteCacheContainer.java <nl> ppp RemoteCacheContainer.java <nl> - import java.util.function.Function; <nl> - import org.infinispan.client.hotrod.event.impl.ClientListenerNotifier; <nl> - import org.infinispan.client.hotrod.near.NearCacheService; <nl> - interface NearCacheRegistration extends AutoCloseable { <nl> 
mmm EeSubsystemAdd.java <nl> ppp EeSubsystemAdd.java <nl> - import static org.jboss.as.ee.subsystem.EeCapabilities.LEGACY_JACC_CAPABILITY; <nl> - import static org.jboss.as.ee.subsystem.EeCapabilities.ELYTRON_JACC_CAPABILITY; <nl> - import org.jboss.as.controller.capability.CapabilityServiceSupport; <nl> 
mmm MicroProfileFaultToleranceLogger.java <nl> ppp MicroProfileFaultToleranceLogger.java <nl> - import static org.jboss.logging.Logger.Level.WARN; <nl> - @LogMessage(level = WARN) <nl> - @Message(id = 2, value = "Hystrix was already configured! Skipping configuration from deployment '%s'.") <nl> - void hystrixAlreadyConfigured(String deploymentName); <nl> 
mmm Mutable.java <nl> ppp Mutable.java <nl> + import java.util.concurrent.atomic.AtomicInteger; <nl> - private int value; <nl> + private final AtomicInteger value; <nl> - this.value = value; <nl> + this.value = new AtomicInteger(value); <nl> - public int getValue() { <nl> - return this.value; <nl> - } <nl> - public void increment() { <nl> 
new file <nl> ppp MicroProfileOpenAPIExtension.java <nl> + package org.wildfly.extension.microprofile.openapi; <nl> + import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM; <nl> + import org.jboss.as.controller.Extension; <nl> + import org.jboss.as.controller.ExtensionContext; <nl> 
mmm PropertyFileAuthzBasedDomain.java <nl> ppp PropertyFileAuthzBasedDomain.java <nl> - public class PropertyFileAuthzBasedDomain extends AbstractUserRolesCapableElement implements SecurityDomain { <nl> + public class PropertyFileAuthzBasedDomain extends AbstractUserAttributeValuesCapableElement implements SecurityDomain { <nl> 
mmm UndertowConnectorTestCase.java <nl> ppp UndertowConnectorTestCase.java <nl> + import org.jboss.as.controller.PathAddress; <nl> + import org.wildfly.extension.undertow.Constants; <nl> - assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService("", "", options, OptionMap.EMPTY)).getType()); <nl> 
new file <nl> ppp FineTransactionalHotRodWebFailoverTestCase.java <nl> + package org.jboss.as.test.clustering.cluster.web.remote; <nl> + import org.jboss.arquillian.container.test.api.Deployment; <nl> + import org.jboss.arquillian.container.test.api.TargetsContainer; <nl> + import org.jboss.arquillian.junit.Arquillian; <nl> 
new file <nl> ppp OpenAPIDocumentProcessor.java <nl> + package org.wildfly.extension.microprofile.openapi.deployment; <nl> + import java.io.IOException; <nl> + import java.util.AbstractMap; <nl> + import java.util.Arrays; <nl> + import java.util.Collection; <nl> + import java.util.EnumMap; <nl> + import java.util.EnumSet; <nl> 
mmm BeanManager.java <nl> ppp BeanManager.java <nl> - * @param <G> the group identifier type <nl> mmm InfinispanBean.java <nl> ppp InfinispanBean.java <nl> - * @param <G> the group identifier type <nl> mmm InfinispanBeanManager.java <nl> ppp InfinispanBeanManager.java <nl> - * @param <G> the group identifier type <nl> 
new file <nl> ppp DeploymentTransformer.java <nl> + package org.wildfly.ee8to9.transformer; <nl> + import java.io.IOException; <nl> + import java.io.InputStream; <nl> + import java.nio.file.Path; <nl> + import org.jboss.logging.Logger; <nl> + import org.wildfly.galleon.plugin.transformer.JakartaTransformer; <nl> 
mmm SyncFailsafeTest.java <nl> ppp SyncFailsafeTest.java <nl> - assertEquals(context.getExecutions(), counter.getAndIncrement()); <nl> + assertEquals(context.getAttemptCount(), counter.getAndIncrement()); <nl> - assertEquals(context.getExecutions(), counter.getAndIncrement()); <nl> + assertEquals(context.getAttemptCount(), counter.getAndIncrement()); <nl> 
mmm Schedulers.java <nl> ppp Schedulers.java <nl> - import java.util.concurrent.Callable; <nl> - import java.util.concurrent.ScheduledExecutorService; <nl> - import java.util.concurrent.ScheduledFuture; <nl> - import java.util.concurrent.TimeUnit; <nl> + import java.util.concurrent.ScheduledExecutorService; <nl> 
mmm CameraConfigureActivity.java <nl> ppp CameraConfigureActivity.java <nl> - import androidx.core.app.ActivityCompat; <nl> - import androidx.core.content.ContextCompat; <nl> - import androidx.appcompat.app.AppCompatActivity; <nl> - import androidx.appcompat.widget.Toolbar; <nl> - import android.widget.SeekBar; <nl> 
mmm AccelerometerMonitor.java <nl> ppp AccelerometerMonitor.java <nl> - accelerometer = (Sensor) sensorMgr.getDefaultSensor(Sensor.TYPE_ACCELEROMETER); <nl> + accelerometer = sensorMgr.getDefaultSensor(Sensor.TYPE_ACCELEROMETER); <nl> mmm MicrophoneMonitor.java <nl> ppp MicrophoneMonitor.java <nl> - if (prefs.getMicrophoneSensitivity().equals("High")) { <nl> 
mmm CaseDefinitionEntityManagerImpl.java <nl> ppp CaseDefinitionEntityManagerImpl.java <nl> - import org.flowable.cmmn.engine.impl.runtime.CaseInstanceQueryImpl; <nl> + import org.flowable.task.service.history.HistoricTaskInstance; <nl> + import org.flowable.task.service.impl.HistoricTaskInstanceQueryImpl; <nl> 
mmm DeploymentManager.java <nl> ppp DeploymentManager.java <nl> + import java.io.InputStream; <nl> + import org.activiti.bpmn.converter.BpmnXMLConverter; <nl> + import org.activiti.bpmn.model.BpmnModel; <nl> + import org.activiti.engine.impl.persistence.entity.ResourceEntity; <nl> + import org.activiti.engine.impl.util.io.BytesStreamSource; <nl> 
mmm DeleteProcessInstanceTest.java <nl> ppp DeleteProcessInstanceTest.java <nl> - import org.activiti.engine.impl.history.HistoryLevel; <nl> - 		if (processEngineConfiguration.getHistoryLevel().isAtLeast(HistoryLevel.ACTIVITY)) { <nl> - 		HistoricProcessInstance hInstanceUser = historyService.createHistoricProcessInstanceQuery().processInstanceId(instanceUser.getId()).singleResult(); <nl> 
mmm ProcessInstanceMigrationDocumentConverter.java <nl> ppp ProcessInstanceMigrationDocumentConverter.java <nl> - import static org.flowable.engine.migration.ProcessInstanceMigrationDocumentConstants.CALL_ACTIVITY_PROCESS_DEFINITION_VERSION_JSON_PROPERTY; <nl> - import static org.flowable.engine.migration.ProcessInstanceMigrationDocumentConstants.IN_PARENT_PROCESS_OF_CALL_ACTIVITY_JSON_PROPERTY; <nl> 
mmm MultiTenantCmmnEventRegistryConsumerTest.java <nl> ppp MultiTenantCmmnEventRegistryConsumerTest.java <nl> - public void testStartCaseInstanceWithSpecificTenantEvent() { <nl> + public void testStartCaseInstanceWithTenantSpecificEvent() { <nl> - public void testStartCaseInstanceWithSameEventKeyDeployedInSeparateTenants() { <nl> 
mmm AbstractWebServiceTaskTest.java <nl> ppp AbstractWebServiceTaskTest.java <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + import org.activiti.engine.impl.repository.DeploymentBuilderImpl; <nl> + import org.activiti.engine.impl.repository.ResourceEntity; <nl> + DeploymentBuilderImpl impl = (DeploymentBuilderImpl) deploymentBuilder; <nl> 
mmm EmailServiceTaskTest.java <nl> ppp EmailServiceTaskTest.java <nl> - assertEmailSend(message, false, "Hello Kermit!", "This a text only e-mail.", "activiti@localhost", Arrays.asList("kermit@activiti.org"), null); <nl> + assertEmailSend(message, false, "Hello Kermit!", "This a text only e-mail.", "activiti@localhost", Collections.singletonList("kermit@activiti.org"), null); <nl> 
mmm ManagementService.java <nl> ppp ManagementService.java <nl> + void executeHistoryJob(String historyJobId); <nl> + void executeHistoryJob(String historyJobId); <nl> new file <nl> ppp ExecuteHistoryJobCmd.java <nl> + package org.flowable.job.service.impl.cmd; <nl> + import org.flowable.common.engine.api.FlowableException; <nl> 
mmm StageExport.java <nl> ppp StageExport.java <nl> + import javax.xml.stream.XMLStreamWriter; <nl> + import org.flowable.cmmn.converter.CmmnXmlConstants; <nl> - import javax.xml.stream.XMLStreamWriter; <nl> + public class StageExport implements CmmnXmlConstants { <nl> - public class StageExport extends AbstractPlanItemDefinitionExport<Stage> { <nl> 
mmm BatchTransactionApplierFacade.java <nl> ppp BatchTransactionApplierFacade.java <nl> - @Override <nl> - public TransactionApplier startTx( CommandsToApply transaction ) throws IOException <nl> - { <nl> - TransactionApplier[] txAppliers = new TransactionApplier[appliers.length]; <nl> - for ( int i = 0; i < appliers.length; i++ ) <nl> 
deleted file <nl> mmm BoltSchedulerBusyIT.java <nl> - package org.neo4j.bolt.runtime; <nl> - import org.junit.After; <nl> - import org.junit.Before; <nl> - import org.junit.Rule; <nl> - import org.junit.Test; <nl> - import org.junit.rules.RuleChain; <nl> - import org.junit.runner.RunWith; <nl> - import org.junit.runners.Parameterized; <nl> 
mmm IndexSamplingJobTrackerTest.java <nl> ppp IndexSamplingJobTrackerTest.java <nl> - import static org.mockito.Mockito.verifyZeroInteractions; <nl> + import static org.mockito.Mockito.verifyNoInteractions; <nl> - verifyZeroInteractions( scheduler ); <nl> + verifyNoInteractions( scheduler ); <nl> mmm SuppliersTest.java <nl> 
mmm BatchInserterImpl.java <nl> ppp BatchInserterImpl.java <nl> - recordAccess.getRelRecords().getOrLoad( relationship, null, cursorTracer ).forReadingData(), propertyName ); <nl> + recordAccess.getRelRecords().getOrLoad( relationship, cursorTracer ).forReadingData(), propertyName ); <nl> - RecordProxy<NodeRecord,Void> nodeRecord = getNodeRecord( node ); <nl> 
mmm MetaDataStore.java <nl> ppp MetaDataStore.java <nl> - import static org.neo4j.kernel.impl.store.record.RecordLoad.FORCE_NORMAL; <nl> + import static org.neo4j.kernel.impl.store.record.RecordLoad.ALWAYS; <nl> - recordFormat.read( record, cursor, FORCE_NORMAL, RECORD_SIZE, getRecordsPerPage() ); <nl> + recordFormat.read( record, cursor, ALWAYS, RECORD_SIZE, getRecordsPerPage() ); <nl> 
mmm IndexStatisticsStore.java <nl> ppp IndexStatisticsStore.java <nl> + private static final String INIT_TAG = "Initialize IndexStatisticsStore"; <nl> + private final PageCacheTracer pageCacheTracer; <nl> - public IndexStatisticsStore( PageCache pageCache, File file, RecoveryCleanupWorkCollector recoveryCleanupWorkCollector, boolean readOnly ) <nl> 
mmm AddMerger.java <nl> ppp AddMerger.java <nl> - class AddMerger implements ValueMerger<LabelScanKey,LabelScanValue> <nl> + class AddMerger implements ValueMerger<TokenScanKey,TokenScanValue> <nl> - public MergeResult merge( LabelScanKey existingKey, LabelScanKey newKey, LabelScanValue existingValue, LabelScanValue newValue ) <nl> 
mmm DatabaseManagementServiceFactory.java <nl> ppp DatabaseManagementServiceFactory.java <nl> - globalDependencies.satisfyDependency( edition.globalTransactionCounter() ); <nl> deleted file <nl> mmm CommunityGlobalTransactionStatsIT.java <nl> - package org.neo4j.kernel.impl.transaction.stats; <nl> - import org.junit.jupiter.api.AfterEach; <nl> 
mmm DatabaseMemoryGroupTrackerTest.java <nl> ppp DatabaseMemoryGroupTrackerTest.java <nl> - assertThrows( HeapMemoryLimitExceeded.class, () -> methods.reserve( subPool, 11 ) ); <nl> + assertThrows( MemoryLimitExceeded.class, () -> methods.reserve( subPool, 11 ) ); <nl> - assertThrows( HeapMemoryLimitExceeded.class, () -> methods.reserve( subPool, 101 ) ); <nl> 
mmm BlockJUnit4ClassRunner.java <nl> ppp BlockJUnit4ClassRunner.java <nl> - * <nl> - * @deprecated Will be private soon: use Rules instead <nl> - @Deprecated <nl> - * <nl> - * @deprecated Will be private soon: use Rules instead <nl> - @Deprecated <nl> mmm ExpectedExceptionTest.java <nl> ppp ExpectedExceptionTest.java <nl> 
mmm Sortable.java <nl> ppp Sortable.java <nl> - public void sort(Sorter sorter); <nl> + void sort(Sorter sorter); <nl> deleted file <nl> mmm BlockJUnit4ClassRunnerWithParametersTest.java <nl> - package org.junit.runners.parameterized; <nl> - import static java.util.Collections.emptyList; <nl> - import static org.junit.Assert.assertEquals; <nl> 
mmm ParentRunner.java <nl> ppp ParentRunner.java <nl> + import org.junit.runners.model.RunnerInterceptor; <nl> - import org.junit.tests.SafeStatement; <nl> - 	public interface Decorator { <nl> - 		void runChild(SafeStatement statement); <nl> - 		void runAll(SafeStatement statement); <nl> - 	} <nl> - 	private Decorator fDecorator= new Decorator() { <nl> 
mmm AllTests.java <nl> ppp AllTests.java <nl> + import org.junit.tests.experimental.InterceptorTest; <nl> - 	MaxComputerTest.class <nl> + 	MaxComputerTest.class, <nl> + 	InterceptorTest.class <nl> new file <nl> ppp Interceptor.java <nl> + package org.junit.experimental.interceptor; <nl> + import java.lang.annotation.Retention; <nl> 
mmm SpecificDataPointsSupplier.java <nl> ppp SpecificDataPointsSupplier.java <nl> - return fieldsWithMatchingNames; <nl> + return fieldsWithMatchingNames; <nl> mmm AllMembersSupplierTest.java <nl> ppp AllMembersSupplierTest.java <nl> + import org.junit.Rule; <nl> + import org.junit.rules.ExpectedException; <nl> 
mmm Rule.java <nl> ppp Rule.java <nl> - import java.lang.annotation.ElementType; <nl> - import java.lang.annotation.Target; <nl> - @Target({ElementType.FIELD}) <nl> mmm BlockJUnit4ClassRunner.java <nl> ppp BlockJUnit4ClassRunner.java <nl> - 		return TestRule.applyAll(getTestRules(target), result, describeChild(method)); <nl> 
mmm ExternalResource.java <nl> ppp ExternalResource.java <nl> - public abstract class ExternalResource extends TestRule { <nl> - 	@Override <nl> - 	protected Statement apply(Statement base, Description description) { <nl> + public abstract class ExternalResource implements TestRule { <nl> + 	public Statement apply(Statement base, Description description) { <nl> 
mmm TestedOn.java <nl> ppp TestedOn.java <nl> mmm Suite.java <nl> ppp Suite.java <nl> - import java.util.concurrent.CopyOnWriteArrayList; <nl> - private final List<Runner> fRunners = new CopyOnWriteArrayList<Runner>(); <nl> + private final List<Runner> fRunners; <nl> - fRunners.addAll(runners); <nl> + fRunners = runners; <nl> 
mmm Assert.java <nl> ppp Assert.java <nl> - 		if (expected == null && actual == null) <nl> - 			return; <nl> - 		if (expected != null && isEquals(expected, actual)) <nl> + 		if (equalsRegardingNull(expected, actual)) <nl> + 	 <nl> + 	private static boolean equalsRegardingNull(Object expected, Object actual) { <nl> 
mmm QueueChannel.java <nl> ppp QueueChannel.java <nl> - public abstract class QueueChannel<Message> implements SendPort<Message>, ReceivePort<Message>, java.io.Serializable { <nl> + public abstract class QueueChannel<Message> implements Channel<Message>, java.io.Serializable { <nl> new file <nl> ppp LongChannel.java <nl> 
mmm ReactiveStreams.java <nl> ppp ReactiveStreams.java <nl> + import co.paralleluniverse.strands.SuspendableAction2; <nl> + import co.paralleluniverse.strands.channels.SendPort; <nl> + import org.reactivestreams.Processor; <nl> + public static <T, R> Processor<T, R> toProcessor(FiberFactory ff, int bufferSize, OverflowPolicy policy, boolean batch, SuspendableAction2<? extends ReceivePort<? super T>, ? extends SendPort<? extends R>> transformer) { <nl> 
new file <nl> ppp ClassLoaderTest.java <nl> + package co.paralleluniverse.fibers.instrument; <nl> + import co.paralleluniverse.common.test.*; <nl> + import co.paralleluniverse.fibers.*; <nl> + import co.paralleluniverse.strands.*; <nl> + import org.junit.*; <nl> + import java.lang.reflect.*; <nl> + import java.net.*; <nl> 
mmm ActorRefImpl.java <nl> ppp ActorRefImpl.java <nl> - other = ((ActorRefDelegate) other).ref; <nl> + other = ((ActorRefDelegate) other).getRef(); <nl> - actor = ((ActorRefDelegate) actor).ref; <nl> + actor = ((ActorRefDelegate) actor).getRef(); <nl> mmm LocalActor.java <nl> ppp LocalActor.java <nl> + import static co.paralleluniverse.actors.ActorRefDelegateImpl.stripDelegates; <nl> 
mmm Selector.java <nl> ppp Selector.java <nl> - static final Unsafe unsafe = UtilUnsafe.getUnsafe(); <nl> + private static final Unsafe UNSAFE = UtilUnsafe.getUnsafe(); <nl> - winnerOffset = unsafe.objectFieldOffset(Selector.class.getDeclaredField("winner")); <nl> + winnerOffset = UNSAFE.objectFieldOffset(Selector.class.getDeclaredField("winner")); <nl> 
new file <nl> ppp GroovyTypeCheckingExtensionSupport.java <nl> + package org.codehaus.groovy.transform.stc; <nl> + import groovy.lang.Closure; <nl> + import groovy.lang.GroovyShell; <nl> + import groovy.lang.Script; <nl> + import org.codehaus.groovy.GroovyBugError; <nl> + import org.codehaus.groovy.ast.*; <nl> 
mmm ProxyGenerator.java <nl> ppp ProxyGenerator.java <nl> - import org.codehaus.groovy.runtime.typehandling.GroovyCastException; <nl> - import java.lang.reflect.Modifier; <nl> - String group(); <nl> + String group() default ""; <nl> mmm Slf4j.java <nl> ppp Slf4j.java <nl> - import java.util.Locale; <nl> - "is" + methodName.substring(0, 1).toUpperCase(Locale.ENGLISH) + methodName.substring(1, methodName.length()) + "Enabled", <nl> 
new file <nl> ppp SpreadMapTest.java <nl> + package groovy.lang; <nl> + import groovy.util.GroovyTestCase; <nl> + import java.util.Map; <nl> + public class SpreadMapTest extends GroovyTestCase { <nl> + Map map; <nl> + public void setUp() { <nl> + String[] list = new String[] { "key", "value", "name", "tim" }; <nl> 
deleted file <nl> mmm StaticTypesTypeChooser.java <nl> - package org.codehaus.groovy.classgen.asm.sc; <nl> - import org.codehaus.groovy.ast.ClassNode; <nl> - import org.codehaus.groovy.ast.expr.DeclarationExpression; <nl> - import org.codehaus.groovy.ast.expr.Expression; <nl> - import org.codehaus.groovy.ast.expr.VariableExpression; <nl> 
deleted file <nl> mmm ClosureModel.java <nl> - package groovy.model; <nl> - import groovy.lang.Closure; <nl> - @Deprecated <nl> - public class ClosureModel implements ValueModel, NestedValueModel { <nl> - private final ValueModel sourceModel; <nl> - private final Closure readClosure; <nl> - private final Closure writeClosure; <nl> 
mmm TypeCheckingContext.java <nl> ppp TypeCheckingContext.java <nl> + import org.codehaus.groovy.control.CompilationUnit; <nl> + protected CompilationUnit compilationUnit; <nl> + public CompilationUnit getCompilationUnit() { <nl> + return compilationUnit; <nl> + } <nl> + public void setCompilationUnit(final CompilationUnit compilationUnit) { <nl> 
mmm ASTParserException.java <nl> ppp ASTParserException.java <nl> - private static final long serialVersionUID = 2537232761345194260L; <nl> + private static final long serialVersionUID = 7307319325760515017L; <nl> mmm ConfigurationException.java <nl> ppp ConfigurationException.java <nl> - public class ConfigurationException extends RuntimeException implements GroovyExceptionInterface <nl> 
deleted file <nl> mmm UberTestCaseJavaSourceGroovyPackagesNonSecurity_VM5.java <nl> - import junit.framework.TestCase; <nl> - import junit.framework.Test; <nl> - public class UberTestCaseJavaSourceGroovyPackagesNonSecurity_VM5 extends TestCase { <nl> - public static Test suite() { <nl> - return JavaSourceGroovyPackagesNonSecuritySuite_VM5.suite(); <nl> 
mmm GroovyServletTest.java <nl> ppp GroovyServletTest.java <nl> + import javax.servlet.http.HttpServletRequest; <nl> - import javax.servlet.ServletConfig; <nl> - import javax.servlet.ServletContext; <nl> - import javax.servlet.http.HttpServletRequest; <nl> - private ServletConfig config; <nl> - private ServletContext context; <nl> 
mmm StaticTypesTransformation.java <nl> ppp StaticTypesTransformation.java <nl> - try{ <nl> - customClasses.put("org.w3c.dom.Node",super.loadClass("org.w3c.dom.Node",false)); <nl> + try { <nl> + customClasses.put("org.w3c.dom.Node", super.loadClass("org.w3c.dom.Node", false)); <nl> mmm LoaderConfiguration.java <nl> 
deleted file <nl> mmm ThirdParam.java <nl> - package groovy.transform.stc; <nl> - import org.codehaus.groovy.ast.ASTNode; <nl> - import org.codehaus.groovy.ast.ClassNode; <nl> - import org.codehaus.groovy.ast.MethodNode; <nl> - import org.codehaus.groovy.control.CompilationUnit; <nl> - import org.codehaus.groovy.control.SourceUnit; <nl> 
mmm SimpleGroovyClassDoc.java <nl> ppp SimpleGroovyClassDoc.java <nl> - private final Map<String, String> aliases; <nl> - public SimpleGroovyClassDoc(List<String> importedClassesAndPackages, Map<String, String> aliases, String name, List<LinkArgument> links) { <nl> + public SimpleGroovyClassDoc(List<String> importedClassesAndPackages, String name, List<LinkArgument> links) { <nl> 
mmm InvocationWriter.java <nl> ppp InvocationWriter.java <nl> - private boolean writeDirectMethodCall(MethodNode target, boolean implicitThis,  Expression receiver, TupleExpression args) { <nl> + protected boolean writeDirectMethodCall(MethodNode target, boolean implicitThis,  Expression receiver, TupleExpression args) { <nl> 
new file <nl> ppp StaticTypesStatementWriter.java <nl> + package org.codehaus.groovy.classgen.asm.sc; <nl> + import org.codehaus.groovy.ast.ClassHelper; <nl> + import org.codehaus.groovy.ast.ClassNode; <nl> + import org.codehaus.groovy.ast.Parameter; <nl> + import org.codehaus.groovy.ast.expr.ArgumentListExpression; <nl> 
mmm MetaClassImpl.java <nl> ppp MetaClassImpl.java <nl> - public Object invokeConstructorAt(Class at, Object[] arguments) { <nl> - return invokeConstructor(arguments); <nl> - } <nl> - protected MetaMethod retrieveMethod(String methodName, Class[] arguments) { <nl> - return pickMethod(methodName, arguments); <nl> 
new file <nl> ppp TypeSignatureParser.java <nl> + package org.codehaus.groovy.ast.decompiled; <nl> + import org.codehaus.groovy.ast.ClassHelper; <nl> + import org.codehaus.groovy.ast.ClassNode; <nl> + import org.codehaus.groovy.ast.GenericsType; <nl> + import org.codehaus.groovy.vmplugin.v5.Java5; <nl> + import org.objectweb.asm.Opcodes; <nl> 
new file <nl> ppp TestUnicodeEscapes.java <nl> + package org.antlr.v4.test.tool; <nl> + import org.antlr.v4.codegen.UnicodeEscapes; <nl> + import org.junit.Test; <nl> + import static org.junit.Assert.assertEquals; <nl> + public class TestUnicodeEscapes { <nl> + 	@Test <nl> + 	public void latinJavaEscape() { <nl> 
new file <nl> ppp TestVisitors.java <nl> + package org.antlr.v4.test.runtime.python3; <nl> + import org.junit.Ignore; <nl> + import org.junit.Test; <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.junit.Assert.assertNull; <nl> + @SuppressWarnings("unused") <nl> + public class TestVisitors extends BasePython3Test { <nl> 
mmm BuildDependencyGenerator.java <nl> ppp BuildDependencyGenerator.java <nl> - if (generator.getTarget().needsHeader()) { <nl> - files.add(getOutputFile(generator.getRecognizerFileName(true))); <nl> - } <nl> - files.add(getOutputFile(generator.getRecognizerFileName(false))); <nl> + files.add(getOutputFile(generator.getRecognizerFileName())); <nl> 
mmm TestParseTrees.java <nl> ppp TestParseTrees.java <nl> - package org.antlr.v4.test.rt.js.safari; <nl> + package org.antlr.v4.test.rt.py2; <nl> - public class TestParseTrees extends BaseTest { <nl> + public class TestParseTrees extends BasePython2Test { <nl> - 	                  "this.buildParseTrees = true;\n" + <nl> 
deleted file <nl> mmm TestParseTrees.java <nl> - package org.antlr.v4.test.rt.csharp; <nl> - import org.antlr.v4.test.runtime.csharp.BaseTest; <nl> - import org.junit.Test; <nl> - public class TestParseTrees extends BaseTest { <nl> - 	@Test <nl> - 	public void testTokenAndRuleContextString() throws Exception { <nl> 
mmm LL1Analyzer.java <nl> ppp LL1Analyzer.java <nl> - 			} <nl> - 			else if (ctx.isEmpty() && addEOF) { <nl> + 			} else if (ctx.isEmpty() && addEOF) { <nl> - } <nl> - else if (ctx.isEmpty() && addEOF) { <nl> + } else if (ctx.isEmpty() && addEOF) { <nl> - 				boolean removed = calledRuleStack.get(s.ruleIndex); <nl> 
deleted file <nl> mmm MatchIterator.java <nl> - package org.antlr.v4.runtime.tree.pattern; <nl> - import java.util.Iterator; <nl> - public class MatchIterator implements Iterator<ParseTreeMatch> { <nl> - 	@Override <nl> - 	public boolean hasNext() { <nl> - 		return false; <nl> - 	} <nl> - 	@Override <nl> - 	public ParseTreeMatch next() { <nl> 
mmm RuleActionFunction.java <nl> ppp RuleActionFunction.java <nl> - 	public boolean isRuleContext; <nl> - 		isRuleContext = ctxType.equals("RuleContext"); <nl> mmm RuleSempredFunction.java <nl> ppp RuleSempredFunction.java <nl> - 	public String recognizerName; <nl> - 		recognizerName = factory.getGrammar().getRecognizerName(); <nl> 
new file <nl> ppp BasePythonTest.java <nl> + package org.antlr.v4.test.rt.py; <nl> + import static org.junit.Assert.assertArrayEquals; <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.junit.Assert.assertFalse; <nl> + import static org.junit.Assert.assertNotNull; <nl> + import static org.junit.Assert.assertTrue; <nl> 
new file <nl> ppp ParseTreePatternErrorStrategy.java <nl> + package org.antlr.v4.runtime.tree.pattern; <nl> + import org.antlr.v4.runtime.DefaultErrorStrategy; <nl> + import org.antlr.v4.runtime.InputMismatchException; <nl> + import org.antlr.v4.runtime.Parser; <nl> + import org.antlr.v4.runtime.ParserRuleContext; <nl> 
mmm TestListeners.java <nl> ppp TestListeners.java <nl> - package org.antlr.v4.test.rt.csharp; <nl> + package org.antlr.v4.test.rt.py2; <nl> + import static org.junit.Assert.*; <nl> - public class TestListeners extends BaseTest { <nl> + public class TestListeners extends BasePython2Test { <nl> - 	                  "public class LeafListener : TBaseListener {\n" + <nl> 
mmm TestLexerErrors.java <nl> ppp TestLexerErrors.java <nl> - package org.antlr.v4.test.rt.csharp; <nl> + package org.antlr.v4.test.rt.js.safari; <nl> + import static org.junit.Assert.*; <nl> mmm TestFullContextParsing.java <nl> ppp TestFullContextParsing.java <nl> - package org.antlr.v4.test.rt.csharp; <nl> 
mmm ANTLRLexer.java <nl> ppp ANTLRLexer.java <nl> + package org.antlr.v4.runtime; <nl> + import org.antlr.runtime.IntStream; <nl> + public class MismatchedRangeException extends RecognitionException { <nl> + 	public int a,b; <nl> + 	public MismatchedRangeException() {;} <nl> + 	public MismatchedRangeException(int a, int b, IntStream input) { <nl> 
mmm DFAState.java <nl> ppp DFAState.java <nl> deleted file <nl> mmm EmptyPredictionContext.java <nl> - package org.antlr.v4.runtime.atn; <nl> - public class EmptyPredictionContext extends SingletonPredictionContext { <nl> - 	public static final int EMPTY_INVOKING_STATE = ATNState.INVALID_STATE_NUMBER; <nl> 
mmm BaseCSharpTest.java <nl> ppp BaseCSharpTest.java <nl> + import static org.antlr.v4.test.runtime.BaseRuntimeTest.writeFile; <nl> - public static final boolean NETSTANDARD = Boolean.parseBoolean(System.getProperty("antlr-csharp-netstandard")); <nl> + package org.antlr.v4.test.runtime.java; <nl> + import static org.junit.Assert.assertEquals; <nl> 
new file <nl> ppp TestParseTrees.java <nl> + package org.antlr.v4.test.rt.java; <nl> + import org.junit.Test; <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.junit.Assert.assertNull; <nl> + public class TestParseTrees extends BaseTest { <nl> + 	@Test <nl> + 	public void testTokenAndRuleContextString() throws Exception { <nl> 
deleted file <nl> mmm TestPerformance.java <nl> - package org.antlr.v4.test.runtime.python3; <nl> - import org.junit.Ignore; <nl> - import org.junit.Test; <nl> - import static org.junit.Assert.*; <nl> - @SuppressWarnings("unused") <nl> - public class TestPerformance extends BasePython3Test { <nl> - 	@Test <nl> 
mmm BaseRuntimeTest.java <nl> ppp BaseRuntimeTest.java <nl> - 		"Node", "Safari", "Firefox", "Explorer", "Chrome", <nl> - 		"Dart" <nl> + 		"Node", "Safari", "Firefox", "Explorer", "Chrome" <nl> - 	public static String readFile(String dir, String fileName) { <nl> - 		try { <nl> - 			return String.copyValueOf(Utils.readFile(dir+"/"+fileName, "UTF-8")); <nl> 
mmm TestParseTrees.java <nl> ppp TestParseTrees.java <nl> mmm TestLexerErrors.java <nl> ppp TestLexerErrors.java <nl> - 		String grammar = "lexer grammar L;\n" + <nl> - 	                  "A : 'a' 'b' ;"; <nl> + 		StringBuilder sb = new StringBuilder(); <nl> + 		sb.append("lexer grammar L;\n"); <nl> + 		sb.append("A : 'a' 'b' ;\n"); <nl> 
mmm TestRig.java <nl> ppp TestRig.java <nl> - 		Class lexerClass = null; <nl> + 		Class lexerClass; <nl> mmm LeftRecursiveRuleTransformer.java <nl> ppp LeftRecursiveRuleTransformer.java <nl> - 		boolean isLeftRec = false; <nl> + 		boolean isLeftRec; <nl> mmm LogManager.java <nl> ppp LogManager.java <nl> - String dir = System.getProperty("java.io.tmpdir"); <nl> 
deleted file <nl> mmm SingletonPredictionContext.java <nl> - package org.antlr.v4.runtime.atn; <nl> - import java.util.Iterator; <nl> - public class SingletonPredictionContext extends PredictionContext { <nl> - 	public final PredictionContext parent; <nl> - 	public final int invokingState; <nl> - 	public SingletonPredictionContext(PredictionContext parent, int invokingState) { <nl> 
mmm ATNConfig.java <nl> ppp ATNConfig.java <nl> - import org.antlr.v4.runtime.RuleContext; <nl> - 	public RuleContext context; <nl> + 	public PredictionContext context; <nl> + 	public static final ParserRuleContext<Token> EMPTY = new ParserRuleContext<Token>(); <nl> new file <nl> ppp EmptyPredictionContext.java <nl> 
mmm TokenVocabParser.java <nl> ppp TokenVocabParser.java <nl> + import org.antlr.v4.tool.Grammar; <nl> + import org.antlr.v4.tool.ast.GrammarAST; <nl> - 	protected final Tool tool; <nl> - 	protected final String vocabName; <nl> + 	protected final Grammar g; <nl> - 	public TokenVocabParser(Tool tool, String vocabName) { <nl> 
new file <nl> ppp BaseDartTest.java <nl> + package org.antlr.v4.test.runtime.dart; <nl> + import org.antlr.v4.Tool; <nl> + import org.antlr.v4.analysis.AnalysisPipeline; <nl> + import org.antlr.v4.automata.ATNFactory; <nl> + import org.antlr.v4.automata.ATNPrinter; <nl> + import org.antlr.v4.automata.LexerATNFactory; <nl> 
mmm TestXPath.java <nl> ppp TestXPath.java <nl> - 	public Collection<? extends ParseTree> evaluate(ParseTree t) { <nl> - 		Collection<? extends ParseTree> work = elements[0].evaluate(t); <nl> - 		int i = 1; <nl> - 		for (ParseTree node : work) { <nl> - 			Collection<? extends ParseTree> work2 = elements[i].evaluate(node); <nl> 
mmm ObjectMappingITest.java <nl> ppp ObjectMappingITest.java <nl> - final Greeting object = given().parameters("firstName", "John", "lastName", "Doe").when().get("/greetXML").as(Greeting.class); <nl> + final Greeting object = given().params("firstName", "John", "lastName", "Doe").when().get("/greetXML").as(Greeting.class); <nl> 
mmm FeignClientsConfiguration.java <nl> ppp FeignClientsConfiguration.java <nl> + import feign.Retryer; <nl> - 		return Feign.builder(); <nl> + 		return Feign.builder().retryer(Retryer.NEVER_RETRY); <nl> mmm FeignLoadBalancerTests.java <nl> ppp FeignLoadBalancerTests.java <nl> + import com.netflix.client.config.IClientConfig; <nl> 
mmm RibbonCommandContext.java <nl> ppp RibbonCommandContext.java <nl> + import java.util.ArrayList; <nl> + 	public RibbonCommandContext(String serviceId, String method, String uri, Boolean retryable, <nl> + 								MultiValueMap<String, String> headers, MultiValueMap<String, String> params, <nl> + 								InputStream requestEntity) { <nl> 
mmm AbstractRibbonCommand.java <nl> ppp AbstractRibbonCommand.java <nl> + import org.springframework.cloud.netflix.zuul.filters.ZuulProperties; <nl> - import org.springframework.util.StringUtils; <nl> + import com.netflix.hystrix.HystrixCommandProperties.ExecutionIsolationStrategy; <nl> - public abstract class AbstractRibbonCommand<LBC extends AbstractLoadBalancerAwareClient<RQ, RS>, RQ extends ClientRequest, RS extends HttpResponse> extends HystrixCommand<ClientHttpResponse> implements <nl> 
mmm AbstractRibbonCommand.java <nl> ppp AbstractRibbonCommand.java <nl> - import org.springframework.cloud.netflix.zuul.filters.ZuulProperties; <nl> + import org.springframework.util.StringUtils; <nl> - import com.netflix.hystrix.HystrixCommandProperties.ExecutionIsolationStrategy; <nl> - public abstract class AbstractRibbonCommand<LBC extends AbstractLoadBalancerAwareClient<RQ, RS>, RQ extends ClientRequest, RS extends HttpResponse> <nl> 
mmm ApplicationContextTests.java <nl> ppp ApplicationContextTests.java <nl> - import static org.junit.Assert.assertEquals; <nl> - import static org.junit.Assert.assertTrue; <nl> - import org.springframework.beans.factory.annotation.Value; <nl> + import org.springframework.boot.web.server.LocalServerPort; <nl> 
mmm FeignLoadBalancerTests.java <nl> ppp FeignLoadBalancerTests.java <nl> + import java.util.Map; <nl> + 	@Test <nl> + 	@SneakyThrows <nl> + 	public void testInsecureUriFromInsecureClientConfigToSecureServerIntrospector() { <nl> + 		when(this.config.get(IsSecure)).thenReturn(false); <nl> + 		this.feignLoadBalancer = new FeignLoadBalancer(this.lb, this.config, <nl> 
mmm ProxyRequestHelperTests.java <nl> ppp ProxyRequestHelperTests.java <nl> - 		ProxyRequestHelper helper = new ProxyRequestHelper(new ZuulProperties()); <nl> + 		ZuulProperties zuulProperties = new ZuulProperties(); <nl> + 		zuulProperties.setTraceRequestBody(true); <nl> + 		ProxyRequestHelper helper = new ProxyRequestHelper(zuulProperties); <nl> 
mmm PreDecorationFilterTests.java <nl> ppp PreDecorationFilterTests.java <nl> + import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.FORWARD_TO_KEY; <nl> + import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.REQUEST_URI_KEY; <nl> + import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.SERVICE_ID_KEY; <nl> 
mmm GridBasedAlgorithm.java <nl> ppp GridBasedAlgorithm.java <nl> + import java.util.Collection; <nl> + import java.util.Collections; <nl> + import java.util.HashSet; <nl> + import java.util.Set; <nl> - import android.util.Log; <nl> - import java.util.Collection; <nl> - import java.util.Collections; <nl> - import java.util.HashSet; <nl> 
mmm Algorithm.java <nl> ppp Algorithm.java <nl> - import com.google.android.gms.maps.Projection; <nl> - import com.google.maps.android.clustering.Cluster; <nl> - import com.google.maps.android.clustering.ClusterItem; <nl> + import com.google.maps.android.clustering.Cluster; <nl> + import com.google.maps.android.clustering.ClusterItem; <nl> 
new file <nl> ppp KmlTrackTest.java <nl> + package com.google.maps.android.data.kml; <nl> + import com.google.android.gms.maps.model.LatLng; <nl> + import junit.framework.TestCase; <nl> + import java.util.ArrayList; <nl> + import java.util.HashMap; <nl> + public class KmlTrackTest extends TestCase { <nl> + KmlTrack kmlTrack; <nl> 
deleted file <nl> mmm UtilTest.java <nl> - package com.google.maps.android.heatmaps; <nl> - import android.graphics.Color; <nl> - import com.google.android.gms.maps.model.LatLng; <nl> - import com.google.maps.android.geometry.Bounds; <nl> - import junit.framework.TestCase; <nl> - import java.util.ArrayList; <nl> 
mmm CassandraCQLClient.java <nl> ppp CassandraCQLClient.java <nl> + public static final String TRACING_PROPERTY = "cassandra.tracing"; <nl> + public static final String TRACING_PROPERTY_DEFAULT = "false"; <nl> - package com.yahoo.ycsb.db; <nl> - public class StatementType { <nl> - enum Type { <nl> - INSERT(1), DELETE(2), READ(3), UPDATE(4), SCAN(5); <nl> 
mmm CounterGenerator.java <nl> ppp CounterGenerator.java <nl> + import java.util.concurrent.atomic.AtomicInteger; <nl> - 	int counter; <nl> + 	final AtomicInteger counter; <nl> - 		counter=countstart; <nl> - 		setLastInt(countstart-1); <nl> + 		counter=new AtomicInteger(countstart); <nl> + 		setLastInt(counter.get()-1); <nl> 
new file <nl> ppp package-info.java <nl> + package com.yahoo.ycsb.db; <nl> mmm DynamoDBClient.java <nl> ppp DynamoDBClient.java <nl> - private enum PrimaryKeyType { <nl> - HASH, <nl> - HASH_AND_RANGE <nl> + private enum PrimaryKeyType { <nl> + HASH, <nl> + HASH_AND_RANGE <nl> + } <nl> + private AmazonDynamoDBClient dynamoDB; <nl> 
mmm AcknowledgedCounterGenerator.java <nl> ppp AcknowledgedCounterGenerator.java <nl> - 	public int lastInt() <nl> + 	public Integer lastValue() <nl> new file <nl> ppp package-info.java <nl> + package com.yahoo.ycsb.db; <nl> mmm SkewedLatestGenerator.java <nl> ppp SkewedLatestGenerator.java <nl> - public class SkewedLatestGenerator extends IntegerGenerator <nl> 
mmm CommandContext.java <nl> ppp CommandContext.java <nl> - private Object orginRequest; <nl> + private Object originRequest; <nl> - public Object getOrginRequest() { <nl> - return orginRequest; <nl> + public Object getOriginRequest() { <nl> + return originRequest; <nl> - public void setOrginRequest(Object orginRequest) { <nl> 
new file <nl> ppp FailedUnsubscribedTask.java <nl> + package org.apache.dubbo.registry.retry; <nl> + import org.apache.dubbo.common.URL; <nl> + import org.apache.dubbo.common.timer.Timeout; <nl> + import org.apache.dubbo.registry.NotifyListener; <nl> + import org.apache.dubbo.registry.support.FailbackRegistry; <nl> 
new file <nl> ppp AppResponseBuilder.java <nl> + package org.apache.dubbo.monitor.dubbo; <nl> + import org.apache.dubbo.rpc.AppResponse; <nl> + import java.util.Map; <nl> + public class AppResponseBuilder { <nl> + private Object result; <nl> + private Throwable exception; <nl> + private Map<String, String> attachments; <nl> 
deleted file <nl> mmm DecodeableRpcResult.java <nl> - package com.alibaba.dubbo.rpc.protocol.dubbo; <nl> - import java.io.IOException; <nl> - import java.io.InputStream; <nl> - import java.io.OutputStream; <nl> - import java.lang.reflect.Type; <nl> - import com.alibaba.dubbo.common.serialize.ObjectInput; <nl> 
mmm Constants.java <nl> ppp Constants.java <nl> - public static final int     DEFAULT_THREADS                    = 200; <nl> - public static final int     DEFAULT_MIN_THREADS                = 1; <nl> + public static final int     DEFAULT_CORE_THREADS               = 0; <nl> - public static final int     DEFAULT_MAX_THREADS                = DEFAULT_THREADS; <nl> 
mmm Override.java <nl> ppp Override.java <nl> - private String overrideAddress; <nl> + public String toString() { <nl> + return "Override [service=" + service + ", params=" + params + ", application=" <nl> + + application + ", address=" + address + ", username=" + username + ", enabled=" + enabled + "]"; <nl> 
mmm ArgumentCallbackTest.java <nl> ppp ArgumentCallbackTest.java <nl> + import org.apache.dubbo.rpc.model.ApplicationModel; <nl> + ApplicationModel.getServiceRepository().registerService(IDemoService.class); <nl> + ApplicationModel.getServiceRepository().registerService(IHelloService.class); <nl> + ApplicationModel.getServiceRepository().registerService(IDemoService.class); <nl> 
mmm DubboComponentScan.java <nl> ppp DubboComponentScan.java <nl> - import java.lang.annotation.*; <nl> + import java.lang.annotation.Annotation; <nl> + import java.lang.annotation.Documented; <nl> + import java.lang.annotation.ElementType; <nl> + import java.lang.annotation.Retention; <nl> + import java.lang.annotation.RetentionPolicy; <nl> 
new file <nl> ppp ApplicationBean.java <nl> + package org.apache.dubbo.config.spring; <nl> + import org.apache.dubbo.bootstrap.DubboBootstrap; <nl> + import org.apache.dubbo.common.utils.CollectionUtils; <nl> + import org.apache.dubbo.config.ApplicationConfig; <nl> + import org.apache.dubbo.config.ConfigCenterConfig; <nl> 
mmm ZookeeperMetadataReport4TstService.java <nl> ppp ZookeeperMetadataReport4TstService.java <nl> + package org.apache.dubbo.demo.consumer; <nl> + import org.apache.dubbo.demo.DemoService; <nl> + public class DemoServiceMock implements DemoService { <nl> + @Override <nl> + public String sayHello(String name) { <nl> 
mmm DubboShutdownHook.java <nl> ppp DubboShutdownHook.java <nl> + private void dispatch(Event event) { <nl> + eventDispatcher.dispatch(event); <nl> + } <nl> + public boolean getRegistered() { <nl> + return registered.get(); <nl> + } <nl> - private void dispatch(Event event) { <nl> - eventDispatcher.dispatch(event); <nl> 
mmm ColumnGroup.java <nl> ppp ColumnGroup.java <nl> + import com.genius.groupie.GroupDataObserver; <nl> mmm GroupAdapter.java <nl> ppp GroupAdapter.java <nl> - public class GroupAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> implements Group.GroupDataObserver { <nl> + public class GroupAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> implements GroupDataObserver { <nl> 
mmm PackageResolutionTests.java <nl> ppp PackageResolutionTests.java <nl> + import io.ballerina.projects.Package; <nl> + import io.ballerina.projects.PackageDependencyScope; <nl> + import io.ballerina.projects.PackageManifest; <nl> + import io.ballerina.projects.Project; <nl> + import java.util.Collection; <nl> 
mmm Type.java <nl> ppp Type.java <nl> - import org.ballerinalang.docgen.docs.BallerinaDocGenerator; <nl> - import org.ballerinalang.docgen.docs.utils.BallerinaDocUtils; <nl> - import org.slf4j.Logger; <nl> - import org.slf4j.LoggerFactory; <nl> - private static final Logger log = LoggerFactory.getLogger(BallerinaDocGenerator.class); <nl> 
new file <nl> ppp BooleanSchema.java <nl> + package io.ballerina.toml.validator; <nl> + public class BooleanSchema extends Schema { <nl> + public BooleanSchema(TypeEnum type) { <nl> + super(type); <nl> + } <nl> + } <nl> mmm Schema.java <nl> ppp Schema.java <nl> - import com.google.gson.Gson; <nl> - import com.google.gson.annotations.SerializedName; <nl> 
new file <nl> ppp InvocationArgProcessor.java <nl> + package org.ballerinalang.debugadapter.evaluation.engine; <nl> + import com.sun.jdi.Value; <nl> + import io.ballerina.compiler.syntax.tree.DefaultableParameterNode; <nl> + import io.ballerina.compiler.syntax.tree.FunctionDefinitionNode; <nl> + import io.ballerina.compiler.syntax.tree.ParameterNode; <nl> 
mmm ObjectConstructorExpressionTest.java <nl> ppp ObjectConstructorExpressionTest.java <nl> - public void testObjectConstructorQualifiers() { <nl> + public void testObjectConstructorWithClientKeyword() { <nl> - testFile("object-constructor/object_constructor_source_04.bal", <nl> - "object-constructor/object_constructor_assert_04.json"); <nl> 
new file <nl> ppp PullCommandTest.java <nl> + package io.ballerina.cli.cmd; <nl> + import org.testng.Assert; <nl> + import org.testng.annotations.Test; <nl> + import picocli.CommandLine; <nl> + import java.io.IOException; <nl> + public class PullCommandTest extends BaseCommandTest { <nl> + private static final String TEST_PKG_NAME = "wso2/winery:1.2.3"; <nl> 
mmm WorkspaceDocument.java <nl> ppp WorkspaceDocument.java <nl> - @Deprecated(forRemoval = true) <nl> mmm EnvironmentBuilder.java <nl> ppp EnvironmentBuilder.java <nl> - import io.ballerina.projects.Package; <nl> - import io.ballerina.projects.PackageVersion; <nl> - import java.util.Collections; <nl> - import java.util.List; <nl> 
mmm DatabaseHelper.java <nl> ppp DatabaseHelper.java <nl> - import com.activeandroid.util.IOUtils; <nl> - import com.activeandroid.util.SqlParser; <nl> - private final String mSqlParser; <nl> - 		mSqlParser = configuration.getSqlParser(); <nl> - 	 <nl> - 	private void executeSqlScript(SQLiteDatabase db, String file) { <nl> 
deleted file <nl> mmm CountTest.java <nl> - package com.activeandroid.test.query; <nl> - import com.activeandroid.query.Delete; <nl> - import com.activeandroid.query.From; <nl> - import com.activeandroid.query.Select; <nl> - import com.activeandroid.test.MockModel; <nl> - import java.util.List; <nl> - public class CountTest extends SqlableTestCase { <nl> 
mmm GooglePhotosExporterTest.java <nl> ppp GooglePhotosExporterTest.java <nl> - import static com.google.common.truth.Truth.assertThat; <nl> - import static org.datatransferproject.datatransfer.google.photos.GooglePhotosExporter.ALBUM_TOKEN_PREFIX; <nl> - import static org.datatransferproject.datatransfer.google.photos.GooglePhotosExporter.PHOTO_TOKEN_PREFIX; <nl> 
mmm CloudAppCredentialFactory.java <nl> ppp CloudAppCredentialFactory.java <nl> + import com.google.common.cache.CacheBuilder; <nl> + import com.google.common.cache.CacheLoader; <nl> + import com.google.common.cache.LoadingCache; <nl> + import com.google.inject.Singleton; <nl> + import java.util.concurrent.ExecutionException; <nl> 
mmm GoogleCryptoKeyStore.java <nl> ppp GoogleCryptoKeyStore.java <nl> - final class GoogleCryptoKeyStore implements CryptoKeyStore { <nl> + final class GoogleCryptoKeyManagementSystem implements CryptoKeyStore { <nl> - GoogleCryptoKeyStore( <nl> + GoogleCryptoKeyManagementSystem( <nl> - .setApplicationName("GoogleCryptoKeyStore") <nl> 
mmm GooglePhotosExporterTest.java <nl> ppp GooglePhotosExporterTest.java <nl> + import static org.mockito.ArgumentMatchers.any; <nl> + import static org.mockito.ArgumentMatchers.eq; <nl> - import static org.mockito.Mockito.verifyZeroInteractions; <nl> + import static org.mockito.Mockito.verifyNoInteractions; <nl> 
deleted file <nl> mmm ConfigureController.java <nl> - package org.dataportabilityproject.webapp; <nl> - import com.google.common.base.Preconditions; <nl> - import com.google.common.base.Strings; <nl> - import javax.servlet.http.Cookie; <nl> - import javax.servlet.http.HttpServletRequest; <nl> - import javax.servlet.http.HttpServletResponse; <nl> 
mmm TwitterAuthDataGenerator.java <nl> ppp TwitterAuthDataGenerator.java <nl> - public AuthFlowConfiguration generateConfiguration(String callbackBaseUrl, String id) { <nl> + public AuthFlowConfiguration generateConfiguration(String callbackUrl, String id) { <nl> - twitterApi.getOAuthRequestToken(callbackBaseUrl + "/callback/twitter", perms); <nl> 
mmm DestinationMemoryFullException.java <nl> ppp DestinationMemoryFullException.java <nl> - package org.datatransferproject.transfer; <nl> - import org.datatransferproject.transfer.CopyException; <nl> + package org.datatransferproject.spi.transfer.types; <nl> + import javax.annotation.Nonnull; <nl> + public class DestinationMemoryFullException extends CopyExceptionWithFailureReason { <nl> 
mmm ApiMain.java <nl> ppp ApiMain.java <nl> - "Multiple cloud extensions were found. Exactly one is required."); <nl> + "Multiple cloud authServiceExtensions were found. Exactly one is required."); <nl> mmm ListServicesActionResponse.java <nl> ppp ListServicesActionResponse.java <nl> - private final Set<String> services; <nl> 
mmm ModelSwitch.java <nl> ppp ModelSwitch.java <nl> - case ModelPackage.NUMBER_ACTOR: <nl> - { <nl> - NumberActor numberActor = (NumberActor)theEObject; <nl> - T result = caseNumberActor(numberActor); <nl> - if (result == null) result = defaultCase(theEObject); <nl> - return result; <nl> - } <nl> - case ModelPackage.MBRICKLET_SEGMENT_DISPLAY4X7: <nl> 
mmm ScriptManager.java <nl> ppp ScriptManager.java <nl> - 			script = new Script(this, file); <nl> - 			scripts.put(file.getName(), script); <nl> - 			List<Rule> newRules = script.getRules(); <nl> - 			for (Rule rule : newRules) { <nl> - 				ruleMap.put(rule, script); <nl> + 			if(!file.isFile() || file.getName().startsWith(".") || getFileExtension(file) == null){ <nl> 
mmm RFXComCurtain1Message.java <nl> ppp RFXComCurtain1Message.java <nl> - 		subType = (SubType) subType; <nl> + 		this.subType = ((SubType) subType); <nl> mmm RRD4jChartServlet.java <nl> ppp RRD4jChartServlet.java <nl> - 		PERIODS.put("h", -3600L); <nl> - 		PERIODS.put("4h", -14400L); <nl> - 		PERIODS.put("8h", -28800L); <nl> 
mmm NetatmoBinding.java <nl> ppp NetatmoBinding.java <nl> + import org.openhab.binding.netatmo.internal.NetatmoMeasureType; <nl> - import org.openhab.core.library.types.StringType; <nl> - 		AbstractActiveBinding<NetatmoBindingProvider> implements ManagedService { <nl> - 	private static final String DEFAULT_USER_ID = "DEFAULT_USER"; <nl> 
mmm ZWaveConfiguration.java <nl> ppp ZWaveConfiguration.java <nl> - 		if (zController.isConnected() == false) { <nl> - 			logger.debug("Controller not ready - Ignoring request to '{}'", domain); <nl> - 			return; <nl> - 		} <nl> + 		if (splitDomain[0].equals("binding") && splitDomain[1].equals("network") && action.equals("SoftReset")) { <nl> 
deleted file <nl> mmm ZWaveConfigurationCommandClass.java <nl> - package org.openhab.binding.zwave.internal.protocol.commandclass; <nl> - import java.util.HashMap; <nl> - import java.util.Map; <nl> - import org.openhab.binding.zwave.internal.protocol.ConfigurationParameter; <nl> - import org.openhab.binding.zwave.internal.protocol.SerialMessage; <nl> 
new file <nl> ppp UCPRelayBoardGenericBindingProvider.java <nl> + package org.openhab.binding.ucprelayboard.internal; <nl> + import java.util.Map; <nl> + import java.util.Set; <nl> + import org.openhab.binding.ucprelayboard.UCPRelayBoardBindingProvider; <nl> + import org.openhab.core.binding.BindingConfig; <nl> 
new file <nl> ppp YamahaReceiverState.java <nl> + package org.openhab.binding.yamahareceiver.internal.hardware; <nl> + public class YamahaReceiverState { <nl> + 	 <nl> + 	private final boolean power; <nl> + 	private final String input; <nl> + 	private final String surroundProgram; <nl> + 	private final float volume; <nl> 
mmm DeviceType.java <nl> ppp DeviceType.java <nl> - 	Invalid(256), HeatingThermostat(1), HeatingThermostatPlus(2), WallMountedThermostat( <nl> + 	Invalid(256), Cube (0), HeatingThermostat(1), HeatingThermostatPlus(2), WallMountedThermostat( <nl> + 		case 0: <nl> + 	    	return Cube; <nl> + 	 <nl> + 	public String toString() { <nl> 
new file <nl> ppp DavisCommand.java <nl> + package org.openhab.binding.davis.internal; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + import org.openhab.binding.davis.datatypes.DavisCommandType; <nl> + public class DavisCommand { <nl> + 	private List<String> keys; <nl> + 	private String requestCmd;	 <nl> 
new file <nl> ppp SappBindingConfig.java <nl> + package org.openhab.binding.sapp.internal.configs; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + import org.openhab.binding.sapp.internal.model.SappAddressRange; <nl> + import org.openhab.binding.sapp.internal.model.SappAddressType; <nl> 
mmm PairingInitialisationSequence.java <nl> ppp PairingInitialisationSequence.java <nl> - 					if (associations.isEmpty() == false) { <nl> + 					if (associations != null && associations.isEmpty() == false) { <nl> mmm DailyJob.java <nl> ppp DailyJob.java <nl> + import org.slf4j.Logger; <nl> + import org.slf4j.LoggerFactory; <nl> 
mmm ZWaveCommandClass.java <nl> ppp ZWaveCommandClass.java <nl> - 		ALARM(0x71,"ALARM",null), <nl> + 		ALARM(0x71,"ALARM",ZWaveAlarmCommandClass.class), <nl> mmm ZWaveMultiInstanceCommandClass.java <nl> ppp ZWaveMultiInstanceCommandClass.java <nl> - import org.openhab.binding.zwave.internal.protocol.NodeStage; <nl> 
mmm Atmosphere.java <nl> ppp Atmosphere.java <nl> - @Provider(name = ProviderName.YAHOO, property = "atmosphere.humidity"), <nl> - @Provider(name = ProviderName.YAHOO, property = "atmosphere.visibility"), <nl> - @Provider(name = ProviderName.YAHOO, property = "atmosphere.pressure"), <nl> mmm Weather.java <nl> 
mmm ZWaveNodeSerializer.java <nl> ppp ZWaveNodeSerializer.java <nl> + 			if(node.getNodeInitializationStage().isStaticComplete() == false) { <nl> + 				logger.debug("NODE {}: Serialise aborted as static stages not complete", node.getNodeId()); <nl> + 				return; <nl> + 			} <nl> - 			 <nl> - 				if (writer != null) <nl> 
deleted file <nl> mmm ZibaseBinding.java <nl> - package org.openhab.binding.zibase.internal; <nl> - import java.util.Collection; <nl> - import java.util.Dictionary; <nl> - import org.openhab.binding.zibase.ZibaseBindingProvider; <nl> - import org.openhab.binding.zibase.internal.ZibaseGenericBindingProvider; <nl> 
mmm SqueezePlayerEventListener.java <nl> ppp SqueezePlayerEventListener.java <nl> + import org.openhab.io.squeezeserver.SqueezePlayer.Mode; <nl> - 	 void powerChangeEvent(PlayerEvent event); <nl> - 	 void modeChangeEvent(PlayerEvent event); <nl> - 	 void volumeChangeEvent(PlayerEvent event); <nl> - 	 void muteChangeEvent(PlayerEvent event); <nl> 
mmm ZWaveNode.java <nl> ppp ZWaveNode.java <nl> + 	public boolean isFailed(){ <nl> + 		if(this.nodeStage == NodeStage.FAILED) <nl> + 			return true; <nl> + 		else <nl> + 			return false; <nl> + 	} <nl> + 	 <nl> + 	private final static String PARAM_KEY_RETRY = "defaultRetry"; <nl> + 	private final static String PARAM_KEY_EXPIRE = "defaultExpire"; <nl> 
new file <nl> ppp AnelCommandType.java <nl> + package org.openhab.binding.anel.internal; <nl> + import java.io.InvalidClassException; <nl> + import java.util.Set; <nl> + import org.openhab.core.items.Item; <nl> + import org.openhab.core.library.items.NumberItem; <nl> + import org.openhab.core.library.items.StringItem; <nl> 
mmm WemoBindingProvider.java <nl> ppp WemoBindingProvider.java <nl> + import org.openhab.binding.wemo.internal.WemoGenericBindingProvider.WemoChannelType; <nl> - 	public String getWemoFriendlyName(String itemName); <nl> + 	public String getUDN(String itemName); <nl> + 	public WemoChannelType getChannelType(String itemName); <nl> 
deleted file <nl> mmm EBusCommandProcessor.java <nl> - package org.openhab.binding.ebus.internal.connection; <nl> - import java.util.HashMap; <nl> - import java.util.Map; <nl> - import java.util.concurrent.Executors; <nl> - import java.util.concurrent.ScheduledExecutorService; <nl> - import java.util.concurrent.ScheduledFuture; <nl> 
mmm ProtocolGenericBindingProvider.java <nl> ppp ProtocolGenericBindingProvider.java <nl> - import org.openhab.core.library.types.StringType; <nl> - private static final Command WILDCARD_COMMAND_KEY = StringType.valueOf("*"); <nl> - if (WILDCARD_COMMAND_KEY.equals(commandAsString)) { <nl> - return WILDCARD_COMMAND_KEY; <nl> 
new file <nl> ppp ZWaveDbProductFile.java <nl> + package org.openhab.binding.zwave.internal.config; <nl> + import java.util.List; <nl> + import com.thoughtworks.xstream.annotations.XStreamImplicit; <nl> + public class ZWaveDbProductFile { <nl> + 	public String Model; <nl> + 	public Integer Endpoints; <nl> + 	@XStreamImplicit <nl> 
deleted file <nl> mmm Enigma2Activator.java <nl> - package org.openhab.binding.enigma2.internal; <nl> - import org.osgi.framework.BundleActivator; <nl> - import org.osgi.framework.BundleContext; <nl> - import org.slf4j.Logger; <nl> - import org.slf4j.LoggerFactory; <nl> - public final class Enigma2Activator implements BundleActivator { <nl> 
mmm TelegramBot.java <nl> ppp TelegramBot.java <nl> - private String parseMode; <nl> - public TelegramBot(String chatId, String token, String parseMode) { <nl> - this.chatId = chatId; <nl> - this.token = token; <nl> - this.parseMode = parseMode; <nl> - } <nl> - public String getParseMode() { <nl> - return parseMode; <nl> 
new file <nl> ppp OpenEnergyMonitorUDPConnector.java <nl> + package org.openhab.binding.openenergymonitor.protocol; <nl> + import java.io.IOException; <nl> + import java.net.DatagramPacket; <nl> + import java.net.DatagramSocket; <nl> + import java.net.SocketException; <nl> + import java.nio.ByteBuffer; <nl> 
deleted file <nl> mmm SerialConnector.java <nl> - package org.openhab.binding.dscalarm.internal.connector; <nl> - import gnu.io.CommPort; <nl> - import gnu.io.CommPortIdentifier; <nl> - import gnu.io.NoSuchPortException; <nl> - import gnu.io.PortInUseException; <nl> - import gnu.io.SerialPort; <nl> - import gnu.io.SerialPortEvent; <nl> 
mmm LogicalDevice.java <nl> ppp LogicalDevice.java <nl> + public static final String Type_TwoWayMeterEnergyConsumptionSensor = "TwoWayMeterEnergyConsumptionSensor"; <nl> + public static final String Type_TwoWayMeterEnergyFeedSensor = "TwoWayMeterEnergyFeedSensor"; <nl> + public static final String Type_TwoWayMeterPowerConsumptionSensor = "TwoWayMeterPowerConsumptionSensor"; <nl> 
mmm DataTypeBarometer.java <nl> ppp DataTypeBarometer.java <nl> - return new DecimalType(value * 0.0338638); <nl> + return new DecimalType(value * 33.86); <nl> mmm NetatmoGenericBindingProvider.java <nl> ppp NetatmoGenericBindingProvider.java <nl> - config.deviceId = configParts[0].toLowerCase(); <nl> + config.deviceId = configParts[0]; <nl> 
deleted file <nl> mmm HeatmiserPRT.java <nl> - package org.openhab.binding.heatmiser.internal.thermostat; <nl> - import org.openhab.core.items.Item; <nl> - import org.openhab.core.types.Command; <nl> - import org.openhab.core.types.State; <nl> - public class HeatmiserPRT extends HeatmiserThermostat { <nl> - 	@Override <nl> 
mmm RFXComLighting5Message.java <nl> ppp RFXComLighting5Message.java <nl> - 					RFXComValueSelector.DIMMING_LEVEL, <nl> - 					RFXComValueSelector.CONTACT); <nl> + 					RFXComValueSelector.DIMMING_LEVEL); <nl> - 			if (valueSelector == RFXComValueSelector.CONTACT) { <nl> + 			if (valueSelector == RFXComValueSelector.COMMAND) { <nl> 
deleted file <nl> mmm RFXComCurrentMessage.java <nl> - package org.openhab.binding.rfxcom.internal.messages; <nl> - import java.util.Arrays; <nl> - import java.util.List; <nl> - import javax.xml.bind.DatatypeConverter; <nl> - import org.openhab.binding.rfxcom.RFXComValueSelector; <nl> - import org.openhab.binding.rfxcom.internal.RFXComException; <nl> 
mmm NetatmoPressureUnit.java <nl> ppp NetatmoPressureUnit.java <nl> - package org.openhab.binding.netatmo.internal.weather; <nl> + package org.openhab.binding.netatmo.internal; <nl> mmm RefreshTokenTest.java <nl> ppp RefreshTokenTest.java <nl> - package org.openhab.binding.netatmo.internal.authentication; <nl> 
mmm CULSerialHandlerImpl.java <nl> ppp CULSerialHandlerImpl.java <nl> + 		if(properties==null) return; <nl> + 		 <nl> - 		if (StringUtils.isNotBlank(configuredBaudRate)) { <nl> - 			try { <nl> - 				int tmpBaudRate = Integer.parseInt(configuredBaudRate); <nl> - 				if(validBaudrateMap.contains(tmpBaudRate)) { <nl> 
mmm TFIOActorConfiguration.java <nl> ppp TFIOActorConfiguration.java <nl> - *   <li>{@link org.openhab.binding.tinkerforge.internal.model.TFIOActorConfiguration#isDefaultState <em>Default State</em>}</li> <nl> + *   <li>{@link org.openhab.binding.tinkerforge.internal.model.TFIOActorConfiguration#getDefaultState <em>Default State</em>}</li> <nl> 
mmm NetatmoMeasureType.java <nl> ppp NetatmoMeasureType.java <nl> + BATTERYPERCENT("BatteryPercent", NetatmoScale.MAX), <nl> + BATTERYSTATUS("BatteryStatus", NetatmoScale.MAX), <nl> deleted file <nl> mmm RFXComTemperatureHumidityMessageTest.java <nl> - package org.openhab.binding.rfxcom.internal.messages; <nl> 
mmm ZWaveCommandClass.java <nl> ppp ZWaveCommandClass.java <nl> - 		SCENE_ACTIVATION(0x2B,"SCENE_ACTIVATION",null), <nl> + 		SCENE_ACTIVATION(0x2B,"SCENE_ACTIVATION",ZWaveSceneActivationCommandClass.class), <nl> - } <nl> + } <nl> mmm ZWaveBinarySwitchConverter.java <nl> ppp ZWaveBinarySwitchConverter.java <nl> 
new file <nl> ppp AbstractOneWireDevicePropertyBindingConfig.java <nl> + package org.openhab.binding.onewire.internal.deviceproperties; <nl> + import java.util.ArrayList; <nl> + import org.openhab.binding.onewire.internal.OneWireBindingConfig; <nl> + import org.openhab.binding.onewire.internal.deviceproperties.modifier.InterfaceOneWireTypeModifier; <nl> 
mmm RFXComBinding.java <nl> ppp RFXComBinding.java <nl> - 		logger.info("RFXComBinding.internalReceiveCommand: " + itemName + " " + command); <nl> + 		logger.debug("Received command: {} {}", itemName, command); <nl> mmm CmdServlet.java <nl> ppp CmdServlet.java <nl> + 		res.setContentType("application/xml;charset=UTF-8"); <nl> 
deleted file <nl> mmm CallFeatureUiRunner.java <nl> - package demo.callfeature; <nl> - import com.intuit.karate.ui.App; <nl> - import org.junit.Test; <nl> - public class CallFeatureUiRunner { <nl> - @Test <nl> - public void testApp() { <nl> - App.run("src/test/java/demo/callfeature/call-feature.feature", "mock"); <nl> 
new file <nl> ppp SearchOptions.java <nl> + package com.intuit.karate.robot.win; <nl> + import com.intuit.karate.StringUtils; <nl> + import java.util.function.Predicate; <nl> + public class SearchOptions { <nl> + public final String original; <nl> + public final String controlType; <nl> + public final String className; <nl> 
mmm HttpClient.java <nl> ppp HttpClient.java <nl> - protected HttpRequest request; <nl> + protected HttpRequestBuilder request; <nl> - implements RequestConverter<HttpRequest> { <nl> + implements RequestConverter<HttpRequestBuilder> { <nl> - public OperationRequest convert(HttpRequest httpRequest) { <nl> + public OperationRequest convert(HttpRequestBuilder httpRequest) { <nl> 
mmm ProgressListener.java <nl> ppp ProgressListener.java <nl> mmm FileUpload.java <nl> ppp FileUpload.java <nl> - * @author <a href="mailto:Rafal.Krzewski@e-point.pl">Rafal Krzewski</a> <nl> - * @author <a href="mailto:dlr@collab.net">Daniel Rall</a> <nl> - * @author <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a> <nl> 
mmm UniqueId.java <nl> ppp UniqueId.java <nl> - StringBuilder buf = new StringBuilder("UniqueId"); <nl> - buf.append(Arrays.toString(id)); <nl> - return buf.toString(); <nl> + return "UniqueId" + Arrays.toString(id); <nl> - } <nl> + } <nl> mmm SetPropertiesRule.java <nl> ppp SetPropertiesRule.java <nl> - StringBuilder sb = new StringBuilder("SetPropertiesRule["); <nl> 
mmm ServerContainerImpl.java <nl> ppp ServerContainerImpl.java <nl> - private final WsTimeout wsTimeout; <nl> - private final Thread timeoutThread; <nl> + private final WsWriteTimeout wsWriteTimeout = new WsWriteTimeout(); <nl> - private ServerContainerImpl() { <nl> - wsTimeout = new WsTimeout(); <nl> - timeoutThread = new Thread(wsTimeout); <nl> 
new file <nl> ppp QuotedPrintableDecoder.java <nl> + package org.apache.tomcat.util.http.fileupload.util.mime; <nl> + import java.io.IOException; <nl> + import java.io.OutputStream; <nl> + final class QuotedPrintableDecoder { <nl> + private static final byte[] ENCODING_TABLE = { <nl> + (byte) '0', (byte) '1', (byte) '2', (byte) '3', (byte) '4', (byte) '5', (byte) '6', (byte) '7', <nl> 
mmm HttpServletRequestWrapper.java <nl> ppp HttpServletRequestWrapper.java <nl> - public Mapping getMapping() { <nl> - return this._getHttpServletRequest().getMapping(); <nl> + public ServletMapping getServletMapping() { <nl> + return this._getHttpServletRequest().getServletMapping(); <nl> - public default Mapping getMapping() { <nl> 
mmm PooledConnectionImpl.java <nl> ppp PooledConnectionImpl.java <nl> - @SuppressWarnings("resource") <nl> - @SuppressWarnings("resource") <nl> mmm InstanceKeyDataSourceFactory.java <nl> ppp InstanceKeyDataSourceFactory.java <nl> - @SuppressWarnings("resource") <nl> mmm PoolingConnection.java <nl> ppp PoolingConnection.java <nl> 
mmm Stockticker.java <nl> ppp Stockticker.java <nl> - buf.append('#'); <nl> + buf.append("#"); <nl> - buf.append('#'); <nl> + buf.append("#"); <nl> - buf.append('#'); <nl> + buf.append("#"); <nl> mmm FileUploadBase.java <nl> ppp FileUploadBase.java <nl> - header.append(' ').append(headerPart, nonWs, end); <nl> 
mmm AbstractFileResourceSet.java <nl> ppp AbstractFileResourceSet.java <nl> + private boolean readOnly = false; <nl> + @Override <nl> + public void setReadOnly(boolean readOnly) { <nl> + this.readOnly = readOnly; <nl> + } <nl> + @Override <nl> + public boolean isReadOnly() { <nl> + return readOnly; <nl> + } <nl> 
mmm UDecoder.java <nl> ppp UDecoder.java <nl> - Boolean.valueOf(System.getProperty("org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH", "false")).booleanValue(); <nl> + Boolean.parseBoolean(System.getProperty("org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH", "false")); <nl> mmm ClassLoaderLogManager.java <nl> 
mmm JarWarResource.java <nl> ppp JarWarResource.java <nl> + import java.util.jar.Manifest; <nl> - String internalPath) { <nl> + String internalPath, Manifest manifest) { <nl> - jarEntry, internalPath); <nl> + jarEntry, internalPath, manifest); <nl> - protected InputStream doGetInputStream() { <nl> + protected JarInputStreamWrapper getJarInputStreamWrapper() { <nl> 
mmm StreamProcessor.java <nl> ppp StreamProcessor.java <nl> - public class StreamProcessor extends AbstractProcessor implements Runnable { <nl> + class StreamProcessor extends AbstractProcessor implements Runnable { <nl> - public StreamProcessor(Http2UpgradeHandler handler, Stream stream, Adapter adapter, SocketWrapperBase<?> socketWrapper) { <nl> 
new file <nl> ppp MessagePolicy.java <nl> + package javax.security.auth.message; <nl> + public class MessagePolicy { <nl> + private final TargetPolicy[] targetPolicies; <nl> + private final boolean mandatory; <nl> + public MessagePolicy(TargetPolicy[] targetPolicies, boolean mandatory) throws IllegalArgumentException { <nl> 
mmm WsSession.java <nl> ppp WsSession.java <nl> + wsRemoteEndpoint.setAsyncSendTimeout( <nl> + webSocketContainer.getDefaultAsyncSendTimeout()); <nl> new file <nl> ppp WsTimeout.java <nl> + package org.apache.tomcat.websocket.server; <nl> + import java.util.Comparator; <nl> + import java.util.Iterator; <nl> + import java.util.Set; <nl> 
mmm FarmWarDeployer.java <nl> ppp FarmWarDeployer.java <nl> - ContextName cn = new ContextName(deployWar.getName()); <nl> + ContextName cn = new ContextName(deployWar.getName(), true); <nl> - ContextName cn = new ContextName(removeWar.getName()); <nl> + ContextName cn = new ContextName(removeWar.getName(), true); <nl> 
mmm Generator.java <nl> ppp Generator.java <nl> - !jreCompat.canAcccess(null, constructor) ) { <nl> + !jreCompat.canAccess(null, constructor) ) { <nl> mmm ReflectionUtil.java <nl> ppp ReflectionUtil.java <nl> - (jreCompat.canAcccess(base, m) || base != null && jreCompat.canAcccess(null, m)))) { <nl> + (jreCompat.canAccess(base, m) || base != null && jreCompat.canAccess(null, m)))) { <nl> 
mmm Stream.java <nl> ppp Stream.java <nl> - @Override <nl> - public synchronized int doWrite(ByteChunk chunk) throws IOException { <nl> - if (closed) { <nl> - throw new IllegalStateException( <nl> - sm.getString("stream.closed", getConnectionId(), getIdentifier())); <nl> - } <nl> - if (!coyoteResponse.isCommitted()) { <nl> 
mmm NamingResourcesMBean.java <nl> ppp NamingResourcesMBean.java <nl> - IllegalArgumentException iae = new IllegalArgumentException ( <nl> - "Cannot create object name for environment " + envs[i]); <nl> + IllegalArgumentException iae = new IllegalArgumentException( <nl> + sm.getString("namingResourcesMBean.createObjectNameError.environment", envs[i])); <nl> 
mmm ConstantNameAndType.java <nl> ppp ConstantNameAndType.java <nl> - import java.io.DataOutputStream; <nl> - @Override <nl> - public final void dump( DataOutputStream file ) throws IOException { <nl> - file.writeByte(tag); <nl> - file.writeShort(name_index); <nl> - file.writeShort(signature_index); <nl> - } <nl> 
mmm AbstractHttp11Protocol.java <nl> ppp AbstractHttp11Protocol.java <nl> + setSoTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT); <nl> mmm AjpAprProtocol.java <nl> ppp AjpAprProtocol.java <nl> - setSoLinger(Constants.DEFAULT_CONNECTION_LINGER); <nl> - setSoTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT); <nl> - setTcpNoDelay(Constants.DEFAULT_TCP_NO_DELAY); <nl> 
mmm MergedLogSource.java <nl> ppp MergedLogSource.java <nl> - import java.io.ByteArrayInputStream; <nl> - import java.io.EOFException; <nl> - import java.io.FileInputStream; <nl> - import java.text.DateFormat; <nl> - import java.util.Date; <nl> - import java.util.zip.Adler32; <nl> - import java.util.zip.Checksum; <nl> 
mmm QuorumPeerMainTest.java <nl> ppp QuorumPeerMainTest.java <nl> - @Test <nl> - public void testQuorum() throws Exception { <nl> + public void testQuorumInternal(String addr) throws Exception { <nl> - String quorumCfgSection = <nl> - "server.1=127.0.0.1:" + PortAssignment.unique() <nl> - + ":" + PortAssignment.unique() + ";" + CLIENT_PORT_QP1 <nl> 
new file <nl> ppp BlueThrottle.java <nl> + package org.apache.zookeeper.server; <nl> + import java.util.Random; <nl> + import org.apache.zookeeper.common.Time; <nl> + public class BlueThrottle { <nl> + private int maxTokens; <nl> + private int fillTime; <nl> + private int fillCount; <nl> + private int tokens; <nl> 
new file <nl> ppp X509AuthFailureTest.java <nl> + package org.apache.zookeeper.server; <nl> + import static org.junit.jupiter.api.Assertions.assertTrue; <nl> + import static org.junit.jupiter.api.Assertions.fail; <nl> + import org.apache.zookeeper.PortAssignment; <nl> + import org.apache.zookeeper.ZooKeeper; <nl> 
mmm OAuth2UserAuthenticationProvider.java <nl> ppp OAuth2UserAuthenticationProvider.java <nl> - import org.springframework.security.oauth2.oidc.client.authentication.OidcClientAuthenticationToken; <nl> - import org.springframework.security.oauth2.oidc.client.authentication.OidcUserAuthenticationToken; <nl> 
mmm NimbusOpaqueTokenIntrospector.java <nl> ppp NimbusOpaqueTokenIntrospector.java <nl> - import java.util.ArrayList; <nl> - 			throw new OAuth2IntrospectionException("Provided token [" + token + "] isn't active"); <nl> + 			throw new OAuth2IntrospectionException("requestEntityConverter returned a null entity"); <nl> 
mmm WithSecurityContext.java <nl> ppp WithSecurityContext.java <nl> + import org.springframework.test.context.TestContext; <nl> - } <nl> + 	TestExecutionEvent setupBefore() default TestExecutionEvent.TEST_METHOD; <nl> + } <nl> mmm WithMockUser.java <nl> ppp WithMockUser.java <nl> + import org.springframework.core.annotation.AliasFor; <nl> 
mmm RSocketMessageHandlerConnectionITests.java <nl> ppp RSocketMessageHandlerConnectionITests.java <nl> - 	@Test <nl> - 	public void connectWithAnyRole() { <nl> - 		UsernamePasswordMetadata credentials = <nl> - 				new UsernamePasswordMetadata("user", "password"); <nl> - 		this.requester = requester() <nl> 
mmm CasAuthenticationHandlerTests.java <nl> ppp CasAuthenticationHandlerTests.java <nl> - package org.acegisecurity.adapters.cas3; <nl> + package org.springframework.security.adapters.cas3; <nl> - import org.acegisecurity.AuthenticationManager; <nl> + import org.springframework.security.AuthenticationManager; <nl> 
new file <nl> ppp Enumerator.java <nl> + package org.acegisecurity.ui.savedrequest; <nl> + import java.util.ArrayList; <nl> + import java.util.Collection; <nl> + import java.util.Enumeration; <nl> + import java.util.Iterator; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import java.util.NoSuchElementException; <nl> 
mmm RSocketSecurity.java <nl> ppp RSocketSecurity.java <nl> + import org.springframework.security.rsocket.authentication.AuthenticationPayloadExchangeConverter; <nl> + import java.util.Arrays; <nl> + 	public RSocketSecurity simpleAuthentication(Customizer<SimpleAuthenticationSpec> simple) { <nl> + 		if (this.simpleAuthSpec == null) { <nl> 
mmm OidcAuthorizationCodeAuthenticationProvider.java <nl> ppp OidcAuthorizationCodeAuthenticationProvider.java <nl> + import java.nio.charset.StandardCharsets; <nl> + import java.security.MessageDigest; <nl> + import java.security.NoSuchAlgorithmException; <nl> + import java.util.Base64; <nl> + * @author Mark Heckler <nl> 
new file <nl> ppp OidcUserRequestTests.java <nl> + package org.springframework.security.oauth2.client.oidc.userinfo; <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> + import org.powermock.core.classloader.annotations.PrepareForTest; <nl> + import org.powermock.modules.junit4.PowerMockRunner; <nl> 
mmm MethodExpressionAfterInvocationProvider.java <nl> ppp MethodExpressionAfterInvocationProvider.java <nl> - import java.lang.reflect.Method; <nl> - import org.springframework.core.LocalVariableTableParameterNameDiscoverer; <nl> - import org.springframework.core.ParameterNameDiscoverer; <nl> - import org.springframework.expression.spel.standard.StandardEvaluationContext; <nl> 
mmm AlwaysTestAfterTimeInMillisCaptchaChannelProcessorTests.java <nl> ppp AlwaysTestAfterTimeInMillisCaptchaChannelProcessorTests.java <nl> - .getThresold()) { <nl> + .getThreshold()) { <nl> mmm AlwaysTestAfterMaxRequestsCaptchaChannelProcessor.java <nl> ppp AlwaysTestAfterMaxRequestsCaptchaChannelProcessor.java <nl> 
mmm AuthenticationCancelledException.java <nl> ppp AuthenticationCancelledException.java <nl> - * @version $Id:$ <nl> + * @version $Id$ <nl> 
mmm OAuth2IntrospectionAuthenticationProviderTests.java <nl> ppp OAuth2IntrospectionAuthenticationProviderTests.java <nl> - import org.springframework.security.oauth2.server.resource.introspection.OAuth2TokenIntrospectionClient; <nl> + import org.springframework.security.oauth2.server.resource.introspection.OpaqueTokenIntrospector; <nl> 
new file <nl> ppp ConfigurationTest.java <nl> + package org.janusgraph.hadoop; <nl> + import org.apache.hadoop.conf.Configuration; <nl> + import org.janusgraph.diskstorage.configuration.ConfigElement; <nl> + import org.janusgraph.hadoop.config.JanusGraphHadoopConfiguration; <nl> + import org.janusgraph.hadoop.config.ModifiableHadoopConfiguration; <nl> 
mmm RestElasticSearchClient.java <nl> ppp RestElasticSearchClient.java <nl> - import com.google.common.base.Strings; <nl> - import org.apache.commons.io.IOUtils; <nl> + import org.elasticsearch.client.Request; <nl> - import java.util.Collections; <nl> + private static final String REQUEST_TYPE_HEAD = "HEAD"; <nl> 
mmm StoreFeatures.java <nl> ppp StoreFeatures.java <nl> - public boolean supportsPersistence(); <nl> 
mmm JanusGraphFactory.java <nl> ppp JanusGraphFactory.java <nl> + import org.janusgraph.graphdb.configuration.builder.GraphDatabaseConfigurationBuilder; <nl> - return (JanusGraph) jgm.openGraph(graphName, gName -> new StandardJanusGraph(new GraphDatabaseConfiguration(configuration))); <nl> + return (JanusGraph) jgm.openGraph(graphName, gName -> new StandardJanusGraph(new GraphDatabaseConfigurationBuilder().build(configuration))); <nl> 
mmm SaslAndHMACAuthenticatorTest.java <nl> ppp SaslAndHMACAuthenticatorTest.java <nl> - import static org.apache.tinkerpop.gremlin.groovy.jsr223.dsl.credential.CredentialGraphTokens.PROPERTY_USERNAME; <nl> - import static org.apache.tinkerpop.gremlin.server.auth.SimpleAuthenticator.CONFIG_CREDENTIALS_DB; <nl> 
new file <nl> ppp InfinispanCacheAdapterTest.java <nl> + package com.thinkaurelius.titan.diskstorage.infinispan; <nl> + import com.thinkaurelius.titan.InfinispanStorageSetup; <nl> + import com.thinkaurelius.titan.diskstorage.KeyColumnValueStoreTest; <nl> + import com.thinkaurelius.titan.diskstorage.StorageException; <nl> 
mmm HadoopGraph.java <nl> ppp HadoopGraph.java <nl> + import com.thinkaurelius.titan.diskstorage.configuration.ConfigElement; <nl> + import com.thinkaurelius.titan.hadoop.config.HybridConfigured; <nl> + import com.thinkaurelius.titan.hadoop.config.TitanHadoopConfiguration; <nl> - public class HadoopGraph implements Configurable { <nl> 
mmm DisableDefaultSchemaMaker.java <nl> ppp DisableDefaultSchemaMaker.java <nl> + @Override <nl> + public Cardinality defaultPropertyCardinality(String key) { <nl> + return Cardinality.SINGLE; <nl> + } <nl> mmm TitanFeatures.java <nl> ppp TitanFeatures.java <nl> + import com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx; <nl> 
mmm JanusGraphPredicate.java <nl> ppp JanusGraphPredicate.java <nl> + import org.janusgraph.graphdb.predicate.AndJanusPredicate; <nl> + import org.janusgraph.graphdb.predicate.ConnectiveJanusGraphP; <nl> + import org.janusgraph.graphdb.predicate.ConnectiveJanusPredicate; <nl> + import org.janusgraph.graphdb.predicate.OrJanusPredicate; <nl> 
new file <nl> ppp LimitAdjustingIterator.java <nl> + package com.thinkaurelius.titan.graphdb.query; <nl> + import com.google.common.base.Preconditions; <nl> + import java.util.Iterator; <nl> + import java.util.NoSuchElementException; <nl> + public abstract class LimitAdjustingIterator<R> implements Iterator<R> { <nl> 
mmm StandardTitanGraph.java <nl> ppp StandardTitanGraph.java <nl> - import com.thinkaurelius.titan.core.TitanEdge; <nl> - public TitanTransaction startTransaction() { <nl> + public TitanTransaction newTransaction() { <nl> - if (!titanType.isFunctional()) { <nl> + if (!titanType.isFunctional() || dirID==3) { <nl> 
mmm LockConfig.java <nl> ppp LockConfig.java <nl> + 	 <nl> + 	 <nl> + 	 <nl> + 	 <nl> + 	 <nl> + 	 <nl> mmm KeyColumn.java <nl> ppp KeyColumn.java <nl> - class KeyColumn { <nl> + public class KeyColumn { <nl> mmm LocalLockMediators.java <nl> ppp LocalLockMediators.java <nl> - 	private static final Logger log = LoggerFactory <nl> 
mmm InternalType.java <nl> ppp InternalType.java <nl> - public long[] getPrimaryKey(); <nl> + public long[] getSortKey(); <nl> mmm Schema.java <nl> ppp Schema.java <nl> - import com.tinkerpop.blueprints.Direction; <nl> - public final String getPrimaryKeyForLabel(String l) { <nl> + public final String getSortKeyForLabel(String l) { <nl> 
mmm TitanGraphStepStrategy.java <nl> ppp TitanGraphStepStrategy.java <nl> + import com.tinkerpop.gremlin.process.graph.marker.HasContainerHolder; <nl> - if (currentStep instanceof HasStep) { <nl> - titanGraphStep.hasContainers.addAll(((HasStep) currentStep).getHasContainers()); <nl> - TraversalHelper.removeStep(currentStep, traversal); <nl> 
new file <nl> ppp ExpectedValueCheckingTest.java <nl> + package com.thinkaurelius.titan.diskstorage; <nl> + import static org.easymock.EasyMock.capture; <nl> + import static org.easymock.EasyMock.expect; <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.junit.Assert.assertTrue; <nl> 
mmm ExternalHBaseLockKeyColumnValueStoreTest.java <nl> ppp ExternalHBaseLockKeyColumnValueStoreTest.java <nl> - import java.io.IOException; <nl> - import org.junit.BeforeClass; <nl> - public class HBaseLockKeyColumnValueStoreTest extends LockKeyColumnValueStoreTest { <nl> - @BeforeClass <nl> - public static void startHBase() throws IOException { <nl> 
mmm ElasticMajorVersion.java <nl> ppp ElasticMajorVersion.java <nl> - ONE, <nl> + ONE(1), <nl> - TWO, <nl> + TWO(2), <nl> - FIVE, <nl> + FIVE(5), <nl> + SIX(6), <nl> + int value; <nl> + ElasticMajorVersion(int value) { <nl> + this.value = value; <nl> + } <nl> + public int getValue() { <nl> + return value; <nl> + } <nl> 
mmm ElasticSearchMultiTypeIndexTest.java <nl> ppp ElasticSearchMultiTypeIndexTest.java <nl> - import org.apache.commons.configuration.BaseConfiguration; <nl> - import org.janusgraph.diskstorage.configuration.BasicConfiguration; <nl> - import org.janusgraph.diskstorage.configuration.backend.CommonsConfiguration; <nl> 
mmm GraphDatabaseConfiguration.java <nl> ppp GraphDatabaseConfiguration.java <nl> - ConfigOption.Type.MASKABLE, "default" , new Predicate<String>() { <nl> + ConfigOption.Type.MASKABLE, "default", new Predicate<String>() { <nl> + public static final ConfigOption<Boolean> SCHEMA_CONSTRAINTS = new ConfigOption<>(SCHEMA_NS, "constraints", <nl> 
mmm SolrJanusGraphIndexTest.java <nl> ppp SolrJanusGraphIndexTest.java <nl> - import org.janusgraph.testutil.FlakyTest; <nl> - @Override <nl> - @FlakyTest(minSuccess = 1, invocationCount = 6) <nl> - public void testIndexReplay() throws Exception { <nl> - super.testIndexReplay(); <nl> - } <nl> mmm LogTest.java <nl> 
mmm RadialPickerLayout.java <nl> ppp RadialPickerLayout.java <nl> + import com.wdullaer.materialdatetimepicker.Utils; <nl> - mGrayBox.setBackgroundColor(getResources().getColor(R.color.mdtp_transparent_black)); <nl> + mGrayBox.setBackgroundColor(Utils.getColor(context, R.color.mdtp_transparent_black)); <nl> 
mmm Elements.java <nl> ppp Elements.java <nl> + import com.google.inject.internal.MoreTypes; <nl> + private final boolean skipScanning; <nl> - private ModuleInfo(Binder binder, ModuleSource moduleSource) { <nl> + private ModuleInfo(Binder binder, ModuleSource moduleSource, boolean skipScanning) { <nl> + this.skipScanning = skipScanning; <nl> 
mmm SingletonScope.java <nl> ppp SingletonScope.java <nl> mmm ManagedServletPipeline.java <nl> ppp ManagedServletPipeline.java <nl> mmm InjectorImpl.java <nl> ppp InjectorImpl.java <nl> mmm GuiceServletContextListener.java <nl> ppp GuiceServletContextListener.java <nl> mmm BoundFieldModule.java <nl> ppp BoundFieldModule.java <nl> 
mmm ConfigDelayedMergeObject.java <nl> ppp ConfigDelayedMergeObject.java <nl> + import com.typesafe.config.ConfigRenderOptions; <nl> - protected void render(StringBuilder sb, int indent, String atKey, boolean formatted) { <nl> - ConfigDelayedMerge.render(stack, sb, indent, atKey, formatted); <nl> + protected void render(StringBuilder sb, int indent, String atKey, ConfigRenderOptions options) { <nl> 
mmm ConfigDouble.java <nl> ppp ConfigDouble.java <nl> + @Override <nl> + String transformToString() { <nl> + return Double.toString(value); <nl> + } <nl> mmm ConfigBoolean.java <nl> ppp ConfigBoolean.java <nl> + @Override <nl> + String transformToString() { <nl> + return value ? "true" : "false"; <nl> + } <nl> mmm ConfigString.java <nl> 
mmm ConfigValue.java <nl> ppp ConfigValue.java <nl> + * @return a plain Java value corresponding to this ConfigValue <nl> mmm ConfigIncluder.java <nl> ppp ConfigIncluder.java <nl> - * @param fallback <nl> + * @param fallback the previous includer for chaining <nl> mmm Config.java <nl> ppp Config.java <nl> mmm ConfigException.java <nl> 
mmm SimpleConfigDocument.java <nl> ppp SimpleConfigDocument.java <nl> - import com.typesafe.config.ConfigException; <nl> mmm SimpleConfig.java <nl> ppp SimpleConfig.java <nl> - static private AbstractConfigValue find(AbstractConfigObject self, Path path, <nl> - ConfigValueType expected, Path originalPath) { <nl> 
mmm ExpressionInfoConverter.java <nl> ppp ExpressionInfoConverter.java <nl> - public void visitRegexExpression(RegexExpression expr) { <nl> - } <nl> mmm ConditionRewriter.java <nl> ppp ConditionRewriter.java <nl> - public void visitRegexExpression(RegexExpression expr) { <nl> - } <nl> new file <nl> ppp IgnoreIfExtension.java <nl> 
mmm SpockReleaseInfo.java <nl> ppp SpockReleaseInfo.java <nl> - private static final VersionNumber spockVersion = VersionNumber.parse("0.6-groovy-1.7"); <nl> - private static final VersionNumber minGroovyVersion = VersionNumber.parse("1.7.0"); <nl> - private static final VersionNumber maxGroovyVersion = VersionNumber.parse("1.7.99"); <nl> 
mmm AstUtil.java <nl> ppp AstUtil.java <nl> - if (!(accessedVar instanceof FieldNode)) return false; <nl> + return ((FieldNode) accessedVar).getOwner().getName().equals(Specification.class.getName()); <nl> - return ((FieldNode) accessedVar).getOwner().getName().equals(Specification.class.getName()); <nl> 
deleted file <nl> mmm ScriptBasedUnrolledFeatureNameGenerator.java <nl> - package org.spockframework.experimental; <nl> - import java.util.HashMap; <nl> - import java.util.Map; <nl> - import java.util.regex.Matcher; <nl> - import java.util.regex.Pattern; <nl> - import org.codehaus.groovy.control.CompilationFailedException; <nl> 
mmm AstUtil.java <nl> ppp AstUtil.java <nl> - return ((FieldNode) accessedVar).getOwner().getName().equals(Specification.class.getName()); <nl> + if (!(accessedVar instanceof FieldNode)) return false; <nl> - return true; <nl> - return false; <nl> + return ((FieldNode) accessedVar).getOwner().getName().equals(Specification.class.getName()); <nl> 
mmm GroovyReleaseInfo.java <nl> ppp GroovyReleaseInfo.java <nl> - import org.codehaus.groovy.runtime.InvokerHelper; <nl> + import org.codehaus.groovy.util.ReleaseInfo; <nl> - return VersionNumber.parse(InvokerHelper.getVersion()); <nl> + return VersionNumber.parse(ReleaseInfo.getVersion()); <nl> mmm UnrollExtension.java <nl> 
mmm AstUtil.java <nl> ppp AstUtil.java <nl> - return ((FieldNode) accessedVar).getOwner().getName().equals(Specification.class.getName()); <nl> + if (!(accessedVar instanceof FieldNode)) return false; <nl> - return true; <nl> - return false; <nl> + return ((FieldNode) accessedVar).getOwner().getName().equals(Specification.class.getName()); <nl> 
mmm Method.java <nl> ppp Method.java <nl> mmm WhenBlock.java <nl> ppp WhenBlock.java <nl> mmm ThenBlock.java <nl> ppp ThenBlock.java <nl> mmm FixtureMethod.java <nl> ppp FixtureMethod.java <nl> mmm FeatureMethod.java <nl> ppp FeatureMethod.java <nl> mmm ISpeckVisitor.java <nl> ppp ISpeckVisitor.java <nl> mmm Block.java <nl> 
mmm AstInspector.java <nl> ppp AstInspector.java <nl> - public void load(InputStream sourceStream) throws CompilationFailedException { <nl> - reset(); <nl> - try { <nl> - classLoader.parseClass(sourceStream); <nl> - } catch (AstSuccessfullyCaptured e) { <nl> - indexAstNodes(); <nl> - return; <nl> - } <nl> - throw new AstInspectorException("internal error"); <nl> 
mmm Unroll.java <nl> ppp Unroll.java <nl> + import groovy.lang.Closure; <nl> - public class ScriptBasedUnrolledFeatureNameGenerator { <nl> - private static final Pattern PLACE_HOLDER = Pattern.compile("(.?)#"); <nl> - private final FeatureInfo feature; <nl> - private final Unroll unroll; <nl> - private final Script nameGenerator; <nl> 
deleted file <nl> mmm ClosureBasedUnrolledFeatureNameGenerator.java <nl> - package org.spockframework.experimental; <nl> - import java.util.regex.Matcher; <nl> - import java.util.regex.Pattern; <nl> - import groovy.lang.*; <nl> - import org.spockframework.runtime.model.FeatureInfo; <nl> - import org.spockframework.util.GroovyRuntimeUtil; <nl> 
mmm ConditionRewriter.java <nl> ppp ConditionRewriter.java <nl> + public void visitRegexExpression(RegexExpression expr) { <nl> + } <nl> - (List) convertAll(expr.getMapEntryExpressions())) : <nl> + convertAll(expr.getMapEntryExpressions())) : <nl> - (List) convertAll(expr.getMapEntryExpressions())); <nl> + convertAll(expr.getMapEntryExpressions())); <nl> 
mmm DefaultMapperReference.java <nl> ppp DefaultMapperReference.java <nl> - import java.beans.Introspector; <nl> - import org.mapstruct.ap.util.Strings; <nl> - private final Type type; <nl> + private Type type; <nl> - public String getVariableName() { <nl> - return Strings.getSaveVariableName( Introspector.decapitalize( type.getName() ) ); <nl> 
mmm ConversionTest.java <nl> ppp ConversionTest.java <nl> - assertThat( target.getFoo() ).isEqualTo( Long.valueOf( 43 ) ); <nl> + assertThat( target.getFoo() ).isEqualTo( Long.valueOf( 42 ) ); <nl> - assertThat( target.getFoo() ).isEqualTo( Long.valueOf( 1 ) ); <nl> + assertThat( target.getFoo() ).isEqualTo( Long.valueOf( 0 ) ); <nl> 
mmm ServletApplicationFactory.java <nl> ppp ServletApplicationFactory.java <nl> - 		if (!StringUtils.isEmpty(baseUrl)) { <nl> + 		if (StringUtils.hasText(baseUrl)) { <nl> - 		return management.getServlet().getContextPath(); <nl> + 		return management.getBasePath(); <nl> mmm KubernetesServiceInstanceConverter.java <nl> 
mmm SimpleApplicationStore.java <nl> ppp SimpleApplicationStore.java <nl> + import java.util.concurrent.ConcurrentMap; <nl> - 	private final ConcurrentHashMap<String, Application> map = new ConcurrentHashMap<>(); <nl> + 	private final ConcurrentMap<String, Application> map = new ConcurrentHashMap<>(); <nl> 
mmm CompositeNotifier.java <nl> ppp CompositeNotifier.java <nl> + import org.slf4j.Logger; <nl> + import org.slf4j.LoggerFactory; <nl> + private static final Logger log = LoggerFactory.getLogger(CompositeNotifier.class); <nl> - return Flux.fromIterable(delegates).flatMap(d -> d.notify(event)).then(); <nl> 
mmm ProbeEndpointsStrategyTest.java <nl> ppp ProbeEndpointsStrategyTest.java <nl> - import org.junit.ClassRule; <nl> + import java.time.Duration; <nl> + import org.junit.AfterClass; <nl> + import org.junit.BeforeClass; <nl> - import com.github.tomakehurst.wiremock.junit.WireMockClassRule; <nl> + import com.github.tomakehurst.wiremock.junit.WireMockRule; <nl> 
mmm Endpoint.java <nl> ppp Endpoint.java <nl> + public static final String ACTUATOR_INDEX = "actuator-index"; <nl> mmm InstanceExchangeFilterFunctionsTest.java <nl> ppp InstanceExchangeFilterFunctionsTest.java <nl> + import java.util.concurrent.atomic.AtomicLong; <nl> + import org.springframework.web.reactive.function.client.ExchangeFunction; <nl> 
mmm ListActivity.java <nl> ppp ListActivity.java <nl> - import android.view.MenuItem; <nl> - @Override <nl> - public boolean onOptionsItemSelected(MenuItem item) { <nl> - if (item.getItemId() == android.R.id.home) { <nl> - finish(); <nl> - } <nl> - return super.onOptionsItemSelected(item); <nl> - } <nl> mmm BaseIjkVideoView.java <nl> 
mmm DnsResolve.java <nl> ppp DnsResolve.java <nl> - public class DnsResolve extends NetModel { <nl> + public class DnsResolve extends AbsNet { <nl> - ArrayList<String> iPs = new ArrayList<String>(); <nl> + ArrayList<String> iPs = new ArrayList<>(); <nl> - iPs.add(String.format("%d.%d.%d.%d", address[0], address[1], address[2], address[3])); <nl> 
mmm GeniusButton.java <nl> ppp GeniusButton.java <nl> - import net.qiujuer.genius.widget.attribute.ButtonAttributes; <nl> + import net.qiujuer.genius.widget.attribute.ButtonAttributes; <nl> - package net.qiujuer.genius.drawable; <nl> - import android.content.res.ColorStateList; <nl> - import android.graphics.Canvas; <nl> 
mmm GriddingLayout.java <nl> ppp GriddingLayout.java <nl> - private final int LINE_SPACE = dip2px(5); <nl> - private final int SCREEN_WIDTH = getScreenWidth(); <nl> - private final int SCREEN_HEIGHT = getScreenHeight(); <nl> + private final int lineSpace = dip2px(5); <nl> + private final int screenWidth = getScreenWidth(); <nl> 
mmm OrderDetail.java <nl> ppp OrderDetail.java <nl> + import io.swagger.annotations.ApiModel; <nl> + @ApiModel <nl> mmm OrderController.java <nl> ppp OrderController.java <nl> + import io.swagger.annotations.Api; <nl> + import io.swagger.annotations.ApiImplicitParam; <nl> + import io.swagger.annotations.ApiImplicitParams; <nl> 
mmm OrderQueryService.java <nl> ppp OrderQueryService.java <nl> - OrderItemResponse orderItem(OrderItemRequest request); <nl> deleted file <nl> mmm CommentRetCode.java <nl> - package com.gpmall.comment.constant; <nl> - public enum CommentRetCode { <nl> - SUCCESS("000000", "成功"), <nl> - REQUISITE_PARAMETER_NOT_EXIST("006001", "必要的参数不能为空"), <nl> 
deleted file <nl> mmm IEnum.java <nl> - package com.gpmall.pay.biz.payment.constants; <nl> - public interface IEnum { <nl> - String getCode(); <nl> - String getDesc(); <nl> - } <nl> mmm PaymentRequest.java <nl> - import com.gpmall.pay.biz.payment.validator.validatorextend.PayChannel; <nl> - import javax.validation.constraints.Min; <nl> 
deleted file <nl> mmm TestBlockWorkerClient.java <nl> - package alluxio.client.block.stream; <nl> - import alluxio.client.block.BlockWorkerClient; <nl> - import alluxio.retry.RetryPolicy; <nl> - import alluxio.wire.WorkerNetAddress; <nl> - public class TestBlockWorkerClient implements BlockWorkerClient { <nl> 
mmm AbstractFileSystem.java <nl> ppp AbstractFileSystem.java <nl> - * @param replication under filesystem replication factor <nl> + * @param replication under filesystem replication factor, this is ignored <nl> - BLOCK_REPLICATION_CONSTANT, fileStatus.getBlockSizeBytes(), <nl> + getReplica(fileStatus), fileStatus.getBlockSizeBytes(), <nl> 
mmm TieredIdentity.java <nl> ppp TieredIdentity.java <nl> + import alluxio.Constants; <nl> + import alluxio.util.network.NetworkAddressUtils; <nl> - import com.google.common.base.Joiner; <nl> + import java.net.UnknownHostException; <nl> - if (tier.mTierName.equals(otherTier.mTierName) <nl> - && tier.mValue != null <nl> 
mmm LockedInodePath.java <nl> ppp LockedInodePath.java <nl> - if (!fullPathExists()) { <nl> + Inode<?> inode = getInodeOrNull(); <nl> + if (inode == null) { <nl> + return inode; <nl> + } <nl> + public synchronized Inode<?> getInodeOrNull() { <nl> + if (!fullPathExists()) { <nl> + return null; <nl> + } <nl> - public synchronized  InodeDirectory getParentInodeDirectory() <nl> 
mmm LeaderCommandTest.java <nl> ppp LeaderCommandTest.java <nl> - public final class LeaderCommandIntegrationTest extends AbstractAlluxioShellTest { <nl> + public final class LeaderCommandTest extends AbstractAlluxioShellTest { <nl> mmm GCSUnderFileSystemFactory.java <nl> ppp GCSUnderFileSystemFactory.java <nl> 
mmm NetworkAddressUtils.java <nl> ppp NetworkAddressUtils.java <nl> + public static String getClientHostName() { <nl> + if (Configuration.containsKey(PropertyKey.USER_HOSTNAME)) { <nl> + return Configuration.get(PropertyKey.USER_HOSTNAME); <nl> + } <nl> + return getLocalHostName(); <nl> + } <nl> mmm PropertyKey.java <nl> 
mmm PathUtilsTest.java <nl> ppp PathUtilsTest.java <nl> - import java.util.LinkedList; <nl> + import java.util.ArrayList; <nl> - List<FutureTask<Void>> tasks = new LinkedList<>(); <nl> + List<FutureTask<Void>> tasks = new ArrayList<>(); <nl> mmm DefaultBlockStoreMeta.java <nl> ppp DefaultBlockStoreMeta.java <nl> 
mmm HdfsValidationTask.java <nl> ppp HdfsValidationTask.java <nl> - public boolean validate(Map<String, String> optionsMap) { <nl> + public TaskResult validate(Map<String, String> optionsMap) { <nl> + if (shouldSkip()) { <nl> + return TaskResult.SKIPPED; <nl> + } <nl> - return false; <nl> + return TaskResult.FAILED; <nl> 
mmm AbstractFileSystem.java <nl> ppp AbstractFileSystem.java <nl> - Preconditions.checkArgument(uri.getScheme().equals(getScheme()), <nl> - PreconditionMessage.URI_SCHEME_MISMATCH.toString(), uri.getScheme(), getScheme()); <nl> mmm FileInStream.java <nl> ppp FileInStream.java <nl> + import java.util.List; <nl> 
new file <nl> ppp AsyncJournalWriter.java <nl> + package alluxio.master.journalv0; <nl> + import alluxio.Configuration; <nl> + import alluxio.PropertyKey; <nl> + import alluxio.proto.journal.Journal.JournalEntry; <nl> + import com.google.common.base.Preconditions; <nl> + import java.io.IOException; <nl> + import java.util.concurrent.ConcurrentLinkedQueue; <nl> 
mmm DataServerBlockReadHandlerTest.java <nl> ppp DataServerBlockReadHandlerTest.java <nl> - .setType(Protocol.RequestType.ALLUXIO_BLOCK).setPacketSize(PACKET_SIZE).build(); <nl> + .setType(Protocol.RequestType.ALLUXIO_BLOCK).build(); <nl> mmm PacketInStream.java <nl> ppp PacketInStream.java <nl> - import alluxio.Configuration; <nl> 
mmm MasterClientAuthenticationIntegrationTest.java <nl> ppp MasterClientAuthenticationIntegrationTest.java <nl> + import java.net.URLClassLoader; <nl> - public static PacketInStream createLocalPacketInStream(FileSystemContext context, <nl> - WorkerNetAddress address, long blockId, long sessionId, long length, <nl> 
mmm InStreamOptions.java <nl> ppp InStreamOptions.java <nl> - boolean readFromUfs = mStatus.isPersisted(); <nl> - if (!readFromUfs) { <nl> - return Protocol.OpenUfsBlockOptions.getDefaultInstance(); <nl> - } <nl> - Protocol.OpenUfsBlockOptions openUfsBlockOptions = <nl> - Protocol.OpenUfsBlockOptions.newBuilder().setUfsPath(mStatus.getUfsPath()) <nl> 
mmm FileSystemMasterClientRestApiTest.java <nl> ppp FileSystemMasterClientRestApiTest.java <nl> - mFileSystemMaster = <nl> - mResource.get().getMaster().getInternalMaster().getMaster(FileSystemMaster.class); <nl> + mFileSystemMaster = mResource.get().getMaster().getInternalMaster().getFileSystemMaster(); <nl> 
mmm TestBlockOutStream.java <nl> ppp TestBlockOutStream.java <nl> mmm FileOutStream.java <nl> ppp FileOutStream.java <nl> + import alluxio.client.file.options.CancelUfsFileOptions; <nl> + import alluxio.client.file.options.CompleteUfsFileOptions; <nl> + import alluxio.client.file.options.CreateUfsFileOptions; <nl> 
mmm FileSystemContext.java <nl> ppp FileSystemContext.java <nl> - return new FileSystemWorkerClient(mFileSystemWorkerClientPools.get(rpcAddress), <nl> + return new RetryHandlingFileSystemWorkerClient(mFileSystemWorkerClientPools.get(rpcAddress), <nl> mmm PropertyKey.java <nl> ppp PropertyKey.java <nl> - MASTER_CONNECTION_TIMEOUT_MS(Name.MASTER_CONNECTION_TIMEOUT_MS, 0), <nl> 
deleted file <nl> mmm PropertyKeyFormat.java <nl> - package alluxio; <nl> - import javax.annotation.concurrent.ThreadSafe; <nl> - @ThreadSafe <nl> - public enum PropertyKeyFormat { <nl> - MASTER_TIERED_STORE_GLOBAL_LEVEL_ALIAS_FORMAT("alluxio.master.tieredstore.global.level%d.alias"), <nl> - WORKER_TIERED_STORE_LEVEL_ALIAS_FORMAT("alluxio.worker.tieredstore.level%d.alias"), <nl> 
mmm BlockWorkerTest.java <nl> ppp BlockWorkerTest.java <nl> - when(mBlockStore.createBlockMeta(sessionId, blockId, location, initialBytes)) <nl> + when(mBlockStore.createBlock(sessionId, blockId, location, initialBytes)) <nl> - when(mBlockStore.createBlockMeta(sessionId, blockId, location, initialBytes)) <nl> 
mmm FileInStreamTest.java <nl> ppp FileInStreamTest.java <nl> - @Test <nl> - public void seekToBeginningAfterReadingWholeBlock() throws IOException { <nl> - int blockSize = (int) BLOCK_LENGTH; <nl> - byte[] block = new byte[blockSize]; <nl> - mTestStream.read(block); <nl> - Assert.assertArrayEquals(BufferUtils.getIncreasingByteArray(0, blockSize), block); <nl> 
deleted file <nl> mmm S3InputStream.java <nl> - package alluxio.underfs.s3; <nl> - import org.jets3t.service.S3Service; <nl> - import org.jets3t.service.ServiceException; <nl> - import org.jets3t.service.model.S3Object; <nl> - import java.io.BufferedInputStream; <nl> - import java.io.IOException; <nl> - import java.io.InputStream; <nl> 
mmm DefaultMetaStore.java <nl> ppp DefaultMetaStore.java <nl> + import java.util.concurrent.atomic.AtomicLong; <nl> + private final AtomicLong mBytes = new AtomicLong(0); <nl> + private final AtomicLong mPages = new AtomicLong(0); <nl> + mBytes.addAndGet(pageInfo.getPageSize()); <nl> + mPages.incrementAndGet(); <nl> 
mmm StatCommandIntegrationTest.java <nl> ppp StatCommandIntegrationTest.java <nl> - import static org.junit.Assert.assertEquals; <nl> - import static org.junit.Assert.assertTrue; <nl> - import static org.junit.Assert.assertFalse; <nl> + import org.junit.Assert; <nl> - assertEquals(ExceptionMessage.PATH_DOES_NOT_EXIST.getMessage("/NotExistFile") + "\n", <nl> 
mmm Process.java <nl> ppp Process.java <nl> - mSecondaryMaster = new AlluxioSecondaryMasterProcess(); <nl> + mSecondaryMaster = new AlluxioSecondaryMaster(); <nl> mmm AlluxioProxyProcess.java <nl> ppp AlluxioProxyProcess.java <nl> + import java.util.concurrent.locks.Condition; <nl> + import java.util.concurrent.locks.Lock; <nl> 
mmm PropertyKeyTest.java <nl> ppp PropertyKeyTest.java <nl> - assertTrue(PropertyKey.isDeprecated("MASTER_ADDRESS")); <nl> deleted file <nl> mmm BlockWriteHandler.java <nl> - package alluxio.worker.netty; <nl> - import alluxio.Configuration; <nl> - import alluxio.PropertyKey; <nl> - import alluxio.StorageTierAssoc; <nl> 
mmm FileSystemAclIntegrationTest.java <nl> ppp FileSystemAclIntegrationTest.java <nl> - mThrown.expectMessage("Could not setOwner for UFS file"); <nl> + mThrown.expectMessage("Could not update owner"); <nl> mmm AbstractIOMapper.java <nl> ppp AbstractIOMapper.java <nl> - import javax.annotation.Nullable; <nl> 
mmm BlockLocation.java <nl> ppp BlockLocation.java <nl> - Preconditions.checkNotNull(tierAlias); <nl> + Preconditions.checkNotNull(tierAlias, "tierAlias"); <nl> mmm ValidateEnv.java <nl> ppp ValidateEnv.java <nl> + import alluxio.cli.validation.SecureHdfsValidationTask; <nl> + import alluxio.exception.status.InvalidArgumentException; <nl> 
deleted file <nl> mmm DataServerUfsFileWriteHandler.java <nl> - package alluxio.worker.netty; <nl> - import alluxio.metrics.MetricsSystem; <nl> - import alluxio.network.protocol.RPCProtoMessage; <nl> - import alluxio.proto.dataserver.Protocol; <nl> - import alluxio.security.authorization.Mode; <nl> - import alluxio.underfs.UfsManager; <nl> 
mmm Constants.java <nl> ppp Constants.java <nl> + public static final String DELETE_IN_ALLUXIO_ONLY = "ALLUXIO_ONLY"; <nl> + public static final String DELETE_IN_ALLUXIO_AND_UFS = "ALLUXIO_AND_UFS"; <nl> mmm TestCase.java <nl> ppp TestCase.java <nl> + import alluxio.exception.status.InvalidArgumentException; <nl> 
mmm FileInStream.java <nl> ppp FileInStream.java <nl> - import java.util.List; <nl> - private static final long UNINITIALIZED_BLOCK_ID = -1; <nl> - private static final long UNINITIALIZED_BLOCK_POS = -1; <nl> - private static final int EOF_DATA = -1; <nl> + protected final long mFileLength; <nl> + protected long mPos; <nl> 
deleted file <nl> mmm UfsInputStreamManager.java <nl> - package alluxio.worker.block; <nl> - import alluxio.Configuration; <nl> - import alluxio.PropertyKey; <nl> - import alluxio.underfs.SeekableUnderFileInputStream; <nl> - import alluxio.underfs.UnderFileSystem; <nl> - import alluxio.underfs.options.OpenOptions; <nl> 
mmm AlluxioMasterRestApiTest.java <nl> ppp AlluxioMasterRestApiTest.java <nl> - import alluxio.util.UnderFileSystemUtils; <nl> + import alluxio.underfs.UnderFileSystemTestUtils; <nl> - if (UnderFileSystemUtils.isObjectStorage(mFileSystemMaster.getUfsAddress())) { <nl> + if (UnderFileSystemTestUtils.isObjectStorage(mFileSystemMaster.getUfsAddress())) { <nl> 
mmm SpecificHostPolicy.java <nl> ppp SpecificHostPolicy.java <nl> mmm RemoteBlockInStream.java <nl> ppp RemoteBlockInStream.java <nl> mmm LockBlockResult.java <nl> ppp LockBlockResult.java <nl> + public boolean blockCachedInAlluxio() { <nl> + return getLockId() >= 0; <nl> + } <nl> - public static boolean isBlockCachedInAlluxio(LockBlockResult result) { <nl> 
mmm PreconditionMessage.java <nl> ppp PreconditionMessage.java <nl> + URI_SCHEME_MISMATCH("URI scheme %s does not match the expected scheme %s"), <nl> mmm CommandUtils.java <nl> ppp CommandUtils.java <nl> - import com.google.common.base.Throwables; <nl> - throw Throwables.propagate(e); <nl> + throw new RuntimeException(e); <nl> 
new file <nl> ppp BlockInStream.java <nl> + package alluxio.client.block.stream; <nl> + import alluxio.Seekable; <nl> + import alluxio.client.BoundedStream; <nl> + import alluxio.client.Locatable; <nl> + import alluxio.client.PositionedReadable; <nl> + import alluxio.client.block.AlluxioBlockStore; <nl> + import alluxio.client.block.BlockWorkerClient; <nl> 
mmm Sessions.java <nl> ppp Sessions.java <nl> - int sessionTimeoutMs = Configuration.getInt(PropertyKey.WORKER_SESSION_TIMEOUT_MS); <nl> + int sessionTimeoutMs = (int) Configuration.getMs(PropertyKey.WORKER_SESSION_TIMEOUT_MS); <nl> mmm FileOutStreamIntegrationTest.java <nl> ppp FileOutStreamIntegrationTest.java <nl> 
deleted file <nl> mmm AsyncUserAccessAuditLogWriter.java <nl> - package alluxio.master.audit; <nl> - import alluxio.Configuration; <nl> - import alluxio.PropertyKey; <nl> - import org.slf4j.Logger; <nl> - import org.slf4j.LoggerFactory; <nl> - import java.util.concurrent.ArrayBlockingQueue; <nl> - import java.util.concurrent.TimeUnit; <nl> 
mmm InodeLockList.java <nl> ppp InodeLockList.java <nl> - void downgradeLastInode(); <nl> + void downgradeToReadLocks(); <nl> - void downgradeEdgeToInode(Inode inode, LockMode mode); <nl> - public LockResource get(K key, LockMode mode, boolean useTryLock) { <nl> + public RWLockResource get(K key, LockMode mode, boolean useTryLock) { <nl> 
mmm InodeTree.java <nl> ppp InodeTree.java <nl> - if (extensibleInodePath.getLockMode() == LockMode.READ) { <nl> - lockList.downgradeLast(); <nl> - } <nl> deleted file <nl> mmm AlluxioRemoteLogFilter.java <nl> - package alluxio; <nl> - import org.apache.log4j.MDC; <nl> - import org.apache.log4j.spi.Filter; <nl> 
deleted file <nl> mmm UserAccessAuditLog.java <nl> - package alluxio.master.audit; <nl> - import java.util.concurrent.ConcurrentLinkedQueue; <nl> - public class UserAccessAuditLog { <nl> - private static ConcurrentLinkedQueue<AuditLogEntry> sAuditLogEntries = new ConcurrentLinkedQueue<AuditLogEntry>(); <nl> 
mmm NetworkAddressUtils.java <nl> ppp NetworkAddressUtils.java <nl> + import com.google.common.base.Throwables; <nl> - throw new RuntimeException(e); <nl> + throw Throwables.propagate(e); <nl> - throw new RuntimeException(e); <nl> + throw Throwables.propagate(e); <nl> - throw new RuntimeException(e); <nl> + throw Throwables.propagate(e); <nl> 
mmm AbstractCommand.java <nl> ppp AbstractCommand.java <nl> - import javax.annotation.concurrent.ThreadSafe; <nl> + import javax.annotation.concurrent.ThreadSafe; <nl> - } <nl> + } <nl> mmm CommandUtils.java <nl> ppp CommandUtils.java <nl> + import alluxio.util.CommonUtils; <nl> + import com.google.common.base.Throwables; <nl> 
new file <nl> ppp HdfsValidationTask.java <nl> + package alluxio.cli.validation; <nl> + import alluxio.Configuration; <nl> + import alluxio.PropertyKey; <nl> + import alluxio.exception.InvalidPathException; <nl> + import alluxio.util.io.PathUtils; <nl> + import org.apache.commons.cli.Option; <nl> + import java.util.ArrayList; <nl> 
mmm TransportProviderTest.java <nl> ppp TransportProviderTest.java <nl> - TTransportFactory tTransportFactory = mTransportProvider.getServerTransportFactory(); <nl> + TTransportFactory tTransportFactory = mTransportProvider.getServerTransportFactory("test"); <nl> mmm NoSaslTransportProvider.java <nl> ppp NoSaslTransportProvider.java <nl> 
mmm PreconditionMessage.java <nl> ppp PreconditionMessage.java <nl> + URI_SCHEME_MISMATCH("URI scheme %s does not match the expected scheme %s"), <nl> mmm AlluxioMasterRestServiceHandlerTest.java <nl> ppp AlluxioMasterRestServiceHandlerTest.java <nl> + import static org.mockito.Matchers.anyObject; <nl> - when(underFileSystemFactoryMock.supportsPath(anyString())).thenReturn(Boolean.FALSE); <nl> 
mmm ValidationTask.java <nl> ppp ValidationTask.java <nl> - boolean shouldSkip(); <nl> + TaskResult validate(Map<String, String> optionMap) throws InterruptedException; <nl> - boolean validate(Map<String, String> optionMap) throws InterruptedException; <nl> + enum TaskResult { <nl> + OK, <nl> + WARNING, <nl> 
mmm LoginUserRule.java <nl> ppp LoginUserRule.java <nl> - import org.junit.rules.TestRule; <nl> - import org.junit.runner.Description; <nl> - import org.junit.runners.model.Statement; <nl> + import alluxio.security.LoginUser; <nl> + import alluxio.security.LoginUserTestUtils; <nl> + import alluxio.security.User; <nl> 
mmm ServiceSocketBindIntegrationTest.java <nl> ppp ServiceSocketBindIntegrationTest.java <nl> - mMasterWebService = (HttpURLConnection) new URL( <nl> - + "/index.html").openConnection(); <nl> + + (masterWebAddr.isUnresolved() ? masterWebAddr.toString() <nl> + : masterWebAddr.getAddress().getHostAddress() + ":" + masterWebAddr.getPort()) <nl> 
mmm DataServerUfsFileWriteHandlerTest.java <nl> ppp DataServerUfsFileWriteHandlerTest.java <nl> - import com.google.common.base.Suppliers; <nl> - UfsInfo ufsInfo = new UfsInfo(Suppliers.ofInstance(mockUfs), AlluxioURI.EMPTY_URI); <nl> - Mockito.when(ufsManager.get(Mockito.anyLong())).thenReturn(ufsInfo); <nl> 
mmm FileSystemMaster.java <nl> ppp FileSystemMaster.java <nl> - import alluxio.master.MasterRegistry; <nl> - private final MasterRegistry.Value<BlockMaster> mBlockMaster; <nl> + private final BlockMaster mBlockMaster; <nl> - public FileSystemMaster(MasterRegistry registry, JournalFactory journalFactory) { <nl> 
mmm FileSystemWorkerClientServiceHandler.java <nl> ppp FileSystemWorkerClientServiceHandler.java <nl> - import alluxio.thrift.ThriftIOException; <nl> - * @throws AlluxioTException if an internal Alluxio error occurs <nl> - * @throws ThriftIOException if an error occurs outside of Alluxio <nl> + * @throws AlluxioTException if an error occurs <nl> 
mmm DataServerShortCircuitReadHandler.java <nl> ppp DataServerShortCircuitReadHandler.java <nl> + } catch (BlockDoesNotExistException e) { <nl> + LOG.debug("Block {} to promote does not exist in Alluxio: {}", <nl> + mRequest.getBlockId(), e.getMessage()); <nl> mmm ProtoMessage.java <nl> ppp ProtoMessage.java <nl> 
mmm FileBlockInfo.java <nl> ppp FileBlockInfo.java <nl> - Preconditions.checkNotNull(blockInfo); <nl> + Preconditions.checkNotNull(blockInfo, "blockInfo"); <nl> - Preconditions.checkNotNull(ufsLocations); <nl> + Preconditions.checkNotNull(ufsLocations, "ufsLocations"); <nl> mmm PacketOutStream.java <nl> ppp PacketOutStream.java <nl> 
mmm LineageMasterFactory.java <nl> ppp LineageMasterFactory.java <nl> + import alluxio.master.SafeMode; <nl> - public LineageMaster create(MasterRegistry registry, JournalSystem journalSystem) { <nl> + public LineageMaster create(MasterRegistry registry, JournalSystem journalSystem, <nl> + SafeMode safeMode) { <nl> 
mmm CheckpointPlanner.java <nl> ppp CheckpointPlanner.java <nl> -   <nl> + import com.google.common.base.Throwables; <nl> - public static final String MOUNT_COMMAND = "mount"; <nl> - public static List<UnixMountInfo> getUnixMountInfo() throws IOException { <nl> - Preconditions.checkState(OSUtils.isLinux() || OSUtils.isMacOS()); <nl> 
mmm FileWorkerMasterSyncExecutor.java <nl> ppp FileWorkerMasterSyncExecutor.java <nl> - private FileDataManager mFileDataManager; <nl> + private final FileDataManager mFileDataManager; <nl> mmm RetryHandlingFileSystemMasterClient.java <nl> ppp RetryHandlingFileSystemMasterClient.java <nl> - return retryRPC(new RpcCallable<List<AlluxioURI>>() { <nl> 
mmm ResourceExhaustedException.java <nl> ppp ResourceExhaustedException.java <nl> - private static final ExceptionStatus STATUS = ExceptionStatus.RESOURCE_EXHAUSTED; <nl> + private static final Status STATUS = Status.RESOURCE_EXHAUSTED; <nl> - private static final ExceptionStatus STATUS = ExceptionStatus.FAILED_PRECONDITION; <nl> 
mmm LiteNode.java <nl> ppp LiteNode.java <nl> - log.debug("Parsing {} blocks took {} seconds.", blockList.size(), (System.currentTimeMillis() - ts) / 1000d); <nl> + log.info("Parsing {} blocks took {} seconds.", blockList.size(), (System.currentTimeMillis() - ts) / 1000d); <nl> - log.debug("onNewBlockReceived: block at height {}, hash={}", blockHeight, block.getHash()); <nl> 
mmm PendingTradesDataModel.java <nl> ppp PendingTradesDataModel.java <nl> - tradeManager.getTradesAsObservableList().addListener(tradesListChangeListener); <nl> + tradeManager.getObservableList().addListener(tradesListChangeListener); <nl> - tradeManager.getTradesAsObservableList().removeListener(tradesListChangeListener); <nl> 
mmm P2PDataStorage.java <nl> ppp P2PDataStorage.java <nl> - broadcaster.broadcast(new AddPersistableNetworkPayloadMessage(payload), sender); <nl> + broadcaster.broadcast(new AddPersistableNetworkPayloadMessage(payload), sender, null); <nl> - broadcaster.broadcast(refreshTTLMessage, sender); <nl> + broadcaster.broadcast(refreshTTLMessage, sender, null); <nl> 
deleted file <nl> mmm Dummy.java <nl> - package bisq.monitor.metric; <nl> - import bisq.monitor.Metric; <nl> - import bisq.monitor.Reporter; <nl> - import java.util.Properties; <nl> - import lombok.extern.slf4j.Slf4j; <nl> - @Slf4j <nl> - public class Dummy extends Metric { <nl> - public Dummy(Reporter reporter) { <nl> 
mmm SepaInstantAccountPayload.java <nl> ppp SepaInstantAccountPayload.java <nl> - String email, <nl> - this.email = email; <nl> - PB.SepaAccountPayload.Builder builder = <nl> - PB.SepaAccountPayload.newBuilder() <nl> + PB.SepaInstantAccountPayload.Builder builder = <nl> + PB.SepaInstantAccountPayload.newBuilder() <nl> 
mmm AppSetupWithP2PAndDAO.java <nl> ppp AppSetupWithP2PAndDAO.java <nl> - import io.bisq.network.p2p.P2PServiceListener; <nl> - import io.bisq.network.p2p.network.CloseConnectionReason; <nl> - import io.bisq.network.p2p.network.Connection; <nl> - import io.bisq.network.p2p.network.ConnectionListener; <nl> 
mmm DepositView.java <nl> ppp DepositView.java <nl> - import io.bitsquare.gui.util.SortedList; <nl> + import javafx.collections.transformation.SortedList; <nl> mmm TransactionsView.java <nl> ppp TransactionsView.java <nl> - import io.bitsquare.gui.util.SortedList; <nl> + import javafx.collections.transformation.SortedList; <nl> 
mmm CreateOfferDataModel.java <nl> ppp CreateOfferDataModel.java <nl> + import io.bisq.common.util.MathUtils; <nl> - import io.bisq.core.offer.OfferUtil; <nl> + import io.bisq.core.util.CoinUtil; <nl> + import javax.annotation.Nullable; <nl> - resultHandler, <nl> - log::error); <nl> + resultHandler); <nl> + String getOfferId() { <nl> 
new file <nl> ppp Base64.java <nl> + package bisq.common.util; <nl> + public class Base64 { <nl> + public static byte[] decode(String base64) { <nl> + return java.util.Base64.getDecoder().decode(base64); <nl> + } <nl> + public static String encode(byte[] bytes) { <nl> + return java.util.Base64.getEncoder().encodeToString(bytes); <nl> 
mmm FormBuilder.java <nl> ppp FormBuilder.java <nl> + public static Tuple2<Label, InfoTextField> addLabelInfoTextfield(GridPane gridPane, int rowIndex, String labelText, <nl> + String fieldText) { <nl> + return addLabelInfoTextfield(gridPane, rowIndex, labelText, fieldText, 0); <nl> + } <nl> + public static Tuple2<Label, InfoTextField> addLabelInfoTextfield(GridPane gridPane, int rowIndex, String labelText, <nl> 
mmm StatisticsMain.java <nl> ppp StatisticsMain.java <nl> - import bisq.common.setup.CommonSetup; <nl> - import joptsimple.OptionSet; <nl> - CommonSetup.setup(this); <nl> mmm MainView.java <nl> ppp MainView.java <nl> - private Runnable onUiReadyHandler; <nl> + private Runnable onApplicationStartedHandler; <nl> 
new file <nl> ppp TableFormat.java <nl> + package bisq.cli; <nl> + import bisq.proto.grpc.AddressBalanceInfo; <nl> + import bisq.proto.grpc.OfferInfo; <nl> + import protobuf.PaymentAccount; <nl> + import java.text.DateFormat; <nl> + import java.util.Date; <nl> + import java.util.List; <nl> + import java.util.Locale; <nl> 
mmm Preferences.java <nl> ppp Preferences.java <nl> - case BTC_DAO_TESTNET2: <nl> + case BTC_DAO_REGTEST: <nl> - case BTC_DAO_TESTNET2: <nl> + case BTC_DAO_REGTEST: <nl> mmm BaseCurrencyNetwork.java <nl> ppp BaseCurrencyNetwork.java <nl> - public boolean isDaoTestNet() { <nl> - return "BTC_DAO_TESTNET2".equals(name()); <nl> 
mmm Param.java <nl> ppp Param.java <nl> - package bisq.core.dao.node.json; <nl> - import bisq.core.dao.DaoOptionKeys; <nl> - import bisq.core.dao.DaoSetupService; <nl> - import bisq.core.dao.state.BsqState; <nl> - import bisq.core.dao.state.BsqStateService; <nl> - import bisq.core.dao.state.blockchain.PubKeyScript; <nl> 
new file <nl> ppp AbstractLinuxProcess.java <nl> + package bisq.apitest.linux; <nl> + import java.io.File; <nl> + import java.io.IOException; <nl> + import lombok.extern.slf4j.Slf4j; <nl> + import static bisq.apitest.linux.BashCommand.isAlive; <nl> + import static java.lang.String.format; <nl> + import static joptsimple.internal.Strings.EMPTY; <nl> 
mmm VenmoForm.java <nl> ppp VenmoForm.java <nl> - public VenmoForm(PaymentAccount paymentAccount, AccountAgeWitnessService accountAgeWitnessService, VenmoValidator venmoValidator, InputValidator inputValidator, GridPane gridPane, int gridRow, BSFormatter formatter) { <nl> + public VenmoForm(PaymentAccount paymentAccount, AccountAgeWitnessService accountAgeWitnessService, VenmoValidator aliPayValidator, InputValidator inputValidator, GridPane gridPane, int gridRow, BSFormatter formatter) { <nl> 
mmm StateInConflictListItem.java <nl> ppp StateInConflictListItem.java <nl> - private final String peerAddressString; <nl> - this.peerAddress = peerAddress; <nl> - this.peerAddressString = seedNodeAddresses.stream().anyMatch(e -> e.getFullAddress().equals(peerAddress)) ? <nl> + this.peerAddress = seedNodeAddresses.stream().anyMatch(e -> e.getFullAddress().equals(peerAddress)) ? <nl> 
mmm FiatValidator.java <nl> ppp FiatValidator.java <nl> + import io.bitsquare.user.User; <nl> + import java.util.Currency; <nl> + import java.util.Locale; <nl> + import javax.inject.Inject; <nl> mmm CreateOfferPM.java <nl> ppp CreateOfferPM.java <nl> + import io.bitsquare.gui.main.trade.orderbook.OrderBookFilter; <nl> 
mmm PeerInfoIcon.java <nl> ppp PeerInfoIcon.java <nl> - protected final Pane tagPane; <nl> - protected final Pane numTradesPane; <nl> + private final Pane tagPane; <nl> + private final Pane numTradesPane; <nl> - private final double scaleFactor; <nl> - scaleFactor = getScaleFactor(); <nl> - double outerSize = 26 * scaleFactor; <nl> 
mmm MailboxStoragePayload.java <nl> ppp MailboxStoragePayload.java <nl> + * Size depends on payload but typical size is 2000-3000 bytes <nl> - return TimeUnit.DAYS.toMillis(15); <nl> + return TimeUnit.DAYS.toMillis(7); <nl> mmm InventoryItem.java <nl> ppp InventoryItem.java <nl> - new DeviationByPercentage(0.9, 1.1, 0.95, 1.05), 5), <nl> 
mmm Utilities.java <nl> ppp Utilities.java <nl> - import javax.crypto.Cipher; <nl> - import java.security.NoSuchAlgorithmException; <nl> + import java.util.Map; <nl> + import java.util.concurrent.ConcurrentHashMap; <nl> + import java.util.function.Function; <nl> + import java.util.function.Predicate; <nl> + public static boolean isCtrlShiftPressed(KeyCode keyCode, KeyEvent keyEvent) { <nl> 
mmm ArgumentParser.java <nl> ppp ArgumentParser.java <nl> - public static final String INTERFACE_HINT_FLAG = "interface"; <nl> - parser.addArgument("-i", "--" + INTERFACE_HINT_FLAG) <nl> - .help("Network interface to listen on"); <nl> deleted file <nl> mmm PeerInitialized.java <nl> - package io.bitsquare.msg.actor.event; <nl> 
mmm BuyerStep2View.java <nl> ppp BuyerStep2View.java <nl> + case PaymentMethod.POPMONEY_ID: <nl> + gridRow = PopmoneyForm.addFormForBuyer(gridPane, gridRow, paymentAccountPayload); <nl> + break; <nl> mmm FiatAccountsView.java <nl> ppp FiatAccountsView.java <nl> + private final PopmoneyValidator popmoneyValidator; <nl> 
mmm PGP.java <nl> ppp PGP.java <nl> mmm JsonSpentInfo.java <nl> ppp JsonSpentInfo.java <nl> mmm NetworkProtoResolver.java <nl> ppp NetworkProtoResolver.java <nl> mmm BsqBalanceListener.java <nl> ppp BsqBalanceListener.java <nl> mmm BsqChainState.java <nl> ppp BsqChainState.java <nl> mmm GlobalSettings.java <nl> 
mmm TestState.java <nl> ppp TestState.java <nl> - import bisq.network.p2p.peers.BroadcastHandler; <nl> - import org.junit.Assert; <nl> + import org.junit.Assert; <nl> - private void verifySequenceNumberMapWriteContains(P2PDataStorage.ByteArray payloadHash, <nl> - int sequenceNumber) { <nl> + private void verifySequenceNumberMapWriteContains(P2PDataStorage.ByteArray payloadHash, int sequenceNumber) { <nl> 
mmm P2PNetworkLoad.java <nl> ppp P2PNetworkLoad.java <nl> - import java.io.File; <nl> - import java.util.Collections; <nl> - import java.util.HashMap; <nl> - import java.util.HashSet; <nl> - import java.util.LinkedHashMap; <nl> - import java.util.List; <nl> - import java.util.Map; <nl> - import java.util.Properties; <nl> 
mmm MethodTest.java <nl> ppp MethodTest.java <nl> mmm CreateOfferUsingMarketPriceMarginTest.java <nl> ppp CreateOfferUsingMarketPriceMarginTest.java <nl> + import org.junit.jupiter.api.Disabled; <nl> + @Disabled <nl> new file <nl> ppp TradeTest.java <nl> + package bisq.apitest.scenario; <nl> + import lombok.extern.slf4j.Slf4j; <nl> 
mmm PrivateNotificationManager.java <nl> ppp PrivateNotificationManager.java <nl> - import bisq.core.app.AppOptionKeys; <nl> - @Named(AppOptionKeys.IGNORE_DEV_MSG_KEY) boolean ignoreDevMsg, <nl> + @Named(Config.IGNORE_DEV_MSG) boolean ignoreDevMsg, <nl> mmm FilterManager.java <nl> ppp FilterManager.java <nl> 
mmm GenesisTxInfo.java <nl> ppp GenesisTxInfo.java <nl> - private static final String MAINNET_GENESIS_TX_ID = "25bd4ecedcac35a0db4ce3dd83c7addeca92845fee15f89698afbf7ceeae18e0"; <nl> - private static final Coin MAINNET_GENESIS_TOTAL_SUPPLY = Coin.parseCoin("0.43838218"); <nl> + private static final String MAINNET_GENESIS_TX_ID = "81855816eca165f17f0668898faa8724a105196e90ffc4993f4cac980176674e"; <nl> 
mmm BuyerStep2View.java <nl> ppp BuyerStep2View.java <nl> + import bisq.desktop.components.paymentmethods.SepaInstantForm; <nl> + case PaymentMethod.SEPA_INSTANT_ID: <nl> + gridRow = SepaInstantForm.addFormForBuyer(gridPane, gridRow, paymentAccountPayload); <nl> + break; <nl> mmm ProposalResultsWindow.java <nl> 
mmm P2PDataStorage.java <nl> ppp P2PDataStorage.java <nl> + Log.logIfStressTests("We remove the data as the data owner got disconnected with " + <nl> + "closeConnectionReason=" + closeConnectionReason + <nl> + " / isIntended=" + closeConnectionReason.isIntended + <nl> + " / peer=" + (connection.getPeersNodeAddressOptional().isPresent() ? connection.getPeersNodeAddressOptional().get() : "PeersNode unknown")); <nl> 
mmm ProposalDashboardView.java <nl> ppp ProposalDashboardView.java <nl> - new SeparatedPhaseBars.SeparatedPhaseBarsItem(DaoPeriodService.Phase.COMPENSATION_REQUESTS, true), <nl> + new SeparatedPhaseBars.SeparatedPhaseBarsItem(DaoPeriodService.Phase.PROPOSAL, true), <nl> mmm CreateOfferDataModel.java <nl> 
mmm DisplayAlertMessageWindow.java <nl> ppp DisplayAlertMessageWindow.java <nl> - headLineLabel.getStyleClass().addAll("headline-label","info-headline-label"); <nl> + headLineLabel.getStyleClass().addAll("headline-label","highlight"); <nl> - headLineLabel.getStyleClass().addAll("headline-label", "alert-headline-label"); <nl> 
mmm BisqExecutable.java <nl> ppp BisqExecutable.java <nl> - public abstract class BisqExecutable implements GracefulShutDownHandler { <nl> + public abstract class BisqExecutable implements GracefulShutDownHandler, BisqSetup.BisqSetupCompleteListener { <nl> + bisqSetup.addBisqSetupCompleteListener(this); <nl> 
deleted file <nl> mmm XmrTransferProofService.java <nl> - package bisq.core.trade.asset.xmr; <nl> - import bisq.common.handlers.FaultHandler; <nl> - import javax.inject.Inject; <nl> - import java.util.Date; <nl> - import java.util.HashMap; <nl> - import java.util.Map; <nl> - import java.util.function.Consumer; <nl> 
mmm CliCommand.java <nl> ppp CliCommand.java <nl> - final class RpcCommand { <nl> + final class CliCommand { <nl> - private final BisqCallCredentials callCredentials; <nl> - RpcCommand(ManagedChannel channel, CommandParser parser) { <nl> - this.callCredentials = new BisqCallCredentials(parser.getApiToken()); <nl> 
mmm OpenProposalListItem.java <nl> ppp OpenProposalListItem.java <nl> - import bisq.desktop.components.AutoTooltipButton; <nl> + import de.jensd.fx.fontawesome.AwesomeDude; <nl> + import de.jensd.fx.fontawesome.AwesomeIcon; <nl> + import javafx.scene.control.Label; <nl> - import javafx.scene.image.ImageView; <nl> 
mmm FullNode.java <nl> ppp FullNode.java <nl> - import bisq.core.dao.node.parser.exceptions.BlockHashNotConnectingException; <nl> - import bisq.core.dao.node.parser.exceptions.BlockHeightNotConnectingException; <nl> - chainTipHeight = chainHeight; <nl> - if (throwable instanceof BlockHashNotConnectingException || throwable instanceof BlockHeightNotConnectingException) { <nl> 
mmm CreateOfferDataModel.java <nl> ppp CreateOfferDataModel.java <nl> - import bisq.core.trade.statistics.ReferralIdService; <nl> - public CreateOfferDataModel(OpenOfferManager openOfferManager, BtcWalletService btcWalletService, BsqWalletService bsqWalletService, Preferences preferences, User user, KeyRing keyRing, P2PService p2PService, PriceFeedService priceFeedService, FilterManager filterManager, AccountAgeWitnessService accountAgeWitnessService, TradeWalletService tradeWalletService, FeeService feeService, ReferralIdService referralIdService, BSFormatter formatter) { <nl> 
mmm PendingTradesViewModel.java <nl> ppp PendingTradesViewModel.java <nl> - WAIT_FOR_UNLOCK_PAYOUT, <nl> + WAIT_FOR_BROADCAST_AFTER_UNLOCK, <nl> - WAIT_FOR_UNLOCK_PAYOUT, <nl> + WAIT_FOR_BROADCAST_AFTER_UNLOCK, <nl> - buyerState.set(PendingTradesViewModel.BuyerState.WAIT_FOR_UNLOCK_PAYOUT); <nl> + buyerState.set(PendingTradesViewModel.BuyerState.WAIT_FOR_BROADCAST_AFTER_UNLOCK); <nl> 
mmm WalletConfig.java <nl> ppp WalletConfig.java <nl> - !localBitcoinNode.isUsable().get()) <nl> + !localBitcoinNode.isDetected()) <nl> mmm MainViewModel.java <nl> ppp MainViewModel.java <nl> - bisqSetup.setDisplayLocalNodeMisconfigurationHandler( <nl> - (Runnable continueWithoutLocalNode) -> <nl> - new Popup() <nl> 
mmm OfferUtil.java <nl> ppp OfferUtil.java <nl> + import bisq.core.filter.FilterManager; <nl> + import bisq.core.payment.AccountAgeWitnessService; <nl> + import bisq.core.payment.F2FAccount; <nl> + import bisq.core.payment.PaymentAccount; <nl> + import bisq.core.trade.statistics.ReferralIdService; <nl> + import bisq.network.p2p.P2PService; <nl> 
mmm TradeCurrencyMakers.java <nl> ppp TradeCurrencyMakers.java <nl> - package bisq.core.locale; <nl> + package bisq.desktop.maker; <nl> + import bisq.core.locale.CryptoCurrency; <nl> + import bisq.core.locale.FiatCurrency; <nl> + import bisq.core.locale.TradeCurrency; <nl> - public static final Instantiator<CryptoCurrency> CryptoCurrency = lookup -> <nl> 
mmm XmrTxProofParser.java <nl> ppp XmrTxProofParser.java <nl> - import javax.inject.Inject; <nl> - import javax.inject.Singleton; <nl> - @Singleton <nl> - public <nl> - class XmrTxProofParser implements AssetTxProofParser<XmrTxProofModel, XmrTxProofRequest.Result> { <nl> - @Inject <nl> - public XmrTxProofParser() { <nl> 
mmm BitcoinModule.java <nl> ppp BitcoinModule.java <nl> + import bisq.core.app.BisqEnvironment; <nl> - String regTestHost = environment.getProperty(BtcOptionKeys.REG_TEST_HOST, String.class, RegTestHost.DEFAULT_HOST); <nl> + String regTestHost = BisqEnvironment.getBaseCurrencyNetwork().isDaoTestNet() ? <nl> 
mmm GUIUtilTest.java <nl> ppp GUIUtilTest.java <nl> + import bisq.core.user.DontShowAgainLookup; <nl> + import bisq.core.user.Preferences; <nl> + import bisq.common.util.Utilities; <nl> + import java.net.URI; <nl> + import org.powermock.api.mockito.PowerMockito; <nl> + import org.powermock.core.classloader.annotations.PowerMockIgnore; <nl> 
mmm TakeOfferDataModel.java <nl> ppp TakeOfferDataModel.java <nl> - private final Preferences preferences; <nl> + final Preferences preferences; <nl> - () -> { <nl> - }, <nl> - errorMessage -> new Popup<>().warning(errorMessage).show()); <nl> + () -> { <nl> + }, <nl> + errorMessage -> new Popup<>().warning(errorMessage).show()); <nl> 
mmm TradeStatistics2.java <nl> ppp TradeStatistics2.java <nl> + import com.google.common.base.Charsets; <nl> - this.hash = Hash.getSha256Ripemd160hash(Utilities.objectToJson(this).getBytes()); <nl> + this.hash = Hash.getSha256Ripemd160hash(Utilities.objectToJson(this).getBytes(Charsets.UTF_8)); <nl> mmm ProvidersRepository.java <nl> 
mmm TradeDetailsWindow.java <nl> ppp TradeDetailsWindow.java <nl> + import org.bitcoinj.core.Utils; <nl> + String contractAsJson = trade.getContractAsJson(); <nl> + contractAsJson += "\n\nBuyerMultiSigPubKeyHex: " + Utils.HEX.encode(contract.getBuyerMultiSigPubKey()); <nl> + contractAsJson += "\nSellerMultiSigPubKeyHex: " + Utils.HEX.encode(contract.getSellerMultiSigPubKey()); <nl> 
mmm CurrencyUtil.java <nl> ppp CurrencyUtil.java <nl> + result.add(new CryptoCurrency("BETR", "Better Betting", true)); <nl> mmm SpecificBanksAccount.java <nl> ppp SpecificBanksAccount.java <nl> mmm SpreadView.java <nl> ppp SpreadView.java <nl> + import java.math.BigDecimal; <nl> - spreadColumn.setComparator((o1, o2) -> o1.priceSpread != null && o2.priceSpread != null ? formatter.formatPriceWithCode(o1.priceSpread).compareTo(formatter.formatPriceWithCode(o2.priceSpread)) : 0); <nl> 
mmm BuyerStep2View.java <nl> ppp BuyerStep2View.java <nl> + import bisq.desktop.components.paymentmethods.MoneyGramForm; <nl> + import bisq.core.network.MessageState; <nl> + import bisq.core.payment.payload.MoneyGramAccountPayload; <nl> + model.setMessageStateProperty(MessageState.SENT); <nl> + model.setMessageStateProperty(MessageState.ARRIVED); <nl> 
mmm VoteResultView.java <nl> ppp VoteResultView.java <nl> - public void onParseTxsComplete(Block block) { <nl> + public void onParseTxsCompleteAfterBatchProcessing(Block block) { <nl> mmm MyProposalListService.java <nl> ppp MyProposalListService.java <nl> - public void onParseTxsComplete(Block block) { <nl> 
mmm TomP2PMessageFacade.java <nl> ppp TomP2PMessageFacade.java <nl> - public void init(BootstrapListener bootstrapListener) { <nl> + public void init(int port, BootstrapListener bootstrapListener) { <nl> - p2pNode.start(bootstrapListener); <nl> + p2pNode.start(port, bootstrapListener); <nl> mmm TomP2PMessageModule.java <nl> 
mmm WalletsSetup.java <nl> ppp WalletsSetup.java <nl> - import bisq.core.btc.nodes.RegTestHost; <nl> mmm InteracETransferValidatorTest.java <nl> ppp InteracETransferValidatorTest.java <nl> - import bisq.core.btc.nodes.BaseCurrencyNetwork; <nl> + import bisq.core.btc.BaseCurrencyNetwork; <nl> mmm Res.java <nl> 
new file <nl> ppp PaymentAccountAgeWitnessService.java <nl> + package io.bisq.core.payment; <nl> + import io.bisq.common.crypto.CryptoException; <nl> + import io.bisq.common.crypto.Hash; <nl> + import io.bisq.common.crypto.KeyRing; <nl> + import io.bisq.common.crypto.Sig; <nl> + import io.bisq.common.util.Utilities; <nl> 
mmm CounterpartyTest.java <nl> ppp CounterpartyTest.java <nl> - import bisq.asset.AbstractAssetWithDefaultValidatorTest; <nl> + import bisq.asset.AbstractAssetTest; <nl> - public class CounterpartyTest extends AbstractAssetWithDefaultValidatorTest { <nl> + public class CounterpartyTest extends AbstractAssetTest { <nl> 
mmm CompensationRequestManager.java <nl> ppp CompensationRequestManager.java <nl> - compensationRequest.setFeeTx(bsqWalletService.getPreparedBurnFeeTx(compensationRequest.getCompensationRequestFee())); <nl> - checkArgument(!compensationRequest.getFeeTx().getInputs().isEmpty(), "preparedTx inputs must not be empty"); <nl> 
mmm Storage.java <nl> ppp Storage.java <nl> - private static CorruptedDatabaseFilesHandler corruptedDatabaseFilesHandler; <nl> - public static void setCorruptedDatabaseFilesHandler(CorruptedDatabaseFilesHandler corruptedDatabaseFilesHandler) { <nl> - Storage.corruptedDatabaseFilesHandler = corruptedDatabaseFilesHandler; <nl> 
mmm AssetService.java <nl> ppp AssetService.java <nl> + import bisq.core.trade.statistics.TradeStatistics2; <nl> + import bisq.common.Timer; <nl> + import bisq.common.UserThread; <nl> + import javafx.beans.property.IntegerProperty; <nl> + import javafx.beans.property.SimpleIntegerProperty; <nl> + import javafx.collections.SetChangeListener; <nl> 
mmm UserPayloadModelVOTest.java <nl> ppp UserPayloadModelVOTest.java <nl> + "string", <nl> + new byte[]{10, 0, 0}, <nl> + null, <nl> - Lists.newArrayList(), <nl> - null, <nl> - 0, <nl> - null, <nl> - null, <nl> - null, <nl> - null)); <nl> + Lists.newArrayList())); <nl> mmm MainView.java <nl> ppp MainView.java <nl> 
mmm VoteResultService.java <nl> ppp VoteResultService.java <nl> + import java.util.function.BiFunction; <nl> - Map<String, Optional<Vote>> voteByTxIdMap = voteWithProposalTxIdList.getList().stream() <nl> + Map<String, Optional<Vote>> voteByTxIdMap = voteWithProposalTxIdList.stream() <nl> - .filter(e -> !voteByTxIdMap.containsKey(e.getKey())) <nl> 
mmm BuyerAcceptsOfferProtocol.java <nl> ppp BuyerAcceptsOfferProtocol.java <nl> - import io.bitsquare.btc.FeePolicy; <nl> + import io.bitsquare.trade.protocol.trade.offerer.tasks.SendBankTransferInitedMessage; <nl> - import io.bitsquare.trade.protocol.trade.offerer.tasks.SendSignedPayoutTx; <nl> + import io.bitsquare.trade.protocol.trade.offerer.tasks.SignPayoutTx; <nl> 
mmm BaseProposalView.java <nl> ppp BaseProposalView.java <nl> - import bisq.desktop.main.dao.proposal.ProposalDetailsWindow; <nl> + import bisq.desktop.main.dao.proposal.ProposalWindow; <nl> - new ProposalDetailsWindow(bsqFormatter, bsqWalletService, proposal, daoFacade).show(); <nl> + new ProposalWindow(bsqFormatter, bsqWalletService, proposal, daoFacade).show(); <nl> 
mmm SeedNodeMain.java <nl> ppp SeedNodeMain.java <nl> - private static final String VERSION = "1.3.8"; <nl> + private static final String VERSION = "1.3.7"; <nl> mmm ApplyFilter.java <nl> ppp ApplyFilter.java <nl> - import bisq.core.filter.PaymentAccountFilter; <nl> - final NodeAddress nodeAddress = processModel.getTempTradingPeerNodeAddress(); <nl> 
mmm SeedNodeMain.java <nl> ppp SeedNodeMain.java <nl> - private static final String VERSION = "1.4.1"; <nl> + private static final String VERSION = "1.4.2"; <nl> mmm MutableOfferDataModel.java <nl> ppp MutableOfferDataModel.java <nl> - private final Predicate<ObjectProperty<Coin>> isPositiveAmount = (c) -> c.get() != null && !c.get().isZero(); <nl> 
mmm InventoryWebServer.java <nl> ppp InventoryWebServer.java <nl> - import bisq.core.network.p2p.inventory.model.DeviationByIntegerDiff; <nl> - import bisq.core.network.p2p.inventory.model.DeviationByPercentage; <nl> - import java.util.concurrent.TimeUnit; <nl> - private final static String WARNING_ICON = "&#9888; "; <nl> 
mmm SellerAsTakerProtocol.java <nl> ppp SellerAsTakerProtocol.java <nl> - processModel.tradingPeer.setPubKeyRingPersistable(trade.getOffer().getPubKeyRing()); <nl> + processModel.tradingPeer.setPubKeyRingPersistable(trade.getOffer().getPubKeyRingVO()); <nl> mmm ValidateOffer.java <nl> ppp ValidateOffer.java <nl> 
mmm CurrencyUtil.java <nl> ppp CurrencyUtil.java <nl> + result.add(new CryptoCurrency("ARCO", "AquariusCoin")); <nl> - result.add(new CryptoCurrency("DAO", "DAO", true)); <nl> + result.add(new CryptoCurrency("IOP", "Fermat")); <nl> + result.add(new CryptoCurrency("NEVA", "Nevacoin")); <nl> + result.add(new CryptoCurrency("XAUR", "Xaurum")); <nl> 
mmm P2PServiceListener.java <nl> ppp P2PServiceListener.java <nl> - void onAuthenticated(); <nl> + void onFirstPeerAuthenticated(); <nl> mmm PeerGroup.java <nl> ppp PeerGroup.java <nl> - log.debug("No peers available for requesting."); <nl> + log.debug("No peers available for requesting data."); <nl> - Log.traceCall(); <nl> 
mmm DaoStateListener.java <nl> ppp DaoStateListener.java <nl> - void onParseTxsCompleteAfterBatchProcessing(Block block); <nl> + default void onParseTxsCompleteAfterBatchProcessing(Block block) { <nl> + } <nl> mmm MyBlindVoteListService.java <nl> ppp MyBlindVoteListService.java <nl> - import bisq.core.dao.state.model.blockchain.Block; <nl> 
mmm MainView.java <nl> ppp MainView.java <nl> - import io.bitsquare.gui.ViewLoader; <nl> + import viewfx.view.support.ViewLoader; <nl> mmm ArbitratorSettingsView.java <nl> ppp ArbitratorSettingsView.java <nl> - import io.bitsquare.gui.ViewLoader; <nl> + import viewfx.view.support.ViewLoader; <nl> mmm AccountSettingsView.java <nl> 
mmm FilterManager.java <nl> ppp FilterManager.java <nl> + import bisq.core.account.witness.AccountAgeWitness; <nl> + Optional.ofNullable(filter.getBannedSignerPubKeys()).ifPresent(builder::addAllBannedSignerPubKeys); <nl> + public boolean isSignerPubKeyBanned(String signerPubKeyAsHex) { <nl> + return getFilter() != null && <nl> 
mmm PendingTradesDataModel.java <nl> ppp PendingTradesDataModel.java <nl> + import io.bitsquare.common.handlers.ErrorMessageHandler; <nl> + import io.bitsquare.common.handlers.ResultHandler; <nl> + import static com.google.common.base.Preconditions.checkArgument; <nl> - void onFiatPaymentStarted() { <nl> + void onFiatPaymentStarted(ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler) { <nl> 
mmm RestrictionsView.java <nl> ppp RestrictionsView.java <nl> - import viewfx.view.fxml.FxmlViewLoader; <nl> + import viewfx.view.ViewLoader; <nl> + import viewfx.view.support.CachingViewLoader; <nl> - private final FxmlViewLoader viewLoader; <nl> + private final ViewLoader viewLoader; <nl> - private RestrictionsView(RestrictionsViewModel model, FxmlViewLoader viewLoader, Stage primaryStage) { <nl> 
mmm MarketsChartsViewModel.java <nl> ppp MarketsChartsViewModel.java <nl> - import io.bitsquare.btc.pricefeed.PriceFeed; <nl> + import io.bitsquare.btc.pricefeed.PriceFeedService; <nl> - final PriceFeed priceFeed; <nl> + final PriceFeedService priceFeedService; <nl> - public MarketsChartsViewModel(OfferBook offerBook, Preferences preferences, PriceFeed priceFeed) { <nl> 
mmm NetworkSettingsView.java <nl> ppp NetworkSettingsView.java <nl> - if (!localBitcoinNode.isDetected()) { <nl> + if (!localBitcoinNode.safeIsUsable()) { <nl> - boolean bitcoinLocalhostNodeRunning = localBitcoinNode.isDetected(); <nl> + boolean bitcoinLocalhostNodeRunning = localBitcoinNode.safeIsUsable(); <nl> 
mmm MainViewModel.java <nl> ppp MainViewModel.java <nl> mmm DisplayUpdateDownloadWindow.java <nl> ppp DisplayUpdateDownloadWindow.java <nl> mmm VerifyTask.java <nl> ppp VerifyTask.java <nl> mmm AboutView.java <nl> ppp AboutView.java <nl> mmm SetupUtils.java <nl> ppp SetupUtils.java <nl> mmm DownloadTask.java <nl> 
mmm FeeOptionWindow.java <nl> ppp FeeOptionWindow.java <nl> - addCloseButton(); <nl> + addButtons(); <nl> mmm ShowWalletDataWindow.java <nl> ppp ShowWalletDataWindow.java <nl> - addCloseButton(); <nl> + addButtons(); <nl> mmm QRCodeWindow.java <nl> ppp QRCodeWindow.java <nl> - addCloseButton(); <nl> + addButtons(); <nl> 
mmm AccountView.java <nl> ppp AccountView.java <nl> - public class AccountView extends ActivatableView<TabPane, AccountViewModel> { <nl> + public class AccountView extends ActivatableView<TabPane, Void> { <nl> - private AccountView(AccountViewModel model, CachingViewLoader viewLoader, Navigation navigation) { <nl> 
mmm StaticProgressIndicatorBehavior.java <nl> ppp StaticProgressIndicatorBehavior.java <nl> - import io.bitsquare.gui.components.indicator.StaticProgressIndicator; <nl> + import io.bitsquare.gui.components.indicator.TxConfidenceIndicator; <nl> - public class StaticProgressIndicatorBehavior<C extends StaticProgressIndicator> extends BehaviorBase<C> { <nl> 
mmm RulesEngine.java <nl> ppp RulesEngine.java <nl> 
mmm YamlRuleDefinitionReaderTest.java <nl> ppp YamlRuleDefinitionReaderTest.java <nl> - package org.jeasy.rules.support; <nl> + package org.jeasy.rules.support.reader; <nl> + import org.jeasy.rules.support.RuleDefinition; <nl> mmm AbstractRuleDefinitionReader.java <nl> ppp AbstractRuleDefinitionReader.java <nl> 
mmm BubbleChart.java <nl> ppp BubbleChart.java <nl> + import org.xclcharts.common.MathHelper; <nl> - float initY =  plotArea.getBottom(); <nl> - 		float lineStartX = initX; <nl> - float lineStartY = initY; <nl> - float lineStopX = 0.0f; <nl> - float lineStopY = 0.0f; <nl> + float initY =  plotArea.getBottom();		 <nl> 
mmm PlotCustomLine.java <nl> ppp PlotCustomLine.java <nl> + 	 <nl> + 	private PlotDot mDot = null; <nl> + 	 <nl> - 		PlotDot pDot = new PlotDot(); <nl> - 		pDot.setDotStyle(line.getCustomeLineCap());		 <nl> - 		PlotDotRender.getInstance().renderDot(canvas,pDot, <nl> + 		initPlotDot(); <nl> + 		mDot.setDotStyle(line.getCustomeLineCap());		 <nl> 
mmm CirChart.java <nl> ppp CirChart.java <nl> + 	protected float mInitOffsetAngle = 0.0f; <nl> - 		mOffsetAngle = Angle; <nl> + 		mInitOffsetAngle = mOffsetAngle = Angle; <nl> + 	{ <nl> + 		return mInitOffsetAngle; <nl> + 	} <nl> + 	 <nl> + 	public float getOffsetAngle() <nl> + 	 <nl> + public boolean isShowCap() <nl> 
mmm AdditionalInstallersPage.java <nl> ppp AdditionalInstallersPage.java <nl> - LibraryAnalyzer analyzer = LibraryAnalyzer.analyze(provider.getVersion().resolve(provider.getProfile().getRepository())); <nl> + LibraryAnalyzer analyzer = LibraryAnalyzer.analyze(provider.getVersion().resolvePreservingPatches(provider.getProfile().getRepository())); <nl> 
mmm FinalizedCallback.java <nl> ppp FinalizedCallback.java <nl> - void execute(AutoTypingMap<String> variables, boolean isDependentsSucceeded) throws Exception; <nl> + void execute(AutoTypingMap<String> variables, boolean isDependentsSucceeded, Exception exception) throws Exception; <nl> mmm WorldListPage.java <nl> 
mmm ModAdviser.java <nl> ppp ModAdviser.java <nl> mmm GameListItem.java <nl> ppp GameListItem.java <nl> + public void duplicate() { <nl> + Versions.duplicateVersion(profile, version); <nl> + } <nl> mmm FutureCallback.java <nl> ppp FutureCallback.java <nl> - void call(T obj, Runnable resolve, Consumer<String> reject); <nl> 
mmm InstallerPanel.java <nl> ppp InstallerPanel.java <nl> - import org.jackhuang.hellominecraft.utils.SwingUtils; <nl> + import org.jackhuang.hellominecraft.views.SwingUtils; <nl> + package org.jackhuang.hellominecraft.launcher.views; <nl> + import java.awt.Component; <nl> + import javax.swing.JList; <nl> + import javax.swing.ListCellRenderer; <nl> 
mmm HttpAuthenticationService.java <nl> ppp HttpAuthenticationService.java <nl> + import java.util.Objects; <nl> - import org.jackhuang.hellominecraft.utils.Validate; <nl> - 	Validate.notNull(proxy); <nl> - 	this.proxy = proxy; <nl> + Objects.requireNonNull(proxy); <nl> + this.proxy = proxy; <nl> - 	return this.proxy; <nl> 
mmm Settings.java <nl> ppp Settings.java <nl> + import org.jackhuang.hellominecraft.util.EventHandler; <nl> - for (Profile e : getProfiles().values()) { <nl> + for (Map.Entry<String, Profile> entry : getProfiles().entrySet()) { <nl> + Profile e = entry.getValue(); <nl> + e.setName(entry.getKey()); <nl> + public static Profile getLastProfile() { <nl> 
mmm Launcher.java <nl> ppp Launcher.java <nl> - import java.util.Arrays; <nl> - import java.util.List; <nl> + if (!JdkVersion.isJava64Bit() && Platform.getPlatform() == Platform.BIT_64) <nl> + MessageBox.Show(C.i18n("advice.os64butjdk32")); <nl> - if (!JdkVersion.isJava64Bit() && Platform.getPlatform() == Platform.BIT_64) <nl> 
mmm EncodedMemoryCacheProducer.java <nl> ppp EncodedMemoryCacheProducer.java <nl> - FrescoSystrace.beginSection("EncodedMemoryCacheProducer#produceResults"); <nl> + if (FrescoSystrace.isTracing()) { <nl> + FrescoSystrace.beginSection("EncodedMemoryCacheProducer#produceResults"); <nl> + } <nl> - FrescoSystrace.endSection(); <nl> 
mmm MiddlewareUtils.java <nl> ppp MiddlewareUtils.java <nl> - import com.facebook.datasource.DataSource; <nl> - @Nullable DataSource<?> dataSource, <nl> + @Nullable Map<String, Object> dataSourceExtras, <nl> - @Nullable Map<String, Object> imageExtras) { <nl> + @Nullable Map<String, Object> imageExtras, <nl> 
mmm ShowcaseApplication.java <nl> ppp ShowcaseApplication.java <nl> - import com.facebook.imagepipeline.memory.BitmapCounterConfig; <nl> - .setBitmapCounterConfig( <nl> - new BitmapCounterConfig.Builder() <nl> - .setMaxBitmapCount(BitmapCounterConfig.DEFAULT_MAX_BITMAP_COUNT) <nl> - .build()) <nl> mmm KitKatPurgeableDecoderTest.java <nl> 
mmm LruCountingMemoryCache.java <nl> ppp LruCountingMemoryCache.java <nl> + import com.facebook.infer.annotation.Nullsafe; <nl> + @Nullsafe(Nullsafe.Mode.STRICT) <nl> - mMemoryCacheParams = mMemoryCacheParamsSupplier.get(); <nl> + mMemoryCacheParams = <nl> + Preconditions.checkNotNull( <nl> + mMemoryCacheParamsSupplier.get(), "mMemoryCacheParamsSupplier returned null"); <nl> 
new file <nl> ppp MyEndpoint.java <nl> + package org.javaee7.websocket.binary; <nl> + import java.io.IOException; <nl> + import java.nio.ByteBuffer; <nl> + import java.util.logging.Level; <nl> + import java.util.logging.Logger; <nl> + import javax.websocket.OnMessage; <nl> + import javax.websocket.Session; <nl> 
new file <nl> ppp Parameter.java <nl> + package org.javaee7; <nl> + import java.lang.annotation.ElementType; <nl> + import java.lang.annotation.Retention; <nl> + import java.lang.annotation.RetentionPolicy; <nl> + import java.lang.annotation.Target; <nl> + @Retention(RetentionPolicy.RUNTIME) <nl> + @Target({ElementType.FIELD}) <nl> 
deleted file <nl> mmm package-info.java <nl> - package org.javaee7.jaxws.client.gen; <nl> mmm MessageReceiverAppManaged.java <nl> - import java.util.concurrent.TimeoutException; <nl> - import javax.jms.JMSRuntimeException; <nl> - public String receiveMessage(int timeoutInMillis) throws JMSRuntimeException, TimeoutException { <nl> 
new file <nl> ppp NoteResourceImplTest.java <nl> + package org.javaee7.jaxrs.angularjs; <nl> + import com.example.domain.Note; <nl> + import com.example.rest.NoteApp; <nl> + import com.example.rest.NoteResource; <nl> + import com.example.rest.NoteResourceImpl; <nl> + import org.jboss.arquillian.container.test.api.Deployment; <nl> 
