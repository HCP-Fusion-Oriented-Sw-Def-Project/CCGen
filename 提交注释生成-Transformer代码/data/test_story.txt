mmm HistogramFixedWidth.java <nl> ppp HistogramFixedWidth.java <nl> - @Override <nl> - public void resolvePropertiesFromSameDiffBeforeExecution() { <nl> - if(args().length == 3 && iArguments.isEmpty()){ <nl> - addIArgument(arg(2).getArr().getInt(0)); <nl> - } <nl> - super.resolvePropertiesFromSameDiffBeforeExecution(); <nl> 
mmm ShapeTestsC.java <nl> ppp ShapeTestsC.java <nl> - val exp = Nd4j.trueVector(new float[]{1.0f}); <nl> + val exp = Nd4j.createFromArray(new float[]{1.0f}); <nl> mmm Nd4j.java <nl> ppp Nd4j.java <nl> - @Deprecated <nl> - public static INDArray trueVector(boolean[] data) { <nl> - return INSTANCE.trueVector(data); <nl> 
mmm FlexibleAdapter.java <nl> ppp FlexibleAdapter.java <nl> + import android.support.v7.widget.helper.ItemTouchHelper; <nl> + import eu.davidea.flexibleadapter.helpers.ItemTouchHelperCallback; <nl> - public abstract class FlexibleAdapter<VH extends RecyclerView.ViewHolder, T> extends SelectableAdapter<VH> { <nl> 
mmm FontAwesomeModule.java <nl> ppp FontAwesomeModule.java <nl> - package com.joanzapata.android.iconify.fonts; <nl> + package com.joanzapata.iconify.fonts; <nl> - import com.joanzapata.android.iconify.Icon; <nl> - import com.joanzapata.android.iconify.IconFontDescriptor; <nl> + import com.joanzapata.iconify.Icon; <nl> 
mmm OAuth20AuthorizationCodeAuthorizationResponseBuilder.java <nl> ppp OAuth20AuthorizationCodeAuthorizationResponseBuilder.java <nl> + import org.apereo.inspektr.audit.annotation.Audit; <nl> + @Audit(action = "OAUTH2_CODE_RESPONSE", <nl> + actionResolverName = "OAUTH2_CODE_RESPONSE_ACTION_RESOLVER", <nl> 
mmm BaseTicketRegistryTests.java <nl> ppp BaseTicketRegistryTests.java <nl> + import org.apereo.cas.config.CasCoreTicketIdGeneratorsConfiguration; <nl> - CasCoreTicketsSerializationConfiguration.class <nl> + CasCoreTicketsSerializationConfiguration.class, <nl> + CasCoreTicketIdGeneratorsConfiguration.class <nl> 
mmm CasSimpleSendTokenAction.java <nl> ppp CasSimpleSendTokenAction.java <nl> - val body = StringUtils.isNotBlank(emailProperties.getText()) <nl> - ? String.format(emailProperties.getText(), token.getId()) <nl> - : token.getId(); <nl> + val body = emailProperties.getFormattedBody(token.getId()); <nl> mmm CommunicationsManagerTests.java <nl> 
new file <nl> ppp LastUsedTimeRegisteredServiceSingleSignOnParticipationPolicy.java <nl> + package org.apereo.cas.services; <nl> + import org.apereo.cas.ticket.TicketState; <nl> + import com.fasterxml.jackson.annotation.JsonTypeInfo; <nl> + import lombok.EqualsAndHashCode; <nl> + import lombok.Getter; <nl> 
mmm AbstractX509PrincipalResolver.java <nl> ppp AbstractX509PrincipalResolver.java <nl> - final PrincipalFactory principalFactory, final boolean returnNullIfNoAttributes, <nl> + final PrincipalFactory principalFactory, <nl> + final boolean returnNullIfNoAttributes, <nl> - final String alternatePrincipalAttribute) { <nl> 
mmm DefaultAttributeDefinition.java <nl> ppp DefaultAttributeDefinition.java <nl> + import java.util.Objects; <nl> + @Tag("Authentication") <nl> + public class AccountsPreDefinedLoginModuleTests { <nl> + @Test <nl> + public void verifyOperation() throws Exception { <nl> + val module = new AccountsPreDefinedLoginModule(); <nl> 
mmm GoogleAuthenticatorRestHttpRequestCredentialFactoryTests.java <nl> ppp GoogleAuthenticatorRestHttpRequestCredentialFactoryTests.java <nl> - val results = f.fromRequestBody(body); <nl> + val results = f.fromRequest(null, body); <nl> - val results = f.fromRequestBody(body); <nl> + val results = f.fromRequest(null, body); <nl> 
mmm AbstractServiceValidateControllerTests.java <nl> ppp AbstractServiceValidateControllerTests.java <nl> + import org.apereo.cas.services.ServicesManager; <nl> + import static org.mockito.Mockito.*; <nl> + @Slf4j <nl> + @Getter <nl> + @Setter <nl> + @NoArgsConstructor(force = true) <nl> + @RequiredArgsConstructor <nl> 
mmm MultifactorAuthenticationVerifyTrustActionTests.java <nl> ppp MultifactorAuthenticationVerifyTrustActionTests.java <nl> - context.setExternalContext(new ServletExternalContext(new MockServletContext(), new MockHttpServletRequest(), new MockHttpServletResponse())); <nl> + context.setExternalContext(new ServletExternalContext(new MockServletContext(), <nl> 
mmm OAuth20ClientIdClientSecretAuthenticatorTests.java <nl> ppp OAuth20ClientIdClientSecretAuthenticatorTests.java <nl> - new OAuth20RegisteredServiceCipherExecutor()); <nl> + new OAuth20RegisteredServiceCipherExecutor(), ticketRegistry); <nl> mmm AbstractOAuth20Tests.java <nl> ppp AbstractOAuth20Tests.java <nl> 
mmm DeleteTicketMessageQueueCommandTests.java <nl> ppp DeleteTicketMessageQueueCommandTests.java <nl> - import org.apereo.cas.JmsTicketRegistryQueueIdentifier; <nl> + import org.apereo.cas.JmsQueueIdentifier; <nl> - val cmd = new DeleteTicketMessageQueueCommand(new JmsTicketRegistryQueueIdentifier(), ticket.getId()); <nl> 
mmm UpdateTicketMessageQueueCommand.java <nl> ppp UpdateTicketMessageQueueCommand.java <nl> - import org.apereo.cas.JmsQueueIdentifier; <nl> + import org.apereo.cas.JmsTicketRegistryQueueIdentifier; <nl> - public UpdateTicketMessageQueueCommand(@JsonProperty("id") final JmsQueueIdentifier id, @JsonProperty("ticket") final Ticket ticket) { <nl> 
mmm SSOSamlProfileCallbackHandlerController.java <nl> ppp SSOSamlProfileCallbackHandlerController.java <nl> + import org.opensaml.saml.common.SAMLObject; <nl> - private static MessageContext bindRelayStateParameter(final HttpServletRequest request) { <nl> - val messageContext = new MessageContext(); <nl> 
mmm AbstractServicesManager.java <nl> ppp AbstractServicesManager.java <nl> - if (registeredService == null <nl> - || RegisteredServiceAccessStrategyUtils.ensureServiceIsNotExpired(registeredService)) { <nl> + if (registeredService == null || RegisteredServiceAccessStrategyUtils.ensureServiceIsNotExpired(registeredService)) { <nl> 
mmm CasRegisteredServiceHazelcastStreamPublisher.java <nl> ppp CasRegisteredServiceHazelcastStreamPublisher.java <nl> - import org.apereo.cas.JmsTicketRegistryQueueIdentifier; <nl> + import org.apereo.cas.JmsQueueIdentifier; <nl> - final JmsTicketRegistryQueueIdentifier publisherId) { <nl> + final JmsQueueIdentifier publisherId) { <nl> 
new file <nl> ppp AllTestsSuite.java <nl> + package org.apereo.cas; <nl> + import org.apereo.cas.couchdb.services.RegisteredServiceCouchDbRepositoryTests; <nl> + import org.apereo.cas.services.CouchDbServiceRegistryTests; <nl> + import org.junit.platform.runner.JUnitPlatform; <nl> + import org.junit.platform.suite.api.SelectClasses; <nl> 
mmm RegisteredServicePublicKeyImpl.java <nl> ppp RegisteredServicePublicKeyImpl.java <nl> + import com.fasterxml.jackson.annotation.JsonIgnore; <nl> + import javax.crypto.Cipher; <nl> + @JsonIgnore <nl> + @JsonIgnore <nl> + Cipher toCipher(); <nl> mmm AbstractCipherExecutor.java <nl> ppp AbstractCipherExecutor.java <nl> 
mmm TemporaryFileSystemResourceTests.java <nl> ppp TemporaryFileSystemResourceTests.java <nl> - import java.nio.channels.Channels; <nl> mmm ResourceUtils.java <nl> ppp ResourceUtils.java <nl> + import org.apache.commons.lang3.ArrayUtils; <nl> + import org.springframework.core.io.ByteArrayResource; <nl> + public static final Resource EMPTY_RESOURCE = new ByteArrayResource(ArrayUtils.EMPTY_BYTE_ARRAY); <nl> 
mmm InitialFlowSetupAction.java <nl> ppp InitialFlowSetupAction.java <nl> + } <nl> + private void configureWebflowContext(final RequestContext context) { <nl> + val request = WebUtils.getHttpServletRequestFromExternalWebflowContext(context); <nl> - } <nl> - private void configureWebflowContext(final RequestContext context) { <nl> 
new file <nl> ppp GroovyWsFederationAttributeMutator.java <nl> + package org.apereo.cas.support.wsfederation.attributes; <nl> + import org.apereo.cas.util.ScriptingUtils; <nl> + import lombok.RequiredArgsConstructor; <nl> + import lombok.extern.slf4j.Slf4j; <nl> + import lombok.val; <nl> + import org.springframework.core.io.Resource; <nl> 
mmm GoogleAuthenticatorRestHttpRequestCredentialFactory.java <nl> ppp GoogleAuthenticatorRestHttpRequestCredentialFactory.java <nl> + if (requestBody == null || requestBody.isEmpty()) { <nl> + LOGGER.debug("Skipping {} because the requestBody is null or empty", getClass().getSimpleName()); <nl> + return new ArrayList<>(0); <nl> 
mmm OAuthRegisteredService.java <nl> ppp OAuthRegisteredService.java <nl> + @Column <nl> + private boolean generateJwtAccessToken; <nl> mmm TokenWebApplicationServiceResponseBuilder.java <nl> ppp TokenWebApplicationServiceResponseBuilder.java <nl> - import org.apereo.cas.token.TokenTicketBuilder; <nl> + import org.apereo.cas.token.JWTTokenTicketBuilder; <nl> 
mmm BaseSingleLogoutServiceMessageHandler.java <nl> ppp BaseSingleLogoutServiceMessageHandler.java <nl> - LOGGER.debug("Service [{}] supports single logout and is found in the registry as [{}]. Proceeding...", selectedService.getId(), registeredService.getName()); <nl> + LOGGER.debug("Service [{}] supports single logout and is found in the registry as [{}]. Proceeding...", <nl> 
mmm JpaServiceRegistryConfiguration.java <nl> ppp JpaServiceRegistryConfiguration.java <nl> + import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean; <nl> - public class JpaServiceRegistryConfiguration implements ServiceRegistryExecutionPlanConfigurer { <nl> + public class JpaServiceRegistryConfiguration { <nl> 
mmm CasSimpleMultifactorAuthenticationMultifactorProviderBypassConfiguration.java <nl> ppp CasSimpleMultifactorAuthenticationMultifactorProviderBypassConfiguration.java <nl> - import org.apereo.cas.authentication.DefaultChainingMultifactorAuthenticationBypassProvider; <nl> + import org.apereo.cas.authentication.bypass.DefaultChainingMultifactorAuthenticationBypassProvider; <nl> 
mmm AllTestsSuite.java <nl> ppp AllTestsSuite.java <nl> + import org.apereo.cas.authentication.policy.AllAuthenticationHandlersSucceededAuthenticationPolicyTests; <nl> + import org.apereo.cas.authentication.policy.NotPreventedAuthenticationPolicyTests; <nl> + NotPreventedAuthenticationPolicyTests.class, <nl> 
mmm RestConsentRepositoryTests.java <nl> ppp RestConsentRepositoryTests.java <nl> - private static MockRestServiceServer getNewServer(final RestConsentRepository repository) { <nl> - return MockRestServiceServer.bindTo(repository.getRestTemplate()).build(); <nl> - } <nl> + server.expect(once(), requestTo("/consent/-1")) <nl> 
mmm TrustedAuthenticationWebflowConfigurerTests.java <nl> ppp TrustedAuthenticationWebflowConfigurerTests.java <nl> + import org.apereo.cas.web.flow.config.TrustedAuthenticationComponentSerializationConfiguration; <nl> + TrustedAuthenticationComponentSerializationConfiguration.class, <nl> mmm BaseJwtTokenTicketBuilderTests.java <nl> 
new file <nl> ppp JpaSamlIdPMetadataDocumentFactory.java <nl> + package org.apereo.cas.support.saml.idp.metadata.jpa; <nl> + import org.apereo.cas.configuration.model.support.saml.idp.metadata.JpaSamlMetadataProperties; <nl> + import org.apereo.cas.support.saml.idp.metadata.jpa.generic.JpaSamlIdPMetadataDocument; <nl> 
mmm OracleMaterializedView.java <nl> ppp OracleMaterializedView.java <nl> + import org.jkiss.dbeaver.model.DBUtils; <nl> + import org.jkiss.dbeaver.model.exec.jdbc.JDBCPreparedStatement; <nl> + import org.jkiss.dbeaver.model.exec.jdbc.JDBCResultSet; <nl> + import org.jkiss.dbeaver.model.meta.PropertyGroup; <nl> 
mmm MySQLToolTableOptimize.java <nl> ppp MySQLToolTableOptimize.java <nl> - package org.jkiss.dbeaver.ext.postgresql.tasks; <nl> - import org.jkiss.dbeaver.model.edit.DBEPersistAction; <nl> - import org.jkiss.dbeaver.model.exec.DBCException; <nl> - import org.jkiss.dbeaver.model.exec.DBCSession; <nl> - import org.jkiss.dbeaver.model.exec.DBCStatement; <nl> 
mmm OracleToolValidateStructure.java <nl> ppp OracleToolValidateStructure.java <nl> + import org.eclipse.jface.viewers.StructuredSelection; <nl> + import org.jkiss.dbeaver.ext.oracle.tasks.OracleTasks; <nl> + import org.jkiss.dbeaver.tasks.ui.wizard.TaskConfigurationWizardDialog; <nl> + import org.jkiss.dbeaver.ui.navigator.NavigatorUtils; <nl> 
mmm DriverManagerDialog.java <nl> ppp DriverManagerDialog.java <nl> - package org.jkiss.dbeaver.ui.dialogs.driver; <nl> - import org.eclipse.jface.dialogs.IDialogConstants; <nl> - import org.eclipse.jface.dialogs.IDialogSettings; <nl> - import org.eclipse.jface.viewers.*; <nl> - import org.eclipse.osgi.util.NLS; <nl> 
mmm DataTransferTaskConfigurator.java <nl> ppp DataTransferTaskConfigurator.java <nl> + import org.eclipse.osgi.util.NLS; <nl> + import org.jkiss.dbeaver.tools.transfer.ui.internal.DTUIMessages; <nl> - (DTConstants.TASK_EXPORT.equals(taskType.getId()) ? "Export tables" : "Import into"), <nl> + (DTConstants.TASK_EXPORT.equals(taskType.getId()) ? DTUIMessages.data_transfer_task_configurator_group_label_export_tables : DTUIMessages.data_transfer_task_configurator_group_label_import_into), <nl> 
new file <nl> ppp NavigatorHandlerFilterObjects.java <nl> + package org.jkiss.dbeaver.ui.actions.navigator; <nl> + import org.eclipse.core.commands.ExecutionEvent; <nl> + import org.eclipse.core.commands.ExecutionException; <nl> + import org.eclipse.jface.viewers.ISelection; <nl> + import org.eclipse.jface.viewers.ISelectionProvider; <nl> 
mmm ExasolConnectionDialog.java <nl> ppp ExasolConnectionDialog.java <nl> - package org.jkiss.dbeaver.ext.exasol.ui; <nl> + package org.jkiss.dbeaver.ext.exasol.ui.config; <nl> mmm ExasolPrimaryKeyManager.java <nl> ppp ExasolPrimaryKeyManager.java <nl> - import org.jkiss.dbeaver.ext.exasol.ExasolMessages; <nl> 
mmm DBNDatabaseNode.java <nl> ppp DBNDatabaseNode.java <nl> - DBSObject newObject = ((DBPRefreshableObject) object).refreshObject(monitor); <nl> - if (newObject == null) { <nl> + DBSObject[] newObject = new DBSObject[1]; <nl> + DBExecUtils.tryExecuteRecover(monitor, object.getDataSource(), param -> { <nl> 
mmm DTUIMessages.java <nl> ppp DTUIMessages.java <nl> - 	public static String data_transfer_handler_title_data_transfer_error; <nl> - 	public static String data_transfer_handler_message_data_transfer_error; <nl> - 	public static String database_consumer_page_mapping_title_error_mapping_table; <nl> - 	public static String database_consumer_page_mapping_message_error_mapping_target_table; <nl> 
mmm ScriptSelectorPanel.java <nl> ppp ScriptSelectorPanel.java <nl> - patternText = new Text(composite, SWT.NONE); <nl> + patternText = new Text(composite, SWT.BORDER); <nl> + UIUtils.addEmptyTextHint(patternText, text -> "Enter a part of script name here"); <nl> - patternText.setFocus(); <nl> + UIUtils.asyncExec(scriptTree::setFocus); <nl> 
mmm OraclePackage.java <nl> ppp OraclePackage.java <nl> - return actions.toArray(new DBEPersistAction[actions.size()]); <nl> + return actions.toArray(new DBEPersistAction[0]); <nl> mmm SQLSymbolInserter.java <nl> ppp SQLSymbolInserter.java <nl> + try { <nl> + if (offset < document.getLength() && !Character.isWhitespace(document.getChar(offset + length))) { <nl> 
mmm MySQLCommandChangeUser.java <nl> ppp MySQLCommandChangeUser.java <nl> - public void handleExecute(DBCSession session, Throwable error) <nl> + public void afterExecute(DBCSession session, Throwable error) <nl> mmm DBEPersistAction.java <nl> ppp DBEPersistAction.java <nl> - public enum ActionType { <nl> + enum ActionType { <nl> 
mmm PostgreConstants.java <nl> ppp PostgreConstants.java <nl> + public static final String COLLATION_DEFAULT = "default"; <nl> mmm GeometryInlineEditor.java <nl> ppp GeometryInlineEditor.java <nl> - valueSRID = ((GisAttribute) column).getAttributeSRID(new VoidProgressMonitor()); <nl> + valueSRID = ((GisAttribute) column).getAttributeGeometrySRID(new VoidProgressMonitor()); <nl> 
mmm PostgreTable.java <nl> ppp PostgreTable.java <nl> - import org.jkiss.dbeaver.model.DBPScriptObject; <nl> + import org.jkiss.dbeaver.model.meta.IPropertyValueValidator; <nl> - this.hasOids = JDBCUtils.safeGetBoolean(dbResult, "relhasoids"); <nl> + if (getDataSource().getServerType().supportsHasOidsColumn()) { <nl> 
mmm PrefPageConfirmations.java <nl> ppp PrefPageConfirmations.java <nl> + import org.jkiss.dbeaver.ui.editors.sql.internal.SQLEditorMessages; <nl> + ResourceBundle sqlBundle = ResourceBundle.getBundle(SQLEditorMessages.BUNDLE_NAME); <nl> - createConfirmCheckbox(CoreMessages.pref_page_confirmations_group_object_editor, coreBundle, SQLPreferenceConstants.CONFIRM_DANGER_SQL); <nl> 
new file <nl> ppp ExasolFunction.java <nl> + package org.jkiss.dbeaver.ext.exasol.model; <nl> + import java.sql.ResultSet; <nl> + import java.sql.Timestamp; <nl> + import java.util.Collection; <nl> + import org.jkiss.code.NotNull; <nl> + import org.jkiss.code.Nullable; <nl> + import org.jkiss.dbeaver.DBException; <nl> 
mmm CustomTimeEditor.java <nl> ppp CustomTimeEditor.java <nl> - public void setEditable(boolean editable) { <nl> - timeEditor.setEditable(editable); <nl> + public void setEnabled(boolean enabled) { <nl> + timeEditor.setEnabled(enabled); <nl> mmm SQLEditor.java <nl> ppp SQLEditor.java <nl> - if (!EditorUtils.isInAutoSaveJob()) { <nl> 
mmm ResultSetLabelProviderDefault.java <nl> ppp ResultSetLabelProviderDefault.java <nl> + import org.eclipse.ui.PlatformUI; <nl> - public ResultSetLabelProviderDefault(ResultSetViewer viewer) { <nl> + ResultSetLabelProviderDefault(ResultSetViewer viewer) { <nl> + applyThemeSettings(); <nl> + } <nl> + void applyThemeSettings() { <nl> 
mmm MockDataExecuteWizard.java <nl> ppp MockDataExecuteWizard.java <nl> - for (int i = 0; i < BATCH_SIZE; i++) { <nl> + for (int i = 0; (i < BATCH_SIZE && counter < rowsNumber); i++) { <nl> new file <nl> ppp DateRandomGenerator.java <nl> + package org.jkiss.dbeaver.ext.mockdata.generator; <nl> + import org.jkiss.dbeaver.DBException; <nl> 
mmm SQLServerConnectionPage.java <nl> ppp SQLServerConnectionPage.java <nl> - gd.widthHint = 60; <nl> + gd.widthHint = UIUtils.getFontHeight(portText) * 7; <nl> mmm BaseFormatterConfigurationPage.java <nl> ppp BaseFormatterConfigurationPage.java <nl> + public Runnable changeListener; <nl> - public void configure(SQLFormatterDescriptor formatterDescriptor) { <nl> 
mmm NativeToolWizardDialog.java <nl> ppp NativeToolWizardDialog.java <nl> - dataSource.getRegistry().flushConfig(); <nl> + dataSource.persistConfiguration(); <nl> mmm PostgreMessages.java <nl> ppp PostgreMessages.java <nl> + public static String dialog_setting_user_role; <nl> mmm PostgreDataSource.java <nl> 
mmm DateTimeValueManager.java <nl> ppp DateTimeValueManager.java <nl> + import org.eclipse.jface.action.Action; <nl> + import org.jkiss.dbeaver.model.DBIcon; <nl> + import org.jkiss.dbeaver.ui.DBeaverIcons; <nl> + import org.jkiss.dbeaver.ui.controls.resultset.internal.ResultSetMessages; <nl> + import java.util.Date; <nl> 
mmm DB2SchemaConfigurator.java <nl> ppp DB2SchemaConfigurator.java <nl> - import org.jkiss.dbeaver.ext.db2.model.DB2DataSource; <nl> - return new DB2Schema((DB2DataSource) container, schemaName); <nl> + newSchema.setName(schemaName); <nl> + return newSchema; <nl> mmm GridColumn.java <nl> ppp GridColumn.java <nl> 
deleted file <nl> mmm DataExporterSourceCode.java <nl> - package org.jkiss.dbeaver.tools.transfer.stream.exporter; <nl> - import org.jkiss.code.Nullable; <nl> - import org.jkiss.dbeaver.DBException; <nl> - import org.jkiss.dbeaver.model.DBUtils; <nl> - import org.jkiss.dbeaver.model.data.DBDAttributeBinding; <nl> 
mmm DatabaseTransferConsumer.java <nl> ppp DatabaseTransferConsumer.java <nl> - if (containerMapping != null && containerMapping.getTarget() != null) { <nl> - DBWorkbench.getPlatformUI().openEntityEditor(containerMapping.getTarget()); <nl> + if (targetObject != null) { <nl> + DBWorkbench.getPlatformUI().openEntityEditor(targetObject); <nl> 
mmm DB2ViewBaseDep.java <nl> ppp DB2ViewBaseDep.java <nl> - this.depModuleId = JDBCUtils.safeGetString(resultSet, "BMODULEID"); <nl> + DB2DataSource db2DataSource = (DB2DataSource) db2ViewBase.getDataSource(); <nl> + if (db2DataSource.isAtLeastV9_5()) { <nl> + this.depModuleId = JDBCUtils.safeGetString(resultSet, "BMODULEID"); <nl> 
mmm SearchlistAdapter.java <nl> ppp SearchlistAdapter.java <nl> - if (result.getSubtitle() != null) { <nl> - holder.subtitle.setVisibility(View.VISIBLE); <nl> - holder.subtitle.setText(result.getSubtitle()); <nl> - } <nl> + holder.subtitle.setText(result.getLocation().getDescription()); <nl> mmm AllEpisodesFragment.java <nl> 
mmm MediaplayerActivity.java <nl> ppp MediaplayerActivity.java <nl> - Playable media = controller.getMedia(); <nl> mmm DownloadService.java <nl> ppp DownloadService.java <nl> - import de.danoeh.antennapod.core.storage.PodDBAdapter; <nl> - PodDBAdapter.getInstance().close(); <nl> deleted file <nl> mmm DownloaderCallback.java <nl> 
mmm PlayerWidgetJobService.java <nl> ppp PlayerWidgetJobService.java <nl> - if (position > 0 && duration > 0) { <nl> + if (position >= 0 && duration > 0) { <nl> mmm FeedItem.java <nl> ppp FeedItem.java <nl> - if(media != null && media.hasEmbeddedPicture()) { <nl> - return media.getImageLocation(); <nl> - } else if (imageUrl != null) { <nl> 
mmm OpmlFeedQueuer.java <nl> ppp OpmlFeedQueuer.java <nl> - import de.danoeh.antennapod.core.export.opml.OpmlElement; <nl> + import de.danoeh.antennapod.core.opml.OpmlElement; <nl> mmm OpmlImportHolder.java <nl> ppp OpmlImportHolder.java <nl> - import java.util.ArrayList; <nl> + import de.danoeh.antennapod.core.opml.OpmlElement; <nl> 
mmm FeedItem.java <nl> ppp FeedItem.java <nl> + import java.util.List; <nl> - 	public SimpleChapter getCurrentChapter(int position) { <nl> - 		SimpleChapter current = null; <nl> - 		if (simpleChapters != null) { <nl> - 			current = simpleChapters.get(0); <nl> - 			for (SimpleChapter sc : simpleChapters) { <nl> 
mmm SubscriptionFragment.java <nl> ppp SubscriptionFragment.java <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + import de.danoeh.antennapod.adapter.NavListAdapter; <nl> - import de.danoeh.antennapod.core.feed.EventDistributor; <nl> - private static final int EVENTS = EventDistributor.FEED_LIST_UPDATE <nl> 
mmm PlaybackCompletionDateComparator.java <nl> ppp PlaybackCompletionDateComparator.java <nl> - 			return rhs.getMedia().getPlaybackCompletionDate() <nl> - 					.compareTo(lhs.getMedia().getPlaybackCompletionDate()); <nl> + 			return -lhs.getMedia().getPlaybackCompletionDate() <nl> + 					.compareTo(rhs.getMedia().getPlaybackCompletionDate()); <nl> 
mmm CompletedDownloadsFragment.java <nl> ppp CompletedDownloadsFragment.java <nl> - import android.content.Context; <nl> + import android.support.annotation.NonNull; <nl> + import java.util.ArrayList; <nl> + import static de.danoeh.antennapod.dialog.EpisodesApplyActionFragment.ACTION_ADD_TO_QUEUE; <nl> + import static de.danoeh.antennapod.dialog.EpisodesApplyActionFragment.ACTION_DELETE; <nl> 
mmm PlayerWidgetJobService.java <nl> ppp PlayerWidgetJobService.java <nl> - position = TimeSpeedConverter.convert(position); <nl> - duration = TimeSpeedConverter.convert(duration); <nl> + TimeSpeedConverter converter = new TimeSpeedConverter(playbackService.getCurrentPlaybackSpeed()); <nl> + position = converter.convert(position); <nl> 
mmm PlaybackServiceTaskManager.java <nl> ppp PlaybackServiceTaskManager.java <nl> - import de.danoeh.antennapod.core.feed.QueueEvent; <nl> + import de.danoeh.antennapod.core.event.QueueEvent; <nl> mmm DBTasks.java <nl> ppp DBTasks.java <nl> - DBReader.loadFeedDataOfFeedItemlist(items); <nl> + DBReader.loadAdditionalFeedItemListData(items); <nl> 
mmm SyndHandler.java <nl> ppp SyndHandler.java <nl> - import de.danoeh.antennapod.core.BuildConfig; <nl> - import de.danoeh.antennapod.core.feed.Feed; <nl> - import de.danoeh.antennapod.core.syndication.namespace.*; <nl> - import de.danoeh.antennapod.core.syndication.namespace.atom.NSAtom; <nl> + import de.danoeh.antennapod.core.BuildConfig; <nl> 
mmm PlaybackService.java <nl> ppp PlaybackService.java <nl> + PlaybackPreferences.clearCurrentlyPlayingTemporaryPlaybackSpeed(); <nl> mmm AudioplayerActivity.java <nl> ppp AudioplayerActivity.java <nl> + import de.danoeh.antennapod.core.preferences.PlaybackPreferences; <nl> + import de.danoeh.antennapod.core.preferences.PlaybackSpeedHelper; <nl> 
mmm ItunesTopListLoader.java <nl> ppp ItunesTopListLoader.java <nl> + import de.danoeh.antennapod.core.ClientConfig; <nl> + public Single<String> getFeedUrl(PodcastSearchResult podcast) { <nl> + if (!podcast.feedUrl.contains("itunes.apple.com")) { <nl> + return Single.just(podcast.feedUrl) <nl> + .observeOn(AndroidSchedulers.mainThread()); <nl> 
mmm DownloadServiceCallbacksImpl.java <nl> ppp DownloadServiceCallbacksImpl.java <nl> - intent.putExtra(MainActivity.EXTRA_NAV_TYPE, NavListAdapter.VIEW_TYPE_NAV); <nl> - return PendingIntent.getActivity(context, 0, intent, <nl> - PendingIntent.FLAG_UPDATE_CURRENT); <nl> + return PendingIntent.getActivity(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT); <nl> 
mmm DBWriter.java <nl> ppp DBWriter.java <nl> - DBWriter.markItemPlayed(context, FeedItem.UNPLAYED, item.getId()); <nl> + DBWriter.markItemRead(context, false, item.getId()); <nl> - DBWriter.markItemPlayed(context, FeedItem.UNPLAYED, markAsUnplayedIds.toArray()); <nl> + DBWriter.markItemRead(context, false, markAsUnplayedIds.toArray()); <nl> 
mmm VideoPlayer.java <nl> ppp VideoPlayer.java <nl> + 	@Override <nl> + 	public boolean canSetPitch() { <nl> + 		return false; <nl> + 	} <nl> + 	@Override <nl> + 	public float getCurrentPitchStepsAdjustment() { <nl> + 		return 1; <nl> + 	} <nl> + 	@Override <nl> + 	public float getMaxSpeedMultiplier() { <nl> + 		return 1; <nl> 
mmm DBWriterTest.java <nl> ppp DBWriterTest.java <nl> - import androidx.core.util.Consumer; <nl> + import de.danoeh.antennapod.core.util.Consumer; <nl> mmm DownloadServiceTest.java <nl> ppp DownloadServiceTest.java <nl> - import androidx.core.util.Consumer; <nl> + import de.danoeh.antennapod.core.util.Consumer; <nl> 
mmm DownloadRequestException.java <nl> ppp DownloadRequestException.java <nl> + private static final long serialVersionUID = 1L; <nl> - 	public DownloadRequestException() { <nl> - 		super(); <nl> - 	} <nl> + public DownloadRequestException() { <nl> + super(); <nl> + } <nl> - 	public DownloadRequestException(String detailMessage, Throwable throwable) { <nl> 
mmm DownloadService.java <nl> ppp DownloadService.java <nl> + import androidx.annotation.NonNull; <nl> + import org.apache.commons.io.FileUtils; <nl> + import org.greenrobot.eventbus.EventBus; <nl> + import java.io.File; <nl> + import java.io.IOException; <nl> + import java.net.HttpURLConnection; <nl> + import java.util.ArrayList; <nl> 
mmm ExternalPlayerFragment.java <nl> ppp ExternalPlayerFragment.java <nl> + 			@Override <nl> + 			public void onPlaybackSpeedChange() { <nl> + 			} <nl> mmm DBWriter.java <nl> ppp DBWriter.java <nl> + EventDistributor.getInstance().sendQueueUpdateBroadcast(); <nl> + EventDistributor.getInstance().sendUnreadItemsUpdateBroadcast(); <nl> 
mmm Rss2Generator.java <nl> ppp Rss2Generator.java <nl> - public class RSS2Generator implements FeedGenerator{ <nl> + public class Rss2Generator implements FeedGenerator { <nl> - if (feed == null) throw new IllegalArgumentException("feed = null"); <nl> - if (outputStream == null) throw new IllegalArgumentException("outputStream = null"); <nl> 
mmm PlaybackController.java <nl> ppp PlaybackController.java <nl> + import java.util.Collections; <nl> + import java.util.List; <nl> 
mmm FeedItem.java <nl> ppp FeedItem.java <nl> + import java.io.Serializable; <nl> - public class FeedItem extends FeedComponent implements ShownotesProvider, ImageResource { <nl> + public class FeedItem extends FeedComponent implements ShownotesProvider, ImageResource, Serializable { <nl> mmm FilenameGeneratorTest.java <nl> 
mmm ItemDescriptionFragment.java <nl> ppp ItemDescriptionFragment.java <nl> - int backgroundColor = ta.getColor(0, UserPreferences.getTheme() == <nl> - R.style.Theme_AntennaPod_Dark ? Color.BLACK : Color.WHITE); <nl> + boolean black = UserPreferences.getTheme() == R.style.Theme_AntennaPod_Dark <nl> + || UserPreferences.getTheme() == R.style.Theme_AntennaPod_TrueBlack; <nl> 
mmm FeedItemMenuHandler.java <nl> ppp FeedItemMenuHandler.java <nl> - import android.os.Debug; <nl> - import android.view.Menu; <nl> - import android.view.MenuInflater; <nl> - import android.view.MenuItem; <nl> + import com.actionbarsherlock.view.Menu; <nl> + import com.actionbarsherlock.view.MenuInflater; <nl> 
mmm NewEpisodesFragment.java <nl> ppp NewEpisodesFragment.java <nl> + import android.widget.TextView; <nl> + ((TextView)root.findViewById(R.id.emptyViewTitle)).setText(R.string.no_new_episodes_head_label); <nl> + ((TextView)root.findViewById(R.id.emptyViewMessage)).setText(R.string.no_new_episodes_label); <nl> 
mmm MenuItemUtils.java <nl> ppp MenuItemUtils.java <nl> - if (UserPreferences.getTheme() == de.danoeh.antennapod.R.style.Theme_AntennaPod_Dark <nl> - || UserPreferences.getTheme() == R.style.Theme_AntennaPod_TrueBlack) { <nl> + if(UserPreferences.getTheme() == de.danoeh.antennapod.R.style.Theme_AntennaPod_Dark) { <nl> 
deleted file <nl> mmm Flavors.java <nl> - package de.danoeh.antennapod.core.util; <nl> - import de.danoeh.antennapod.core.BuildConfig; <nl> - public enum Flavors { <nl> - FREE, <nl> - PLAY, <nl> - UNKNOWN; <nl> - public static final Flavors FLAVOR; <nl> - static { <nl> - if (BuildConfig.FLAVOR.equals("free")) { <nl> 
mmm MediaplayerInfoActivity.java <nl> ppp MediaplayerInfoActivity.java <nl> - import com.viewpagerindicator.CirclePageIndicator; <nl> + import de.danoeh.antennapod.core.feed.Chapter; <nl> + import de.danoeh.antennapod.view.PagerIndicatorView; <nl> + private PagerIndicatorView pageIndicator; <nl> - CirclePageIndicator pageIndicator = findViewById(R.id.page_indicator); <nl> 
mmm AudioPlayer.java <nl> ppp AudioPlayer.java <nl> - import java.util.Collections; <nl> - import java.util.List; <nl> - private static final String TAG = "AudioPlayer"; <nl> - public AudioPlayer(Context context) { <nl> - super(context); <nl> - PreferenceManager.getDefaultSharedPreferences(context) <nl> - .registerOnSharedPreferenceChangeListener((sharedPreferences, key) -> { <nl> 
mmm QueueFragment.java <nl> ppp QueueFragment.java <nl> - import de.danoeh.antennapod.adapter.DefaultActionButtonCallback; <nl> - recyclerAdapter = new QueueRecyclerAdapter(activity, itemAccess, <nl> - new DefaultActionButtonCallback(activity), itemTouchHelper); <nl> + recyclerAdapter = new QueueRecyclerAdapter(activity, itemAccess, itemTouchHelper); <nl> 
mmm MediaplayerInfoActivity.java <nl> ppp MediaplayerInfoActivity.java <nl> - private Playable media; <nl> - if(pagerAdapter != null) { <nl> - pagerAdapter.setController(null); <nl> - } <nl> - if(pagerAdapter != null && controller != null && controller.getMedia() != media) { <nl> - media = controller.getMedia(); <nl> 
deleted file <nl> mmm NavDrawerFragment.java <nl> - package de.danoeh.antennapod.fragment; <nl> - import android.content.Context; <nl> - import android.content.DialogInterface; <nl> - import android.content.Intent; <nl> - import android.content.SharedPreferences; <nl> - import android.os.Bundle; <nl> - import android.util.Log; <nl> 
mmm ExternalMedia.java <nl> ppp ExternalMedia.java <nl> - import android.content.Context; <nl> - 	public void onPlaybackPause(Context context) { <nl> - 	} <nl> - 	@Override <nl> - 	public void onPlaybackCompleted(Context context) { <nl> + 	public void onPlaybackCompleted() { <nl> mmm Playable.java <nl> ppp Playable.java <nl> 
mmm MaxwellConfig.java <nl> ppp MaxwellConfig.java <nl> - 	public MaxwellMysqlConfig replicationMysql; <nl> - 	public MaxwellMysqlConfig maxwellMysql; <nl> + 	public String  mysqlHost; <nl> + 	public Integer mysqlPort; <nl> + 	public String  mysqlUser; <nl> + 	public String  mysqlPassword; <nl> - 		this.replicationMysql = new MaxwellMysqlConfig(); <nl> 
mmm MaxwellIntegrationTest.java <nl> ppp MaxwellIntegrationTest.java <nl> + 	@Test <nl> + 	public void testRunMinimalBinlog() throws Exception { <nl> + 		if ( server.getVersion().equals("5.5") ) <nl> + 			return; <nl> + 		try { <nl> + 			server.getConnection().createStatement().execute("set global binlog_row_image='minimal'"); <nl> 
mmm RowMapBuffer.java <nl> ppp RowMapBuffer.java <nl> + 	private Long serverId; <nl> + 	private Long threadId; <nl> + 		r.setServerId(this.serverId); <nl> + 		r.setThreadId(this.threadId); <nl> + 	public void setServerId(Long serverId) { <nl> + 		this.serverId = serverId; <nl> + 	} <nl> + 	public void setThreadId(Long threadId) { <nl> 
mmm Table.java <nl> ppp Table.java <nl> - import java.util.Arrays; <nl> - import org.apache.commons.lang.StringUtils; <nl> - 				} else if ( !Arrays.deepEquals(column.getEnumValues(), other.getEnumValues()) ) { <nl> - 					diffs.add(colName + "has an enum value mismatch, " <nl> - 									  + StringUtils.join(column.getEnumValues(), ",") <nl> 
mmm SchemaStoreTest.java <nl> ppp SchemaStoreTest.java <nl> - 	private MaxwellContext context; <nl> + 		this.schema = new SchemaCapturer(server.getConnection()).capture(); <nl> - 		this.context = buildContext(binlogPosition); <nl> - 		this.schema = new SchemaCapturer(server.getConnection(), context.getCaseSensitivity()).capture(); <nl> 
mmm SchemaStoreTest.java <nl> ppp SchemaStoreTest.java <nl> + import com.zendesk.maxwell.schema.columndef.IntColumnDef; <nl> - 		"CREATE TABLE shard_1.pks (id int(11), col2 varchar(255), col3 datetime, PRIMARY KEY(col2, col3, id))" <nl> + 		"CREATE TABLE shard_1.pks (id int(11), col2 varchar(255), col3 datetime, PRIMARY KEY(col2, col3, id))", <nl> 
deleted file <nl> mmm SchemaScavenger.java <nl> - package com.zendesk.maxwell.schema; <nl> - import com.zendesk.maxwell.RunLoopProcess; <nl> - import org.slf4j.Logger; <nl> - import org.slf4j.LoggerFactory; <nl> - import snaq.db.ConnectionPool; <nl> - import java.sql.Connection; <nl> - import java.sql.ResultSet; <nl> 
new file <nl> ppp SchemaStoreException.java <nl> + package com.zendesk.maxwell.schema; <nl> + public class SchemaStoreException extends Exception { <nl> + 	public SchemaStoreException (String message) { super(message); } <nl> + 	public SchemaStoreException (Exception e) { super(e); } <nl> + 	private static final long serialVersionUID = 1L; <nl> 
mmm MaxwellIntegrationTest.java <nl> ppp MaxwellIntegrationTest.java <nl> - import com.zendesk.maxwell.schema.SchemaStoreSchema; <nl> - 		SchemaStoreSchema.ensureMaxwellSchema(lowerCaseServer.getConnection(), context.getConfig().databaseName); <nl> + 		SchemaStore.ensureMaxwellSchema(lowerCaseServer.getConnection(), context.getConfig().databaseName); <nl> 
mmm MaxwellTestSupport.java <nl> ppp MaxwellTestSupport.java <nl> - import org.apache.commons.lang.StringUtils; <nl> + import org.apache.commons.lang3.StringUtils; <nl> mmm MysqlIsolatedServer.java <nl> ppp MysqlIsolatedServer.java <nl> - import org.apache.commons.lang.StringUtils; <nl> + import org.apache.commons.lang3.StringUtils; <nl> 
mmm ResolvedDatabaseCreate.java <nl> ppp ResolvedDatabaseCreate.java <nl> - import com.zendesk.maxwell.schema.Database; <nl> - import com.zendesk.maxwell.schema.Schema; <nl> + import com.zendesk.maxwell.schema.*; <nl> - 	@Override <nl> - 	public String databaseName() { <nl> - 		return database; <nl> - 	} <nl> 
mmm DateFormatter.java <nl> ppp DateFormatter.java <nl> - 			return new Timestamp((Long) value); <nl> + 			Long micros = (Long) value; <nl> + 			Timestamp t = new Timestamp(micros / 1000); <nl> + 			t.setNanos((int) (micros % 1000000) * 1000); <nl> + 			return t; <nl> mmm Maxwell.java <nl> ppp Maxwell.java <nl> 
mmm StdoutProducer.java <nl> ppp StdoutProducer.java <nl> - 		System.out.println(r.toJSON()); <nl> + 		System.out.println(r.toJSON(outputConfig)); <nl> deleted file <nl> mmm TestMaxwellReplicator.java <nl> - package com.zendesk.maxwell; <nl> - import com.google.code.or.binlog.BinlogEventV4; <nl> - import com.zendesk.maxwell.bootstrap.AbstractBootstrapper; <nl> 
mmm MysqlSchemaStore.java <nl> ppp MysqlSchemaStore.java <nl> + 	private final ConnectionPool replicationConnectionPool; <nl> - 	private final boolean replayMode; <nl> + 	private final boolean readOnly; <nl> + 	private final MaxwellFilter filter; <nl> - 							boolean replayMode) { <nl> + 							boolean readOnly) { <nl> 
mmm TableCreate.java <nl> ppp TableCreate.java <nl> - 	public String encoding; <nl> + 	public String charset; <nl> - 			Table t = d.buildTable(this.tableName, this.encoding, this.columns, this.pks); <nl> - 			t.setDefaultColumnEncodings(); <nl> + 			Table t = d.buildTable(this.tableName, this.charset, this.columns, this.pks); <nl> 
mmm ColorPicker.java <nl> ppp ColorPicker.java <nl> - import cn.qqtheme.framework.R; <nl> + import cn.qqtheme.framework.colorpicker.R; <nl> mmm FileAdapter.java <nl> ppp FileAdapter.java <nl> - import cn.qqtheme.framework.R; <nl> + import cn.qqtheme.framework.filepicker.R; <nl> - public static final String DIR_PARENT = "."; <nl> 
mmm CcToolchainProviderHelper.java <nl> ppp CcToolchainProviderHelper.java <nl> - new CcCompilationContext.Builder( <nl> + CcCompilationContext.builder( <nl> - CcToolchainVariables.Builder variables = new CcToolchainVariables.Builder(); <nl> + CcToolchainVariables.Builder variables = CcToolchainVariables.builder(); <nl> 
new file <nl> ppp ProguardLibrary.java <nl> + package com.google.devtools.build.lib.rules.java; <nl> + import com.google.common.collect.ImmutableList; <nl> + import com.google.common.collect.ImmutableMultimap; <nl> + import com.google.devtools.build.lib.actions.Artifact; <nl> + import com.google.devtools.build.lib.analysis.FilesToRunProvider; <nl> 
mmm DataBinding.java <nl> ppp DataBinding.java <nl> - private static final class EnabledDataBindingContext implements DataBindingContext { <nl> + private static final class EnabledDataBindingV1Context implements DataBindingContext { <nl> - private EnabledDataBindingContext(ActionConstructionContext actionConstructionContext) { <nl> 
new file <nl> ppp AndroidResourceCompilationActionTest.java <nl> + package com.google.devtools.build.android; <nl> + import static com.google.common.truth.Truth.assertThat; <nl> + import com.google.common.base.Function; <nl> + import com.google.common.base.Joiner; <nl> + import com.google.common.collect.ImmutableList; <nl> 
mmm InvalidatingNodeVisitor.java <nl> ppp InvalidatingNodeVisitor.java <nl> - import com.google.devtools.build.lib.concurrent.ThreadPoolExecutorParams; <nl> + import com.google.devtools.build.lib.concurrent.ExecutorParams; <nl> - import java.util.concurrent.ThreadPoolExecutor; <nl> + import java.util.concurrent.ExecutorService; <nl> 
new file <nl> ppp D.java <nl> + package com.google.devtools.build.android.r8.testdata.naming001; <nl> + @SuppressWarnings("PrivateConstructorForUtilityClass") <nl> + public class D { <nl> + public void keep() { <nl> + System.out.println(); <nl> + } <nl> + public static void main(String[] args) { <nl> + D d = new E(); <nl> 
mmm PrepareDepsOfTargetsUnderDirectoryFunctionTest.java <nl> ppp PrepareDepsOfTargetsUnderDirectoryFunctionTest.java <nl> - import com.google.devtools.build.skyframe.BuildDriver; <nl> - import org.junit.Before; <nl> - private SkyframeExecutor skyframeExecutor; <nl> - @Before <nl> - public final void setSkyframeExecutor() throws Exception { <nl> 
mmm Converters.java <nl> ppp Converters.java <nl> + import com.google.common.base.Splitter; <nl> + import com.google.common.collect.ImmutableList.Builder; <nl> + import com.google.devtools.build.android.aapt2.CompiledResources; <nl> + import com.google.devtools.build.android.aapt2.StaticLibrary; <nl> + import java.io.File; <nl> 
new file <nl> ppp SwigIncludeParser.java <nl> + package com.google.devtools.build.lib.includescanning; <nl> + import com.google.common.base.CharMatcher; <nl> + import com.google.devtools.build.lib.includescanning.IncludeParser.Inclusion.Kind; <nl> + class SwigIncludeParser extends IncludeParser { <nl> + SwigIncludeParser() { <nl> 
mmm AppleConfigurationApi.java <nl> ppp AppleConfigurationApi.java <nl> - import net.starlark.java.annot.StarlarkDeprecated; <nl> + "The value of ios_cpu for this configuration.") <nl> - @StarlarkDeprecated <nl> mmm Param.java <nl> ppp Param.java <nl> - * maps to the sentinal object {@link com.google.devtools.build.lib.syntax.Starlark#UNBOUND} <nl> 
mmm SkylarkNativeModule.java <nl> ppp SkylarkNativeModule.java <nl> + "The following functions are also available:") <nl> mmm SkylarkClassObjectConstructor.java <nl> ppp SkylarkClassObjectConstructor.java <nl> mmm SkylarkRuleClassFunctions.java <nl> ppp SkylarkRuleClassFunctions.java <nl> + import com.google.devtools.build.lib.analysis.ActionsProvider; <nl> 
new file <nl> ppp HttpException.java <nl> + package com.google.devtools.build.lib.remote.blobstore.http; <nl> + import io.netty.handler.codec.http.HttpResponseStatus; <nl> + import java.io.IOException; <nl> + final class HttpException extends IOException { <nl> + private final HttpResponseStatus status; <nl> 
new file <nl> ppp FakeAppleDynamicFrameworkInfo.java <nl> + package com.google.devtools.build.skydoc.fakebuildapi.apple; <nl> + import com.google.devtools.build.lib.collect.nestedset.NestedSet; <nl> + import com.google.devtools.build.lib.events.Location; <nl> + import com.google.devtools.build.lib.skylarkbuildapi.FileApi; <nl> 
mmm AndroidSkylarkData.java <nl> ppp AndroidSkylarkData.java <nl> - getProviders(deps, ProguardSpecProvider.class)); <nl> + getProviders(deps, ProguardSpecProvider.PROVIDER)); <nl> mmm JavaLiteProtoLibrary.java <nl> ppp JavaLiteProtoLibrary.java <nl> - .addOutputGroup( <nl> - OutputGroupInfo.DEFAULT, NestedSetBuilder.<Artifact>emptySet(STABLE_ORDER)) <nl> 
mmm ExperimentalEventHandler.java <nl> ppp ExperimentalEventHandler.java <nl> + case DEBUG: <nl> + case DEBUG: <nl> + terminal.setTextColor(Color.YELLOW); <nl> + break; <nl> mmm MethodLibrary.java <nl> ppp MethodLibrary.java <nl> - env.handleEvent(Event.warn(loc, msg)); <nl> + env.handleEvent(Event.debug(loc, msg)); <nl> 
mmm ReturnStatement.java <nl> ppp ReturnStatement.java <nl> - throws EvalException { <nl> + throws EvalException { <nl> mmm Statement.java <nl> ppp Statement.java <nl> - throws EvalException { <nl> + throws EvalException { <nl> mmm BinaryOperatorExpression.java <nl> ppp BinaryOperatorExpression.java <nl> - private static StackManipulation callImplementation(VariableScope scope, <nl> 
mmm CcLibraryConfiguredTargetTest.java <nl> ppp CcLibraryConfiguredTargetTest.java <nl> - "        '_whitelist_function_transition': attr.label(", <nl> + "        '_allowlist_function_transition': attr.label(", <nl> - "tools/whitelists/function_transition_whitelist/BUILD", <nl> + "tools/allowlists/function_transition_allowlist/BUILD", <nl> 
mmm DigestHashFunction.java <nl> ppp DigestHashFunction.java <nl> + import com.google.common.annotations.VisibleForTesting; <nl> + import java.security.MessageDigest; <nl> + import java.security.NoSuchAlgorithmException; <nl> + import java.util.Collection; <nl> - private final HashFunction hash; <nl> + private final HashFunction hashFunction; <nl> 
mmm CcBinary.java <nl> ppp CcBinary.java <nl> - CompilationInfo compilationInfo = compilationHelper.compile(); <nl> + CompilationInfo compilationInfo = compilationHelper.compile(ruleContext::ruleError); <nl> mmm SequencedSkyframeExecutorTest.java <nl> ppp SequencedSkyframeExecutorTest.java <nl> + import com.google.devtools.build.lib.analysis.config.CoreOptions; <nl> 
mmm ProcessUtils.java <nl> ppp ProcessUtils.java <nl> - import com.google.devtools.build.lib.unix.jni.UnixJniLoader; <nl> + import com.google.devtools.build.lib.jni.JniLoader; <nl> - private ProcessUtils() {} <nl> - if (!"0".equals(System.getProperty("io.bazel.EnableJni"))) { <nl> - UnixJniLoader.loadJni(); <nl> 
mmm ClassCacheTest.java <nl> ppp ClassCacheTest.java <nl> - import static com.google.devtools.build.lib.testutil.MoreAsserts.assertThrows; <nl> + import static org.junit.Assert.assertThrows; <nl> mmm JUnit4RunnerTest.java <nl> ppp JUnit4RunnerTest.java <nl> - import static com.google.devtools.build.lib.testutil.MoreAsserts.assertThrows; <nl> 
mmm ObjcCppSemantics.java <nl> ppp ObjcCppSemantics.java <nl> + import com.google.devtools.build.lib.packages.RuleErrorConsumer; <nl> - CppCompileActionBuilder actionBuilder) { <nl> + CppCompileActionBuilder actionBuilder, <nl> + RuleErrorConsumer ruleErrorConsumer) { <nl> mmm CppLinkstampCompileHelper.java <nl> 
mmm BuildFileAST.java <nl> ppp BuildFileAST.java <nl> - import static com.google.devtools.build.lib.syntax.Parser.Dialect.BUILD; <nl> - import static com.google.devtools.build.lib.syntax.Parser.Dialect.SKYLARK; <nl> - import com.google.common.annotations.VisibleForTesting; <nl> - @VisibleForTesting <nl> - static Pair<Boolean, ImmutableList<SkylarkImport>> fetchLoads( <nl> 
deleted file <nl> mmm WebStatusEventCollector.java <nl> - package com.google.devtools.build.lib.webstatusserver; <nl> - import com.google.common.annotations.VisibleForTesting; <nl> - import com.google.common.collect.ImmutableList; <nl> - import com.google.common.collect.ImmutableList.Builder; <nl> - import com.google.common.eventbus.EventBus; <nl> 
mmm BaseRuleClasses.java <nl> ppp BaseRuleClasses.java <nl> + import com.google.common.annotations.VisibleForTesting; <nl> - private static final LateBoundLabelList<BuildConfiguration> ACTION_LISTENER = <nl> + @VisibleForTesting <nl> + static final LateBoundLabelList<BuildConfiguration> ACTION_LISTENER = <nl> 
mmm ParsedAndroidResources.java <nl> ppp ParsedAndroidResources.java <nl> + import com.android.annotations.VisibleForTesting; <nl> + import com.google.common.base.MoreObjects; <nl> + import com.google.devtools.build.lib.analysis.actions.ActionConstructionContext; <nl> + import com.google.devtools.build.lib.rules.android.DataBinding.DataBindingContext; <nl> 
mmm AggregatedSpawnMetrics.java <nl> ppp AggregatedSpawnMetrics.java <nl> - map.put(kind, new SpawnMetrics.Builder().setExecKind(kind).build()); <nl> + map.put(kind, SpawnMetrics.Builder.forExec(kind).build()); <nl> - new SpawnMetrics.Builder() <nl> - .setExecKind(other.execKind()) <nl> + SpawnMetrics.Builder.forExec(other.execKind()) <nl> 
new file <nl> ppp ConfigAwareAspectBuilder.java <nl> + package com.google.devtools.build.lib.analysis.config; <nl> + import com.google.devtools.build.lib.packages.AspectDefinition; <nl> + import java.util.Collection; <nl> + public class ConfigAwareAspectBuilder { <nl> + private final AspectDefinition.Builder aspectBuilder; <nl> 
mmm SkylarkAttr.java <nl> ppp SkylarkAttr.java <nl> - if (!aspect.isExported()) { <nl> - throw new EvalException( <nl> - ast.getLocation(), <nl> - "Aspects should be top-level values in extension files that define them."); <nl> - } <nl> - builder.aspect(aspect, ast.getLocation()); <nl> + aspect.attachToAttribute(builder, ast.getLocation()); <nl> 
mmm WindowsJunctionCreatorTest.java <nl> ppp WindowsJunctionCreatorTest.java <nl> mmm MultisetSemaphoreTest.java <nl> ppp MultisetSemaphoreTest.java <nl> mmm StreamMultiplexerParallelStressTest.java <nl> ppp StreamMultiplexerParallelStressTest.java <nl> - import org.junit.Test; <nl> - import org.junit.runner.RunWith; <nl> 
mmm BuiltinFunction.java <nl> ppp BuiltinFunction.java <nl> + import com.google.devtools.build.lib.syntax.SkylarkSignatureProcessor.HackHackEitherList; <nl> + private Class<?> returnType; <nl> + this.returnType = annotation.returnType(); <nl> - Preconditions.checkArgument( <nl> - enforcedType.getType() == parameterType, msg); <nl> 
mmm AnalysisTestUtil.java <nl> ppp AnalysisTestUtil.java <nl> mmm SolibSymlinkAction.java <nl> ppp SolibSymlinkAction.java <nl> - public String getMnemonic() { return "SolibSymlink"; } <nl> + public String getMnemonic() { <nl> + return "SolibSymlink"; <nl> + } <nl> - protected String getRawProgressMessage() { return null; } <nl> 
new file <nl> ppp AbstractEvaluationTestCase.java <nl> + package com.google.devtools.build.lib.syntax; <nl> + import java.util.List; <nl> + public abstract class AbstractEvaluationTestCase extends AbstractParserTestCase { <nl> + public Object eval(String input) throws Exception { <nl> + return eval(parseExpr(input)); <nl> 
mmm PackageParser.java <nl> ppp PackageParser.java <nl> + import com.google.devtools.common.options.OptionDocumentationCategory; <nl> + import com.google.devtools.common.options.proto.OptionFilters.OptionEffectTag; <nl> - @Option(name = "sources", <nl> - defaultValue = "null", <nl> - converter = ArtifactLocationListConverter.class, <nl> 
mmm IncludeScanning.java <nl> ppp IncludeScanning.java <nl> + import com.google.devtools.build.lib.server.FailureDetails; <nl> + import com.google.devtools.build.lib.server.FailureDetails.FailureDetail; <nl> + import com.google.devtools.build.lib.server.FailureDetails.IncludeScanning.Code; <nl> - throw new EnvironmentalExecException(e); <nl> 
mmm FileSymlinkCycleUniquenessFunctionTest.java <nl> ppp FileSymlinkCycleUniquenessFunctionTest.java <nl> - Path root = new InMemoryFileSystem().getRootDirectory().getRelative("root"); <nl> + Path root = new InMemoryFileSystem().getPath("/root"); <nl> mmm ShowIncludesFilterTest.java <nl> ppp ShowIncludesFilterTest.java <nl> 
mmm ExecutableSymlinkActionTest.java <nl> ppp ExecutableSymlinkActionTest.java <nl> - .addDependency(OutputBaseSupplier.class, () -> execRoot) <nl> mmm BlazeRuntime.java <nl> ppp BlazeRuntime.java <nl> - public Path getOutputBase() { <nl> - return getWorkspace().getDirectories().getOutputBase(); <nl> - } <nl> 
mmm ArtifactFunction.java <nl> ppp ArtifactFunction.java <nl> + import com.google.devtools.build.lib.actions.ActionExecutionException; <nl> + import com.google.devtools.build.lib.bugreport.BugReport; <nl> - import com.google.devtools.build.skyframe.SkyFunctionException.Transience; <nl> + @Override <nl> + public String toString() { <nl> 
mmm AspectFunction.java <nl> ppp AspectFunction.java <nl> + import com.google.devtools.build.lib.packages.SkylarkAspect; <nl> - import com.google.devtools.build.lib.rules.SkylarkRuleClassFunctions.SkylarkAspect; <nl> - skylarkAspect.getDefinition(), <nl> + skylarkAspect.getDefinition(key.getParameters()), <nl> 
mmm JavaInfoBuildHelper.java <nl> ppp JavaInfoBuildHelper.java <nl> + JavaToolchainProvider toolchainProvider = getJavaToolchainProvider(javaToolchain); <nl> - .setJavacOpts(javacOpts); <nl> + .setJavacOpts( <nl> + ImmutableList.<String>builder() <nl> + .addAll( <nl> + JavaCommon.computeToolchainJavacOpts( <nl> 
mmm NdkPaths.java <nl> ppp NdkPaths.java <nl> + import com.google.common.base.Preconditions; <nl> - if (!Arrays.asList(excludedTools).contains(tool)) { <nl> + if (!Arrays.asList(excludedTools).contains(tool)) { <nl> + public String createBuiltinSysroot() { <nl> + Preconditions.checkState(majorRevision >= 15); <nl> 
mmm SkylarkIntegrationTest.java <nl> ppp SkylarkIntegrationTest.java <nl> + @Test <nl> + public void testHashFrozenList() throws Exception { <nl> + setSkylarkSemanticsOptions("--incompatible_disallow_hashing_frozen_mutables=false"); <nl> + scratch.file("test/extension.bzl", "y = []"); <nl> + scratch.file( <nl> 
mmm NestedSet.java <nl> ppp NestedSet.java <nl> + public E getSingleton() { <nl> + Preconditions.checkState(isSingleton()); <nl> + return (E) children; <nl> + } <nl> - ImmutableList<Artifact> bootclasspathEntries) { <nl> + NestedSet<Artifact> bootclasspathEntries) { <nl> - .addAll(bootclasspathEntries) <nl> + .addTransitive(bootclasspathEntries) <nl> 
mmm ActionExecutionContext.java <nl> ppp ActionExecutionContext.java <nl> + import com.google.common.collect.ImmutableMap; <nl> + import java.util.Map; <nl> - return new ActionExecutionContext(executor, actionInputFileCache, metadataHandler, fileOutErr, <nl> - artifactExpander, env); <nl> + return new ActionExecutionContext( <nl> 
mmm BlazeQueryEnvironment.java <nl> ppp BlazeQueryEnvironment.java <nl> + import com.google.devtools.build.lib.query2.engine.MinDepthUniquifier; <nl> - import com.google.devtools.build.lib.query2.engine.QueryUtil.AbstractUniquifier; <nl> + import com.google.devtools.build.lib.query2.engine.QueryUtil.ThreadSafeMinDepthUniquifierImpl; <nl> 
mmm SkylarkDocumentationCollector.java <nl> ppp SkylarkDocumentationCollector.java <nl> - import com.google.devtools.build.docgen.skylark.SkylarkConstructorMethodDoc; <nl> - import com.google.devtools.build.docgen.skylark.SkylarkJavaMethodDoc; <nl> - import com.google.devtools.build.docgen.skylark.SkylarkModuleDoc; <nl> 
mmm OptionDefinitionTest.java <nl> ppp OptionDefinitionTest.java <nl> - boolean isBoolean = mockOptionDef.isBooleanField(); <nl> + boolean isBoolean = mockOptionDef.usesBooleanValueSyntax(); <nl> - boolean isBoolean = mockOptionDef.isBooleanField(); <nl> + boolean isBoolean = mockOptionDef.usesBooleanValueSyntax(); <nl> 
mmm RemoteActionContextProvider.java <nl> ppp RemoteActionContextProvider.java <nl> - import com.google.devtools.build.lib.exec.ActionContextProvider; <nl> + import com.google.devtools.build.lib.exec.ExecutorBuilder; <nl> - final class RemoteActionContextProvider extends ActionContextProvider <nl> - implements ExecutorLifecycleListener { <nl> 
mmm CppLinkAction.java <nl> ppp CppLinkAction.java <nl> + import com.google.devtools.build.lib.server.FailureDetails.CppLink; <nl> + import com.google.devtools.build.lib.server.FailureDetails.CppLink.Code; <nl> + import com.google.devtools.build.lib.server.FailureDetails.FailureDetail; <nl> + import com.google.devtools.build.lib.util.DetailedExitCode; <nl> 
mmm DottedVersion.java <nl> ppp DottedVersion.java <nl> - public static final ObjectCodec<DottedVersion> CODEC = <nl> - new ObjectCodec<DottedVersion>() { <nl> - @Override <nl> - public void serialize( <nl> - SerializationContext context, DottedVersion obj, CodedOutputStream codedOut) <nl> - throws IOException { <nl> 
mmm MavenJarFunction.java <nl> ppp MavenJarFunction.java <nl> - import com.google.devtools.build.lib.cmdline.PackageIdentifier.RepositoryName; <nl> + import com.google.devtools.build.lib.cmdline.RepositoryName; <nl> mmm PrepareDepsOfTargetsUnderDirectoryFunction.java <nl> ppp PrepareDepsOfTargetsUnderDirectoryFunction.java <nl> 
mmm CppConfiguration.java <nl> ppp CppConfiguration.java <nl> + import com.google.devtools.build.lib.actions.PackageRootResolutionException; <nl> - Root sysrootRoot = Iterables.getOnlyElement( <nl> + Root sysrootRoot; <nl> + try { <nl> + sysrootRoot = Iterables.getOnlyElement( <nl> + } catch (PackageRootResolutionException prre) { <nl> 
mmm CppConfigurationLoader.java <nl> ppp CppConfigurationLoader.java <nl> - CcToolchainConfigInfo.fromToolchain( <nl> - file.getProto(), <nl> - toolchain, <nl> - crosstoolTopLabel.getPackageIdentifier().getPathUnderExecRoot()); <nl> + CcToolchainConfigInfo.fromToolchain(file.getProto(), toolchain); <nl> mmm CcModule.java <nl> 
mmm BuildEventConverters.java <nl> ppp BuildEventConverters.java <nl> + ArtifactGroupNamer artifactGroupNamer(); <nl> mmm BuildEventTransportFactoryTest.java <nl> ppp BuildEventTransportFactoryTest.java <nl> + import com.google.devtools.build.lib.buildeventstream.ArtifactGroupNamer; <nl> + @Mock public ArtifactGroupNamer artifactGroupNamer; <nl> 
mmm CcBinary.java <nl> ppp CcBinary.java <nl> - LinkStaticness linkStaticness = getLinkStaticness(ruleContext, linkopts, cppConfiguration); <nl> + LinkStaticness linkStaticness = <nl> + getLinkStaticness(ruleContext, linkopts, cppConfiguration, ccToolchain); <nl> - private static final LinkStaticness getLinkStaticness(RuleContext context, <nl> 
mmm package-info.java <nl> ppp package-info.java <nl> mmm UseRestrictedAnnotation.java <nl> ppp UseRestrictedAnnotation.java <nl> mmm TypeAnnotationTest2.java <nl> ppp TypeAnnotationTest2.java <nl> mmm ElementType.java <nl> ppp ElementType.java <nl> mmm UseDeprecatedParts.java <nl> ppp UseDeprecatedParts.java <nl> 
mmm JavaLibraryBuildRequest.java <nl> ppp JavaLibraryBuildRequest.java <nl> + import com.google.common.base.Joiner; <nl> + import com.google.common.base.Splitter; <nl> + import com.google.common.collect.ImmutableSet; <nl> + import com.google.common.collect.Iterables; <nl> + import com.google.devtools.build.buildjar.javac.BlazeJavacArguments; <nl> 
mmm SkylarkAspectsTest.java <nl> ppp SkylarkAspectsTest.java <nl> - OutputGroupProvider outputGroupProvider = <nl> - aspectValue.getConfiguredAspect().getProvider(OutputGroupProvider.class); <nl> + OutputGroupProvider outputGroupProvider = OutputGroupProvider.get( <nl> + aspectValue.getConfiguredAspect()); <nl> 
mmm SkyFunctionException.java <nl> ppp SkyFunctionException.java <nl> - if (exceptionClass.equals(ValueOrExceptionUtils.BottomException.class)) { <nl> - return; <nl> - } <nl> + "RuntimeException. Don't do this since then you would potentially swallow all " <nl> mmm SkyFunctionEnvironment.java <nl> ppp SkyFunctionEnvironment.java <nl> 
mmm OptionsUsage.java <nl> ppp OptionsUsage.java <nl> - return optionsData.getEvaluatedExpansion(optionField); <nl> + try { <nl> + return optionsData.getEvaluatedExpansion(optionField, null); <nl> + } catch (ExpansionNeedsValueException e) { <nl> + return null; <nl> + } catch (OptionsParsingException e) { <nl> 
mmm WorkspaceStatusAction.java <nl> ppp WorkspaceStatusAction.java <nl> + import com.google.devtools.build.lib.skyframe.serialization.autocodec.AutoCodec; <nl> + @AutoCodec(strategy = AutoCodec.Strategy.PUBLIC_FIELDS) <nl> mmm BuildInfoCollection.java <nl> ppp BuildInfoCollection.java <nl> + import com.google.devtools.build.lib.skyframe.serialization.autocodec.AutoCodec; <nl> 
mmm CcImportConfiguredTargetTest.java <nl> ppp CcImportConfiguredTargetTest.java <nl> - import static com.google.common.truth.Truth.assertThat; <nl> - import com.google.devtools.build.lib.actions.Artifact; <nl> - import com.google.devtools.build.lib.analysis.ConfiguredTarget; <nl> - import com.google.devtools.build.lib.analysis.util.AnalysisMock; <nl> 
mmm BaseJavaCompilationHelper.java <nl> ppp BaseJavaCompilationHelper.java <nl> + protected final JavaToolchainProvider javaToolchain; <nl> + this.javaToolchain = JavaToolchainProvider.fromRuleContext(ruleContext); <nl> + Artifact javac = javaToolchain.getJavac(); <nl> + if (javac != null) { <nl> + return javac; <nl> 
mmm CcCompilationHelper.java <nl> ppp CcCompilationHelper.java <nl> - CppHelper.shouldCreatePerObjectDebugInfo( <nl> - cppConfiguration, ccToolchain, featureConfiguration) <nl> - && !bitcodeOutput, <nl> + ccToolchain.shouldCreatePerObjectDebugInfo(featureConfiguration) && !bitcodeOutput, <nl> - boolean generateDwo = <nl> 
mmm JsonObject.java <nl> ppp JsonObject.java <nl> + public int size() { <nl> + return members.size(); <nl> + } <nl> + public void testNonPrimitiveFieldAnnotationTakesPrecedenceOverDefault() { <nl> + Gson gson = new Gson(); <nl> + String json = gson.toJson(new GadgetWithOptionalPart(new Part("foo"))); <nl> + assertEquals("{\"part\":\"PartJsonFieldAnnotationAdapter\"}", json); <nl> 
mmm TypeAdapters.java <nl> ppp TypeAdapters.java <nl> - private TypeAdapters() {} <nl> + private TypeAdapters() { <nl> + throw new UnsupportedOperationException(); <nl> + } <nl> mmm FieldNamingPolicy.java <nl> ppp FieldNamingPolicy.java <nl> + import java.util.Locale; <nl> - return separateCamelCase(f.getName(), "_").toLowerCase(); <nl> 
mmm ShapeExportSettings.java <nl> ppp ShapeExportSettings.java <nl> + public static final String EXPORT_FOLDER_NAME = "shapes"; <nl> mmm ImageExportSettings.java <nl> ppp ImageExportSettings.java <nl> + * License along with this library. <nl> + */ <nl> + public static final String EXPORT_FOLDER_NAME = "images"; <nl> 
mmm FontTag.java <nl> ppp FontTag.java <nl> - return SHAPERECORD.shapeListToImage(getGlyphShapeTable(), 500, 500, Color.black); <nl> + return SHAPERECORD.shapeListToImage(swf, getGlyphShapeTable(), 500, 500, Color.black); <nl> mmm DefineShape3Tag.java <nl> ppp DefineShape3Tag.java <nl> - import com.jpexs.decompiler.flash.types.shaperecords.SHAPERECORD; <nl> 
mmm ConvertUIns.java <nl> ppp ConvertUIns.java <nl> + public String getTargetType(ConstantPool constants,AVM2Instruction ins){ <nl> + return "uint"; <nl> + } <nl> mmm ConvertOIns.java <nl> ppp ConvertOIns.java <nl> + public String getTargetType(ConstantPool constants,AVM2Instruction ins){ <nl> + return "Object"; <nl> 
mmm AS3Generator.java <nl> ppp AS3Generator.java <nl> - import com.jpexs.decompiler.flash.helpers.HilightedText; <nl> mmm TraitSlotConst.java <nl> ppp TraitSlotConst.java <nl> - import com.jpexs.decompiler.flash.helpers.HilightedTextWriter; <nl> mmm Graph.java <nl> ppp Graph.java <nl> - import com.jpexs.decompiler.flash.helpers.hilight.Highlighting; <nl> 
mmm ExportDialog.java <nl> ppp ExportDialog.java <nl> - package com.jpexs.decompiler.flash.gui; <nl> - import com.jpexs.decompiler.flash.abc.ScriptPack; <nl> - import com.jpexs.decompiler.flash.configuration.Configuration; <nl> - import com.jpexs.decompiler.flash.exporters.modes.BinaryDataExportMode; <nl> 
mmm DefineSpriteTag.java <nl> ppp DefineSpriteTag.java <nl> - SWF.frameToImage(getTimeline(), frame, time, renderContext, image, isClip, transformation, absoluteTransformation, colorTransform); <nl> + getTimeline().toImage(frame, time, ratio, renderContext, image, isClip, transformation, absoluteTransformation, colorTransform); <nl> 
mmm ActionScript3Parser.java <nl> ppp ActionScript3Parser.java <nl> - abc.createBodyIdxFromMethodIdxMap(); <nl> + abc.getMethodIndexing(); <nl> mmm AdobeFlashExecutor.java <nl> ppp AdobeFlashExecutor.java <nl> - MethodBody methodBody = methodInfo.getBody(); <nl> + MethodBody methodBody = abc.findBody(methodInfo); <nl> 
mmm Timeline.java <nl> ppp Timeline.java <nl> - package com.jpexs.decompiler.flash.timeline; <nl> - import com.jpexs.decompiler.flash.SWF; <nl> - import com.jpexs.decompiler.flash.exporters.FrameExporter; <nl> - import com.jpexs.decompiler.flash.exporters.commonshape.ExportRectangle; <nl> - import com.jpexs.decompiler.flash.exporters.commonshape.Matrix; <nl> 
mmm MatchTest.java <nl> ppp MatchTest.java <nl> - TokenEntry mark1 = new TokenEntry("public", "/var/Foo.java", 1); <nl> - TokenEntry mark2 = new TokenEntry("class", "/var/Foo.java", 1); <nl> + int lineCount1 = 10; <nl> + String codeFragment1 = "code fragment"; <nl> + Mark mark1 = createMark("public", "/var/Foo.java", 1, lineCount1, codeFragment1); <nl> 
mmm CPDConfiguration.java <nl> ppp CPDConfiguration.java <nl> - import java.beans.IntrospectionException; <nl> - import java.lang.reflect.InvocationTargetException; <nl> - setRendererEncoding(renderer, encoding); <nl> - return renderer; <nl> - } catch (Exception e) { <nl> - System.err.println("Couldn't instantiate renderer, defaulting to SimpleRenderer: " + e); <nl> 
new file <nl> ppp CursorForLoopTest.java <nl> + package net.sourceforge.pmd.lang.plsql.ast; <nl> + import org.junit.Assert; <nl> + import org.junit.Test; <nl> + import net.sourceforge.pmd.lang.plsql.AbstractPLSQLParserTst; <nl> + public class CursorForLoopTest extends AbstractPLSQLParserTst { <nl> + @Test <nl> 
mmm Designer.java <nl> ppp Designer.java <nl> - import net.sourceforge.pmd.RuleSetFactory; <nl> + 			RuleSet rs = new RuleSet(); <nl> - 			    final RuleSet rs = new RuleSetFactory().createSingleRuleRuleSet(dfaGraphRule); <nl> - 			RuleContext ctx = new RuleContext(); <nl> - 			ctx.setSourceCodeFilename("[no filename]." + languageVersion.getLanguage().getExtensions().get(0)); <nl> 
mmm CommentDefaultAccessModifierRule.java <nl> ppp CommentDefaultAccessModifierRule.java <nl> - import net.sourceforge.pmd.properties.StringProperty; <nl> + import net.sourceforge.pmd.properties.RegexProperty; <nl> - private static final StringProperty REGEX_DESCRIPTOR = new StringProperty("regex", "Regular expression", "", 1.0f); <nl> 
deleted file <nl> mmm CanSuppressWarnings.java <nl> - package net.sourceforge.pmd.lang.apex.ast; <nl> - import net.sourceforge.pmd.Rule; <nl> - public interface CanSuppressWarnings { <nl> - boolean hasSuppressWarningsAnnotationFor(Rule rule); <nl> - }new file <nl> + package net.sourceforge.pmd.lang.vf; <nl> 
mmm XmlParserTest.java <nl> ppp XmlParserTest.java <nl> - Node document = parser.parse(null, new StringReader(xml)); <nl> - return document; <nl> + return parser.parse(null, new StringReader(xml)); <nl> + @Test <nl> + public void testAutoclosingElementLength() { <nl> + final String xml = "<elementName att1='foo' att2='bar' att3='other' />"; <nl> 
mmm ObjectiveCHandler.java <nl> ppp ObjectiveCHandler.java <nl> + @Deprecated <nl> mmm CsLanguageModule.java <nl> ppp CsLanguageModule.java <nl> + @Deprecated <nl> mmm MatlabHandler.java <nl> ppp MatlabHandler.java <nl> + @Deprecated <nl> mmm CppParser.java <nl> ppp CppParser.java <nl> + @Deprecated <nl> + @Deprecated <nl> 
mmm RuleDocGenerator.java <nl> ppp RuleDocGenerator.java <nl> + lines.add("tags: [rule_references, " + languageTersename + "]"); <nl> + lines.add("summary: Index of all built-in rules available for " + entry.getKey().getName()); <nl> + lines.add("language_name: " + entry.getKey().getName()); <nl> - lines.add("```"); <nl> 
new file <nl> ppp ScalaWrapperNode.java <nl> + package net.sourceforge.pmd.lang.scala.ast; <nl> + import java.util.ArrayList; <nl> + import java.util.Collections; <nl> + import java.util.Iterator; <nl> + import java.util.List; <nl> + import java.util.Objects; <nl> + import net.sourceforge.pmd.lang.ast.AbstractNode; <nl> 
mmm MainDesignerController.java <nl> ppp MainDesignerController.java <nl> - import java.net.URL; <nl> - import java.util.ResourceBundle; <nl> + import org.controlsfx.control.BreadCrumbBar; <nl> + import net.sourceforge.pmd.util.fxdesigner.util.AbstractController; <nl> - import net.sourceforge.pmd.util.fxdesigner.util.beans.SettingsOwner; <nl> 
mmm JavaParserVisitorAdapter.java <nl> ppp JavaParserVisitorAdapter.java <nl> + @Override <nl> + public Object visit(ASTSwitchBlockGroup node, Object data) { <nl> + return visit((JavaNode) node, data); <nl> + } <nl> + @Override <nl> + public Object visit(ASTSwitchExpression node, Object data) { <nl> + return visit((JavaNode) node, data); <nl> 
mmm ApexMetricsVisitor.java <nl> ppp ApexMetricsVisitor.java <nl> + import java.util.Stack; <nl> - import net.sourceforge.pmd.lang.apex.ast.ASTUserClass; <nl> - import net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorAdapter; <nl> + import net.sourceforge.pmd.lang.apex.ast.ASTUserClassOrInterface; <nl> + import net.sourceforge.pmd.lang.apex.ast.ApexParserVisitorReducedAdapter; <nl> 
mmm PMDTask.java <nl> ppp PMDTask.java <nl> + private String cacheLocation; <nl> + public String getCacheLocation() { <nl> + return cacheLocation; <nl> + } <nl> + public void setCacheLocation(String cacheLocation) { <nl> + this.cacheLocation = cacheLocation; <nl> + } <nl> mmm SourceCodeProcessor.java <nl> ppp SourceCodeProcessor.java <nl> 
new file <nl> ppp FieldDeclarationsShouldBeAtStartTest.java <nl> + package net.sourceforge.pmd.lang.apex.rule.codestyle; <nl> + import net.sourceforge.pmd.testframework.PmdRuleTst; <nl> + public class FieldDeclarationsShouldBeAtStartTest extends PmdRuleTst { <nl> + } <nl> mmm ApexCRUDViolationRule.java <nl> 
mmm PMDASMClassLoaderTest.java <nl> ppp PMDASMClassLoaderTest.java <nl> - assertEquals("java.util.Map$Entry", imports.get("Map$Entry")); <nl> + assertEquals("java.util.StringTokenizer", imports.get("StringTokenizer")); <nl> mmm ClassTypeResolverTest.java <nl> ppp ClassTypeResolverTest.java <nl> + import java.io.IOException; <nl> 
mmm RuleTst.java <nl> ppp RuleTst.java <nl> - if (report.size() != expected.size()) { <nl> + if (report.getViolationTree().size() != expected.size()) { <nl> + "number of violations for test case '" + test.getDescription() + "'"); <nl> - Iterator<RuleViolation> it = report.iterator(); <nl> + Iterator<RuleViolation> it = report.getViolationTree().iterator(); <nl> 
new file <nl> ppp Visitor.java <nl> + package net.sourceforge.pmd.lang.rule.xpath.internal; <nl> + import net.sf.saxon.expr.AxisExpression; <nl> + import net.sf.saxon.expr.Expression; <nl> + import net.sf.saxon.expr.FilterExpression; <nl> + import net.sf.saxon.expr.LetExpression; <nl> + import net.sf.saxon.expr.PathExpression; <nl> 
new file <nl> ppp SigMask.java <nl> + package net.sourceforge.pmd.lang.java.metrics; <nl> + import java.util.Arrays; <nl> + import java.util.HashSet; <nl> + import java.util.Set; <nl> + import net.sourceforge.pmd.lang.java.metrics.Signature.Visibility; <nl> + public abstract class SigMask<T extends Signature> { <nl> 
mmm RuleSet.java <nl> ppp RuleSet.java <nl> + import java.util.logging.Level; <nl> + import java.util.logging.Logger; <nl> + private static final Logger LOG = Logger.getLogger(RuleSet.class.getName()); <nl> - 			if (!rule.usesRuleChain() && applies(rule, ctx.getLanguageVersion())) { <nl> - 				rule.apply(acuList, ctx); <nl> 
mmm ASTClassOrInterfaceDeclaration.java <nl> ppp ASTClassOrInterfaceDeclaration.java <nl> mmm ASTAnnotationTypeMemberDeclaration.java <nl> ppp ASTAnnotationTypeMemberDeclaration.java <nl> - public class ASTAnnotationTypeMemberDeclaration extends AbstractTypeBodyDeclaration { <nl> + public class ASTAnnotationTypeMemberDeclaration extends AbstractJavaNode implements ASTAnyTypeBodyDeclaration { <nl> 
new file <nl> ppp AntlrTokenFilter.java <nl> + package net.sourceforge.pmd.cpd.token; <nl> + import static org.antlr.v4.runtime.Token.EOF; <nl> + import net.sourceforge.pmd.lang.antlr.AntlrTokenManager; <nl> + public class AntlrTokenFilter extends BaseTokenFilter<AntlrToken> { <nl> + private boolean discardingHiddenTokens = false; <nl> 
mmm RulesetsFactoryUtils.java <nl> ppp RulesetsFactoryUtils.java <nl> - return getRulesetFactory(configuration, new ResourceLoader()); <nl> + return createFactory(configuration, RulesetsFactoryUtils.class.getClassLoader()); <nl> + } <nl> + public static RuleSetFactory defaultFactory() { <nl> + return new RuleSetFactory(); <nl> 
mmm DAAPathFinder.java <nl> ppp DAAPathFinder.java <nl> + * @deprecated See {@link DataFlowNode} <nl> + @Deprecated <nl> mmm SequenceException.java <nl> ppp SequenceException.java <nl> + @Deprecated <nl> mmm VariableAccess.java <nl> ppp VariableAccess.java <nl> + @Deprecated <nl> mmm StackObject.java <nl> ppp StackObject.java <nl> 
mmm UsageGraph.java <nl> ppp UsageGraph.java <nl> + import net.sourceforge.pmd.dcd.DCD; <nl> + @Deprecated <nl> mmm FieldNode.java <nl> ppp FieldNode.java <nl> + import net.sourceforge.pmd.dcd.DCD; <nl> + @Deprecated <nl> mmm UsageGraphBuilder.java <nl> ppp UsageGraphBuilder.java <nl> + import net.sourceforge.pmd.dcd.DCD; <nl> 
deleted file <nl> mmm FunctionalTest.java <nl> - package test.net.sourceforge.pmd; <nl> - import junit.framework.TestCase; <nl> - import java.io.File; <nl> - import java.io.FileInputStream; <nl> - import java.io.FileNotFoundException; <nl> - import java.util.Iterator; <nl> - import net.sourceforge.pmd.*; <nl> 
mmm MethodNamingConventions.java <nl> ppp MethodNamingConventions.java <nl> - RuleContext ctx = (RuleContext) data; <nl> - ctx.getReport().addRuleViolation(createRuleViolation(ctx, node, getMessage())); <nl> + addViolation(data, node); <nl> mmm JUnitAssertionsShouldIncludeMessage.java <nl> ppp JUnitAssertionsShouldIncludeMessage.java <nl> 
new file <nl> ppp LuaTokenizerTest.java <nl> + package net.sourceforge.pmd.cpd; <nl> + import java.io.IOException; <nl> + import java.nio.charset.StandardCharsets; <nl> + import java.util.Arrays; <nl> + import java.util.Collection; <nl> + import org.apache.commons.io.IOUtils; <nl> + import org.junit.Before; <nl> 
mmm XPathRuleTest.java <nl> ppp XPathRuleTest.java <nl> - import net.sourceforge.pmd.lang.ast.DummyNodeWithListAndEnum; <nl> - @Test <nl> - public void testListAttributeDeprecation20() { <nl> - XPathRule xpr = makeRuleWithList("TestRuleWithListAccess"); <nl> - loggingRule.clear(); <nl> - RuleContext ctx = new RuleContext(); <nl> 
mmm OperationSigMask.java <nl> ppp OperationSigMask.java <nl> - public final class OperationSigMask extends SigMask<JavaOperationSignature> { <nl> + public final class OperationSigMask extends JavaSigMask<JavaOperationSignature> { <nl> mmm JavaSigMask.java <nl> ppp JavaSigMask.java <nl> + import net.sourceforge.pmd.lang.metrics.SigMask; <nl> 
mmm CycloPathAwareDecorator.java <nl> ppp CycloPathAwareDecorator.java <nl> - @Deprecated <nl> mmm ASTForUpdate.java <nl> ppp ASTForUpdate.java <nl> - import net.sourceforge.pmd.annotation.InternalApi; <nl> - @InternalApi <nl> - @Deprecated <nl> - @InternalApi <nl> - @Deprecated <nl> mmm ASTForStatement.java <nl> 
mmm NodeVisitorAcceptor.java <nl> ppp NodeVisitorAcceptor.java <nl> + import net.sourceforge.pmd.dcd.DCD; <nl> + @Deprecated <nl> mmm DCD.java <nl> ppp DCD.java <nl> + * <nl> + * @deprecated DCD was never fully implemented, it has not been touched since the initial commit in 2008. <nl> + *             All its codebase will be removed for PMD 7.0.0. Do not use it. <nl> 
new file <nl> ppp UselessOverridingMethodHashCode.java <nl> + package net.sourceforge.pmd.lang.java.rule.design.uselessoverridingmethod; <nl> + public class UselessOverridingMethodHashCode { <nl> + @Override <nl> + public int hashCode() { <nl> + return super.hashCode(); <nl> + } <nl> + @Override <nl> + public boolean equals(Object obj) { <nl> 
mmm EventLogger.java <nl> ppp EventLogger.java <nl> - import javafx.collections.FXCollections; <nl> - import javafx.collections.ObservableList; <nl> + import java.util.Objects; <nl> + import org.reactfx.EventStream; <nl> + import org.reactfx.value.Var; <nl> - private ObservableList<LogEntry> log = FXCollections.observableArrayList(); <nl> 
mmm AbstractScope.java <nl> ppp AbstractScope.java <nl> - public void addVariableDeclaration(NameDeclaration nameDecl) { <nl> + public void addVariableDeclaration(VariableNameDeclaration nameDecl) { <nl> - NameDeclaration nameDeclaration = (NameDeclaration)i.next(); <nl> + VariableNameDeclaration nameDeclaration = (VariableNameDeclaration)i.next(); <nl> 
mmm PMDTask.java <nl> ppp PMDTask.java <nl> + private String cacheLocation; <nl> + public String getCacheLocation() { <nl> + return cacheLocation; <nl> + } <nl> + public void setCacheLocation(String cacheLocation) { <nl> + this.cacheLocation = cacheLocation; <nl> + } <nl> new file <nl> ppp AnalysisResult.java <nl> 
mmm FieldAccessStatic.java <nl> ppp FieldAccessStatic.java <nl> - import static net.sourceforge.pmd.typeresolution.testdata.dummytypes.StaticMembers.*; <nl> - import static net.sourceforge.pmd.typeresolution.testdata.dummytypes.StaticMembers.staticPrimitive; <nl> + import static net.sourceforge.pmd.typeresolution.testdata.dummytypes.StaticFields.*; <nl> 
mmm TextPadRenderer.java <nl> ppp TextPadRenderer.java <nl> - StringBuffer buf = new StringBuffer(); <nl> + StringBuilder buf = new StringBuilder(); <nl> mmm ClassStats.java <nl> ppp ClassStats.java <nl> + import net.sourceforge.pmd.lang.java.ast.JavaQualifiedName; <nl> - import net.sourceforge.pmd.lang.java.qname.JavaTypeQualifiedName; <nl> 
mmm ApexParserVisitorAdapter.java <nl> ppp ApexParserVisitorAdapter.java <nl> + @Override <nl> + public Object visit(AbstractApexNodeBase node, Object data) { <nl> + return node.childrenAccept(this, data); <nl> + } <nl> + @Override <nl> + public Object visit(ASTFormalComment node, Object data) { <nl> + return visit((AbstractApexNodeBase) node, data); <nl> 
mmm SystemUtils.java <nl> ppp SystemUtils.java <nl> - 	     * 3565001 <nl> - 	     * 1701832 <nl> deleted file <nl> mmm JspParserTokenManager.java <nl> - package net.sourceforge.pmd.lang.jsp.ast; <nl> - import net.sourceforge.pmd.lang.ast.CharStream; <nl> - import net.sourceforge.pmd.lang.ast.TokenMgrError; <nl> 
deleted file <nl> mmm SyntaxHighlightingCodeArea.java <nl> - package net.sourceforge.pmd.util.fxdesigner.util.codearea; <nl> - import java.time.Duration; <nl> - import java.util.Collection; <nl> - import java.util.Collections; <nl> - import java.util.HashSet; <nl> - import java.util.Objects; <nl> - import java.util.Optional; <nl> 
new file <nl> ppp SwitchRules.java <nl> + public class SwitchRules { <nl> + private static final int MONDAY = 1; <nl> + private static final int TUESDAY = 2; <nl> + private static final int WEDNESDAY = 3; <nl> + private static final int THURSDAY = 4; <nl> + private static final int FRIDAY = 5; <nl> + private static final int SATURDAY = 6; <nl> 
mmm Attribute.java <nl> ppp Attribute.java <nl> + public String getName() { <nl> + return name; <nl> + } <nl> + public Node getParent() { <nl> + return parent; <nl> + } <nl> - if (v == null) { <nl> - stringValue = ""; <nl> - } else { <nl> - stringValue = String.valueOf(v); <nl> - } <nl> + stringValue = v == null ? "" : String.valueOf(v); <nl> 
new file <nl> ppp ASTRegexpLikeCondition.java <nl> + package net.sourceforge.pmd.lang.plsql.ast; <nl> + public class ASTRegexpLikeCondition extends net.sourceforge.pmd.lang.plsql.ast.AbstractPLSQLNode { <nl> + private String matchParam; <nl> + public ASTRegexpLikeCondition(int id) { <nl> + super(id); <nl> + } <nl> 
deleted file <nl> mmm Java17Parser.java <nl> - package net.sourceforge.pmd.lang.java; <nl> - import java.io.Reader; <nl> - import net.sourceforge.pmd.lang.ParserOptions; <nl> - import net.sourceforge.pmd.lang.java.ast.JavaParser; <nl> - import net.sourceforge.pmd.lang.java.ast.ParseException; <nl> - public class Java17Parser extends AbstractJavaParser { <nl> 
mmm NcssCountImportsDecorator.java <nl> ppp NcssCountImportsDecorator.java <nl> + * <nl> + * @deprecated Visitor decorators are deprecated because they lead to fragile code. <nl> + * Customise {@link NcssVisitor} instead. <nl> + @Deprecated <nl> mmm AnalysisResult.java <nl> ppp AnalysisResult.java <nl> - import java.nio.file.Files; <nl> 
mmm PMDParameters.java <nl> ppp PMDParameters.java <nl> - description = "Specifies the string that marks the a line which PMD should ignore; default is NOPMD.") <nl> + description = "Specifies the string that marks a line which PMD should ignore; default is NOPMD.") <nl> - @Parameter(names = "-cache", description = "Specify the location of the cache file for incremental analysis.") <nl> 
mmm UseStringBufferForStringAppendsRule.java <nl> ppp UseStringBufferForStringAppendsRule.java <nl> + int usageCounter = 0; <nl> + ASTAssignmentOperator assignmentOperator = statement <nl> + .getFirstDescendantOfType(ASTAssignmentOperator.class); <nl> - ASTAssignmentOperator assignmentOperator = statement <nl> 
mmm XMLRendererTest.java <nl> ppp XMLRendererTest.java <nl> - public class XMLRendererTest extends AbstractRendererTst { <nl> + public class XMLRendererTest extends AbstractRendererTest { <nl> - return getHeader() + "<file name=\"n/a\">" + PMD.EOL <nl> + return getHeader() + "<file name=\"" + getSourceCodeFilename() + "\">" + PMD.EOL <nl> 
mmm JSPLanguage.java <nl> ppp JSPLanguage.java <nl> - 		super(new JSPTokenizer(), ".jsp", ".jspx"); <nl> + 		super("jsp", new JSPTokenizer(), ".jsp", ".jspx"); <nl> mmm FortranLanguage.java <nl> ppp FortranLanguage.java <nl> - 		super(new FortranTokenizer(), ".for", ".f", ".f66", ".f77", ".f90"); <nl> + 		super("fortran", new FortranTokenizer(), ".for", ".f", ".f66", ".f77", ".f90"); <nl> 
mmm PMDConfiguration.java <nl> ppp PMDConfiguration.java <nl> + private RuleSets pmdRuleSets; <nl> + public RuleSets getPmdRuleSets() { <nl> + return pmdRuleSets; <nl> + } <nl> + public void setPmdRuleSets(RuleSets pmdRuleSets) { <nl> + this.pmdRuleSets = pmdRuleSets; <nl> + } <nl> - package net.sourceforge.pmd.processor; <nl> 
deleted file <nl> mmm PmdBuildException.java <nl> - package net.sourceforge.pmd.build; <nl> - public class PmdBuildException extends Exception { <nl> - private static final long serialVersionUID = 1L; <nl> - public PmdBuildException(String message) { <nl> - super(message); <nl> - } <nl> - public PmdBuildException(Throwable e) { <nl> 
mmm AnyTokenizer.java <nl> ppp AnyTokenizer.java <nl> - import java.util.regex.Matcher; <nl> - import java.util.regex.Pattern; <nl> - import org.apache.commons.lang3.StringUtils; <nl> - import net.sourceforge.pmd.util.StringUtil; <nl> + import java.io.BufferedReader; <nl> + import java.io.CharArrayReader; <nl> 
mmm ASTNumberLiteral.java <nl> ppp ASTNumberLiteral.java <nl> - String image = getImage(); <nl> - image = normalizeHexIntegerLiteral(image); <nl> - image = image.replace('e', 'E'); <nl> - if (image.indexOf('.') == -1 && image.indexOf('E') == -1) { <nl> - image = image + ".0"; <nl> - } <nl> - return image; <nl> 
new file <nl> ppp InvalidSlf4jMessageFormatRule.java <nl> + package net.sourceforge.pmd.lang.java.rule.logging; <nl> + import java.util.Arrays; <nl> + import java.util.Collections; <nl> + import java.util.HashSet; <nl> + import java.util.Iterator; <nl> + import java.util.LinkedList; <nl> + import java.util.List; <nl> 
mmm FileReporter.java <nl> ppp FileReporter.java <nl> - import java.io.FileNotFoundException; <nl> - import java.io.FileOutputStream; <nl> + import java.nio.file.Files; <nl> - private OutputStream getOutputStream() throws FileNotFoundException { <nl> - return reportFile == null ? System.out : new FileOutputStream(reportFile); <nl> 
new file <nl> ppp TestTLS.java <nl> + import jdk.test.lib.Utils; <nl> + import jdk.test.lib.process.ProcessTools; <nl> + import jdk.test.lib.process.OutputAnalyzer; <nl> + public class TestTLS { <nl> + public static void main(String args[]) throws Exception { <nl> + test01(); <nl> + } <nl> + public static void test01() throws Exception { <nl> 
mmm T6330997.java <nl> ppp T6330997.java <nl> - * @compile -source 10 -target 10 T1.java <nl> - * @compile -source 10 -target 10 T2.java <nl> + * @compile -source 10 -target 11 T1.java <nl> + * @compile -source 10 -target 11 T2.java <nl> mmm ClassReader.java <nl> ppp ClassReader.java <nl> - if (readShort(off + 6) > Opcodes.V10) { <nl> 
mmm InputStream.java <nl> ppp InputStream.java <nl> + public InputStream() {} <nl> + Factory() {} <nl> + public PutField() {} <nl> + public OutputStream() {} <nl> + public InheritableThreadLocal() {} <nl> + public GetField() {} <nl> + @Deprecated(forRemoval=true, since="14") <nl> + public ConstantBootstraps() {} <nl> 
mmm LambdaToMethod.java <nl> ppp LambdaToMethod.java <nl> - Symbol refSym = localContext.isSignaturePolymorphic() <nl> - ? localContext.sigPolySym <nl> - : tree.sym; <nl> + Symbol refSym = tree.sym; <nl> - final Symbol sigPolySym; <nl> - this.sigPolySym = isSignaturePolymorphic() <nl> - ? makePrivateSyntheticMethod(tree.sym.flags(), <nl> 
mmm TypeEnter.java <nl> ppp TypeEnter.java <nl> - package compiler.tiered; <nl> - public class TieredModesTest { <nl> - public static int sideEffect = 0; <nl> - private static void test() { <nl> - sideEffect++; <nl> - } <nl> - public static void main(String... args) { <nl> - for (int i = 0; i < 100_000; i++) { <nl> 
deleted file <nl> mmm BubbleSortAlgorithm.java <nl> - class BubbleSortAlgorithm extends SortAlgorithm { <nl> - @Override <nl> - void sort(int a[]) throws Exception { <nl> - for (int i = a.length; --i >= 0;) { <nl> - boolean swapped = false; <nl> - for (int j = 0; j < i; j++) { <nl> - if (stopRequested) { <nl> 
new file <nl> ppp CKey.java <nl> + package sun.security.mscapi; <nl> + import sun.security.util.Length; <nl> + import java.security.Key; <nl> + abstract class CKey implements Key, Length { <nl> + private static final long serialVersionUID = -1088859394025049194L; <nl> + static class NativeHandles { <nl> + long hCryptProv = 0; <nl> 
mmm LambdaForm.java <nl> ppp LambdaForm.java <nl> 
mmm ProxyRef.java <nl> ppp ProxyRef.java <nl> mmm ThreadInfoCompositeData.java <nl> ppp ThreadInfoCompositeData.java <nl> mmm CompositeDataSupport.java <nl> ppp CompositeDataSupport.java <nl> mmm RMIConnector.java <nl> ppp RMIConnector.java <nl> mmm TabularDataSupport.java <nl> ppp TabularDataSupport.java <nl> 
new file <nl> ppp MyClass.java <nl> + package mypackage; <nl> + public class MyClass { <nl> + public int intField; <nl> + public final static int INT_CONSTANT = 42; <nl> + public static Object value() { return INT_CONSTANT; } <nl> + public MyClass() { } <nl> + public void run() { } <nl> + }new file <nl> ppp package-info.java <nl> 
new file <nl> ppp ListFedBase.java <nl> + import javax.naming.Binding; <nl> + import javax.naming.NamingEnumeration; <nl> + import javax.naming.NamingException; <nl> + abstract class ListFedBase extends DNSTestBase { <nl> + private String key; <nl> + public ListFedBase() { <nl> + setKey("host1"); <nl> + } <nl> 
mmm DefaultProxySelector.java <nl> ppp DefaultProxySelector.java <nl> - java.security.AccessController.doPrivileged( <nl> - new java.security.PrivilegedAction<>() { <nl> - public Void run() { <nl> - System.loadLibrary("net"); <nl> - return null; <nl> - } <nl> - }); <nl> + jdk.internal.loader.BootLoader.loadLibrary("net"); <nl> 
mmm Utils.java <nl> ppp Utils.java <nl> + return runExec(cmdsList, penv, false); <nl> + } <nl> + static List<String> runExec(List<String> cmdsList, Map<String, String> penv, boolean ignoreReturnValue) { <nl> - if (retval != 0) { <nl> + if (!ignoreReturnValue && retval != 0) { <nl> new file <nl> ppp DeprecateOptionN.java <nl> 
deleted file <nl> mmm ScanDataProcessor.java <nl> - package org.altbeacon.beacon.service; <nl> - import android.annotation.TargetApi; <nl> - import android.app.Service; <nl> - import android.bluetooth.BluetoothDevice; <nl> - import android.bluetooth.le.ScanResult; <nl> - import android.content.pm.ApplicationInfo; <nl> 
mmm ModelSpecificDistanceUpdater.java <nl> ppp ModelSpecificDistanceUpdater.java <nl> + import android.annotation.TargetApi; <nl> + @TargetApi(Build.VERSION_CODES.CUPCAKE) <nl> mmm MonitoringStatus.java <nl> ppp MonitoringStatus.java <nl> - state.getCallback().call(mContext, "monitoringData", new MonitoringData(state.getInside(), region)); <nl> 
mmm NonBeaconLeScanCallback.java <nl> ppp NonBeaconLeScanCallback.java <nl> + import android.support.annotation.WorkerThread; <nl> + @WorkerThread <nl> + super(Looper.getMainLooper()); <nl> + @MainThread <nl> + @MainThread <nl> + @MainThread <nl> + @MainThread <nl> + @MainThread <nl> + @MainThread <nl> + @MainThread <nl> 
mmm GattBeaconTest.java <nl> ppp GattBeaconTest.java <nl> - Beacon gattBeacon = parser.fromScanData(bytes, -55, null); <nl> + Beacon gattBeacon = parser.fromScanData(bytes, -55, null, 123456L); <nl> - Beacon gattBeacon = parser.fromScanData(bytes, -55, null); <nl> + Beacon gattBeacon = parser.fromScanData(bytes, -55, null, 123456L); <nl> 
mmm ServiceEnv.java <nl> ppp ServiceEnv.java <nl> - import com.lody.virtual.client.hook.modifiers.ContextModifier; <nl> + import com.lody.virtual.client.fixer.ContextFixer; <nl> - 		ContextModifier.modifyContext(base); <nl> - 		ContextModifier.setOuterContext(base, service); <nl> + 		ContextFixer.fixContext(base); <nl> 
mmm RunningAppList.java <nl> ppp RunningAppList.java <nl> - 	public void pluginStarted(String pkgName, RunningAppRecord runningAppRecord) { <nl> + 	public void appStarted(String pkgName, RunningAppRecord runningAppRecord) { <nl> new file <nl> ppp ContentProviderRecord.java <nl> + package com.lody.virtual.service.am; <nl> 
mmm ContextGraph.java <nl> ppp ContextGraph.java <nl> + import gnu.trove.set.TIntSet; <nl> + public ContextGraph(ContextGraph other, boolean wrap) { <nl> + this.addressToNodePile = other.addressToNodePile; <nl> + this.methodDescriptor = other.methodDescriptor; <nl> + this.terminatingAddresses = other.terminatingAddresses; <nl> 
mmm MethodExecutionContext.java <nl> ppp MethodExecutionContext.java <nl> + import java.util.SortedSet; <nl> + import java.util.TreeSet; <nl> - protected void addRegister(int register, RegisterStore rs) { <nl> + public void addRegister(int register, RegisterStore rs) { <nl> - registers.put(getParameterStart() + parameterIndex, rs); <nl> 
deleted file <nl> mmm ApplicationTest.java <nl> - package org.cf.obfuscated; <nl> - import android.app.Application; <nl> - import android.test.ApplicationTestCase; <nl> - public class ApplicationTest extends ApplicationTestCase<Application> { <nl> - public ApplicationTest() { <nl> - super(Application.class); <nl> 
mmm VirtualMachineContext.java <nl> ppp VirtualMachineContext.java <nl> - registers = new SparseArray<RegisterStore>(registerCount); <nl> + registers = new SparseArray<RegisterStore>(0); <nl> - registers = new SparseArray<RegisterStore>(registerCount); <nl> + registers = new SparseArray<RegisterStore>(other.registers.size()); <nl> 
mmm TestConstantBuilder.java <nl> ppp TestConstantBuilder.java <nl> - MethodBackedGraph mbgraph = getMockedGraph(address, value); <nl> + ExecutionGraphManipulator mbgraph = getMockedGraph(address, value); <nl> - MethodBackedGraph mbgraph = getMockedGraph(address, value); <nl> + ExecutionGraphManipulator mbgraph = getMockedGraph(address, value); <nl> 
mmm TestFieldInheritance.java <nl> ppp TestFieldInheritance.java <nl> + import org.cf.smalivm.exception.VirtualMachineException; <nl> mmm TemplateStateFactoryTest.java <nl> ppp TemplateStateFactoryTest.java <nl> - import org.cf.smalivm.context.ExecutionGraph; <nl> + import org.cf.smalivm.exception.VirtualMachineException; <nl> 
mmm AGetOp.java <nl> ppp AGetOp.java <nl> mmm ArrayLengthOp.java <nl> ppp ArrayLengthOp.java <nl> + import org.cf.smalivm.VirtualException; <nl> + addException(new VirtualException(NullPointerException.class, "Attempt to get length of null array")); <nl> + node.clearExceptions(); <nl> - if (log.isWarnEnabled()) { <nl> 
mmm LambdaClassBackporter.java <nl> ppp LambdaClassBackporter.java <nl> - public static byte[] transform(byte[] bytecode, int targetVersion) { <nl> + public static byte[] transform(byte[] bytecode, int targetVersion, MethodRelocations methodRelocations) { <nl> - next = new LambdaClassVisitor(next, targetVersion); <nl> 
mmm ObservableProperty.java <nl> ppp ObservableProperty.java <nl> - TYPE_DECLARATION, <nl> + CLASS_DECLARATION, <nl> mmm ModifierVisitor.java <nl> ppp ModifierVisitor.java <nl> - public Visitable visit(final TypeDeclarationStmt n, final A arg) { <nl> + public Visitable visit(final LocalClassDeclarationStmt n, final A arg) { <nl> 
mmm ClassOrInterfaceDeclaration.java <nl> ppp ClassOrInterfaceDeclaration.java <nl> + import com.github.javaparser.ast.Modifier; <nl> mmm CatchClause.java <nl> ppp CatchClause.java <nl> + import com.github.javaparser.ast.Modifier; <nl> - import com.github.javaparser.ast.body.Modifier; <nl> mmm ASTHelper.java <nl> 
mmm ParseResultTest.java <nl> ppp ParseResultTest.java <nl> + import static com.github.javaparser.utils.Utils.EOL; <nl> - assertThat(problem.getMessage()).isEqualTo("Parse error. Found \"{\", expected one of  \"exports\" \"module\" \"open\" \"opens\" \"provides\" \"requires\" \"to\" \"transitive\" \"uses\" \"with\" <IDENTIFIER>"); <nl> 
mmm JavaParserTypeVariableDeclaration.java <nl> ppp JavaParserTypeVariableDeclaration.java <nl> - public List<ReferenceTypeUsage> getAllAncestors(TypeSolver typeSolver) { <nl> + public List<ReferenceTypeUsage> getAllAncestors() { <nl> mmm JavaParserEnumDeclaration.java <nl> ppp JavaParserEnumDeclaration.java <nl> 
new file <nl> ppp GeneratedJavaParserTokenManagerTest.java <nl> + package com.github.javaparser; <nl> + import org.junit.Test; <nl> + import java.io.IOException; <nl> + public class GeneratedJavaParserTokenManagerTest { <nl> + private String makeFilename(String sampleName) { <nl> + return "com/github/javaparser/issue_samples/" + sampleName + ".java.txt"; <nl> 
mmm SymbolSolver.java <nl> ppp SymbolSolver.java <nl> + import java.util.Optional; <nl> + public class Value { <nl> + private TypeUsage typeUsage; <nl> + private String name; <nl> + private boolean field; <nl> + public Value(TypeUsage typeUsage, String name, boolean field) { <nl> + this.typeUsage = typeUsage; <nl> 
mmm MethodDeclaration.java <nl> ppp MethodDeclaration.java <nl> - 		setNameExpr(new NameExpr(name)); <nl> + 		this.name = new NameExpr(name); <nl> - 	setAsParentNodeOf(this.name); <nl> - StringBuilder sb = new StringBuilder(); <nl> + StringBuffer sb = new StringBuffer(); <nl> mmm CommentsInserter.java <nl> ppp CommentsInserter.java <nl> 
mmm NodeWithExtends.java <nl> ppp NodeWithExtends.java <nl> - classOrInterfaceType.setParentNode((Node) this); <nl> deleted file <nl> mmm Visitors.java <nl> - package com.github.javaparser.ast.visitor; <nl> - import com.github.javaparser.ast.visitor.GenericVisitorAdapter; <nl> - import com.github.javaparser.ast.visitor.ModifierVisitor; <nl> 
mmm Log.java <nl> ppp Log.java <nl> - public static class DefaultAdapter implements Adapter { <nl> + public static class StandardOutStandardErrorAdapter implements Adapter { <nl> - private static Adapter CURRENT_ADAPTER = new DefaultAdapter(); <nl> + private static Adapter CURRENT_ADAPTER = new SilentAdapter(); <nl> 
mmm TypeSameAsType.java <nl> ppp TypeSameAsType.java <nl> - import com.github.javaparser.symbolsolver.model.typesystem.Type; <nl> + import com.github.javaparser.resolution.types.ResolvedType; <nl> - private Type S; <nl> - private Type T; <nl> + private ResolvedType S; <nl> + private ResolvedType T; <nl> - public TypeSameAsType(Type s, Type t) { <nl> 
deleted file <nl> mmm NameLogicDisambiguationTest.java <nl> - package com.github.javaparser.symbolsolver.resolution.naming; <nl> - import com.github.javaparser.*; <nl> - import com.github.javaparser.ast.Node; <nl> - import com.github.javaparser.symbolsolver.model.resolution.TypeSolver; <nl> - import com.github.javaparser.symbolsolver.resolution.AbstractResolutionTest; <nl> 
new file <nl> ppp SourceZipTest.java <nl> + package com.github.javaparser.utils; <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.junit.Assert.assertTrue; <nl> + import java.io.IOException; <nl> + import java.net.URISyntaxException; <nl> + import java.nio.file.Path; <nl> + import java.nio.file.Paths; <nl> 
mmm CsmElement.java <nl> ppp CsmElement.java <nl> - import static com.github.javaparser.TokenTypes.eolToken; <nl> - import static com.github.javaparser.TokenTypes.spaceToken; <nl> + import static com.github.javaparser.TokenTypes.*; <nl> - return new CsmToken(spaceToken(), " "); <nl> + return new CsmToken(spaceTokenKind(), " "); <nl> 
mmm PrettyPrintVisitor.java <nl> ppp PrettyPrintVisitor.java <nl> - n.getInner().accept(this, arg); <nl> + if (n.getInner().isPresent()) { <nl> + n.getInner().get().accept(this, arg); <nl> + } <nl> mmm JavaParserMetaModel.java <nl> ppp JavaParserMetaModel.java <nl> - enclosedExprMetaModel.innerPropertyMetaModel = new PropertyMetaModel(enclosedExprMetaModel, "inner", com.github.javaparser.ast.expr.Expression.class, Optional.of(expressionMetaModel), false, false, false, false, false); <nl> 
mmm TokenRange.java <nl> ppp TokenRange.java <nl> + import java.util.Iterator; <nl> - public class TokenRange { <nl> + public class TokenRange implements Iterable<JavaToken> { <nl> + @Override <nl> + public Iterator<JavaToken> iterator() { <nl> + return new Iterator<JavaToken>() { <nl> + private boolean hasNext = true; <nl> 
mmm JavaParserMetaModel.java <nl> ppp JavaParserMetaModel.java <nl> - tryStmtMetaModel.resourcesPropertyMetaModel = new PropertyMetaModel(tryStmtMetaModel, "resources", com.github.javaparser.ast.expr.VariableDeclarationExpr.class, Optional.of(variableDeclarationExprMetaModel), false, false, true, false, false); <nl> 
new file <nl> ppp TestFile.java <nl> + package com.github.javaparser.junit; <nl> + public class TestFile { <nl> + public int foo(int e) { <nl> + int a = 20; <nl> + return a; <nl> + } <nl> + public void abc() { <nl> + } <nl> + public int def() { <nl> + return 10; <nl> + } <nl> + } <nl> new file <nl> ppp MethodChanger_2.java <nl> 
mmm JavaParserMetaModel.java <nl> ppp JavaParserMetaModel.java <nl> - breakStmtMetaModel.getConstructorParameters().add(breakStmtMetaModel.labelPropertyMetaModel); <nl> + breakStmtMetaModel.getConstructorParameters().add(breakStmtMetaModel.valuePropertyMetaModel); <nl> - breakStmtMetaModel.labelPropertyMetaModel = new PropertyMetaModel(breakStmtMetaModel, "label", com.github.javaparser.ast.expr.SimpleName.class, Optional.of(simpleNameMetaModel), true, false, false, false); <nl> 
mmm LexicalPreservingPrinter.java <nl> ppp LexicalPreservingPrinter.java <nl> - if (oldValue instanceof Comment) { <nl> - if (((Comment) oldValue).isOrphan()){ <nl> - nodeText = getOrCreateNodeText(observedNode); <nl> - } <nl> - List<TokenTextElement> matchingTokens = getMatchingTokenTextElements((Comment) oldValue, nodeText); <nl> 
mmm NodeWithIdentifier.java <nl> ppp NodeWithIdentifier.java <nl> + import static com.github.javaparser.utils.Utils.assertNonEmpty; <nl> + assertNonEmpty(identifier); <nl> mmm NodeWithAnnotations.java <nl> ppp NodeWithAnnotations.java <nl> - import static com.github.javaparser.ast.expr.Name.parse; <nl> - parse(name), new NodeList<>()); <nl> 
mmm NodeWithBlockStmt.java <nl> ppp NodeWithBlockStmt.java <nl> + block.setParentNode((Node) this); <nl> mmm MethodDeclaration.java <nl> ppp MethodDeclaration.java <nl> - public final class MethodDeclaration extends CallableDeclaration<MethodDeclaration> <nl> - implements NodeWithType<MethodDeclaration, Type>, NodeWithOptionalBlockStmt<MethodDeclaration> { <nl> 
mmm HashCodeVisitor.java <nl> ppp HashCodeVisitor.java <nl> - return (n.getExtendedTypes().isPresent() ? n.getExtendedTypes().get().accept(this, arg) : 0) * 31 + (n.getSuperTypes().isPresent() ? n.getSuperTypes().get().accept(this, arg) : 0) * 31 + (n.getAnnotations().accept(this, arg)) * 31 + (n.getComment().isPresent() ? n.getComment().get().accept(this, arg) : 0); <nl> 
mmm ModuleDeclarationTest.java <nl> ppp ModuleDeclarationTest.java <nl> + import com.github.javaparser.ast.validator.Java9Validator; <nl> - import static com.github.javaparser.ParserConfiguration.LanguageLevel.JAVA_9; <nl> - public static final JavaParser javaParser = new JavaParser(new ParserConfiguration().setLanguageLevel(JAVA_9)); <nl> 
deleted file <nl> mmm AClass.java <nl> - package foo.bar; <nl> - class AClass { <nl> - static Object field1 = AnInterface.ListChangeType.ADDITION; <nl> - static Object field2 = foo.bar.AnInterface.ListChangeType.ADDITION; <nl> - } <nl> deleted file <nl> mmm InternalClassInInterfaceTest.java <nl> - package com.github.javaparser.symbolsolver.resolution; <nl> 
mmm PrettyPrintVisitor.java <nl> ppp PrettyPrintVisitor.java <nl> - Type commonType = getMaximumCommonType(n.getAncestorOfType(NodeWithVariables.class).get()); <nl> + Type commonType = getMaximumCommonType(n.getAncestorOfType(NodeWithVariables.class)); <nl> - private Type toArrayLevel(Type type, int level) { <nl> 
mmm Problem.java <nl> ppp Problem.java <nl> - return getLocation().map(l -> l.getBegin().getRange().begin + " " + message).orElse(message); <nl> + return getLocation().map(l -> l.getBegin().getRange().map(r -> r.begin.toString()).orElse("(line ?,col ?)") + " " + message).orElse(message); <nl> - if (a.getLocation().isPresent() && b.getLocation().isPresent()) { <nl> 
mmm JavaParserTest.java <nl> ppp JavaParserTest.java <nl> + import static com.github.javaparser.ParseStart.*; <nl> + import static com.github.javaparser.ParserConfiguration.LanguageLevel.*; <nl> + import static com.github.javaparser.Providers.*; <nl> + import static com.github.javaparser.Range.*; <nl> + import static com.github.javaparser.StaticJavaParser.*; <nl> 
mmm JavaSymbolSolver.java <nl> ppp JavaSymbolSolver.java <nl> mmm NameLogic.java <nl> ppp NameLogic.java <nl> + import com.github.javaparser.ast.stmt.ReturnStmt; <nl> - import com.github.javaparser.resolution.UnsolvedSymbolException; <nl> - import com.github.javaparser.resolution.declarations.ResolvedReferenceTypeDeclaration; <nl> 
mmm ReflectionClassDeclarationTest.java <nl> ppp ReflectionClassDeclarationTest.java <nl> - if (isJavaVersionAbove9()) { <nl> + if (isJava9()) { <nl> - if (isJavaVersionAbove9()) { <nl> + if (isJava9()) { <nl> mmm AbstractTest.java <nl> ppp AbstractTest.java <nl> - protected boolean isJava10() { <nl> - return System.getProperty("java.version").startsWith("10."); <nl> 
mmm ModuleStmt.java <nl> ppp ModuleStmt.java <nl> mmm CompilationUnit.java <nl> ppp CompilationUnit.java <nl> - import com.github.javaparser.ast.Node; <nl> + public ModuleDeclaration addModule(String name) { <nl> + return new ModuleDeclaration(parseName(name), false); <nl> + } <nl> + public ModuleDeclaration addDirective(String directive) { <nl> 
mmm TestUtils.java <nl> ppp TestUtils.java <nl> + import static org.junit.Assert.assertTrue; <nl> - public void visitPreOrder(Node node) { <nl> - process(node); <nl> - new ArrayList<>(node.getChildNodes()).forEach(child -> visitPreOrder(child)); <nl> - } <nl> - public void visitPostOrder(Node node) { <nl> - new ArrayList<>(node.getChildNodes()).forEach(child -> visitPostOrder(child)); <nl> 
mmm InterfaceDeclaration.java <nl> ppp InterfaceDeclaration.java <nl> - public interface InterfaceDeclaration extends TypeDeclaration, TypeParametrizable { <nl> + public interface InterfaceDeclaration extends TypeDeclaration, TypeParametrizable, HasAccessLevel { <nl> mmm ReflectionFactory.java <nl> ppp ReflectionFactory.java <nl> 
mmm JavaParserFacade.java <nl> ppp JavaParserFacade.java <nl> - if (node.getClassExpr().isPresent()) { <nl> + if (node.getClassName().isPresent()) { <nl> - String className = node.getClassExpr().get().toString(); <nl> + String className = node.getClassName().get().asString(); <nl> mmm ThisExpr.java <nl> ppp ThisExpr.java <nl> 
deleted file <nl> mmm c.java <nl> - package package_c; <nl> - public class c { <nl> - } <nl> deleted file <nl> mmm SymbolSolverQuickSetup.java <nl> - package com.github.javaparser.symbolsolver.utils; <nl> - import com.github.javaparser.JavaParser; <nl> - import com.github.javaparser.ParseProblemException; <nl> 
mmm GenericVisitorAdapter.java <nl> ppp GenericVisitorAdapter.java <nl> - if (n.getReceiverParameter().isPresent()) { <nl> - result = n.getReceiverParameter().get().accept(this, arg); <nl> - if (result != null) <nl> - return result; <nl> - } <nl> + if (n.getReceiverParameter().isPresent()) { <nl> + result = n.getReceiverParameter().get().accept(this, arg); <nl> 
mmm CompilationUnit.java <nl> ppp CompilationUnit.java <nl> - import static com.github.javaparser.JavaParser.parseName; <nl> - setPackageDeclaration(new PackageDeclaration(parseName(name))); <nl> + setPackageDeclaration(new PackageDeclaration(Name.parse(name))); <nl> mmm JavaParserTest.java <nl> ppp JavaParserTest.java <nl> 
mmm ModifierVisitor.java <nl> ppp ModifierVisitor.java <nl> - NodeList<ReferenceType> thrownExceptions = modifyList(n.getThrownExceptions(), arg); <nl> + NodeList<ReferenceType<?>> thrownExceptions = modifyList(n.getThrownExceptions(), arg); <nl> - NodeList<ReferenceType> thrownExceptions = modifyList(n.getThrownExceptions(), arg); <nl> 
mmm NacosConfigAutoConfiguration.java <nl> ppp NacosConfigAutoConfiguration.java <nl> + 	@Bean <nl> + 	public NacosPropertySourceRepository nacosPropertySourceRepository() { <nl> + 		return new NacosPropertySourceRepository(); <nl> + 	} <nl> - 			NacosRefreshHistory refreshHistory) { <nl> + 			NacosRefreshHistory refreshHistory, <nl> 
mmm SeataHystrixConcurrencyStrategy.java <nl> ppp SeataHystrixConcurrencyStrategy.java <nl> - package org.springframework.cloud.alibaba.fescar.feign.hystrix; <nl> + package org.springframework.cloud.alibaba.seata.feign.hystrix; <nl> - public class FescarHystrixConcurrencyStrategy extends HystrixConcurrencyStrategy { <nl> 
mmm DubboMetadataService.java <nl> ppp DubboMetadataService.java <nl> - import org.apache.dubbo.common.URL; <nl> - import org.apache.dubbo.config.annotation.Service; <nl> - import java.util.List; <nl> - import java.util.Map; <nl> - String VERSION = "1.0.0"; <nl> - Set<String> getAllServiceKeys(); <nl> - Map<String, String> getAllExportedURLs(); <nl> 
mmm FallBackProviderHandler.java <nl> ppp FallBackProviderHandler.java <nl> - package org.springframework.cloud.alibaba.sentinel.gateway.handler; <nl> + package org.springframework.cloud.alibaba.sentinel.gateway.zuul; <nl> - import com.alibaba.csp.sentinel.adapter.gateway.zuul.fallback.DefaultBlockFallbackProvider; <nl> 
mmm NacosServerList.java <nl> ppp NacosServerList.java <nl> - } <nl> + } <nl> deleted file <nl> mmm SentinelDataSourceTests.java <nl> - package org.springframework.cloud.alibaba.sentinel; <nl> - import static org.junit.Assert.assertEquals; <nl> - import static org.junit.Assert.assertNotNull; <nl> - import static org.junit.Assert.assertNull; <nl> 
mmm TokenGetterForAlicom.java <nl> ppp TokenGetterForAlicom.java <nl> - 	private final static String productName = "Dybaseapi"; <nl> + 	private final static String PRODUCT_NAME = "Dybaseapi"; <nl> - 		DefaultProfile.addEndpoint(endpointNameForPop, regionIdForPop, productName, <nl> + 		DefaultProfile.addEndpoint(endpointNameForPop, regionIdForPop, PRODUCT_NAME, <nl> 
mmm SeataFeignObjectWrapper.java <nl> ppp SeataFeignObjectWrapper.java <nl> - package org.springframework.cloud.alibaba.fescar.feign; <nl> + package org.springframework.cloud.alibaba.seata.feign; <nl> - public class FescarFeignObjectWrapper { <nl> + public class SeataFeignObjectWrapper { <nl> - 	FescarFeignObjectWrapper(BeanFactory beanFactory) { <nl> 
new file <nl> ppp NacosDataXmlParser.java <nl> + package com.alibaba.cloud.nacos.parser; <nl> + import java.io.IOException; <nl> + import java.io.StringReader; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + import java.util.Properties; <nl> + import javax.xml.parsers.DocumentBuilder; <nl> 
mmm SentinelAutoConfigurationTests.java <nl> ppp SentinelAutoConfigurationTests.java <nl> - 		rule.setResource("GET:" + flowUrl); <nl> + 		rule.setResource("GET:" + url); <nl> - 		degradeRule.setResource("GET:" + degradeUrl); <nl> + 		degradeRule.setResource("GET:" + url + "/test"); <nl> - 		ResponseEntity responseEntityBlock = restTemplateWithBlockClass <nl> 
mmm ProviderApplication.java <nl> ppp ProviderApplication.java <nl> + import org.springframework.http.HttpStatus; <nl> + import org.springframework.http.ResponseEntity; <nl> + 		@RequestMapping(value = "/", method = RequestMethod.GET) <nl> + 		public ResponseEntity index() { <nl> + 			return new ResponseEntity("index error", HttpStatus.INTERNAL_SERVER_ERROR); <nl> 
mmm RestMethodMetadata.java <nl> ppp RestMethodMetadata.java <nl> - if (this == o) return true; <nl> - if (!(o instanceof RestMethodMetadata)) return false; <nl> + if (this == o) { <nl> + return true; <nl> + } <nl> + if (!(o instanceof RestMethodMetadata)) { <nl> + return false; <nl> + } <nl> mmm NacosPropertySourceRepository.java <nl> 
mmm DubboServiceMetadataRepository.java <nl> ppp DubboServiceMetadataRepository.java <nl> - import org.springframework.beans.factory.annotation.Value; <nl> - private Map<String, Map<RequestMetadata, GenericService>> genericServicesRepository = new HashMap<>(); <nl> + private Map<String, Map<RequestMetadata, ReferenceBean<GenericService>>> referenceBeansRepository = new HashMap<>(); <nl> 
new file <nl> ppp SidecarNacosDiscoveryProperties.java <nl> + package com.alibaba.cloud.sidecar.nacos; <nl> + import com.alibaba.cloud.nacos.NacosDiscoveryProperties; <nl> + import com.alibaba.cloud.sidecar.SidecarProperties; <nl> + import lombok.RequiredArgsConstructor; <nl> + import org.apache.commons.lang3.StringUtils; <nl> 
new file <nl> ppp SingularHandlerFactory.java <nl> + package de.plushnikov.intellij.plugin.processor.handler.singular; <nl> + import com.intellij.psi.CommonClassNames; <nl> + import com.intellij.psi.PsiAnnotation; <nl> + import com.intellij.psi.PsiType; <nl> + import com.intellij.psi.PsiVariable; <nl> + import de.plushnikov.intellij.plugin.util.PsiTypeUtil; <nl> 
mmm RequiredArgsConstructorProcessor.java <nl> ppp RequiredArgsConstructorProcessor.java <nl> + @SuppressWarnings("deprecation") <nl> mmm LombokLightActionTestCase.java <nl> ppp LombokLightActionTestCase.java <nl> + import com.intellij.openapi.util.AsyncResult; <nl> - DataContext context = DataManager.getInstance().getDataContext(); <nl> 
mmm LombokProcessorUtil.java <nl> ppp LombokProcessorUtil.java <nl> - return convertAcessLevelToJavaString(PsiAnnotationUtil.getAnnotationValue(psiAnnotation, "value")); <nl> + return convertAcessLevelToJavaString(PsiAnnotationUtil.getAnnotationValue(psiAnnotation, "value", String.class)); <nl> - return convertAcessLevelToJavaString(PsiAnnotationUtil.getAnnotationValue(psiAnnotation, "access")); <nl> 
mmm BuilderHandler.java <nl> ppp BuilderHandler.java <nl> + import com.intellij.openapi.components.ServiceManager; <nl> - private final ToStringProcessor toStringProcessor; <nl> - private final NoArgsConstructorProcessor noArgsConstructorProcessor; <nl> - public BuilderHandler(@NotNull ToStringProcessor toStringProcessor, @NotNull NoArgsConstructorProcessor noArgsConstructorProcessor) { <nl> 
mmm JdbcIO.java <nl> ppp JdbcIO.java <nl> - * <p>By default, the provided function requests a DataSource per execution thread. In some <nl> - * circumstances this can quickly overwhelm the database by requesting too many connections. In that <nl> - * case you should look into sharing a single instance of a {@link PoolingDataSource} across all the <nl> 
mmm JulHandlerPrintStreamAdapterFactory.java <nl> ppp JulHandlerPrintStreamAdapterFactory.java <nl> - publish(flushToString()); <nl> + publishIfNonEmpty(flushToString()); <nl> + if (buffer.length() == 0) { <nl> + return null; <nl> + } <nl> - if (msg != null) { <nl> - publish(msg); <nl> - } <nl> + publishIfNonEmpty(msg); <nl> 
mmm PrimitiveParDoSingleFactory.java <nl> ppp PrimitiveParDoSingleFactory.java <nl> + @Override <nl> + public boolean isStateful() { <nl> + return !signature.stateDeclarations().isEmpty() <nl> + || !signature.timerDeclarations().isEmpty(); <nl> + } <nl> + @Override <nl> + public boolean isSplittable() { <nl> 
mmm BigQueryIOReadTest.java <nl> ppp BigQueryIOReadTest.java <nl> - import static org.apache.beam.sdk.io.gcp.bigquery.BigQueryResourceNaming.createTempTableReference; <nl> + import static org.apache.beam.sdk.io.gcp.bigquery.BigQueryHelpers.createJobIdToken; <nl> + import static org.apache.beam.sdk.io.gcp.bigquery.BigQueryHelpers.createTempTableReference; <nl> 
mmm SchemaCoderCloudObjectTranslator.java <nl> ppp SchemaCoderCloudObjectTranslator.java <nl> - SchemaTranslation.schemaToProto(target.getSchema()).toByteArray())); <nl> + SchemaTranslation.schemaToProto(target.getSchema(), true).toByteArray())); <nl> new file <nl> ppp TestProtoSchemas.java <nl> + package org.apache.beam.sdk.extensions.protobuf; <nl> 
mmm ParDoTest.java <nl> ppp ParDoTest.java <nl> + import static junit.framework.TestCase.assertTrue; <nl> + import org.apache.beam.sdk.testing.UsesTestStreamWithOutputTimestamp; <nl> + @Test <nl> + @Category({ <nl> + ValidatesRunner.class, <nl> + UsesStatefulParDo.class, <nl> + UsesTimersInParDo.class, <nl> + UsesTestStreamWithOutputTimestamp.class <nl> 
mmm Workarounds.java <nl> ppp Workarounds.java <nl> - public class FlinkClassloading { <nl> + public class Workarounds { <nl> deleted file <nl> mmm BeamAggregateProjectMergeRuleTest.java <nl> - package org.apache.beam.sdk.extensions.sql.impl.rule; <nl> - import static org.apache.beam.sdk.extensions.sql.meta.provider.test.TestTableProvider.PUSH_DOWN_OPTION; <nl> 
mmm BeamTableFunctionScanRel.java <nl> ppp BeamTableFunctionScanRel.java <nl> - import java.util.ArrayList; <nl> - import java.util.Collection; <nl> - import org.apache.beam.sdk.coders.KvCoder; <nl> - import org.apache.beam.sdk.coders.RowCoder; <nl> - import org.apache.beam.sdk.extensions.sql.impl.TVFSlidingWindowFn; <nl> 
mmm SplunkEventWriterTest.java <nl> ppp SplunkEventWriterTest.java <nl> - import org.junit.BeforeClass; <nl> - import org.mockserver.configuration.ConfigurationProperties; <nl> - private static final long MAX_SOCKET_TIMEOUT_MILLIS = 180000; <nl> - @BeforeClass <nl> - public static void setup() { <nl> - ConfigurationProperties.maxSocketTimeout(MAX_SOCKET_TIMEOUT_MILLIS); <nl> 
mmm KinesisReader.java <nl> ppp KinesisReader.java <nl> + private final RateLimitPolicyFactory rateLimitPolicyFactory; <nl> + RateLimitPolicyFactory rateLimitPolicyFactory, <nl> + rateLimitPolicyFactory, <nl> + RateLimitPolicyFactory rateLimitPolicyFactory, <nl> + this.rateLimitPolicyFactory = rateLimitPolicyFactory; <nl> 
mmm SnowflakePipelineOptions.java <nl> ppp SnowflakePipelineOptions.java <nl> - @Description("External location name to connect to.") <nl> - String getExternalLocation(); <nl> - void setExternalLocation(String externalLocation); <nl> - @Description("Temporary GCS bucket name") <nl> + @Description("Temporary GCS bucket name.") <nl> 
new file <nl> ppp SqlTransformRunner.java <nl> + package org.apache.beam.sdk.tpcds; <nl> + import org.apache.beam.runners.dataflow.options.DataflowPipelineOptions; <nl> + import org.apache.beam.sdk.Pipeline; <nl> + import org.apache.beam.sdk.PipelineResult; <nl> + import org.apache.beam.sdk.extensions.sql.SqlTransform; <nl> 
mmm JavaBeanSchemaTest.java <nl> ppp JavaBeanSchemaTest.java <nl> + import static org.apache.beam.sdk.schemas.utils.SchemaTestUtils.equivalentTo; <nl> + import static org.apache.beam.sdk.schemas.utils.TestJavaBeans.CASE_FORMAT_BEAM_SCHEMA; <nl> + import static org.apache.beam.sdk.schemas.utils.TestJavaBeans.RENAMED_FIELDS_AND_SETTERS_BEAM_SCHEMA; <nl> 
deleted file <nl> mmm SideInputLoadTest.java <nl> - package org.apache.beam.sdk.loadtests; <nl> - import java.io.IOException; <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - import java.util.Map; <nl> - import java.util.Optional; <nl> - import java.util.Random; <nl> - import org.apache.beam.sdk.io.synthetic.SyntheticStep; <nl> 
mmm FlinkSavepointTest.java <nl> ppp FlinkSavepointTest.java <nl> + import org.apache.flink.runtime.jobgraph.JobStatus; <nl> - if (jobStatusMessage.getJobState().name().equals("RUNNING")) { <nl> + if (jobStatusMessage.getJobState() == JobStatus.RUNNING) { <nl> - if (jobStatus != null && jobStatus.getJobState().name().equals("RUNNING")) { <nl> 
mmm SdkComponents.java <nl> ppp SdkComponents.java <nl> + import java.util.Collection; <nl> + import javax.annotation.Nullable; <nl> + import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableSet; <nl> + private final Set<String> requirements; <nl> - return new SdkComponents(RunnerApi.Components.getDefaultInstance(), ""); <nl> 
mmm ConversionContext.java <nl> ppp ConversionContext.java <nl> + import org.apache.beam.sdk.annotations.Internal; <nl> + @Internal <nl> mmm StringFunctions.java <nl> ppp StringFunctions.java <nl> + import org.apache.beam.sdk.annotations.Internal; <nl> + @Internal <nl> mmm TimestampFunctions.java <nl> ppp TimestampFunctions.java <nl> 
mmm ConvertHelpers.java <nl> ppp ConvertHelpers.java <nl> + import org.apache.beam.vendor.bytebuddy.v1_9_3.net.bytebuddy.asm.AsmVisitorWrapper; <nl> + import org.apache.beam.vendor.bytebuddy.v1_9_3.net.bytebuddy.jar.asm.ClassWriter; <nl> + .visit(new AsmVisitorWrapper.ForDeclaredMethods().writerFlags(ClassWriter.COMPUTE_FRAMES)) <nl> 
mmm DoFnOperatorTest.java <nl> ppp DoFnOperatorTest.java <nl> + final Instant timerOutputTimestamp = timerTimestamp.minus(1); <nl> - .withOutputTimestamp(timerTimestamp.minus(1)) <nl> + .withOutputTimestamp(timerOutputTimestamp) <nl> - is(timerTimestamp.minus(1).getMillis())); <nl> + is(timerOutputTimestamp.getMillis())); <nl> 
mmm POJOUtils.java <nl> ppp POJOUtils.java <nl> - | IllegalStateException <nl> - String.format( <nl> - "Unable to generate a creator for POJO '%s' with inferred schema: %s%nNote POJOs must have a zero-argument constructor, or a constructor annotated with @SchemaCreate.", <nl> - clazz, schema)); <nl> + "Unable to generate a creator for " + clazz + " with schema " + schema); <nl> 
mmm PortableRunner.java <nl> ppp PortableRunner.java <nl> + import java.util.concurrent.ExecutionException; <nl> + import org.apache.beam.model.jobmanagement.v1.ArtifactStagingServiceGrpc; <nl> + import org.apache.beam.runners.fnexecution.artifact.ArtifactRetrievalService; <nl> + import org.apache.beam.runners.fnexecution.artifact.ArtifactStagingService; <nl> 
new file <nl> ppp ZetaSqlTimeFunctionsTest.java <nl> + package org.apache.beam.sdk.extensions.sql.zetasql; <nl> + import static org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils.parseDateToValue; <nl> + import static org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils.parseTimeToValue; <nl> + import static org.apache.beam.sdk.extensions.sql.zetasql.DateTimeUtils.parseTimestampWithTZToValue; <nl> 
mmm GlobalNamespace.java <nl> ppp GlobalNamespace.java <nl> - type = getValueType(n.getFirstChild()); <nl> + if (n.isQuotedString()) { <nl> + return; <nl> + } else { <nl> + type = getValueType(n.getFirstChild()); <nl> + } <nl> mmm NameAnalyzer.java <nl> ppp NameAnalyzer.java <nl> - } else if (NodeUtil.isObjectLitKey(n)) { <nl> 
mmm ChromeCodingConvention.java <nl> ppp ChromeCodingConvention.java <nl> - import com.google.javascript.rhino.ObjectTypeI; <nl> + import com.google.javascript.rhino.NominalTypeBuilder; <nl> + package com.google.javascript.rhino.jstype; <nl> + import static com.google.common.base.Preconditions.checkArgument; <nl> 
mmm NewTypeInferenceES6Test.java <nl> ppp NewTypeInferenceES6Test.java <nl> - public void testFunctionSubtypingContravariantReceiver() { <nl> - typeCheck(LINE_JOINER.join( <nl> - "class Foo {", <nl> - "  method() {}", <nl> - "}", <nl> - "class Bar extends Foo {}", <nl> - "f(Foo.prototype.method);")); <nl> - typeCheck(LINE_JOINER.join( <nl> 
mmm ClosureRewriteModule.java <nl> ppp ClosureRewriteModule.java <nl> + private final boolean preserveSugar; <nl> mmm RefactoringDriver.java <nl> ppp RefactoringDriver.java <nl> - options.setClosurePass(true); <nl> + options.setBrokenClosureRequiresLevel(CheckLevel.OFF); <nl> + options.setClosurePass(true); <nl> 
mmm VariableReferenceCheck.java <nl> ppp VariableReferenceCheck.java <nl> + import com.google.javascript.jscomp.parsing.parser.FeatureSet; <nl> - if (compiler.getOptions().getLanguageIn().isEs6OrHigher()) { <nl> + if (compiler.getOptions().getLanguageIn().toFeatureSet().contains(FeatureSet.ES6)) { <nl> - || (compiler.getOptions().getLanguageIn().isEs6OrHigher() <nl> 
mmm IRFactory.java <nl> ppp IRFactory.java <nl> + Node lhs = node.isDestructuringPattern() ? newNode(Token.DESTRUCTURING_LHS, node) : node; <nl> - node.addChildToBack(initializer); <nl> - maybeSetLength(node, decl.location.start, decl.location.end); <nl> + lhs.addChildToBack(initializer); <nl> + maybeSetLength(lhs, decl.location.start, decl.location.end); <nl> 
mmm Parser.java <nl> ppp Parser.java <nl> - import com.google.javascript.jscomp.parsing.parser.trees.*; <nl> + import com.google.javascript.jscomp.parsing.parser.trees.ArgumentListTree; <nl> + import com.google.javascript.jscomp.parsing.parser.trees.ArrayLiteralExpressionTree; <nl> + import com.google.javascript.jscomp.parsing.parser.trees.ArrayPatternTree; <nl> 
mmm TypeCheckTestCase.java <nl> ppp TypeCheckTestCase.java <nl> + import org.junit.Before; <nl> + @Before <nl> mmm TypeInferenceTest.java <nl> ppp TypeInferenceTest.java <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> + import org.junit.runners.JUnit4; <nl> 
mmm CheckProvidesTest.java <nl> ppp CheckProvidesTest.java <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> + import org.junit.runners.JUnit4; <nl> + @RunWith(JUnit4.class) <nl> + @Before <nl> + @Test <nl> + @Test <nl> + @Test <nl> + @Test <nl> + @Test <nl> 
mmm NTIScope.java <nl> ppp NTIScope.java <nl> - return d.getTypeOfSimpleDecl().isSingletonObj(); <nl> + return d.getTypeOfSimpleDecl().isNamespace(); <nl> - JSType objToInclude = externs.get(name); <nl> - t = nslit.toJSTypeIncludingObject(commonTypes, objToInclude); <nl> + nslit.maybeSetWindowInstance(externs.get(name)); <nl> 
mmm CommandLineRunner.java <nl> ppp CommandLineRunner.java <nl> - import org.kohsuke.args4j.Argument; <nl> - import org.kohsuke.args4j.CmdLineException; <nl> - import org.kohsuke.args4j.CmdLineParser; <nl> - import org.kohsuke.args4j.NamedOptionDef; <nl> - import org.kohsuke.args4j.Option; <nl> - import org.kohsuke.args4j.OptionDef; <nl> 
new file <nl> ppp ModuleDeclarationTree.java <nl> + package com.google.javascript.jscomp.parsing.parser.trees; <nl> + import com.google.common.collect.ImmutableList; <nl> + import com.google.javascript.jscomp.parsing.parser.util.SourceRange; <nl> + public class ModuleDeclarationTree extends ParseTree { <nl> 
mmm JSTypeNative.java <nl> ppp JSTypeNative.java <nl> + SYMBOL_OBJECT_TYPE, <nl> + SYMBOL_OBJECT_FUNCTION_TYPE, <nl> + SYMBOL_TYPE, <nl> + SYMBOL_VALUE_OR_OBJECT_TYPE, <nl> + OBJECT_SYMBOL, <nl> + OBJECT_NUMBER_STRING_BOOLEAN_SYMBOL, <nl> + NUMBER_STRING_BOOLEAN_SYMBOL, <nl> + NUMBER_SYMBOL, <nl> + STRING_SYMBOL, <nl> 
mmm IntegrationTest.java <nl> ppp IntegrationTest.java <nl> - SourceFile.fromCode("externs", "extern.foo")); <nl> + SourceFile.fromCode("externs", CompilerTestCase.DEFAULT_EXTERNS + "extern.foo")); <nl> + CompilerTestCase.DEFAULT_EXTERNS + <nl> - "externs", "var use; var arguments; arguments.callee;")); <nl> 
mmm CodePrinterTest.java <nl> ppp CodePrinterTest.java <nl> + import com.google.javascript.jscomp.TypeICompilerTestCase.TypeInferenceMode; <nl> - assertPrettyPrintSame( <nl> - "var x = 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;\n"); <nl> - + "function Foo() {\n}\n"); <nl> 
mmm NodeTest.java <nl> ppp NodeTest.java <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> + import org.junit.runners.JUnit4; <nl> + @RunWith(JUnit4.class) <nl> - public void testMergeExtractNormal() throws Exception { <nl> + @Test <nl> + public void testMergeExtractNormal() { <nl> - public void testMergeExtractErroneous() throws Exception { <nl> 
mmm DepsGeneratorTest.java <nl> ppp DepsGeneratorTest.java <nl> - ModuleLoader.PathResolver.ABSOLUTE)); <nl> + ModuleLoader.PathResolver.ABSOLUTE, <nl> + ModuleLoader.ResolutionMode.LEGACY)); <nl> - ModuleLoader.PathResolver.ABSOLUTE)); <nl> + ModuleLoader.PathResolver.ABSOLUTE, <nl> + ModuleLoader.ResolutionMode.LEGACY)); <nl> 
mmm TypeInference.java <nl> ppp TypeInference.java <nl> - JSDocInfo info = n.getJSDocInfo(); <nl> - if (info != null && info.hasType()) { <nl> - n.setJSType(info.getType().evaluate(syntacticScope, registry)); <nl> - } <nl> + if (!n.isFunction()) { <nl> + JSDocInfo info = n.getJSDocInfo(); <nl> + if (info != null && info.hasType()) { <nl> 
mmm MultiPassTest.java <nl> ppp MultiPassTest.java <nl> - true, true, true, true, true, <nl> - CompilerOptions.UNLIMITED_FUN_SIZE_AFTER_INLINING); <nl> + true, true, true, true, true); <nl> mmm TypedCodeGenerator.java <nl> ppp TypedCodeGenerator.java <nl> + if (fnNode != null && fnNode.getBooleanProp(Node.IS_DISPATCHER)) { <nl> 
mmm SimpleErrorReporter.java <nl> ppp SimpleErrorReporter.java <nl> mmm CommandLineRunnerTest.java <nl> ppp CommandLineRunnerTest.java <nl> + import java.io.ByteArrayInputStream; <nl> + public void testJsonStreamInputFlag() throws FlagUsageException { <nl> + String inputString = "[{\"src\": \"alert('foo');\", \"path\":\"foo.js\"}]"; <nl> 
mmm RemoveUnusedCodeClassPropertiesTest.java <nl> ppp RemoveUnusedCodeClassPropertiesTest.java <nl> - .removeUnusedConstructorProperties(true) <nl> mmm RemoveUnusedCodePrototypePropertiesTest.java <nl> ppp RemoveUnusedCodePrototypePropertiesTest.java <nl> + "  static foo() {}", <nl> mmm IntegrationTest.java <nl> 
mmm OptimizeReturns.java <nl> ppp OptimizeReturns.java <nl> - if (ReferenceMap.isCallTarget(n)) { <nl> + if (ReferenceMap.isCallTarget(n) || ReferenceMap.isOptionalCallTarget(n)) { <nl> mmm RemoveUnusedCode.java <nl> ppp RemoveUnusedCode.java <nl> - private final boolean allowRemovalOfExternProperties; <nl> 
mmm CoverageInstrumentationPass.java <nl> ppp CoverageInstrumentationPass.java <nl> + import com.google.common.collect.ImmutableSet; <nl> + import com.google.javascript.rhino.JSDocInfoBuilder; <nl> - var.addSuppression("duplicate"); <nl> + JSDocInfoBuilder builder = new JSDocInfoBuilder(false); <nl> + builder.recordSuppressions(ImmutableSet.of("duplicate")); <nl> 
mmm CheckRequiresForConstructors.java <nl> ppp CheckRequiresForConstructors.java <nl> - import com.google.common.base.Preconditions; <nl> - import com.google.javascript.jscomp.CheckLevel; <nl> + import com.google.javascript.rhino.JSTypeExpression; <nl> + import com.google.javascript.rhino.jstype.JSType; <nl> 
mmm AbstractOioChannel.java <nl> ppp AbstractOioChannel.java <nl> - package io.netty.channel.socket.oio; <nl> - import java.io.IOException; <nl> - import java.net.InetSocketAddress; <nl> - import java.net.SocketAddress; <nl> - import io.netty.channel.AbstractChannel; <nl> - import io.netty.channel.Channel; <nl> 
mmm ChannelOutboundBuffer.java <nl> ppp ChannelOutboundBuffer.java <nl> + import java.util.Arrays; <nl> - final class ChannelOutboundBuffer { <nl> + public final class ChannelOutboundBuffer { <nl> - MessageList currentMessageList; <nl> - int currentMessageIndex; <nl> - private long currentMessageListSize; <nl> 
mmm NetUtilTest.java <nl> ppp NetUtilTest.java <nl> + import io.netty.util.internal.StringUtil; <nl> - String hex = Integer.toHexString(b & 0xFF); <nl> + String hex = StringUtil.byteToHexString(b); <nl> - if (value == null) { <nl> - return null; <nl> - } <nl> - byte[] buf = new byte[value.length() >>> 1]; <nl> 
mmm BinaryMemcacheRequestDecoder.java <nl> ppp BinaryMemcacheRequestDecoder.java <nl> - BinaryMemcacheRequest header = new DefaultBinaryMemcacheRequest(); <nl> + DefaultBinaryMemcacheRequest header = new DefaultBinaryMemcacheRequest(); <nl> mmm BinaryMemcacheResponseDecoder.java <nl> ppp BinaryMemcacheResponseDecoder.java <nl> 
mmm WebSocketServerHandshaker00.java <nl> ppp WebSocketServerHandshaker00.java <nl> - return; <nl> - return; <nl> 
mmm NioDatagramChannel.java <nl> ppp NioDatagramChannel.java <nl> - @Override <nl> - protected AbstractNioMessageUnsafe newUnsafe() { <nl> - return new NioDatagramChannelUnsafe(); <nl> - } <nl> - private final class NioDatagramChannelUnsafe extends AbstractNioMessageUnsafe { <nl> - @Override <nl> - public void suspendRead() { <nl> 
mmm NioDatagramChannel.java <nl> ppp NioDatagramChannel.java <nl> - import org.jboss.netty.util.internal.LinkedTransferQueue; <nl> + import org.jboss.netty.util.internal.LegacyLinkedTransferQueue; <nl> - LinkedTransferQueue<MessageEvent> { <nl> - private static final long serialVersionUID = 5057413071460766376L; <nl> 
mmm RtspRequestDecoder.java <nl> ppp RtspRequestDecoder.java <nl> + @Override <nl> + protected HttpMessage createInvalidMessage() { <nl> + return new DefaultHttpRequest(RtspVersions.RTSP_1_0, RtspMethods.OPTIONS, "/bad-request"); <nl> + } <nl> new file <nl> ppp HttpInvalidMessageTest.java <nl> + package io.netty.handler.codec.http; <nl> 
mmm AbstractNioMessageChannel.java <nl> ppp AbstractNioMessageChannel.java <nl> + import io.netty.buffer.MessageBuf; <nl> - import java.util.Queue; <nl> - final Queue<Object> msgBuf = pipeline.inboundMessageBuffer(); <nl> + final MessageBuf<Object> msgBuf = pipeline.inboundMessageBuffer(); <nl> - protected void doFlushMessageBuffer(Queue<Object> buf) throws Exception { <nl> 
deleted file <nl> mmm CookieEncoderUtil.java <nl> - package io.netty.handler.codec.http; <nl> - import io.netty.util.internal.InternalThreadLocalMap; <nl> - final class CookieEncoderUtil { <nl> - static StringBuilder stringBuilder() { <nl> - return InternalThreadLocalMap.get().stringBuilder(); <nl> - } <nl> 
mmm MsgEchoClientHandler.java <nl> ppp MsgEchoClientHandler.java <nl> - ctx.write(message); <nl> + ctx.writeAndFlush(message); <nl> mmm SctpEchoClientHandler.java <nl> ppp SctpEchoClientHandler.java <nl> - ctx.write(new SctpMessage(0, 0, firstMessage)); <nl> + ctx.writeAndFlush(new SctpMessage(0, 0, firstMessage)); <nl> 
mmm SctpChannelConfig.java <nl> ppp SctpChannelConfig.java <nl> - @Deprecated <nl> - @Deprecated <nl> mmm DefaultOioServerSocketChannelConfig.java <nl> ppp DefaultOioServerSocketChannelConfig.java <nl> - @Deprecated <nl> - @Deprecated <nl> mmm DefaultSocketChannelConfig.java <nl> ppp DefaultSocketChannelConfig.java <nl> 
deleted file <nl> mmm NioDatagramPipelineSink.java <nl> - package io.netty.channel.socket.nio; <nl> - import static io.netty.channel.Channels.*; <nl> - import java.net.InetSocketAddress; <nl> - import java.net.SocketAddress; <nl> - import io.netty.channel.ChannelEvent; <nl> - import io.netty.channel.ChannelFuture; <nl> 
mmm SpdyClient.java <nl> ppp SpdyClient.java <nl> - import io.netty.handler.codec.spdy.SpdyOrHttpChooser.SelectedProtocol; <nl> + import io.netty.handler.ssl.ApplicationProtocolNames; <nl> - SelectedProtocol.SPDY_3_1.protocolName(), <nl> - SelectedProtocol.HTTP_1_1.protocolName())) <nl> + ApplicationProtocolNames.SPDY_3_1, <nl> 
mmm ChannelInboundStreamHandlerAdapter.java <nl> ppp ChannelInboundStreamHandlerAdapter.java <nl> - public class ChannelInboundStreamHandlerAdapter <nl> - extends ChannelStateHandlerAdapter implements ChannelInboundHandler<Byte> { <nl> + public class ChannelInboundStreamHandlerAdapter extends ChannelInboundHandlerAdapter<Byte> { <nl> 
mmm Inflate.java <nl> ppp Inflate.java <nl> - } else if (z.istate.wrapperType == WrapperType.ZLIB) { <nl> + } <nl> + if (z.istate.wrapperType == WrapperType.ZLIB) { <nl> - case CHECK4: <nl> + case CHECK4: <nl> mmm HttpContentEncoder.java <nl> ppp HttpContentEncoder.java <nl> - } else  if (msg instanceof HttpMessage) { <nl> 
mmm AbstractEpollStreamChannel.java <nl> ppp AbstractEpollStreamChannel.java <nl> - import io.netty.channel.EventLoop; <nl> - import io.netty.channel.FileDescriptor; <nl> + import io.netty.channel.unix.FileDescriptor; <nl> new file <nl> ppp package-info.java <nl> + package io.netty.channel.unix; <nl> mmm DomainSocketReadMode.java <nl> 
mmm ChannelHandlerAdapter.java <nl> ppp ChannelHandlerAdapter.java <nl> + import io.netty.buffer.ChannelBuffer; <nl> + import java.util.Queue; <nl> - if (ctx.type().contains(ChannelHandlerType.OUTBOUND)) { <nl> - ChannelOutboundHandlerAdapter.flush0(ctx, future); <nl> - } else { <nl> - ctx.flush(future); <nl> 
mmm OioServerSocketChannel.java <nl> ppp OioServerSocketChannel.java <nl> + import io.netty.buffer.ChannelBufType; <nl> + import io.netty.channel.ChannelMetadata; <nl> + private static final ChannelMetadata METADATA = new ChannelMetadata(ChannelBufType.MESSAGE, false); <nl> + @Override <nl> + public ChannelMetadata metadata() { <nl> 
mmm SingleThreadEventExecutor.java <nl> ppp SingleThreadEventExecutor.java <nl> + private static final long SHUTDOWN_DELAY_NANOS = TimeUnit.SECONDS.toNanos(2); <nl> + private static final int ST_NOT_STARTED = 1; <nl> + private static final int ST_STARTED = 2; <nl> + private static final int ST_SHUTDOWN = 3; <nl> 
mmm WebSocketClientHandshaker00.java <nl> ppp WebSocketClientHandshaker00.java <nl> - import io.netty.util.AsciiString; <nl> - private static final AsciiString WEBSOCKET = AsciiString.cached("WebSocket"); <nl> - if (!response.status().equals(HttpResponseStatus.SWITCHING_PROTOCOLS)) { <nl> - throw new WebSocketHandshakeException("Invalid handshake response getStatus: " + response.status()); <nl> 
mmm NanoWSD.java <nl> ppp NanoWSD.java <nl> - import org.nanohttpd.util.IHandler; <nl> - protected final class Interceptor implements IHandler<IHTTPSession, Response> { <nl> - public Interceptor() { <nl> - } <nl> - @Override <nl> - public Response handle(IHTTPSession input) { <nl> - return handleWebSocket(input); <nl> 
mmm GroovyTests.java <nl> ppp GroovyTests.java <nl> new file <nl> ppp SimpleI002.java <nl> + package tgt; <nl> + public interface SimpleI002 { <nl> + 	int toInt(String s); <nl> + 	String fromInt(); <nl> + } <nl> mmm MethodInvokerRewriterTests.java <nl> ppp MethodInvokerRewriterTests.java <nl> - 		TypeRegistry typeRegistry = getTypeRegistry("target.SimpleIClass,target.SimpleI"); <nl> 
mmm UpdateTopicSubCommand.java <nl> ppp UpdateTopicSubCommand.java <nl> - System.out.printf(String.format("set cluster orderConf. isOrder=%s, orderConf=[%s]", <nl> - isOrder, orderConf.toString())); <nl> + System.out.printf("set cluster orderConf. isOrder=%s, orderConf=[%s]", isOrder, orderConf); <nl> mmm SendMsgStatusCommand.java <nl> 
mmm DefaultMQPushConsumerTest.java <nl> ppp DefaultMQPushConsumerTest.java <nl> - Set<MessageQueue> messageQueueSet = new HashSet<>(); <nl> + Set<MessageQueue> messageQueueSet = new HashSet<MessageQueue>(); <nl> mmm MQClientInstanceTest.java <nl> ppp MQClientInstanceTest.java <nl> - List<BrokerData> brokerDataList = new ArrayList<>(); <nl> 
new file <nl> ppp Slf4jLoggerFactoryTest.java <nl> + package org.apache.rocketmq.logging; <nl> + import ch.qos.logback.classic.joran.JoranConfigurator; <nl> + import ch.qos.logback.core.Context; <nl> + import ch.qos.logback.core.joran.spi.JoranException; <nl> + import org.junit.Assert; <nl> + import org.junit.Before; <nl> 
mmm MQProducer.java <nl> ppp MQProducer.java <nl> - TransactionSendResult sendMessageInTransaction(final Message msg, <nl> - final LocalTransactionExecuter tranExecuter, final Object arg) throws MQClientException; <nl> - TransactionSendResult sendMessageInTransaction(final Message msg, <nl> - final Object arg) throws MQClientException; <nl> 
mmm ConfigurationPropertyValidatorTest.java <nl> ppp ConfigurationPropertyValidatorTest.java <nl> - Mockito.when(mockAuth.getUsernamePropertyDescriptor()).thenReturn("user"); <nl> - Mockito.when(mockAuth.getPasswordPropertyDescriptor()).thenReturn("pass"); <nl> - mockEventDispatcher, "jib.test.auth.user", "jib.test.auth.pass", mockAuth); <nl> 
mmm BuildStepsRunnerTest.java <nl> ppp BuildStepsRunnerTest.java <nl> + import com.google.cloud.tools.jib.cache.CacheDirectoryCreationException; <nl> - CacheDirectoryNotOwnedException { <nl> + CacheDirectoryNotOwnedException, CacheDirectoryCreationException { <nl> - CacheDirectoryNotOwnedException { <nl> + CacheDirectoryNotOwnedException, CacheDirectoryCreationException { <nl> 
mmm JsonToImageTranslatorTest.java <nl> ppp JsonToImageTranslatorTest.java <nl> + import java.time.Instant; <nl> + Assert.assertEquals(Instant.ofEpochSecond(20), image.getCreated()); <nl> mmm Image.java <nl> ppp Image.java <nl> + import java.time.Instant; <nl> + import javax.annotation.Nullable; <nl> + @Nullable private Instant created; <nl> 
new file <nl> ppp ProjectProperties.java <nl> + package com.google.cloud.tools.jib.maven; <nl> + import com.google.cloud.tools.jib.builder.SourceFilesConfiguration; <nl> + import java.io.IOException; <nl> + import javax.annotation.Nullable; <nl> + import org.apache.maven.model.Plugin; <nl> + import org.apache.maven.plugin.MojoExecutionException; <nl> 
mmm ProgressEventDispatcher.java <nl> ppp ProgressEventDispatcher.java <nl> - return new ProgressEventDispatcher(eventDispatcher, allocation).dispatchProgress(0); <nl> + ProgressEventDispatcher progressEventDispatcher = <nl> + new ProgressEventDispatcher(eventDispatcher, allocation); <nl> + progressEventDispatcher.dispatchProgress(0); <nl> 
mmm TaskCommon.java <nl> ppp TaskCommon.java <nl> - import com.google.common.annotations.VisibleForTesting; <nl> + import com.google.cloud.tools.jib.plugins.common.PropertyNames; <nl> + import org.gradle.api.logging.Logger; <nl> + @Deprecated <nl> + static void checkDeprecatedUsage(JibExtension jibExtension, Logger logger) { <nl> 
new file <nl> ppp DefaultCacheStorageWriter.java <nl> + package com.google.cloud.tools.jib.ncache; <nl> + import com.google.cloud.tools.jib.blob.Blob; <nl> + import com.google.cloud.tools.jib.blob.BlobDescriptor; <nl> + import com.google.cloud.tools.jib.blob.Blobs; <nl> + import com.google.cloud.tools.jib.filesystem.FileOperations; <nl> 
mmm CordovaResourceApiTest.java <nl> ppp CordovaResourceApiTest.java <nl> - cordovaWebView.pluginManager.addService(new PluginEntry("CordovaResourceApiTestPlugin1", new CordovaPlugin() { <nl> + cordovaWebView.getPluginManager().addService(new PluginEntry("CordovaResourceApiTestPlugin1", new CordovaPlugin() { <nl> 
deleted file <nl> mmm AndroidChromeClient.java <nl> - package org.apache.cordova; <nl> - import org.apache.cordova.CordovaInterface; <nl> - import org.apache.cordova.LOG; <nl> - import org.json.JSONArray; <nl> - import org.json.JSONException; <nl> - import android.annotation.TargetApi; <nl> - import android.app.AlertDialog; <nl> 
deleted file <nl> mmm CordovaLocationListener.java <nl> - package org.apache.cordova; <nl> - import java.util.ArrayList; <nl> - import java.util.HashMap; <nl> - import java.util.Iterator; <nl> - import java.util.List; <nl> - import java.util.Timer; <nl> - import java.util.TimerTask; <nl> - import org.apache.cordova.api.CallbackContext; <nl> 
mmm Device.java <nl> ppp Device.java <nl> - public boolean execute(String action, JSONArray args, CallbackContext callbackContext) { <nl> - try { <nl> - if (action.equals("getDeviceInfo")) { <nl> - JSONObject r = new JSONObject(); <nl> - r.put("uuid", Device.uuid); <nl> - r.put("version", this.getOSVersion()); <nl> 
new file <nl> ppp ContactAccessor.java <nl> + package org.apache.cordova; <nl> + import java.util.HashMap; <nl> + import android.util.Log; <nl> + import android.webkit.WebView; <nl> + import org.apache.cordova.api.CordovaInterface; <nl> + import org.json.JSONArray; <nl> + import org.json.JSONException; <nl> + import org.json.JSONObject; <nl> 
mmm LinearLayoutSoftKeyboardDetect.java <nl> ppp LinearLayoutSoftKeyboardDetect.java <nl> - app.appView.sendJavascript("cordova.fireDocumentEvent('hidekeyboard');"); <nl> + app.sendJavascript("cordova.fireDocumentEvent('hidekeyboard');"); <nl> - app.appView.sendJavascript("cordova.fireDocumentEvent('showkeyboard');"); <nl> 
deleted file <nl> mmm MediaFull.java <nl> - package serializers.dslplatform.full; <nl> - public final class MediaFull   implements java.lang.Cloneable, java.io.Serializable, com.dslplatform.json.JsonObject { <nl> - 	 <nl> - 	 <nl> - 	 <nl> - 	public MediaFull( <nl> - 			final String uri, <nl> - 			final String title, <nl> 
mmm GoMissingReturnInspection.java <nl> ppp GoMissingReturnInspection.java <nl> - @NotNull <nl> - @Override <nl> - protected GoVisitor buildGoVisitor(@NotNull final ProblemsHolder holder, <nl> - @SuppressWarnings({"UnusedParameters", "For future"}) @NotNull LocalInspectionToolSession session) { <nl> - return new GoVisitor() { <nl> 
mmm GoReference.java <nl> ppp GoReference.java <nl> - if (o.getAlias() == null) { <nl> - PsiDirectory resolve = importString.resolve(); <nl> - if (resolve != null && !processor.execute(resolve, state.put(ACTUAL_NAME, entry.getKey()))) return true; <nl> - } <nl> + PsiDirectory resolve = importString.resolve(); <nl> 
mmm GoCompletionTestBase.java <nl> ppp GoCompletionTestBase.java <nl> 
mmm GoParser.java <nl> ppp GoParser.java <nl> - else if (t == TYPE_SWITCH_CASE) { <nl> - r = TypeSwitchCase(b, 0); <nl> - } <nl> - public static boolean TypeSwitchCase(PsiBuilder b, int l) { <nl> + static boolean TypeSwitchCase(PsiBuilder b, int l) { <nl> - if (!nextTokenIs(b, "<type switch case>", CASE, DEFAULT)) return false; <nl> 
mmm GoTestRunConfigurationEditorForm.java <nl> ppp GoTestRunConfigurationEditorForm.java <nl> - import com.goide.runconfig.testing.GoTestRunConfiguration; <nl> + import com.goide.runconfig.testing.GoTestRunConfigurationBase; <nl> - public class GoTestRunConfigurationEditorForm extends SettingsEditor<GoTestRunConfiguration> { <nl> 
mmm GoDocumentationProvider.java <nl> ppp GoDocumentationProvider.java <nl> - import java.util.*; <nl> + import java.util.Arrays; <nl> + import java.util.Collections; <nl> + import java.util.Comparator; <nl> + import java.util.List; <nl> - return replaceInnerTypes(type, contextImportPath, ((GoPointerType)type).getType()); <nl> 
mmm TestScrollElasticsearchHttp.java <nl> ppp TestScrollElasticsearchHttp.java <nl> + @Test <nl> + public void testScrollElasticsearchOnTrigger_withNoInput_EL() throws IOException { <nl> + runner = TestRunners.newTestRunner(new ScrollElasticsearchHttpTestProcessor()); <nl> + runner.setValidateExpressionUsage(true); <nl> 
mmm FetchElasticsearchHttp.java <nl> ppp FetchElasticsearchHttp.java <nl> + import org.apache.nifi.processors.elasticsearch.AbstractElasticsearchHttpProcessor.ElasticsearchVersion; <nl> - .description("The (optional) type of this document, used by Elasticsearch for indexing and searching. If the property is empty, " <nl> 
mmm WebClusterManager.java <nl> ppp WebClusterManager.java <nl> - import org.apache.nifi.controller.exception.ComponentLifeCycleException; <nl> + import org.apache.nifi.controller.exception.ProcessorLifeCycleException; <nl> - throw new ComponentLifeCycleException("Failed to invoke On-Added Lifecycle methods of " + task, e); <nl> 
new file <nl> ppp ErrorTypes.java <nl> + package org.apache.nifi.processor.util.pattern; <nl> + import static org.apache.nifi.processor.util.pattern.ErrorTypes.Destination.Failure; <nl> + import static org.apache.nifi.processor.util.pattern.ErrorTypes.Destination.ProcessException; <nl> + import static org.apache.nifi.processor.util.pattern.ErrorTypes.Destination.Retry; <nl> 
mmm SnippetUtils.java <nl> ppp SnippetUtils.java <nl> - if ( propertyDescriptorDto != null && propertyDescriptorDto.getIdentifiesControllerService() != null ) { <nl> + if ( propertyDescriptorDto != null && propertyDescriptorDto.isIdentifiesControllerService() ) { <nl> - if ( descriptor.getIdentifiesControllerService() != null ) { <nl> 
mmm ProvenanceEventType.java <nl> ppp ProvenanceEventType.java <nl> mmm OnConfigured.java <nl> ppp OnConfigured.java <nl> - * {@link org.apache.nifi.controller.ConfigurationContext ConfigurationContext}. <nl> + * {@link nifi.controller.ConfigurationContext ConfigurationContext}. <nl> mmm ProcessScheduler.java <nl> 
mmm TestWriteJsonResult.java <nl> ppp TestWriteJsonResult.java <nl> + import org.apache.nifi.record.NullSuppression; <nl> new file <nl> ppp WriteXMLResult.java <nl> + package org.apache.nifi.xml; <nl> + import javanet.staxutils.IndentingXMLStreamWriter; <nl> + import org.apache.nifi.record.NullSuppression; <nl> 
mmm NativePageActivity.java <nl> ppp NativePageActivity.java <nl> - import android.support.annotation.Nullable; <nl> - import android.support.v7.app.AppCompatActivity; <nl> + import androidx.annotation.Nullable; <nl> + import androidx.appcompat.app.AppCompatActivity; <nl> mmm FlutterSplashView.java <nl> ppp FlutterSplashView.java <nl> 
new file <nl> ppp XTextInputPlugin.java <nl> + package com.idlefish.flutterboost; <nl> + import android.content.Context; <nl> + import android.support.annotation.NonNull; <nl> + import android.support.annotation.Nullable; <nl> + import android.text.Editable; <nl> + import android.text.InputType; <nl> + import android.text.Selection; <nl> 
mmm BoostRegistrar.java <nl> ppp BoostRegistrar.java <nl> - import androidx.annotation.NonNull; <nl> + import android.support.annotation.NonNull; <nl> mmm FlutterSplashView.java <nl> ppp FlutterSplashView.java <nl> - import androidx.annotation.NonNull; <nl> - import androidx.annotation.Nullable; <nl> + import android.support.annotation.NonNull; <nl> 
mmm AllCategoryTableModel.java <nl> ppp AllCategoryTableModel.java <nl> - public AllCategoryTableModel(PolicyAllCategoryPanel policyAllCategoryPanel) { <nl> + public AllCategoryTableModel(PluginFactory pluginFactory) { <nl> + this.pluginFactory = pluginFactory; <nl> mmm PopupMenuEditBreak.java <nl> ppp PopupMenuEditBreak.java <nl> 
new file <nl> ppp PopupMenuUnsetActiveSession.java <nl> + package org.zaproxy.zap.extension.httpsessions; <nl> + import java.awt.Component; <nl> + import org.parosproxy.paros.Constant; <nl> + import org.parosproxy.paros.extension.ExtensionPopupMenuItem; <nl> + public class PopupMenuUnsetActiveSession extends ExtensionPopupMenuItem { <nl> 
mmm Authorization.java <nl> ppp Authorization.java <nl> - * Copyright the ZAP development team <nl> + * Copyright 2016 the ZAP development team <nl> mmm Authentication.java <nl> ppp Authentication.java <nl> - * Copyright the ZAP development team <nl> + * Copyright 2016 the ZAP development team <nl> mmm AjaxSpider.java <nl> 
mmm ContextGeneralPanel.java <nl> ppp ContextGeneralPanel.java <nl> mmm BrowserDialog.java <nl> ppp BrowserDialog.java <nl> mmm ContextIncludePanel.java <nl> ppp ContextIncludePanel.java <nl> mmm MultipartParam.java <nl> ppp MultipartParam.java <nl> - * @return String[] of elements: disposition, name, filename. <nl> 
mmm HttpRequestHeader.java <nl> ppp HttpRequestHeader.java <nl> - * @return <nl> mmm ContextExcludePanel.java <nl> ppp ContextExcludePanel.java <nl> mmm ContextListPanel.java <nl> ppp ContextListPanel.java <nl> mmm HttpMethodDirector.java <nl> ppp HttpMethodDirector.java <nl> mmm ContextGeneralPanel.java <nl> 
mmm AbstractPluginUnitTest.java <nl> ppp AbstractPluginUnitTest.java <nl> - public void shouldRetrieveUnknownStatusByDefault() { <nl> + public void shouldRetrieveUnkownStatusByDefault() { <nl> mmm BoyerMooreMatcherUnitTest.java <nl> ppp BoyerMooreMatcherUnitTest.java <nl> - public void shouldNotFindAnNonexistentPattern() { <nl> 
mmm ExtensionHistory.java <nl> ppp ExtensionHistory.java <nl> - 	                    sn.setHistoryReference(historyRef); <nl> + 	                    if (sn != null) { <nl> + 	                    	sn.setHistoryReference(historyRef); <nl> + 	                    } <nl> mmm DbSQL.java <nl> ppp DbSQL.java <nl> - 	public Database initDatabase() throws IllegalStateException, IOException, ClassNotFoundException, InstantiationException, IllegalAccessException { <nl> 
mmm PopupMenuExportURLs.java <nl> ppp PopupMenuExportURLs.java <nl> + import java.awt.Component; <nl> + import javax.swing.JTree; <nl> + import org.parosproxy.paros.extension.Extension; <nl> - import org.parosproxy.paros.extension.history.ExtensionHistory; <nl> - protected ExtensionHistory extension = null; <nl> 
mmm OverrideMessageProxyListener.java <nl> ppp OverrideMessageProxyListener.java <nl> - * </p> <nl> - * </p> <nl> mmm PopupMenuShowAlerts.java <nl> ppp PopupMenuShowAlerts.java <nl> mmm AddOnLoader.java <nl> ppp AddOnLoader.java <nl> mmm OptionsScannerPanel.java <nl> ppp OptionsScannerPanel.java <nl> mmm SessionChangedListener.java <nl> 
mmm GuiBootstrap.java <nl> ppp GuiBootstrap.java <nl> - View.setDisplayOption(viewParam.getDisplayOption()); <nl> new file <nl> ppp ComponentMaximiserMouseListener.java <nl> + package org.zaproxy.zap.view; <nl> + import java.awt.Component; <nl> + import java.awt.event.MouseAdapter; <nl> + import java.awt.event.MouseEvent; <nl> 
mmm ZAP.java <nl> ppp ZAP.java <nl> + import java.io.File; <nl> + import java.io.IOException; <nl> + import java.util.Locale; <nl> + import org.parosproxy.paros.Constant; <nl> + import org.zaproxy.zap.utils.ClassLoaderUtil; <nl> + initClassLoader(); <nl> + private static void initClassLoader() { <nl> + try { <nl> 
mmm ActiveScanPanel.java <nl> ppp ActiveScanPanel.java <nl> - 	private TableExportButton<HistoryReferencesTable> exportButton = null; <nl> + 	private TableExportButton exportButton = null; <nl> - 	@Deprecated <nl> - 	public boolean isFiltered(HttpMessage responseMessage) { <nl> - 		return filtered(responseMessage).isFiltered(); <nl> 
mmm UninstalledAddOnsTableModel.java <nl> ppp UninstalledAddOnsTableModel.java <nl> - 		return getAddOnWrapper(rowIndex).getAddOn().getFileVersion(); <nl> + 		return getAddOnWrapper(rowIndex).getAddOn().getVersion(); <nl> mmm AddOnLoader.java <nl> ppp AddOnLoader.java <nl> + import org.zaproxy.zap.Version; <nl> 
mmm SpiderMessagesTableModel.java <nl> ppp SpiderMessagesTableModel.java <nl> + import org.parosproxy.paros.model.HistoryReferenceEventPublisher; <nl> - private AlertEventConsumer alertEventConsumer; <nl> + private EventConsumerImpl eventConsumer; <nl> - alertEventConsumer = new AlertEventConsumer(); <nl> 
mmm PluginFactory.java <nl> ppp PluginFactory.java <nl> - if (listRunning.remove(plugin)) { <nl> - Plugin completedPlugin = mapAllPlugin.get(plugin.getId()); <nl> - listCompleted.add(completedPlugin); <nl> - completedPlugin.setTimeFinished(); <nl> - } <nl> + listRunning.remove(plugin); <nl> + listCompleted.add(plugin); <nl> 
mmm SplashScreen.java <nl> ppp SplashScreen.java <nl> + import java.awt.GridBagConstraints; <nl> + import java.awt.Image; <nl> - import javax.swing.Box; <nl> + import javax.swing.ImageIcon; <nl> + import javax.swing.JPanel; <nl> - BackgroundImagePanel panel = new BackgroundImagePanel(); <nl> + JPanel panel = new JPanel(new GridBagLayout()); <nl> 
mmm ProxyParam.java <nl> ppp ProxyParam.java <nl> - private static final String MODIFY_ACCEPT_ENCODING_HEADER = "proxy.modifyAcceptEncoding"; <nl> + private static final String REMOVE_UNSUPPORTED_ENCODINGS = "proxy.removeUnsupportedEncodings"; <nl> - private boolean modifyAcceptEncodingHeader = true; <nl> 
mmm TutByApi.java <nl> ppp TutByApi.java <nl> - import com.github.scribejava.core.utils.OAuthEncoder; <nl> - import com.github.scribejava.core.utils.Preconditions; <nl> - private static final String AUTHORIZE_URL <nl> - public String getAuthorizationUrl(OAuthConfig config) { <nl> - Preconditions.checkValidUrl(config.getCallback(), <nl> 
new file <nl> ppp ApacheProvider.java <nl> + package com.github.scribejava.httpclient.apache; <nl> + import com.github.scribejava.core.httpclient.HttpClient; <nl> + import com.github.scribejava.core.httpclient.HttpClientConfig; <nl> + import com.github.scribejava.core.httpclient.HttpClientProvider; <nl> + public class ApacheProvider implements HttpClientProvider { <nl> 
new file <nl> ppp DiggApi.java <nl> + package org.scribe.builder.api; <nl> + import org.scribe.model.*; <nl> + public class DiggApi extends DefaultApi10a <nl> + { <nl> + @Override <nl> + public String getRequestTokenEndpoint() <nl> + { <nl> + return BASE_URL + "request_token"; <nl> + } <nl> + @Override <nl> + public String getAccessTokenEndpoint() <nl> 
mmm ResourceRequestHandler.java <nl> ppp ResourceRequestHandler.java <nl> - @Override public void load(Request request, int networkPolicy, Callback callback) { <nl> + @Override public void load(Picasso picasso, Request request, <nl> + int networkPolicy, Callback callback) { <nl> mmm FileRequestHandler.java <nl> 
mmm BitmapHunterTest.java <nl> ppp BitmapHunterTest.java <nl> - false, false); <nl> + ARGB_8888, false, false); <nl> mmm MediaStoreRequestHandlerTest.java <nl> ppp MediaStoreRequestHandlerTest.java <nl> + import static android.graphics.Bitmap.Config.ARGB_8888; <nl> - Request request = new Request.Builder(MEDIA_STORE_CONTENT_1_URL, 0).resize(100, 100).build(); <nl> 
mmm UrlConnectionLoader.java <nl> ppp UrlConnectionLoader.java <nl> - import android.net.Uri; <nl> - @Override public Response load(Uri uri, boolean localCacheOnly) throws IOException { <nl> + @Override public Response load(String url, boolean localCacheOnly) throws IOException { <nl> - HttpURLConnection connection = openConnection(uri.toString()); <nl> 
mmm OkHttpDownloader.java <nl> ppp OkHttpDownloader.java <nl> + long contentLength = connection.getHeaderFieldInt("Content-Length", 0); <nl> - return new Response(connection.getInputStream(), fromCache); <nl> + return new Response(connection.getInputStream(), fromCache, contentLength); <nl> mmm UtilsTest.java <nl> 
mmm PicassoSampleAdapter.java <nl> ppp PicassoSampleAdapter.java <nl> mmm SampleScrollListener.java <nl> ppp SampleScrollListener.java <nl> - final Picasso picasso = Picasso.with(context); <nl> + final Picasso picasso = Picasso.with(); <nl> mmm SampleListDetailActivity.java <nl> ppp SampleListDetailActivity.java <nl> 
mmm NetworkRequestHandlerTest.java <nl> ppp NetworkRequestHandlerTest.java <nl> - import org.mockito.ArgumentCaptor; <nl> - import org.mockito.Captor; <nl> - private final OkHttp3Downloader downloader = new OkHttp3Downloader(new Call.Factory() { <nl> - @Override public Call newCall(Request request) { <nl> 
mmm NetworkBitmapHunter.java <nl> ppp NetworkBitmapHunter.java <nl> + if (is == null) { <nl> + return null; <nl> + } <nl> + if (loadedFrom == NETWORK && response.getContentLength() > 0) { <nl> + stats.dispatchDownloadFinished(response.getContentLength()); <nl> + } <nl> - if (stream == null) { <nl> - return null; <nl> 
mmm BaseSampleActivity.java <nl> ppp BaseSampleActivity.java <nl> - import android.support.v7.app.ActionBarActivity; <nl> - import android.view.MenuItem; <nl> - public class BaseSampleActivity extends ActionBarActivity { <nl> + import com.actionbarsherlock.app.SherlockFragmentActivity; <nl> + import com.actionbarsherlock.view.MenuItem; <nl> 
mmm NameResolverTest.java <nl> ppp NameResolverTest.java <nl> + import java.util.concurrent.Executor; <nl> + import java.util.concurrent.Executors; <nl> + private final Executor executor = Executors.newSingleThreadExecutor(); <nl> + assertThat(args.getBlockingExecutor()).isSameInstanceAs(executor); <nl> + assertThat(args2.getBlockingExecutor()).isSameInstanceAs(executor); <nl> 
new file <nl> ppp CancelServerStreamCommand.java <nl> + package io.grpc.transport.netty; <nl> + import com.google.common.base.MoreObjects; <nl> + import com.google.common.base.Objects; <nl> + import com.google.common.base.Preconditions; <nl> + import io.grpc.Status; <nl> + class CancelServerStreamCommand { <nl> 
mmm ClientCalls.java <nl> ppp ClientCalls.java <nl> - asyncUnaryRequestCall(call, req, result.listener(), true); <nl> + asyncUnaryRequestCall(call, req, result.listener()); <nl> - asyncUnaryRequestCall(call, req, result.listener(), true); <nl> + asyncUnaryRequestCall(call, req, result.listener()); <nl> - asyncUnaryRequestCall(call, req, new UnaryStreamToFuture<>(responseFuture), false); <nl> 
mmm InternalSubchannel.java <nl> ppp InternalSubchannel.java <nl> - void handleInUse() { <nl> + protected void handleInUse() { <nl> - void handleNotInUse() { <nl> + protected void handleNotInUse() { <nl> + @Nullable <nl> + ClientTransport getTransport() { <nl> + return activeTransport; <nl> + } <nl> + String getAuthority() { <nl> 
mmm MethodDescriptor.java <nl> ppp MethodDescriptor.java <nl> - import java.util.concurrent.TimeUnit; <nl> - private final long timeoutMicros; <nl> - MethodType type, String name, long timeout, TimeUnit timeoutUnit, <nl> + MethodType type, String name, <nl> - type, name, timeoutUnit.toMicros(timeout), requestMarshaller, responseMarshaller); <nl> 
mmm TestServiceGrpc.java <nl> ppp TestServiceGrpc.java <nl> - private static io.grpc.ServiceDescriptor serviceDescriptor; <nl> - public static synchronized io.grpc.ServiceDescriptor getServiceDescriptor() { <nl> - if (serviceDescriptor == null) { <nl> - serviceDescriptor = new io.grpc.ServiceDescriptor(SERVICE_NAME, <nl> 
mmm MetadataOrBuilder.java <nl> ppp MetadataOrBuilder.java <nl> - package io.grpc.binarylog; <nl> + package io.grpc.binarylog.v1alpha; <nl> - java.util.List<io.grpc.binarylog.MetadataEntry> <nl> + java.util.List<io.grpc.binarylog.v1alpha.MetadataEntry> <nl> - io.grpc.binarylog.MetadataEntry getEntry(int index); <nl> 
mmm Channelz.java <nl> ppp Channelz.java <nl> - private final ConcurrentMap<Long, Instrumented<SocketStats>> clientSockets <nl> + private final ConcurrentMap<Long, Instrumented<SocketStats>> otherSockets <nl> - add(clientSockets, socket); <nl> + add(otherSockets, socket); <nl> + } <nl> + public void addListenSocket(Instrumented<SocketStats> socket) { <nl> 
mmm NettyChannelBuilder.java <nl> ppp NettyChannelBuilder.java <nl> + import io.grpc.internal.ProxyParameters; <nl> - SslContext sslContext) { <nl> + SslContext sslContext, <nl> + ProxyParameters proxy) { <nl> - String proxy = System.getenv("GRPC_PROXY_EXP"); <nl> - String[] parts = proxy.split(":", 2); <nl> 
mmm GracefulCloseCommand.java <nl> ppp GracefulCloseCommand.java <nl> - class GracefulCloseCommand { <nl> + class GracefulCloseCommand extends WriteQueue.AbstractQueuedCommand { <nl> mmm CancelServerStreamCommand.java <nl> ppp CancelServerStreamCommand.java <nl> - class CancelServerStreamCommand { <nl> + class CancelServerStreamCommand extends WriteQueue.AbstractQueuedCommand { <nl> 
mmm MutableHandlerRegistryImplTest.java <nl> ppp MutableHandlerRegistryImplTest.java <nl> - MethodDescriptor.create(MethodType.UNKNOWN, "basic", "flow", <nl> + MethodDescriptor.create(MethodType.UNKNOWN, "basic/flow", <nl> - MethodDescriptor.create(MethodType.UNKNOWN, "multi", "couple", <nl> - requestMarshaller, responseMarshaller), <nl> 
mmm Channelz.java <nl> ppp Channelz.java <nl> + import java.security.cert.Certificate; <nl> + import java.util.logging.Level; <nl> + import java.util.logging.Logger; <nl> + import javax.net.ssl.SSLPeerUnverifiedException; <nl> + import javax.net.ssl.SSLSession; <nl> + private static final Logger log = Logger.getLogger(Channelz.class.getName()); <nl> 
new file <nl> ppp TransportTracer.java <nl> + package io.grpc.internal; <nl> + import com.google.common.base.Preconditions; <nl> + import io.grpc.Status; <nl> + import java.util.concurrent.TimeUnit; <nl> + public final class TransportTracer { <nl> + private long streamsStarted; <nl> + private long lastStreamCreatedTimeNanos; <nl> 
mmm TlsContextManagerImpl.java <nl> ppp TlsContextManagerImpl.java <nl> - public SslContextProvider<DownstreamTlsContext> findOrCreateServerSslContextProvider( <nl> + public SslContextProvider findOrCreateServerSslContextProvider( <nl> - public SslContextProvider<UpstreamTlsContext> findOrCreateClientSslContextProvider( <nl> 
mmm AnotherDynamicServiceGrpc.java <nl> ppp AnotherDynamicServiceGrpc.java <nl> mmm UnimplementedServiceGrpc.java <nl> ppp UnimplementedServiceGrpc.java <nl> mmm LoadBalancerGrpc.java <nl> ppp LoadBalancerGrpc.java <nl> mmm ServerReflectionGrpc.java <nl> ppp ServerReflectionGrpc.java <nl> mmm DynamicServiceGrpc.java <nl> 
deleted file <nl> mmm FallbackLb.java <nl> - package io.grpc.xds; <nl> - import static com.google.common.base.Preconditions.checkNotNull; <nl> - import static io.grpc.ConnectivityState.TRANSIENT_FAILURE; <nl> - import io.grpc.EquivalentAddressGroup; <nl> - import io.grpc.LoadBalancer; <nl> - import io.grpc.Status; <nl> 
new file <nl> ppp InternalPerfMark.java <nl> + package io.grpc.perfmark; <nl> + public final class InternalPerfMark { <nl> + private InternalPerfMark() {} <nl> + public abstract static class InternalPerfMarkTask extends PerfMarkTask { <nl> + public InternalPerfMarkTask() {} <nl> + } <nl> + private static final long NULL_NUMERIC_TAG = 0; <nl> 
mmm ForwardingNameResolver.java <nl> ppp ForwardingNameResolver.java <nl> + @Deprecated <nl> + @Override <nl> + public void start(Observer observer) { <nl> + delegate.start(observer); <nl> + } <nl> mmm DnsNameResolverTest.java <nl> ppp DnsNameResolverTest.java <nl> - import static org.mockito.ArgumentMatchers.any; <nl> 
mmm InProcessTransport.java <nl> ppp InProcessTransport.java <nl> - import io.grpc.CallCredentials; <nl> + import io.grpc.internal.GrpcAttributes; <nl> - .set(CallCredentials.ATTR_SECURITY_LEVEL, SecurityLevel.PRIVACY_AND_INTEGRITY) <nl> + .set(GrpcAttributes.ATTR_SECURITY_LEVEL, SecurityLevel.PRIVACY_AND_INTEGRITY) <nl> 
mmm TestScnIndex.java <nl> ppp TestScnIndex.java <nl> - import static org.testng.AssertJUnit.assertEquals; <nl> - import static org.testng.AssertJUnit.fail; <nl> + import com.linkedin.databus.core.DbusEventBuffer.AllocationPolicy; <nl> + import com.linkedin.databus.core.util.BufferPositionParser; <nl> + import com.linkedin.databus2.core.AssertLevel; <nl> 
new file <nl> ppp JarRemap.java <nl> + package com.googlecode.dex2jar.tools; <nl> + import java.io.File; <nl> + import org.apache.commons.io.FilenameUtils; <nl> + import p.rn.name.Renamer; <nl> + public class JarRemap extends BaseCmd { <nl> + public static void main(String[] args) { <nl> + new JarRemap().doMain(args); <nl> 
mmm DexLabel.java <nl> ppp DexLabel.java <nl> mmm Field.java <nl> ppp Field.java <nl> mmm DexAnnotationVisitor.java <nl> ppp DexAnnotationVisitor.java <nl> - public static byte[] readDex(File srcDex) throws IOException { <nl> - byte[] data = FileUtils.readFileToByteArray(srcDex); <nl> - return readDex(data); <nl> 
mmm CustomAnnotationWithAdapterActivity.java <nl> ppp CustomAnnotationWithAdapterActivity.java <nl> - mResultTextView.setText("SUCCESS"); <nl> + mResultTextView.setText(R.string.success); <nl> - mResultTextView.setText("FAILURE"); <nl> + mResultTextView.setText(R.string.failure); <nl> mmm UnorderedValidateTillActivity.java <nl> 
mmm IceConfigPanel.java <nl> ppp IceConfigPanel.java <nl> + private final JCheckBox googleIceBox = new SIPCommCheckBox( <nl> + Resources.getString("plugin.jabberaccregwizz.USE_GOOGLE_ICE")); <nl> + protected boolean isUseGoogleIce() <nl> + { <nl> + return googleIceBox.isSelected(); <nl> + } <nl> + protected void setUseGoogleIce(boolean isUseIce) <nl> 
mmm ThumbnailElement.java <nl> ppp ThumbnailElement.java <nl> - import javax.xml.parsers.*; <nl> + import org.xmlpull.v1.*; <nl> - import org.jitsi.util.xml.*; <nl> - import org.w3c.dom.*; <nl> + public ThumbnailElement(String cid, <nl> + String mimeType, <nl> + int width, <nl> + int height) <nl> + { <nl> + this.cid = cid; <nl> 
mmm AccountRegistrationWizard.java <nl> ppp AccountRegistrationWizard.java <nl> + public void setModification(boolean isModification); <nl> + public boolean isModification(); <nl> mmm IcqAccountRegistrationWizard.java <nl> ppp IcqAccountRegistrationWizard.java <nl> + public void setModification(boolean isModification) <nl> 
deleted file <nl> mmm SSHStatusEnum.java <nl> - package net.java.sip.communicator.impl.protocol.ssh; <nl> - import java.util.*; <nl> - import net.java.sip.communicator.service.protocol.*; <nl> - public class SSHStatusEnum <nl> - extends PresenceStatus <nl> - { <nl> - public static final SSHStatusEnum OFFLINE <nl> 
mmm FirstWizardPage.java <nl> ppp FirstWizardPage.java <nl> + SIPAccountRegistrationForm getRegistrationForm() <nl> + { <nl> + return registrationForm; <nl> + } <nl> mmm GoogleTalkAccountRegistrationWizard.java <nl> ppp GoogleTalkAccountRegistrationWizard.java <nl> - public Object getSimpleForm() <nl> + public Object getSimpleForm(boolean isCreateAccount) <nl> 
mmm CallPeerMediaHandlerJabberImpl.java <nl> ppp CallPeerMediaHandlerJabberImpl.java <nl> + setDtlsEncryptionToContent(mediaType, content, null); <nl> - ContentPacketExtension.CreatorEnum.initiator, <nl> - supportedFormats.get(0).getMediaType().toString(), <nl> - JingleUtils.getSenders(direction, !getPeer().isInitiator()), <nl> 
mmm ConferenceChatManager.java <nl> ppp ConferenceChatManager.java <nl> + public ChatRoomWrapper createChatRoom( <nl> + String roomName, <nl> + ProtocolProviderService protocolProvider, <nl> + Collection<String> contacts, <nl> + String reason, <nl> + boolean join, <nl> + boolean persistent) <nl> - chatRoom.join(); <nl> 
mmm CandidatePacketExtension.java <nl> ppp CandidatePacketExtension.java <nl> - package net.java.sip.communicator.impl.protocol.jabber.extensions.jingle; <nl> - import net.java.sip.communicator.impl.protocol.jabber.extensions.*; <nl> - public class CandidatePacketExtension extends AbstractPacketExtension <nl> 
mmm MobileIndicator.java <nl> ppp MobileIndicator.java <nl> - public void userCapsNodeAdded(String user, String node, boolean online) <nl> + public void userCapsNodeAdded(String user, ArrayList<String> fullJids, <nl> + String node, boolean online) <nl> - public void userCapsNodeRemoved(String user, String node, boolean online) <nl> 
mmm JoinTest.java <nl> ppp JoinTest.java <nl> - public void testConstruction() <nl> - { <nl> - new Join(); <nl> - } <nl> - Join join = new Join(); <nl> - join.init(null, connection); <nl> + new Join(null, connection); <nl> - Join join = new Join(); <nl> - join.init(provider, null); <nl> + new Join(provider, null); <nl> 
new file <nl> ppp ResizeVideoButton.java <nl> + package net.java.sip.communicator.impl.gui.main.call; <nl> + import java.awt.*; <nl> + import java.awt.event.*; <nl> + import javax.swing.*; <nl> + import net.java.sip.communicator.impl.gui.*; <nl> + import net.java.sip.communicator.impl.gui.utils.*; <nl> + import net.java.sip.communicator.service.protocol.*; <nl> 
mmm PresenceManager.java <nl> ppp PresenceManager.java <nl> + import java.io.*; <nl> + import net.java.sip.communicator.impl.protocol.irc.collection.*; <nl> - import com.ircclouds.irc.api.domain.*; <nl> - private static final long INITIAL_PRESENCE_WATCHER_DELAY = 10000L; <nl> - private static final long PRESENCE_WATCHER_PERIOD = 60000L; <nl> 
mmm AccountID.java <nl> ppp AccountID.java <nl> - import net.java.sip.communicator.service.credentialsstorage.*; <nl> - import org.osgi.framework.*; <nl> - public List<StunServerDescriptor> getStunServers( <nl> - BundleContext bundleContext) <nl> - { <nl> - Map<String, String> accountProperties = getAccountProperties(); <nl> 
mmm MainFrame.java <nl> ppp MainFrame.java <nl> + import net.java.sip.communicator.service.protocol.OperationSetMessageWaiting.*; <nl> + private ProviderPresenceStatusListener uiProviderPresenceListener; <nl> + private CallListener uiCallListener; <nl> + uiProviderPresenceListener <nl> + = new GUIProviderPresenceStatusListener(); <nl> 
mmm SIPCommTabbedPane.java <nl> ppp SIPCommTabbedPane.java <nl> - import javax.accessibility.*; <nl> - public SIPCommTabbedPane(boolean closingTabs, boolean maximizingTabs) { <nl> + public SIPCommTabbedPane(boolean closingTabs, boolean maximizingTabs) <nl> + { <nl> + UIManager.getDefaults() <nl> + .put("TabbedPane.tabAreaInsets", new Insets(0, 5, 0, 0)); <nl> 
mmm JavaInput.java <nl> ppp JavaInput.java <nl> + import com.sun.tools.javac.file.JavacFileManager; <nl> + import com.sun.tools.javac.parser.Tokens.TokenKind; <nl> + import com.sun.tools.javac.tree.JCTree.JCCompilationUnit; <nl> + import com.sun.tools.javac.util.Context; <nl> + import com.sun.tools.javac.util.Log; <nl> 
mmm SubtitleCard.java <nl> ppp SubtitleCard.java <nl> - public SubtitleCard(Context context) <nl> - { <nl> - super(context); <nl> - init(); <nl> - } <nl> - Context context = getContext(); <nl> - inflate(context, R.layout.show_habit_subtitle, this); <nl> + inflate(getContext(), R.layout.show_habit_subtitle, this); <nl> 
mmm HabitFixtures.java <nl> ppp HabitFixtures.java <nl> - habit.getRepetitions().toggleTimestamp(today - mark * day); <nl> + habit.getRepetitions().toggle(today - mark * day); <nl> - if (c) habit.getRepetitions().toggleTimestamp(timestamp); <nl> + if (c) habit.getRepetitions().toggle(timestamp); <nl> mmm HabitTest.java <nl> 
mmm StreakCard.java <nl> ppp StreakCard.java <nl> + import org.isoron.uhabits.R; <nl> mmm ListHabitsRootView.java <nl> ppp ListHabitsRootView.java <nl> - import org.isoron.uhabits.*; <nl> + import org.isoron.uhabits.R; <nl> mmm SubtitleCard.java <nl> ppp SubtitleCard.java <nl> - import org.isoron.uhabits.*; <nl> 
mmm HabitBroadcastReceiver.java <nl> ppp HabitBroadcastReceiver.java <nl> + import org.isoron.uhabits.models.Checkmark; <nl> - if (habit.repetitions.hasImplicitRepToday()) return; <nl> + if (habit.checkmarks.getTodayValue() != Checkmark.UNCHECKED) return; <nl> mmm MainActivityActions.java <nl> ppp MainActivityActions.java <nl> 
mmm Habit.java <nl> ppp Habit.java <nl> - public synchronized void setDescription(@NonNull String description) <nl> + public synchronized void setDescription(@Nullable String description) <nl> - data.description = description; <nl> + data.description = description == null ? "" : description; <nl> + @NonNull <nl> 
mmm BaseViewTest.java <nl> ppp BaseViewTest.java <nl> + import org.isoron.androidbase.activities.*; <nl> + import org.isoron.androidbase.utils.*; <nl> - dir = FileUtils.getFilesDir(targetContext, "test-screenshots"); <nl> + dir = baseSystem.getFilesDir("test-screenshots"); <nl> mmm ImportTest.java <nl> ppp ImportTest.java <nl> 
deleted file <nl> mmm CreateBooleanHabitDialog.java <nl> - package org.isoron.uhabits.activities.habits.edit; <nl> - import com.google.auto.factory.*; <nl> - import org.isoron.uhabits.*; <nl> - import org.isoron.uhabits.commands.*; <nl> - import org.isoron.uhabits.models.*; <nl> - @AutoFactory(allowSubclasses = true) <nl> 
mmm HabitScoreView.java <nl> ppp HabitScoreView.java <nl> + import android.support.annotation.NonNull; <nl> + import android.util.Log; <nl> + import java.util.LinkedList; <nl> + import java.util.List; <nl> - private int[] scores; <nl> + private List<Score> scores; <nl> - scores = habit.getScores().getAllValues(bucketSize); <nl> 
mmm FacesDetectedEvent.java <nl> ppp FacesDetectedEvent.java <nl> - import android.support.v4.util.Pools; <nl> + import androidx.core.util.Pools; <nl> mmm ResolveTakenPictureAsyncTask.java <nl> ppp ResolveTakenPictureAsyncTask.java <nl> - import android.support.media.ExifInterface; <nl> + import androidx.exifinterface.media.ExifInterface; <nl> 
new file <nl> ppp AspectRatio.java <nl> + package com.google.android.cameraview; <nl> + import android.os.Parcel; <nl> + import android.os.Parcelable; <nl> + import android.support.annotation.NonNull; <nl> + import android.support.v4.util.SparseArrayCompat; <nl> + public class AspectRatio implements Comparable<AspectRatio>, Parcelable { <nl> 
mmm AttributeTest.java <nl> ppp AttributeTest.java <nl> + import org.jsoup.Jsoup; <nl> + @Test(expected = IllegalArgumentException.class) public void validatesKeysNotEmpty() { <nl> + Attribute attr = new Attribute(" ", "Check"); <nl> + } <nl> + @Test(expected = IllegalArgumentException.class) public void validatesKeysNotEmptyViaSet() { <nl> 
mmm ConnectTest.java <nl> ppp ConnectTest.java <nl> + import org.jsoup.UncheckedIOException; <nl> + import org.jsoup.integration.servlets.InterruptedServlet; <nl> + @Test <nl> + public void handlesEmptyStreamDuringParseRead() throws IOException { <nl> + Connection.Response res = Jsoup.connect(InterruptedServlet.Url) <nl> 
mmm ConnectionReuseTest.java <nl> ppp ConnectionReuseTest.java <nl> - import static okhttp3.internal.UtilKt.closeQuietly; <nl> + import static okhttp3.internal.Util.closeQuietly; <nl> mmm HandshakeCertificatesTest.java <nl> ppp HandshakeCertificatesTest.java <nl> - import static okhttp3.internal.UtilKt.closeQuietly; <nl> 
deleted file <nl> mmm RealWebSocketCall.java <nl> - package okhttp3; <nl> - import java.io.IOException; <nl> - import java.net.ProtocolException; <nl> - import java.security.SecureRandom; <nl> - import java.util.Collections; <nl> - import java.util.List; <nl> - import java.util.Random; <nl> - import java.util.concurrent.ExecutorService; <nl> 
mmm WebSocketHttpTest.java <nl> ppp WebSocketHttpTest.java <nl> + @Test public void callTimeoutIsNotApplied() throws Exception { <nl> + client = client.newBuilder() <nl> + .callTimeout(100, TimeUnit.MILLISECONDS) <nl> + .build(); <nl> + webServer.enqueue(new MockResponse() <nl> + .withWebSocketUpgrade(serverListener)); <nl> 
mmm ResponseBody.java <nl> ppp ResponseBody.java <nl> + BufferedSource source = source(); <nl> - try (BufferedSource source = source()) { <nl> + try { <nl> + } finally { <nl> + Util.closeQuietly(source); <nl> - try (BufferedSource source = source()) { <nl> + BufferedSource source = source(); <nl> + try { <nl> 
mmm RecordedRequest.java <nl> ppp RecordedRequest.java <nl> - package com.google.mockwebserver; <nl> + package com.squareup.okhttp.mockwebserver; <nl> - } <nl> + } <nl> mmm MockWebServer.java <nl> ppp MockWebServer.java <nl> - package com.google.mockwebserver; <nl> + package com.squareup.okhttp.mockwebserver; <nl> 
mmm HttpURLConnectionImpl.java <nl> ppp HttpURLConnectionImpl.java <nl> - public class HttpURLConnectionImpl extends HttpURLConnection { <nl> + public class HttpURLConnectionImpl extends HttpURLConnection implements Policy { <nl> - protected HttpURLConnection getHttpConnectionToCache() { <nl> + @Override public HttpURLConnection getHttpConnectionToCache() { <nl> 
mmm ResponseCacheTest.java <nl> ppp ResponseCacheTest.java <nl> - import java.util.zip.GZIPOutputStream; <nl> + import okio.Buffer; <nl> + import okio.BufferedSink; <nl> + import okio.GzipSink; <nl> + import okio.Okio; <nl> - response.setBody(gzip("ABCABCABC".getBytes("UTF-8"))).addHeader("Content-Encoding: gzip")); <nl> 
mmm HpackDraft08Test.java <nl> ppp HpackDraft08Test.java <nl> - public class HpackDraft07Test { <nl> + public class HpackDraft08Test { <nl> - private HpackDraft07.Reader hpackReader; <nl> + private HpackDraft08.Reader hpackReader; <nl> - private HpackDraft07.Writer hpackWriter; <nl> + private HpackDraft08.Writer hpackWriter; <nl> 
mmm RouteException.java <nl> ppp RouteException.java <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> + import java.lang.reflect.InvocationTargetException; <nl> + import java.lang.reflect.Method; <nl> - private final List<IOException> connectExceptions = new ArrayList<IOException>(); <nl> 
mmm HttpsEngine.java <nl> ppp HttpsEngine.java <nl> - String userAgent = requestHeaders.getUserAgent(); <nl> + String userAgent = getRequest().getUserAgent(); <nl> - URL url = policy.getURL(); <nl> + URL url = getRequest().url(); <nl> - requestHeaders.getProxyAuthorization()); <nl> + getRequest().getProxyAuthorization()); <nl> 
deleted file <nl> mmm MutableBoolean.java <nl> - package com.squareup.okhttp.internal.util; <nl> - public final class MutableBoolean { <nl> - public boolean value; <nl> - public MutableBoolean(boolean value) { <nl> - this.value = value; <nl> - } <nl> - } <nl> mmm ResponseSource.java <nl> mmm Charsets.java <nl> 
deleted file <nl> mmm ResponseSource.java <nl> - package com.squareup.okhttp; <nl> - public enum ResponseSource { <nl> - CACHE, <nl> - CONDITIONAL_CACHE, <nl> - NETWORK, <nl> - NONE; <nl> - public boolean requiresConnection() { <nl> - return this == CONDITIONAL_CACHE || this == NETWORK; <nl> - } <nl> - public boolean usesCache() { <nl> 
mmm HpackDraft06Test.java <nl> ppp HpackDraft06Test.java <nl> - bytesIn.write(bytesOut, bytesOut.size()); <nl> + bytesIn.writeAll(bytesOut); <nl> - bytesIn.write(out, out.size()); <nl> + bytesIn.writeAll(out); <nl> - bytesIn.write(out, out.size()); <nl> + bytesIn.writeAll(out); <nl> - bytesIn.write(out, out.size()); <nl> 
mmm StreamAllocation.java <nl> ppp StreamAllocation.java <nl> - resultConnection.socket().setSoTimeout(readTimeout); <nl> + resultConnection.getSocket().setSoTimeout(readTimeout); <nl> - routeDatabase().connected(newConnection.route()); <nl> + routeDatabase().connected(newConnection.getRoute()); <nl> - Util.closeQuietly(connectionToClose.socket()); <nl> 
mmm Util.java <nl> ppp Util.java <nl> - import java.net.ServerSocket; <nl> - public static void closeQuietly(ServerSocket serverSocket) { <nl> - if (serverSocket != null) { <nl> - try { <nl> - serverSocket.close(); <nl> - } catch (RuntimeException rethrown) { <nl> - throw rethrown; <nl> - } catch (Exception ignored) { <nl> 
mmm HttpResponseCacheTest.java <nl> ppp HttpResponseCacheTest.java <nl> - urlFactory = new OkUrlFactory(new OkHttpClient.Builder().build()); <nl> + urlFactory = new OkUrlFactory(new OkHttpClient()); <nl> mmm SynchronousGet.java <nl> ppp SynchronousGet.java <nl> - private final OkHttpClient client = new OkHttpClient.Builder().build(); <nl> 
mmm ResponseCacheTest.java <nl> ppp ResponseCacheTest.java <nl> - assertFalse(connection instanceof HttpURLConnectionImpl); <nl> + assertFalse(connection instanceof OkHttpURLConnection); <nl> - assertFalse(connection2 instanceof HttpURLConnectionImpl); <nl> + assertFalse(connection2 instanceof OkHttpURLConnection); <nl> 
mmm CacheTest.java <nl> ppp CacheTest.java <nl> - ConnectionPool pool = ConnectionPool.getDefault(); <nl> - pool.evictAll(); <nl> - client.setConnectionPool(pool); <nl> mmm ConnectionPoolTest.java <nl> ppp ConnectionPoolTest.java <nl> + import okhttp3.internal.Internal; <nl> - private final Runnable emptyRunnable = new Runnable() { <nl> 
new file <nl> ppp HttpOverSpdy3Test.java <nl> + package com.squareup.okhttp.internal.http; <nl> + public class HttpOverSpdy3Test extends HttpOverSpdyTest { <nl> + public HttpOverSpdy3Test() { <nl> + super("spdy/3"); <nl> + } <nl> + } <nl> mmm SettingsTest.java <nl> ppp SettingsTest.java <nl> + assertEquals(4096, settings.getHeaderTableSize()); <nl> 
mmm SpdyStream.java <nl> ppp SpdyStream.java <nl> - private int writeWindowSize; <nl> + long bytesLeftInWriteWindow = 0; <nl> - private final SpdyDataOutputStream out; <nl> + final SpdyDataOutputStream out; <nl> - void receiveSettings(Settings peerSettings) { <nl> - assert (Thread.holdsLock(this)); <nl> - setPeerSettings(peerSettings); <nl> 
mmm RecordingHostnameVerifier.java <nl> ppp RecordingHostnameVerifier.java <nl> - package okhttp3.testing; <nl> + package okhttp3; <nl> mmm CacheAdapterTest.java <nl> ppp CacheAdapterTest.java <nl> - import okhttp3.testing.RecordingHostnameVerifier; <nl> + import okhttp3.RecordingHostnameVerifier; <nl> mmm HttpOverSpdyTest.java <nl> 
mmm RealWebSocket.java <nl> ppp RealWebSocket.java <nl> - import okhttp3.NewWebSocket; <nl> + import okhttp3.WebSocket; <nl> + import okhttp3.WebSocketListener; <nl> - public final class RealNewWebSocket implements NewWebSocket, WebSocketReader.FrameCallback { <nl> + public final class RealWebSocket implements WebSocket, WebSocketReader.FrameCallback { <nl> 
mmm Feign.java <nl> ppp Feign.java <nl> + import java.lang.reflect.Type; <nl> + * <nl> + * @param targetType {@link feign.Target#type() type} of the Feign interface. <nl> + * @param method invoked method, present on {@code type} or its super. <nl> - public static String configKey(Method method) { <nl> + public static String configKey(Class targetType, Method method) { <nl> 
mmm SOAPDecoder.java <nl> ppp SOAPDecoder.java <nl> - * <nl> + * <nl> - * <nl> + * <nl> - * <nl> + * <nl> - throw new DecodeException(e.toString(), e); <nl> + throw new DecodeException(response.status(), e.toString(), e); <nl> mmm SynchronousMethodHandler.java <nl> ppp SynchronousMethodHandler.java <nl> - throw new DecodeException(e.getMessage(), e); <nl> 
new file <nl> ppp PersistentTtlNode.java <nl> + package org.apache.curator.framework.recipes.nodes; <nl> + import org.apache.curator.framework.CuratorFramework; <nl> + import org.apache.curator.utils.ThreadUtils; <nl> + import org.apache.curator.utils.ZKPaths; <nl> + import org.apache.zookeeper.CreateMode; <nl> 
mmm JsonServiceInstanceMarshaller.java <nl> ppp JsonServiceInstanceMarshaller.java <nl> + import com.fasterxml.jackson.databind.JsonNode; <nl> + import com.fasterxml.jackson.databind.ObjectMapper; <nl> + import com.fasterxml.jackson.databind.node.ObjectNode; <nl> - import org.codehaus.jackson.JsonNode; <nl> 
mmm TestQueueSharder.java <nl> ppp TestQueueSharder.java <nl> - import org.apache.curator.utils.CloseableUtils; <nl> + import org.apache.commons.math.stat.descriptive.SummaryStatistics; <nl> - import junit.framework.Assert; <nl> - import org.apache.commons.math.stat.descriptive.SummaryStatistics; <nl> + import org.apache.curator.utils.CloseableUtils; <nl> 
mmm BasicTests.java <nl> ppp BasicTests.java <nl> - import org.apache.curator.test.TestingServer; <nl> - import java.io.File; <nl> - int                 serverPort = server.getPort(); <nl> - File                tempDirectory = server.getTempDirectory(); <nl> mmm TestFailedDeleteManager.java <nl> ppp TestFailedDeleteManager.java <nl> 
deleted file <nl> mmm TestTransactions.java <nl> - package com.netflix.curator.framework.imps; <nl> - import com.google.common.collect.Iterables; <nl> - import com.netflix.curator.framework.CuratorFramework; <nl> - import com.netflix.curator.framework.CuratorFrameworkFactory; <nl> - import com.netflix.curator.framework.api.transaction.CuratorTransactionResult; <nl> 
new file <nl> ppp TransactionDeleteBuilder.java <nl> + package com.netflix.curator.framework.api.transaction; <nl> + import com.netflix.curator.framework.api.Pathable; <nl> + import com.netflix.curator.framework.api.Versionable; <nl> + public interface TransactionDeleteBuilder extends <nl> + Pathable<CuratorTransactionBridge>, <nl> 
mmm ProcessDefinitionMapperProvider.java <nl> ppp ProcessDefinitionMapperProvider.java <nl> + VALUES("`tenant_id`", "#{processDefinition.tenantId}"); <nl> + SET("`tenant_id`=#{processDefinition.tenantId}"); <nl> new file <nl> ppp ZKNodeType.java <nl> + package cn.escheduler.common.enums; <nl> + public enum ZKNodeType { <nl> 
new file <nl> ppp MysqlTargetGenerator.java <nl> + package org.apache.dolphinscheduler.server.worker.task.sqoop.generator.targets; <nl> + import org.apache.commons.lang.StringUtils; <nl> + import org.apache.dolphinscheduler.common.task.sqoop.SqoopParameters; <nl> + import org.apache.dolphinscheduler.common.task.sqoop.targets.TargetMysqlParameter; <nl> 
new file <nl> ppp FuncUtils.java <nl> + package cn.escheduler.alert.utils; <nl> + public class FuncUtils { <nl> + static public String mkString(Iterable<String> list, String split) { <nl> + StringBuilder sb = new StringBuilder(); <nl> + boolean first = true; <nl> + for (String item : list) { <nl> + if (first) <nl> 
mmm LoggerService.java <nl> ppp LoggerService.java <nl> + import javax.annotation.PreDestroy; <nl> + private final LogClientService logClient; <nl> + public LoggerService(){ <nl> + logClient = new LogClientService(); <nl> + } <nl> + @PreDestroy <nl> + public void close(){ <nl> + logClient.close(); <nl> + } <nl> 
mmm AlertServer.java <nl> ppp AlertServer.java <nl> - private static volatile AlertServer instance; <nl> + private static AlertServer instance; <nl> - public static AlertServer getInstance(){ <nl> + public synchronized static AlertServer getInstance(){ <nl> - synchronized (AlertServer.class) { <nl> - if(null == instance) { <nl> 
deleted file <nl> mmm StringUtilsTest.java <nl> - package org.apache.dolphinscheduler.common.utils; <nl> - import org.junit.Assert; <nl> - import org.junit.Test; <nl> - import java.util.ArrayList; <nl> - public class StringUtilsTest { <nl> - @Test <nl> - public void testIsNotEmpty() { <nl> - boolean b = StringUtils.isNotEmpty(null); <nl> 
mmm MasterCommandTest.java <nl> ppp MasterCommandTest.java <nl> + import cn.escheduler.common.enums.TaskDependType; <nl> + import cn.escheduler.common.graph.DAG; <nl> + import cn.escheduler.common.model.TaskNode; <nl> + import cn.escheduler.common.model.TaskNodeRelation; <nl> + import cn.escheduler.common.process.ProcessDag; <nl> 
mmm CommonUtils.java <nl> ppp CommonUtils.java <nl> + import cn.escheduler.common.enums.ResUploadType; <nl> + public static boolean getKerberosStartupState(){ <nl> + String resUploadStartupType = PropertyUtils.getString(cn.escheduler.common.Constants.RES_UPLOAD_STARTUP_TYPE); <nl> + ResUploadType resUploadType = ResUploadType.valueOf(resUploadStartupType); <nl> 
mmm AbstractZKClient.java <nl> ppp AbstractZKClient.java <nl> mmm FetchTaskThread.java <nl> ppp FetchTaskThread.java <nl> - if(tenant == null){ <nl> - logger.error("cannot find suitable tenant for the task:{}, process instance tenant:{}, process definition tenant:{}", <nl> - taskInstance.getName(),processInstance.getTenantId(), processDefine.getTenantId()); <nl> 
mmm UsersService.java <nl> ppp UsersService.java <nl> - if (!HadoopUtils.getInstance().exists(HadoopUtils.getHdfsTenantDir(tenant.getTenantCode()))){ <nl> - createTenantDirIfNotExists(tenant.getTenantCode()); <nl> - } <nl> - String userPath = HadoopUtils.getHdfsUserDir(tenant.getTenantCode(),user.getId()); <nl> 
new file <nl> ppp FilePluginManager.java <nl> + package org.apache.dolphinscheduler.common.plugin; <nl> + import org.apache.dolphinscheduler.common.Constants; <nl> + import org.apache.dolphinscheduler.plugin.api.AlertPlugin; <nl> + import org.apache.dolphinscheduler.plugin.spi.AlertPluginProvider; <nl> + import org.slf4j.Logger; <nl> 
mmm ButterKnifeProcessor.java <nl> ppp ButterKnifeProcessor.java <nl> - for (JavaFile javaFile : bindingClass.brewJava()) { <nl> - try { <nl> - javaFile.writeTo(filer); <nl> - } catch (IOException e) { <nl> - error(typeElement, "Unable to write view binder for type %s: %s", typeElement, <nl> - e.getMessage()); <nl> 
mmm InjectViewTest.java <nl> ppp InjectViewTest.java <nl> - "    view = finder.findById(source, 1);", <nl> - "    if (view == null) {", <nl> - "      throw new IllegalStateException(\"Required view with id '1' for field 'thing' was not found. If this view is optional add '@Optional' annotation.\");", <nl> 
mmm BindBool.java <nl> ppp BindBool.java <nl> + import android.support.annotation.BoolRes; <nl> - int value(); <nl> + @BoolRes int value(); <nl> mmm BindBitmap.java <nl> ppp BindBitmap.java <nl> + import android.support.annotation.DrawableRes; <nl> - int value(); <nl> + @DrawableRes int value(); <nl> mmm OnEditorAction.java <nl> 
mmm OnItemLongClickTest.java <nl> ppp OnItemLongClickTest.java <nl> + @Test public void defaultReturnValue() { <nl> + JavaFileObject source = JavaFileObjects.forSourceString("test.Test", "" <nl> + + "package test;\n" <nl> + + "import butterknife.OnItemLongClick;\n" <nl> + + "public class Test {\n" <nl> + + "  @OnItemLongClick(1) void doStuff() {}\n" <nl> 
mmm StarterTest.java <nl> ppp StarterTest.java <nl> - assertEquals(def, opts); <nl> + assertEquals(def.toJson(), opts.toJson()); <nl> - assertEquals(def, opts); <nl> + assertEquals(def.toJson(), opts.toJson()); <nl> mmm TrustOptions.java <nl> ppp TrustOptions.java <nl> + import io.vertx.core.json.JsonObject; <nl> 
deleted file <nl> mmm DatagramServerHandler.java <nl> - package io.vertx.core.datagram.impl; <nl> - import io.netty.buffer.ByteBuf; <nl> - import io.netty.buffer.ByteBufAllocator; <nl> - import io.netty.channel.ChannelHandlerContext; <nl> - import io.netty.channel.socket.DatagramPacket; <nl> - import io.vertx.core.buffer.Buffer; <nl> 
mmm NetTest.java <nl> ppp NetTest.java <nl> - assertIllegalArgumentException(() -> options.setTrafficClass(-2)); <nl> + assertIllegalArgumentException(() -> options.setTrafficClass(-1)); <nl> - assertIllegalArgumentException(() -> options.setSoLinger(-2)); <nl> + assertIllegalArgumentException(() -> options.setSoLinger(-1)); <nl> 
deleted file <nl> mmm NamedWorkerExecutor.java <nl> - package io.vertx.core.impl; <nl> - import io.vertx.core.AsyncResult; <nl> - import io.vertx.core.Closeable; <nl> - import io.vertx.core.Future; <nl> - import io.vertx.core.Handler; <nl> - import io.vertx.core.WorkerExecutor; <nl> - import java.util.concurrent.Executor; <nl> 
mmm NetClientImpl.java <nl> ppp NetClientImpl.java <nl> - context.dispatchFromIO(v -> { <nl> + context.dispatch(v -> { <nl> - context.dispatchFromIO(th, connectHandler::tryFail); <nl> + context.dispatch(th, connectHandler::tryFail); <nl> mmm EventLoopContext.java <nl> ppp EventLoopContext.java <nl> - @Override <nl> 
mmm DummyVertxMetrics.java <nl> ppp DummyVertxMetrics.java <nl> - import io.vertx.core.metrics.spi.DatagramSocketMetrics; <nl> - import io.vertx.core.metrics.spi.EventBusMetrics; <nl> - import io.vertx.core.metrics.spi.HttpClientMetrics; <nl> - import io.vertx.core.metrics.spi.HttpServerMetrics; <nl> - import io.vertx.core.metrics.spi.NetMetrics; <nl> 
mmm DummyMetricsTest.java <nl> ppp DummyMetricsTest.java <nl> - assertNull(vertx.metricBaseName()); <nl> + assertFalse(vertx.isMetricsEnabled()); <nl> - assertNull(server.metricBaseName()); <nl> + assertFalse(server.isMetricsEnabled()); <nl> - assertNull(client.metricBaseName()); <nl> + assertFalse(client.isMetricsEnabled()); <nl> 
new file <nl> ppp HandlerMetric.java <nl> + package io.vertx.test.fakemetrics; <nl> + import java.util.concurrent.atomic.AtomicInteger; <nl> + public class HandlerMetric { <nl> + public final String address; <nl> + public final boolean replyHandler; <nl> + public final AtomicInteger beginCount = new AtomicInteger(); <nl> 
mmm HttpServerImpl.java <nl> ppp HttpServerImpl.java <nl> - pipeline.addLast("httpDecoder", new HttpRequestDecoder(4096, 8192, options.getMaxChunkSize(), false)); <nl> + pipeline.addLast("httpDecoder", new HttpRequestDecoder(4096, 8192, 8192, false)); <nl> mmm HttpClientOptionsConverter.java <nl> ppp HttpClientOptionsConverter.java <nl> 
mmm ClusterManager.java <nl> ppp ClusterManager.java <nl> + import io.vertx.core.Vertx; <nl> - * is being executed. If the underlying implementation does block, that can be wrapped in an <nl> - * {@link Action} instance and executed using the method <nl> - * {@link VertxSPI#executeBlocking(Action, io.vertx.core.Handler)} <nl> 
mmm NetSocket.java <nl> ppp NetSocket.java <nl> - import io.vertx.codegen.annotations.Nullable; <nl> - NetSocket closeHandler(@Nullable Handler<Void> handler); <nl> + NetSocket closeHandler(Handler<Void> handler); <nl> - @Nullable <nl> - HttpServer requestHandler(@Nullable Handler<HttpServerRequest> handler); <nl> 
mmm Http1xUpgradeToH2CHandler.java <nl> ppp Http1xUpgradeToH2CHandler.java <nl> - class Http1xUpgradeToH2CHandler extends ChannelInboundHandlerAdapter { <nl> + public class Http1xUpgradeToH2CHandler extends ChannelInboundHandlerAdapter { <nl> mmm Verticle.java <nl> ppp Verticle.java <nl> - @SuppressWarnings( "deprecation" ) <nl> 
mmm VertxNetHandler.java <nl> ppp VertxNetHandler.java <nl> - public abstract class VertxNetHandler<C extends ConnectionBase> extends VertxHandler<C> { <nl> + public abstract class VertxNetHandler extends VertxHandler<NetSocketImpl> { <nl> - private final Function<ChannelHandlerContext, C> connectionFactory; <nl> 
mmm HttpClientImpl.java <nl> ppp HttpClientImpl.java <nl> + import io.vertx.core.logging.Logger; <nl> + import io.vertx.core.logging.impl.LoggerFactory; <nl> + private static final Logger log = LoggerFactory.getLogger(HttpClientImpl.class); <nl> - vertx.reportException(e); <nl> + log.error(e); <nl> - connectionExceptionHandler == null ? (exceptionHandler == null ? context::reportException : exceptionHandler ): connectionExceptionHandler; <nl> 
mmm ReplyExceptionMessageCodec.java <nl> ppp ReplyExceptionMessageCodec.java <nl> - return 14; <nl> + return 15; <nl> mmm VertxOptionsTest.java <nl> ppp VertxOptionsTest.java <nl> + assertEquals(20000, options.getClusterPingInterval()); <nl> + long randomLong = TestUtils.randomPositiveLong(); <nl> + assertEquals(options, options.setClusterPingInterval(randomLong)); <nl> 
mmm DatagramServerHandler.java <nl> ppp DatagramServerHandler.java <nl> - super(vertx, new HashMap<>()); <nl> + super(vertx, new HashMap<Channel, DatagramSocketImpl>()); <nl> mmm KeyStoreHelper.java <nl> ppp KeyStoreHelper.java <nl> - value = jks::getValue; <nl> + value = () -> jks.getValue(); <nl> - value = pkcs12::getValue; <nl> 
new file <nl> ppp VertxNioServerSocketChannel.java <nl> + package io.vertx.core.http.impl; <nl> + import io.netty.channel.socket.nio.NioServerSocketChannel; <nl> + import io.vertx.core.logging.Logger; <nl> + import io.vertx.core.logging.LoggerFactory; <nl> + import java.nio.channels.SocketChannel; <nl> + import java.util.List; <nl> 
mmm Launcher.java <nl> ppp Launcher.java <nl> + @Override <nl> + public void beforeStoppingVertx(Vertx vertx) { <nl> + } <nl> + @Override <nl> + public void afterStoppingVertx() { <nl> + } <nl> mmm EventBusImpl.java <nl> ppp EventBusImpl.java <nl> - import io.vertx.core.*; <nl> - import io.vertx.core.eventbus.*; <nl> 
mmm HttpClientOptions.java <nl> ppp HttpClientOptions.java <nl> + @Override <nl> + public HttpClientOptions removeEnabledSecureTransportProtocol(String protocol) { <nl> + return (HttpClientOptions) super.removeEnabledSecureTransportProtocol(protocol); <nl> + } <nl> mmm HttpServerOptions.java <nl> ppp HttpServerOptions.java <nl> 
mmm DrawTask.java <nl> ppp DrawTask.java <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + @Override <nl> + public List<BaseDanmaku> getVisibleDanmakusOnTime(long time) { <nl> + long beginMills = time - DanmakuFactory.MAX_DANMAKU_DURATION - 100; <nl> + long endMills = time + DanmakuFactory.MAX_DANMAKU_DURATION; <nl> 
mmm DanmakuRenderer.java <nl> ppp DanmakuRenderer.java <nl> + if (!drawItem.isPrepared()) { <nl> + drawItem.prepare(disp, false); <nl> + } <nl> mmm SpannedCacheStuffer.java <nl> ppp SpannedCacheStuffer.java <nl> - if (mProxy != null) { <nl> - mProxy.prepareDrawing(danmaku, fromWorkerThread); <nl> - } <nl> - } else if (mProxy != null) { <nl> 
mmm SetCommandTest.java <nl> ppp SetCommandTest.java <nl> + @Test <nl> + public void spopMultiple() throws Exception { <nl> + assertThat(redis.spop(key)).isNull(); <nl> + redis.sadd(key, "a", "b", "c"); <nl> + Set<String> rand = redis.spop(key, 2); <nl> + assertThat(rand).hasSize(2); <nl> + assertThat(set("a", "b", "c").containsAll(rand)).isTrue(); <nl> 
mmm RedisChannelHandler.java <nl> ppp RedisChannelHandler.java <nl> + import static com.google.common.base.Preconditions.checkArgument; <nl> + private ClientOptions clientOptions; <nl> - public class ConnectionBuilder { <nl> + class ConnectionBuilder { <nl> - private boolean withReconnect; <nl> + private ClientOptions clientOptions; <nl> 
mmm SentinelRule.java <nl> ppp SentinelRule.java <nl> - commands.close(); <nl> + commands.getStatefulConnection().close(); <nl> mmm SentinelConnectionTest.java <nl> ppp SentinelConnectionTest.java <nl> - statefulConnection.sync().close(); <nl> + statefulConnection.sync().getStatefulConnection().close(); <nl> 
mmm RedisSortedSetCommands.java <nl> ppp RedisSortedSetCommands.java <nl> + Double zaddincr(K key, ZAddArgs zAddArgs, double score, V member); <nl> - Long zrangebyscoreWithScores(ScoredValueStreamingChannel<V> channel, K key, double min, double max, long offset, long count); <nl> + Long zrangebyscoreWithScores(ScoredValueStreamingChannel<V> channel, K key, double min, double max, long offset, <nl> 
mmm RedisKeyReactiveCommands.java <nl> ppp RedisKeyReactiveCommands.java <nl> + Observable<Long> touch(K... keys); <nl> mmm RedisCommandBuilder.java <nl> ppp RedisCommandBuilder.java <nl> + public Command<K, V, Long> touch(K... keys) { <nl> + LettuceAssert.notEmpty(keys, "keys " + MUST_NOT_BE_EMPTY); <nl> + CommandArgs<K, V> args = new CommandArgs<K, V>(codec).addKeys(keys); <nl> 
mmm MasterSlaveConnectionProvider.java <nl> ppp MasterSlaveConnectionProvider.java <nl> - import static com.lambdaworks.redis.masterslave.MasterSlaveUtils.findNodeByHostAndPort; <nl> - import java.util.*; <nl> + import java.util.*; <nl> + import static com.lambdaworks.redis.masterslave.MasterSlaveUtils.findNodeByHostAndPort; <nl> 
mmm RedisClusterClientTest.java <nl> ppp RedisClusterClientTest.java <nl> - import static com.google.code.tempusfugit.temporal.Duration.seconds; <nl> - import static com.google.code.tempusfugit.temporal.Timeout.timeout; <nl> + import static com.google.code.tempusfugit.temporal.Duration.*; <nl> + import static com.google.code.tempusfugit.temporal.Timeout.*; <nl> 
mmm RedisURI.java <nl> ppp RedisURI.java <nl> - import java.util.concurrent.TimeUnit; <nl> + import java.util.function.LongFunction; <nl> - * {@code new RedisURI("localhost", 6379, 60, TimeUnit.SECONDS);} <nl> + * {@code new RedisURI("localhost", 6379, Duration.ofSeconds(60));} <nl> - public static final Map<String, TimeUnit> TIME_UNIT_MAP; <nl> 
mmm MapCollections.java <nl> ppp MapCollections.java <nl> - package com.qihoo360.replugin.utils.basic; <nl> + package com.qihoo360.mobilesafe.utils.basic; <nl> mmm PackageFilesUtil.java <nl> ppp PackageFilesUtil.java <nl> - package com.qihoo360.replugin.utils.pkg; <nl> + package com.qihoo360.mobilesafe.utils.pkg; <nl> 
mmm EqualizerFragment.java <nl> ppp EqualizerFragment.java <nl> - import android.app.Fragment; <nl> + import android.support.v4.app.Fragment; <nl> mmm HomeActivity.java <nl> ppp HomeActivity.java <nl> + import android.support.v7.widget.DefaultItemAnimator; <nl> - .translationY(playerContainer.getHeight() - PlayerFragment.smallPlayer.getHeight()); <nl> 
mmm AlarmCallbackHistoryResourceTest.java <nl> ppp AlarmCallbackHistoryResourceTest.java <nl> - import com.jayway.restassured.path.json.JsonPath; <nl> + import io.restassured.path.json.JsonPath; <nl> + import org.junit.Ignore; <nl> - import static com.jayway.restassured.RestAssured.given; <nl> + import static io.restassured.RestAssured.given; <nl> 
mmm Pivot.java <nl> ppp Pivot.java <nl> - import org.graylog.plugins.views.search.DerivedTimeRange; <nl> + import org.graylog.plugins.views.search.timeranges.DerivedTimeRange; <nl> - import org.graylog2.plugin.indexer.searches.timeranges.OffsetRange; <nl> + import org.graylog.plugins.views.search.timeranges.OffsetRange; <nl> 
mmm ApiClientImpl.java <nl> ppp ApiClientImpl.java <nl> + if(response == null) { <nl> + LOG.error("Didn't receive response from node {}", node); <nl> + node.markFailure(); <nl> + continue; <nl> + } <nl> mmm SyslogKafkaInput.java <nl> ppp SyslogKafkaInput.java <nl> - super(NAME, false, ""); <nl> mmm GELFKafkaInput.java <nl> 
mmm Deflector.java <nl> ppp Deflector.java <nl> - LOG.error("Cannot optimize index <{}>.", oldTarget, e); <nl> + LOG.error("Cannot optimize index <" + oldTarget + ">.", e); <nl> - LOG.debug("Could not extract index number from index <{}>.", indexName); <nl> + LOG.debug("Could not extract index number from index <" + indexName + ">.", e); <nl> 
new file <nl> ppp GeoIpResolverConfig.java <nl> + package org.graylog.plugins.map.config; <nl> + import com.fasterxml.jackson.annotation.JsonAutoDetect; <nl> + import com.fasterxml.jackson.annotation.JsonCreator; <nl> + import com.fasterxml.jackson.annotation.JsonIgnoreProperties; <nl> + import com.fasterxml.jackson.annotation.JsonProperty; <nl> 
new file <nl> ppp LegacyViewsPermissions.java <nl> + package org.graylog.plugins.views.migrations; <nl> + import com.google.common.collect.ImmutableSet; <nl> + import java.util.Set; <nl> + class LegacyViewsPermissions { <nl> + static final String VIEW_USE = "view:use"; <nl> + static final String VIEW_CREATE = "view:create"; <nl> 
new file <nl> ppp GeoIpResolverConfig.java <nl> + package org.graylog.plugins.map.config; <nl> + import com.fasterxml.jackson.annotation.JsonAutoDetect; <nl> + import com.fasterxml.jackson.annotation.JsonCreator; <nl> + import com.fasterxml.jackson.annotation.JsonIgnoreProperties; <nl> + import com.fasterxml.jackson.annotation.JsonProperty; <nl> 
mmm DeflectorManagerThread.java <nl> ppp DeflectorManagerThread.java <nl> - indexerSetupService.startAndWait(); <nl> - checkAndRepair(); <nl> - point(); <nl> + if (indexerSetupService.isRunning()) { <nl> + checkAndRepair(); <nl> + point(); <nl> + } <nl> mmm TimedBlock.java <nl> ppp TimedBlock.java <nl> - private final Stopwatch stopwatch = new Stopwatch(); <nl> 
mmm GelfCodecTest.java <nl> ppp GelfCodecTest.java <nl> - @Test(expected = IllegalArgumentException.class) <nl> - public void decodeThrowsIllegalArgumentExceptionIfJsonIsInvalid() throws Exception { <nl> + @Test(expected = IllegalStateException.class) <nl> + public void decodeDoesNotThrowIllegalArgumentExceptionIfJsonIsInvalid() throws Exception { <nl> 
mmm ESSearchTypeHandler.java <nl> ppp ESSearchTypeHandler.java <nl> + import io.searchbox.core.search.aggregation.FilterAggregation; <nl> + import io.searchbox.core.search.aggregation.MetricAggregation; <nl> + import org.graylog.plugins.enterprise.search.Query; <nl> + import org.graylog.plugins.enterprise.search.SearchJob; <nl> 
mmm Main.java <nl> ppp Main.java <nl> - import org.graylog2.periodical.ServerValueHistoryWriterThread; <nl> - import org.graylog2.periodical.ThroughputWriterThread; <nl> + import org.graylog2.periodical.LoadStatisticsThread; <nl> + public static boolean printLoadStats = false; <nl> - public static final String GRAYLOG2_VERSION = "0.9.5-dev"; <nl> 
new file <nl> ppp BeatsFrameDecoderTest.java <nl> + package org.graylog.plugins.beats; <nl> + import com.fasterxml.jackson.core.type.TypeReference; <nl> + import com.fasterxml.jackson.databind.ObjectMapper; <nl> + import com.google.common.collect.ImmutableMap; <nl> + import com.google.common.collect.Iterables; <nl> 
deleted file <nl> mmm CollectorServiceImpl.java <nl> - package org.graylog2.collectors; <nl> - import com.google.common.collect.Lists; <nl> - import com.google.common.primitives.Ints; <nl> - import com.mongodb.BasicDBObject; <nl> - import com.mongodb.DBCollection; <nl> - import org.graylog2.bindings.providers.MongoJackObjectMapperProvider; <nl> 
deleted file <nl> mmm DefaultGranteeService.java <nl> - package org.graylog.security.shares; <nl> - import com.google.common.collect.ImmutableSet; <nl> - import org.graylog.security.shares.EntityShareResponse.AvailableGrantee; <nl> - import org.graylog2.plugin.database.users.User; <nl> - import org.graylog2.shared.users.UserService; <nl> 
new file <nl> ppp SeriesSortConfig.java <nl> + package org.graylog.plugins.enterprise.search.views.widgets.aggregation.sort; <nl> + import com.fasterxml.jackson.annotation.JsonAutoDetect; <nl> + import com.fasterxml.jackson.annotation.JsonCreator; <nl> + import com.fasterxml.jackson.annotation.JsonProperty; <nl> 
new file <nl> ppp EntityDependencyResolver.java <nl> + package org.graylog.security.entities; <nl> + import com.google.common.collect.ImmutableMap; <nl> + import com.google.common.collect.ImmutableSet; <nl> + import org.graylog.security.shares.EntityShareResponse.MissingDependency; <nl> + import org.graylog2.contentpacks.ContentPackService; <nl> 
new file <nl> ppp V20161122174500_AssignIndexSetsToStreamsMigration.java <nl> + package org.graylog2.migrations; <nl> + import com.fasterxml.jackson.annotation.JsonAutoDetect; <nl> + import com.fasterxml.jackson.annotation.JsonCreator; <nl> + import com.fasterxml.jackson.annotation.JsonProperty; <nl> + import com.google.auto.value.AutoValue; <nl> 
new file <nl> ppp GELFServer.java <nl> + package org.graylog2.messagehandlers.gelf; <nl> + import org.graylog2.Log; <nl> + import java.net.*; <nl> + import java.io.*; <nl> + import java.util.zip.Inflater; <nl> + public class GELFServer { <nl> + private static final int MAX_PACKET_SIZE = 4096; <nl> + private DatagramSocket serverSocket = null; <nl> 
new file <nl> ppp RemoteJournalResource.java <nl> + package org.graylog2.rest.resources.system; <nl> + import org.graylog2.rest.resources.system.responses.JournalSummaryResponse; <nl> + import retrofit2.Call; <nl> + import retrofit2.http.GET; <nl> + public interface RemoteJournalResource { <nl> + @GET("/system/journal") <nl> 
new file <nl> ppp MapDataResource.java <nl> + package org.graylog.plugins.map.rest; <nl> + import com.codahale.metrics.annotation.Timed; <nl> + import io.swagger.annotations.Api; <nl> + import io.swagger.annotations.ApiOperation; <nl> + import io.swagger.annotations.ApiParam; <nl> + import org.apache.shiro.authz.annotation.RequiresAuthentication; <nl> 
mmm ClusterLoadBalancerStatusResource.java <nl> ppp ClusterLoadBalancerStatusResource.java <nl> + private final NodeService nodeService; <nl> + private final RemoteInterfaceProvider remoteInterfaceProvider; <nl> - super(httpHeaders, nodeService, remoteInterfaceProvider); <nl> + super(httpHeaders); <nl> + this.nodeService = nodeService; <nl> 
mmm SearchesTest.java <nl> ppp SearchesTest.java <nl> + import com.codahale.metrics.MetricRegistry; <nl> + import com.codahale.metrics.Timer; <nl> + private static final String REQUEST_TIMER_NAME = "org.graylog2.indexer.searches.Searches.elasticsearch.requests"; <nl> + private MetricRegistry metricRegistry; <nl> 
mmm ElasticsearchBackendTest.java <nl> ppp ElasticsearchBackendTest.java <nl> + import org.graylog.plugins.enterprise.search.errors.SearchException; <nl> - } catch (IllegalStateException e) { <nl> + } catch (SearchException e) { <nl> mmm GroupByHistogram.java <nl> ppp GroupByHistogram.java <nl> - @Override <nl> 
new file <nl> ppp GeoIpResolverEngine.java <nl> + package org.graylog.plugins.map.geoip; <nl> + import com.codahale.metrics.MetricRegistry; <nl> + import com.codahale.metrics.Timer; <nl> + import com.google.auto.value.AutoValue; <nl> + import com.google.common.net.InetAddresses; <nl> + import com.maxmind.geoip2.DatabaseReader; <nl> 
mmm EnterpriseIntegrationMetaData.java <nl> ppp EnterpriseIntegrationMetaData.java <nl> - package org.graylog.plugins.beats; <nl> + package org.graylog.plugins.enterprise_integration; <nl> - public class BeatsInputPluginMetaData implements PluginMetaData { <nl> + public class EnterpriseIntegrationMetaData implements PluginMetaData { <nl> 
deleted file <nl> mmm SubscribeMetricsUpdates.java <nl> - package models.sockjs; <nl> - import java.util.List; <nl> - public class SubscribeMetricsUpdates extends SockJsCommand { <nl> - public String nodeId; <nl> - public List<String> metrics; <nl> - } <nl> mmm SessionsController.java <nl> - import org.graylog2.rest.models.system.sessions.responses.SessionResponse; <nl> 
mmm ContentPackRevisions.java <nl> ppp ContentPackRevisions.java <nl> - package org.graylog2.rest.models.system.contenpacks.responses; <nl> + package org.graylog2.rest.models.system.contentpacks.responses; <nl> mmm ContentPackMetadata.java <nl> ppp ContentPackMetadata.java <nl> - package org.graylog2.rest.models.system.contenpacks.responses; <nl> 
mmm RawMessage.java <nl> ppp RawMessage.java <nl> + @Deprecated <nl> mmm DecodingProcessor.java <nl> ppp DecodingProcessor.java <nl> - if (message.getField("gl2_source_input") != null) { <nl> + if (message.getField(Message.FIELD_GL2_SOURCE_INPUT) != null) { <nl> - message.getField("gl2_source_input"), node.nodeId, message.getId()); <nl> 
mmm MessageCounterManager.java <nl> ppp MessageCounterManager.java <nl> mmm Stream.java <nl> ppp Stream.java <nl> mmm StreamRule.java <nl> ppp StreamRule.java <nl> mmm LogMessage.java <nl> ppp LogMessage.java <nl> + * The above copyright notice and this permission notice shall be included in all <nl> + * copies or substantial portions of the Software. <nl> 
mmm MasterCacheWorkerThread.java <nl> ppp MasterCacheWorkerThread.java <nl> + import org.graylog2.plugin.periodical.Periodical; <nl> mmm IndexerClusterCheckerThread.java <nl> ppp IndexerClusterCheckerThread.java <nl> + import org.graylog2.plugin.periodical.Periodical; <nl> mmm NodePingThread.java <nl> ppp NodePingThread.java <nl> 
mmm EntityOwnershipService.java <nl> ppp EntityOwnershipService.java <nl> - public void registerNewEventNotification(String id, User user) { <nl> - final GRN grn = grnRegistry.newGRN(GRNTypes.EVENT_NOTIFICATION, id); <nl> - registerNewEntity(grn, user); <nl> - } <nl> mmm DBNotificationService.java <nl> ppp DBNotificationService.java <nl> 
mmm V20191203120602_MigrateSavedSearchesToViews.java <nl> ppp V20191203120602_MigrateSavedSearchesToViews.java <nl> + import org.graylog.plugins.views.migrations.V20191203120602_MigrateSavedSearchesToViewsSupport.view.MessagesWidget; <nl> - savedSearch.query().toMessagesWidget(messageListId) <nl> + MessagesWidget.create(messageListId, savedSearch.query().fieldsList()) <nl> 
mmm UserServiceImplTest.java <nl> ppp UserServiceImplTest.java <nl> - this.userFactory = new UserImplFactory(configuration); <nl> + this.userFactory = new UserImplFactory(configuration, permissions); <nl> - class UserImplFactory implements UserImpl.Factory { <nl> + public static class UserImplFactory implements UserImpl.Factory { <nl> 
new file <nl> ppp AuthServiceBackendUsageCheck.java <nl> + package org.graylog.security.authservice; <nl> + import org.graylog2.shared.users.UserService; <nl> + import javax.inject.Inject; <nl> + import java.util.Optional; <nl> + public class AuthServiceBackendUsageCheck { <nl> + private final GlobalAuthServiceConfig globalAuthServiceConfig; <nl> 
deleted file <nl> mmm EnterpriseIntegrationModule.java <nl> - package org.graylog.plugins.enterprise_integration; <nl> - import org.graylog2.plugin.PluginConfigBean; <nl> - import org.graylog2.plugin.PluginModule; <nl> - import java.util.Collections; <nl> - import java.util.Set; <nl> - public class EnterpriseIntegrationModule extends PluginModule { <nl> 
mmm AgentImpl.java <nl> ppp AgentImpl.java <nl> + import java.util.function.Function; <nl> - public abstract AgentNodeDetails nodeDetails(); <nl> + public abstract AgentNodeDetails getNodeDetails(); <nl> - public AgentSummary toSummary() { <nl> - return AgentSummary.create(getId(), getNodeId(), nodeDetails().toSummary(), getLastSeen()); <nl> 
new file <nl> ppp GeoIpResolverConfig.java <nl> + package org.graylog.plugins.map.config; <nl> + import com.fasterxml.jackson.annotation.JsonAutoDetect; <nl> + import com.fasterxml.jackson.annotation.JsonCreator; <nl> + import com.fasterxml.jackson.annotation.JsonIgnoreProperties; <nl> + import com.fasterxml.jackson.annotation.JsonProperty; <nl> 
mmm NodePingThread.java <nl> ppp NodePingThread.java <nl> - import org.graylog2.Core; <nl> + import com.google.inject.Inject; <nl> + import org.graylog2.Configuration; <nl> - import org.graylog2.cluster.NodeServiceImpl; <nl> - import org.graylog2.notifications.NotificationServiceImpl; <nl> - private NodeService nodeService; <nl> 
mmm RadioBindings.java <nl> ppp RadioBindings.java <nl> + bind(String[].class).annotatedWith(Names.named("RestControllerPackages")).toInstance(new String[]{ <nl> + "org.graylog2.radio.rest.resources", <nl> + "org.graylog2.shared.rest.resources" <nl> + }); <nl> new file <nl> ppp Bootstrap.java <nl> + package org.graylog2.bootstrap; <nl> 
new file <nl> ppp BeatsInputPluginModule.java <nl> + package org.graylog.plugins.beats; <nl> + import org.graylog2.plugin.PluginModule; <nl> + public class BeatsInputPluginModule extends PluginModule { <nl> + @Override <nl> + protected void configure() { <nl> + addTransport("beats", BeatsTransport.class); <nl> 
mmm SearchTest.java <nl> ppp SearchTest.java <nl> + import org.graylog2.shared.rest.exceptions.MissingStreamPermissionException; <nl> - assertThatExceptionOfType(PermissionException.class) <nl> + assertThatExceptionOfType(MissingStreamPermissionException.class) <nl> mmm SearchExecutionGuardTest.java <nl> ppp SearchExecutionGuardTest.java <nl> 
new file <nl> ppp BeatsInputDescriptorTest.java <nl> + package org.graylog.plugins.beats; <nl> + import org.junit.Test; <nl> + import static org.assertj.core.api.Assertions.assertThat; <nl> + public class BeatsInputDescriptorTest { <nl> + @Test <nl> + public void descriptorNameIsCorrect() { <nl> + assertThat(new BeatsInput.Descriptor().getName()).isEqualTo("Beats"); <nl> 
mmm AbstractTriggerReceiver.java <nl> ppp AbstractTriggerReceiver.java <nl> mmm ClearReceiver.java <nl> ppp ClearReceiver.java <nl> mmm Manager.java <nl> ppp Manager.java <nl> mmm AbstractClearReceiver.java <nl> ppp AbstractClearReceiver.java <nl> mmm Options.java <nl> ppp Options.java <nl> + import org.json.JSONArray; <nl> 
mmm CLGLInteropDemo.java <nl> ppp CLGLInteropDemo.java <nl> - 			checkCLError(clGetPlatformIDs(platformIDs, null)); <nl> + 			checkCLError(clGetPlatformIDs(platformIDs, (IntBuffer)null)); <nl> - 				checkCLError(clGetDeviceIDs(platform, deviceType, deviceIDs, null)); <nl> + 				checkCLError(clGetDeviceIDs(platform, deviceType, deviceIDs, (IntBuffer)null)); <nl> 
mmm CLPlatform.java <nl> ppp CLPlatform.java <nl> - import org.lwjgl.opencl.CLUtil.*; <nl> - import java.nio.ByteBuffer; <nl> - 	private static final StringInfoProvider<CLPlatform> stringInfoProvider = new StringInfoProvider<CLPlatform>() { <nl> - 		public int getInfo(CLPlatform platform, int param_name, long param_value_size, ByteBuffer param_value, ByteBuffer param_value_size_ret) { <nl> 
mmm SVGDemo.java <nl> ppp SVGDemo.java <nl> - import java.io.*; <nl> - import java.net.*; <nl> - import java.nio.channels.*; <nl> + import static org.lwjgl.demo.nanovg.NanoVGUtils.*; <nl> - if (svg == null) { <nl> - throw new IllegalStateException("Failed to parse SVG."); <nl> - } <nl> + memFree(svgData); <nl> 
mmm PhotoViewAttacher.java <nl> ppp PhotoViewAttacher.java <nl> - View.OnLayoutChangeListener { <nl> + View.OnLayoutChangeListener { <nl> - getImageViewHeight(mImageView), (int) velocityX, (int) velocityY); <nl> + getImageViewHeight(mImageView), (int) velocityX, (int) velocityY); <nl> - if ((getScale() < mMaxScale || scaleFactor < 1f) && (getScale() > mMinScale || scaleFactor > 1f)) { <nl> 
mmm Classifier.java <nl> ppp Classifier.java <nl> - import java.util.Arrays; <nl> - public class GaussianProcessRegression{ <nl> + public class GaussianProcessRegression { <nl> - private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(SVM.class); <nl> - double[] priori = Strings.parseDoubleArray(prop.getProperty("smile.lda.priori")); <nl> 
mmm HyperGeometricDistribution.java <nl> ppp HyperGeometricDistribution.java <nl> + import smile.math.MathEx; <nl> - Dk = (int) (dl * Math.random()) + 1; <nl> + Dk = (int) (dl * MathEx.random()) + 1; <nl> - Dk = (int) (dr * Math.random()) + 1; <nl> + Dk = (int) (dr * MathEx.random()) + 1; <nl> - Y = Math.random(); <nl> 
mmm DecisionTree.java <nl> ppp DecisionTree.java <nl> - * @param nodeSize the minimum size of leaf nodes. <nl> + * @param maxDepth the maximum depth of the tree. <nl> + * @param nodeSize the minimum size of leaf nodes. <nl> - public DecisionTree(DataFrame x, int[] y, StructField response, int k, SplitRule rule, int maxNodes, int nodeSize, int mtry, int[] samples, int[][] order) { <nl> 
mmm DataFrameTest.java <nl> ppp DataFrameTest.java <nl> + import static smile.data.formula.Terms.*; <nl> mmm Vector.java <nl> ppp Vector.java <nl> + import java.util.List; <nl> + default List<T> distinct() { <nl> + return stream().distinct().collect(Collectors.toList()); <nl> + } <nl> deleted file <nl> mmm Signum.java <nl> 
mmm Ritz.java <nl> ppp Ritz.java <nl> mmm OpenBLAS.java <nl> ppp OpenBLAS.java <nl> + @Override <nl> + public int geev(Layout layout, EVDJob jobvl, EVDJob jobvr, int n, double[] A, int lda, double[] wr, double[] wi, double[] Vl, int ldvl, double[] Vr, int ldvr) { <nl> + return LAPACKE_dgeev(layout.getValue(), jobvl.getValue(), jobvr.getValue(), n, A, lda, wr, wi, Vl, ldvl, Vr, ldvr); <nl> 
mmm LinearKernel.java <nl> ppp LinearKernel.java <nl> - public class LinearKernel implements MercerKernel<double[]> { <nl> + public class LinearKernel implements MercerKernel<double[]>, DotProductKernel { <nl> - public class BinarySparseLaplacianKernel implements MercerKernel<int[]> { <nl> + public class BinarySparseLaplacianKernel implements MercerKernel<int[]>, IsotropicKernel { <nl> 
mmm NaiveBayes.java <nl> ppp NaiveBayes.java <nl> - public class NaiveBayes implements OnlineClassifier<double[]> { <nl> + public class NaiveBayes implements OnlineClassifier<double[]>, SoftClassifier<double[]> { <nl> - public class GradientTreeBoost implements Classifier<double[]> { <nl> + public class GradientTreeBoost implements SoftClassifier<double[]> { <nl> 
mmm JacksonJsonNodeJsonProvider.java <nl> ppp JacksonJsonNodeJsonProvider.java <nl> - 		objectNode.set(key.toString(), createJsonElement(value)); <nl> + 		objectNode.put(key.toString(), createJsonElement(value)); <nl> mmm ParseContextImpl.java <nl> ppp ParseContextImpl.java <nl> - @Deprecated <nl> mmm Issue234.java <nl> 
deleted file <nl> mmm Issue234.java <nl> - package com.jayway.jsonpath.internal.function; <nl> - import com.jayway.jsonpath.JsonPath; <nl> - import org.assertj.core.util.Maps; <nl> - import org.junit.Test; <nl> - import java.util.Map; <nl> - import static org.assertj.core.api.Assertions.assertThat; <nl> - public class Issue234 { <nl> 
mmm NumericPathFunctionTest.java <nl> ppp NumericPathFunctionTest.java <nl> + import com.jayway.jsonpath.JsonPathException; <nl> + import static org.junit.Assert.assertEquals; <nl> new file <nl> ppp HttpLoader.java <nl> + package com.jayway.jsonpath.internal.function.http; <nl> + import com.jayway.jsonpath.internal.EvaluationContext; <nl> 
mmm MdnsPwoDiscoverer.java <nl> ppp MdnsPwoDiscoverer.java <nl> - class MdnsUrlDiscoverer { <nl> + class MdnsPwoDiscoverer extends PwoDiscoverer { <nl> - private static final String TAG = "MdnsUrlDiscoverer"; <nl> + private static final String TAG = "MdnsPwoDiscoverer"; <nl> + mState = State.STARTED; <nl> - mMdnsUrlDiscovererCallback.onMdnsUrlFound(name); <nl> 
mmm RoleTypeImpl.java <nl> ppp RoleTypeImpl.java <nl> + private Cache<Set<Type>> cachedDirectPlayedByTypes = new Cache<>(() -> getIncomingNeighbours(Schema.EdgeLabel.PLAYS_ROLE)); <nl> + private Cache<Set<RelationType>> cachedRelationTypes = new Cache<>(() -> getIncomingNeighbours(Schema.EdgeLabel.HAS_ROLE)); <nl> 
deleted file <nl> mmm GraknPidException.java <nl> - package ai.grakn.bootup.graknengine.grakn_pid; <nl> - public class GraknPidException extends RuntimeException { <nl> - public GraknPidException(String message) { <nl> - super(message); <nl> - } <nl> - } <nl> mmm ProcessNotStartedException.java <nl> - package ai.grakn.bootup; <nl> 
mmm StatisticsTest.java <nl> ppp StatisticsTest.java <nl> - import io.mindmaps.graql.internal.util.GraqlType; <nl> + import org.junit.Ignore; <nl> - import java.util.*; <nl> + import java.util.Collections; <nl> + import java.util.Optional; <nl> - private static final String thing = "thing"; <nl> - private static final String anotherThing = "anotherThing"; <nl> 
mmm AttributeAtom.java <nl> ppp AttributeAtom.java <nl> mmm ClientJavaE2E.java <nl> ppp ClientJavaE2E.java <nl> - type("lion").sub("entity").has("name").plays("male-partner").plays("female-partner").plays("offspring"), <nl> - type("infer-parentship-from-mating-and-child-bearing").sub("rule") <nl> - .when(and( <nl> 
new file <nl> ppp TraversalProducer.java <nl> + package grakn.core.traversal; <nl> + import grakn.core.common.async.Producer; <nl> + import grakn.core.graph.vertex.Vertex; <nl> + import graql.lang.pattern.variable.Reference; <nl> + import java.util.Map; <nl> + public class TraversalProducer implements Producer<Map<Reference, Vertex<?, ?>>> { <nl> 
mmm AdmissionsInferenceTest.java <nl> ppp AdmissionsInferenceTest.java <nl> - String queryString = "match $x isa applicant;$x has name $name;$x has admissionStatus 'full';"; <nl> - String explicitQuery = "match $x isa applicant, has name $name;{$name value 'Charlie';} or {$name value 'Eva';};"; <nl> + String queryString = "match $x isa applicant;$x has admissionStatus 'full';"; <nl> 
mmm GraqlController.java <nl> ppp GraqlController.java <nl> + import static ai.grakn.GraknTxType.WRITE; <nl> + import static ai.grakn.engine.controller.util.Requests.mandatoryBody; <nl> + import static ai.grakn.engine.controller.util.Requests.mandatoryQueryParameter; <nl> + import static ai.grakn.engine.controller.util.Requests.queryParameter; <nl> 
mmm PlannerVertex.java <nl> ppp PlannerVertex.java <nl> + import grakn.core.traversal.structure.StructureVertex; <nl> + import java.util.Objects; <nl> - private final Identifier identifier; <nl> + private final Identifier identifier; <nl> + private Set<StructureVertex.Property> properties; <nl> - PlannerVertex(Identifier identifier, Planner planner) { <nl> 
mmm ProcedureVertex.java <nl> ppp ProcedureVertex.java <nl> - if (!props().labels().isEmpty()) iterator = iterateFromLabels(graphMgr); <nl> - if (props().valueType().isPresent()) iterator = iterateOrFilterFromValueTypes(graphMgr, iterator); <nl> - if (props().isAbstract()) iterator = iterateOrFilterForAbstract(graphMgr, iterator); <nl> 
mmm IsaAtom.java <nl> ppp IsaAtom.java <nl> + private IsaAtom inferEntityType(Answer sub){ <nl> + if (getTypePredicate() != null) return this; <nl> + if (sub.containsVar(getPredicateVariable())) return addType(sub.get(getPredicateVariable()).asType()); <nl> + return this; <nl> + } <nl> + @Override <nl> + public IsaAtom inferTypes(Answer sub) { <nl> 
mmm MultilevelSemanticCache.java <nl> ppp MultilevelSemanticCache.java <nl> - Set<ConceptMap> parentAnswersToPropagate = baseAnswerIndex.unify(targetToParentUnifier) <nl> + Set<ConceptMap> parentAnswersToPropagate = targetToParentUnifier <nl> + .apply(baseAnswerIndex) <nl> - answerIndex.unify(multiUnifier.inverse()) <nl> 
mmm SemanticDifferenceIT.java <nl> ppp SemanticDifferenceIT.java <nl> - * GNU Affero parent Public License for more details. <nl> + * GNU Affero General Public License for more details. <nl> - * You should have received a copy of the GNU Affero parent Public License <nl> + * You should have received a copy of the GNU Affero General Public License <nl> 
mmm GraknCreator.java <nl> ppp GraknCreator.java <nl> - EngineGraknTxFactory factory = instantiateGraknTxFactory(GRAKN_ENGINE_CONFIG); <nl> + EngineGraknTxFactory factory = instantiateGraknTxFactory(GRAKN_ENGINE_CONFIG, lockProvider); <nl> - static synchronized EngineGraknTxFactory instantiateGraknTxFactory(GraknEngineConfig config) { <nl> 
mmm RelationProperty.java <nl> ppp RelationProperty.java <nl> + Var typeVariable = Graql.var().asUserDefined(); <nl> - Var typeVariable = label == null ? isaVar.getVarName() : Graql.var().asUserDefined(); <nl> - relVar = relVar.isa(typeVariable); <nl> + typeVariable = isaVar.getVarName(); <nl> - return new ai.grakn.graql.internal.reasoner.atom.binary.Relation(relVar.admin(), predicate, parent); <nl> 
mmm MatchTest.java <nl> ppp MatchTest.java <nl> - role("role"), role("character-being-played"), <nl> - role("@has-name-owner") <nl> + role("role"), <nl> + role("character-being-played"), <nl> + role("@has-name-owner"), <nl> + role("@has-attribute-owner") <nl> mmm HasAttributeProperty.java <nl> ppp HasAttributeProperty.java <nl> 
mmm ConceptController.java <nl> ppp ConceptController.java <nl> - import static ai.grakn.util.REST.Response.Json.RELATIONS_JSON_FIELD; <nl> - import static ai.grakn.util.REST.Response.Json.RESOURCES_JSON_FIELD; <nl> + import static ai.grakn.util.REST.Response.Json.RELATIONSHIPS_JSON_FIELD; <nl> + import static ai.grakn.util.REST.Response.Json.ATTRIBUTES_JSON_FIELD; <nl> 
mmm NotInternalFragment.java <nl> ppp NotInternalFragment.java <nl> - GraphTraversal<Vertex, ? extends Element> traversal, TransactionOLTP graph, Collection<Variable> vars) { <nl> + GraphTraversal<Vertex, ? extends Element> traversal, TransactionOLTP tx, Collection<Variable> vars) { <nl> mmm InRelatesFragment.java <nl> 
mmm DistributedLoader.java <nl> ppp DistributedLoader.java <nl> - import io.mindmaps.util.ErrorMessage; <nl> - import io.mindmaps.util.REST; <nl> + import io.mindmaps.util.ErrorMessage; <nl> + import io.mindmaps.util.REST; <nl> - import org.apache.commons.io.IOUtils; <nl> + import spark.utils.IOUtils; <nl> - import java.util.*; <nl> 
mmm TasksControllerTest.java <nl> ppp TasksControllerTest.java <nl> + import ai.grakn.engine.TaskId; <nl> + import ai.grakn.engine.controller.TasksController; <nl> + import ai.grakn.engine.tasks.TaskManager; <nl> + import ai.grakn.engine.tasks.TaskSchedule; <nl> + import ai.grakn.engine.tasks.TaskState; <nl> 
mmm Query.java <nl> ppp Query.java <nl> - if(atomSet.size() != q.getAtoms().size()) return false; <nl> - Iterator<Atomic> it = atomSet.iterator(); <nl> + Set<Atom> atoms = atomSet.stream() <nl> + .filter(Atomic::isAtom).map(at -> (Atom) at) <nl> + .collect(Collectors.toSet()); <nl> + if(atoms.size() != q.getAtoms().stream().filter(Atomic::isAtom).count()) return false; <nl> 
mmm ResourceAtom.java <nl> ppp ResourceAtom.java <nl> + import ai.grakn.concept.Type; <nl> - TypeAtom parentTypeConstraint = this.getTypeConstraints().findFirst().orElse(null); <nl> - TypeAtom childTypeConstraint = childAtom.getTypeConstraints().findFirst().orElse(null); <nl> + Type parentType = this.getParentQuery().getVarTypeMap().get(this.getVarName()); <nl> 
mmm GraqlTraversal.java <nl> ppp GraqlTraversal.java <nl> + @SuppressWarnings("unchecked") <nl> mmm MatchQueryTest.java <nl> ppp MatchQueryTest.java <nl> - Comparable<Comparable<?>> x = (Comparable<Comparable<?>>) result.get("x").asResource().getValue(); <nl> + Resource<Comparable<Comparable<?>>> resource = result.get("x").asResource(); <nl> 
mmm NotPredicate.java <nl> ppp NotPredicate.java <nl> - import com.google.common.base.Preconditions; <nl> - Preconditions.checkNotNull(symbol); <nl> - Preconditions.checkArgument(symbol.arguments().size() == 1); <nl> + assert (symbol != null); <nl> + assert (symbol.arguments().size() == 1); <nl> - return new BooleanLiteral(!((BooleanLiteral)arg).value()); <nl> 
mmm SysNodeExpressionModule.java <nl> ppp SysNodeExpressionModule.java <nl> + bindExpr(NodeHeapExpression.NAME, NodeHeapExpression.class); <nl> mmm WriterProjection.java <nl> ppp WriterProjection.java <nl> + import io.crate.metadata.ColumnIdent; <nl> + import io.crate.metadata.FunctionIdent; <nl> + import io.crate.metadata.FunctionInfo; <nl> 
mmm ContextPreparer.java <nl> ppp ContextPreparer.java <nl> - import com.google.common.base.Optional; <nl> - import io.crate.operation.merge.IteratorPageDownstream; <nl> - PageDownstream pageDownstream = new IteratorPageDownstream( <nl> - rowReceiver, <nl> - PagingIterators.create(phase.numUpstreams(), false, phase.orderByPositions()), <nl> 
new file <nl> ppp QuerySpecTest.java <nl> + package io.crate.analyze; <nl> + import io.crate.analyze.symbol.Symbol; <nl> + import io.crate.testing.SQLExecutor; <nl> + import org.elasticsearch.common.util.Consumer; <nl> + import org.elasticsearch.test.cluster.NoopClusterService; <nl> + import org.junit.Test; <nl> 
mmm ESSearchNode.java <nl> ppp ESSearchNode.java <nl> + @Deprecated <nl> mmm Planner.java <nl> ppp Planner.java <nl> + import com.google.common.base.Preconditions; <nl> + import com.google.common.collect.Lists; <nl> + import io.crate.planner.node.ESSearchNode; <nl> + import io.crate.planner.projection.TopNProjection; <nl> 
mmm ProjectionToProjectorVisitor.java <nl> ppp ProjectionToProjectorVisitor.java <nl> - import io.crate.breaker.RowAccountingWithEstimators; <nl> - var rowAccounting = new RowAccountingWithEstimators( <nl> + var rowAccounting = new RowCellsAccountingWithEstimators( <nl> - context.ramAccounting <nl> + context.ramAccounting, <nl> 
mmm InternalTestClusterTests.java <nl> ppp InternalTestClusterTests.java <nl> - private static final Setting<?>[] DEPRECATED_SETTINGS = {NetworkModule.HTTP_ENABLED, HttpTransportSettings.SETTING_PIPELINING}; <nl> + private static final Setting<?>[] DEPRECATED_SETTINGS = {HttpTransportSettings.SETTING_PIPELINING}; <nl> 
mmm CreateSnapshotAnalyzer.java <nl> ppp CreateSnapshotAnalyzer.java <nl> - import org.apache.logging.log4j.Logger; <nl> + import org.apache.logging.log4j.Logger; <nl> - docTableInfo = (DocTableInfo) schemas.resolveTableInfo(table.getName(), Operation.CREATE_SNAPSHOT, <nl> - analysis.sessionContext().searchPath()); <nl> 
mmm DeleteByIdTask.java <nl> ppp DeleteByIdTask.java <nl> - import io.crate.expression.symbol.SelectSymbol; <nl> - import io.crate.metadata.Functions; <nl> + import io.crate.expression.symbol.SelectSymbol; <nl> + import io.crate.metadata.Functions; <nl> - public ShardDeleteRequest newRequest(ShardId shardId, String routing) { <nl> 
mmm Count.java <nl> ppp Count.java <nl> - import io.crate.analyze.symbol.Symbol; <nl> - import java.util.List; <nl> - public class Count implements LogicalPlan { <nl> + public class Count extends ZeroInputPlan { <nl> - private final List<Symbol> outputs; <nl> - private final List<AbstractTableRelation> baseTables; <nl> 
mmm SourceFromCellsTest.java <nl> ppp SourceFromCellsTest.java <nl> - import io.crate.core.collections.StringObjectMaps; <nl> + import io.crate.core.collections.Maps; <nl> - assertThat(StringObjectMaps.getByPath(map, "obj.a"), is(10)); <nl> - assertThat(StringObjectMaps.getByPath(map, "obj.c"), is(13)); <nl> 
mmm Uid.java <nl> ppp Uid.java <nl> - import org.apache.lucene.util.BytesRefBuilder; <nl> - import org.elasticsearch.common.lucene.BytesRefs; <nl> - import java.util.Collection; <nl> - import java.util.Collections; <nl> - public static BytesRef[] createUidsForTypesAndIds(Collection<String> types, Collection<?> ids) { <nl> 
mmm Distinct.java <nl> ppp Distinct.java <nl> + import io.crate.statistics.TableStats; <nl> - public static LogicalPlan.Builder create(LogicalPlan.Builder source, boolean distinct, List<Symbol> outputs) { <nl> + public static LogicalPlan create(LogicalPlan source, boolean distinct, List<Symbol> outputs, TableStats tableStats) { <nl> 
mmm UpsertByIdTask.java <nl> ppp UpsertByIdTask.java <nl> - import java.util.concurrent.CancellationException; <nl> - if (throwable instanceof CancellationException) { <nl> + if (throwable instanceof InterruptedException) { <nl> mmm BulkShardProcessorContextTest.java <nl> ppp BulkShardProcessorContextTest.java <nl> 
mmm SystemTable.java <nl> ppp SystemTable.java <nl> + import java.util.function.BiFunction; <nl> - private final Function<DiscoveryNodes, Routing> getRouting; <nl> + private final BiFunction<DiscoveryNodes, RoutingProvider, Routing> getRouting; <nl> - @Nullable Function<DiscoveryNodes, Routing> getRouting) { <nl> 
mmm NodeOperationCtxBenchmark.java <nl> ppp NodeOperationCtxBenchmark.java <nl> - import org.elasticsearch.threadpool.TestThreadPool; <nl> + import org.elasticsearch.node.Node; <nl> + import org.elasticsearch.threadpool.ThreadPool; <nl> - private TestThreadPool threadPool; <nl> + private ThreadPool threadPool; <nl> 
mmm ESGetStatementPlanner.java <nl> ppp ESGetStatementPlanner.java <nl> - return new ESGet(context.nextExecutionPhaseId(), tableInfo, table.querySpec(), context.jobId()).plan(); <nl> + return new ESGet( <nl> + context.nextExecutionPhaseId(), <nl> + tableInfo, table.querySpec(), <nl> + context.getLimits(true, table.querySpec()).finalLimit(), <nl> 
mmm SigarExtendedNodeInfo.java <nl> ppp SigarExtendedNodeInfo.java <nl> - import com.google.common.collect.Maps; <nl> + import java.util.HashMap; <nl> - private final Map<File, FileSystem> fileSystems = Maps.newHashMap(); <nl> + private final Map<File, FileSystem> fileSystems = new HashMap<>(); <nl> mmm QualifiedName.java <nl> 
mmm InformationSchemaCollectService.java <nl> ppp InformationSchemaCollectService.java <nl> + downstream.upstreamFinished(); <nl> mmm HandlerSideDataCollectOperation.java <nl> ppp HandlerSideDataCollectOperation.java <nl> + import com.google.common.util.concurrent.Futures; <nl> - import com.google.common.util.concurrent.SettableFuture; <nl> 
new file <nl> ppp PathAccessor.java <nl> + package org.cratedb.test.integration; <nl> + import com.google.common.base.Charsets; <nl> + import org.elasticsearch.common.io.Streams; <nl> + import java.io.*; <nl> + public class PathAccessor { <nl> + public static String stringFromPath(String path, Class<?> aClass) throws IOException { <nl> 
mmm RelationAnalyzer.java <nl> ppp RelationAnalyzer.java <nl> - FieldResolver fieldResolver = new FullQualifedNameFieldResolver(context.sources()); <nl> - expressionAnalyzer = new ExpressionAnalyzer(analysisMetaData, parameterContext, fieldResolver); <nl> + FieldProvider fieldProvider = new FullQualifedNameFieldProvider(context.sources()); <nl> 
mmm InsertAnalysis.java <nl> ppp InsertAnalysis.java <nl> - Preconditions.checkState(t.rowGranularity() == RowGranularity.DOC, "cannot insert into system tables"); <nl> + if (t.rowGranularity() != RowGranularity.DOC) { <nl> + throw new UnsupportedOperationException("cannot insert into system tables"); <nl> 
mmm WriterProjection.java <nl> ppp WriterProjection.java <nl> + import io.crate.metadata.ColumnIdent; <nl> + import io.crate.metadata.FunctionIdent; <nl> + import io.crate.metadata.FunctionInfo; <nl> + import io.crate.metadata.sys.SysShardsTableInfo; <nl> + import io.crate.operation.scalar.FormatFunction; <nl> 
mmm HdfsBlobContainer.java <nl> ppp HdfsBlobContainer.java <nl> + import org.elasticsearch.common.blobstore.BlobContainer; <nl> - FileStatus[] files = store.execute(fileContext -> (fileContext.util().listStatus(path, <nl> - path -> prefix == null || path.getName().startsWith(prefix)))); <nl> - Map<String, BlobMetaData> map = new LinkedHashMap<String, BlobMetaData>(); <nl> 
mmm BootstrapCheck.java <nl> ppp BootstrapCheck.java <nl> + import org.elasticsearch.common.settings.Settings; <nl> - BootstrapCheckResult check(BootstrapContext context); <nl> + BootstrapCheckResult check(Settings settings); <nl> mmm Natives.java <nl> ppp Natives.java <nl> - import java.nio.file.Path; <nl> 
mmm TransportExecutor.java <nl> ppp TransportExecutor.java <nl> + @Override <nl> + public List<? extends Task> visitGetPlan(ESGet plan, UUID context) { <nl> + return Collections.singletonList(new ESGetTask( <nl> + functions, <nl> + globalProjectionToProjectionVisitor, <nl> + transportActionProvider.transportMultiGetAction(), <nl> 
new file <nl> ppp TokenFilterNode.java <nl> + package org.cratedb.sql.parser.parser; <nl> + public class TokenFilterNode extends NamedNodeWithOptionalProperties {} <nl> new file <nl> ppp NamedNodeWithOptionalProperties.java <nl> + package org.cratedb.sql.parser.parser; <nl> + import org.cratedb.sql.parser.StandardException; <nl> 
mmm TransportSQLActionClassLifecycleTest.java <nl> ppp TransportSQLActionClassLifecycleTest.java <nl> + @Test <nl> + public void testSysOperationsLog() throws Exception { <nl> + executor.exec( <nl> + "select count(*), race from characters group by race order by count(*) desc limit 2"); <nl> + SQLResponse resp = executor.exec("select count(*) from sys.operations_log"); <nl> 
mmm CollectingRowConsumer.java <nl> ppp CollectingRowConsumer.java <nl> + public CompletableFuture<R> resultFuture() { <nl> + return resultFuture; <nl> + } <nl> - @Override <nl> - public CompletableFuture<R> completionFuture() { <nl> - return resultFuture; <nl> - } <nl> mmm ExplainPlannerTest.java <nl> ppp ExplainPlannerTest.java <nl> 
new file <nl> ppp RefreshTablePlan.java <nl> + package io.crate.planner.node.ddl; <nl> + import io.crate.analyze.AnalyzedRefreshTable; <nl> + import io.crate.analyze.SymbolEvaluator; <nl> + import io.crate.common.collections.Lists2; <nl> + import io.crate.data.InMemoryBatchIterator; <nl> + import io.crate.data.Row; <nl> 
mmm CountAggState.java <nl> ppp CountAggState.java <nl> - import java.util.Arrays; <nl> - public boolean isDistinct; <nl> - public CountAggState() { <nl> - isDistinct = false; <nl> - } <nl> mmm SQLGroupingCollectorTest.java <nl> ppp SQLGroupingCollectorTest.java <nl> - import org.cratedb.action.groupby.aggregate.count.CountAggFunction; <nl> 
mmm DocIndexMetaData.java <nl> ppp DocIndexMetaData.java <nl> - ExpressionAnalysisContext context = new ExpressionAnalysisContext(new TransactionContext()); <nl> + ExpressionAnalysisContext context = new ExpressionAnalysisContext(); <nl> mmm ExpressionAnalyzer.java <nl> ppp ExpressionAnalyzer.java <nl> + import com.google.common.base.Predicates; <nl> 
mmm AliasedRelation.java <nl> ppp AliasedRelation.java <nl> - Preconditions.checkNotNull(alias, " is null"); <nl> + Preconditions.checkNotNull(alias, "alias is null"); <nl> + Preconditions.checkNotNull(columnNames, "columnNames is null"); <nl> - if (columnNames != null ? !columnNames.equals(that.columnNames) : that.columnNames != null) { <nl> 
mmm CrateNode.java <nl> ppp CrateNode.java <nl> + import org.elasticsearch.repositories.azure.AzureRepositoryPlugin; <nl> + AzureRepositoryPlugin.class, <nl> mmm RepositorySettingsModule.java <nl> ppp RepositorySettingsModule.java <nl> + import org.elasticsearch.common.unit.TimeValue; <nl> + import static java.util.Map.entry; <nl> 
new file <nl> ppp IntervalParserTest.java <nl> + package io.crate.interval; <nl> + import io.crate.test.integration.CrateUnitTest; <nl> + import org.joda.time.Period; <nl> + import org.junit.Test; <nl> + import static org.hamcrest.core.Is.is; <nl> + public class IntervalParserTest extends CrateUnitTest { <nl> 
mmm ShardCollectorProvider.java <nl> ppp ShardCollectorProvider.java <nl> - import io.crate.operation.InputFactory; <nl> + import io.crate.operation.InputFactory; <nl> - final FlatProjectorChain.Builder chainBuilder = new FlatProjectorChain.Builder( <nl> + return rowReceiver -> builder.build(ProjectorChain.prependProjectors( <nl> 
mmm BlobIndicesService.java <nl> ppp BlobIndicesService.java <nl> - import org.elasticsearch.common.component.AbstractLifecycleComponent; <nl> + import org.elasticsearch.common.component.AbstractComponent; <nl> - public class BlobIndicesService extends AbstractLifecycleComponent<BlobIndicesService> { <nl> 
mmm SQLTransportIntegrationTest.java <nl> ppp SQLTransportIntegrationTest.java <nl> - import io.crate.plugin.CrateCorePlugin; <nl> + import io.crate.plugin.BlobPlugin; <nl> + import io.crate.plugin.SQLPlugin; <nl> - return pluginList(CrateCorePlugin.class); <nl> + return pluginList(BlobPlugin.class, SQLPlugin.class); <nl> 
mmm CoordinatorTxnCtx.java <nl> ppp CoordinatorTxnCtx.java <nl> - import org.joda.time.DateTimeUtils; <nl> + import java.time.Instant; <nl> - public long currentTimeMillis() { <nl> - if (currentTimeMillis == null) { <nl> - currentTimeMillis = DateTimeUtils.currentTimeMillis(); <nl> + public Instant currentInstant() { <nl> 
mmm GeoPointType.java <nl> ppp GeoPointType.java <nl> - assert val1.length == 2; <nl> - assert val2.length == 2; <nl> + assert val1.length == 2 : "1st GeoPoint is empty"; <nl> + assert val2.length == 2 : "2nd GeoPoint is empty"; <nl> mmm BlockingEvictingQueue.java <nl> ppp BlockingEvictingQueue.java <nl> - assert capacity > 0; <nl> 
new file <nl> ppp ColumnType.java <nl> + package io.crate.sql.tree; <nl> + import com.google.common.base.Objects; <nl> + public class ColumnType extends Node { <nl> + protected final String name; <nl> + public ColumnType(String name) { <nl> + this.name = name; <nl> + } <nl> + public String name() { <nl> + return name; <nl> 
mmm MetadataMappingService.java <nl> ppp MetadataMappingService.java <nl> - for (DocumentMapper mapper : indexService.mapperService().docMappers(true)) { <nl> + DocumentMapper mapper = indexService.mapperService().documentMapper(); <nl> + if (mapper != null) { <nl> - for (DocumentMapper mapper : indexService.mapperService().docMappers(true)) { <nl> 
new file <nl> ppp AnalyzeITest.java <nl> + package io.crate.integrationtests; <nl> + import io.crate.metadata.RelationName; <nl> + import io.crate.planner.TableStats; <nl> + import org.junit.Test; <nl> + import static org.hamcrest.CoreMatchers.is; <nl> + public class AnalyzeITest extends SQLTransportIntegrationTest{ <nl> 
mmm Insert.java <nl> ppp Insert.java <nl> + import com.google.common.collect.ImmutableList; <nl> + import javax.annotation.Nullable; <nl> - public Insert(Table table, List<List<Expression>> valuesList, List<QualifiedName> columns) { <nl> + public Insert(Table table, List<List<Expression>> valuesList, @Nullable List<QualifiedName> columns) { <nl> 
mmm LocalDataCollectOperation.java <nl> ppp LocalDataCollectOperation.java <nl> - Optional<Function> whereClause = collectNode.whereClause(); <nl> - if (whereClause.isPresent() && NormalizationHelper.evaluatesToFalse(whereClause.get(), this.normalizer) <nl> + Function whereClause = collectNode.whereClause(); <nl> 
mmm InOperatorTest.java <nl> ppp InOperatorTest.java <nl> + import com.google.common.collect.ImmutableSet; <nl> + import io.crate.operator.operator.input.ObjectInput; <nl> + import static junit.framework.Assert.assertTrue; <nl> + import static org.junit.Assert.assertFalse; <nl> + @Test <nl> + public void testEvaluateIntegerIncluded() { <nl> 
mmm StatsTables.java <nl> ppp StatsTables.java <nl> - public interface IterableGetter { <nl> - public Iterable<?> getIterable(); <nl> - } <nl> new file <nl> ppp RecoveryAfterNodesSysCheck.java <nl> + package io.crate.operation.reference.sys.check.checks; <nl> + import io.crate.metadata.settings.CrateSettings; <nl> 
mmm IndexWriterProjectorUnitTest.java <nl> ppp IndexWriterProjectorUnitTest.java <nl> - import org.elasticsearch.action.admin.indices.create.TransportBulkCreateIndicesAction; <nl> + import org.elasticsearch.action.admin.indices.create.TransportCreatePartitionsAction; <nl> - TransportBulkCreateIndicesAction transportBulkCreateIndicesAction = mock(TransportBulkCreateIndicesAction.class); <nl> 
mmm NodeFsExpression.java <nl> ppp NodeFsExpression.java <nl> - super(NAME); <nl> mmm NodeLoadExpression.java <nl> ppp NodeLoadExpression.java <nl> - import com.google.common.collect.ImmutableList; <nl> - import io.crate.metadata.ColumnIdent; <nl> - super(NAME); <nl> - childImplementations.put(ONE, new LoadExpression(0, ONE)); <nl> 
new file <nl> ppp UnassignedShardsReferenceResolver.java <nl> + package io.crate.operator.reference.sys.shard.unassigned; <nl> + import com.google.common.collect.ImmutableList; <nl> + import io.crate.metadata.ReferenceInfo; <nl> + import io.crate.metadata.shard.unassigned.UnassignedShardCollectorExpression; <nl> 
mmm TransportDistributedSQLAction.java <nl> ppp TransportDistributedSQLAction.java <nl> + import org.cratedb.action.groupby.GroupByHelper; <nl> - groupbyResultToRows(parsedStatement, groupByResult), <nl> + GroupByHelper.sortedRowsToObjectArray(groupByResult, parsedStatement, offset), <nl> - private Object[][] groupbyResultToRows(ParsedStatement parsedStatement, <nl> 
new file <nl> ppp BlobShardPartitionOrphanedExpression.java <nl> + package io.crate.operation.reference.sys.shard.blob; <nl> + import io.crate.metadata.shard.blob.BlobShardReferenceImplementation; <nl> + import io.crate.operation.reference.sys.shard.SysShardExpression; <nl> + import org.elasticsearch.common.inject.Inject; <nl> 
mmm AnalyzedDropAnalyzer.java <nl> ppp AnalyzedDropAnalyzer.java <nl> - import org.elasticsearch.common.settings.Settings; <nl> + public class AnalyzedDropAnalyzer implements DDLStatement { <nl> - public class DropAnalyzerStatement extends AbstractDDLAnalyzedStatement { <nl> + private final String name; <nl> 
mmm InternalCountOperation.java <nl> ppp InternalCountOperation.java <nl> - import org.elasticsearch.cache.recycler.CacheRecycler; <nl> - import org.elasticsearch.cache.recycler.PageCacheRecycler; <nl> - import org.elasticsearch.cluster.ClusterService; <nl> - import org.elasticsearch.common.Strings; <nl> - import org.elasticsearch.common.util.BigArrays; <nl> 
mmm BulkShardProcessor.java <nl> ppp BulkShardProcessor.java <nl> - import org.elasticsearch.common.unit.TimeValue; <nl> - private final TimeValue requestTimeout; <nl> - requestTimeout = settings.getAsTime("insert_by_query.request_timeout", BulkShardRequest.DEFAULT_TIMEOUT); <nl> - bulkShardRequest.timeout(requestTimeout); <nl> 
mmm CreateDropAnalyzerPlan.java <nl> ppp CreateDropAnalyzerPlan.java <nl> - public class CreateAnalyzerPlan implements Plan { <nl> + public class CreateDropAnalyzerPlan implements Plan { <nl> - public CreateAnalyzerPlan(Settings analyzerSettings) { <nl> + public CreateDropAnalyzerPlan(Settings analyzerSettings) { <nl> 
mmm QueryBuilderHelper.java <nl> ppp QueryBuilderHelper.java <nl> - String like = (String)value; <nl> - like = like.replaceAll("(?<!\\\\)\\*", "\\\\*"); <nl> - like = like.replaceAll("(?<!\\\\)%", "*"); <nl> - like = like.replaceAll("\\\\%", "%"); <nl> - like = like.replaceAll("(?<!\\\\)\\?", "\\\\?"); <nl> 
new file <nl> ppp SysSnapshotsTableInfo.java <nl> + package io.crate.metadata.sys; <nl> + import com.google.common.collect.ImmutableList; <nl> + import io.crate.analyze.WhereClause; <nl> + import io.crate.metadata.*; <nl> + import io.crate.types.ArrayType; <nl> + import io.crate.types.DataType; <nl> + import io.crate.types.DataTypes; <nl> 
mmm ShardCollectService.java <nl> ppp ShardCollectService.java <nl> - ShardProjectorChain projectorChain) throws Exception { <nl> + ShardProjectorChain projectorChain, <nl> + int jobSearchContextId) throws Exception { <nl> - return getLuceneIndexCollector(normalizedCollectNode, downstream); <nl> + return getLuceneIndexCollector(normalizedCollectNode, downstream, jobSearchContextId); <nl> 
mmm DocTableInfoBuilder.java <nl> ppp DocTableInfoBuilder.java <nl> - private final boolean checkAliasSchema; <nl> - IndexNameExpressionResolver indexNameExpressionResolver, <nl> - boolean checkAliasSchema) { <nl> + IndexNameExpressionResolver indexNameExpressionResolver) { <nl> - this.checkAliasSchema = checkAliasSchema; <nl> 
mmm IntegerLiteral.java <nl> ppp IntegerLiteral.java <nl> - private Integer value; <nl> + private int value; <nl> - public IntegerLiteral(Integer value) { <nl> + public IntegerLiteral(int value) { <nl> - if (in.readBoolean()) { <nl> - value = in.readVInt(); <nl> - } <nl> + value = in.readVInt(); <nl> - boolean notNull = value != null; <nl> 
new file <nl> ppp SubtractFunction.java <nl> + package io.crate.operation.scalar.arithmetic; <nl> + import io.crate.metadata.DynamicFunctionResolver; <nl> + import io.crate.metadata.FunctionImplementation; <nl> + import io.crate.metadata.FunctionInfo; <nl> + import io.crate.operation.Input; <nl> + import io.crate.operation.scalar.ScalarFunctionModule; <nl> 
mmm ViewPagerSwipeableExampleAdapter.java <nl> ppp ViewPagerSwipeableExampleAdapter.java <nl> + @Override <nl> + public void onSwipeItemStarted(MyViewHolder holder, int position) { <nl> + notifyDataSetChanged(); <nl> + } <nl> mmm ExpandableRecyclerViewWrapperAdapter.java <nl> ppp ExpandableRecyclerViewWrapperAdapter.java <nl> 
mmm MySwipeableItemAdapter.java <nl> ppp MySwipeableItemAdapter.java <nl> - import com.h6ah4i.android.widget.advrecyclerview.swipeable.SwipeableItemAdapter; <nl> + import com.h6ah4i.android.widget.advrecyclerview.swipeable.LegacySwipeableItemAdapter; <nl> - implements SwipeableItemAdapter<MySwipeableItemAdapter.MyViewHolder> { <nl> 
mmm MyDraggableItemAdapter.java <nl> ppp MyDraggableItemAdapter.java <nl> - public boolean onCheckCanStartDrag(MyViewHolder holder, int x, int y) { <nl> + public boolean onCheckCanStartDrag(MyViewHolder holder, int position, int x, int y) { <nl> - public ItemDraggableRange onGetItemDraggableRange(MyViewHolder holder) { <nl> 
mmm Backend.java <nl> ppp Backend.java <nl> + public static final String USER_LOG_PREFIX = "ulog_"; <nl> - userLogManager = getLogManager(USER_LOG); <nl> + userLogManager = getLogManager(TRIGGER_LOG); <nl> mmm TypeDefinitionCategory.java <nl> ppp TypeDefinitionCategory.java <nl> - import com.thinkaurelius.titan.graphdb.database.management.ModifierType; <nl> 
mmm InternalCassandraThriftKeyColumnValueTest.java <nl> ppp InternalCassandraThriftKeyColumnValueTest.java <nl> + import org.junit.experimental.categories.Category; <nl> + import com.thinkaurelius.titan.testcategory.RandomPartitionerTests; <nl> + @Category({RandomPartitionerTests.class}) <nl> mmm EmbeddedCassandraBlueprintsTest.java <nl> 
mmm HybridConfigured.java <nl> ppp HybridConfigured.java <nl> - import com.thinkaurelius.titan.hadoop.config.TitanHadoopConfiguration.ModifiableHadoopConfiguration; <nl> - titanConf = TitanHadoopConfiguration.of(conf); <nl> + titanConf = ModifiableHadoopConfiguration.of(conf); <nl> - titanConf = TitanHadoopConfiguration.of(conf); <nl> 
mmm KryoSerializer.java <nl> ppp KryoSerializer.java <nl> - import com.esotericsoftware.kryo.ObjectBuffer; <nl> - import com.esotericsoftware.kryo.serialize.FieldSerializer; <nl> - import com.google.common.base.Preconditions; <nl> - import com.google.common.cache.Cache; <nl> - import com.google.common.cache.CacheBuilder; <nl> 
mmm HadoopGraph.java <nl> ppp HadoopGraph.java <nl> + import com.thinkaurelius.titan.diskstorage.configuration.ConfigElement; <nl> + import com.thinkaurelius.titan.hadoop.config.HybridConfigured; <nl> + import com.thinkaurelius.titan.hadoop.config.TitanHadoopConfiguration; <nl> - public class HadoopGraph implements Configurable { <nl> 
mmm TitanGraphTest.java <nl> ppp TitanGraphTest.java <nl> + assertTrue(tx.containsVertex(weight.getID())); <nl> + assertFalse(tx.containsVertex(nid + 64)); <nl> + assertFalse(tx.containsVertex(weight.getID() + 64)); <nl> + newTx(); <nl> + v21 = tx.getVertex(v21.getID()); <nl> + tx.makeType().name("link").unidirected().makeEdgeLabel(); <nl> 
mmm GraphDatabaseConfiguration.java <nl> ppp GraphDatabaseConfiguration.java <nl> - import com.thinkaurelius.titan.graphdb.tinkerpop.BlueprintsDefaultSchemaMaker; <nl> + import com.thinkaurelius.titan.graphdb.tinkerpop.TitanDefaultSchemaMaker; <nl> - ConfigOption.Type.MASKABLE, "blueprints" , new Predicate<String>() { <nl> 
mmm AbstractVertex.java <nl> ppp AbstractVertex.java <nl> - return tx().addProperty(it(), tx().getOrCreatePropertyKey(key), value); <nl> + return tx().addProperty(it(), tx().getPropertyKey(key), value); <nl> - TitanEdge edge = tx().addEdge(it(), (TitanVertex) vertex, tx().getOrCreateEdgeLabel(label)); <nl> 
mmm BackendQueryHolder.java <nl> ppp BackendQueryHolder.java <nl> - this.profiler = parentProfiler.addNested(); <nl> + this.profiler = parentProfiler.addNested("OR-query"); <nl> mmm QueryProfiler.java <nl> ppp QueryProfiler.java <nl> - public QueryProfiler addNested() { <nl> + public QueryProfiler addNested(String groupName) { <nl> 
deleted file <nl> mmm PersistitHashKeyColumnValueTest.java <nl> - package com.thinkaurelius.titan.diskstorage.persistit; <nl> - import com.thinkaurelius.titan.PersistitStorageSetup; <nl> - import com.thinkaurelius.titan.diskstorage.HashKeyColumnValueStoreTest; <nl> - import com.thinkaurelius.titan.diskstorage.StorageException; <nl> 
mmm ValueDistribution.java <nl> ppp ValueDistribution.java <nl> - package com.thinkaurelius.faunus.mapreduce.statistics; <nl> + package com.thinkaurelius.faunus.mapreduce.sideeffect; <nl> mmm FaunusPipeline.java <nl> ppp FaunusPipeline.java <nl> + public FaunusPipeline path() throws IOException { <nl> + this.compiler.pathMap(this.state.getElementType()); <nl> 
mmm CassandraEmbeddedKeyColumnValueStore.java <nl> ppp CassandraEmbeddedKeyColumnValueStore.java <nl> + import com.google.common.base.Preconditions; <nl> - } else if (partitioner instanceof ByteOrderedPartitioner) { <nl> - minimumToken = new BytesToken(com.thinkaurelius.titan.diskstorage.util.ByteBufferUtil.zeroByteBuffer(8)); <nl> 
new file <nl> ppp TitanInMemoryBlueprintsGraph.java <nl> + package com.thinkaurelius.titan.graphdb.blueprints; <nl> + import com.thinkaurelius.titan.graphdb.transaction.InMemoryTitanGraph; <nl> + import com.thinkaurelius.titan.graphdb.transaction.TransactionConfig; <nl> + import com.tinkerpop.blueprints.Features; <nl> 
deleted file <nl> mmm ExternalCassandraEmbeddedGraphTtlTest.java <nl> - package com.thinkaurelius.titan.graphdb.embedded; <nl> - import com.thinkaurelius.titan.CassandraStorageSetup; <nl> - import com.thinkaurelius.titan.core.Titan; <nl> - import com.thinkaurelius.titan.core.TitanFactory; <nl> - import com.thinkaurelius.titan.core.TitanGraph; <nl> 
mmm HBaseTransaction.java <nl> ppp HBaseTransaction.java <nl> mmm CTConnectionPool.java <nl> ppp CTConnectionPool.java <nl> mmm CassandraDaemonWrapper.java <nl> ppp CassandraDaemonWrapper.java <nl> mmm KeyColumnValueStoreTest.java <nl> ppp KeyColumnValueStoreTest.java <nl> mmm CassandraThriftOrderedKeyColumnValueStore.java <nl> 
mmm CassandraEmbeddedAssemblyIT.java <nl> ppp CassandraEmbeddedAssemblyIT.java <nl> - @Test <nl> - public void testEmbeddedCassandraESGettingStarted() throws Exception { <nl> - testGettingStartedGremlinSession("conf/titan-cassandra-embedded-es.properties", "embeddedcassandra"); <nl> - } <nl> new file <nl> ppp CassandraEmbeddedESAssemblyIT.java <nl> 
mmm DisplayBlockActivity.java <nl> ppp DisplayBlockActivity.java <nl> + private List<Block> mBlockEntries = new ArrayList<>(); <nl> + private String mBlockStartTime; <nl> + private ListView mListView; <nl> + private TextView mFailureView; <nl> + private Button mActionButton; <nl> + private int mMaxStoredBlockCount; <nl> 
new file <nl> ppp TreeResponseModel.java <nl> + package com.fastaccess.data.dao; <nl> + import com.fastaccess.data.dao.model.RepoFile; <nl> + import java.util.List; <nl> + import lombok.Getter; <nl> + import lombok.NoArgsConstructor; <nl> + import lombok.Setter; <nl> + @NoArgsConstructor @Getter @Setter public class TreeResponseModel { <nl> 
mmm RepoPagerActivity.java <nl> ppp RepoPagerActivity.java <nl> - if (bottomNavigation.getSelectedIndex() != navType) bottomNavigation.setSelectedIndex(navType, true); <nl> + try { <nl> + if (bottomNavigation.getSelectedIndex() != navType) bottomNavigation.setSelectedIndex(navType, true); <nl> + } catch (Exception ignored) {} <nl> 
mmm ProfileOverviewPresenter.java <nl> ppp ProfileOverviewPresenter.java <nl> + import android.graphics.Bitmap; <nl> + import com.fastaccess.ui.widgets.contributions.GitHubContributionsView; <nl> + import java.util.List; <nl> - loadContributions(); <nl> + @Override public void onLoadContributionWidget(@NonNull GitHubContributionsView gitHubContributionsView) { <nl> 
mmm FastHubAboutActivity.java <nl> ppp FastHubAboutActivity.java <nl> + } else if (themeMode == PrefGetter.MID_NIGHT_BLUE) { <nl> + setTheme(R.style.AppTheme_AboutActivity_MidNightBlue); <nl> mmm BaseActivity.java <nl> ppp BaseActivity.java <nl> + import com.fastaccess.BuildConfig; <nl> + import com.fastaccess.helper.Logger; <nl> 
new file <nl> ppp AstNodeAdapter.java <nl> + package graphql.language; <nl> + import graphql.PublicApi; <nl> + import graphql.util.NodeAdapter; <nl> + import graphql.util.NodeLocation; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + @PublicApi <nl> + public class AstNodeAdapter implements NodeAdapter<Node> { <nl> 
mmm UnionTypeDefinition.java <nl> ppp UnionTypeDefinition.java <nl> - public class UnionTypeDefinition extends AbstractNode implements TypeDefinition, ResolvedTypeDefinition { <nl> + public class UnionTypeDefinition extends AbstractNode implements TypeDefinition { <nl> mmm CombinedWiringFactory.java <nl> 
mmm GraphQLInputObjectField.java <nl> ppp GraphQLInputObjectField.java <nl> - List<GraphQLType> children = new ArrayList<>(); <nl> - children.add(type); <nl> - children.addAll(directives); <nl> - return children; <nl> + return Collections.singletonList(type); <nl> mmm GraphQLInputObjectType.java <nl> ppp GraphQLInputObjectType.java <nl> 
deleted file <nl> mmm WiringFactory.java <nl> - package graphql.schema.idl; <nl> - import graphql.language.FieldDefinition; <nl> - import graphql.language.InterfaceTypeDefinition; <nl> - import graphql.language.UnionTypeDefinition; <nl> - import graphql.schema.DataFetcher; <nl> - import graphql.schema.TypeResolver; <nl> 
mmm NestedInputSchema.java <nl> ppp NestedInputSchema.java <nl> - .dataFetcher(new DataFetcher() { <nl> - @Override <nl> - public Object get(DataFetchingEnvironment environment) { <nl> - Integer initialValue = environment.getArgument("initialValue"); <nl> - Map<String, Object> filter = environment.getArgument("filter"); <nl> 
deleted file <nl> mmm InstrumentationContext.java <nl> - package graphql.execution.instrumentation; <nl> - public interface InstrumentationContext<T> { <nl> - void onEnd(T result); <nl> - void onEnd(Exception e); <nl> - } <nl> mmm ExecutionContext.java <nl> - import graphql.execution.instrumentation.Instrumentation; <nl> 
mmm AstValueHelper.java <nl> ppp AstValueHelper.java <nl> - import graphql.GraphQLException; <nl> - return StringValue.newStringValue().value(stringValue).build(); <nl> + return StringValue.newStringValue().value(jsonStringify(stringValue)).build(); <nl> + static String jsonStringify(String stringValue) { <nl> 
mmm ValidationErrorType.java <nl> ppp ValidationErrorType.java <nl> - DeferMustBeOnAllFields <nl> + DeferMustBeOnAllFields, <nl> + DuplicateArgumentNames <nl> new file <nl> ppp UniqueArgumentNamesRule.java <nl> + package graphql.validation.rules; <nl> + import graphql.language.Argument; <nl> + import graphql.language.Directive; <nl> 
mmm ListType.java <nl> ppp ListType.java <nl> - this(type, null, new ArrayList<>()); <nl> + super(null, new ArrayList<>()); <nl> + this.type = type; <nl> mmm VariableReference.java <nl> ppp VariableReference.java <nl> - this(name,null, new ArrayList<>()); <nl> + super(null, new ArrayList<>()); <nl> + this.name = name; <nl> 
deleted file <nl> mmm TypeResolutionEnvironment.java <nl> - package graphql; <nl> - import graphql.language.Field; <nl> - import graphql.schema.GraphQLSchema; <nl> - import graphql.schema.GraphQLType; <nl> - import java.util.Map; <nl> - public class TypeResolutionEnvironment { <nl> - private final Object object; <nl> 
mmm SuffixArray.java <nl> ppp SuffixArray.java <nl> - 	public static class SuffixSort implements Comparator<Integer>{ <nl> - 		 <nl> - 		private char str[] = null; <nl> - 		 <nl> - 		public SuffixSort(char str[]){ <nl> - 			this.str = str; <nl> - 		} <nl> - 		 <nl> - 		@Override <nl> - 		public int compare(Integer i1, Integer i2) { <nl> 
new file <nl> ppp CopyLinkListWIthArbitPointer.java <nl> + package com.interview.linklist; <nl> + public class CopyLinkListWIthArbitPointer { <nl> + 	public Node copy(Node head){ <nl> + 		if(head == null){ <nl> + 			return null; <nl> + 		} <nl> + 		 <nl> + 		Node current = head; <nl> + 		while(current != null){ <nl> 
mmm PrintAllPathFromTopLeftToBottomRight.java <nl> ppp PrintAllPathFromTopLeftToBottomRight.java <nl> - import java.util.Arrays; <nl> + private void printArray(int arr[]){ <nl> + for(int i=0; i < arr.length; i++){ <nl> + System.out.print(arr[i] + " "); <nl> + } <nl> + System.out.print("\n"); <nl> + } <nl> - System.out.println(Arrays.toString(result)); <nl> 
mmm DiscoveryFilterAdapter.java <nl> ppp DiscoveryFilterAdapter.java <nl> - import android.support.v7.widget.RecyclerView; <nl> - import android.view.LayoutInflater; <nl> + import android.util.Pair; <nl> - import android.view.ViewGroup; <nl> + import com.kickstarter.ui.DiscoveryFilterStyle; <nl> + import com.kickstarter.ui.viewholders.EmptyViewHolder; <nl> 
new file <nl> ppp HttpPatch.java <nl> + package com.kickstarter.libs; <nl> + import org.apache.http.client.methods.HttpEntityEnclosingRequestBase; <nl> + import java.net.URI; <nl> + public class HttpPatch extends HttpEntityEnclosingRequestBase { <nl> + public final static String METHOD_NAME = "PATCH"; <nl> 
mmm ProjectUtils.java <nl> ppp ProjectUtils.java <nl> - import java.util.Locale; <nl> mmm LoginToolbar.java <nl> ppp LoginToolbar.java <nl> - import com.kickstarter.libs.BaseActivity; <nl> mmm ProjectAdapter.java <nl> ppp ProjectAdapter.java <nl> - import android.support.annotation.Nullable; <nl> - import com.kickstarter.models.User; <nl> 
mmm CommentFeedAdapter.java <nl> ppp CommentFeedAdapter.java <nl> - private final Delegate delegate; <nl> - public interface Delegate extends ProjectContextViewHolder.Delegate {} <nl> - public CommentFeedAdapter(final Project project, final List<Pair<Project, Comment>> projectAndComments, <nl> - final Delegate delegate) { <nl> 
mmm TwoFactorPresenter.java <nl> ppp TwoFactorPresenter.java <nl> + import android.app.Activity; <nl> + import timber.log.Timber; <nl> + private boolean forwardFlag = false; <nl> + public void takeForwardFlag(final boolean forwardFlag) { <nl> + this.forwardFlag = forwardFlag; <nl> + } <nl> + currentUser.set(envelope.user, envelope.access_token); <nl> 
mmm DiscoveryViewModel.java <nl> ppp DiscoveryViewModel.java <nl> - import com.kickstarter.libs.preferences.BooleanPreferenceType; <nl> - import com.kickstarter.libs.utils.DateTimeUtils; <nl> - import org.joda.time.DateTime; <nl> - import static com.kickstarter.libs.rx.transformers.Transformers.ignoreValues; <nl> 
mmm RewardViewHolder.java <nl> ppp RewardViewHolder.java <nl> - public @Bind(R.id.estimated_delivery_date) TextView estimatedDeliveryTextView; <nl> + public @Bind(R.id.estimated_delivery) TextView estimatedDeliveryTextView; <nl> + public @Bind(R.id.estimated_delivery_date) TextView estimatedDeliveryDateTextView; <nl> 
mmm KickstarterService.java <nl> ppp KickstarterService.java <nl> + import com.kickstarter.services.ApiResponses.AccessTokenEnvelope; <nl> + import retrofit.http.POST; <nl> + import retrofit.http.Query; <nl> + @POST("/xauth/access_token") <nl> + public Observable<AccessTokenEnvelope> login(@Query("email") String email, <nl> 
mmm ProjectViewHolder.java <nl> ppp ProjectViewHolder.java <nl> - DateTimeUtils.mediumDateTime(project.deadline()))); <nl> + project.deadline().toString(DateTimeUtils.writtenDeadline()))); <nl> mmm ActivityFeedToolbar.java <nl> ppp ActivityFeedToolbar.java <nl> + import android.content.Intent; <nl> + import com.kickstarter.libs.BaseActivity; <nl> 
mmm ActivityListAdapter.java <nl> ppp ActivityListAdapter.java <nl> - import android.support.annotation.IntDef; <nl> - import java.lang.annotation.Retention; <nl> - import java.lang.annotation.RetentionPolicy; <nl> - private static final int FRIEND_BACKING = 0; <nl> - private static final int FRIEND_FOLLOW = 1; <nl> 
new file <nl> ppp AppRatingDialog.java <nl> + package com.kickstarter.ui.views; <nl> + import android.content.Context; <nl> + import android.graphics.drawable.ColorDrawable; <nl> + import android.os.Bundle; <nl> + import android.support.annotation.NonNull; <nl> + import android.support.annotation.Nullable; <nl> 
mmm ApplicationGraph.java <nl> ppp ApplicationGraph.java <nl> + import com.kickstarter.ui.views.AppRatingDialog; <nl> + void inject(AppRatingDialog __); <nl> mmm Koala.java <nl> ppp Koala.java <nl> - public void trackVideoStart() { <nl> - client.track("Project Video Start"); <nl> - } <nl> - public void trackVideoEndedScrubbing() { <nl> 
new file <nl> ppp TakePairWhenTransformerTest.java <nl> + package com.kickstarter.libs.rx.transformers; <nl> + import android.util.Pair; <nl> + import com.kickstarter.BuildConfig; <nl> + import com.kickstarter.KSRobolectricGradleTestRunner; <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> 
mmm DiscoveryFilterPresenter.java <nl> ppp DiscoveryFilterPresenter.java <nl> - import com.kickstarter.libs.utils.RxUtils; <nl> - final Observable<Pair<DiscoveryFilterActivity, List<Category>>> viewAndCategories = <nl> - RxUtils.combineLatestPair(viewSubject, categories); <nl> + final Observable<Pair<DiscoveryFilterActivity, List<Category>>> viewAndCategories = viewSubject <nl> 
new file <nl> ppp InternalReleaseApplicationModule.java <nl> + package com.kickstarter; <nl> + import com.kickstarter.libs.BuildCheck; <nl> + import dagger.Module; <nl> + import dagger.Provides; <nl> + @Module(includes = ApplicationModule.class) <nl> + public class InternalReleaseApplicationModule { <nl> + @Provides <nl> 
mmm CommentsViewModelInputs.java <nl> ppp CommentsViewModelInputs.java <nl> - public interface CommentFeedViewModelInputs { <nl> + public interface CommentsViewModelInputs { <nl> - void commentBodyInput(String __); <nl> + void commentBodyChanged(String __); <nl> - Observable<CommentFeedData> commentFeedData(); <nl> 
mmm ViewPledgeActivity.java <nl> ppp ViewPledgeActivity.java <nl> + @Override <nl> mmm FacebookConfirmationActivity.java <nl> ppp FacebookConfirmationActivity.java <nl> + @Override <nl> mmm CheckoutActivity.java <nl> ppp CheckoutActivity.java <nl> + @Override <nl> mmm SignupActivity.java <nl> ppp SignupActivity.java <nl> 
mmm TwoFactorActivity.java <nl> ppp TwoFactorActivity.java <nl> + presenter.inputs.email(getIntent().getExtras().getString(getString(R.string.intent_email))); <nl> + presenter.inputs.password(getIntent().getExtras().getString(getString(R.string.intent_password))); <nl> + final boolean forward = getIntent().getBooleanExtra(getString(R.string.intent_forward), false); <nl> 
mmm InternalReleaseApplicationModule.java <nl> ppp InternalReleaseApplicationModule.java <nl> + import com.kickstarter.libs.ApiEndpoint; <nl> + import com.kickstarter.libs.BuildCheck; <nl> + import com.kickstarter.ui.containers.ApplicationContainer; <nl> + import javax.inject.Singleton; <nl> + import dagger.Provides; <nl> 
mmm Font.java <nl> ppp Font.java <nl> + private Typeface ionIconsTypeface; <nl> + private Typeface tiemposTypeface; <nl> + this.ionIconsTypeface = Typeface.createFromAsset(assetManager, "fonts/ionicons.ttf"); <nl> + this.tiemposTypeface = Typeface.createFromAsset(assetManager, "fonts/tiempos-regular.otf"); <nl> 
mmm ApplicationModule.java <nl> ppp ApplicationModule.java <nl> - import com.kickstarter.services.ApiService; <nl> - import com.kickstarter.services.WebService; <nl> - import com.kickstarter.services.interceptors.ApiRequestInterceptor; <nl> - import com.kickstarter.services.interceptors.KSRequestInterceptor; <nl> 
mmm KickstarterWebViewClient.java <nl> ppp KickstarterWebViewClient.java <nl> + import android.content.Context; <nl> - import android.webkit.WebResourceRequest; <nl> + import com.kickstarter.KsrApplication; <nl> - import org.apache.http.Header; <nl> - import org.apache.http.HeaderIterator; <nl> - import org.apache.http.HttpResponse; <nl> 
mmm StatusBarUtils.java <nl> ppp StatusBarUtils.java <nl> - import android.annotation.TargetApi; <nl> - @SuppressWarnings("InlinedApi") <nl> - @TargetApi(21) <nl> - @SuppressWarnings("InlinedApi") <nl> mmm IconTextView.java <nl> ppp IconTextView.java <nl> - import android.annotation.TargetApi; <nl> - @TargetApi(21) <nl> 
mmm ApplicationGraph.java <nl> ppp ApplicationGraph.java <nl> - void inject(CurrentUser current_user); <nl> + void inject(CurrentUser currentUser); <nl> deleted file <nl> mmm CommentsPresenter.java <nl> - package com.kickstarter.presenters; <nl> - import com.kickstarter.libs.Presenter; <nl> - import com.kickstarter.ui.activities.CommentsActivity; <nl> 
mmm StringUtils.java <nl> ppp StringUtils.java <nl> - public static String displayFlooredPercentage(final float percentage) { <nl> - return String.format("%.0f%%", Math.floor(percentage)); <nl> - } <nl> mmm I18nUtils.java <nl> ppp I18nUtils.java <nl> - public static boolean isCountryGermany(final @NonNull String country) { <nl> 
mmm TwoFactorPresenter.java <nl> ppp TwoFactorPresenter.java <nl> - .subscribe(formIsValid)); <nl> + .subscribe(this.formIsValid::onNext)); <nl> mmm ApiClient.java <nl> ppp ApiClient.java <nl> + public Observable<DiscoverEnvelope> fetchBackedProjects(final int count) { <nl> + return service.fetchBackedProjects(count); <nl> 
mmm CommentFeedActivity.java <nl> ppp CommentFeedActivity.java <nl> + import com.kickstarter.libs.utils.ViewUtils; <nl> - .subscribe(this::displayToast) <nl> + .subscribe(message -> ViewUtils.showToast(this, message)) <nl> mmm ApiService.java <nl> ppp ApiService.java <nl> - import com.kickstarter.services.apirequests.RegisterWithFacebookBody; <nl> 
mmm SmartDexingStep.java <nl> ppp SmartDexingStep.java <nl> - Path store = entry.getKey(); <nl> + Path secondaryCompressedBlobOutput = entry.getKey(); <nl> - Path secondaryBlobOutput = store.getParent().resolve("uncompressed.dex.blob"); <nl> - Path secondaryCompressedBlobOutput = store; <nl> + Path secondaryBlobOutput = <nl> 
mmm CxxGenruleDescription.java <nl> ppp CxxGenruleDescription.java <nl> - import com.facebook.buck.cxx.toolchain.CxxPlatforms; <nl> - targetGraphOnlyDepsBuilder.addAll(CxxPlatforms.getParseTimeDeps(cxxPlatform)); <nl> + targetGraphOnlyDepsBuilder.addAll(cxxPlatform.getParseTimeDeps()); <nl> mmm PrebuiltCxxLibraryDescription.java <nl> 
mmm StringRuleKeyHasher.java <nl> ppp StringRuleKeyHasher.java <nl> - parts.add(String.format("null()")); <nl> + parts.add("null()"); <nl> mmm RuleKeyFieldLoader.java <nl> ppp RuleKeyFieldLoader.java <nl> - public void setFields(RuleKeyObjectSink builder, BuildRule buildRule, RuleKeyType ruleKeyType) { <nl> 
mmm AndroidPrebuiltAar.java <nl> ppp AndroidPrebuiltAar.java <nl> - import com.google.common.base.Preconditions; <nl> - this.androidResource = Preconditions.checkNotNull(androidResource); <nl> + this.androidResource = androidResource; <nl> mmm AndroidManifest.java <nl> ppp AndroidManifest.java <nl> - import com.google.common.base.Preconditions; <nl> 
mmm AndroidTransitiveDependencyGraphTest.java <nl> ppp AndroidTransitiveDependencyGraphTest.java <nl> - import com.facebook.buck.rules.DependencyGraph; <nl> - import com.facebook.buck.testutil.RuleMap; <nl> - DependencyGraph graph = RuleMap.createGraphFromBuildRules(ruleResolver); <nl> - AndroidTransitiveDependencies transitiveDeps = binaryRule.findTransitiveDependencies(graph); <nl> 
mmm AbstractCommandRunner.java <nl> ppp AbstractCommandRunner.java <nl> - private final ImmutableMap<String, String> environment; <nl> + protected final ImmutableMap<String, String> environment; <nl> mmm JavaSymbolFinder.java <nl> ppp JavaSymbolFinder.java <nl> + import com.google.common.collect.ImmutableMap; <nl> 
mmm TestRunning.java <nl> ppp TestRunning.java <nl> + import com.facebook.buck.rules.BuildContext; <nl> - SourcePathResolver sourcePathResolver, <nl> + BuildContext buildContext, <nl> - test.runTests(executionContext, options, sourcePathResolver, testReportingCallback); <nl> + test.runTests(executionContext, options, buildContext, testReportingCallback); <nl> 
mmm MultiThreadedBuildRuleResolver.java <nl> ppp MultiThreadedBuildRuleResolver.java <nl> - import com.facebook.buck.event.BuckEventBus; <nl> - @Nullable private final BuckEventBus eventBus; <nl> - CellProvider cellProvider, <nl> - BuckEventBus eventBus) { <nl> + CellProvider cellProvider) { <nl> - this.eventBus = eventBus; <nl> 
mmm GenruleIntegrationTest.java <nl> ppp GenruleIntegrationTest.java <nl> + @Test <nl> + public void genruleTargetInSources() throws IOException { <nl> + ProjectWorkspace workspace = <nl> + TestDataHelper.createProjectWorkspaceForScenario( <nl> + this, "genrule_with_targets_in_sources", temporaryFolder); <nl> 
mmm DistBuildFileHashesIntegrationTest.java <nl> ppp DistBuildFileHashesIntegrationTest.java <nl> - import com.facebook.buck.config.ActionGraphParallelizationMode; <nl> + import com.facebook.buck.core.model.actiongraph.computation.ActionGraphParallelizationMode; <nl> mmm DistBuildFactory.java <nl> ppp DistBuildFactory.java <nl> 
mmm ParserIntegrationTest.java <nl> ppp ParserIntegrationTest.java <nl> + import com.facebook.buck.testutil.integration.DebuggableTemporaryFolder; <nl> - import org.junit.rules.TemporaryFolder; <nl> - public TemporaryFolder temporaryFolder = new TemporaryFolder(); <nl> + public DebuggableTemporaryFolder temporaryFolder = new DebuggableTemporaryFolder(); <nl> 
mmm BuildPhaseTest.java <nl> ppp BuildPhaseTest.java <nl> + import com.facebook.buck.core.rulekey.calculator.ParallelRuleKeyCalculator; <nl> - import com.facebook.buck.rules.ParallelRuleKeyCalculator; <nl> mmm BuildCommand.java <nl> ppp BuildCommand.java <nl> + import com.facebook.buck.core.rulekey.calculator.ParallelRuleKeyCalculator; <nl> 
mmm BuckInfo.java <nl> ppp BuckInfo.java <nl> + ruleName_ = ""; <nl> + case 18: { <nl> + java.lang.String s = input.readStringRequireUtf8(); <nl> + ruleName_ = s; <nl> + break; <nl> + } <nl> + public static final int RULE_NAME_FIELD_NUMBER = 2; <nl> + private volatile java.lang.Object ruleName_; <nl> + public java.lang.String getRuleName() { <nl> 
mmm TestCommand.java <nl> ppp TestCommand.java <nl> - import com.facebook.buck.core.model.actiongraph.computation.ActionGraphConfig; <nl> - .getActionGraph( <nl> - targetGraphAndBuildTargets.getTargetGraph(), <nl> - params.getBuckConfig().getView(ActionGraphConfig.class)); <nl> + .getActionGraph(targetGraphAndBuildTargets.getTargetGraph()); <nl> 
mmm AppleBundleDestination.java <nl> ppp AppleBundleDestination.java <nl> + import com.facebook.buck.util.immutables.BuckStyleImmutable; <nl> - import java.util.Objects; <nl> + import org.immutables.value.Value; <nl> - public class AppleBundleDestination { <nl> + @Value.Immutable <nl> + @BuckStyleImmutable <nl> 
mmm Cell.java <nl> ppp Cell.java <nl> - buildTarget.getBasePathWithSlash() + new ParserConfig(buckConfig).getBuildFileName(), <nl> + buildTarget.getBasePath().resolve(new ParserConfig(buckConfig).getBuildFileName()), <nl> mmm ProjectCommand.java <nl> ppp ProjectCommand.java <nl> - return input.getBuildTarget() != null && <nl> 
mmm SearchHelper.java <nl> ppp SearchHelper.java <nl> - public long totalHits; <nl> + public int totalHits; <nl> + setLowercaseExpandedTerms(false); <nl> - private static final int MAX_RESULTS=40; <nl> - public static String createSlider(int offset, int limit, long size, HttpServletRequest request) { <nl> + public static String createSlider(int offset, int limit, int size, HttpServletRequest request) { <nl> 
mmm CustomPhraseQuery.java <nl> ppp CustomPhraseQuery.java <nl> - public int offset; <nl> + private int offset; <nl> + public int getOffset() { <nl> + return offset; <nl> + } <nl> + public void setOffset(int offset) { <nl> + this.offset = offset; <nl> + } <nl> mmm Indexer.java <nl> ppp Indexer.java <nl> - public static String PATH_SEPARATOR_STRING = Character.toString(PATH_SEPARATOR); <nl> 
new file <nl> ppp SimpleFileLogFormatter.java <nl> + package org.opensolaris.opengrok; <nl> + import java.util.Date; <nl> + import java.util.logging.Formatter; <nl> + import java.util.logging.LogRecord; <nl> + final public class SimpleFileLogFormatter extends Formatter { <nl> + private final java.text.SimpleDateFormat formatter = <nl> 
deleted file <nl> mmm ExactPhraseScorer.java <nl> - package org.opengrok.suggest.query.customized; <nl> - import org.apache.lucene.index.PostingsEnum; <nl> - import org.apache.lucene.search.ConjunctionDISI; <nl> - import org.apache.lucene.search.DocIdSetIterator; <nl> - import org.apache.lucene.search.Scorer; <nl> 
new file <nl> ppp TypeScriptAnalyzer.java <nl> + package org.opengrok.indexer.analysis.typescript; <nl> + import org.opengrok.indexer.analysis.AbstractAnalyzer; <nl> + import org.opengrok.indexer.analysis.AnalyzerFactory; <nl> + import org.opengrok.indexer.analysis.JFlexTokenizer; <nl> + import org.opengrok.indexer.analysis.JFlexXref; <nl> 
mmm ClearCaseRepository.java <nl> ppp ClearCaseRepository.java <nl> - public class ClearCaseRepository extends ExternalRepository { <nl> + public class ClearCaseRepository extends Repository { <nl> mmm TeamwareRepository.java <nl> ppp TeamwareRepository.java <nl> - public class TeamwareRepository extends ExternalRepository { <nl> 
mmm SearchHelperTest.java <nl> ppp SearchHelperTest.java <nl> - Long.toString(searchHelper.totalHits) + " hits"); <nl> + Integer.toString(searchHelper.totalHits) + " hits"); <nl> - Long.toString(searchHelper.totalHits) + " hits"); <nl> + Integer.toString(searchHelper.totalHits) + " hits"); <nl> - Long.toString(searchHelper.totalHits) + " hits"); <nl> 
mmm LineMatcher.java <nl> ppp LineMatcher.java <nl> - public static String tagBegin, tagEnd; <nl> mmm PageConfig.java <nl> ppp PageConfig.java <nl> - queryBuilder = new QueryBuilder().setFreetext(req.getParameter(QueryBuilder.FULL)) <nl> - .setDefs(req.getParameter(QueryBuilder.DEFS)) <nl> - .setRefs(req.getParameter(QueryBuilder.REFS)) <nl> 
mmm Indexer.java <nl> ppp Indexer.java <nl> + import java.util.Set; <nl> + import java.util.TreeSet; <nl> - String defaultProject = null; <nl> + Set<String> defaultProjects = new TreeSet<>(); <nl> - defaultProject = getopt.getOptarg(); <nl> + defaultProjects.add(getopt.getOptarg()); <nl> - defaultProject, configFilename, refreshHistory, <nl> 
mmm OpenGrokTrayApp.java <nl> ppp OpenGrokTrayApp.java <nl> + @SuppressWarnings("PMD.SystemPrintln") <nl> - System.err.println("TrayIcon could not be added."); <nl> + log.log(Level.WARNING, "TrayIcon could not be added.", e); <nl> - System.err.println("System Tray is NOT supported"); <nl> + log.severe("System Tray is NOT supported"); <nl> 
new file <nl> ppp AuthorizationPlugin.java <nl> + package org.opensolaris.opengrok.authorization; <nl> + import java.util.Map; <nl> + import java.util.TreeMap; <nl> + import java.util.function.Predicate; <nl> + import java.util.logging.Level; <nl> + import java.util.logging.Logger; <nl> + import javax.servlet.http.HttpServletRequest; <nl> 
mmm JarAnalyzerFactory.java <nl> ppp JarAnalyzerFactory.java <nl> - import org.opensolaris.opengrok.analysis.archive.ZipMatcherBase; <nl> - private static final Matcher MATCHER = new ZipMatcherBase() { <nl> - @Override <nl> - public String description() { <nl> - return "PK\\{3}\\{4} magic signature with 0xCAFE Extra Field ID"; <nl> 
mmm ChronicleMapConfiguration.java <nl> ppp ChronicleMapConfiguration.java <nl> - try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(getFile(dir, field)))) { <nl> + try (FileOutputStream fos = new FileOutputStream(getFile(dir, field)); <nl> + ObjectOutputStream oos = new ObjectOutputStream(fos)) { <nl> 
mmm CustomQueryParser.java <nl> ppp CustomQueryParser.java <nl> - setLowercaseExpandedTerms(false); <nl> + private static final int MAX_RESULTS=40; <nl> - private static Map<String, ArrayList<Document>> createMap(IndexSearcher searcher, ScoreDoc[] hits, int startIdx, int stopIdx) <nl> + private static Map<String, ArrayList<Document>> createMap(IndexSearcher searcher, ScoreDoc[] hits, int startIdx, long stopIdx) <nl> 
mmm BroadcastRebroadcastedBroadcastListFragment.java <nl> ppp BroadcastRebroadcastedBroadcastListFragment.java <nl> - @Subscribe(threadMode = ThreadMode.MAIN) <nl> + @Subscribe(threadMode = ThreadMode.POSTING) <nl> mmm ConfirmUnrebroadcastBroadcastDialogFragment.java <nl> ppp ConfirmUnrebroadcastBroadcastDialogFragment.java <nl> 
mmm Comment.java <nl> ppp Comment.java <nl> - return author.isOneself(context); <nl> + return author.isOneself(); <nl> mmm FollowUserManager.java <nl> ppp FollowUserManager.java <nl> - if (userInfo.isOneself(context)) { <nl> + if (userInfo.isOneself()) { <nl> mmm SettingsEntries.java <nl> ppp SettingsEntries.java <nl> 
new file <nl> ppp UploadImageLayout.java <nl> + package me.zhanghai.android.douya.ui; <nl> + import android.content.Context; <nl> + import android.net.Uri; <nl> + import android.os.Build; <nl> + import android.support.annotation.RequiresApi; <nl> + import android.text.TextUtils; <nl> + import android.util.AttributeSet; <nl> 
mmm ProfileReviewsLayout.java <nl> ppp ProfileReviewsLayout.java <nl> - import me.zhanghai.android.douya.network.api.info.frodo.Review; <nl> + import me.zhanghai.android.douya.network.api.info.frodo.SimpleReview; <nl> - public void bind(final User user, List<Review> reviewList) { <nl> + public void bind(final User user, List<SimpleReview> reviewList) { <nl> 
mmm Movie.java <nl> ppp Movie.java <nl> - import java.util.List; <nl> - public List<String> alternativeNames = new ArrayList<>(); <nl> + public ArrayList<String> alternativeNames = new ArrayList<>(); <nl> - public List<String> countries = new ArrayList<>(); <nl> + public ArrayList<String> countries = new ArrayList<>(); <nl> 
mmm ApkDecoder.java <nl> ppp ApkDecoder.java <nl> - import brut.directory.ZipExtFile; <nl> - import org.apache.commons.compress.archivers.zip.ZipArchiveEntry; <nl> + import java.util.jar.JarEntry; <nl> + import java.util.jar.JarFile; <nl> - 	public File getAaptBinaryFile() throws AndrolibException { <nl> - 	  try { <nl> 
new file <nl> ppp ExceptionHandlerRewriter.java <nl> + package org.jf.dexlib2.rewriter; <nl> + import org.jf.dexlib2.base.BaseExceptionHandler; <nl> + import org.jf.dexlib2.iface.ExceptionHandler; <nl> + import javax.annotation.Nonnull; <nl> + import javax.annotation.Nullable; <nl> + public class ExceptionHandlerRewriter implements Rewriter<ExceptionHandler> { <nl> 
mmm MoviesApp.java <nl> ppp MoviesApp.java <nl> mmm BasicMoviesUsecasesComponent.java <nl> ppp BasicMoviesUsecasesComponent.java <nl> mmm DbConstants.java <nl> ppp DbConstants.java <nl> 
mmm DbViewerFragment.java <nl> ppp DbViewerFragment.java <nl> - @XmlLayout(R.layout.db_view) <nl> + @XmlLayout(R.layout.fragment_db_viewer) <nl> mmm AIMSICDDbAdapter.java <nl> ppp AIMSICDDbAdapter.java <nl> - String TAG = "AIMSICD"; <nl> mmm PrefFragment.java <nl> ppp PrefFragment.java <nl> + import android.content.Context; <nl> 
mmm DetectionStringAdapter.java <nl> ppp DetectionStringAdapter.java <nl> - package com.secupwn.aimsicd.smsdetection; <nl> + package com.secupwn.aimsicd.data.adapter; <nl> + import android.content.Context; <nl> - import com.secupwn.aimsicd.adapters.BaseInflaterAdapter; <nl> - import com.secupwn.aimsicd.adapters.IAdapterViewInflater; <nl> 
mmm PreparedPutObject.java <nl> ppp PreparedPutObject.java <nl> - throw new StorIOException(exception); <nl> + throw new StorIOException("Error has occurred during Put operation. object = " + object, exception); <nl> mmm PreparedGetNumberOfResults.java <nl> ppp PreparedGetNumberOfResults.java <nl> - throw new StorIOException(exception); <nl> 
deleted file <nl> mmm Insert.java <nl> - package com.pushtorefresh.storio.contentprovider.query; <nl> - public class Insert { <nl> - } <nl> mmm InsertQuery.java <nl> + @Override public String toString() { <nl> + return "InsertQuery{" + <nl> + "table='" + table + '\'' + <nl> + ", nullColumnHack='" + nullColumnHack + '\'' + <nl> 
mmm BaseSubscriptionTest.java <nl> ppp BaseSubscriptionTest.java <nl> + import java.util.concurrent.ConcurrentLinkedQueue; <nl> + @NonNull <nl> + @NonNull <nl> - this.expected = expected; <nl> + this.expected = new ConcurrentLinkedQueue<T>(expected); <nl> new file <nl> ppp ChangesBus.java <nl> + package com.pushtorefresh.storio.internal; <nl> 
mmm PreparedPutObjectsTest.java <nl> ppp PreparedPutObjectsTest.java <nl> - .objects(putStub.testItems) <nl> + .objects(TestItem.class, putStub.testItems) <nl> - .objects(putStub.testItems) <nl> + .objects(TestItem.class, putStub.testItems) <nl> mmm SQLiteTypeDefaults.java <nl> ppp SQLiteTypeDefaults.java <nl> 
mmm StorIOContentProvider.java <nl> ppp StorIOContentProvider.java <nl> - @NonNull public PreparedGet.Builder get() { <nl> + @NonNull <nl> + public PreparedGet.Builder get() { <nl> - @NonNull public PreparedPut.Builder put() { <nl> + @NonNull <nl> + public PreparedPut.Builder put() { <nl> - @NonNull public PreparedDelete.Builder delete() { <nl> 
mmm PutOperationDesignTest.java <nl> ppp PutOperationDesignTest.java <nl> - import com.pushtorefresh.storio.sqlitedb.operation.put.PutCollectionResult; <nl> + import com.pushtorefresh.storio.sqlitedb.operation.put.PutResults; <nl> - PutCollectionResult<User> putResult = storIOSQLiteDb() <nl> + PutResults<User> putResults = storIOSQLiteDb() <nl> 
mmm DeleteTest.java <nl> ppp DeleteTest.java <nl> - import com.pushtorefresh.storio.db.operation.delete.DeleteCollectionOfObjectsResult; <nl> - import com.pushtorefresh.storio.db.operation.put.PutCollectionResult; <nl> - import com.pushtorefresh.storio.db.query.Query; <nl> - import java.util.ArrayList; <nl> 
new file <nl> ppp LoginRedirectMvcConfig.java <nl> + package com.baeldung.loginredirect; <nl> + import org.springframework.context.annotation.Configuration; <nl> + import org.springframework.web.servlet.config.annotation.InterceptorRegistry; <nl> + import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; <nl> 
deleted file <nl> mmm IntersectionUnitTest.java <nl> - package com.baeldung.array.operations; <nl> - import org.junit.jupiter.api.Test; <nl> - import static com.baeldung.array.operations.ArrayOperations.intersectionMultiSet; <nl> - import static com.baeldung.array.operations.ArrayOperations.intersectionSet; <nl> 
new file <nl> ppp MyDtoGetter.java <nl> + package org.baeldung.jackson.field; <nl> + public class MyDtoGetter { <nl> + private String stringValue; <nl> + private int intValue; <nl> + public MyDtoGetter() { <nl> + super(); <nl> + } <nl> + public MyDtoGetter(final String stringValue, final int intValue, final boolean booleanValue) { <nl> 
deleted file <nl> mmm HelloDynamicBinding.java <nl> - package com.baeldung.jersey.server.config; <nl> - import javax.ws.rs.container.DynamicFeature; <nl> - import javax.ws.rs.container.ResourceInfo; <nl> - import javax.ws.rs.core.FeatureContext; <nl> - import javax.ws.rs.ext.Provider; <nl> - import org.slf4j.Logger; <nl> 
new file <nl> ppp Task.java <nl> + package com.baeldung.architecture.domain.task; <nl> + import java.time.Instant; <nl> + import javax.persistence.Entity; <nl> + import javax.persistence.GeneratedValue; <nl> + import javax.persistence.GenerationType; <nl> + import javax.persistence.Id; <nl> + @Entity <nl> + public class Task { <nl> 
mmm EmployeeDatabaseSetupExtension.java <nl> ppp EmployeeDatabaseSetupExtension.java <nl> - private Connection con = JdbcConnectionUtil.getConnection(); <nl> - private EmployeeJdbcDao employeeDao = new EmployeeJdbcDao(con); <nl> + private Connection con; <nl> + private EmployeeJdbcDao employeeDao; <nl> + public EmployeeDatabaseSetupExtension() { <nl> 
mmm TaggedTest.java <nl> ppp TaggedTest.java <nl> - import static org.junit.jupiter.api.Assertions.assertEquals; <nl> + import org.junit.gen5.api.Tag; <nl> + import org.junit.gen5.api.Test; <nl> - import org.junit.jupiter.api.Tag; <nl> - import org.junit.jupiter.api.Test; <nl> + import static org.junit.gen5.api.Assertions.assertEquals; <nl> 
deleted file <nl> mmm Item.java <nl> - package com.baeldung.multiplecachemanager.entity; <nl> - public class Item { <nl> - private int itemId; <nl> - private String itemDesc; <nl> - private double itemPrice; <nl> - public int getItemId() { <nl> - return itemId; <nl> - } <nl> - public void setItemId(int itemId) { <nl> 
deleted file <nl> mmm TellerService.java <nl> - package com.baeldung.jtademo.services; <nl> - import org.springframework.beans.factory.annotation.Autowired; <nl> - import org.springframework.stereotype.Service; <nl> - import javax.transaction.Transactional; <nl> - import java.math.BigDecimal; <nl> - @Service <nl> 
deleted file <nl> mmm JdbcMetadataApplication.java <nl> - package com.baeldung.jdbcmetadata; <nl> - import org.apache.log4j.Logger; <nl> - import java.sql.SQLException; <nl> - public class JdbcMetadataApplication { <nl> - private static final Logger LOG = Logger.getLogger(JdbcMetadataApplication.class); <nl> 
mmm UseLocalDateTime.java <nl> ppp UseLocalDateTime.java <nl> - package com.baeldung.datetime; <nl> + package com.baeldung.stringconversions; <nl> mmm TitleCaseConverterUnitTest.java <nl> ppp TitleCaseConverterUnitTest.java <nl> - package com.baeldung.string; <nl> + package com.baeldung.titlecase; <nl> mmm ConvertStringToListUnitTest.java <nl> 
mmm Role.java <nl> ppp Role.java <nl> - import org.neo4j.ogm.annotation.GraphId; <nl> + import org.neo4j.ogm.annotation.GeneratedValue; <nl> + import org.neo4j.ogm.annotation.Id; <nl> - @GraphId <nl> - Long id; <nl> + @Id @GeneratedValue <nl> + 	Long id; <nl> mmm Neo4jOgmLiveTest.java <nl> ppp Neo4jOgmLiveTest.java <nl> 
mmm Olingo2SampleApplicationUnitTest.java <nl> ppp Olingo2SampleApplicationUnitTest.java <nl> - package org.baeldung.examples.olingo2; <nl> + package com.baeldung.examples.olingo2; <nl> mmm CarsODataJPAServiceFactory.java <nl> ppp CarsODataJPAServiceFactory.java <nl> - package org.baeldung.examples.olingo2; <nl> 
new file <nl> ppp Connection.java <nl> + package com.baeldung.boot.configurationproperties; <nl> + public class Connection { <nl> + 	private String authorization; <nl> + 	private int timeout; <nl> + 	 <nl> + 	public String getAuthorization() { <nl> + 		return authorization; <nl> + 	} <nl> + 	 <nl> + 	public void setAuthorization(String authorization) { <nl> 
new file <nl> ppp ResourceServerApplication.java <nl> + package org.baeldung.config; <nl> + import org.springframework.boot.SpringApplication; <nl> + import org.springframework.boot.autoconfigure.SpringBootApplication; <nl> + import org.springframework.boot.context.web.SpringBootServletInitializer; <nl> + @SpringBootApplication <nl> 
mmm WaitingForThreadsToFinishTest.java <nl> ppp WaitingForThreadsToFinishTest.java <nl> - import static org.junit.Assert.fail; <nl> - WORKER_THREAD_POOL.submit(new Runnable() { <nl> - @Override <nl> - public void run() { <nl> - try { <nl> - Thread.sleep(1000); <nl> - latch.countDown(); <nl> - } catch (InterruptedException e) { <nl> 
new file <nl> ppp Person2.java <nl> + package com.baeldung.dozer; <nl> + public class Person2 { <nl> + 	private String name; <nl> + 	private String nickname; <nl> + 	private int age; <nl> + 	public Person2() { <nl> + 	} <nl> + 	public Person2(String name, String nickname, int age) { <nl> + 		super(); <nl> + 		this.name = name; <nl> 
mmm SampleMessageConverter.java <nl> ppp SampleMessageConverter.java <nl> - Employee person = (Employee) object; <nl> + Employee employee = (Employee) object; <nl> - message.setString("name", person.getName()); <nl> - message.setInt("age", person.getAge()); <nl> + message.setString("name", employee.getName()); <nl> 
deleted file <nl> mmm Application.java <nl> - package com.baeldung.springsoap; <nl> - import org.springframework.boot.SpringApplication; <nl> - import org.springframework.boot.autoconfigure.SpringBootApplication; <nl> - @SpringBootApplication <nl> - public class Application { <nl> - public static void main(String[] args) { <nl> 
new file <nl> ppp User.java <nl> + package com.baeldung.hibernate.onetoone.sharedkeybased; <nl> + import javax.persistence.CascadeType; <nl> + import javax.persistence.Column; <nl> + import javax.persistence.Entity; <nl> + import javax.persistence.GeneratedValue; <nl> + import javax.persistence.GenerationType; <nl> 
deleted file <nl> mmm StudentMap.java <nl> - package com.baeldung.cxf.introduction; <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - import javax.xml.bind.annotation.XmlElement; <nl> - import javax.xml.bind.annotation.XmlType; <nl> - @XmlType(name = "StudentMap") <nl> - public class StudentMap { <nl> 
mmm ConsumerDebuggingApplication.java <nl> ppp ConsumerDebuggingApplication.java <nl> + http.csrf().disable(); <nl> mmm Foo.java <nl> ppp Foo.java <nl> - import org.springframework.data.annotation.Id; <nl> - @Id <nl> 
deleted file <nl> mmm SpringProblemApplication.java <nl> - package com.baeldung.boot.problem; <nl> - import org.springframework.boot.SpringApplication; <nl> - import org.springframework.boot.autoconfigure.EnableAutoConfiguration; <nl> - import org.springframework.boot.autoconfigure.SpringBootApplication; <nl> 
mmm LogPrinter.java <nl> ppp LogPrinter.java <nl> - package com.baeldung.log4j2.logtest; <nl> + package com.baeldung.logging.log4j2.simpleconfigurator; <nl> - } <nl> + } <nl> mmm AppLiveTest.java <nl> ppp AppLiveTest.java <nl> - @SpringBootTest <nl> + @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK) <nl> 
new file <nl> ppp Bar.java <nl> + package org.baeldung.web.dto; <nl> + import java.io.Serializable; <nl> + import javax.xml.bind.annotation.XmlRootElement; <nl> + @XmlRootElement <nl> + public class Bar implements Serializable { <nl> + public Bar() { <nl> + super(); <nl> + } <nl> + } <nl> new file <nl> ppp MySavedRequestAwareAuthenticationSuccessHandler.java <nl> 
mmm Foo.java <nl> ppp Foo.java <nl> - package com.baeldung.autowire.sample; <nl> + package org.baeldung.sample; <nl> mmm FooServiceIntegrationTest.java <nl> ppp FooServiceIntegrationTest.java <nl> - package com.baeldung.autowire.sample; <nl> + package org.baeldung.sample; <nl> mmm App.java <nl> ppp App.java <nl> 
deleted file <nl> mmm LuxuryCars.java <nl> - package com.baeldung.designpatterns.adapter; <nl> - public interface LuxuryCars { <nl> - public double speedInMPH(); <nl> - }diff --git a/data/zhouhj/data2/tutorials_git/6269/old/DecoratorPatternIntegrationTest.java b/data/zhouhj/data2/tutorials_git/6269/new/DecoratorPatternIntegrationTest.java <nl> 
deleted file <nl> mmm ToggleApplication.java <nl> - package com.baeldung.toggle; <nl> - import javax.annotation.security.RolesAllowed; <nl> - import org.springframework.boot.SpringApplication; <nl> - import org.springframework.boot.autoconfigure.SpringBootApplication; <nl> - @SpringBootApplication <nl> - public class ToggleApplication { <nl> 
new file <nl> ppp FruitPopulatorTest.java <nl> + package com.baeldung.repository; <nl> + import static org.junit.Assert.assertEquals; <nl> + import java.util.List; <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> + import org.springframework.beans.factory.annotation.Autowired; <nl> 
mmm RestClientLiveManualTest.java <nl> ppp RestClientLiveManualTest.java <nl> - import javax.net.ssl.SSLException; <nl> - import javax.net.ssl.SSLPeerUnverifiedException; <nl> + import javax.net.ssl.SSLContext; <nl> + import org.apache.http.config.Registry; <nl> + import org.apache.http.config.RegistryBuilder; <nl> 
deleted file <nl> mmm ResponseClientFilter.java <nl> - package com.baeldung.jersey.client.filter; <nl> - import java.io.IOException; <nl> - import javax.ws.rs.client.ClientRequestContext; <nl> - import javax.ws.rs.client.ClientResponseContext; <nl> - import javax.ws.rs.client.ClientResponseFilter; <nl> - import javax.ws.rs.ext.Provider; <nl> 
mmm ConvertIteratorToListServiceUnitTest.java <nl> ppp ConvertIteratorToListServiceUnitTest.java <nl> - package com.baeldung.convert.iteratortolist; <nl> + package com.baeldung.convertiteratortolist; <nl> mmm UserRepository.java <nl> ppp UserRepository.java <nl> - import org.baeldung.caching.model.User; <nl> 
mmm Config.java <nl> ppp Config.java <nl> - package com.baeldung; <nl> + package com.baeldung.reactorbus; <nl> - Environment env() { <nl> + public Environment env() { <nl> - EventBus createEventBus(Environment env) { <nl> + public EventBus createEventBus(Environment env) { <nl> mmm NotificationService.java <nl> 
deleted file <nl> mmm RandomErrorServlet.java <nl> - package com.baeldung.servlets; <nl> - import javax.servlet.annotation.*; <nl> - import javax.servlet.http.*; <nl> - @WebServlet(urlPatterns = "/randomError") <nl> - public class RandomErrorServlet extends HttpServlet { <nl> - @Override <nl> - protected void doGet(HttpServletRequest req, final HttpServletResponse resp) { <nl> 
deleted file <nl> mmm TestClassB.java <nl> - package com.baeldung.spring_groovy_config; <nl> - import org.springframework.stereotype.Component; <nl> - @Component <nl> - public class TestClassB { <nl> - private String testStringB; <nl> - private int testIntB; <nl> - 	 <nl> - public void setTestStringB(String testStringB){ <nl> 
new file <nl> ppp TemplateTodoManager.java <nl> + package com.baeldung.jnosql.artemis; <nl> + import com.baeldung.jnosql.artemis.qualifier.Template; <nl> + import org.jnosql.artemis.document.DocumentTemplate; <nl> + import org.jnosql.diana.api.document.DocumentQuery; <nl> + import javax.enterprise.context.ApplicationScoped; <nl> 
new file <nl> ppp MapMaxUnitTest.java <nl> + package com.baeldung.map.util; <nl> + import static org.junit.Assert.assertEquals; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> + public class MapMaxUnitTest { <nl> + Map<Integer, Integer> map = null; <nl> 
new file <nl> ppp Flower.java <nl> + package com.baeldung.java.list; <nl> + public class Flower { <nl> + private String name; <nl> + private int petals; <nl> + public Flower(String name, int petals) { <nl> + this.name = name; <nl> + this.petals = petals; <nl> + } <nl> + public String getName() { <nl> + return name; <nl> 
deleted file <nl> mmm ListFiles.java <nl> - package com.baeldung.files; <nl> - import java.io.File; <nl> - import java.io.IOException; <nl> - import java.nio.file.DirectoryStream; <nl> - import java.nio.file.FileVisitResult; <nl> - import java.nio.file.Files; <nl> - import java.nio.file.Path; <nl> - import java.nio.file.Paths; <nl> 
new file <nl> ppp JerseyClient.java <nl> + package com.baeldung.jersey.client; <nl> + import javax.ws.rs.client.Client; <nl> + import javax.ws.rs.client.ClientBuilder; <nl> + import javax.ws.rs.client.Entity; <nl> + import javax.ws.rs.core.Response; <nl> + import org.glassfish.jersey.client.ClientConfig; <nl> 
deleted file <nl> mmm RequestMappingHandlerAdapterExampleController.java <nl> - package com.baeldung.spring.controller; <nl> - import org.springframework.stereotype.Controller; <nl> - import org.springframework.web.bind.annotation.RequestMapping; <nl> - import org.springframework.web.servlet.ModelAndView; <nl> 
new file <nl> ppp GitHubRxApiTest.java <nl> + package com.baeldung.retrofit.rx; <nl> + import static org.assertj.core.api.Assertions.assertThat; <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> + import com.baeldung.retrofit.models.Contributor; <nl> + import com.baeldung.retrofit.models.Repository; <nl> 
mmm SchedulerConfiguration.java <nl> ppp SchedulerConfiguration.java <nl> + import net.javacrumbs.shedlock.core.LockProvider; <nl> + import net.javacrumbs.shedlock.provider.jdbctemplate.JdbcTemplateLockProvider; <nl> + import org.springframework.context.annotation.Bean; <nl> - import net.javacrumbs.shedlock.spring.annotation.EnableSchedulerLock; <nl> 
mmm RegistrationTest.java <nl> ppp RegistrationTest.java <nl> - package baeldung.com; <nl> - import org.slf4j.Logger; <nl> - import org.slf4j.LoggerFactory; <nl> - import org.testng.annotations.Test; <nl> - public class RegistrationTest { <nl> - private static final Logger LOGGER = LoggerFactory.getLogger(RegistrationTest.class); <nl> 
mmm SeleniumWithJUnitLiveTest.java <nl> ppp SeleniumWithJUnitLiveTest.java <nl> - package com.baeldung.selenium.junit; <nl> - import static org.junit.Assert.assertEquals; <nl> - import static org.junit.Assert.assertNotNull; <nl> - import static org.junit.Assert.assertTrue; <nl> - import java.io.IOException; <nl> 
new file <nl> ppp Application.java <nl> + package com.baeldung.spring; <nl> + import org.springframework.boot.SpringApplication; <nl> + import org.springframework.boot.autoconfigure.SpringBootApplication; <nl> + @SpringBootApplication <nl> + public class Application { <nl> + public static void main(String[] args) { <nl> 
mmm PerformanceAspect.java <nl> ppp PerformanceAspect.java <nl> - public void repositoryClassMethods() {}; <nl> + public void repositoryClassMethods() {} <nl> new file <nl> ppp PublishingAspect.java <nl> + package org.baeldung.aop; <nl> + import org.aspectj.lang.JoinPoint; <nl> + import org.aspectj.lang.annotation.AfterReturning; <nl> 
deleted file <nl> mmm TomcatController.java <nl> - package com.baeldung.spring.session.tomcatex; <nl> - import org.springframework.web.bind.annotation.RequestMapping; <nl> - import org.springframework.web.bind.annotation.RestController; <nl> - @RestController <nl> - public class TomcatController { <nl> - @RequestMapping("/tomcat/admin") <nl> 
mmm MarketDataRSocketControllerLiveTest.java <nl> ppp MarketDataRSocketControllerLiveTest.java <nl> - return RSocketRequester.wrap(rSocket(), MimeTypeUtils.APPLICATION_JSON, rSocketStrategies); <nl> + return RSocketRequester.wrap(rSocket(), MimeTypeUtils.APPLICATION_JSON, MimeTypeUtils.APPLICATION_JSON, rSocketStrategies); <nl> 
mmm AdvancedTaggingIntegrationTest.java <nl> ppp AdvancedTaggingIntegrationTest.java <nl> - public void givenStudentWithKVTags_whenSave_thenGetByTagOk() { <nl> + public void givenStudentWithKVTags_whenSave_thenGetByTagOk(){ <nl> mmm ManyStudent.java <nl> ppp ManyStudent.java <nl> - @JoinTable(name = "manystudent_manytags", joinColumns = @JoinColumn(name = "manystudent_id", referencedColumnName = "id"), inverseJoinColumns = @JoinColumn(name = "manytag_id", referencedColumnName = "id")) <nl> 
new file <nl> ppp Book.java <nl> + package com.baeldung.jaxb; <nl> + import java.util.Date; <nl> + import javax.xml.bind.annotation.XmlAttribute; <nl> + import javax.xml.bind.annotation.XmlElement; <nl> + import javax.xml.bind.annotation.XmlRootElement; <nl> + import javax.xml.bind.annotation.XmlTransient; <nl> 
new file <nl> ppp Recursion.java <nl> + package com.baeldung.functional; <nl> + public class Recursion { <nl> + public static Integer headRecursion(Integer number) { <nl> + return (number == 1) ? 1 : number * headRecursion(number - 1); <nl> + } <nl> + public static Integer tailRecursion(Integer number, Integer result) { <nl> 
mmm PersonAPI.java <nl> ppp PersonAPI.java <nl> - package org.baeldung.resttemplate.web.controller; <nl> + package com.baeldung.resttemplate.web.controller; <nl> - import org.baeldung.resttemplate.web.dto.Person; <nl> - import org.baeldung.resttemplate.web.service.PersonService; <nl> + import com.baeldung.resttemplate.web.service.PersonService; <nl> 
new file <nl> ppp SecuredPageController.java <nl> + package com.baeldung.cassecuredapp.controllers; <nl> + import org.springframework.security.core.Authentication; <nl> + import org.springframework.security.core.context.SecurityContextHolder; <nl> + import org.springframework.security.core.userdetails.UserDetails; <nl> 
deleted file <nl> mmm Company.java <nl> - package com.baeldung.graph; <nl> - import org.neo4j.ogm.annotation.NodeEntity; <nl> - import org.neo4j.ogm.annotation.Relationship; <nl> - @NodeEntity <nl> - public class Company { <nl> - private Long id; <nl> - private String name; <nl> - @Relationship(type="owns") <nl> 

new file <nl> ppp JpaEntityCollectionProcessor.java <nl> + package org.baeldung.examples.olingo4.processor; <nl> + import java.io.ByteArrayInputStream; <nl> + import java.io.InputStream; <nl> + import java.lang.reflect.InvocationTargetException; <nl> + import java.net.URI; <nl> + import java.net.URISyntaxException; <nl> 

new file <nl> ppp EmployeeService.java <nl> + package com.baeldung.spring.service; <nl> + import com.baeldung.spring.domain.Employee; <nl> + import org.springframework.stereotype.Service; <nl> + import java.util.List; <nl> + @Service <nl> + public interface EmployeeService { <nl> + List<Employee> getEmployeeList(); <nl> 
mmm UserController.java <nl> ppp UserController.java <nl> + @RequestMapping(value = "/auth/") <nl> - @Autowired <nl> - private IUserDAO service; <nl> - @Autowired <nl> - private UserRepository dao; <nl> - @Autowired <nl> - private MyUserRepository myUserRepository; <nl> - public UserController() { <nl> - super(); <nl> 
new file <nl> ppp WebMVCSecurity.java <nl> + package com.baeldung.thymeleaf.config; <nl> + import org.springframework.context.annotation.Bean; <nl> + import org.springframework.context.annotation.Configuration; <nl> + import org.springframework.security.authentication.AuthenticationManager; <nl> + import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder; <nl> 
mmm APIDemoHandler.java <nl> ppp APIDemoHandler.java <nl> - 	private JSONParser parser = new JSONParser(); <nl> - 	private  static final String DYNAMODB_TABLE_NAME = System.getenv("TABLE_NAME"); <nl> + private JSONParser parser = new JSONParser(); <nl> + private  static final String DYNAMODB_TABLE_NAME = System.getenv("TABLE_NAME"); <nl> 
deleted file <nl> mmm MultiplecachemanagerApplicationTests.java <nl> - package com.baeldung.multiplecachemanager; <nl> - import org.junit.jupiter.api.Test; <nl> - import org.springframework.boot.test.context.SpringBootTest; <nl> - @SpringBootTest <nl> - class MultiplecachemanagerApplicationTests { <nl> - 	@Test <nl> 

mmm FooServicePersistenceIntegrationTest.java <nl> ppp FooServicePersistenceIntegrationTest.java <nl> - import org.baeldung.config.PersistenceJPAConfigL2Cache; <nl> - @ContextConfiguration(classes = { PersistenceJPAConfigL2Cache.class }, loader = AnnotationConfigContextLoader.class) <nl> + @ContextConfiguration(classes = { PersistenceJPAConfig.class }, loader = AnnotationConfigContextLoader.class) <nl> 
new file <nl> ppp Student.java <nl> + package com.baeldung.lombok.builder.inheritance.superbuilder; <nl> + import lombok.Getter; <nl> + import lombok.experimental.SuperBuilder; <nl> + @Getter <nl> + @SuperBuilder(toBuilder = true) <nl> + public class Student extends Child { <nl> + private final String schoolName; <nl> 
mmm RestApiLiveTest.java <nl> ppp RestApiLiveTest.java <nl> - package org.baeldung; <nl> + package com.baeldung; <nl> + import com.baeldung.BookReviewsApiApplication; <nl> - import org.baeldung.persistence.model.BookReview; <nl> + import com.baeldung.persistence.model.BookReview; <nl> mmm BooksApiIntegrationTest.java <nl> 
mmm UsePeriodUnitTest.java <nl> ppp UsePeriodUnitTest.java <nl> - UsePeriod usingPeriod = new UsePeriod(); <nl> + UsePeriod usingPeriod=new UsePeriod(); <nl> - public void givenPeriodAndLocalDate_thenCalculateModifiedDate() { <nl> + public void givenPeriodAndLocalDate_thenCalculateModifiedDate(){ <nl> - Assert.assertEquals(localDate.plusDays(1), usingPeriod.modifyDates(localDate, period)); <nl> 
deleted file <nl> mmm RxJavaFilterOperatorsTest.java <nl> - package com.baeldung.rxjava.filters; <nl> - import org.junit.Test; <nl> - import rx.Observable; <nl> - import rx.observers.TestSubscriber; <nl> - public class RxJavaFilterOperatorsTest { <nl> - @Test <nl> - public void givenRangeObservable_whenFilteringItems_thenOddItemsAreFiltered() { <nl> 
new file <nl> ppp SmurfsRepository.java <nl> + package com.baeldung.archunit.smurfs.persistence; <nl> + import java.util.Collections; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import java.util.Optional; <nl> + import java.util.TreeMap; <nl> + import com.baeldung.archunit.smurfs.persistence.domain.Smurf; <nl> 
deleted file <nl> mmm TimeoutController.java <nl> - package com.baeldung.spring.serverconfig; <nl> - import org.springframework.web.bind.annotation.GetMapping; <nl> - import org.springframework.web.bind.annotation.PathVariable; <nl> - import org.springframework.web.bind.annotation.RequestMapping; <nl> - import org.springframework.web.bind.annotation.RestController; <nl> 
deleted file <nl> mmm MethodWithAnnotationParameterWeb.java <nl> - package com.baeldung.classgraph; <nl> - public class MethodWithAnnotationParameterWeb { <nl> - @TestAnnotation("web") <nl> - public void service() { <nl> - } <nl> - } <nl> deleted file <nl> mmm ClassWithAnnotation.java <nl> - package com.baeldung.classgraph; <nl> 
new file <nl> ppp IdleConnectionMonitorThread.java <nl> + package org.baeldung.httpclient.conn; <nl> + import java.util.concurrent.TimeUnit; <nl> + import org.apache.http.conn.HttpClientConnectionManager; <nl> + import org.apache.http.impl.conn.PoolingHttpClientConnectionManager; <nl> + public class IdleConnectionMonitorThread extends Thread { <nl> 
mmm EC2MetadataIntegrationTest.java <nl> ppp EC2MetadataIntegrationTest.java <nl> - public class EC2MetadataLiveTest { <nl> + public class EC2MetadataIntegrationTest { <nl> - private static final Logger logger = LoggerFactory.getLogger(EC2MetadataLiveTest.class); <nl> + private static final Logger logger = LoggerFactory.getLogger(EC2MetadataIntegrationTest.class); <nl> 
deleted file <nl> mmm WebApplicationSecurity.java <nl> - package com.baeldung.helidon.se.security; <nl> - import io.helidon.config.Config; <nl> - import io.helidon.security.Security; <nl> - import io.helidon.security.SubjectType; <nl> - import io.helidon.security.provider.httpauth.HttpBasicAuthProvider; <nl> 
mmm UserRepository.java <nl> ppp UserRepository.java <nl> - package com.baeldung.repository; <nl> + package com.baeldung.boot.repository; <nl> - import com.baeldung.domain.User; <nl> + import com.baeldung.boot.domain.User; <nl> mmm H2TestProfileJPAConfig.java <nl> ppp H2TestProfileJPAConfig.java <nl> - em.setPackagesToScan(new String[] { "com.baeldung.domain", "com.baeldung.boot.domain" }); <nl> 
new file <nl> ppp SecuredPageController.java <nl> + package com.baeldung.cassecuredapp.controllers; <nl> + import org.springframework.security.core.Authentication; <nl> + import org.springframework.security.core.context.SecurityContextHolder; <nl> + import org.springframework.security.core.userdetails.UserDetails; <nl> 
mmm InfiniteRecursionWithTerminationConditionManualTest.java <nl> ppp InfiniteRecursionWithTerminationConditionManualTest.java <nl> - @Test(expected = StackOverflowError.class) <nl> + @Test <nl> + try { <nl> + fail(); <nl> + } catch (StackOverflowError soe) { <nl> + soe.printStackTrace(); <nl> + } <nl> deleted file <nl> 
new file <nl> ppp DemoApplication.java <nl> + package com.baeldung.systemgc; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + import java.util.Scanner; <nl> + import static java.util.UUID.randomUUID; <nl> + public class DemoApplication { <nl> + private static final Map<String, String> cache = new HashMap<String, String>(); <nl> 
mmm RestTemplateConfigurationApplication.java <nl> ppp RestTemplateConfigurationApplication.java <nl> - package org.baeldung.resttemplate.configuration; <nl> + package org.baeldung.resttemplate; <nl> mmm SpringConfig.java <nl> ppp SpringConfig.java <nl> + import org.springframework.web.client.RestTemplate; <nl> 
new file <nl> ppp UseLocalTime.java <nl> + package com.baeldung.datetime; <nl> + import java.time.LocalTime; <nl> + import java.time.temporal.ChronoUnit; <nl> + public class UseLocalTime { <nl> + public LocalTime getLocalTimeUsingFactoryOfMethod(int hour, int min, int seconds){ <nl> + LocalTime localTime = LocalTime.of(hour, min, seconds); <nl> 
mmm OrderAggregateUnitTest.java <nl> ppp OrderAggregateUnitTest.java <nl> + import com.baeldung.axon.coreapi.exceptions.UnconfirmedOrderException; <nl> - public void givenOrderPlacedEvent_whenShipOrderCommand_thenShouldThrowIllegalStateException() { <nl> + public void givenOrderPlacedEvent_whenShipOrderCommand_thenShouldThrowUnconfirmedOrderException() { <nl> 
new file <nl> ppp DbBootstrap.java <nl> + package com.baeldung.vertxspring.util; <nl> + import java.util.Random; <nl> + import java.util.UUID; <nl> + import java.util.stream.IntStream; <nl> + import org.springframework.beans.factory.annotation.Autowired; <nl> + import org.springframework.boot.CommandLineRunner; <nl> 
new file <nl> ppp MultipleCacheManagerConfig.java <nl> + package com.baeldung.multiplecachemanager.config; <nl> + import org.springframework.cache.CacheManager; <nl> + import org.springframework.cache.annotation.CachingConfigurerSupport; <nl> + import org.springframework.cache.annotation.EnableCaching; <nl> 
mmm TodoControllerWithScopedProxyTest.java <nl> ppp TodoControllerWithScopedProxyTest.java <nl> - package com.baeldung.sessionattrs; <nl> - import static org.junit.Assert.assertEquals; <nl> - import static org.junit.Assert.assertTrue; <nl> - import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get; <nl> 
mmm ApplicationIntegrationTest.java <nl> ppp ApplicationIntegrationTest.java <nl> + import org.springframework.test.annotation.DirtiesContext; <nl> + @DirtiesContext <nl> mmm SpringAmqpConfig.java <nl> ppp SpringAmqpConfig.java <nl> - SimpleMessageListenerContainer container(ConnectionFactory connectionFactory, <nl> 
mmm Post.java <nl> ppp Post.java <nl> + @Override <nl> + public String toString() { <nl> + return "Post [title=" + title + ", subreddit=" + subreddit + ", url=" + url + ", submissionDate=" + submissionDate + ", user=" + user + "]"; <nl> + } <nl> mmm RedditController.java <nl> ppp RedditController.java <nl> + import org.baeldung.reddit.util.RedditApiConstants; <nl> 
mmm ActivityComponent.java <nl> ppp ActivityComponent.java <nl> + import json.chao.com.wanandroid.ui.main.activity.SearchListActivity; <nl> + void inject(SearchListActivity searchListActivity); <nl> mmm SearchListPresenter.java <nl> ppp SearchListPresenter.java <nl> + import json.chao.com.wanandroid.core.bean.BaseResponse; <nl> 
new file <nl> ppp FilteredDataSink.java <nl> + package com.koushikdutta.async; <nl> + import java.nio.ByteBuffer; <nl> + import junit.framework.Assert; <nl> + import com.koushikdutta.async.callback.WritableCallback; <nl> + public class FilteredDataSink implements DataSink { <nl> + public FilteredDataSink(DataSink sink) { <nl> 
mmm ChannelLookupProtocol.java <nl> ppp ChannelLookupProtocol.java <nl> - 	 * @param targetChannelID <nl> - 	 *        the ID of the channel to resolve <nl> + 	 * @param sourceCannelID <nl> + 	 *        the ID of the source channel to resolve the target address for <nl> - 	ConnectionInfoLookupResponse lookupConnectionInfo(JobID jobID, ChannelID targetChannelID) throws IOException; <nl> 
mmm TempTask.java <nl> ppp TempTask.java <nl> - 			while (!this.taskCanceled && tempIterator.hasNext()) { <nl> + 			while (tempIterator.hasNext() && !this.taskCanceled) { <nl> mmm CrossTaskTest.java <nl> ppp CrossTaskTest.java <nl> - 		super.addInput(new RegularlyGeneratedInputGenerator(keyCnt1, valCnt1, false)); <nl> 
mmm JsonNode.java <nl> ppp JsonNode.java <nl> - 	public void add(final int index, final IJsonNode element) { <nl> + 	public IArrayNode add(final int index, final IJsonNode element) { <nl> + 		return this; <nl> - 	public abstract void add(final int index, final IJsonNode element); <nl> + 	public abstract IArrayNode add(final int index, final IJsonNode element); <nl> 
mmm WindowWordCountSplitter.java <nl> ppp WindowWordCountSplitter.java <nl> - 	private StreamRecord outputRecord = new StreamRecord(3); <nl> + 		StreamRecord outputRecord = new StreamRecord(3); <nl> new file <nl> ppp WindowSumMultiple.java <nl> + package eu.stratosphere.streaming.examples.window.sum; <nl> + import eu.stratosphere.api.java.tuple.Tuple2; <nl> 
deleted file <nl> mmm EnumTrianglesRDFITCase.java <nl> - package org.apache.flink.test.recordJobTests; <nl> - import org.apache.flink.api.common.Plan; <nl> - import org.apache.flink.configuration.Configuration; <nl> - import org.apache.flink.test.recordJobs.graph.EnumTrianglesRdfFoaf; <nl> - import org.apache.flink.test.util.RecordAPITestBase; <nl> 
mmm ExecutionGroupVertex.java <nl> ppp ExecutionGroupVertex.java <nl> - public class ExecutionGroupVertex { <nl> + public final class ExecutionGroupVertex { <nl> + 			@Override <nl> + 			public void run() { <nl> + 				final ExecutionStage stage = eg.getCurrentExecutionStage(); <nl> + 				synchronized (stage) { <nl> 
mmm CombiningUnilateralSortMerger.java <nl> ppp CombiningUnilateralSortMerger.java <nl> + import java.util.concurrent.BlockingQueue; <nl> - 			AbstractTask parentTask, int buffersToKeepBeforeSpilling) <nl> + 			AbstractTask parentTask) <nl> - 		return new SpillingThread(exceptionHandler, queues, memoryManager, ioManager, writeMemSize, readMemSize, <nl> 
mmm JobSubmitTest.java <nl> ppp JobSubmitTest.java <nl> - 				jmConfig, <nl> - 				jobManagerSystem, <nl> - 				JobManager.class, <nl> - 				MemoryArchivist.class)._1(); <nl> + 			jmConfig, <nl> + 			jobManagerSystem, <nl> + 			jobManagerSystem.dispatcher(), <nl> + 			JobManager.class, <nl> + 			MemoryArchivist.class)._1(); <nl> 
mmm MockInstanceManager.java <nl> ppp MockInstanceManager.java <nl> - 			new MockInstance(DEFAULT, NETWORK_TOPOLOGY), new AllocationID()); <nl> + 			new MockInstance(DEFAULT, NETWORK_TOPOLOGY), DEFAULT, new AllocationID()); <nl> mmm OutputCollectorTest.java <nl> ppp OutputCollectorTest.java <nl> + import java.io.IOException; <nl> 
new file <nl> ppp TaskTestBase.java <nl> + package eu.stratosphere.pact.runtime.test.util; <nl> + import java.io.IOException; <nl> + import java.util.Iterator; <nl> + import java.util.List; <nl> + import org.junit.After; <nl> + import org.junit.runner.RunWith; <nl> + import org.mockito.Mockito; <nl> + import org.powermock.api.mockito.PowerMockito; <nl> 
mmm ReduceOperatorBase.java <nl> ppp ReduceOperatorBase.java <nl> - 		boolean objectReuseDisabled = !executionConfig.isObjectReuseEnabled(); <nl> - 				if (objectReuseDisabled) { <nl> - 					if (existing != null) { <nl> - 						result = function.reduce(existing, serializer.copy(next)); <nl> - 					} else { <nl> 
mmm AbstractID.java <nl> ppp AbstractID.java <nl> + 	public AbstractID(AbstractID one, AbstractID two) { <nl> + 		byte[] firstBytes = one.getBytes(); <nl> + 		byte[] secondBytes = two.getBytes(); <nl> + 		for (int i = 0; i < SIZE; i++) { <nl> + 			bytes[i] = (byte) (firstBytes[i] ^ secondBytes[i]); <nl> + 		} <nl> 
new file <nl> ppp AscendingTimestampsWatermarksTest.java <nl> + package org.apache.flink.api.common.eventtime; <nl> + import org.junit.Test; <nl> + import static org.junit.Assert.assertEquals; <nl> + public class AscendingTimestampsWatermarksTest { <nl> + 	@Test <nl> + 	public void testWatermarkBeforeRecords() { <nl> 
mmm DataStream.java <nl> ppp DataStream.java <nl> + import org.apache.flink.streaming.api.windowing.assigners.SlidingProcessingTimeWindows; <nl> + import org.apache.flink.streaming.api.windowing.assigners.SlidingTimeWindows; <nl> + import org.apache.flink.streaming.api.windowing.assigners.TumblingProcessingTimeWindows; <nl> 
mmm BufferSortableGuarenteedTest.java <nl> ppp BufferSortableGuarenteedTest.java <nl> - public class TestBufferSortableGuarenteed { <nl> - 	private static final Log LOG = LogFactory.getLog(TestBufferSortableGuarenteed.class); <nl> + public class BufferSortableGuarenteedTest { <nl> + 	private static final Log LOG = LogFactory.getLog(BufferSortableGuarenteedTest.class); <nl> 
mmm YarnIntraNonHaMasterServicesTest.java <nl> ppp YarnIntraNonHaMasterServicesTest.java <nl> - 				service.confirmLeaderSessionID(uuid); <nl> + 				service.confirmLeadership(uuid, address); <nl> mmm SingleLeaderElectionService.java <nl> ppp SingleLeaderElectionService.java <nl> - 	public void confirmLeaderSessionID(UUID leaderSessionID) { <nl> 
new file <nl> ppp ComparativeExpressionParameterizedTest.java <nl> + package eu.stratosphere.sopremo.expressions; <nl> + import java.util.Arrays; <nl> + import java.util.List; <nl> + import junit.framework.Assert; <nl> + import org.codehaus.jackson.JsonNode; <nl> + import org.codehaus.jackson.node.BooleanNode; <nl> 
mmm FileBufferManager.java <nl> ppp FileBufferManager.java <nl> - public final class FileBufferManager <nl> - { <nl> + public final class FileBufferManager { <nl> - 	private static final int MIN_EXTEND_SIZE = 64 * 1024; <nl> - 	public static FileBufferManager getInstance() <nl> - 	{ <nl> + 	public static FileBufferManager getInstance() { <nl> 
mmm Environment.java <nl> ppp Environment.java <nl> + 	void registerMapper(Mapper<? extends Record, ? extends Record> mapper); <nl> mmm StreamingInputGate.java <nl> ppp StreamingInputGate.java <nl> - 		this.streamListener.recordReceived(record); <nl> + 		reportRecordReceived(record); <nl> + 	public void reportRecordReceived(final Record record) { <nl> 
mmm DynamicProcessingTimeSessionWindowsTest.java <nl> ppp DynamicProcessingTimeSessionWindowsTest.java <nl> - import static org.apache.flink.streaming.runtime.operators.windowing.StreamRecordMatchers.timeWindow; <nl> + import static org.apache.flink.streaming.util.StreamRecordMatchers.timeWindow; <nl> mmm ProcessingTimeSessionWindowsTest.java <nl> 
mmm TextInputFormat.java <nl> ppp TextInputFormat.java <nl> - 	public boolean nextPair(KeyValuePair<K, V> pair) { <nl> + 	public boolean nextPair(KeyValuePair<K, V> pair) throws IOException { <nl> - 		try { <nl> - 			byte[] line = readLine(); <nl> - 			if (line == null) { <nl> - 				end = true; <nl> - 				return false; <nl> 
new file <nl> ppp SplittingOutputFormat.java <nl> + package eu.stratosphere.pact.common.io; <nl> + import java.io.IOException; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + import eu.stratosphere.nephele.configuration.Configuration; <nl> + import eu.stratosphere.pact.common.contract.DataSinkContract; <nl> 
mmm ResourceManagerGateway.java <nl> ppp ResourceManagerGateway.java <nl> - 	Future<SlotRequestReply> requestSlot(SlotRequest slotRequest); <nl> + 	Future<SlotRequestReply> requestSlot( <nl> + 		UUID jobMasterLeaderID, <nl> + 		UUID resourceManagerLeaderID, <nl> + 		SlotRequest slotRequest, <nl> + 		@RpcTimeout Time timeout); <nl> 
mmm HardPlansCompilationTest.java <nl> ppp HardPlansCompilationTest.java <nl> - import eu.stratosphere.pact.common.io.TextInputFormat; <nl> + import eu.stratosphere.pact.common.io.statistics.FileBaseStatistics; <nl> - 			dataStats.cacheBaseStatistics(new TextInputFormat.FileBaseStatistics(1000, 128 * 1024 * 1024, 8.0f), <nl> 
new file <nl> ppp Quantifier.java <nl> + package org.apache.flink.cep.pattern; <nl> + import java.util.EnumSet; <nl> + public enum Quantifier { <nl> + 	ONE, <nl> + 	ZERO_OR_MORE_EAGER(QuantifierProperty.LOOPING, QuantifierProperty.EAGER), <nl> + 	ZERO_OR_MORE_COMBINATIONS(QuantifierProperty.LOOPING), <nl> + 	ONE_OR_MORE_EAGER( <nl> 
mmm IOManager.java <nl> ppp IOManager.java <nl> - 	private final String path; <nl> + 	private final String[] paths; <nl> - 	private final ReaderThread reader; <nl> + 	private final ReaderThread[] readers; <nl> + 	 <nl> + 	private volatile int nextPath; <nl> + 	 <nl> + 	public IOManager(String tempDir) { <nl> + 		this(new String[] {tempDir}); <nl> 
mmm StandaloneLeaderRetrievalService.java <nl> ppp StandaloneLeaderRetrievalService.java <nl> + import org.apache.flink.runtime.highavailability.HighAvailabilityServices; <nl> - 		this.leaderId = null; <nl> + 		this.leaderId = HighAvailabilityServices.DEFAULT_LEADER_ID; <nl> + 	private Cancellable connectionTimeout; <nl> 
mmm BlobView.java <nl> ppp BlobView.java <nl> - import org.apache.flink.api.common.JobID; <nl> mmm AbstractCachedBuildSideJoinDriver.java <nl> ppp AbstractCachedBuildSideJoinDriver.java <nl> - 		while (this.running && matchIterator != null && matchIterator.callWithNextKey(matchStub, collector)); <nl> + 		while (this.running && matchIterator != null && matchIterator.callWithNextKey(matchStub, collector)) { <nl> 
new file <nl> ppp SopremoTreeAdaptor.java <nl> + package eu.stratosphere.simple.jaql; <nl> + import java.util.ArrayList; <nl> + import java.util.IdentityHashMap; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import org.antlr.runtime.Token; <nl> + import org.antlr.runtime.tree.BaseTreeAdaptor; <nl> 
mmm ProbeSideIteratorTest.java <nl> ppp ProbeSideIteratorTest.java <nl> mmm HashJoinTest.java <nl> ppp HashJoinTest.java <nl> + import eu.stratosphere.nephele.services.iomanager.SerializationFactory; <nl> + import eu.stratosphere.pact.runtime.serialization.WritableSerializationFactory; <nl> + 		final SerializationFactory<PactInteger> keySerialization = new WritableSerializationFactory<PactInteger>(PactInteger.class); <nl> 
mmm TPCHQuery10.java <nl> ppp TPCHQuery10.java <nl> - import org.apache.log4j.Logger; <nl> - import eu.stratosphere.pact.common.type.Key; <nl> + import eu.stratosphere.pact.common.type.base.PactDouble; <nl> + import eu.stratosphere.pact.common.type.base.PactString; <nl> - public class TPCHQuery10 implements PlanAssembler, PlanAssemblerDescription { <nl> 
new file <nl> ppp SelfMatchTask.java <nl> + package eu.stratosphere.pact.runtime.task; <nl> + import java.io.IOException; <nl> + import java.util.Comparator; <nl> + import java.util.Iterator; <nl> + import java.util.List; <nl> + import org.apache.commons.logging.Log; <nl> + import org.apache.commons.logging.LogFactory; <nl> 
mmm AbstractStreamOperatorTestHarness.java <nl> ppp AbstractStreamOperatorTestHarness.java <nl> + import org.apache.flink.runtime.state.CheckpointableKeyedStateBackend; <nl> + import org.apache.flink.runtime.state.KeyGroupStatePartitionStreamProvider; <nl> + import org.apache.flink.streaming.api.operators.InternalTimeServiceManager; <nl> 
mmm MatchNode.java <nl> ppp MatchNode.java <nl> - 			ShipStrategy ss1, ShipStrategy ss2, CostEstimator estimator) { <nl> + 			ShipStrategy ss1, ShipStrategy ss2, CostEstimator estimator) <nl> + 	{ <nl> - 			createMatchAlternative(target, pred1, pred2, ss1, ss2, LocalStrategy.HYBRIDHASH_FIRST, outGp.createCopy(), <nl> 
mmm NettyConnectionManagerTest.java <nl> ppp NettyConnectionManagerTest.java <nl> + import org.junit.Assert; <nl> + import org.apache.flink.runtime.io.network.netty.NettyConnectionManager; <nl> - import org.junit.Assert; <nl> - import org.mockito.Mockito; <nl> + import java.util.concurrent.atomic.AtomicInteger; <nl> 
mmm DeltaIterationTranslationTest.java <nl> ppp DeltaIterationTranslationTest.java <nl> - import static org.junit.Assert.assertArrayEquals; <nl> - import static org.junit.Assert.assertEquals; <nl> - import static org.junit.Assert.fail; <nl> - import java.util.Iterator; <nl> + import org.apache.flink.api.common.functions.RichCoGroupFunction; <nl> 
mmm CountTrigger.java <nl> ppp CountTrigger.java <nl> - 	public TriggerResult onTime(long time, TriggerContext ctx) { <nl> - 		return null; <nl> + 	public TriggerResult onEventTime(long time, TriggerContext ctx) { <nl> + 		return TriggerResult.CONTINUE; <nl> + 	} <nl> + 	@Override <nl> + 	public TriggerResult onProcessingTime(long time, <nl> 
new file <nl> ppp MapPartitionDriver.java <nl> + package eu.stratosphere.pact.runtime.task; <nl> + import eu.stratosphere.api.common.functions.GenericMapPartition; <nl> + import eu.stratosphere.pact.runtime.util.MutableToRegularIteratorWrapper; <nl> + import eu.stratosphere.util.Collector; <nl> + import eu.stratosphere.util.MutableObjectIterator; <nl> 
mmm HBaseTableSchema.java <nl> ppp HBaseTableSchema.java <nl> - 			throw new IllegalArgumentException("Unsupported class type found " + clazz+". " + <nl> + 			throw new IllegalArgumentException("Unsupported class type found " + clazz + ". " + <nl> - 		for(String name : this.familyMap.keySet()) { <nl> + 		for (String name : this.familyMap.keySet()) { <nl> 
mmm InternalWindowFunctionTest.java <nl> ppp InternalWindowFunctionTest.java <nl> + import org.apache.flink.streaming.api.functions.windowing.ProcessAllWindowFunction; <nl> - import org.apache.flink.streaming.api.functions.windowing.RichProcessAllWindowFunction; <nl> - import org.apache.flink.streaming.api.functions.windowing.RichProcessWindowFunction; <nl> 
new file <nl> ppp NodeWithAdjacencyListComparatorFactory.java <nl> + package eu.stratosphere.pact.runtime.iterative.compensatable.danglingpagerank.types; <nl> + import eu.stratosphere.nephele.configuration.Configuration; <nl> + import eu.stratosphere.pact.generic.types.TypeComparatorFactory; <nl> + public final class NodeWithAdjacencyListComparatorFactory implements TypeComparatorFactory<NodeWithAdjacencyList> { <nl> 
mmm PactConfigConstants.java <nl> ppp PactConfigConstants.java <nl> - 	public static final int DEFAULT_PARALLELIZATION_DEGREE = -1; <nl> + 	public static final int DEFAULT_PARALLELIZATION_DEGREE = 1; <nl> - package eu.stratosphere.nephele.util; <nl> - import eu.stratosphere.nephele.instance.InstanceListener; <nl> 
mmm MatchNode.java <nl> ppp MatchNode.java <nl> - import java.util.Arrays; <nl> - import java.util.Collections; <nl> + import eu.stratosphere.pact.common.util.FieldList; <nl> - 	protected MatchNode(MatchNode template, List<OptimizerNode> pred1, List<OptimizerNode> pred2, List<PactConnection> conn1, <nl> - 			List<PactConnection> conn2, GlobalProperties globalProps, LocalProperties localProps) { <nl> 
mmm KafkaTableSinkBase.java <nl> ppp KafkaTableSinkBase.java <nl> - public abstract class KafkaTableSink implements AppendStreamTableSink<Row> { <nl> + public abstract class KafkaTableSinkBase implements AppendStreamTableSink<Row> { <nl> - 	protected KafkaTableSink( <nl> + 	protected KafkaTableSinkBase( <nl> 
mmm SpillableSubpartitionView.java <nl> ppp SpillableSubpartitionView.java <nl> + import org.apache.flink.runtime.io.network.buffer.BufferConsumer; <nl> - 	private final ArrayDeque<Buffer> buffers; <nl> + 	private final ArrayDeque<BufferConsumer> buffers; <nl> - 	private Buffer nextBuffer; <nl> + 	private BufferConsumer nextBuffer; <nl> 
mmm TupleLeadingFieldPairComparator.java <nl> ppp TupleLeadingFieldPairComparator.java <nl> - public class TuplePairSingleFieldComparator<T1 extends Tuple, T2 extends Tuple> extends TypePairComparator<T1, T2> implements Serializable { <nl> + public class TupleLeadingFieldPairComparator<K, T1 extends Tuple, T2 extends Tuple> extends TypePairComparator<T1, T2> implements Serializable { <nl> 
mmm MiniDispatcher.java <nl> ppp MiniDispatcher.java <nl> - import org.apache.flink.configuration.Configuration; <nl> - import org.apache.flink.runtime.blob.BlobServer; <nl> - import org.apache.flink.runtime.heartbeat.HeartbeatServices; <nl> - import org.apache.flink.runtime.highavailability.HighAvailabilityServices; <nl> 
new file <nl> ppp CheckpointResponder.java <nl> + package org.apache.flink.runtime.taskmanager; <nl> + import org.apache.flink.api.common.JobID; <nl> + import org.apache.flink.runtime.executiongraph.ExecutionAttemptID; <nl> + import org.apache.flink.runtime.state.ChainedStateHandle; <nl> + import org.apache.flink.runtime.state.KeyGroupsStateHandle; <nl> 
new file <nl> ppp ReusingBlockResettableIterator.java <nl> + package org.apache.flink.runtime.operators.resettable; <nl> + import org.apache.flink.api.common.typeutils.TypeSerializer; <nl> + import org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable; <nl> + import org.apache.flink.runtime.memorymanager.MemoryAllocationException; <nl> 
new file <nl> ppp Message.java <nl> + package org.apache.flink.streaming.connectors.cassandra.example; <nl> + import com.datastax.driver.mapping.annotations.Column; <nl> + import com.datastax.driver.mapping.annotations.Table; <nl> + import java.io.Serializable; <nl> + @Table(keyspace = "test", name = "message") <nl> 
mmm CheckpointStatsDetailsSubtasksHandler.java <nl> ppp CheckpointStatsDetailsSubtasksHandler.java <nl> + import org.apache.flink.runtime.rest.handler.job.checkpoints.CheckpointStatsCache; <nl> new file <nl> ppp JobVertexIDDeserializer.java <nl> + package org.apache.flink.runtime.rest.messages.json; <nl> + import org.apache.flink.runtime.jobgraph.JobVertexID; <nl> 
mmm GlobalProperties.java <nl> ppp GlobalProperties.java <nl> + import eu.stratosphere.pact.compiler.plan.UnionNode; <nl> + package eu.stratosphere.pact.compiler; <nl> + import java.net.InetAddress; <nl> + import java.net.InetSocketAddress; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> 
mmm InputGate.java <nl> ppp InputGate.java <nl> - 			 <nl> - 			if(c == null) { <nl> + 			if (c == null) { <nl> - 			 <nl> - 				try { <nl> - 					final Constructor<AbstractInputChannel<T>> constructor = (Constructor<AbstractInputChannel<T>>) c <nl> + 			try { <nl> + 				final Constructor<AbstractInputChannel<T>> constructor = (Constructor<AbstractInputChannel<T>>) c <nl> 
new file <nl> ppp GifDecoder.java <nl> + package pl.droidsonroids.gif; <nl> + import android.graphics.Bitmap; <nl> + import android.support.annotation.IntRange; <nl> + import android.support.annotation.NonNull; <nl> + import java.io.IOException; <nl> + public class GifDecoder { <nl> + private final GifInfoHandle mGifInfoHandle; <nl> 
mmm BleReadRequest.java <nl> ppp BleReadRequest.java <nl> - import com.dingjikerbo.bluetooth.library.connect.response.BleReadResponse; <nl> + import com.dingjikerbo.bluetooth.library.response.BleReadResponse; <nl> mmm BleConnectResponse.java <nl> ppp BleConnectResponse.java <nl> - package com.dingjikerbo.bluetooth.library.connect.response; <nl> 
new file <nl> ppp TermSettings.java <nl> + package jackpal.androidterm.util; <nl> + import android.content.SharedPreferences; <nl> + import android.view.KeyEvent; <nl> + public class TermSettings { <nl> + private SharedPreferences mPrefs; <nl> + private int mStatusBar = 0; <nl> + private int mCursorStyle = 0; <nl> 
mmm GitTest.java <nl> ppp GitTest.java <nl> - import com.spotify.docker.client.DockerException; <nl> + import com.spotify.docker.client.exceptions.DockerException; <nl> mmm AbstractDockerMojoTest.java <nl> ppp AbstractDockerMojoTest.java <nl> - import com.spotify.docker.client.DockerCertificateException; <nl> 
mmm EnquireLinkTask.java <nl> ppp EnquireLinkTask.java <nl> - smppClient.reconnect(); <nl> + smppClient.scheduleReconnect(); <nl> mmm Gt06ProtocolDecoderTest.java <nl> ppp Gt06ProtocolDecoderTest.java <nl> + verifyPosition(decoder, binary( <nl> + "7979004a321106170c1b180cc900a875580b7ab4f00010350901fe0a007c0009112424007c000912240081004efe2100c500100f1200000000000000000000000000000000000000000000bc7c900d0a")); <nl> 
deleted file <nl> mmm Events.java <nl> - package org.traccar.reports; <nl> - import java.sql.SQLException; <nl> - import java.util.Collection; <nl> - import java.util.Date; <nl> - import javax.json.Json; <nl> - import javax.json.JsonObjectBuilder; <nl> - import org.traccar.Context; <nl> - import org.traccar.model.Event; <nl> 
deleted file <nl> mmm UserServlet.java <nl> - package org.traccar.web; <nl> - import javax.servlet.http.HttpServletRequest; <nl> - import javax.servlet.http.HttpServletResponse; <nl> - import org.traccar.Context; <nl> - import org.traccar.model.User; <nl> - public class UserServlet extends BaseServlet { <nl> 
mmm BasePipelineFactory.java <nl> ppp BasePipelineFactory.java <nl> + import org.traccar.events.MaintenanceEventHandler; <nl> + private MaintenanceEventHandler maintenanceEventHandler; <nl> + if (Context.getConfig().getBoolean("event.maintenanceHandler")) { <nl> + maintenanceEventHandler = new MaintenanceEventHandler(); <nl> 
mmm EventResource.java <nl> ppp EventResource.java <nl> - import org.traccar.model.Maintenance; <nl> - if (event.getMaintenanceId() != 0) { <nl> - Context.getPermissionsManager().checkPermission(Maintenance.class, getUserId(), event.getMaintenanceId()); <nl> - } <nl> mmm Pt502ProtocolDecoderTest.java <nl> ppp Pt502ProtocolDecoderTest.java <nl> 
mmm NavisProtocol.java <nl> ppp NavisProtocol.java <nl> + import io.netty.handler.codec.LengthFieldBasedFrameDecoder; <nl> + import java.nio.ByteOrder; <nl> - NavisProtocolDecoder protocolDecoder = new NavisProtocolDecoder(NavisProtocol.this); <nl> - pipeline.addLast(new NavisFrameDecoder(protocolDecoder)); <nl> 
mmm MeiligaoProtocolDecoderTest.java <nl> ppp MeiligaoProtocolDecoderTest.java <nl> - "4040005066104020094432990131302E312C302C3135362C302E30302C31392E36312C2D33342C33342E32362C32312E38332C372E39312C313033332C322E36392C362E35352C302C302C309DBF0D0A")); <nl> + "242400736610402421174399553132343334342e3937382c412c333933342e313838302c4e2c30303234302e363231302c452c303030302c3030302c3038313231362c2c2a31437c31312e357c3139347c313030317c303344462c303030307c30303131323030307c30303030303068320d0a2424004c66104024211743990131342e302c3934352c302c31332e33332c322e37352c36392c312e32302c382e31302c302e36382c3131322c302e30382c392e39312c302c312c3040f70d0a2424003266104024211743990232362c322e35342c302e38302c32322c34342c3131392c333735362c37382c31366fc20d0a")); <nl> 
deleted file <nl> mmm Calendar.java <nl> - package org.traccar.model; <nl> - import java.io.ByteArrayInputStream; <nl> - import java.io.IOException; <nl> - import java.sql.SQLException; <nl> - import java.util.Collection; <nl> - import java.util.Date; <nl> - import com.fasterxml.jackson.annotation.JsonIgnore; <nl> 
deleted file <nl> mmm CguardProtocolDecoder.java <nl> - package org.traccar.protocol; <nl> - import org.jboss.netty.channel.Channel; <nl> - import org.traccar.BaseProtocolDecoder; <nl> - import org.traccar.DeviceSession; <nl> - import org.traccar.helper.DateBuilder; <nl> - import org.traccar.helper.Parser; <nl> 
mmm BasePipelineFactory.java <nl> ppp BasePipelineFactory.java <nl> - import org.traccar.events.AlertEventHandler; <nl> - private AlertEventHandler alertEventHandler; <nl> - if (Context.getConfig().getBoolean("event.alertHandler")) { <nl> - alertEventHandler = new AlertEventHandler(); <nl> - } <nl> - if (alertEventHandler != null) { <nl> 
new file <nl> ppp DataManagerTest.java <nl> + package org.traccar.database; <nl> + import org.junit.Assert; <nl> + import org.junit.Test; <nl> + import org.traccar.model.Attribute; <nl> + import org.traccar.model.Device; <nl> + import org.traccar.model.Driver; <nl> + import org.traccar.model.Geofence; <nl> + import org.traccar.model.Group; <nl> 
mmm Tk103ProtocolEncoder.java <nl> ppp Tk103ProtocolEncoder.java <nl> + import org.traccar.Context; <nl> + boolean alternative = Context.getIdentityManager().lookupAttributeBoolean( <nl> + command.getDeviceId(), "tk103.alternative", false, true); <nl> + initDevicePassword(command, "123456"); <nl> - return formatCommand(command, "({%s}AP07)", Command.KEY_UNIQUE_ID); <nl> 
mmm Tk103ProtocolDecoderTest.java <nl> ppp Tk103ProtocolDecoderTest.java <nl> - "(013632651491,ZC20,040613,040137,6,42,112,0")); <nl> + "(013632651491,ZC20,040613,040137,6,421,112,0")); <nl> mmm H02ProtocolDecoder.java <nl> ppp H02ProtocolDecoder.java <nl> - || !BitUtil.check(status, 3) || !BitUtil.check(status, 4) || !BitUtil.check(status, 7)) { <nl> 
mmm Main.java <nl> ppp Main.java <nl> mmm TytanProtocolDecoderTest.java <nl> ppp TytanProtocolDecoderTest.java <nl> + verifyPositions(decoder, binary( <nl> + "B500192000001405125652CA9B1A325FC98D11A9990018020118FC0D")); <nl> + verifyPositions(decoder, binary( <nl> + "B500197800007422125652D7AC32325FD08D11A69900180200188280")); <nl> 
mmm L100ProtocolDecoder.java <nl> ppp L100ProtocolDecoder.java <nl> - .any() <nl> mmm SabertekProtocolDecoder.java <nl> ppp SabertekProtocolDecoder.java <nl> - import org.jboss.netty.buffer.ChannelBuffers; <nl> - if (channel != null) { <nl> - channel.write(ChannelBuffers.wrappedBuffer(new byte[]{(byte) (deviceSession != null ? 0x06 : 0x15)})); <nl> 
mmm BasePipelineFactory.java <nl> ppp BasePipelineFactory.java <nl> + import org.traccar.events.MaintenanceEventHandler; <nl> + private MaintenanceEventHandler maintenanceEventHandler; <nl> + if (Context.getConfig().getBoolean("event.maintenanceHandler")) { <nl> + maintenanceEventHandler = new MaintenanceEventHandler(); <nl> 
mmm WatchProtocolEncoderTest.java <nl> ppp WatchProtocolEncoderTest.java <nl> - command.set(Command.KEY_TIMEZONE, 60 * 60); <nl> + command.set(Command.KEY_TIMEZONE, "Europe/Amsterdam"); <nl> - command.set(Command.KEY_TIMEZONE, 90 * 60); <nl> + command.set(Command.KEY_TIMEZONE, "GMT+01:30"); <nl> - command.set(Command.KEY_TIMEZONE, -60 * 60); <nl> 
mmm T800xProtocolDecoder.java <nl> ppp T800xProtocolDecoder.java <nl> - private void sendResponse(Channel channel, short header, int type, ChannelBuffer imei) { <nl> + private void sendResponse(Channel channel, int type, ChannelBuffer imei) { <nl> - response.writeShort(header); <nl> + response.writeByte(0x23); <nl> 
mmm H02ProtocolDecoderTest.java <nl> ppp H02ProtocolDecoderTest.java <nl> + verifyNotNull(decoder, buffer( <nl> + "*hq,356327081001239,VP1,V,470,002,92,3565,0Y92,19433,30Y92,1340,29#")); <nl> new file <nl> ppp SatsolProtocol.java <nl> + package org.traccar.protocol; <nl> + import io.netty.handler.codec.LengthFieldBasedFrameDecoder; <nl> 
mmm NumberColumn.java <nl> ppp NumberColumn.java <nl> - import it.unimi.dsi.fastutil.ints.IntSet; <nl> - public interface NumberColumn extends Column, DoubleIterable, IntConvertibleColumn, NumberMapFunctions, NumberFilters, NumberFillers<NumberColumn>, CategoricalColumn { <nl> + public interface NumberColumn extends Column, DoubleIterable, NumberMapFunctions, NumberFilters, NumberFillers<NumberColumn>, CategoricalColumn { <nl> 
mmm ShortColumn.java <nl> ppp ShortColumn.java <nl> - import com.deathrayresearch.outlier.filter.LongPredicate; <nl> + import com.deathrayresearch.outlier.filter.ShortBiPredicate; <nl> - public RoaringBitmap isLessThan(short f) { <nl> - RoaringBitmap results = new RoaringBitmap(); <nl> - int i = 0; <nl> - for (int next : data) { <nl> 
mmm DeferredDateColumn.java <nl> ppp DeferredDateColumn.java <nl> - @Override <nl> - public Function<Table, Selection> isMissing() { <nl> - return table -> table.dateColumn(name()).isMissing(); <nl> - } <nl> - @Override <nl> - public Function<Table, Selection> isNotMissing() { <nl> - return table -> table.dateColumn(name()).isNotMissing(); <nl> 
mmm DateColumn.java <nl> ppp DateColumn.java <nl> - public StringColumn yearMonthString() { <nl> - StringColumn newColumn = StringColumn.create(this.name() + " year & month"); <nl> - for (int r = 0; r < this.size(); r++) { <nl> - int c1 = this.getPackedDate(r); <nl> - if (c1 == MISSING_VALUE) { <nl> - newColumn.append(StringColumn.MISSING_VALUE); <nl> 
new file <nl> ppp DeferredColumnTest.java <nl> + package tech.tablesaw.filtering.deferred; <nl> + import org.junit.jupiter.api.Test; <nl> + import tech.tablesaw.api.BooleanColumn; <nl> + import tech.tablesaw.api.IntColumn; <nl> + import tech.tablesaw.api.Table; <nl> + import tech.tablesaw.selection.BitmapBackedSelection; <nl> 
mmm TableSlice.java <nl> ppp TableSlice.java <nl> - columns.add(entireColumn(i)); <nl> + columns.add(column(i)); <nl> - for (Column<?> column : columns()) { <nl> - table.addColumns(column.where(selection)); <nl> + for (Column<?> column : this.columns()) { <nl> + table.addColumns(column); <nl> mmm TimeDependentFilteringTest.java <nl> 
mmm TransferImage.java <nl> ppp TransferImage.java <nl> - import android.animation.Animator; <nl> - import android.animation.AnimatorListenerAdapter; <nl> - import android.animation.AnimatorSet; <nl> - import android.widget.LinearLayout; <nl> + import com.bumptech.glide.Glide; <nl> - import com.hitomi.tilibrary.style.anim.TransitionAnimator; <nl> 
new file <nl> ppp LocalRedisModule.java <nl> + package com.netflix.conductor.server; <nl> + import com.google.inject.AbstractModule; <nl> + import com.google.inject.name.Names; <nl> + import com.netflix.conductor.dyno.DynoShardSupplierProvider; <nl> + import com.netflix.conductor.dyno.DynomiteConfiguration; <nl> 
mmm QueueDAO.java <nl> ppp QueueDAO.java <nl> - 	boolean exists(String queueName, String id); <nl> mmm TestWorkflowExecutor.java <nl> ppp TestWorkflowExecutor.java <nl> + import static com.netflix.conductor.core.execution.tasks.SubWorkflow.SUB_WORKFLOW_ID; <nl> + import static java.util.Comparator.comparingInt; <nl> 
mmm Configuration.java <nl> ppp Configuration.java <nl> + String LOCKING_SERVER_PROPERTY_NAME = "locking.server"; <nl> + String LOCKING_SERVER_DEFAULT_VALUE = "noop_lock"; <nl> + default LOCKING_SERVER getLockingServer() { <nl> + return LOCKING_SERVER.valueOf(getLockingServerString()); <nl> + } <nl> + default String getLockingServerString() { <nl> 
mmm WorkflowTaskTypeConstraint.java <nl> ppp WorkflowTaskTypeConstraint.java <nl> + import com.netflix.conductor.common.run.Workflow; <nl> + import com.netflix.conductor.core.execution.tasks.Terminate; <nl> + import static com.netflix.conductor.common.run.Workflow.WorkflowStatus.COMPLETED; <nl> + import static com.netflix.conductor.common.run.Workflow.WorkflowStatus.FAILED; <nl> 
mmm MySQLExecutionDAO.java <nl> ppp MySQLExecutionDAO.java <nl> - 		indexer.addTaskExecutionLogs(log); <nl> + 		indexer.add(log); <nl> - 				indexer.updateWorkflow(workflowId, <nl> + 				indexer.update(workflowId, <nl> - 				indexer.removeWorkflow(workflowId); <nl> + 				indexer.remove(workflowId); <nl> - 				indexer.addEventExecution(eventExecution); <nl> 
new file <nl> ppp MySQLMetadataDAOTest.java <nl> + package com.netflix.conductor.dao.mysql; <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.junit.Assert.assertNotNull; <nl> + import static org.junit.Assert.assertTrue; <nl> + import java.util.Arrays; <nl> + import java.util.List; <nl> 
new file <nl> ppp LambdaTest.java <nl> + package com.netflix.conductor.contribs.script; <nl> + import com.netflix.conductor.common.metadata.tasks.Task; <nl> + import com.netflix.conductor.common.run.Workflow; <nl> + import com.netflix.conductor.contribs.lambda.Lambda; <nl> + import com.netflix.conductor.core.execution.WorkflowExecutor; <nl> 
mmm AbstractGrpcEndToEndTest.java <nl> ppp AbstractGrpcEndToEndTest.java <nl> - TaskDef def = new TaskDef("t" + i, "task " + i); <nl> + TaskDef def = new TaskDef("t" + i, "task " + i, DEFAULT_EMAIL_ADDRESS, 3, 60, 60); <nl> mmm TaskDef.java <nl> ppp TaskDef.java <nl> - import javax.validation.Valid; <nl> - import javax.validation.constraints.Min; <nl> 
mmm MySQLMetadataDAO.java <nl> ppp MySQLMetadataDAO.java <nl> - return getWithRetriedTransactions(this::findAllTaskDefs); <nl> + return getWithTransaction(this::findAllTaskDefs); <nl> - return getWithRetriedTransactions(tx -> { <nl> + return getWithTransaction(tx -> { <nl> deleted file <nl> mmm DoWhile.java <nl> 
mmm SystemPropertiesConfiguration.java <nl> ppp SystemPropertiesConfiguration.java <nl> mmm ElasticSearchDAOV5.java <nl> ppp ElasticSearchDAOV5.java <nl> - private static final SimpleDateFormat SIMPLE_DATE_FORMAT = new SimpleDateFormat("yyyyMMww"); <nl> + private static final SimpleDateFormat SIMPLE_DATE_FORMAT = new SimpleDateFormat("yyyyMMWW"); <nl> 
mmm ConductorConfig.java <nl> ppp ConductorConfig.java <nl> - package com.netflix.conductor.core.config; <nl> - import com.google.inject.AbstractModule; <nl> - import org.apache.commons.lang3.StringUtils; <nl> - import org.slf4j.Logger; <nl> - import org.slf4j.LoggerFactory; <nl> + package com.netflix.conductor.server; <nl> 
mmm RedisExecutionDAOTest.java <nl> ppp RedisExecutionDAOTest.java <nl> - 	public void init() { <nl> + 	public void init() throws Exception { <nl> - 	public void testTaskExceedsLimit() { <nl> + 	public void testTaskExceedsLimit() throws Exception { <nl> - 	public void testCreateTaskException() { <nl> + 	public void testCreateTaskException() throws Exception { <nl> 
new file <nl> ppp LambdaTest.java <nl> + package com.netflix.conductor.contribs.script; <nl> + import com.netflix.conductor.common.metadata.tasks.Task; <nl> + import com.netflix.conductor.common.run.Workflow; <nl> + import com.netflix.conductor.contribs.lambda.LambdaTask; <nl> + import com.netflix.conductor.core.execution.WorkflowExecutor; <nl> 
mmm TestAuthorizationEndpoint.java <nl> ppp TestAuthorizationEndpoint.java <nl> - 					String clientSecret, Set<String> scope) { <nl> + 					Set<String> scope) { <nl> mmm TestRandomValueOAuth2ProviderTokenServicesBase.java <nl> ppp TestRandomValueOAuth2ProviderTokenServicesBase.java <nl> - 				new AuthorizationRequest("id", null, null, null, null), new TestAuthentication( <nl> 
mmm AdminController.java <nl> ppp AdminController.java <nl> - import org.apache.commons.logging.Log; <nl> - import org.apache.commons.logging.LogFactory; <nl> + import java.security.Principal; <nl> + import java.util.ArrayList; <nl> + import java.util.Collection; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> 
new file <nl> ppp InMemoryAuthorizationCodeServicesTests.java <nl> + package org.springframework.security.oauth2.provider.code; <nl> + import org.junit.Before; <nl> + public class InMemoryAuthorizationCodeServicesTests extends AuthorizationCodeServicesBaseTests { <nl> + 	private InMemoryAuthorizationCodeServices authorizationCodeServices; <nl> 
mmm ClientDetailsServiceBuilder.java <nl> ppp ClientDetailsServiceBuilder.java <nl> + 	@SuppressWarnings("rawtypes") <nl> + 	public ClientDetailsServiceBuilder<?> clients(final ClientDetailsService clientDetailsService) throws Exception { <nl> + 		return new ClientDetailsServiceBuilder() { <nl> + 			@Override <nl> 
new file <nl> ppp SpelView.java <nl> + package org.springframework.security.oauth2.provider.endpoint; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + import javax.servlet.http.HttpServletRequest; <nl> + import javax.servlet.http.HttpServletResponse; <nl> + import org.springframework.context.expression.MapAccessor; <nl> 
mmm TestPeriod_Constructors.java <nl> ppp TestPeriod_Constructors.java <nl> + public void testConstructor1() throws Throwable { <nl> + Period test = new Period(); <nl> + assertEquals(PeriodType.standard(), test.getPeriodType()); <nl> + assertEquals(0, test.getYears()); <nl> + assertEquals(0, test.getMonths()); <nl> 
mmm BuddhistEraDateTimeField.java <nl> ppp BuddhistEraDateTimeField.java <nl> - protected String getAsText(int fieldValue, Locale locale) { <nl> + public String getAsText(int fieldValue, Locale locale) { <nl> mmm UnsupportedDateTimeField.java <nl> ppp UnsupportedDateTimeField.java <nl> + public String getAsText(int fieldValue, Locale locale) { <nl> 
mmm ReadableDurationConverter.java <nl> ppp ReadableDurationConverter.java <nl> + import org.joda.time.DateTimeUtils; <nl> - * @param duration duration to get modified <nl> + * @param writablePeriod  period to get modified <nl> - public void setInto(ReadWritablePeriod duration, Object object, Chronology chrono) { <nl> 
mmm MutableInterval.java <nl> ppp MutableInterval.java <nl> + import org.joda.time.base.*; <nl> mmm TestInterval_Basics.java <nl> ppp TestInterval_Basics.java <nl> + import org.joda.time.base.AbstractInterval; <nl> - package org.joda.time; <nl> + package org.joda.time.base; <nl> + import org.joda.time.Chronology; <nl> 
mmm RequestQueueTest.java <nl> ppp RequestQueueTest.java <nl> - import com.android.volley.*; <nl> + import com.android.volley.Cache; <nl> + import com.android.volley.Network; <nl> + import com.android.volley.Request; <nl> + import com.android.volley.RequestQueue; <nl> + import com.android.volley.ResponseDelivery; <nl> 
mmm CatTestCase.java <nl> ppp CatTestCase.java <nl> - 		Cat.setup(null, null); <nl> + 		Cat.setup(null); <nl> mmm AllTests.java <nl> ppp AllTests.java <nl> + import com.dianping.cat.report.page.transaction.TransactionReportMergerTest; <nl> - import com.dianping.cat.report.tool.TransactionReportToolTest; <nl> 
new file <nl> ppp TpsStatistics.java <nl> + package com.dianping.cat.report.page.transaction; <nl> + import com.dianping.cat.consumer.transaction.model.entity.TransactionName; <nl> + import com.dianping.cat.consumer.transaction.model.entity.TransactionType; <nl> + import com.dianping.cat.consumer.transaction.model.transform.BaseVisitor; <nl> 
mmm ReportModule.java <nl> ppp ReportModule.java <nl> - com.dianping.cat.report.page.query.Handler.class, <nl> deleted file <nl> mmm Action.java <nl> - package com.dianping.cat.report.page.query; <nl> - public enum Action implements org.unidal.web.mvc.Action { <nl> - 	VIEW("view"); <nl> - 	public static Action getByName(String name, Action defaultAction) { <nl> 
mmm AlertSummaryStringDecorator.java <nl> ppp AlertSummaryStringDecorator.java <nl> - package com.dianping.cat.report.task.alert.summary; <nl> + package com.dianping.cat.report.alert.summary; <nl> mmm ReportModule.java <nl> ppp ReportModule.java <nl> - com.dianping.cat.report.page.app.Handler.class <nl> + com.dianping.cat.report.page.app.Handler.class, <nl> 
mmm MatrixAnalyzer.java <nl> ppp MatrixAnalyzer.java <nl> + import com.dianping.cat.ServerConfigManager; <nl> + 	@Inject <nl> + 	private ServerConfigManager m_serverConfigManager; <nl> - 			if (shouldDiscard((Transaction) message)) { <nl> + 			if (m_serverConfigManager.shouldDiscard((Transaction) message)) { <nl> 
mmm MetricGraphCreator.java <nl> ppp MetricGraphCreator.java <nl> + import com.dianping.cat.system.config.TagManager; <nl> + 	@Inject <nl> + 	private TagManager m_tagManager; <nl> + 	private boolean isProductLineInTag(String productLine, List<MetricItemConfig> configs) { <nl> + 		List<String> domains = m_productLineConfigManager.queryDomainsByProductLine(productLine); <nl> 
mmm NullMessage.java <nl> ppp NullMessage.java <nl> - import com.dianping.cat.message.ForkedTransaction; <nl> - import com.dianping.cat.message.TaggedTransaction; <nl> - public enum NullMessage implements Transaction, Event, Metric, Trace, Heartbeat, ForkedTransaction, TaggedTransaction { <nl> + public enum NullMessage implements Transaction, Event, Metric, Trace, Heartbeat { <nl> 
mmm Handler.java <nl> ppp Handler.java <nl> + 		case APP_CONFIG_FETCH: <nl> new file <nl> ppp HighLoadUpdater.java <nl> + package com.dianping.cat.report.task.highload; <nl> + import java.util.Date; <nl> + import com.dianping.cat.report.task.spi.ReportTaskBuilder; <nl> + public abstract class HighLoadUpdater implements ReportTaskBuilder { <nl> 
mmm DefaultABTestContextManager.java <nl> ppp DefaultABTestContextManager.java <nl> - import com.dianping.cat.abtest.spi.ABTestGroupStrategy; <nl> + import com.dianping.cat.message.spi.MessageManager; <nl> + 	@Inject <nl> + 	private MessageManager m_messageManager; <nl> + 	@Override <nl> + 	public ABTestContext createContext(ABTestEntity entity) { <nl> 
mmm ServiceReportBuilder.java <nl> ppp ServiceReportBuilder.java <nl> - 		System.out.println(report); <nl> - 		System.out.println(report); <nl> mmm ClientConfigManager.java <nl> ppp ClientConfigManager.java <nl> - import com.dianping.cat.configuration.client.entity.Property; <nl> - 	public int getMaxMessageLength() { <nl> 
mmm DailyReportDao.java <nl> ppp DailyReportDao.java <nl> - 	public List<DailyReport> findSendMailReportDomainDuration(Date startDate, Date endDate, String domain, int type) throws Exception; <nl> - 	 <nl> mmm AbstractReportCreater.java <nl> ppp AbstractReportCreater.java <nl> - import java.util.HashSet; <nl> 
mmm ProjectUpdateTask.java <nl> ppp ProjectUpdateTask.java <nl> - 			Cat.logError(e); <nl> mmm DefaultReportServiceManager.java <nl> ppp DefaultReportServiceManager.java <nl> + import com.dianping.cat.home.jar.entity.JarReport; <nl> + 	@Override <nl> + 	public JarReport queryJarReport(String domain, Date start, Date end) { <nl> 
mmm BaseAlert.java <nl> ppp BaseAlert.java <nl> + import com.dianping.cat.consumer.metric.MetricAnalyzer; <nl> + import com.dianping.cat.consumer.metric.model.entity.Segment; <nl> + import com.dianping.cat.report.service.BaselineService; <nl> - 	protected RemoteMetricReportService m_service; <nl> + 	protected BaselineService m_baselineService; <nl> 
mmm TaskManagerTest.java <nl> ppp TaskManagerTest.java <nl> - import com.dianping.cat.ReportType; <nl> - 		Assert.assertEquals(2, result.get(ReportType.MONTH).size()); <nl> - 		Assert.assertEquals(9, result.get(ReportType.WEEK).size()); <nl> - 		Assert.assertEquals(61, result.get(ReportType.DAILY).size()); <nl> 
mmm DefaultTransportManager.java <nl> ppp DefaultTransportManager.java <nl> + 	 <nl> + 	public void setSender(MessageSender sender) { <nl> + 		this.m_sender = sender; <nl> + 	} <nl> mmm BucketConcurrentTest.java <nl> ppp BucketConcurrentTest.java <nl> + import org.junit.Ignore; <nl> + @Ignore <nl> mmm AbstractReportModel.java <nl> 
mmm Handler.java <nl> ppp Handler.java <nl> + import com.dianping.cat.report.page.PayloadNormalizer; <nl> + 	@Inject <nl> + 	private PayloadNormalizer m_normalizePayload; <nl> + 		Payload payload = ctx.getPayload(); <nl> - 		Payload payload = ctx.getPayload(); <nl> + 		m_normalizePayload.normalize(model, payload); <nl> 
mmm ProblemReportHelper.java <nl> ppp ProblemReportHelper.java <nl> + 	public static String creatLinkString(String baseUrl, String classStyle, Map<String, String> params, String text) { <nl> + 		StringBuilder sb = new StringBuilder(); <nl> + 		sb.append("<a "); <nl> + 		sb.append("href=\"").append(baseUrl); <nl> 
mmm LocalModelService.java <nl> ppp LocalModelService.java <nl> + import java.util.ConcurrentModificationException; <nl> - 	 <nl> + 	public abstract String buildReport(ModelRequest request, ModelPeriod period, String domain, ApiPayload payload) <nl> + 	      throws Exception; <nl> - 	public abstract String getReport(ModelRequest request, ModelPeriod period, String domain, ApiPayload payload) throws Exception; <nl> 
mmm BuilderTest.java <nl> ppp BuilderTest.java <nl> + import com.dianping.cat.consumer.event.EventAnalyzer; <nl> + 	 <nl> + 	@Test <nl> + 	public void testEvent() throws ParseException{ <nl> + 		EventReportBuilder builder = lookup(EventReportBuilder.class); <nl> + 		 <nl> + 		Date period = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse("2013-12-16 16:00:00"); <nl> 
mmm LocalLogViewService.java <nl> ppp LocalLogViewService.java <nl> - import com.dianping.cat.storage.TagThreadSupport.Direction; <nl> - 				Direction d = Direction.valueOf(direction); <nl> + 				Boolean d = Boolean.valueOf(direction); <nl> - 				tree = bucket.findNextById(messageId, d, tag); <nl> + 				if (d.booleanValue()) { <nl> 
mmm StatusUpdateTask.java <nl> ppp StatusUpdateTask.java <nl> + import com.dianping.cat.configuration.ClientConfigManager; <nl> + 	 <nl> + 	@Inject <nl> + 	private ClientConfigManager m_manager; <nl> - 			Transaction t = cat.newTransaction("System", "Status"); <nl> - 			Heartbeat h = cat.newHeartbeat("Heartbeat", m_ipAddress); <nl> 
mmm ReportModule.java <nl> ppp ReportModule.java <nl> - com.dianping.cat.report.page.matrix.Handler.class <nl> + com.dianping.cat.report.page.matrix.Handler.class, <nl> + com.dianping.cat.report.page.monthreport.Handler.class <nl> new file <nl> ppp Payload.java <nl> + package com.dianping.cat.report.page.monthreport; <nl> 
mmm ExternalInfoBuilder.java <nl> ppp ExternalInfoBuilder.java <nl> + import com.dianping.cat.system.config.ExceptionThresholdConfigManager; <nl> + 	 <nl> + 	@Inject <nl> + 	private ExceptionThresholdConfigManager m_configManager; <nl> - 		TopMetric topMetric = new TopMetric(minuteCount, payload.getTopCounts()); <nl> 
mmm EventConfigurator.java <nl> ppp EventConfigurator.java <nl> - } <nl> - 		@Override <nl> - public void setIndex(int index) { <nl> mmm DefaultReportManagerTest.java <nl> ppp DefaultReportManagerTest.java <nl> - 		m_manager.loadHourlyReports(m_start, null); <nl> + 		m_manager.loadHourlyReports(m_start, null, 0); <nl> 
mmm Payload.java <nl> ppp Payload.java <nl> + 	 <nl> deleted file <nl> mmm ThirdPartyAlert.java <nl> - package com.dianping.cat.report.task.alert.thirdParty; <nl> - import java.util.ArrayList; <nl> - import java.util.Calendar; <nl> - import java.util.List; <nl> - import java.util.concurrent.ArrayBlockingQueue; <nl> 
mmm MetricConfigManagerTest.java <nl> ppp MetricConfigManagerTest.java <nl> - import org.codehaus.plexus.logging.Logger; <nl> + import com.dianping.cat.MockLog; <nl> - 	public static class MockLog implements Logger { <nl> - 		@Override <nl> - 		public void debug(String message) { <nl> - 		} <nl> - 		@Override <nl> 
deleted file <nl> mmm StorageCacheRuleConfigManager.java <nl> - package com.dianping.cat.system.config; <nl> - public class StorageCacheRuleConfigManager extends StorageRuleConfigManager { <nl> - 	private static final String CONFIG_NAME = "storageCacheRule"; <nl> - 	@Override <nl> - 	protected String getConfigName() { <nl> 
mmm HeartbeatAnalyzer.java <nl> ppp HeartbeatAnalyzer.java <nl> - 		StatusInfo info; <nl> + 		StatusInfo info = null; <nl> - 			RuntimeInfo runtime = info.getRuntime(); <nl> - 			if (runtime != null) { <nl> - 				machine.setClasspath(runtime.getJavaClasspath()); <nl> - 			} else { <nl> - 				machine.setClasspath(""); <nl> 
mmm AppSpeedConfigManager.java <nl> ppp AppSpeedConfigManager.java <nl> - 		int max = 0; <nl> - 		if (!ids.isEmpty()) { <nl> - 			Collections.sort(ids); <nl> - 			max = ids.get(ids.size() - 1); <nl> - 		} <nl> + 		Collections.sort(ids); <nl> + 		int max = ids.get(ids.size() - 1); <nl> mmm AppGraphCreator.java <nl> 
mmm ReportPage.java <nl> ppp ReportPage.java <nl> - MONITOR("monitor", "monitor", "Monitor", "Monitor", true); <nl> + SYSTEMMONITOR("systemMonitor", "systemMonitor", "SystemMonitor", "SystemMonitor", true); <nl> mmm JspFile.java <nl> ppp JspFile.java <nl> - package com.dianping.cat.report.page.monitor; <nl> 
new file <nl> ppp Model.java <nl> + package com.dianping.cat.report.page.database; <nl> + import java.util.ArrayList; <nl> + import java.util.Collection; <nl> + import java.util.List; <nl> + import java.util.Set; <nl> + import com.dianping.cat.consumer.database.model.entity.DatabaseReport; <nl> + import com.dianping.cat.report.page.AbstractReportModel; <nl> 
mmm Handler.java <nl> ppp Handler.java <nl> - 		model.setExtensionGraph(displayHeartbeat.getDalGraph()); <nl> + 		model.setExtensionGraph(displayHeartbeat.getExtensionGraph()); <nl> mmm DisplayHeartbeat.java <nl> ppp DisplayHeartbeat.java <nl> - 	private static final Map<String, Integer> DAL_INDEX = new HashMap<String, Integer>(); <nl> 
mmm SystemConfigProcessor.java <nl> ppp SystemConfigProcessor.java <nl> - package com.dianping.cat.system.page.config.process; <nl> + package com.dianping.cat.system.page.config.processor; <nl> new file <nl> ppp ProblemStatistics.java <nl> + package com.dianping.cat.report.page.app; <nl> + import java.util.ArrayList; <nl> 
mmm FailureAnaylzerStoreTestConfigurator.java <nl> ppp FailureAnaylzerStoreTestConfigurator.java <nl> - package com.dianping.cat.message.consumer.failure; <nl> + package com.dianping.cat.consumer.failure; <nl> - import com.dianping.cat.message.consumer.failure.FailureReportAnalyzer; <nl> - import com.dianping.cat.message.consumer.failure.FailureReportAnalyzer.Handler; <nl> 
mmm RouterConfigManager.java <nl> ppp RouterConfigManager.java <nl> - import java.io.IOException; <nl> - import java.util.Date; <nl> - import org.unidal.dal.jdbc.DalException; <nl> - import org.xml.sax.SAXException; <nl> - 	private long m_modifyTime; <nl> - 			m_modifyTime = config.getModifyDate().getTime(); <nl> 
mmm StringRope.java <nl> ppp StringRope.java <nl> - import com.dianping.cat.message.spi.codec.BufferWriter; <nl> - 	public int writeTo(ChannelBuffer buffer, BufferWriter writer) { <nl> + 	private int writeRaw(ChannelBuffer buffer, byte[] data) { <nl> + 		int len = data.length; <nl> + 		int count = len; <nl> 
mmm DataParserFactory.java <nl> ppp DataParserFactory.java <nl> + import com.dianping.dog.alarm.entity.ConnectEntity; <nl> - public DataParser getDataParser(String url){ <nl> - 	 <nl> - 	return new DefaultDataParser(); <nl> + 	public DataParser getDataParser(ConnectEntity conEntity){ <nl> + 		if(conEntity.getReport() == "problem"){ <nl> 
new file <nl> ppp Handler.java <nl> + package com.dianping.cat.report.page.logview; <nl> + import java.io.IOException; <nl> + import java.util.Arrays; <nl> + import javax.servlet.ServletException; <nl> + import com.dianping.cat.report.ReportPage; <nl> + import com.site.lookup.annotation.Inject; <nl> + import com.site.web.mvc.PageHandler; <nl> 
mmm Payload.java <nl> ppp Payload.java <nl> - 	@FieldMeta("code") <nl> - 	private int m_code; <nl> - 	 <nl> - 	public int getCode() { <nl> - 		return m_code; <nl> - 	} <nl> - 	public void setCode(int code) { <nl> - 		m_code = code; <nl> - 	} <nl> mmm JspFile.java <nl> ppp JspFile.java <nl> - 	APP_CODE_UPDATE("/jsp/system/appConfig/codeUpdate.jsp"), <nl> 
mmm BusinessAlert.java <nl> ppp BusinessAlert.java <nl> - import java.util.HashMap; <nl> + import java.util.Map.Entry; <nl> + import org.unidal.tuple.Pair; <nl> + import com.dianping.cat.consumer.metric.MetricAnalyzer; <nl> + import com.dianping.cat.consumer.metric.model.entity.Segment; <nl> + import com.dianping.cat.home.rule.entity.Condition; <nl> 
mmm PlainTextMessageCodec.java <nl> ppp PlainTextMessageCodec.java <nl> + import org.unidal.lookup.annotation.Inject; <nl> + import com.dianping.cat.message.Metric; <nl> + import com.dianping.cat.message.internal.DefaultMetric; <nl> - import org.unidal.lookup.annotation.Inject; <nl> - 		if (identifier == 'E') { <nl> 
mmm AppGraphCreator.java <nl> ppp AppGraphCreator.java <nl> + 				int status = code.getStatus(); <nl> + 				if (status == 0) { <nl> + 					title += "<span class='text-success'>&nbsp;&nbsp;【成功】</span>"; <nl> + 				} else { <nl> + 					title += "<span class='text-error'>&nbsp;&nbsp;【失败】</span>"; <nl> + 				} <nl> 
mmm CompositeFormatTest.java <nl> ppp CompositeFormatTest.java <nl> - import com.dianping.cat.config.aggregation.AggregationMessageFormat; <nl> + import com.dianping.cat.config.web.js.AggregationMessageFormat; <nl> mmm ConfigReloadTask.java <nl> ppp ConfigReloadTask.java <nl> - import com.dianping.cat.config.black.BlackListManager; <nl> 
mmm AlertConfig.java <nl> ppp AlertConfig.java <nl> - 		 <nl> + 		return phones; <nl> + 	} <nl> + 	public List<String> buildExceptionSMSReceivers(ProductLine productLine) { <nl> + 		List<String> phones = new ArrayList<String>(); <nl> mmm TopReportVisitor.java <nl> ppp TopReportVisitor.java <nl> - 	 <nl> - 		ExceptionLimit exceptionLimit = m_configManager.queryDomainExceptionLimit(m_currentDomain, error.getId()); <nl> 
new file <nl> ppp Handler.java <nl> + package com.dianping.cat.report.heartbeat.heartbeat.page.heartbeat; <nl> + import java.io.IOException; <nl> + import javax.servlet.ServletException; <nl> + import com.dianping.cat.report.heartbeat.heartbeat.HeartbeatPage; <nl> + import com.site.lookup.annotation.Inject; <nl> 
mmm Handler.java <nl> ppp Handler.java <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + import java.util.Map.Entry; <nl> + import java.util.Set; <nl> + import com.dianping.cat.advanced.metric.config.entity.MetricItemConfig; <nl> + import com.dianping.cat.consumer.advanced.MetricConfigManager; <nl> 
mmm EventReportMerger.java <nl> ppp EventReportMerger.java <nl> - 	 <nl> - 	 <nl> mmm AbstractMessageAnalyzer.java <nl> ppp AbstractMessageAnalyzer.java <nl> - 				} catch (Exception e) { <nl> + 				} catch (Throwable e) { <nl> - 				} catch (Exception e) { <nl> + 				} catch (Throwable e) { <nl> new file <nl> 
mmm ABTestContextManager.java <nl> ppp ABTestContextManager.java <nl> + import com.dianping.cat.abtest.spi.ABTestEntity; <nl> + 	 <nl> + 	public ABTestContext createContext(ABTestEntity entity); <nl> deleted file <nl> mmm CatTest.java <nl> - package com.dianping.cat; <nl> - import junit.framework.Assert; <nl> 
mmm LocalDependencyService.java <nl> ppp LocalDependencyService.java <nl> + import java.util.List; <nl> + import com.dianping.cat.consumer.dependency.DependencyReportMerger; <nl> - <<<<<<< HEAD <nl> - 		DependencyReport report = super.getReport(period, domain); <nl> - ======= <nl> - >>>>>>> f86721684ccda964204d843c5badb55317c9cd63 <nl> 
deleted file <nl> mmm ComponentsConfigurator.java <nl> - package com.dianping.cat.hadoop.build; <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - import com.dianping.cat.hadoop.HdfsDumpConsumer; <nl> - import com.dianping.cat.hadoop.hdfs.OutputChannelManager; <nl> - import com.dianping.cat.hadoop.hdfs.DefaultOutputChannelManager; <nl> 
new file <nl> ppp ABTestContextTest.java <nl> + package com.dianping.cat.abtest.spi.internal; <nl> + public class ABTestContextTest { <nl> + } <nl> mmm MessageIdFactory.java <nl> ppp MessageIdFactory.java <nl> - 		System.out.println("Message id mark file: " + mark.getCanonicalPath()); <nl> mmm TrafficDistributionGroupStrategy.java <nl> 
mmm AppDataConsumer.java <nl> ppp AppDataConsumer.java <nl> + import java.text.SimpleDateFormat; <nl> + import java.util.Date; <nl> - 	 <nl> + 		private SimpleDateFormat m_sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm"); <nl> + 				m_logger.info("closed bucket handler ,time " + m_sdf.format(new Date(currentDuration))); <nl> 
mmm NetGraphBuilder.java <nl> ppp NetGraphBuilder.java <nl> - 						double inDiscardsSum = 0; <nl> - 						double outDiscardsSum = 0; <nl> - 						double inErrorsSum = 0; <nl> - 						double outErrorsSum = 0; <nl> - 							inDiscardsSum += inter.getIndiscards(); <nl> - 							outDiscardsSum += inter.getOutdiscards(); <nl> 
mmm DefaultReportService.java <nl> ppp DefaultReportService.java <nl> + import com.dianping.cat.consumer.browser.model.entity.BrowserReport; <nl> + 	@Inject <nl> + 	private BrowserReportService m_browserReportService; <nl> + 	@Override <nl> + 	public BrowserReport queryBrowserReport(String domain, Date start, Date end) { <nl> 
deleted file <nl> mmm Model.java <nl> - package com.dianping.cat.agent.core.page.index; <nl> - import com.dianping.cat.agent.core.CorePage; <nl> - import org.unidal.web.mvc.ViewModel; <nl> - public class Model extends ViewModel<CorePage, Action, Context> { <nl> - 	public Model(Context ctx) { <nl> - 		super(ctx); <nl> 
mmm JspViewer.java <nl> ppp JspViewer.java <nl> - 		case JSON: <nl> - 			return JspFile.JSON.getPath(); <nl> mmm Payload.java <nl> ppp Payload.java <nl> + 	 <nl> - 	@FieldMeta("id") <nl> - 	private String m_id; <nl> - 	public String getId() { <nl> - 		return m_id; <nl> - 	} <nl> + 	 <nl> - 		return m_hideNav; <nl> 
deleted file <nl> mmm AppCrashData.java <nl> - package com.dianping.cat.broker.api.app; <nl> - public class AppCrashData { <nl> - } <nl> mmm PieChart.java <nl> + 		private int m_id; <nl> + 		 <nl> + 		 <nl> + 		public int getId() { <nl> + 	return m_id; <nl> + } <nl> + 		public void setId(int id) { <nl> + 	m_id = id; <nl> 
mmm Handler.java <nl> ppp Handler.java <nl> - import java.util.HashMap; <nl> - import java.util.Map; <nl> - import com.dianping.cat.DomainManager; <nl> - 	@Inject <nl> - 	private DomainManager m_domainManager; <nl> - 	private void buildIpToHostnameMap(Model model) { <nl> - 		List<String> ips = model.getIps(); <nl> 
new file <nl> ppp ModelResponseTest.java <nl> + package com.dianping.cat.service; <nl> + import org.junit.Test; <nl> + import junit.framework.Assert; <nl> + public class ModelResponseTest { <nl> + 	@Test <nl> + 	public void test(){ <nl> + 		ModelResponse<String> response = new ModelResponse<String>(); <nl> + 		String model = "model"; <nl> 
mmm LocalCrossService.java <nl> ppp LocalCrossService.java <nl> - import java.util.List; <nl> - import com.dianping.cat.consumer.cross.CrossReportMerger; <nl> + <<<<<<< HEAD <nl> + 		CrossReport report = super.getReport(period, domain); <nl> + ======= <nl> + >>>>>>> f86721684ccda964204d843c5badb55317c9cd63 <nl> 
mmm DetailStatistics.java <nl> ppp DetailStatistics.java <nl> + import java.net.URLEncoder; <nl> + 		 <nl> + 		public String getEncodeStatus() { <nl> + 			try { <nl> + 				return URLEncoder.encode(m_status, "utf-8"); <nl> + 			} catch (Exception e) { <nl> + 				return m_status; <nl> + 			} <nl> + 		} <nl> mmm Handler.java <nl> 
mmm ServerStatisticManager.java <nl> ppp ServerStatisticManager.java <nl> - 					m_currentMunite = time; <nl> + 					m_currentMunite = time; <nl> mmm CachedMetricReportServiceImpl.java <nl> ppp CachedMetricReportServiceImpl.java <nl> mmm Handler.java <nl> ppp Handler.java <nl> + 				 <nl> - 					seconds = (report.getEndTime().getTime() - report.getStartTime().getTime()) / (double) 1000; <nl> 
mmm Model.java <nl> ppp Model.java <nl> + 	private String m_mobileResponse; <nl> + 	 <nl> + 	public String getMobileResponse() { <nl> + 	return m_mobileResponse; <nl> + } <nl> + 	public void setMobileResponse(String mobileResponse) { <nl> + 	m_mobileResponse = mobileResponse; <nl> + } <nl> mmm AllTests.java <nl> 
new file <nl> ppp PrepareParameterPacket.java <nl> + package com.dianping.bee.engine.spi.handler.internal; <nl> + import java.nio.ByteBuffer; <nl> + import com.alibaba.cobar.net.FrontendConnection; <nl> + import com.alibaba.cobar.net.util.BufferUtil; <nl> + import com.alibaba.cobar.protocol.MySQLPacket; <nl> 
mmm ProblemReportMerger.java <nl> ppp ProblemReportMerger.java <nl> + import com.dianping.cat.consumer.problem.model.entity.Entry; <nl> + import com.dianping.cat.consumer.problem.model.entity.Segment; <nl> + 	@Override <nl> + protected void mergeEntry(Entry old, Entry entry) { <nl> + 	   super.mergeEntry(old, entry); <nl> 
mmm AppData.java <nl> ppp AppData.java <nl> + 	 <nl> mmm BucketHandler.java <nl> ppp BucketHandler.java <nl> - 	public final static String SAVE_PATH = "/data/appdatas/cat/app-data-save/"; <nl> + 	protected void batchInsert(List<AppDataCommand> appDataCommands) { <nl> + 		try { <nl> + 			int length = appDataCommands.size(); <nl> 
deleted file <nl> mmm TopReportVisitor.java <nl> - package com.dianping.cat.report.alert.exception; <nl> - import org.unidal.lookup.annotation.Inject; <nl> - import com.dianping.cat.configuration.ServerConfigManager; <nl> - import com.dianping.cat.consumer.top.model.entity.Domain; <nl> - import com.dianping.cat.consumer.top.model.entity.Error; <nl> 
mmm TopologyGraphManager.java <nl> ppp TopologyGraphManager.java <nl> - import com.dianping.cat.consumer.advanced.ProductLineConfigManager; <nl> + import com.dianping.cat.consumer.metric.ProductLineConfigManager; <nl> mmm MetricAnalyzerTest.java <nl> ppp MetricAnalyzerTest.java <nl> - package com.dianping.cat.consumer.advanced; <nl> 
mmm ReportFacade.java <nl> ppp ReportFacade.java <nl> + import com.dianping.cat.report.task.matrix.MatrixReportBuilder; <nl> + 	 <nl> + 	@Inject <nl> + 	private MatrixReportBuilder m_matrixReportBuilder; <nl> + 		m_reportBuilders.put("matrix", m_matrixReportBuilder); <nl> mmm DefaultMessagePathBuilderTest.java <nl> 
mmm CatServlet.java <nl> ppp CatServlet.java <nl> - import com.dianping.cat.report.task.TaskConsumer; <nl> - 			 <nl> - 			Threads.forGroup("Cat").start(lookup(TaskConsumer.class)); <nl> - 			throw new RuntimeException("Error when initializing CatServlet, " + "please make sure the environment was setup correctly!", e); <nl> 
mmm NotifyTaskBuilder.java <nl> ppp NotifyTaskBuilder.java <nl> + 	 <nl> - 	private String renderContent(String names, String domain, Date start) { <nl> + 	private String renderContent(String names, String domain) { <nl> - 		Date end = new Date(start.getTime() + TimeUtil.ONE_DAY); <nl> + 		Date end = TimeUtil.getCurrentDay(); <nl> 
mmm URIParsedResult.java <nl> ppp URIParsedResult.java <nl> - if (protocolEnd < 0) { <nl> - } else if (isColonFollowedByPortNumber(uri, protocolEnd)) { <nl> + if (protocolEnd < 0 || isColonFollowedByPortNumber(uri, protocolEnd)) { <nl> mmm DecoderTest.java <nl> ppp DecoderTest.java <nl> + * @throws FormatException <nl> 
new file <nl> ppp CmsCategoryTagExample.java <nl> + package com.zheng.cms.model; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + public class CmsCategoryTagExample { <nl> + protected String orderByClause; <nl> + protected boolean distinct; <nl> + protected List<Criteria> oredCriteria; <nl> 
mmm JobManagerThread.java <nl> ppp JobManagerThread.java <nl> - import java.util.concurrent.TimeUnit; <nl> - final ConsumerController consumerController; <nl> + final ConsumerManager mConsumerManager; <nl> - consumerController = new ConsumerController(this, timer, messageFactory, config); <nl> + mConsumerManager = new ConsumerManager(this, timer, messageFactory, config); <nl> 
mmm SQLSerializer.java <nl> ppp SQLSerializer.java <nl> - import com.mysema.query.sql.types.Null; <nl> - import com.mysema.query.support.Expressions; <nl> - private static final Expression Q = Expressions.template(Object.class, "?"); <nl> - for (Object o : ((Collection) constant)) { <nl> + for (Object o : ((Collection)constant)) { <nl> 
mmm MetaDataExporterTest.java <nl> ppp MetaDataExporterTest.java <nl> + @Test <nl> + public void minimal_configuration_only_direct_foreign_keys() throws SQLException { <nl> + MetaDataExporter exporter = new MetaDataExporter(); <nl> + exporter.setSchemaPattern("PUBLIC"); <nl> + exporter.setPackageName("test"); <nl> 
mmm JDOQLSerializer.java <nl> ppp JDOQLSerializer.java <nl> - return new JDOQuery<Void>().select(expr).distinct(); <nl> + return select(expr).distinct(); <nl> - return new JDOQuery<Void>().select(exprs).distinct(); <nl> + return select(exprs).distinct(); <nl> mmm JDOSQLQuery.java <nl> ppp JDOSQLQuery.java <nl> 
mmm ListPath.java <nl> ppp ListPath.java <nl> - import com.querydsl.core.types.Expression; <nl> - import com.querydsl.core.types.Path; <nl> - import com.querydsl.core.types.PathImpl; <nl> - import com.querydsl.core.types.PathMetadata; <nl> - import com.querydsl.core.types.PathMetadataFactory; <nl> - import com.querydsl.core.types.Visitor; <nl> 
mmm SQLTemplates.java <nl> ppp SQLTemplates.java <nl> - import com.querydsl.sql.dml.SQLInsertBatch; <nl> - public void serializeInsert(QueryMetadata metadata, RelationalPath<?> entity, <nl> - List<SQLInsertBatch> batches, SQLSerializer context) { <nl> - context.serializeForInsert(metadata, entity, batches); <nl> 
mmm JodaTest.java <nl> ppp JodaTest.java <nl> - public abstract class BaseEntity { <nl> + public abstract static class BaseEntity { <nl> mmm JPAExporterMojo.java <nl> ppp JPAExporterMojo.java <nl> + import com.querydsl.codegen.PropertyHandling; <nl> + public final BooleanExpression notIn(Expression<? extends T>... right) { <nl> 
mmm AbstractJDOQuery.java <nl> ppp AbstractJDOQuery.java <nl> - import javax.jdo.JDOUserException; <nl> + import com.querydsl.core.types.dsl.CollectionPath; <nl> mmm JDOQLTemplates.java <nl> ppp JDOQLTemplates.java <nl> mmm JDODeleteClause.java <nl> ppp JDODeleteClause.java <nl> mmm JDOQueryMixin.java <nl> ppp JDOQueryMixin.java <nl> 
mmm SQLInsertClause.java <nl> ppp SQLInsertClause.java <nl> - @Override <nl> - public void clear() { <nl> - batches.clear(); <nl> - columns.clear(); <nl> - values.clear(); <nl> - subQuery = null; <nl> - } <nl> mmm SelectBase.java <nl> ppp SelectBase.java <nl> - assertEquals(100, query().with(employee2, query().from(employee) <nl> 
mmm DummySerializer.java <nl> ppp DummySerializer.java <nl> - class DummySerializer extends SerializerBase<DummySerializer>{ <nl> + public class DummySerializer extends SerializerBase<DummySerializer>{ <nl> mmm SelectBase.java <nl> ppp SelectBase.java <nl> + @Test <nl> + public void Case() { <nl> + NumberExpression<Float> numExpression = employee.salary.floatValue().divide(employee2.salary.floatValue()).multiply(100.1); <nl> 
mmm JPAUtil.java <nl> ppp JPAUtil.java <nl> - import javax.persistence.Parameter; <nl> - import javax.persistence.Query; <nl> + import javax.persistence.Query; <nl> - import com.mysema.util.MathUtils; <nl> - import java.math.BigInteger; <nl> - import java.sql.Types; <nl> - import java.util.List; <nl> + import java.math.BigInteger; <nl> 
mmm BooleanBuilder.java <nl> ppp BooleanBuilder.java <nl> - * @param mapPath <nl> + * @param target <nl> - * @param collectionPath <nl> + * @param target <nl> - * @param mapPath <nl> + * @param target <nl> mmm Group.java <nl> ppp Group.java <nl> mmm SQLQuery.java <nl> ppp SQLQuery.java <nl> - import java.sql.Connection; <nl> 
mmm SQLSerializer.java <nl> ppp SQLSerializer.java <nl> - boolean handled = false; <nl> + List<Expression<?>> withFlags = Lists.newArrayList(); <nl> - if (handled) { <nl> - append(", "); <nl> - } <nl> - handle(flag.getFlag()); <nl> - handled = true; <nl> + withFlags.add(flag.getFlag()); <nl> - if (handled) { <nl> 
mmm PointExpression.java <nl> ppp PointExpression.java <nl> - package com.mysema.query.types.spatial; <nl> + package com.mysema.query.spatial; <nl> - import com.mysema.query.types.Ops; <nl> - x = NumberOperation.create(Double.class, Ops.SpatialOps.X, mixin); <nl> + x = NumberOperation.create(Double.class, SpatialOps.X, mixin); <nl> 
mmm GroupImpl.java <nl> ppp GroupImpl.java <nl> - import java.util.*; <nl> + import java.util.ArrayList; <nl> + import java.util.LinkedHashMap; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import java.util.NoSuchElementException; <nl> + import java.util.Set; <nl> - @Override <nl> - public <K, V> SortedMap<K, V> getSortedMap(Expression<K> key, Expression<V> value) { <nl> 
mmm JPASubQuery.java <nl> ppp JPASubQuery.java <nl> - public final class JPASubQuery extends AbstractJPASubQuery<JPASubQuery> { <nl> + public class JPASubQuery extends AbstractJPASubQuery<JPASubQuery> { <nl> mmm MorphiaQuery.java <nl> ppp MorphiaQuery.java <nl> - public final class MorphiaQuery<K> extends MongodbQuery<K> { <nl> 
mmm TeradataTemplates.java <nl> ppp TeradataTemplates.java <nl> + setDefaultValues("\ndefault values"); <nl> mmm ColumnMetadata.java <nl> ppp ColumnMetadata.java <nl> - return new ColumnMetadata(null, name, null, true, UNDEFINED, UNDEFINED); <nl> + return new ColumnMetadata(name, null, true, UNDEFINED, UNDEFINED); <nl> 
mmm SQLOps.java <nl> ppp SQLOps.java <nl> + @Deprecated <nl> + @Deprecated <nl> + @Deprecated <nl> mmm JPQLTemplates.java <nl> ppp JPQLTemplates.java <nl> - public String asLiteral(Object constant) { <nl> - if (constant instanceof Boolean) { <nl> - return constant.toString(); <nl> - } else if (constant instanceof Number) { <nl> 
mmm RelationalFunctionCallTest.java <nl> ppp RelationalFunctionCallTest.java <nl> - public class AbstractJPASubQuery<Q extends AbstractJPASubQuery<Q>> extends DetachableQuery<Q> implements JPQLSubQuery { <nl> + public class AbstractJPASubQuery<Q extends AbstractJPASubQuery<Q>> extends DetachableQuery<Q> implements JPQLSubQuery { <nl> 
mmm DefaultNamingStrategy.java <nl> ppp DefaultNamingStrategy.java <nl> - if (tableName.length() > 1) { <nl> - return tableName.substring(0, 1).toUpperCase(Locale.ENGLISH) + <nl> - toCamelCase(tableName.substring(1)); <nl> - } else { <nl> - return tableName.toUpperCase(Locale.ENGLISH); <nl> - } <nl> + String className = tableName.substring(0, 1).toUpperCase(Locale.ENGLISH) + <nl> 
mmm LuceneQueryTest.java <nl> ppp LuceneQueryTest.java <nl> - @Test <nl> - public void Between() { <nl> - assertEquals(3, query.where(year.between(1950, 1990)).fetchCount()); <nl> - } <nl> new file <nl> ppp LabelRule.java <nl> + package com.querydsl.core.testutil; <nl> + import java.lang.reflect.Method; <nl> + import java.util.Arrays; <nl> 
mmm CollectionAnyTest.java <nl> ppp CollectionAnyTest.java <nl> - @Test <nl> - public void any_null() { <nl> - Cat a = new Cat("a"); <nl> - a.setKittens(null); <nl> - assertEquals(0, CollQueryFactory.from(cat, Arrays.asList(a)) <nl> - .where(cat.kittens.any().name.startsWith("a")).fetchCount()); <nl> - } <nl> 
mmm BeanSerializerTest.java <nl> ppp BeanSerializerTest.java <nl> - assertTrue(String.valueOf(writer).contains( <nl> - "    @Override\n" <nl> - + "    public String toString()")); <nl> mmm SetPath.java <nl> ppp SetPath.java <nl> - import com.querydsl.core.types.*; <nl> + import com.querydsl.core.types.Path; <nl> 
mmm GeometryWktClobType.java <nl> ppp GeometryWktClobType.java <nl> - return Wkt.newDecoder(Wkt.Dialect.POSTGIS_EWKT_1).decode(str); <nl> + return Wkt.newWktDecoder(Wkt.Dialect.POSTGIS_EWKT_1).decode(str); <nl> - String str = Wkt.newEncoder(Wkt.Dialect.POSTGIS_EWKT_1).encode(value); <nl> + String str = Wkt.newWktEncoder(Wkt.Dialect.POSTGIS_EWKT_1).encode(value); <nl> 
mmm SQLListener.java <nl> ppp SQLListener.java <nl> + import java.util.Map; <nl> - import com.mysema.commons.lang.Pair; <nl> - import com.querydsl.sql.dml.SQLInsertBatch; <nl> - import com.querydsl.sql.dml.SQLMergeBatch; <nl> - import com.querydsl.sql.dml.SQLUpdateBatch; <nl> + import com.querydsl.sql.dml.SQLInsertBatch; <nl> 
mmm SQLSerializerTest.java <nl> ppp SQLSerializerTest.java <nl> - import static org.junit.Assert.assertEquals; <nl> - import static org.junit.Assert.assertFalse; <nl> + import static org.junit.Assert.assertEquals; <nl> - @Test <nl> - public void Keyword_After_Dot() { <nl> - SQLQuery query = new SQLQuery(MySQLTemplates.DEFAULT); <nl> 
mmm SelectBase.java <nl> ppp SelectBase.java <nl> - @Test <nl> - public void Array() { <nl> - Expression<Integer[]> expr = Expressions.template(Integer[].class, "'{1,2,3}'::int[]"); <nl> - Integer[] result = query().singleResult(expr); <nl> - assertEquals(3, result.length); <nl> - assertEquals(1, result[0].intValue()); <nl> 
mmm MySQLWithQuotingTest.java <nl> ppp MySQLWithQuotingTest.java <nl> + public static class KeywordQuoting extends KeywordQuotingBase {} <nl> mmm CUBRIDSuiteTest.java <nl> ppp CUBRIDSuiteTest.java <nl> + public static class KeywordQuoting extends KeywordQuotingBase {} <nl> mmm HsqldbLiteralsSuiteTest.java <nl> 
mmm PostgreSQLTemplates.java <nl> ppp PostgreSQLTemplates.java <nl> - import java.util.Set; <nl> - import com.google.common.collect.ImmutableSet; <nl> - protected static final Set<String> POSTGRESQL_RESERVED_WORDS <nl> - = ImmutableSet.of( <nl> - "ALL", "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", <nl> 
mmm CollQueryMixin.java <nl> ppp CollQueryMixin.java <nl> - public CollQueryMixin() {} <nl> + public CollQueryMixin() { } <nl> - predicate = (Predicate)ExpressionUtils.extract(predicate); <nl> + predicate = (Predicate) ExpressionUtils.extract(predicate); <nl> - (Path)context.paths.get(i).getMetadata().getParent(), <nl> 
mmm ArrayType.java <nl> ppp ArrayType.java <nl> + import com.google.common.primitives.Primitives; <nl> - public class ArrayType<T> extends AbstractType<T[]> { <nl> + public class ArrayType<T> extends AbstractType<T> { <nl> + private static void copy(Object source, Object target, int length) { <nl> + for (int i = 0; i < length; i++) { <nl> 
deleted file <nl> mmm ChangeLetterCaseNameMapping.java <nl> - package com.querydsl.sql.namemapping; <nl> - import java.util.Locale; <nl> - import com.google.common.base.Optional; <nl> - import com.google.common.base.Preconditions; <nl> - import com.querydsl.sql.SchemaAndTable; <nl> - public class ChangeLetterCaseNameMapping implements NameMapping { <nl> 
mmm FilteringMultiIterator.java <nl> ppp FilteringMultiIterator.java <nl> + import com.mysema.commons.lang.Assert; <nl> - import com.mysema.util.Assert; <nl> + import com.mysema.commons.lang.Assert; <nl> - import com.mysema.util.Assert; <nl> - package com.mysema.util; <nl> - import org.apache.commons.lang.StringUtils; <nl> 
mmm Hierarchy2Test.java <nl> ppp Hierarchy2Test.java <nl> - static class A { <nl> + public static class A { <nl> - static class SomeEntity extends SomeMappedSuperClassHavingMyEmbeddable { <nl> + public static class SomeEntity extends SomeMappedSuperClassHavingMyEmbeddable { <nl> mmm HierarchyTest.java <nl> 
mmm AbstractBaseTest.java <nl> ppp AbstractBaseTest.java <nl> - import java.util.List; <nl> - return new SQLUpdateClause(connection, configuration, e); <nl> + SQLUpdateClause sqlUpdateClause = new SQLUpdateClause(connection, configuration, e); <nl> + sqlUpdateClause.addListener(new TestLoggingListener()); <nl> 
mmm Serializers.java <nl> ppp Serializers.java <nl> - public static final Serializer ENTITY = new EntitySerializer(false); <nl> + public static final Serializer ENTITY = new EntitySerializer(); <nl> - public static final Serializer EMBEDDABLE = new EntitySerializer(true); <nl> + public static final Serializer EMBEDDABLE = new EmbeddableSerializer(); <nl> 
mmm SonicSessionStatistics.java <nl> ppp SonicSessionStatistics.java <nl> mmm SonicRuntimeImpl.java <nl> ppp SonicRuntimeImpl.java <nl> - return ""; <nl> + return "Mozilla/5.0 (Linux; Android 5.1.1; Nexus 6 Build/LYZ28E) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Mobile Safari/537.36"; <nl> 
mmm ExampleInstrumentedTest.java <nl> ppp ExampleInstrumentedTest.java <nl> mmm SonicEngine.java <nl> ppp SonicEngine.java <nl> - sonicSession.addCallback(sessionCallback); <nl> + sonicSession.addSessionStateChangedCallback(sessionCallback); <nl> + SonicFileUtils.checkAndTrimResourceCache(); <nl> + public final static String HTTP_HEAD_FIELD_CONTENT_LENGTH = "Content-Length"; <nl> 
deleted file <nl> mmm BaseSonicTest.java <nl> - package com.tencent.sonic.sdk; <nl> - import android.os.Handler; <nl> - import android.os.Looper; <nl> - import android.os.Message; <nl> - import android.support.test.InstrumentationRegistry; <nl> - import android.util.Log; <nl> - import android.webkit.WebResourceResponse; <nl> 
mmm SonicFileUtils.java <nl> ppp SonicFileUtils.java <nl> - import java.util.Arrays; <nl> - import java.util.Collections; <nl> - import java.util.Comparator; <nl> + import java.util.ArrayList; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + import java.util.Set; <nl> + private static final String HEADER_EXT = ".header"; <nl> 
mmm SentinelApiClient.java <nl> ppp SentinelApiClient.java <nl> + import com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayFlowRule; <nl> + import com.alibaba.csp.sentinel.dashboard.datasource.entity.gateway.ApiDefinitionEntity; <nl> + import com.alibaba.csp.sentinel.dashboard.datasource.entity.gateway.GatewayFlowRuleEntity; <nl> 
mmm FooServiceImpl.java <nl> ppp FooServiceImpl.java <nl> - import java.time.LocalDateTime; <nl> + import java.time.LocalDateTime; <nl> + @Override <nl> + public String exceptionTest(boolean biz, boolean timeout) { <nl> + if (biz) { <nl> + throw new RuntimeException("biz exception"); <nl> + } <nl> + if (timeout) { <nl> 
mmm GifFrameLoaderTest.java <nl> ppp GifFrameLoaderTest.java <nl> + import static org.robolectric.annotation.LooperMode.Mode.LEGACY; <nl> + import org.robolectric.annotation.LooperMode; <nl> + @LooperMode(LEGACY) <nl> mmm RequestManagerRetrieverTest.java <nl> ppp RequestManagerRetrieverTest.java <nl> + import static org.robolectric.annotation.LooperMode.Mode.LEGACY; <nl> 
mmm ListPreloader.java <nl> ppp ListPreloader.java <nl> - preloadTargetQueue = new PreloadTargetQueue(maxPreload); <nl> + preloadTargetQueue = new PreloadTargetQueue(maxPreload + 1); <nl> - * @return A non null {@link Glide.Request}. <nl> + * @return A non null {@link Glide.RequestBuilder}. <nl> - protected abstract Glide.Request getRequest(T item); <nl> 
new file <nl> ppp DefaultConnectivityMonitor.java <nl> + package com.bumptech.glide.manager; <nl> + import android.content.BroadcastReceiver; <nl> + import android.content.Context; <nl> + import android.content.Intent; <nl> + import android.content.IntentFilter; <nl> + import android.net.ConnectivityManager; <nl> 
mmm GifBitmapTransformation.java <nl> ppp GifBitmapTransformation.java <nl> - GifData newData = new GifData(context, gifData.getGifDecoder(), newTransformation); <nl> - return new GifBitmapResource(new GifBitmap(null, new GifResource(newData))); <nl> + gifData.setFrameTransformation(newTransformation); <nl> 
new file <nl> ppp EngineTest.java <nl> + package com.bumptech.glide.resize; <nl> + import com.bumptech.glide.loader.bitmap.resource.ResourceFetcher; <nl> + import com.bumptech.glide.resize.cache.ResourceCache; <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> + import java.io.InputStream; <nl> 
mmm DefaultConfigurationTest.java <nl> ppp DefaultConfigurationTest.java <nl> - public void testDefaultMultiThreadConfiguration() throws Exception { <nl> + public void testDefaultMultiThreadConfiguration() { <nl> - public void testMultiThreadConfiguration() throws Exception { <nl> + public void testMultiThreadConfiguration() { <nl> 
mmm HiddenFieldCheck.java <nl> ppp HiddenFieldCheck.java <nl> - import org.apache.commons.beanutils.ConversionException; <nl> - public void setIgnoreFormat(String format) <nl> - throws ConversionException { <nl> + public void setIgnoreFormat(String format) { <nl> mmm SuppressionCommentFilter.java <nl> ppp SuppressionCommentFilter.java <nl> 
mmm AbstractComplexityCheck.java <nl> ppp AbstractComplexityCheck.java <nl> - log(aAST, getMessageID(), <nl> - mCurrentValue, <nl> - max); <nl> + log(aAST, getMessageID(), mCurrentValue, max); <nl> mmm MethodChecker.java <nl> ppp MethodChecker.java <nl> - protected void log(DetailAST aMethodAST, String aKey, Object[] aArgs) <nl> 
mmm FileText.java <nl> ppp FileText.java <nl> + import org.apache.commons.lang3.ArrayUtils; <nl> + public FileText(FileText fileText) { <nl> + this.file = fileText.file; <nl> + this.charset = fileText.charset; <nl> + this.fullText = fileText.fullText; <nl> + this.lines = fileText.lines.clone(); <nl> + this.lineBreaks = ArrayUtils.clone(fileText.lineBreaks); <nl> 
mmm AbstractHeaderCheck.java <nl> ppp AbstractHeaderCheck.java <nl> - postprocessHeaderLines(); <nl> + postProcessHeaderLines(); <nl> - protected void postprocessHeaderLines() { <nl> + protected void postProcessHeaderLines() { <nl> mmm LeftCurlyCheck.java <nl> ppp LeftCurlyCheck.java <nl> - * of the first token afer all annotations is return. This might be <nl> 
new file <nl> ppp InputBlockCommentPositionOnClass.java <nl> + package com.puppycrawl.tools.checkstyle.utils.blockcommentposition; <nl> + public class InputBlockCommentPositionOnClass { <nl> + } <nl> + class JavaDocOnClass1 { <nl> + } <nl> + @Deprecated <nl> + class JavaDocOnClass2 { <nl> + } <nl> mmm AnnotationUtilityTest.java <nl> 
mmm DynamicBrokersReader.java <nl> ppp DynamicBrokersReader.java <nl> - Map<Object, Object> value = (Map<Object, Object>) JSONValue.parse(new String(hostPortData, "UTF-8")); <nl> + Map<Object, Object> value = (Map<Object, Object>) JSONValue.parseWithException(new String(hostPortData, "UTF-8")); <nl> - Map<Object, Object> value = (Map<Object, Object>) JSONValue.parse(new String(contents, "UTF-8")); <nl> 
deleted file <nl> mmm ClusterStateData.java <nl> - package org.apache.storm.scheduler.resource; <nl> - import org.apache.storm.scheduler.Cluster; <nl> - import org.apache.storm.scheduler.ExecutorDetails; <nl> - import org.apache.storm.scheduler.Topologies; <nl> - import org.apache.storm.scheduler.TopologyDetails; <nl> 
mmm RichSpoutBatchTriggerer.java <nl> ppp RichSpoutBatchTriggerer.java <nl> + import backtype.storm.Config; <nl> - return _delegate.getComponentConfiguration(); <nl> + Map<String, Object> conf = _delegate.getComponentConfiguration(); <nl> + if(conf==null) conf = new HashMap(); <nl> + else conf = new HashMap(conf); <nl> 
new file <nl> ppp KeyFactory.java <nl> + package org.apache.storm.redis.trident.state; <nl> + import java.io.Serializable; <nl> + import java.util.List; <nl> + public interface KeyFactory extends Serializable { <nl> + 	String build(List<Object> key); <nl> + 	class DefaultKeyFactory implements KeyFactory { <nl> 
new file <nl> ppp PlainSaslTransportPlugin.java <nl> + package org.apache.storm.security.auth.plain; <nl> + import org.apache.storm.security.auth.AuthUtils; <nl> + import org.apache.storm.security.auth.SaslTransportPlugin; <nl> + import org.apache.thrift.transport.TSaslClientTransport; <nl> + import org.apache.thrift.transport.TSaslServerTransport; <nl> 
deleted file <nl> mmm NoOutputException.java <nl> - package backtype.storm.multilang; <nl> - public class NoOutputException extends Exception { <nl> - public NoOutputException() { <nl> - super(); <nl> - } <nl> - public NoOutputException(String message) { <nl> - super(message); <nl> - } <nl> - public NoOutputException(String message, Throwable cause) { <nl> 
mmm ExponentialBackoffMsgRetryManagerTest.java <nl> ppp ExponentialBackoffMsgRetryManagerTest.java <nl> + import org.apache.storm.utils.Time; <nl> + import org.junit.After; <nl> + import org.junit.Before; <nl> + @Before <nl> + public void setup() throws Exception { <nl> + Time.startSimulating(); <nl> + } <nl> 
mmm DRPCServer.java <nl> ppp DRPCServer.java <nl> - import com.codahale.metrics.Meter; <nl> - import com.google.common.annotations.VisibleForTesting; <nl> + import com.codahale.metrics.Meter; <nl> + import com.google.common.annotations.VisibleForTesting; <nl> - private static final Meter meterShutdownCalls = StormMetricsRegistry.registerMeter("drpc:num-shutdown-calls"); <nl> 
mmm Nimbus.java <nl> ppp Nimbus.java <nl> - @Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-28") <nl> + @Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-24") <nl> - public TopologyPageInfo getTopologyPageInfo(String id, String window, boolean is_include_sys) throws NotAliveException, AuthorizationException, org.apache.thrift.TException; <nl> 
deleted file <nl> mmm SupervisorData.java <nl> - package org.apache.storm.daemon.supervisor; <nl> - import org.apache.storm.Config; <nl> - import org.apache.storm.StormTimer; <nl> - import org.apache.storm.cluster.ClusterStateContext; <nl> - import org.apache.storm.cluster.ClusterUtils; <nl> - import org.apache.storm.cluster.DaemonType; <nl> 
mmm RAS_Node.java <nl> ppp RAS_Node.java <nl> - LOG.debug("Found a {} Node {} {}", <nl> - _isAlive ? "living" : "dead", _nodeId, sup.getAllPorts()); <nl> - LOG.debug("resources_mem: {}, resources_CPU: {}", sup.getTotalMemory(), sup.getTotalCPU()); <nl> - + ", AvailMem: " + ((_availMemory == null) ? "N/A" : _availMemory.toString()) <nl> 
deleted file <nl> mmm DRPCExceptionMapper.java <nl> - package org.apache.storm.daemon.drpc.webapp; <nl> - import java.util.HashMap; <nl> - import java.util.Map; <nl> - import javax.ws.rs.core.Response; <nl> - import javax.ws.rs.core.Response.ResponseBuilder; <nl> - import javax.ws.rs.ext.ExceptionMapper; <nl> 
mmm Time.java <nl> ppp Time.java <nl> - public static void sleepSecs (long secs) throws InterruptedException { <nl> - if (secs > 0) { <nl> - sleep(secs * 1000); <nl> - } <nl> - } <nl> - public static long secsToMillis (int secs) { <nl> - return 1000*(long) secs; <nl> - } <nl> - public static long secsToMillisLong(double secs) { <nl> 
new file <nl> ppp AbstractAvroSerializer.java <nl> + package org.apache.storm.hdfs.avro; <nl> + import com.esotericsoftware.kryo.Kryo; <nl> + import com.esotericsoftware.kryo.Serializer; <nl> + import com.esotericsoftware.kryo.io.Input; <nl> + import com.esotericsoftware.kryo.io.Output; <nl> + import org.apache.avro.Schema; <nl> 
new file <nl> ppp DelimitedRecordFormat.java <nl> + package org.apache.storm.hdfs.trident.format; <nl> + import backtype.storm.tuple.Fields; <nl> + import storm.trident.tuple.TridentTuple; <nl> + public class DelimitedRecordFormat implements RecordFormat { <nl> + public static final String DEFAULT_FIELD_DELIMITER = ","; <nl> 
deleted file <nl> mmm StormMqttIntegrationTest.java <nl> - package org.apache.storm.mqtt; <nl> - import org.apache.storm.Config; <nl> - import org.apache.storm.LocalCluster; <nl> - import org.apache.storm.generated.StormTopology; <nl> - import org.apache.storm.testing.IntegrationTest; <nl> - import org.apache.storm.topology.TopologyBuilder; <nl> 
mmm PerformanceTest.java <nl> ppp PerformanceTest.java <nl> + import java.lang.annotation.ElementType; <nl> + import java.lang.annotation.Inherited; <nl> + import java.lang.annotation.Retention; <nl> + import java.lang.annotation.RetentionPolicy; <nl> + import java.lang.annotation.Target; <nl> + import org.junit.jupiter.api.Tag; <nl> 
deleted file <nl> mmm AutoHBase.java <nl> - package org.apache.storm.hbase.security; <nl> - import backtype.storm.Config; <nl> - import backtype.storm.security.INimbusCredentialPlugin; <nl> - import backtype.storm.security.auth.IAutoCredentials; <nl> - import backtype.storm.security.auth.ICredentialsRenewer; <nl> 
mmm OpenTsdbMetricDatapoint.java <nl> ppp OpenTsdbMetricDatapoint.java <nl> - return "OpenTsdbMetricDataPoint{" <nl> - + "metric='" + metric + '\'' <nl> - + ", tags=" + tags <nl> - + ", timestamp=" + timestamp <nl> - + ", value=" + value <nl> - + '}'; <nl> + return "OpenTsdbMetricDataPoint{" + <nl> + "metric='" + metric + '\'' + <nl> 
mmm ZKStateChangedCallback.java <nl> ppp ZKStateChangedCallback.java <nl> - public interface Callback { <nl> - public <T> Object execute(T... args); <nl> - } <nl> + import org.apache.zookeeper.Watcher; <nl> + public interface ZKStateChangedCallback { <nl> + public void changed(Watcher.Event.EventType type, String path); <nl> 
mmm INimbus.java <nl> ppp INimbus.java <nl> - Collection<WorkerSlot> availableSlots(Collection<SupervisorDetails> existingSupervisors, Collection<WorkerSlot> usedSlots, TopologyDetails topology); <nl> + Collection<WorkerSlot> availableSlots(Collection<SupervisorDetails> existingSupervisors, Collection<WorkerSlot> usedSlots, Collection<TopologyDetails> topologies); <nl> 
new file <nl> ppp ConsolePreparableReporter.java <nl> + package org.apache.storm.daemon.metrics.reporters; <nl> + import com.codahale.metrics.ConsoleReporter; <nl> + import com.codahale.metrics.MetricRegistry; <nl> + import org.apache.storm.daemon.metrics.MetricsUtils; <nl> + import org.slf4j.Logger; <nl> + import org.slf4j.LoggerFactory; <nl> 
new file <nl> ppp FailedException.java <nl> + package backtype.storm.topology; <nl> + public class FailedException extends RuntimeException { <nl> + public FailedException() { <nl> + super(); <nl> + } <nl> + public FailedException(String msg) { <nl> + super(msg); <nl> + } <nl> + public FailedException(String msg, Throwable cause) { <nl> 
mmm PartitionManager.java <nl> ppp PartitionManager.java <nl> - if ((tups != null) && tups.iterator().hasNext()) { <nl> - if(_spoutConfig.topicAsStreamId) { <nl> - for (List<Object> tup : tups) { <nl> - collector.emit(_spoutConfig.topic, tup, new KafkaMessageId(_partition, toEmit.offset)); <nl> - } <nl> - } else { <nl> 
mmm TridentKafkaEmitter.java <nl> ppp TridentKafkaEmitter.java <nl> - import java.util.*; <nl> + import java.util.HashMap; <nl> + import java.util.HashSet; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> - _kafkaOffsetMetric = new KafkaUtils.KafkaOffsetMetric(_connections); <nl> + _kafkaOffsetMetric = new KafkaUtils.KafkaOffsetMetric(_config.topic, _connections); <nl> 
mmm ThriftClient.java <nl> ppp ThriftClient.java <nl> + Configuration loginConf = ClientAuthUtils.getConfiguration(conf); <nl> - ITransportPlugin transportPlugin = ClientAuthUtils.getTransportPlugin(type, conf); <nl> + ITransportPlugin transportPlugin = ClientAuthUtils.getTransportPlugin(type, conf, loginConf); <nl> 
mmm TopologyDetails.java <nl> ppp TopologyDetails.java <nl> + public String getComponentFromExecutor(ExecutorDetails exec) { <nl> + return executorToComponent.get(exec); <nl> + } <nl> - private static long getHbTimeoutMs(StaticState staticState, DynamicState dynamicState) { <nl> - long hbTimeoutMs = staticState.hbTimeoutMs; <nl> 
mmm EsLookupBolt.java <nl> ppp EsLookupBolt.java <nl> + import org.apache.storm.utils.TupleUtils; <nl> - public void execute(Tuple tuple) { <nl> + public void process(Tuple tuple) { <nl> mmm JdbcInsertBolt.java <nl> ppp JdbcInsertBolt.java <nl> + import org.apache.storm.utils.TupleUtils; <nl> - public void execute(Tuple tuple) { <nl> 
mmm SpoutConfig.java <nl> ppp SpoutConfig.java <nl> - public boolean topicAsStreamId = false; <nl> mmm Assignment.java <nl> ppp Assignment.java <nl> - @Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-3-5") <nl> + @Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-7") <nl> 
mmm TestUtils.java <nl> ppp TestUtils.java <nl> + import java.util.Arrays; <nl> + import java.util.HashMap; <nl> - RECORDS.add(new Values(i)); <nl> + RECORDS.add(new Values(i, "x", null)); <nl> + } <nl> + } <nl> + @Override <nl> + public void open(ChannelContext ctx) { <nl> + for (Values v : RECORDS) { <nl> + ctx.emit(v); <nl> 
mmm KafkaBolt.java <nl> ppp KafkaBolt.java <nl> - import storm.kafka.bolt.mapper.FieldNameBasedTupleToKafkaKeyAndMessageMapper; <nl> - import storm.kafka.bolt.mapper.TupleToKafkaKeyAndMessageMapper; <nl> + public static final String BOLT_KEY = "key"; <nl> + public static final String BOLT_MESSAGE = "message"; <nl> 
mmm JsonSerializer.java <nl> ppp JsonSerializer.java <nl> + Object nameObj = msg.get("name"); <nl> + String metricName = null; <nl> + if (nameObj != null && nameObj instanceof String) { <nl> + metricName = (String) nameObj; <nl> + } <nl> + shellMsg.setMetricName(metricName); <nl> + Object paramsObj = msg.get("params"); <nl> 
new file <nl> ppp TridentFileTopology.java <nl> + package org.apache.storm.hdfs.trident; <nl> + import backtype.storm.Config; <nl> + import backtype.storm.LocalCluster; <nl> + import backtype.storm.StormSubmitter; <nl> + import backtype.storm.generated.StormTopology; <nl> + import backtype.storm.tuple.Fields; <nl> 
mmm ExclamationTopology.java <nl> ppp ExclamationTopology.java <nl> - import com.google.common.collect.Lists; <nl> - import java.util.Collection; <nl> + import java.util.Map; <nl> + import org.apache.storm.spout.SpoutOutputCollector; <nl> + import org.apache.storm.st.topology.TestableTopology; <nl> + import org.apache.storm.st.utils.TimeUtil; <nl> 
deleted file <nl> mmm WordCountTopologyNode.java <nl> - package storm.starter; <nl> - import backtype.storm.Config; <nl> - import backtype.storm.LocalCluster; <nl> - import backtype.storm.StormSubmitter; <nl> - import backtype.storm.spout.ShellSpout; <nl> - import backtype.storm.task.ShellBolt; <nl> - import backtype.storm.topology.*; <nl> 
mmm MongoUpdateBolt.java <nl> ppp MongoUpdateBolt.java <nl> - try{ <nl> + try { <nl> mmm MongoMapState.java <nl> ppp MongoMapState.java <nl> + import java.io.Serializable; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> - import org.apache.storm.mongodb.common.MongoDBClient; <nl> 
mmm TestResourceAwareScheduler.java <nl> ppp TestResourceAwareScheduler.java <nl> - import java.util.ArrayList; <nl> - import java.util.Arrays; <nl> - import java.util.Collection; <nl> - import java.util.Collections; <nl> - import java.util.HashMap; <nl> - import java.util.HashSet; <nl> - import java.util.LinkedList; <nl> 
mmm GlobalPartitionInformation.java <nl> ppp GlobalPartitionInformation.java <nl> - public String topic; <nl> - private Boolean bUseTopicNameForPartitionPathId; <nl> - public GlobalPartitionInformation(String topic, Boolean bUseTopicNameForPartitionPathId) { <nl> - this.topic = topic; <nl> - this.partitionMap = new TreeMap<Integer, Broker>(); <nl> 
mmm KafkaUtils.java <nl> ppp KafkaUtils.java <nl> - import org.apache.storm.metric.api.IMetric; <nl> - import org.apache.storm.utils.Utils; <nl> - import kafka.api.FetchRequest; <nl> - import kafka.api.FetchRequestBuilder; <nl> - import kafka.api.PartitionOffsetRequestInfo; <nl> - import kafka.common.TopicAndPartition; <nl> 
mmm JCQueue.java <nl> ppp JCQueue.java <nl> - String topologyId, String componentId, Integer taskId, int port) { <nl> + String topologyId, String componentId, Integer taskId, int port, StormMetricRegistry metricRegistry) { <nl> - this.jcMetrics = StormMetricRegistry.jcMetrics(queueName, topologyId, componentId, taskId, port); <nl> 
mmm MaxUncommittedOffsetTest.java <nl> ppp MaxUncommittedOffsetTest.java <nl> + import org.apache.kafka.clients.consumer.KafkaConsumer; <nl> + import org.apache.storm.kafka.spout.internal.KafkaConsumerFactoryDefault; <nl> - this.spout = new KafkaSpout<>(spoutConfig); <nl> + spout = new KafkaSpout<>(spoutConfig); <nl> 
mmm KafkaSpoutRebalanceTest.java <nl> ppp KafkaSpoutRebalanceTest.java <nl> + import static org.apache.storm.kafka.spout.builders.SingleTopicKafkaSpoutConfiguration.getKafkaSpoutConfigBuilder; <nl> - import org.apache.storm.kafka.spout.config.builder.SingleTopicKafkaSpoutConfiguration; <nl> + import org.apache.storm.kafka.spout.builders.SingleTopicKafkaSpoutConfiguration; <nl> 
mmm Worker.java <nl> ppp Worker.java <nl> - conf); <nl> + ConfigUtils.maskPasswords(conf)); <nl> - LOG.info("Worker has topology config {}", Utils.redactValue(topologyConf, Config.STORM_ZOOKEEPER_TOPOLOGY_AUTH_PAYLOAD)); <nl> + LOG.info("Worker has topology config {}", ConfigUtils.maskPasswords(Utils.redactValue(topologyConf, <nl> 
new file <nl> ppp TestHiveWriter.java <nl> + package org.apache.storm.hive.common; <nl> + import com.google.common.util.concurrent.ThreadFactoryBuilder; <nl> + import junit.framework.Assert; <nl> + import org.apache.hadoop.hive.cli.CliSessionState; <nl> + import org.apache.hadoop.hive.conf.HiveConf; <nl> + import org.apache.hadoop.hive.ql.CommandNeedRetryException; <nl> 
deleted file <nl> mmm LogLevelAction.java <nl> - package backtype.storm.generated; <nl> - import java.util.Map; <nl> - import java.util.HashMap; <nl> - import org.apache.thrift.TEnum; <nl> - public enum LogLevelAction implements org.apache.thrift.TEnum { <nl> - UNCHANGED(1), <nl> - UPDATE(2), <nl> - REMOVE(3); <nl> 
mmm TestCLI.java <nl> ppp TestCLI.java <nl> + import static org.junit.Assert.fail; <nl> + @Test <nl> + public void testOptional() throws Exception { <nl> + Map<String, Object> values = CLI.optionalArg("A", CLI.LAST_WINS) <nl> + .parse("TEST"); <nl> + assertEquals(1, values.size()); <nl> + assertEquals("TEST", values.get("A")); <nl> 
mmm BlacklistScheduler.java <nl> ppp BlacklistScheduler.java <nl> - import java.util.concurrent.Callable; <nl> - StormMetricsRegistry.registerGauge("nimbus:num-blacklisted-supervisor", new Callable<Integer>() { <nl> - @Override <nl> - public Integer call() throws Exception { <nl> - return blacklistHost.size(); <nl> 
mmm SolrStateFactory.java <nl> ppp SolrStateFactory.java <nl> - public State makeState(Map<String, Object> map, IMetricsContext metricsContext, int partitionIndex, int numPartitions) { <nl> + public State makeState(Map<String, Object> map, IMetricsContext iMetricsContext, int partitionIndex, int numPartitions) { <nl> 
mmm HomeBangumiRecommendAdapter.java <nl> ppp HomeBangumiRecommendAdapter.java <nl> - import android.annotation.SuppressLint; <nl> - import java.util.ArrayList; <nl> - public class SecondElementBangumiAdapter extends AbsRecyclerViewAdapter <nl> + public class HomeBangumiRecommendAdapter extends AbsRecyclerViewAdapter <nl> 
mmm BiliBiliLivePlayerActivity.java <nl> ppp BiliBiliLivePlayerActivity.java <nl> - package com.hotbitmapgg.ohmybilibili.module.video; <nl> + package com.hotbitmapgg.ohmybilibili.module.home.live; <nl> mmm HomeBangumiFragment.java <nl> ppp HomeBangumiFragment.java <nl> - package com.hotbitmapgg.ohmybilibili.module.home; <nl> 
mmm GwtSerialization.java <nl> ppp GwtSerialization.java <nl> + import com.google.common.collect.Multimap; <nl> - vars.builderSetterNames = autoVars.builderSetterNames; <nl> + vars.builderSetters = autoVars.builderSetters; <nl> + "_CustomFieldSerializer"; <nl> - Map<String, String> builderSetterNames; <nl> 
mmm InMemoryJavaFileManager.java <nl> ppp InMemoryJavaFileManager.java <nl> - package com.google.auto.factory.gentest; <nl> + package com.google.testing.compile; <nl> mmm JavaSourceSubjectFactoryTest.java <nl> ppp JavaSourceSubjectFactoryTest.java <nl> - package com.google.auto.factory.gentest; <nl> + package com.google.testing.compile; <nl> 
deleted file <nl> mmm AbstractMethodExtractor.java <nl> - package com.google.auto.value; <nl> - import java.util.ArrayDeque; <nl> - import java.util.ArrayList; <nl> - import java.util.Deque; <nl> - import java.util.HashMap; <nl> - import java.util.List; <nl> - import java.util.Map; <nl> - final class AbstractMethodExtractor { <nl> 
mmm ConnectionPoolUtil.java <nl> ppp ConnectionPoolUtil.java <nl> - private static String getDataSourceName( DatabaseMeta dbMeta, String partitionId ) { <nl> - return dbMeta.getName() + Const.NVL( dbMeta.getDatabaseName(), "" ) + Const.NVL( dbMeta.getHostname(), "" ) <nl> - + Const.NVL( dbMeta.getDatabasePortNumberString(), "" ) + Const.NVL( partitionId, "" ); <nl> 
mmm TableView.java <nl> ppp TableView.java <nl> + if ( i == 0 ) { <nl> + rect.width = rect.x; <nl> + rect.x = 0; <nl> + } <nl> + if ( columns.length == 0 ) { <nl> + return; <nl> + } <nl> mmm ExcelInputMetaTest.java <nl> ppp ExcelInputMetaTest.java <nl> + import org.apache.commons.lang.SystemUtils; <nl> + import org.junit.Assert; <nl> 
mmm Const.java <nl> ppp Const.java <nl> - public static final String KETTLE_COMPATIBILITY_MERGE_ROWS_USE_REFERENCE_STREAM_WHEN_IDENTICAL = <nl> - "KETTLE_COMPATIBILITY_MERGE_ROWS_USE_REFERENCE_STREAM_WHEN_IDENTICAL"; <nl> - public static final long round( long f, int places, int roundingMode ) { <nl> - if ( places >= 0 ) { <nl> 
mmm GetTransStatusServlet.java <nl> ppp GetTransStatusServlet.java <nl> + transStatus.setLogDate( trans.getLogDate() ); <nl> mmm SlaveServerJobStatus.java <nl> ppp SlaveServerJobStatus.java <nl> + import java.util.Date; <nl> + private Date logDate; <nl> - xml.append( "<" + XML_TAG + ">" ).append( Const.CR ); <nl> 
new file <nl> ppp JobEntryFTPPUTTest.java <nl> + package org.pentaho.di.job.entries.ftpput; <nl> + import org.junit.After; <nl> + import org.junit.AfterClass; <nl> + import org.junit.Before; <nl> + import org.junit.BeforeClass; <nl> + import org.junit.Test; <nl> + import org.junit.rules.TemporaryFolder; <nl> 
new file <nl> ppp RepositoryExporterExtension.java <nl> + package org.pentaho.di.trans.steps.metainject; <nl> + import org.apache.commons.vfs2.FileObject; <nl> + import org.apache.commons.vfs2.FileSystemException; <nl> + import org.pentaho.di.core.Const; <nl> + import org.pentaho.di.core.ObjectLocationSpecificationMethod; <nl> 
mmm JobFileListener.java <nl> ppp JobFileListener.java <nl> - return spoon.saveMeta( lmeta, fname ); <nl> + try { <nl> + ExtensionPointHandler.callExtensionPoint( spoon.getLog(), KettleExtensionPoint.JobBeforeSave.id, lmeta ); <nl> + } catch ( KettleException e ) { <nl> + } <nl> + boolean saveStatus = spoon.saveMeta( lmeta, fname ); <nl> 
mmm ShapeFileReaderData.java <nl> ppp ShapeFileReaderData.java <nl> - import org.pentaho.di.core.row.RowMetaInterface; <nl> - import org.pentaho.di.trans.step.BaseStepData; <nl> - import org.pentaho.di.trans.step.StepDataInterface; <nl> - import org.pentaho.gis.shapefiles.ShapeFile; <nl> + import org.pentaho.di.core.row.RowMetaInterface; <nl> 
mmm GetTransStatusServlet.java <nl> ppp GetTransStatusServlet.java <nl> + import org.pentaho.di.core.util.EnvUtil; <nl> + BaseMessages.getString( PKG, "TransStatusServlet.KettleTransStatus" ) + "</TITLE>" ); <nl> - out.println( "<META http-equiv=\"Refresh\" content=\"10;url=" <nl> - + convertContextPath( CONTEXT_PATH ) + "?name=" + URLEncoder.encode( transName, "UTF-8" ) + "&id=" <nl> 
mmm PrepareExecutionTransServlet.java <nl> ppp PrepareExecutionTransServlet.java <nl> + convertContextPath( GetTransStatusServlet.CONTEXT_PATH ) + "?name=" <nl> + URLEncoder.encode( transName, "UTF-8" ) + "&id=" + id + "\">" <nl> + BaseMessages.getString( PKG, "TransStatusServlet.BackToTransStatusPage" ) + "</a><p>" ); <nl> 
mmm TransSupplierTest.java <nl> ppp TransSupplierTest.java <nl> - when( meta.getVariable( "engine.host" ) ).thenReturn( "hostname" ); <nl> - when( meta.getVariable( "engine.port" ) ).thenReturn( "8080" ); <nl> + when( meta.getVariable( "engine.url" ) ).thenReturn( "hostname:8080" ); <nl> mmm SplitFieldToRowsMeta.java <nl> 
mmm JobEntryTrans.java <nl> ppp JobEntryTrans.java <nl> + if ( StringUtils.isBlank( transPath ) ) { <nl> + throw new KettleException( BaseMessages.getString( PKG, "JobTrans.Exception.MissingTransFileName" ) ); <nl> + } <nl> mmm PurRepositoryUnitTest.java <nl> ppp PurRepositoryUnitTest.java <nl> + import static org.junit.Assert.assertNull; <nl> 
mmm BeanLevelInfo.java <nl> ppp BeanLevelInfo.java <nl> + import java.lang.reflect.ParameterizedType; <nl> + import java.lang.reflect.Type; <nl> + enum DIMENSION { <nl> + NONE, ARRAY, LIST <nl> + }; <nl> - public boolean array; <nl> + public DIMENSION dim = DIMENSION.NONE; <nl> - leaf.array = true; <nl> + leaf.dim = DIMENSION.ARRAY; <nl> 
mmm BlockingStep_PDI_11344_Test.java <nl> ppp BlockingStep_PDI_11344_Test.java <nl> - { <nl> - new ValueMeta( "field1", ValueMeta.TYPE_STRING ), new ValueMeta( "field2", ValueMeta.TYPE_INTEGER ), <nl> - new ValueMeta( "field3", ValueMeta.TYPE_NUMBER ), new ValueMeta( "field4", ValueMeta.TYPE_DATE ), <nl> 
new file <nl> ppp MetricsEventSerializerTest.java <nl> + package org.pentaho.pdi.engine.serializers; <nl> + import org.junit.Test; <nl> + import org.pentaho.di.engine.api.events.MetricsEvent; <nl> + import org.pentaho.di.engine.api.reporting.Metrics; <nl> + import org.pentaho.di.engine.model.Transformation; <nl> 
new file <nl> ppp DummyJob.java <nl> + package pdi.jobentry.dummy; <nl> + import java.io.File; <nl> + import java.io.FileFilter; <nl> + import java.io.FileNotFoundException; <nl> + import java.util.regex.Pattern; <nl> + import org.pentaho.di.core.Const; <nl> + import org.pentaho.di.core.exception.KettleJobException; <nl> 
new file <nl> ppp AnalyticQueryMetaTest.java <nl> + package org.pentaho.di.trans.steps.analyticquery; <nl> + import java.util.Arrays; <nl> + import java.util.HashMap; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import org.junit.BeforeClass; <nl> + import org.junit.Test; <nl> + import org.pentaho.di.core.KettleEnvironment; <nl> 
mmm MetaStoreRunConfigurationFactory.java <nl> ppp MetaStoreRunConfigurationFactory.java <nl> - import java.util.ArrayList; <nl> + public void deleteAll() { <nl> + try { <nl> + List<String> elementNames = getMetaStoreFactory().getElementNames(); <nl> + for ( String name : elementNames ) { <nl> + getMetaStoreFactory().deleteElement( name ); <nl> 
mmm TransMeta.java <nl> ppp TransMeta.java <nl> - namedParams = new NamedParamsDefault(); <nl> mmm TransMetaTest.java <nl> ppp TransMetaTest.java <nl> - @Test <nl> - public void testCloneWithParam() throws Exception { <nl> - TransMeta transMeta = new TransMeta( "transFile", "myTrans" ); <nl> - transMeta.addParameterDefinition( "key", "defValue", "description" ); <nl> 
new file <nl> ppp MethodProcessor.java <nl> + package org.pentaho.di.ui.spoon.partition.processor; <nl> + import org.eclipse.swt.widgets.Shell; <nl> + import org.pentaho.di.core.exception.KettleException; <nl> + import org.pentaho.di.ui.spoon.delegates.SpoonDelegates; <nl> + import org.pentaho.di.ui.spoon.partition.PartitionSettings; <nl> 
new file <nl> ppp RepositoryOpenRecentFileExtensionPoint.java <nl> + package org.pentaho.di.ui.repo; <nl> + import org.pentaho.di.core.LastUsedFile; <nl> + import org.pentaho.di.core.exception.KettleException; <nl> + import org.pentaho.di.core.extension.ExtensionPoint; <nl> + import org.pentaho.di.core.extension.ExtensionPointInterface; <nl> 
mmm JsonOutputDialog.java <nl> ppp JsonOutputDialog.java <nl> - new FilterType[] { FilterType.JSON, FilterType.TXT, FilterType.CSV, FilterType.ALL }, <nl> + new FilterType[] { FilterType.JSON, FilterType.JS, FilterType.ALL }, <nl> mmm Spoon.java <nl> ppp Spoon.java <nl> + fileDialogOperation.setProviderFilter( ProviderFilterType.ALL_PROVIDERS.toString() ); <nl> 
mmm SpoonTransformationDelegate.java <nl> ppp SpoonTransformationDelegate.java <nl> + import org.eclipse.swt.widgets.Shell; <nl> - if ( executionConfiguration.getRemoteServer() != null ) { <nl> + if ( transMeta.hasChanged() ) { <nl> + showSaveTransformationBeforeRunningDialog( spoon.getShell() ); <nl> + } else if ( executionConfiguration.getRemoteServer() != null ) { <nl> 
new file <nl> ppp KettleDatabaseRepository_DatabaseNames_Test.java <nl> + package org.pentaho.di.repository.kdr; <nl> + import org.junit.Before; <nl> + import org.junit.BeforeClass; <nl> + import org.junit.Test; <nl> + import org.pentaho.di.core.KettleEnvironment; <nl> + import org.pentaho.di.core.database.DatabaseMeta; <nl> 
mmm MQTTStreamSource.java <nl> ppp MQTTStreamSource.java <nl> + import com.google.common.base.Charsets; <nl> - import static java.nio.charset.Charset.defaultCharset; <nl> 
new file <nl> ppp XMLHandlerUnitTest.java <nl> + package org.pentaho.di.core.xml; <nl> + import org.junit.Test; <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.pentaho.di.core.xml.XMLHandler.buildCDATA; <nl> + import static org.pentaho.di.core.xml.XMLHandler.openTag; <nl> + public class XMLHandlerUnitTest { <nl> 
mmm LogEventSerializer.java <nl> ppp LogEventSerializer.java <nl> - if ( data.getThrowable() != null ) { <nl> + if( data.getThrowable() != null ) { <nl> - if ( extras.size() > 0 ) { <nl> - jsonGenerator.writeArrayFieldStart( "extras" ); <nl> + if( extras.size() > 0 ) { <nl> + jsonGenerator.writeArrayFieldStart("extras" ); <nl> 
mmm CheckBoxTableComboDefaultButton.java <nl> ppp CheckBoxTableComboDefaultButton.java <nl> - if ( selection ) { <nl> - wCheckBox.setSelection( false ); <nl> - wUseDefaultCheckBox.setEnabled( false ); <nl> - } <nl> + wCheckBox.setSelection( false ); <nl> + wUseDefaultCheckBox.setEnabled( false ); <nl> mmm PluginRegistry.java <nl> 
mmm AggregateRowsMeta.java <nl> ppp AggregateRowsMeta.java <nl> + import org.pentaho.di.core.annotations.Step; <nl> + @Step( id = "AggregateRows", image = "AGG.svg", <nl> + i18nPackageName = "org.pentaho.di.trans.steps.aggregaterows", name = "AggregateRowsMeta.Name", <nl> + description = "AggregateRowsMeta.Description", <nl> 
mmm JobEntryHTTP.java <nl> ppp JobEntryHTTP.java <nl> - import org.apache.http.HttpHeaders; <nl> - import org.apache.http.HttpResponse; <nl> - import org.apache.http.HttpStatus; <nl> - import org.apache.http.auth.AuthScope; <nl> - import org.apache.http.auth.UsernamePasswordCredentials; <nl> - import org.apache.http.client.CredentialsProvider; <nl> 
mmm MappingInputMeta_GetFields_Test.java <nl> ppp MappingInputMeta_GetFields_Test.java <nl> - noInputRowMeta() <nl> + noInputRowMeta(), <nl> + alreadyRenamed() <nl> + private static Object[] alreadyRenamed() { <nl> + RowMeta inputRowMeta = createRowMeta( "field1", "renamed" ); <nl> + List<MappingValueRename> renames = singletonList( new MappingValueRename( "field2", "renamed" ) ); <nl> 
mmm ElasticSearchBulkMetaTest.java <nl> ppp ElasticSearchBulkMetaTest.java <nl> + import static org.junit.Assert.*; <nl> + import org.pentaho.di.core.exception.KettleValueException; <nl> + import org.pentaho.di.core.row.RowMetaInterface; <nl> + import org.pentaho.di.core.variables.VariableSpace; <nl> + import org.pentaho.di.trans.step.StepDataInterface; <nl> 
mmm KettleEnvironment.java <nl> ppp KettleEnvironment.java <nl> + import org.pentaho.di.core.logging.LoggingRegistry; <nl> + LoggingRegistry.getInstance().updateFromProperties(); <nl> + LoggingRegistry.getInstance().reset(); <nl> mmm LoggingRegistry.java <nl> ppp LoggingRegistry.java <nl> + import com.google.common.annotations.VisibleForTesting; <nl> 
mmm MetaInjectMeta.java <nl> ppp MetaInjectMeta.java <nl> + import org.pentaho.di.core.annotations.Step; <nl> + @Step( id = "MetaInject", image = "org/pentaho/di/ui/trans/steps/metainject/img/GenericTransform.svg", name = "ETL " <nl> + + "Metadata Injection", categoryDescription = "i18n:org.pentaho.di.trans.step:BaseStep.Category.Flow" ) <nl> 
mmm IntegerPrinter.java <nl> ppp IntegerPrinter.java <nl> - public interface IntegerPrinter { <nl> + public interface IntegerPrinter extends DataPrinter { <nl> new file <nl> ppp DataPrinter.java <nl> + package com.seriouscompany.business.java.fizzbuzz.packagenamingpackage.interfaces.printers; <nl> + public interface DataPrinter { <nl> 
new file <nl> ppp Frame.java <nl> + package org.objectweb.asm; <nl> + final class Frame { <nl> + static final int DIM = 0xF0000000; <nl> + static final int ARRAY_OF = 0x10000000; <nl> + static final int ELEMENT_OF = 0xF0000000; <nl> + static final int KIND = 0xF000000; <nl> + static final int TOP_IF_LONG_OR_DOUBLE = 0x800000; <nl> 
mmm ProviderArtifact.java <nl> ppp ProviderArtifact.java <nl> mmm ProviderDao.java <nl> ppp ProviderDao.java <nl> mmm ProviderService.java <nl> ppp ProviderService.java <nl> mmm ProviderServiceWithoutPowerMockImpl.java <nl> ppp ProviderServiceWithoutPowerMockImpl.java <nl> mmm ServiceRegistratorWithoutPowerMock.java <nl> 
mmm DaoMaster.java <nl> ppp DaoMaster.java <nl> + import de.greenrobot.daotest.IndexedStringEntityDao; <nl> + IndexedStringEntityDao.dropTable(db, ifExists); <nl> + registerDaoClass(IndexedStringEntityDao.class); <nl> mmm TestDaoGenerator.java <nl> ppp TestDaoGenerator.java <nl> + createIndexedString(); <nl> 
mmm RelationEntityDao.java <nl> ppp RelationEntityDao.java <nl> + builder.append(','); <nl> + SqlUtils.appendColumns(builder, "T3", daoSession.getTestEntityDao().getAllColumns()); <nl> + builder.append(" LEFT JOIN TEST_ENTITY T3 ON T.WITHOUT_PROPERTY_TEST_ID=T3._id"); <nl> + offset += daoSession.getTestEntityDao().getAllColumns().length; <nl> 
deleted file <nl> mmm InSubQueryResultHandler.java <nl> - package io.mycat.route.impl.middlerResultStrategy; <nl> - import java.util.List; <nl> - import com.alibaba.druid.sql.ast.SQLExprImpl; <nl> - import com.alibaba.druid.sql.ast.SQLObject; <nl> - import com.alibaba.druid.sql.ast.SQLStatement; <nl> - import com.alibaba.druid.sql.ast.expr.SQLBinaryOpExpr; <nl> 
deleted file <nl> mmm MongoDriver.java <nl> - package org.opencloudb.jdbc.mongodb; <nl> - import java.sql.Connection; <nl> - import java.sql.Driver; <nl> - import java.sql.DriverManager; <nl> - import java.sql.DriverPropertyInfo; <nl> - import java.sql.SQLException; <nl> - import java.sql.SQLFeatureNotSupportedException; <nl> 
mmm UserStat.java <nl> ppp UserStat.java <nl> - 	private final static int SQL_SLOW_TIME = 1000; <nl> - 	 <nl> + 	private  long SQL_SLOW_TIME = 1000; <nl> - 	 <nl> + 	public void setSlowTime(long time) { <nl> + 		this.SQL_SLOW_TIME=time; <nl> + 	} <nl> mmm ShowTables.java <nl> ppp ShowTables.java <nl> + import java.util.Set; <nl> 
mmm FdbRouteStrategyTest.java <nl> ppp FdbRouteStrategyTest.java <nl> + import org.opencloudb.MycatServer; <nl> - import org.opencloudb.mpp.JoinRel; <nl> - import org.opencloudb.mpp.SelectSQLAnalyser; <nl> - import org.opencloudb.parser.SQLParserDelegate; <nl> + import org.opencloudb.route.factory.RouteStrategyFactory; <nl> 
mmm TestSelectPerf.java <nl> ppp TestSelectPerf.java <nl> + import java.text.DecimalFormat; <nl> + import java.util.LinkedList; <nl> + 	private static LinkedList<StringItem> sqlTemplateItems; <nl> + 	private static long minId; <nl> + 	private static long maxId; <nl> + 	private static int executeTimes; <nl> + 	private static SelectJob createQueryJob(Connection con) { <nl> 
new file <nl> ppp SqlFrequency.java <nl> + package org.opencloudb.stat; <nl> + public class SqlFrequency { <nl> + 	private String sql; <nl> + 	private int count = 0; <nl> + 	private long lastTime = 0; <nl> + 	private long executeTime = 0; <nl> + 	private long allExecuteTime = 0; <nl> + 	private long maxTime = 0; <nl> 
mmm Platform.java <nl> ppp Platform.java <nl> + public static char getChar(Object baseObj, long l) { <nl> + return _UNSAFE.getChar(baseObj, l); <nl> + } <nl> + public static void putChar(Object baseObj, long l, char value) { <nl> + _UNSAFE.putChar(baseObj, l, value); <nl> + } <nl> new file <nl> ppp CharArray.java <nl> 
mmm MySQLConnection.java <nl> ppp MySQLConnection.java <nl> + 	 <nl> + public boolean isNeedSyncSchema() { <nl> + return schema.equals(oldSchema) ? false : true; <nl> + } <nl> mmm ServerConnection.java <nl> ppp ServerConnection.java <nl> - import java.util.Map; <nl> + import java.util.Queue; <nl> + import java.util.concurrent.LinkedBlockingQueue; <nl> 
mmm ShowHandler.java <nl> ppp ShowHandler.java <nl> - import io.mycat.manager.response.CheckGlobalTable; <nl> - 		case ManagerParseShow.CHECK_GLOBAL: <nl> - 			CheckGlobalTable.execute(c, stmt); <nl> - 			break; <nl> mmm UnsafeRowGrouper.java <nl> ppp UnsafeRowGrouper.java <nl> - 	    for (MergeCol mergCol : mergCols) { <nl> 
mmm EngineCtx.java <nl> ppp EngineCtx.java <nl> + import org.opencloudb.net.mysql.EmptyPacket; <nl> + 	 <nl> + 	public void writeHeader(List<byte[]> afields) { <nl> + 		if (headerWrited.compareAndSet(false, true)) { <nl> + 			try { <nl> + 				writeLock.lock(); <nl> + 				ResultSetHeaderPacket headerPkg = new ResultSetHeaderPacket(); <nl> 
mmm CommandCount.java <nl> ppp CommandCount.java <nl> + 	private long setOption; <nl> + +heartbeat; <nl> + 	public void doSetOption() { <nl> + 		++setOption; <nl> + 	} <nl> mmm DQLRouteTest.java <nl> ppp DQLRouteTest.java <nl> - 	protected RouteStrategy routeStrategy = RouteStrategyFactory.getRouteStrategy("druidparser"); <nl> 
mmm SpanUtils.java <nl> ppp SpanUtils.java <nl> mmm NetworkUtils.java <nl> ppp NetworkUtils.java <nl> + NETWORK_ETHERNET, <nl> - private static final int NETWORK_TYPE_GSM      = 16; <nl> - private static final int NETWORK_TYPE_TD_SCDMA = 17; <nl> - private static final int NETWORK_TYPE_IWLAN    = 18; <nl> - if (info.getType() == ConnectivityManager.TYPE_WIFI) { <nl> 
mmm LogActivity.java <nl> ppp LogActivity.java <nl> - private static final int UPDATE_TAG    = 0x01 << 0; <nl> + private static final int UPDATE_TAG    = 0x01; <nl> + String xml = "<books><book><author>Jack Herrington</author><title>PHP Hacks</title><publisher>O'Reilly</publisher></book><book><author>Jack Herrington</author><title>Podcasting Hacks</title><publisher>O'Reilly</publisher></book></books>"; <nl> 
mmm ProcessUtils.java <nl> ppp ProcessUtils.java <nl> - import java.util.ArrayList; <nl> - * @param context 上下文 <nl> - public static String getForegroundProcessName(Context context) { <nl> - ActivityManager manager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE); <nl> + public static String getForegroundProcessName() { <nl> 
mmm FileUtilsTest.java <nl> ppp FileUtilsTest.java <nl> - import static com.blankj.utilcode.utils.FileUtils.byte2Size; <nl> - import static com.blankj.utilcode.utils.FileUtils.copyDir; <nl> - import static com.blankj.utilcode.utils.FileUtils.copyFile; <nl> - import static com.blankj.utilcode.utils.FileUtils.createFileByDeleteOldFile; <nl> 
new file <nl> ppp BaseDrawerActivity.java <nl> + package com.blankj.androidutilcode.base; <nl> + import android.content.Intent; <nl> + import android.net.Uri; <nl> + import android.support.annotation.NonNull; <nl> + import android.support.design.widget.NavigationView; <nl> + import android.support.v4.widget.DrawerLayout; <nl> 
mmm BarStatusDrawerActivity.java <nl> ppp BarStatusDrawerActivity.java <nl> - cbAlpha = (CheckBox) findViewById(R.id.cb_alpha); <nl> - cbFront = (CheckBox) findViewById(R.id.cb_front); <nl> - btnRandomColor = (Button) findViewById(R.id.btn_random_color); <nl> - tvStatusAlpha = (TextView) findViewById(R.id.tv_status_alpha); <nl> 
mmm ConstUtils.java <nl> ppp ConstUtils.java <nl> - *     desc  : 单位相关工具类 <nl> + *     desc  : 常量相关工具类 <nl> - public static final String DES_ECB_NO_PADDING = "DES/ECB/NoPadding"; <nl> - public static final String DES_CBC_NO_PADDING = "DES/CBC/NoPadding"; <nl> - public static final String DES_CFB_NO_PADDING = "DES/CFB/NoPadding"; <nl> 
mmm TimeUtils.java <nl> ppp TimeUtils.java <nl> + import com.blankj.utilcode.utils.constant.TimeConstant; <nl> - *              <li>{@link ConstUtils.TimeUnit#MSEC}: 毫秒</li> <nl> - *              <li>{@link ConstUtils.TimeUnit#SEC }: 秒</li> <nl> - *              <li>{@link ConstUtils.TimeUnit#MIN }: 分</li> <nl> 
mmm BarActivity.java <nl> ppp BarActivity.java <nl> - findViewById(R.id.btn_bar_color).setOnClickListener(this); <nl> + findViewById(R.id.btn_status_bar_color).setOnClickListener(this); <nl> + findViewById(R.id.btn_status_bar_alpha).setOnClickListener(this); <nl> + findViewById(R.id.btn_status_bar_image_view).setOnClickListener(this); <nl> 
mmm VApp.java <nl> ppp VApp.java <nl> - import io.virtualapp.ui.NotificationHandler; <nl> - public Hook_EnqueueNotification(NotificationManagerPatch patchObject) { <nl> - super(patchObject); <nl> - } <nl> - @Override <nl> - public String getName() { <nl> - return "enqueueNotification"; <nl> - } <nl> - @Override <nl> 
mmm AppRepository.java <nl> ppp AppRepository.java <nl> - import com.lody.virtual.remote.AppSetting; <nl> + import com.lody.virtual.remote.InstalledAppInfo; <nl> - List<AppSetting> infos = VirtualCore.get().getAllApps(); <nl> + List<InstalledAppInfo> infos = VirtualCore.get().getInstalledApps(); <nl> - for (AppSetting info : infos) { <nl> 
new file <nl> ppp RemoteLogAgent.java <nl> + package io.virtualapp; <nl> + import com.lody.virtual.server.log.ILogAgent; <nl> + public class RemoteLogAgent implements ILogAgent { <nl> + @Override <nl> + public void reportLog(int level, String tag, String msg) { <nl> + } <nl> + } <nl> mmm NativeEngine.java <nl> 
mmm ListAppPresenterImpl.java <nl> ppp ListAppPresenterImpl.java <nl> - import io.virtualapp.home.models.AppModel; <nl> + import io.virtualapp.home.models.PackageAppData; <nl> - public class AppModel implements Parcelable { <nl> - 	public static final Creator<AppModel> CREATOR = new Creator<AppModel>() { <nl> 
mmm ConsistentHashLoadBalancerTest.java <nl> ppp ConsistentHashLoadBalancerTest.java <nl> + import com.alipay.sofa.rpc.log.Logger; <nl> + import com.alipay.sofa.rpc.log.LoggerFactory; <nl> - System.out.println("elapsed" + (end - start) + "ms"); <nl> - System.out.println("avg " + (end - start) * 1000 * 1000 / total + "ns"); <nl> 
mmm PushGroupSendJob.java <nl> ppp PushGroupSendJob.java <nl> - import org.whispersystems.textsecure.api.push.PushAddress; <nl> + import org.whispersystems.textsecure.api.push.TextSecureAddress; <nl> - import org.whispersystems.textsecure.api.push.exceptions.UnregisteredUserException; <nl> - List<PushAddress>          addresses; <nl> 
mmm SmsListener.java <nl> ppp SmsListener.java <nl> + import org.thoughtcrime.securesms.util.TextSecurePreferences; <nl> - preferences.getBoolean(ApplicationPreferencesActivity.VERIFYING_STATE_PREF, false)) <nl> + TextSecurePreferences.isVerifying(context)) <nl> mmm DynamicLanguage.java <nl> ppp DynamicLanguage.java <nl> 
mmm Recipient.java <nl> ppp Recipient.java <nl> + private String       profileName    = null; <nl> + this.profileName    = stale.profileName; <nl> + this.participants.clear(); <nl> + this.participants.addAll(stale.participants); <nl> + this.profileName    = details.get().profileName; <nl> + Recipient.this.profileName    = result.profileName; <nl> 
new file <nl> ppp TypingIndicatorIntroFragment.java <nl> + package org.thoughtcrime.securesms; <nl> + import android.os.Bundle; <nl> + import android.support.v4.app.Fragment; <nl> + import android.support.v7.widget.SwitchCompat; <nl> + import android.view.LayoutInflater; <nl> + import android.view.View; <nl> 
mmm ShareActivity.java <nl> ppp ShareActivity.java <nl> - import org.thoughtcrime.securesms.providers.PersistentBlobProvider; <nl> + import org.thoughtcrime.securesms.providers.BlobProvider; <nl> - PersistentBlobProvider.getInstance(this).delete(this, resolvedExtra); <nl> + BlobProvider.getInstance().delete(this, resolvedExtra); <nl> 
mmm CameraButtonView.java <nl> ppp CameraButtonView.java <nl> - private float   latestIncrement = 0f; <nl> - latestIncrement = 0f; <nl> - if (Math.abs(increment - latestIncrement) < MINIMUM_ALLOWED_ZOOM_STEP) { <nl> - break; <nl> - } <nl> - latestIncrement = increment; <nl> mmm CameraXUtil.java <nl> ppp CameraXUtil.java <nl> 
mmm Camera1Fragment.java <nl> ppp Camera1Fragment.java <nl> + requireActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN); <nl> + requireActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN); <nl> + public void reset() { <nl> + orderEnforcer.reset(); <nl> 
deleted file <nl> mmm MediaNetworkRequirementProvider.java <nl> - package org.thoughtcrime.securesms.jobs.requirements; <nl> - import org.whispersystems.jobqueue.requirements.RequirementListener; <nl> - import org.whispersystems.jobqueue.requirements.RequirementProvider; <nl> - public class MediaNetworkRequirementProvider implements RequirementProvider { <nl> 
mmm SendJob.java <nl> ppp SendJob.java <nl> - Log.w(TAG, "resizing part " + part.getId()); <nl> + Log.w(TAG, "resizing part " + part.getPartId()); <nl> mmm MmsDatabase.java <nl> ppp MmsDatabase.java <nl> - private PduBody getPartsAsBody(List<Pair<Long, PduPart>> parts) { <nl> + private PduBody getPartsAsBody(List<PduPart> parts) { <nl> 
deleted file <nl> mmm WebRtcDataProtos.java <nl> - package org.thoughtcrime.securesms.webrtc; <nl> - public final class WebRtcDataProtos { <nl> - private WebRtcDataProtos() {} <nl> - public static void registerAllExtensions( <nl> - com.google.protobuf.ExtensionRegistry registry) { <nl> - } <nl> - public interface ConnectedOrBuilder <nl> 
mmm LogSubmitActivity.java <nl> ppp LogSubmitActivity.java <nl> + import org.thoughtcrime.securesms.util.ProgressDialogAsyncTask; <nl> - private class SubmitToPastebinAsyncTask extends AsyncTask<Void,Void,String> { <nl> - private       ProgressDialog progressDialog; <nl> + private class SubmitToPastebinAsyncTask extends ProgressDialogAsyncTask<Void,Void,String> { <nl> 
new file <nl> ppp KeepMessagesDuration.java <nl> + package org.thoughtcrime.securesms.keyvalue; <nl> + import androidx.annotation.NonNull; <nl> + import androidx.annotation.StringRes; <nl> + import org.thoughtcrime.securesms.R; <nl> + import java.util.concurrent.TimeUnit; <nl> + public enum KeepMessagesDuration { <nl> 
mmm RecipientDatabase.java <nl> ppp RecipientDatabase.java <nl> + return getSignalContacts(true); <nl> + } <nl> + public @Nullable Cursor getSignalContacts(boolean includeSelf) { <nl> - String[] args      = new String[] { "0", String.valueOf(RegisteredState.REGISTERED.getId()) }; <nl> + String[] args; <nl> 
mmm ConversationListViewModel.java <nl> ppp ConversationListViewModel.java <nl> + import java.util.Objects; <nl> - private final LiveData<PagedList<Conversation>> pinnedList; <nl> - DataSource.Factory<Integer, Conversation> factory = new ConversationListDataSource.Factory(application, invalidator, false, isArchived); <nl> 
mmm DatabaseFactory.java <nl> ppp DatabaseFactory.java <nl> - private final RecipientPreferenceDatabase recipientPreferenceDatabase; <nl> + private final RecipientDatabase recipientDatabase; <nl> - public static RecipientPreferenceDatabase getRecipientPreferenceDatabase(Context context) { <nl> - return getInstance(context).recipientPreferenceDatabase; <nl> 
deleted file <nl> mmm RegistrationBypassUtil.java <nl> - package org.thoughtcrime.securesms; <nl> - import android.content.Context; <nl> - import android.content.Intent; <nl> - import android.os.Build; <nl> - import android.os.Build.VERSION; <nl> - import android.util.Log; <nl> - import org.thoughtcrime.securesms.service.SmsListener; <nl> 
new file <nl> ppp BackoffReceiver.java <nl> + package org.thoughtcrime.securesms.jobmanager.requirements; <nl> + import android.app.AlarmManager; <nl> + import android.app.PendingIntent; <nl> + import android.content.BroadcastReceiver; <nl> + import android.content.Context; <nl> + import android.content.Intent; <nl> 
mmm Timer.java <nl> ppp Timer.java <nl> - import java.util.concurrent.TimeUnit; <nl> - 	 * @param period              the amount of time that should elapse between invocations of the given {@code <nl> - 	 * Consumer} <nl> - 	 * @param timeUnit            the unit of time the {@code period} is to be measured in <nl> 
mmm ParallelFlux.java <nl> ppp ParallelFlux.java <nl> mmm Mono.java <nl> ppp Mono.java <nl> mmm ReplayProcessor.java <nl> ppp ReplayProcessor.java <nl> mmm EmitterProcessor.java <nl> ppp EmitterProcessor.java <nl> mmm ConnectableFlux.java <nl> ppp ConnectableFlux.java <nl> mmm Operators.java <nl> ppp Operators.java <nl> 
mmm WorkQueueProcessor.java <nl> ppp WorkQueueProcessor.java <nl> - 	@Override <nl> - 	public String toString() { <nl> - 		return "WorkQueueProcessor{" + <nl> - 				", ringBuffer=" + ringBuffer + <nl> - 				", executor=" + executor + <nl> - 				", workSequence=" + workSequence + <nl> - 				", retrySequence=" + retrySequence + <nl> 
mmm FluxJustTest.java <nl> ppp FluxJustTest.java <nl> - 	FluxJust s = new FluxJust("foo"); <nl> + 	FluxJust<String> s = new FluxJust<>("foo"); <nl> mmm MonoNameTest.java <nl> ppp MonoNameTest.java <nl> + import java.util.stream.Stream; <nl> - 		assertThat(test.scan(Scannable.Attr.TAGS)).containsExactlyInAnyOrder(tag1, tag2); <nl> 
mmm AbstractFluxOperatorTest.java <nl> ppp AbstractFluxOperatorTest.java <nl> + import static reactor.core.Fuseable.THREAD_BARRIER; <nl> + 					((Loopback) s).connectedOutput(); <nl> + 			int fusion = scenario.fusionMode(); <nl> + 			if ((fusion & Fuseable.SYNC) != 0) { <nl> + 				verifier.accept(this.operatorErrorSourceVerifierFusedSync(scenario)); <nl> 
mmm FluxYieldTest.java <nl> ppp FluxYieldTest.java <nl> - e.onNext(Signal.next(1)); <nl> - e.onNext(Signal.next(2)); <nl> - e.onNext(Signal.next(3)); <nl> - e.onNext(Signal.complete()); <nl> + e.emit(Signal.next(1)); <nl> + e.emit(Signal.next(2)); <nl> + e.emit(Signal.next(3)); <nl> + e.emit(Signal.complete()); <nl> 
mmm Context4Test.java <nl> ppp Context4Test.java <nl> - 		Context put = c.putAll(m); <nl> + 		Context put = c.putAll(m.readOnly()); <nl> - 		Context put = c.putAll(m); <nl> + 		Context put = c.putAll(m.readOnly()); <nl> - 		Context put = c.putAll(m); <nl> + 		Context put = c.putAll(m.readOnly()); <nl> mmm Context3Test.java <nl> 
mmm FluxPeekFuseable.java <nl> ppp FluxPeekFuseable.java <nl> - PublisherPeek<T> { <nl> + Operators.SignalPeek<T> { <nl> + 	public FluxPeekFuseable(Publisher<? extends T> source, Operators.SignalPeek<T> peekHelper) { <nl> + 		this(source, <nl> + 				peekHelper.onSubscribeCall(), <nl> + 				peekHelper.onNextCall(), <nl> 
new file <nl> ppp TestCell.java <nl> + package com.alibaba.easyexcel.test.temp.poi; <nl> + import java.util.List; <nl> + import com.alibaba.excel.metadata.CellData; <nl> + import lombok.Data; <nl> + @Data <nl> + public class TestCell { <nl> + private CellData c1; <nl> + private CellData<List<String>> c2; <nl> 
mmm TracingAdviceListener.java <nl> ppp TracingAdviceListener.java <nl> - @Override <nl> - protected void after(Advice advice) throws Throwable { <nl> - tracing.add(generateTracing( <nl> - "AFTER", <nl> - getJavaClassName(advice.getBehavior().getDeclaringClass()), <nl> - advice.getBehavior().getName(), <nl> 
mmm PrometheusCanalEventDownStreamHandler.java <nl> ppp PrometheusCanalEventDownStreamHandler.java <nl> - private final AtomicLong latestExecuteTime  = new AtomicLong(0L); <nl> + private final AtomicLong latestExecuteTime  = new AtomicLong(System.currentTimeMillis()); <nl> - private final AtomicLong rowEventCounter    = new AtomicLong(0L); <nl> 
mmm MemoryEventStoreWithBuffer.java <nl> ppp MemoryEventStoreWithBuffer.java <nl> + public boolean isRaw() { <nl> + return raw; <nl> + } <nl> + public void setRaw(boolean raw) { <nl> + this.raw = raw; <nl> + } <nl> mmm EntryEventSink.java <nl> ppp EntryEventSink.java <nl> + import com.alibaba.otter.canal.store.memory.MemoryEventStoreWithBuffer; <nl> 
mmm NettySocketChannel.java <nl> ppp NettySocketChannel.java <nl> - import org.apache.commons.lang.NotImplementedException; <nl> - @Override <nl> - public void read(byte[] data, int off, int len, int timeout) throws IOException { <nl> - throw new NotImplementedException(); <nl> - } <nl> deleted file <nl> mmm MultiStageCoprocessor.java <nl> 
mmm Common.java <nl> ppp Common.java <nl> - import com.alibaba.otter.canal.client.adapter.rdb.adapters.OracleAdapter; <nl> - outerAdapterConfig.setName("oracle"); <nl> + outerAdapterConfig.setName("rdb"); <nl> + outerAdapterConfig.setKey("oralce1"); <nl> - RdbAdapter adapter = new OracleAdapter(); <nl> + RdbAdapter adapter = new RdbAdapter(); <nl> 
mmm PickerDialogFragmentSwipeTest.java <nl> ppp PickerDialogFragmentSwipeTest.java <nl> - private MaterialDatePickerDialogFragment dialogFragment; <nl> + private MaterialDatePicker<Long> dialogFragment; <nl> - dialogFragment = MaterialDatePickerDialogFragment.newInstance(calendarBounds); <nl> + dialogFragment = <nl> 
mmm DateSelector.java <nl> ppp DateSelector.java <nl> - public interface GridSelector<S> extends Parcelable { <nl> + public interface DateSelector<S> extends Parcelable { <nl> mmm MaterialDatePicker.java <nl> ppp MaterialDatePicker.java <nl> - return gridSelector.getSelectionDisplayString(getContext()); <nl> 
new file <nl> ppp MaterialCalendarView.java <nl> + package com.google.android.material.picker; <nl> + import com.google.android.material.R; <nl> + import android.content.Context; <nl> + import android.os.Build.VERSION; <nl> + import android.os.Build.VERSION_CODES; <nl> + import androidx.annotation.Nullable; <nl> 
mmm CheckableImageButton.java <nl> ppp CheckableImageButton.java <nl> + import static android.support.annotation.RestrictTo.Scope.LIBRARY_GROUP; <nl> - import static android.support.annotation.RestrictTo.Scope.GROUP_ID; <nl> - @RestrictTo(GROUP_ID) <nl> + @RestrictTo(LIBRARY_GROUP) <nl> mmm ScrimInsetsFrameLayout.java <nl> 
mmm CalendarConstraintsTest.java <nl> ppp CalendarConstraintsTest.java <nl> - private static final Month FEB_2016 = Month.create(2016, Calendar.FEBRUARY); <nl> - private static final Month MARCH_2016 = Month.create(2016, Calendar.MARCH); <nl> - private static final Month APRIL_2016 = Month.create(2016, Calendar.APRIL); <nl> 
mmm TestStarTreeConverter.java <nl> ppp TestStarTreeConverter.java <nl> - import com.linkedin.pinot.core.indexsegment.generator.SegmentVersion; <nl> - import com.linkedin.pinot.core.segment.creator.impl.V1Constants; <nl> + import com.linkedin.pinot.core.segment.store.SegmentDirectoryPaths; <nl> - _indexDir = new File(new File(SEGMENT_DIR_NAME, SEGMENT_NAME), SegmentVersion.v3.toString()); <nl> 
mmm DetectionConfigTranslatorTest.java <nl> ppp DetectionConfigTranslatorTest.java <nl> + import com.fasterxml.jackson.databind.ObjectWriter; <nl> + import org.apache.pinot.thirdeye.detection.components.ThresholdSeverityLabeler; <nl> + DetectionRegistry.registerComponent(ThresholdSeverityLabeler.class.getName(), "THRESHOLD_SEVERITY_LABELER"); <nl> 
mmm HelixBrokerStarter.java <nl> ppp HelixBrokerStarter.java <nl> + import org.apache.helix.ConfigAccessor; <nl> + import org.apache.helix.model.ClusterConfig; <nl> + import org.apache.helix.model.HelixConfigScope; <nl> + import org.apache.helix.model.builder.HelixConfigScopeBuilder; <nl> + ConfigAccessor configAccessor = _spectatorHelixManager.getConfigAccessor(); <nl> 
mmm TestFixedByteWidthSingleColumnMultiValueReader.java <nl> ppp TestFixedByteWidthSingleColumnMultiValueReader.java <nl> - reader.open(); <nl> mmm SingleColumnMultiValueWriter.java <nl> ppp SingleColumnMultiValueWriter.java <nl> + package com.linkedin.pinot.core.index.writer.impl; <nl> + import com.linkedin.pinot.common.utils.MmapUtils; <nl> 
mmm BenchmarkQueryEngine.java <nl> ppp BenchmarkQueryEngine.java <nl> - import org.apache.pinot.broker.requesthandler.OptimizationFlags; <nl> + import org.apache.pinot.core.requesthandler.OptimizationFlags; <nl> mmm BaseBrokerRequestHandler.java <nl> ppp BaseBrokerRequestHandler.java <nl> + import org.apache.pinot.core.requesthandler.BrokerRequestOptimizer; <nl> 
mmm HllUtil.java <nl> ppp HllUtil.java <nl> - import com.google.common.collect.ImmutableBiMap; <nl> - import com.linkedin.pinot.startree.hll.HllSizeUtils; <nl> - import java.nio.charset.Charset; <nl> - private static final ImmutableBiMap<Integer, Integer> LOG2M_TO_SIZE_IN_BYTES = HllSizeUtils.getLog2mToSizeInBytes(); <nl> 
mmm TableDataManagerConfig.java <nl> ppp TableDataManagerConfig.java <nl> - _tableDataManagerConfig.setProperty(IndexLoadingConfigMetadata.getKeyOfLoadingInvertedIndex(), <nl> - tableConfig.getIndexingConfig().getInvertedIndexColumns()); <nl> mmm PinotClientRequestServlet.java <nl> ppp PinotClientRequestServlet.java <nl> 
new file <nl> ppp IntervalUtils.java <nl> + package com.linkedin.thirdeye.util; <nl> + import com.linkedin.thirdeye.api.DimensionMap; <nl> + import com.linkedin.thirdeye.datalayer.dto.MergedAnomalyResultDTO; <nl> + import java.util.ArrayList; <nl> + import java.util.Collections; <nl> + import java.util.Comparator; <nl> 
deleted file <nl> mmm RequestConverter.java <nl> - package com.linkedin.pinot.common.client.request; <nl> - import java.util.ArrayList; <nl> - import java.util.Arrays; <nl> - import java.util.HashMap; <nl> - import java.util.HashSet; <nl> - import java.util.List; <nl> - import java.util.Map; <nl> - import org.antlr.runtime.RecognitionException; <nl> 
new file <nl> ppp RollupPhaseThreeConstants.java <nl> + package com.linkedin.thirdeye.bootstrap.rollup.phase3; <nl> + public enum RollupPhaseThreeConstants { <nl> + String name; <nl> + RollupPhaseThreeConstants(String name) { <nl> + this.name = name; <nl> + } <nl> + public String toString() { <nl> + return name; <nl> 
mmm UResultOperator.java <nl> ppp UResultOperator.java <nl> - public class UResultOperator implements Operator { <nl> + public class UResultOperator extends BaseOperator { <nl> - public Block nextBlock() { <nl> - long start = System.currentTimeMillis(); <nl> + public Block getNextBlock() { <nl> - long end = System.currentTimeMillis(); <nl> 
new file <nl> ppp BrokerRequestUtils.java <nl> + package com.linkedin.pinot.requestHandler; <nl> + import com.linkedin.pinot.common.utils.CommonConstants; <nl> + public class BrokerRequestUtils { <nl> + public static String getRealtimeResourceNameForResource(String hybridResource) { <nl> + return hybridResource + CommonConstants.Broker.DataResource.REALTIME_RESOURCE_SUFFIX; <nl> 
mmm DAORegistry.java <nl> ppp DAORegistry.java <nl> - import com.linkedin.thirdeye.datalayer.bao.FunctionAutotuneConfigManager; <nl> + import com.linkedin.thirdeye.datalayer.bao.AutotuneConfigManager; <nl> - import com.linkedin.thirdeye.datalayer.bao.jdbc.FunctionAutotuneConfigManagerImpl; <nl> + import com.linkedin.thirdeye.datalayer.bao.jdbc.AutotuneConfigManagerImpl; <nl> 
mmm PinotTenantRestletResource.java <nl> ppp PinotTenantRestletResource.java <nl> - package com.linkedin.pinot.controller.api.reslet.resources; <nl> + package com.linkedin.pinot.controller.api.reslet.resources.v2; <nl> - public class PinotTenantServerResource extends ServerResource { <nl> - private static final Logger LOGGER = LoggerFactory.getLogger(PinotTenantServerResource.class); <nl> 
mmm RetentionManagerTest.java <nl> ppp RetentionManagerTest.java <nl> + import com.linkedin.pinot.common.config.Tenant; <nl> + import com.linkedin.pinot.common.config.Tenant.TenantBuilder; <nl> - import com.linkedin.pinot.controller.api.pojos.Tenant; <nl> - private static File INDEXES_DIR = new File(FileUtils.getTempDirectory() + File.separator + "TestRetentionManagerList"); <nl> 
mmm SimpleConsumerWrapperTest.java <nl> ppp SimpleConsumerWrapperTest.java <nl> - SimpleConsumerWrapper consumerWrapper = SimpleConsumerWrapper.forMetadataConsumption( <nl> + SimpleConsumerWrapper consumerWrapper = new SimpleConsumerWrapper( <nl> - SimpleConsumerWrapper consumerWrapper = SimpleConsumerWrapper.forPartitionConsumption( <nl> 
mmm QueryException.java <nl> ppp QueryException.java <nl> + import java.io.PrintWriter; <nl> + import java.io.StringWriter; <nl> + public static ProcessingException getException(ProcessingException processingException, Exception exception, int sizeOfStackTraceToTruncate) { <nl> + ProcessingException retProcessingException = QueryException.FUTURE_CALL_ERROR.deepCopy(); <nl> 
mmm InstanceDataManager.java <nl> ppp InstanceDataManager.java <nl> - import com.linkedin.pinot.common.data.DataManager; <nl> - import java.util.Collection; <nl> + import com.linkedin.pinot.common.metrics.ServerMetrics; <nl> + import com.linkedin.pinot.common.segment.SegmentMetadata; <nl> + import java.io.File; <nl> 
deleted file <nl> mmm BaselineRuleDetectionStage.java <nl> - package org.apache.pinot.thirdeye.detection.algorithm.stage; <nl> - import com.google.common.base.Preconditions; <nl> - import org.apache.pinot.thirdeye.dashboard.resources.v2.BaselineParsingUtils; <nl> - import org.apache.pinot.thirdeye.dataframe.BooleanSeries; <nl> 
mmm SegmentPruner.java <nl> ppp SegmentPruner.java <nl> + import org.apache.helix.model.IdealState; <nl> - void init(ExternalView externalView, Set<String> onlineSegments); <nl> + void init(ExternalView externalView, IdealState idealState, Set<String> onlineSegments); <nl> - void onExternalViewChange(ExternalView externalView, Set<String> onlineSegments); <nl> 
mmm HoltWintersDetector.java <nl> ppp HoltWintersDetector.java <nl> - DetectionUtils.makeAnomalies(sliceData, df, COL_ANOMALY, window.getEndMillis(), <nl> + DetectionUtils.makeAnomalies(sliceData, df, COL_ANOMALY, <nl> mmm DetectionUtils.java <nl> ppp DetectionUtils.java <nl> - * @param endTime end time of this detection window <nl> 
mmm PinotFileUpload.java <nl> ppp PinotFileUpload.java <nl> - import com.linkedin.pinot.controller.helix.core.ZKMetadataUtils; <nl> + import com.linkedin.pinot.controller.helix.core.util.ZKMetadataUtils; <nl> mmm PinotHelixAdmin.java <nl> ppp PinotHelixAdmin.java <nl> + import com.linkedin.pinot.controller.helix.core.util.ZKMetadataUtils; <nl> 
mmm ThirdEyeJobConstants.java <nl> ppp ThirdEyeJobConstants.java <nl> - public enum ThirdEyeJobConstants <nl> - { <nl> + public enum ThirdEyeJobConstants { <nl> + THIRDEYE_DIMENSION_INDEX_REF("thirdeye.dimension.index.ref"), <nl> - ThirdEyeJobConstants(String propertyName) <nl> - { <nl> + ThirdEyeJobConstants(String propertyName) { <nl> 
mmm RealtimeQuickStart.java <nl> ppp RealtimeQuickStart.java <nl> - public void  execute() throws JSONException, Exception { <nl> - _quickStartDataDir = new File("quickStartData" + System.currentTimeMillis()); <nl> - String quickStartDataDirName = _quickStartDataDir.getName(); <nl> + public void execute() throws JSONException, Exception { <nl> 
mmm SegmentGenerationWithNullValueVectorTest.java <nl> ppp SegmentGenerationWithNullValueVectorTest.java <nl> + import com.yammer.metrics.core.MetricsRegistry; <nl> + import java.net.URL; <nl> + import java.util.concurrent.ExecutorService; <nl> + import java.util.concurrent.Executors; <nl> + import org.apache.commons.configuration.ConfigurationException; <nl> 
mmm SchemaUtils.java <nl> ppp SchemaUtils.java <nl> - FunctionEvaluatorFactory functionEvaluatorFactory = new FunctionEvaluatorFactory(); <nl> - FunctionEvaluator functionEvaluator = functionEvaluatorFactory.getExpressionEvaluator(fieldSpec); <nl> + FunctionEvaluator functionEvaluator = FunctionEvaluatorFactory.getExpressionEvaluator(fieldSpec); <nl> 
mmm GenericPojoDao.java <nl> ppp GenericPojoDao.java <nl> + import com.linkedin.thirdeye.datalayer.entity.ApplicationIndex; <nl> + import com.linkedin.thirdeye.datalayer.pojo.ApplicationBean; <nl> + pojoInfoMap.put(ApplicationBean.class, <nl> + newPojoInfo(DEFAULT_BASE_TABLE_NAME, ApplicationIndex.class)); <nl> 
mmm V1Constants.java <nl> ppp V1Constants.java <nl> + public static final String TOTAL_NUMBER_OF_ENTRIES = "totalNumberOfEntries"; <nl> mmm UnSortedMVColumnIndexContainer.java <nl> ppp UnSortedMVColumnIndexContainer.java <nl> + import com.linkedin.pinot.core.index.reader.impl.FixedBitSkipListSCMVReader; <nl> 
new file <nl> ppp SegmentSelector.java <nl> + package com.linkedin.pinot.broker.routing.selector; <nl> + import com.linkedin.pinot.broker.routing.RoutingTableLookupRequest; <nl> + import com.linkedin.pinot.common.config.TableConfig; <nl> + import java.util.Set; <nl> + import org.apache.helix.ZNRecord; <nl> 
mmm LruNormalizedCache.java <nl> ppp LruNormalizedCache.java <nl> - import com.apollographql.apollo.cache.normalized.RecordFieldAdapter; <nl> + import com.apollographql.apollo.cache.normalized.RecordFieldJsonAdapter; <nl> - LruNormalizedCache(final RecordFieldAdapter recordFieldAdapter, <nl> + LruNormalizedCache(final RecordFieldJsonAdapter recordFieldAdapter, <nl> 
mmm LruNormalizedCache.java <nl> ppp LruNormalizedCache.java <nl> - result = result & remove(CacheKey.from(cacheReference.key()), true); <nl> + result = result & remove(new CacheKey(cacheReference.key()), true); <nl> deleted file <nl> mmm CacheKey.java <nl> - package com.apollographql.apollo.cache.normalized; <nl> 
mmm CreateReviewForEpisode.java <nl> ppp CreateReviewForEpisode.java <nl> - final Optional<List<ListOfListOfObject>> listOfListOfObject; <nl> + final Optional<List<List<ListOfListOfObject>>> listOfListOfObject; <nl> - @Nullable List<ListOfListOfObject> listOfListOfObject) { <nl> + @Nullable List<List<ListOfListOfObject>> listOfListOfObject) { <nl> 
mmm AllStarships.java <nl> ppp AllStarships.java <nl> mmm DroidDetails.java <nl> ppp DroidDetails.java <nl> mmm IntegrationTest.java <nl> ppp IntegrationTest.java <nl> - .transform(new Function<AllPlanets.Data.Planet, String>() { <nl> - @Override public String apply(AllPlanets.Data.Planet planet) { <nl> + .transform(new Function<AllPlanets.Planet, String>() { <nl> 
mmm HeroDetailsQuery.java <nl> ppp HeroDetailsQuery.java <nl> + import com.apollographql.apollo.api.internal.OperationRequestBodyComposer; <nl> + import okio.ByteString; <nl> + @Override <nl> + @NotNull <nl> + public ByteString composeRequestBody(@NotNull final ScalarTypeAdapters scalarTypeAdapters) { <nl> 
mmm HeroDetailQuery.java <nl> ppp HeroDetailQuery.java <nl> + import com.apollographql.android.api.graphql.internal.Optional; <nl> - private final @Nullable HeroDetailQuery1 heroDetailQuery; <nl> + private final Optional<HeroDetailQuery1> heroDetailQuery; <nl> - this.heroDetailQuery = heroDetailQuery; <nl> 
mmm PStyle.java <nl> ppp PStyle.java <nl> - public int blendMode; <nl> mmm PGraphicsGLW.java <nl> ppp PGraphicsGLW.java <nl> mmm PShader.java <nl> ppp PShader.java <nl> - protected boolean loadedAttributes = false; <nl> - protected boolean loadedUniforms = false; <nl> + boolean loadedAttributes = false; <nl> + boolean loadedUniforms = false; <nl> 
mmm AutoFormat.java <nl> ppp AutoFormat.java <nl> - private void trimRight(final StringBuilder sb) { <nl> - while (sb.length() >= 1 && Character.isWhitespace(sb.charAt(sb.length() - 1))) <nl> + static private void trimRight(final StringBuilder sb) { <nl> + while (sb.length() >= 1 && Character.isWhitespace(sb.charAt(sb.length() - 1))) { <nl> 
new file <nl> ppp DebugRunner.java <nl> + package processing.mode.java2; <nl> + import com.sun.jdi.VirtualMachine; <nl> + import processing.app.RunnerListener; <nl> + import processing.app.SketchException; <nl> + import processing.app.exec.StreamRedirectThread; <nl> + import processing.mode.java.JavaBuild; <nl> 
mmm XML.java <nl> ppp XML.java <nl> - * @see PApplet#createXML(String) <nl> mmm ExamplesContribution.java <nl> ppp ExamplesContribution.java <nl> - * @param exampleFolder <nl> + * @param props <nl> mmm CompositionTextPainter.java <nl> ppp CompositionTextPainter.java <nl> - * @param textarea textarea used by PDE. <nl> 
new file <nl> ppp JOGL.java <nl> + package processing.jogl; <nl> + public interface JOGL { <nl> + static final String P2D       = "processing.jogl.PGraphics2D"; <nl> + static final String P3D       = "processing.jogl.PGraphics3D"; <nl> + static final String P2D_2X    = "processing.jogl.PGraphics2D2X"; <nl> 
mmm JavaProblem.java <nl> ppp JavaProblem.java <nl> + import java.util.Arrays; <nl> + import static org.eclipse.jdt.core.compiler.IProblem.*; <nl> + private int priority; <nl> + static private final int[] priority10 = { <nl> + ParsingError, <nl> + ParsingErrorDeleteToken, <nl> + ParsingErrorDeleteTokens, <nl> 
mmm UpdateContributionTab.java <nl> ppp UpdateContributionTab.java <nl> + import java.awt.Graphics; <nl> - panel = new JPanel(false); <nl> + panel = new JPanel(false){ <nl> + @Override <nl> + protected void paintComponent(Graphics g) { <nl> + super.paintComponent(g); <nl> + g.setColor(new Color(0xe0fffd)); <nl> 
mmm SketchOutline.java <nl> ppp SketchOutline.java <nl> - Point tp = errorCheckerService.getEditor().ta.getLocationOnScreen(); <nl> + Point tp = errorCheckerService.getEditor().getTextArea().getLocationOnScreen(); <nl> - jsp.setMinimumSize(new Dimension(minWidth, editor.ta.getHeight() - 10)); <nl> - jsp.setMaximumSize(new Dimension(maxWidth, editor.ta.getHeight() - 10)); <nl> 
mmm Welcome.java <nl> ppp Welcome.java <nl> + import processing.app.Language; <nl> + import processing.app.Preferences; <nl> + import processing.core.PApplet; <nl> - public class Welcome { <nl> + public class Welcome extends WebFrame { <nl> + Base base; <nl> - public Welcome() { <nl> - EventQueue.invokeLater(new Runnable() { <nl> 
mmm Editor.java <nl> ppp Editor.java <nl> - String selection = getSelectedText(); <nl> - if (selection != null && selection.length() != 0 && <nl> - !selection.contains("\n")) { <nl> - find.setFindText(selection); <nl> - } <nl> - String illState = "IllegalStateException: "; <nl> - if (mess.startsWith(illState)) { <nl> 
mmm PJOGL.java <nl> ppp PJOGL.java <nl> + import com.jogamp.common.util.VersionNumber; <nl> + @Override <nl> + protected int getGLSLVersion() { <nl> + VersionNumber vn = context.getGLSLVersionNumber(); <nl> + return vn.getMajor() * 100 + vn.getMinor(); <nl> + } <nl> - protected String[] loadVertexShader(String filename, int version) { <nl> 
mmm Texture.java <nl> ppp Texture.java <nl> - pgl.clearColor(0, 0, 0, 0); <nl> - pgl.clear(PGL.COLOR_BUFFER_BIT); <nl> + pg.pushStyle(); <nl> + pg.blendMode(REPLACE); <nl> + pg.popStyle(); <nl> + pg.pushStyle(); <nl> + pg.blendMode(REPLACE); <nl> + pg.popStyle(); <nl> mmm ASTGenerator.java <nl> ppp ASTGenerator.java <nl> 
mmm SinOsc.java <nl> ppp SinOsc.java <nl> - 	private MethClaInterface m_engine; <nl> + 	private Engine m_engine; <nl> - 		m_engine = new MethClaInterface();		 <nl> + 		m_engine.setPreferences(theParent, 512, 44100); <nl> + 	m_engine.start();	 <nl> mmm TriOsc.java <nl> ppp TriOsc.java <nl> - 	private MethClaInterface m_engine; <nl> 
mmm PGraphics.java <nl> ppp PGraphics.java <nl> - public Canvas canvas; <nl> - } <nl> - if (parent != null) { <nl> - parent.requestFocusInWindow(); <nl> - } <nl> - } <nl> - parent.handleDraw(); <nl> - } <nl> - public boolean displayable() { <nl> - public boolean is2D() { <nl> - public boolean is3D() { <nl> - public boolean isGL() { <nl> 
mmm ASTGenerator.java <nl> ppp ASTGenerator.java <nl> - protected JavaEditor editor; <nl> + protected final JavaEditor editor; <nl> - public ASTGenerator(ErrorCheckerService ecs) { <nl> + public ASTGenerator(JavaEditor editor, ErrorCheckerService ecs) { <nl> + this.editor = editor; <nl> - this.editor = ecs.getEditor(); <nl> 
mmm GridLayout.java <nl> ppp GridLayout.java <nl> + import android.support.v4.graphics.drawable.DrawableCompat; <nl> mmm LinearLayout.java <nl> ppp LinearLayout.java <nl> + import android.support.v4.graphics.drawable.DrawableCompat; <nl> mmm Button.java <nl> ppp Button.java <nl> - DrawableCompat.setTintList(d, tint); <nl> 
new file <nl> ppp ReplicaSetsContext.java <nl> + package org.apache.connect.mongo.replicator; <nl> + import com.mongodb.client.MongoClient; <nl> + import io.openmessaging.connector.api.data.SourceDataEntry; <nl> + import java.util.ArrayList; <nl> + import java.util.Collection; <nl> + import java.util.HashMap; <nl> 
new file <nl> ppp LoginServiceImpl.java <nl> + package org.apache.rocketmq.console.service.impl; <nl> + import org.apache.rocketmq.console.config.RMQConfigure; <nl> + import org.apache.rocketmq.console.service.LoginService; <nl> + import org.apache.rocketmq.console.service.UserService; <nl> + import org.apache.rocketmq.console.util.WebUtil; <nl> 
new file <nl> ppp DefaultRocketMQListenerContainerConstants.java <nl> + package org.apache.rocketmq.spring.starter.core; <nl> + public final class DefaultRocketMQListenerContainerConstants { <nl> + public static final String PROP_NAMESERVER = "nameServer"; <nl> + public static final String PROP_TOPIC = "topic"; <nl> 
mmm BeanDesc.java <nl> ppp BeanDesc.java <nl> + import cn.hutool.core.annotation.Ignore; <nl> + import cn.hutool.core.convert.Convert; <nl> + 		public Object getValueWithConvert(Object bean, Type valueType, boolean ignoreError) { <nl> + 			Object result = null; <nl> + 			try { <nl> + 				result = getValue(bean); <nl> 
mmm JSONConverter.java <nl> ppp JSONConverter.java <nl> + import cn.hutool.json.serialize.GlobalSerializeMapping; <nl> + import cn.hutool.json.serialize.JSONDeserializer; <nl> + public interface JSONArraySerializer<V> extends JSONSerializer<JSONArray, V>{} <nl> new file <nl> ppp JSONDeserializer.java <nl> + package cn.hutool.json.serialize; <nl> 
mmm MetaUtil.java <nl> ppp MetaUtil.java <nl> - 			String catalog = getCataLog(conn); <nl> - 			String schema = getSchema(conn); <nl> + 			final String catalog = getCataLog(conn); <nl> + 			table.setCatalog(catalog); <nl> + 			final String schema = getSchema(conn); <nl> + 			table.setSchema(schema); <nl> - 						table.setColumn(Column.create(tableName, rs)); <nl> 
mmm EmbedAuthenticationManager.java <nl> ppp EmbedAuthenticationManager.java <nl> + import org.springframework.core.Ordered; <nl> + import org.springframework.core.annotation.Order; <nl> + @Order(Ordered.HIGHEST_PRECEDENCE) <nl> mmm BasicAuthorizationTokenParser.java <nl> ppp BasicAuthorizationTokenParser.java <nl> 
mmm DefaultAopMethodAuthorizeDefinitionParser.java <nl> ppp DefaultAopMethodAuthorizeDefinitionParser.java <nl> - if (definition != null && !(definition instanceof EmptyAuthorizeDefinition)) { <nl> + if (definition instanceof EmptyAuthorizeDefinition) { <nl> + return null; <nl> + } <nl> + if (definition != null) { <nl> 
mmm Relation.java <nl> ppp Relation.java <nl> + String TYPE_ORG = "org"; <nl> + String TYPE_DEPARTMENT = "department"; <nl> + String TYPE_POSITION = "position"; <nl> + String TYPE_PERSON = "person"; <nl> mmm BpmProcessServiceImp.java <nl> ppp BpmProcessServiceImp.java <nl> - Task task = bpmTaskService.selectTaskByProcessId(processInstanceId); <nl> 
deleted file <nl> mmm OAuth2SSOAuthorizingListener.java <nl> - package org.hswebframework.web.authorization.shiro.oauth2sso; <nl> - import org.apache.shiro.SecurityUtils; <nl> - import org.apache.shiro.subject.Subject; <nl> - import org.hswebframework.web.authorization.Authentication; <nl> - import org.hswebframework.web.authorization.oauth2.client.OAuth2RequestService; <nl> 
mmm ClassJsonAdapterTest.java <nl> ppp ClassJsonAdapterTest.java <nl> - import static com.squareup.moshi.Util.NO_ANNOTATIONS; <nl> + import static com.squareup.moshi.internal.Util.NO_ANNOTATIONS; <nl> mmm AdapterMethodsFactory.java <nl> ppp AdapterMethodsFactory.java <nl> + import com.squareup.moshi.internal.Util; <nl> 
mmm IOUtil.java <nl> ppp IOUtil.java <nl> mmm AbortPolicyWithReport.java <nl> ppp AbortPolicyWithReport.java <nl> - 	private ThreadDumpper dummper = new ThreadDumpper(); <nl> + 	private ThreadDumpper dumpper = new ThreadDumpper(); <nl> - 		dummper.tryThreadDump(null); <nl> + 		dumpper.tryThreadDump(null); <nl> 
mmm KeyValue.java <nl> ppp KeyValue.java <nl> + private boolean enable; <nl> mmm FileService.java <nl> ppp FileService.java <nl> + LoadTestFileExample example3 = new LoadTestFileExample(); <nl> + example3.createCriteria().andFileIdIn(ids); <nl> + loadTestFileMapper.deleteByExample(example3); <nl> new file <nl> 
new file <nl> ppp TestCaseDTO.java <nl> + package io.metersphere.dto; <nl> + import io.metersphere.base.domain.TestCaseWithBLOBs; <nl> + import lombok.Data; <nl> + @Data <nl> + public class TestCaseDTO extends TestCaseWithBLOBs{ <nl> + private String maintainerName; <nl> + public String getMaintainerName() { <nl> 
new file <nl> ppp HttpRequest.java <nl> + package io.metersphere.api.dto.scenario.request; <nl> + import com.alibaba.fastjson.annotation.JSONField; <nl> + import com.alibaba.fastjson.annotation.JSONType; <nl> + import io.metersphere.api.dto.scenario.Body; <nl> + import io.metersphere.api.dto.scenario.KeyValue; <nl> 
mmm TestCaseService.java <nl> ppp TestCaseService.java <nl> + @Resource <nl> + TestCaseIssueService testCaseIssueService; <nl> + testCaseIssueService.delTestCaseIssues(testCaseId); <nl> + testCase.setUpdateTime(System.currentTimeMillis()); <nl> mmm Scenario.java <nl> ppp Scenario.java <nl> + private Boolean enable; <nl> 
mmm ExtTestPlanTestCaseMapper.java <nl> ppp ExtTestPlanTestCaseMapper.java <nl> + int updateTestCaseStates(@Param("ids") List<String> ids, @Param("reportStatus") String reportStatus); <nl> + List<String> getTestPlanTestCaseIds(String testId); <nl> new file <nl> ppp MessageTask.java <nl> + package io.metersphere.base.domain; <nl> 
new file <nl> ppp TestCaseReviewTestCaseExample.java <nl> + package io.metersphere.base.domain; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + public class TestCaseReviewTestCaseExample { <nl> + protected String orderByClause; <nl> + protected boolean distinct; <nl> + protected List<Criteria> oredCriteria; <nl> 
new file <nl> ppp ExcelValidateHelper.java <nl> + package io.metersphere.excel.util; <nl> + import com.alibaba.excel.annotation.ExcelProperty; <nl> + import javax.validation.ConstraintViolation; <nl> + import javax.validation.Validation; <nl> + import javax.validation.Validator; <nl> + import javax.validation.groups.Default; <nl> 
mmm APITestService.java <nl> ppp APITestService.java <nl> - import io.metersphere.commons.constants.APITestStatus; <nl> - import io.metersphere.commons.constants.FileType; <nl> - import io.metersphere.commons.constants.ScheduleGroup; <nl> - import io.metersphere.commons.constants.ScheduleType; <nl> + import io.metersphere.commons.constants.*; <nl> 
mmm TestCaseReportModuleResultDTO.java <nl> ppp TestCaseReportModuleResultDTO.java <nl> + private Integer prepareCount; <nl> + private Integer skipCount; <nl> + private Integer failureCount; <nl> + private Integer blockingCount; <nl> + private Integer underwayCount; <nl> mmm Schedule.java <nl> ppp Schedule.java <nl> 
mmm TestCaseDTO.java <nl> ppp TestCaseDTO.java <nl> - import lombok.Data; <nl> + import lombok.Getter; <nl> + import lombok.Setter; <nl> - @Data <nl> + @Getter <nl> + @Setter <nl> - public String getMaintainerName() { <nl> - return maintainerName; <nl> - } <nl> - public void setMaintainerName(String maintainerName) { <nl> 
new file <nl> ppp DubboRequest.java <nl> + package io.metersphere.api.dto.scenario.request; <nl> + import com.alibaba.fastjson.annotation.JSONField; <nl> + import com.alibaba.fastjson.annotation.JSONType; <nl> + import com.fasterxml.jackson.annotation.JsonProperty; <nl> + import io.metersphere.api.dto.scenario.KeyValue; <nl> 
new file <nl> ppp KeyValue.java <nl> + package io.metersphere.api.dto.scenario; <nl> + import lombok.Data; <nl> + @Data <nl> + public class KeyValue { <nl> + private String name; <nl> + private String value; <nl> + } <nl> new file <nl> ppp Scenario.java <nl> + package io.metersphere.api.dto.scenario; <nl> + import lombok.Data; <nl> 
new file <nl> ppp LinkMessage.java <nl> + package io.metersphere.notice.message; <nl> + import com.alibaba.fastjson.JSON; <nl> + import org.apache.commons.lang3.StringUtils; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + public class LinkMessage implements Message { <nl> + private String title; <nl> 
mmm ScanPreconditionsVerifierApi18.java <nl> ppp ScanPreconditionsVerifierApi18.java <nl> - public void verify() { <nl> + public void verify(boolean checkLocationProviderState) { <nl> - } else if (!locationServicesStatus.isLocationProviderOk()) { <nl> + } else if (checkLocationProviderState && !locationServicesStatus.isLocationProviderOk()) { <nl> 
mmm CreateUserAction.java <nl> ppp CreateUserAction.java <nl> + import org.slf4j.Logger; <nl> + import org.slf4j.LoggerFactory; <nl> + import win.liyufan.im.DBUtil; <nl> + import win.liyufan.im.Utility; <nl> + private static final Logger LOG = LoggerFactory.getLogger(CreateUserAction.class); <nl> + Utility.printExecption(LOG, e); <nl> 
mmm UnsubscribeDecoder.java <nl> ppp UnsubscribeDecoder.java <nl> - if (!decodeCommonHeader(message, in)) { <nl> + if (!decodeCommonHeader(message, 0x02, in)) { <nl> mmm SubscribeDecoder.java <nl> ppp SubscribeDecoder.java <nl> - if (!decodeCommonHeader(message, in)) { <nl> + if (!decodeCommonHeader(message, 0x02, in)) { <nl> 
mmm OnCameraCallbackListener.java <nl> ppp OnCameraCallbackListener.java <nl> - package cn.jiguang.imui.chatinput.camera; <nl> + package cn.jiguang.imui.chatinput.listener; <nl> - import java.io.File; <nl> + void onStartVideoRecord(); <nl> - void onRecordVideoCompleted(String videoPath); <nl> + void onFinishVideoRecord(String videoPath); <nl> 
mmm IAbstractAddressSpace.java <nl> ppp IAbstractAddressSpace.java <nl> - import java.nio.ByteOrder; <nl> - 	public ByteOrder getByteOrder(); <nl> + 	 * <nl> mmm SharedClassTokenHelperImpl.java <nl> ppp SharedClassTokenHelperImpl.java <nl> - 			doFind = theFilter.acceptFind(className); <nl> - 			if (nativeFlags[CACHE_FULL_FLAG] == 0) { <nl> 
mmm VmCheckCommand.java <nl> ppp VmCheckCommand.java <nl> - import com.ibm.j9ddr.vm29.j9.AlgorithmVersion; <nl> - import com.ibm.j9ddr.vm29.pointer.generated.J9VTableHeaderPointer; <nl> - 		UDATAPointer vTable; <nl> - 		long vTableSize; <nl> - 		long vTableIndex; <nl> - 		if (AlgorithmVersion.getVersionOf(AlgorithmVersion.VTABLE_VERSION).getAlgorithmVersion() >= 1) { <nl> 
mmm MemoryMXBean.java <nl> ppp MemoryMXBean.java <nl> - 	public String getGCMode(); <nl> + public String getGCMode(); <nl> - 	public long getGCMasterThreadCpuUsed(); <nl> + @Deprecated(forRemoval=true, since="15") <nl> + @Deprecated <nl> + public long getGCMasterThreadCpuUsed(); <nl> + public long getGCMainThreadCpuUsed(); <nl> 
mmm DDRInteractive.java <nl> ppp DDRInteractive.java <nl> + import static java.util.logging.Level.FINE; <nl> + import java.io.OutputStream; <nl> - import java.util.logging.Level; <nl> + import com.ibm.j9ddr.command.JNICommandReader; <nl> + import com.ibm.j9ddr.corereaders.debugger.JniOutputStream; <nl> - 	private final List<Context> contexts = new LinkedList<>(); <nl> 
mmm PointerGenerator.java <nl> ppp PointerGenerator.java <nl> + 	MemberName member; <nl> + 	 <nl> deleted file <nl> mmm J9ConfigFlags.java <nl> - package com.ibm.j9ddr.vm29.j9; <nl> - import java.lang.reflect.Field; <nl> - import java.lang.reflect.Modifier; <nl> - import com.ibm.j9ddr.vm29.pointer.generated.J9BuildFlags; <nl> 
new file <nl> ppp DecimalFormatHelper.java <nl> + package com.ibm.jit; <nl> + import java.text.Format; <nl> + import java.text.NumberFormat; <nl> + import java.text.NumberFormat.Field; <nl> + import java.text.DecimalFormat; <nl> + import java.text.DecimalFormatSymbols; <nl> + import java.math.BigDecimal; <nl> 
mmm TargetVM.java <nl> ppp TargetVM.java <nl> - import java.lang.reflect.Method; <nl> + import com.ibm.tools.attach.target.AttachHandler; <nl> + @SuppressWarnings("nls") <nl> - 			Class<?> attachHandlerClass = Class.forName(TargetManager.COM_IBM_TOOLS_ATTACH_TARGET_ATTACH_HANDLER); <nl> - 			final Method getVmId = attachHandlerClass.getMethod("getVmId"); <nl> 
mmm JITHelpers.java <nl> ppp JITHelpers.java <nl> + import com.ibm.oti.vm.J9UnmodifiableClass; <nl> + @J9UnmodifiableClass <nl> mmm ValueTypeGenerator.java <nl> ppp ValueTypeGenerator.java <nl> + 		 <nl> - 		mv.visitVarInsn(ASTORE, fields.length); <nl> + 		mv.visitVarInsn(ASTORE, makeMaxLocal); <nl> - 			mv.visitVarInsn(ALOAD, fields.length); <nl> 
mmm StaticFieldSetterHandle.java <nl> ppp StaticFieldSetterHandle.java <nl> - import sun.misc.Unsafe; <nl> + import com.ibm.jit.JITHelpers; <nl> + package com.ibm.j9.uma.platform; <nl> + import java.util.Vector; <nl> + import com.ibm.uma.IConfiguration; <nl> + import com.ibm.uma.UMA; <nl> + import com.ibm.uma.UMAException; <nl> 
mmm Session.java <nl> ppp Session.java <nl> - 		String launcher = System.getProperty(SYSPROP_LAUNCHER, "dtfjview"); <nl> + 		String launcher = System.getProperty(SYSPROP_LAUNCHER, "jdmpview"); <nl> mmm Jmap.java <nl> ppp Jmap.java <nl> - import java.util.Properties; <nl> - 					runAndPrintCommand(diagProvider, DiagnosticUtils.makeHeapHistoCommand(live)); <nl> 
mmm ManagementUtils.java <nl> ppp ManagementUtils.java <nl> - import java.lang.management.LockInfo; <nl> - import java.lang.management.MemoryNotificationInfo; <nl> - import java.lang.management.MemoryUsage; <nl> - import java.lang.management.MonitorInfo; <nl> - import java.lang.management.ThreadInfo; <nl> - import java.util.concurrent.ConcurrentHashMap; <nl> 
mmm MethodHandle.java <nl> ppp MethodHandle.java <nl> - 	static final byte KIND_FILTERARGUMENTS_WITHCOMBINER = 33; <nl> - 	@SuppressWarnings("unused") <nl> - 	@VMCONSTANTPOOL_METHOD <nl> - 	private MethodHandle filterArgumentsWithCombinerPlaceHolder() { <nl> - 		return this; <nl> - 	} <nl> - import java.nio.ByteBuffer; <nl> 
mmm JITStackWalker.java <nl> ppp JITStackWalker.java <nl> + import com.ibm.j9ddr.vm29.j9.J9ConfigFlags; <nl> - 			if (J9BuildFlags.arch_s390 && !J9BuildFlags.env_data64) { <nl> + 			if (J9ConfigFlags.arch_s390 && !J9BuildFlags.env_data64) { <nl> - 			if (J9BuildFlags.arch_s390) { <nl> + 			if (J9ConfigFlags.arch_s390) { <nl> 
mmm TestAttachAPI.java <nl> ppp TestAttachAPI.java <nl> + 	public static boolean waitForAttachApiInitialization() { <nl> + 		boolean result = false; <nl> + 		try { <nl> + 			Class<?> attachHandlerClass = Class.forName(TargetManager.COM_IBM_TOOLS_ATTACH_TARGET_ATTACH_HANDLER); <nl> + 			final Method waitForAttachApiInitialization = attachHandlerClass.getMethod("waitForAttachApiInitialization"); <nl> 
mmm Access.java <nl> ppp Access.java <nl> + package java.lang; <nl> - package java.lang; <nl> - 	public void setCause(Throwable throwable, Throwable cause) { <nl> - 		throwable.setCause(cause); <nl> - 	} <nl> + 	 <nl> mmm JITRegMap.java <nl> ppp JITRegMap.java <nl> - import com.ibm.j9ddr.vm29.j9.J9ConfigFlags; <nl> 
mmm ManagementFactory.java <nl> ppp ManagementFactory.java <nl> - 		return ServerHolder.instance.get(); <nl> + 		return ServerHolder.platformServer; <nl> - 	private static final class ServerHolder implements PrivilegedAction<MBeanServer> { <nl> + 	private static final class ServerHolder { <nl> - 		static final ServerHolder instance = new ServerHolder(); <nl> 
new file <nl> ppp Test_Math_Fma.java <nl> + package org.openj9.test.java.lang; <nl> + import org.testng.annotations.Test; <nl> + import org.testng.AssertJUnit; <nl> + @Test(groups={ "level.sanity" }, invocationCount=2) <nl> + public class Test_Math_Fma <nl> + { <nl> + @Test <nl> + 	public void test_Math_fma_double() <nl> 
mmm NewElfDump.java <nl> ppp NewElfDump.java <nl> - 		Objects.requireNonNull(byteOrder); <nl> - 		return VarHandles.byteArrayViewHandle(viewArrayClass, (byteOrder == ByteOrder.BIG_ENDIAN)); <nl> - 		Objects.requireNonNull(byteOrder); <nl> - 		return VarHandles.makeByteBufferViewHandle(viewArrayClass, (byteOrder == ByteOrder.BIG_ENDIAN)); <nl> 
mmm MethodHandle.java <nl> ppp MethodHandle.java <nl> + 	private static final Class<?> getClassFromJ9Class(long j9class) throws Throwable { <nl> + 		Class<?> classObject = null; <nl> + 		if (JITHELPERS.is32Bit()) { <nl> + 			classObject = JITHELPERS.getClassFromJ9Class32((int)j9class); <nl> + 		} else { <nl> 
deleted file <nl> mmm TestJps.java <nl> - package org.openj9.test.attachAPI; <nl> - import static org.openj9.test.attachAPI.TestConstants.TARGET_VM_CLASS; <nl> - import static org.testng.AssertJUnit.assertTrue; <nl> - import static org.testng.AssertJUnit.assertEquals; <nl> - import java.io.File; <nl> - import java.io.IOException; <nl> 
mmm ClassLoader.java <nl> ppp ClassLoader.java <nl> - 	SecurityManager smngr = System.getSecurityManager(); <nl> - 	if (smngr != null) <nl> - 		smngr.checkLink(libName); <nl> new file <nl> ppp DependentClassToLoad1.java <nl> + package j9vm.test.classunloading.classestoload; <nl> + import j9vm.test.classunloading.FinalizationIndicator; <nl> 
mmm FindPtrCommand.java <nl> ppp FindPtrCommand.java <nl> - package com.ibm.lang.management.internal; <nl> - import javax.management.MalformedObjectNameException; <nl> - import javax.management.ObjectName; <nl> - import com.ibm.java.lang.management.internal.ManagementPermissionHelper; <nl> - import com.ibm.lang.management.ProcessorMXBean; <nl> 
mmm VrfyTbl.java <nl> ppp VrfyTbl.java <nl> deleted file <nl> mmm TestTruncatedReturn.java <nl> - package org.openj9.test.truncatedReturn; <nl> - import org.testng.annotations.Test; <nl> - import org.testng.AssertJUnit; <nl> - import java.lang.reflect.Method; <nl> - import java.net.URLClassLoader; <nl> - import java.io.FileOutputStream; <nl> 
mmm Jcmd.java <nl> ppp Jcmd.java <nl> - 			+ "NOTE: this utility might significantly affect the performance of the target JVM.%n" <nl> + 			+ "NOTE: this utility may significantly affect the performance of the target JVM.%n" <nl> mmm Jmap.java <nl> ppp Jmap.java <nl> - 			+ "NOTE: this utility might significantly affect the performance of the target VM.%n" <nl> 
mmm OpenJ9DiagnosticsMXBeanImpl.java <nl> ppp OpenJ9DiagnosticsMXBeanImpl.java <nl> mmm FieldAdder.java <nl> ppp FieldAdder.java <nl> - import static jdk.internal.org.objectweb.asm.Opcodes.ASM5; <nl> + import static jdk.internal.org.objectweb.asm.Opcodes.ASM7; <nl> - 		super(ASM5, cv, true); <nl> + 		super(ASM7, cv, true); <nl> 
new file <nl> ppp Test.java <nl> + package test.reflectCache; <nl> + public class Test { <nl> + 	 <nl> + 	public String testField; <nl> + 	 <nl> + 	public Test() {} <nl> + 	public Test(String str) {} <nl> + 	public void testMethod(String str) { <nl> + 		 <nl> + 	} <nl> + } <nl> mmm CallSite.java <nl> ppp CallSite.java <nl> 
mmm Main.java <nl> ppp Main.java <nl> + 		if (dumper._dump != null) { <nl> + 			try { <nl> + 				dumper._dump.releaseResources(); <nl> + 			} catch (IOException e) { <nl> + 			} <nl> + 		} <nl> - 				try { <nl> - 					ClosingFileReader in = fileResolver.openFile(name); <nl> + 				try (ClosingFileReader in = fileResolver.openFile(name)) { <nl> 
mmm ImageFactory.java <nl> ppp ImageFactory.java <nl> - 			Class<?> moduleClass = Class.forName("java.lang.reflect.Module");	 <nl> - 			Class<?> modulesClass = Class.forName("jdk.internal.module.Modules"); <nl> - 	 		Method	getModule = Class.class.getDeclaredMethod("getModule", new Class<?>[] {}); <nl> - 			Method  addExportsToAllUnnamed = modulesClass.getDeclaredMethod("addExportsToAllUnnamed", new Class<?>[] {moduleClass, String.class}); <nl> 
mmm StaticFieldGetterHandle.java <nl> ppp StaticFieldGetterHandle.java <nl> + import static java.lang.invoke.MethodHandleResolver.UNSAFE; <nl> + 	@Test(groups = { "level.extended" }) <nl> + 	public void testDumpWithMonitorDepthHigherThanLimit() { <nl> + 		try { <nl> + 			ThreadInfo[] threads = myBean.dumpAllThreads(true, true, 1); <nl> 
mmm String.java <nl> ppp String.java <nl> + 		if (0 == s1len) { <nl> + 			return true; <nl> + 		} <nl> - 			while (o1 < end) { <nl> + 			byte byteAtO1Last = helpers.getByteFromArrayByIndex(s1Value, s1len-1); <nl> + 			byte byteAtO2Last = helpers.getByteFromArrayByIndex(s2Value, s1len-1); <nl> + 			if (byteAtO1Last != byteAtO2Last <nl> 
mmm ValueTypeGenerator.java <nl> ppp ValueTypeGenerator.java <nl> - 		mv.visitMaxs(makeMaxLocal, makeMaxLocal); <nl> + 		int maxStack = makeMaxLocal; <nl> + 		if (0 == maxStack) { <nl> + 			maxStack += 1; <nl> + 		} <nl> + 		mv.visitMaxs(maxStack, makeMaxLocal); <nl> mmm GenerateJLIClassesHelper.java <nl> ppp GenerateJLIClassesHelper.java <nl> 
mmm SharedClassTokenHelperImpl.java <nl> ppp SharedClassTokenHelperImpl.java <nl> - 			doFind = theFilter.acceptFind(className); <nl> - 			if (nativeFlags[CACHE_FULL_FLAG] == 0) { <nl> - 				doStore = theFilter.acceptStore(className); <nl> - 			} else { <nl> - 				doStore = true; <nl> + 			synchronized(this) { <nl> 
mmm OpenJ9AttachProvider.java <nl> ppp OpenJ9AttachProvider.java <nl> + package org.openj9.test.attachAPI; <nl> + import static org.testng.Assert.assertEquals; <nl> + import static org.testng.Assert.assertTrue; <nl> + import static org.testng.AssertJUnit.assertTrue; <nl> + import java.io.IOException; <nl> + import java.io.PrintStream; <nl> 
deleted file <nl> mmm VarHandleMemoryAddressBase.java <nl> - package java.lang.invoke; <nl> - abstract class VarHandleMemoryAddressBase extends VarHandle { <nl> - 	boolean be; <nl> - 	long alignmentMask; <nl> - 	long offset; <nl> - 	 <nl> - 	VarHandleMemoryAddressBase(Class<?> fieldType, Class<?>[] coordinateTypes, MethodHandle[] handleTable, int modifiers) { <nl> 
mmm DTFJJavaClass.java <nl> ppp DTFJJavaClass.java <nl> - 			if (!ramClass.romClass().modifiers().allBitsIn(J9Consts.J9_JAVA_INTERFACE)) { <nl> + 			if (!ramClass.romClass().modifiers().allBitsIn(J9JavaAccessFlags.J9AccInterface)) { <nl> 
mmm Thread.java <nl> ppp Thread.java <nl> + 	if (threadLocals != null && TerminatingThreadLocal.REGISTRY.isPresent()) { <nl> + 		TerminatingThreadLocal.threadTerminated(); <nl> + 	} <nl> mmm ValueTypeHelper.java <nl> ppp ValueTypeHelper.java <nl> - import com.ibm.j9ddr.vm29.pointer.generated.J9ROMNameAndSignaturePointer; <nl> 
mmm ThreadMXBeanTestCase.java <nl> ppp ThreadMXBeanTestCase.java <nl> - 	public static boolean isLinuxVersionPostRedhat5(String osVersion) { <nl> - 		boolean rc = false; <nl> - 		int ver1, ver2, ver3; <nl> - 		String[] subver = osVersion.split("[^0-9]"); <nl> - 		if ((subver == null) || (subver.length < 3)) { <nl> 
new file <nl> ppp ThreadMXBeanTestCase.java <nl> + package org.openj9.test.java.lang.management.ThreadMXBean; <nl> + import java.lang.management.ThreadInfo; <nl> + public abstract class ThreadMXBeanTestCase extends ThreadMXBeanTestCaseCommon { <nl> + 	@Override <nl> + 	void printExtraAttributes(ThreadInfo ti) { <nl> 
new file <nl> ppp module-info.java <nl> + module openj9.jvm { <nl> + 	exports com.ibm.jvm; <nl> + } <nl> 
mmm Reference.java <nl> ppp Reference.java <nl> - 	clearImpl(); <nl> - } <nl> - private void clearImpl() { <nl> - 		clearImpl(); <nl> + 		clear(); <nl> mmm StructureHeader.java <nl> ppp StructureHeader.java <nl> - package jit.test.recognizedMethod; <nl> - import org.testng.AssertJUnit; <nl> - import org.testng.annotations.Test; <nl> 
deleted file <nl> mmm PrintObjectFieldsHelper.java <nl> - package com.ibm.j9ddr.vm29.pointer.helper; <nl> - import static com.ibm.j9ddr.vm29.structure.J9FieldFlags.J9FieldFlagObject; <nl> - import static com.ibm.j9ddr.vm29.structure.J9FieldFlags.J9FieldSizeDouble; <nl> - import static com.ibm.j9ddr.vm29.structure.J9ROMFieldOffsetWalkState.J9VM_FIELD_OFFSET_WALK_INCLUDE_HIDDEN; <nl> 
mmm ValueTypeHelper.java <nl> ppp ValueTypeHelper.java <nl> + import org.openj9.test.util.VersionCheck; <nl> + static final int classVersion = VersionCheck.classFile(); <nl> - cw.visit(V14 | V_PREVIEW, ACC_FINAL | ACC_SUPER, className, null, "java/lang/Record", null); <nl> + cw.visit(classVersion | V_PREVIEW, ACC_FINAL | ACC_SUPER, className, null, "java/lang/Record", null); <nl> 
mmm VarHandles.java <nl> ppp VarHandles.java <nl> + package java.lang.invoke; <nl> + import java.nio.ByteOrder; <nl> + class VarHandles { <nl> + 	@SuppressWarnings("unused") <nl> + 	static VarHandle makeMemoryAddressViewHandle(Class<?> carrier, long alignmentMask, ByteOrder byteOrder, long offset, long[] strides) { <nl> 
mmm FieldVarHandle.java <nl> ppp FieldVarHandle.java <nl> - 		this.vmslot = lookupField(definingClass, fieldName, MethodType.getBytecodeStringName(fieldType), fieldType, isStatic, accessClass) + header; <nl> + 		this.vmslot = lookupField(definingClass, fieldName, MethodTypeHelper.getBytecodeStringName(fieldType), fieldType, isStatic, accessClass) + header; <nl> 
mmm J9ObjectHelper.java <nl> ppp J9ObjectHelper.java <nl> + import sun.misc.Unsafe; <nl> + 	private final byte coder; <nl> - 		if (enableCompression) { <nl> - 			return coder; <nl> + 		if (enableCompression && (null == compressionFlag || count >= 0)) { <nl> + 			return LATIN1; <nl> - 		if (enableCompression && (null == compressionFlag || this.coder == LATIN1)) { <nl> 
mmm PlatformWindows.java <nl> ppp PlatformWindows.java <nl> - 		if ( !configuration.isFlagSet("uma_windowsRebase") ) { <nl> + 		if ( configuration.isFlagSet("build_openj9") ) { <nl> mmm PrimitiveHandle.java <nl> ppp PrimitiveHandle.java <nl> + import sun.misc.Unsafe; <nl> - import com.ibm.jit.JITHelpers; <nl> 
mmm String.java <nl> ppp String.java <nl> + 		 <nl> + 		 <nl> + 				 <nl> + 			chars.getClass(); <nl> + 				splitChars.getClass(); <nl> + 		 <nl> + 		 <nl> + 				 <nl> + 				 <nl> - 			char[] chars = this.value; <nl> + 			char[] <nl> + 			chars = this.value; <nl> + 			chars.getClass(); <nl> - 				char[] splitChars = regex.value; <nl> 
new file <nl> ppp MainRunner.java <nl> + package org.testKitGen; <nl> + public class MainRunner { <nl> + 	private MainRunner() { <nl> + 	} <nl> + 	public static void main(String[] args) { <nl> + 		Options.parse(args); <nl> + 		MainRunner.start(); <nl> + 	} <nl> + 	public static void start() { <nl> + 		System.out.println("\nSTART TEST KIT GEN\n"); <nl> 
mmm ClassLoader.java <nl> ppp ClassLoader.java <nl> - 		unnamedModule = SharedSecrets.getJavaLangReflectModuleAccess().defineUnnamedModule(this); <nl> - 			unnamedModule = SharedSecrets.getJavaLangReflectModuleAccess().defineUnnamedModule(this); <nl> mmm Util.java <nl> ppp Util.java <nl> + import java.io.IOException; <nl> 
mmm Class.java <nl> ppp Class.java <nl> + package java.lang; <nl> - package java.lang; <nl> - 	J9VMInternals.prepare(Constructor.class); <nl> - 	J9VMInternals.prepare(Method.class); <nl> - 	try { <nl> - 		constructorParameterTypesField = Constructor.class.getDeclaredFieldImpl("parameterTypes"); <nl> - 		methodParameterTypesField = Method.class.getDeclaredFieldImpl("parameterTypes"); <nl> 
new file <nl> ppp JniThread.java <nl> + package com.ibm.j9ddr.corereaders.debugger; <nl> + import java.util.ArrayList; <nl> + import java.util.Collection; <nl> + import java.util.LinkedList; <nl> + import java.util.List; <nl> + import java.util.Properties; <nl> + import java.util.SortedMap; <nl> + import com.ibm.j9ddr.CorruptDataException; <nl> 
mmm ByteCodeDumper.java <nl> ppp ByteCodeDumper.java <nl> - 	private static int switchPaddingSize(UDATA start) { <nl> - 		return 3 - (start.intValue() % 4); <nl> - 	} <nl> mmm TestLoadingClassesFromJarfile.java <nl> ppp TestLoadingClassesFromJarfile.java <nl> - 			"org.openj9.test.classRelationshipVerifier.TestClassRelationshipVerifier", <nl> 
mmm Class.java <nl> ppp Class.java <nl> + 	if (isHidden()) { <nl> + 		return null; <nl> + 	} <nl> + 	private native boolean isHiddenImpl(); <nl> - 		return false; <nl> + 		return isHiddenImpl(); <nl> new file <nl> ppp SealedClassGenerator.java <nl> + package org.openj9.test.utilities; <nl> + import org.objectweb.asm.*; <nl> 
mmm String.java <nl> ppp String.java <nl> - 					byte toReplace = helpers.getByteFromArrayByIndex(regex, 0); <nl> + 					byte toReplace = helpers.getByteFromArrayByIndex(regex.value, 0); <nl> - 						replacement = helpers.getByteFromArrayByIndex(substitute, 0); <nl> + 						replacement = helpers.getByteFromArrayByIndex(substitute.value, 0); <nl> 
new file <nl> ppp UriLinkifier.java <nl> + package com.fsck.k9.message.html; <nl> + import java.util.HashMap; <nl> + import java.util.Locale; <nl> + import java.util.Map; <nl> + import java.util.regex.Matcher; <nl> + import java.util.regex.Pattern; <nl> + import android.text.TextUtils; <nl> + public class UriLinkifier { <nl> 
mmm MessageCompose.java <nl> ppp MessageCompose.java <nl> + private static final String STATE_ALREADY_NOTIFIED_USER_OF_EMPTY_SUBJECT = "alreadyNotifiedUserOfEmptySubject"; <nl> + private boolean alreadyNotifiedUserOfEmptySubject = false; <nl> + outState.putBoolean(STATE_ALREADY_NOTIFIED_USER_OF_EMPTY_SUBJECT, alreadyNotifiedUserOfEmptySubject); <nl> 
mmm AuthType.java <nl> ppp AuthType.java <nl> + EXTERNAL(R.string.account_setup_auth_type_tls_client_certificate), <nl> + public final String clientCertificateAlias; <nl> - String password) { <nl> + String password, String clientCertificateAlias) { <nl> + this.clientCertificateAlias = clientCertificateAlias; <nl> 
mmm EditIdentity.java <nl> ppp EditIdentity.java <nl> - import android.view.KeyEvent; <nl> - public boolean onKeyDown(int keyCode, KeyEvent event) { <nl> - if (keyCode == KeyEvent.KEYCODE_BACK) { <nl> - saveIdentity(); <nl> - return true; <nl> - } <nl> - return super.onKeyDown(keyCode, event); <nl> + public void onBackPressed() { <nl> 
mmm GlobalSettings.java <nl> ppp GlobalSettings.java <nl> + s.put("fontSizeMessageViewBCC", Settings.versions( <nl> + new V(48, new FontSizeSetting(FontSizes.FONT_DEFAULT)) <nl> + )); <nl> mmm MessageListFragment.java <nl> ppp MessageListFragment.java <nl> - handler.updateFooter(context.getResources().getQuantityString(R.plurals.remote_search_downloading_limited, <nl> 
mmm MimeBodyPart.java <nl> ppp MimeBodyPart.java <nl> + import com.fsck.k9.mail.Multipart; <nl> - @Override <nl> - public void writeHeaderTo(OutputStream out) throws IOException, MessagingException { <nl> - mHeader.writeTo(out); <nl> - } <nl> mmm Pop3Store.java <nl> ppp Pop3Store.java <nl> + import android.annotation.SuppressLint; <nl> 
mmm StoreSchemaDefinition.java <nl> ppp StoreSchemaDefinition.java <nl> + case X_GOT_ALL_HEADERS: <nl> mmm AccountSetupBasics.java <nl> ppp AccountSetupBasics.java <nl> - String user = email; <nl> + String user = emailParts[0]; <nl> new file <nl> ppp MessagePreviewCreatorTest.java <nl> + package com.fsck.k9.message.preview; <nl> 
new file <nl> ppp IdentityAdapter.java <nl> + package com.fsck.k9.activity.compose; <nl> + import android.content.Context; <nl> + import android.view.LayoutInflater; <nl> + import android.view.View; <nl> + import android.view.ViewGroup; <nl> + import android.widget.BaseAdapter; <nl> + import android.widget.TextView; <nl> 
new file <nl> ppp BaseActivity.java <nl> + package org.openintents.openpgp.example; <nl> + import android.content.Intent; <nl> + import android.os.Bundle; <nl> + import android.preference.Preference; <nl> + import android.preference.Preference.OnPreferenceClickListener; <nl> + import android.preference.PreferenceActivity; <nl> 
mmm MessageHeader.java <nl> ppp MessageHeader.java <nl> - private static final int DEFAULT_SUBJECT_LINES = 3; <nl> - mSubjectView.setOnClickListener(this); <nl> - if (id == R.id.subject) { <nl> - toggleSubjectViewMaxLines(); <nl> - } else if (id == R.id.from) { <nl> + if (id == R.id.from) { <nl> - private void toggleSubjectViewMaxLines() { <nl> 
mmm ImapList.java <nl> ppp ImapList.java <nl> - class ImapList extends ArrayList<Object> { <nl> + public class ImapList extends ArrayList<Object> { <nl> - public boolean isList(int index) { <nl> - return inRange(index) && get(index) instanceof ImapList; <nl> - } <nl> - public boolean isString(int index) { <nl> 
mmm MessagingController.java <nl> ppp MessagingController.java <nl> - if (message.getHeader(K9.IDENTITY_HEADER).length > 0 || message.isSet(Flag.DRAFT)) { <nl> + if (message.getHeader(K9.IDENTITY_HEADER).length > 0) { <nl> mmm AttachmentPresenter.java <nl> ppp AttachmentPresenter.java <nl> + import com.fsck.k9.controller.MessageReference; <nl> 
mmm GlobalSettings.java <nl> ppp GlobalSettings.java <nl> - s.put("compactLayouts", Settings.versions( <nl> - new V(1, new BooleanSetting(false)) <nl> - )); <nl> - s.put("messageListCheckboxes", Settings.versions( <nl> - new V(1, new BooleanSetting(false)) <nl> - )); <nl> - s.put("messageListStars", Settings.versions( <nl> 
mmm SmtpTransport.java <nl> ppp SmtpTransport.java <nl> - NegativeSmtpReplyException firstNegativeResponse = null; <nl> - boolean dataCommandOk = true; <nl> + NegativeSmtpReplyException negativeRecipient = null; <nl> - dataCommandOk = false; <nl> + throw exception; <nl> - if (firstNegativeResponse == null) { <nl> 
mmm MessagingController.java <nl> ppp MessagingController.java <nl> - if (!TextUtils.equals(initialFolder, ref.getFolderName())) { <nl> + if (!TextUtils.equals(initialFolder, ref.folderName)) { <nl> - Account account = Preferences.getPreferences(context).getAccount(message.getAccountUuid()); <nl> - TaskStackBuilder stack = buildMessageListBackStack(context, account, message.getFolderName()); <nl> 
deleted file <nl> mmm IndicatorLayout.java <nl> - package com.handmark.pulltorefresh.library.internal; <nl> - import android.annotation.SuppressLint; <nl> - import android.content.Context; <nl> - import android.graphics.Matrix; <nl> - import android.graphics.drawable.Drawable; <nl> - import android.view.View; <nl> 
mmm MessageCompose.java <nl> ppp MessageCompose.java <nl> + import android.text.TextUtils; <nl> - if (message.getReferences() != null && message.getReferences().length > 0) { <nl> - StringBuilder buffy = new StringBuilder(); <nl> - for (int i = 0; i < message.getReferences().length; i++) <nl> - buffy.append(message.getReferences()[i]); <nl> 
mmm MessageContainerView.java <nl> ppp MessageContainerView.java <nl> + private View unsignedTextDivider; <nl> + unsignedTextDivider = findViewById(R.id.message_unsigned_divider); <nl> - AttachmentViewCallback attachmentCallback) { <nl> + boolean hideUnsignedTextDivider, AttachmentViewCallback attachmentCallback) { <nl> 
mmm Account.java <nl> ppp Account.java <nl> - return RemoteStore.getInstance(K9.app, this, null); <nl> + return RemoteStore.getInstance(K9.app, this); <nl> mmm Commands.java <nl> ppp Commands.java <nl> - public static final String AUTHENTICATE_XOAUTH2="AUTHENTICATE XOAUTH2"; <nl> mmm AuthType.java <nl> ppp AuthType.java <nl> 
mmm LocalStore.java <nl> ppp LocalStore.java <nl> - } catch (UnsupportedEncodingException usee) { <nl> + } catch (UnsupportedEncodingException uee) { <nl> mmm AccountSetupIncoming.java <nl> ppp AccountSetupIncoming.java <nl> - import com.fsck.k9.mail.AuthType; <nl> - private static final String POP3_PORT = "110"; <nl> 
deleted file <nl> mmm NamespaceResponseTest.java <nl> - package com.fsck.k9.mail.store.imap; <nl> - import java.io.ByteArrayInputStream; <nl> - import java.io.IOException; <nl> - import java.util.Arrays; <nl> - import java.util.Collections; <nl> - import com.fsck.k9.mail.filter.PeekableInputStream; <nl> - import org.junit.Test; <nl> 
mmm Accounts.java <nl> ppp Accounts.java <nl> + private MessagingController controller; <nl> - AccountStats stats = account.getStats(Accounts.this); <nl> + AccountStats stats = controller.getAccountStats(account); <nl> + controller = MessagingController.getInstance(getApplicationContext()); <nl> mmm ImapSyncTest.java <nl> 
mmm QuotedMessagePresenter.java <nl> ppp QuotedMessagePresenter.java <nl> + import com.fsck.k9.mailstore.AttachmentResolver; <nl> - view.setQuotedHtml(quotedHtmlContent.getQuotedContent()); <nl> + view.setQuotedHtml(quotedHtmlContent.getQuotedContent(), AttachmentResolver <nl> + .createFromPart(messageCompose, sourceMessage)); <nl> 
mmm PgpData.java <nl> ppp PgpData.java <nl> + private static final long serialVersionUID = 6314045536470848410L; <nl> mmm FetchProfile.java <nl> ppp FetchProfile.java <nl> + private static final long serialVersionUID = -5520076119120964166L; <nl> + private static final long serialVersionUID = -4067248341419617583L; <nl> 
mmm MigrationTest.java <nl> ppp MigrationTest.java <nl> - K9.setDebug(true); <nl> + K9.setDebugLoggingEnabled(true); <nl> mmm AttachmentTempFileProvider.java <nl> ppp AttachmentTempFileProvider.java <nl> - if (K9.isDebug()) { <nl> + if (K9.isDebugLoggingEnabled()) { <nl> mmm LocalStore.java <nl> ppp LocalStore.java <nl> 
mmm GlobalSettings.java <nl> ppp GlobalSettings.java <nl> + import com.fsck.k9.R; <nl> + import com.fsck.k9.preferences.Settings.PseudoEnumSetting; <nl> + s.put("language", Settings.versions( <nl> + new V(1, new LanguageSetting()) <nl> + )); <nl> + private static class LanguageSetting extends PseudoEnumSetting<String> { <nl> 
mmm MessageViewInfoExtractorTest.java <nl> ppp MessageViewInfoExtractorTest.java <nl> - List<Part> outputNonViewableParts = new ArrayList<Part>(); <nl> + List<Part> outputNonViewableParts = new ArrayList<>(); <nl> - MessageViewInfo messageViewInfo = messageViewInfoExtractor.extractMessageForView(message, null); <nl> 
mmm Accounts.java <nl> ppp Accounts.java <nl> - if (K9.useCompactLayouts()) { <nl> - holder.accountsItemLayout.setMinimumHeight(0); <nl> - } <nl> - if (account instanceof SearchAccount || K9.useCompactLayouts()) { <nl> + if (account instanceof SearchAccount) { <nl> mmm Prefs.java <nl> ppp Prefs.java <nl> - private static final String PREFERENCE_COMPACT_LAYOUTS = "compact_layouts"; <nl> 
mmm Address_quoteAtoms.java <nl> ppp Address_quoteAtoms.java <nl> - import junit.framework.TestCase; <nl> - public class Address_quoteAtoms extends TestCase <nl> + import org.junit.Test; <nl> + import static org.junit.Assert.assertEquals; <nl> + public class Address_quoteAtoms <nl> - public void testNoQuote() { <nl> 
mmm CoreService.java <nl> ppp CoreService.java <nl> - import com.fsck.k9.BuildConfig; <nl> - public static final String WAKE_LOCK_ID = BuildConfig.APPLICATION_ID + ".service.CoreService.wakeLockId"; <nl> + public static final String WAKE_LOCK_ID = "com.fsck.k9.service.CoreService.wakeLockId"; <nl> mmm MessagingController.java <nl> 
mmm TestDBContentProviderActivity.java <nl> ppp TestDBContentProviderActivity.java <nl> + public void bulkInsert(View view) { <nl> + ContentValues[] values = new ContentValues[3]; <nl> + ContentValues contentValues = new ContentValues(); <nl> + contentValues.put(TestProviderInfo.TestEntry.COLUMN_NAME, "test"); <nl> 
new file <nl> ppp TestActivityOrientation.java <nl> + package com.tencent.shadow.demo.usecases.activity; <nl> + import android.content.pm.ActivityInfo; <nl> + import android.content.res.Configuration; <nl> + import android.os.Bundle; <nl> + import android.support.annotation.Nullable; <nl> + import android.view.View; <nl> 
new file <nl> ppp SimpleIdlingResource.java <nl> + package com.tencent.shadow.demo.usecases; <nl> + import androidx.test.espresso.IdlingResource; <nl> + import java.util.concurrent.atomic.AtomicBoolean; <nl> + public class SimpleIdlingResource implements IdlingResource { <nl> + private volatile ResourceCallback mCallback; <nl> 
deleted file <nl> mmm HostApplication.java <nl> - package com.tencent.shadow.demo.host; <nl> - import android.app.Application; <nl> - import android.os.Build; <nl> - import android.os.StrictMode; <nl> - public class HostApplication extends Application { <nl> - private static Application sApp; <nl> - @Override <nl> 
new file <nl> ppp AnnotatedServiceBindingBuilder.java <nl> + package com.linecorp.armeria.server; <nl> + import static java.util.Objects.requireNonNull; <nl> + import java.nio.charset.Charset; <nl> + import java.time.Duration; <nl> + import java.util.List; <nl> + import java.util.function.Function; <nl> + import com.google.common.collect.ImmutableList; <nl> 
deleted file <nl> mmm VirtualHostRouteBuilder.java <nl> - package com.linecorp.armeria.server; <nl> - import static java.util.Objects.requireNonNull; <nl> - import java.nio.charset.Charset; <nl> - import java.time.Duration; <nl> - import java.util.function.Function; <nl> - import com.linecorp.armeria.common.HttpMethod; <nl> 
mmm HttpServerHandler.java <nl> ppp HttpServerHandler.java <nl> + import static com.google.common.base.MoreObjects.firstNonNull; <nl> + import java.util.function.Consumer; <nl> + import javax.annotation.Nullable; <nl> + import com.linecorp.armeria.common.NonWrappingRequestContext; <nl> + import com.linecorp.armeria.common.logging.DefaultRequestLog; <nl> 
mmm Server.java <nl> ppp Server.java <nl> + public String defaultHostname() { <nl> + return config().defaultVirtualHost().defaultHostname(); <nl> + } <nl> - return new TomcatService(new TomcatServiceConfig( <nl> + return TomcatService.forConfig(new TomcatServiceConfig( <nl> new file <nl> ppp VirtualHostBuilderTest.java <nl> 
mmm ZooKeeperRegistrationTest.java <nl> ppp ZooKeeperRegistrationTest.java <nl> - import static org.junit.Assert.fail; <nl> + import java.util.Set; <nl> - import org.junit.After; <nl> - import org.junit.Before; <nl> - import org.junit.Test; <nl> + import org.junit.jupiter.api.AfterEach; <nl> + import org.junit.jupiter.api.BeforeEach; <nl> 
mmm HttpHeaders.java <nl> ppp HttpHeaders.java <nl> + default HttpHeaders toMutable() { <nl> + return this; <nl> + } <nl> mmm CorsService.java <nl> ppp CorsService.java <nl> - setCorsResponseHeaders(ctx, req, headers); <nl> - return headers; <nl> + final HttpHeaders mutableHeaders = headers.toMutable(); <nl> + setCorsResponseHeaders(ctx, req, mutableHeaders); <nl> 
mmm EventLoopCheckingCompletableFuture.java <nl> ppp EventLoopCheckingCompletableFuture.java <nl> - import java.util.Collections; <nl> - import java.util.Set; <nl> - import java.util.WeakHashMap; <nl> + import static com.linecorp.armeria.internal.eventloop.EventLoopCheckingUtil.maybeLogIfOnEventLoop; <nl> 
mmm ConcurrencyLimitingHttpClientTest.java <nl> ppp ConcurrencyLimitingHttpClientTest.java <nl> - import org.junit.AfterClass; <nl> + import org.junit.ClassRule; <nl> - import io.netty.channel.DefaultEventLoop; <nl> - import io.netty.channel.EventLoop; <nl> + import com.linecorp.armeria.testing.common.EventLoopRule; <nl> 
mmm ServerConfig.java <nl> ppp ServerConfig.java <nl> + import java.util.concurrent.ExecutorService; <nl> - private final Executor blockingTaskExecutor; <nl> + private final ExecutorService blockingTaskExecutor; <nl> - this.blockingTaskExecutor = requireNonNull(blockingTaskExecutor, "blockingTaskExecutor"); <nl> 
mmm ThriftOverHttpClientTest.java <nl> ppp ThriftOverHttpClientTest.java <nl> - private static final DevNullService.AsyncIface devNullHandler = (value, resultHandler) -> { <nl> + private static final DevNullService.AsyncIface devNullHanlder = (value, resultHandler) -> { <nl> - DEVNULL(devNullHandler, DevNullService.Iface.class, DevNullService.AsyncIface.class), <nl> 
mmm DocServiceTest.java <nl> ppp DocServiceTest.java <nl> + import static com.linecorp.armeria.common.SerializationFormat.THRIFT_BINARY; <nl> + import static com.linecorp.armeria.common.SerializationFormat.THRIFT_COMPACT; <nl> + import static com.linecorp.armeria.common.SerializationFormat.THRIFT_TEXT; <nl> 
new file <nl> ppp ClassPathHttpFile.java <nl> + package com.linecorp.armeria.server.file; <nl> + import java.io.IOException; <nl> + import java.io.InputStream; <nl> + import java.net.URL; <nl> + import java.net.URLConnection; <nl> + import java.time.Clock; <nl> + import java.util.function.BiFunction; <nl> + import javax.annotation.Nullable; <nl> 
mmm ServiceRequestContextWrapper.java <nl> ppp ServiceRequestContextWrapper.java <nl> + import com.linecorp.armeria.common.Request; <nl> - HttpMethod method, String path, @Nullable String query, Object request) { <nl> + HttpMethod method, String path, @Nullable String query, Request request) { <nl> - public final <T> T request() { <nl> 
mmm RetryingRpcClientTest.java <nl> ppp RetryingRpcClientTest.java <nl> - import com.linecorp.armeria.common.RpcRequest; <nl> - .decorator(RpcRequest.class, RpcResponse.class, <nl> - new RetryingRpcClientBuilder(strategy).maxTotalAttempts(maxAttempts).newDecorator()) <nl> + .rpcDecorator(new RetryingRpcClientBuilder(strategy) <nl> 
mmm CityMapper.java <nl> ppp CityMapper.java <nl> + @AliasFor(annotation = ImportAutoConfiguration.class, attribute = "exclude") <nl> + Class<?>[] excludeAutoConfiguration() default {}; <nl> mmm CityDao.java <nl> ppp CityDao.java <nl> 
mmm CityMapper.java <nl> ppp CityMapper.java <nl> - @AliasFor(annotation = ImportAutoConfiguration.class, attribute = "exclude") <nl> - Class<?>[] excludeAutoConfiguration() default {}; <nl> mmm SpringBootVFS.java <nl> ppp SpringBootVFS.java <nl> 
deleted file <nl> mmm LiquibaseRollbackOneChangeSetSQL.java <nl> - package org.liquibase.maven.plugins; <nl> - import liquibase.Liquibase; <nl> - import liquibase.changelog.ChangeLogParameters; <nl> - import liquibase.command.AbstractSelfConfiguratingCommand; <nl> - import liquibase.command.CommandExecutionException; <nl> 
mmm ExecutablePreparedStatementBase.java <nl> ppp ExecutablePreparedStatementBase.java <nl> + import liquibase.logging.LogFactory; <nl> + import liquibase.logging.Logger; <nl> + private Logger log = LogFactory.getLogger(); <nl> + log.info("Prepared statement: "+sql); <nl> + log.debug("Number of columns = "+cols.size()); <nl> 
new file <nl> ppp AddForeignKeyConstraintAction.java <nl> + package org.liquibase.ide.common.change.action; <nl> + import liquibase.change.AddForeignKeyConstraintChange; <nl> + import liquibase.change.Change; <nl> + import liquibase.database.structure.Column; <nl> + import org.liquibase.ide.common.change.wizard.RefactorWizard; <nl> 
deleted file <nl> mmm TestInitialContextFactory.java <nl> - package liquibase.integration.servlet; <nl> - import static javax.naming.Context.INITIAL_CONTEXT_FACTORY; <nl> - import java.util.Hashtable; <nl> - import javax.naming.Context; <nl> - import javax.naming.spi.InitialContextFactory; <nl> - public class TestInitialContextFactory implements InitialContextFactory { <nl> 
mmm LiquibaseFutureRollbackSQL.java <nl> ppp LiquibaseFutureRollbackSQL.java <nl> - @Override <nl> - public void execute() throws MojoExecutionException, MojoFailureException { <nl> - commandName = "rollbackOneChangeSet"; <nl> - super.execute(); <nl> - } <nl> mmm LiquibaseGenerateChangeLogMojo.java <nl> ppp LiquibaseGenerateChangeLogMojo.java <nl> 
mmm TableComparator.java <nl> ppp TableComparator.java <nl> + exclude.add("columns"); <nl> mmm ServiceLocator.java <nl> ppp ServiceLocator.java <nl> + } catch (NoClassDefFoundError e) { <nl> + String message = "Can not use " + clazz + " as a Liquibase service because " + e.getMessage().replace("/", ".") + " is not in the classpath"; <nl> 
mmm ChangeLogSerializer.java <nl> ppp ChangeLogSerializer.java <nl> + import liquibase.change.Change; <nl> + import liquibase.change.ColumnConfig; <nl> + import liquibase.changelog.ChangeSet; <nl> + import liquibase.changelog.DatabaseChangeLog; <nl> + import liquibase.sql.visitor.SqlVisitor; <nl> - import java.io.IOException; <nl> 
mmm InsertExecutablePreparedStatement.java <nl> ppp InsertExecutablePreparedStatement.java <nl> - Database database, String catalogName, String schemaName, String tableName, List<? extends ColumnConfig> columns, <nl> + Database database, String catalogName, String schemaName, String tableName, List<ColumnConfig> columns, <nl> 
mmm AddColumnChange.java <nl> ppp AddColumnChange.java <nl> + notNullConstraint.setConstraintName(constraintsConfig.getNotNullConstraintName()); <nl> mmm ConstraintsConfig.java <nl> ppp ConstraintsConfig.java <nl> + private String notNullConstraintName; <nl> + public String getNotNullConstraintName() { <nl> 
mmm MarkChangeSetRanGenerator.java <nl> ppp MarkChangeSetRanGenerator.java <nl> + import liquibase.database.ObjectQuotingStrategy; <nl> - import liquibase.structure.core.Column; <nl> + ObjectQuotingStrategy currentStrategy = database.getObjectQuotingStrategy(); <nl> + database.setObjectQuotingStrategy(ObjectQuotingStrategy.LEGACY); <nl> 
mmm UnsupportedDatabase.java <nl> ppp UnsupportedDatabase.java <nl> - return "VARCHAR(36)"; <nl> + return "CHAR(36)"; <nl> mmm PostgresDatabase.java <nl> ppp PostgresDatabase.java <nl> - return null; <nl> + return "CHAR(36)"; <nl> new file <nl> ppp SpringMigrator.java <nl> + package liquibase.spring; <nl> + import liquibase.FileOpener; <nl> 
mmm HubService.java <nl> ppp HubService.java <nl> - import java.util.Map; <nl> - Operation createOperation(String operationType, HubChangeLog changeLog, Connection connection, Map<String, String> operationParameters) throws LiquibaseHubException; <nl> + Operation createOperation(String operationType, HubChangeLog changeLog, Connection connection) throws LiquibaseHubException; <nl> 
mmm MySQLIntegrationTest.java <nl> ppp MySQLIntegrationTest.java <nl> - DatabaseSnapshot snapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(new SnapshotControl(), getDatabase()); <nl> + DatabaseSnapshot snapshot = SnapshotGeneratorFactory.getInstance().createSnapshot(getDatabase().getDefaultSchema(), getDatabase(), new SnapshotControl()); <nl> 
mmm PreconditionContainer.java <nl> ppp PreconditionContainer.java <nl> + import liquibase.changelog.ChangeLogChild; <nl> - public class PreconditionContainer extends AndPrecondition { <nl> + public class PreconditionContainer extends AndPrecondition implements ChangeLogChild { <nl> + @Override <nl> + public String getName() { <nl> 
mmm SequenceSnapshotGenerator.java <nl> ppp SequenceSnapshotGenerator.java <nl> + import liquibase.database.core.DB2Database.DataServerType; <nl> - if (database.getDatabaseProductName().startsWith("DB2 UDB for AS/400")) { <nl> + if (((DB2Database) database).getDataServerType() == DataServerType.DB2I) { <nl> 
mmm PostgresDatabase.java <nl> ppp PostgresDatabase.java <nl> - @Override <nl> - public SqlStatement getViewDefinitionSql(String schemaName, String name) throws JDBCException { <nl> - return new RawSqlStatement("select definition from pg_views where viewname='" + name + "' AND schemaname='" + convertRequestedSchemaToSchema(schemaName) + "'"); <nl> 
mmm AbstractDatabase.java <nl> ppp AbstractDatabase.java <nl> + if (schema instanceof Schema.DatabaseSpecific && ((Schema.DatabaseSpecific) schema).getDatabase().equals(this)) { <nl> + return schema; <nl> + } <nl> - schema = new Schema(getDefaultCatalogName(), getDefaultSchemaName()); <nl> + schema = new Schema.DatabaseSpecific(getDefaultCatalogName(), getDefaultSchemaName(), this); <nl> 
mmm MissingTableChangeGenerator.java <nl> ppp MissingTableChangeGenerator.java <nl> - constraintsConfig.setNotNullConstraintName(column.getAttribute("notNullConstraintName", String.class)); <nl> mmm MissingUniqueConstraintChangeGenerator.java <nl> ppp MissingUniqueConstraintChangeGenerator.java <nl> + import liquibase.logging.LogFactory; <nl> 
mmm LiquibaseRollback.java <nl> ppp LiquibaseRollback.java <nl> - protected enum RollbackType { <nl> - TAG, DATE, COUNT <nl> - } <nl> - protected String rollbackTag; <nl> - protected int rollbackCount; <nl> - protected String rollbackDate; <nl> - protected RollbackType type; <nl> + protected enum RollbackType { <nl> 
mmm CreateProcedureGenerator.java <nl> ppp CreateProcedureGenerator.java <nl> + import liquibase.configuration.GlobalConfiguration; <nl> - if (schemaName == null) { <nl> + if (schemaName == null && LiquibaseConfiguration.getInstance().getConfiguration(GlobalConfiguration.class).getAlwaysOverrideStoredLogicSchema()) { <nl> 
mmm XxlJobRegistryDao.java <nl> ppp XxlJobRegistryDao.java <nl> - public int registryDelete(@Param("registryGroup") String registryGroup, <nl> + public int registryDelete(@Param("registryGroup") String registGroup, <nl> mmm ExecutorRouteLRU.java <nl> ppp ExecutorRouteLRU.java <nl> mmm CronExpression.java <nl> 
mmm AuthKeysAction.java <nl> ppp AuthKeysAction.java <nl> - private static Logger log = LoggerFactory.getLogger(AuthKeysAction.class); <nl> + 	public static final String REQUIRED = "Required"; <nl> + 	public static final String INVALID = "Invalid"; <nl> + 	public static final String PUBLIC_KEY_PUBLIC_KEY = "publicKey.publicKey"; <nl> 
mmm LogRebuilder.java <nl> ppp LogRebuilder.java <nl> - import static uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferDescriptor.TERM_TAIL_COUNTER_OFFSET; <nl> - public void tail(final int offset) <nl> - { <nl> - metaDataBuffer().putIntOrdered(TERM_TAIL_COUNTER_OFFSET, offset); <nl> - } <nl> - public static Collection<NetworkInterface> filterBySubnet(InetAddress address, int subnetPrefix) <nl> 
mmm ReceiveChannelEndpoint.java <nl> ppp ReceiveChannelEndpoint.java <nl> - possibleTtlAsymmetry.orderedIncrement(); <nl> + possibleTtlAsymmetry.incrementOrdered(); <nl> mmm Receiver.java <nl> ppp Receiver.java <nl> - totalBytesReceived.addOrdered(bytesReceived); <nl> + totalBytesReceived.getAndAddOrdered(bytesReceived); <nl> 
mmm DistinctErrorLogTestWatcher.java <nl> ppp DistinctErrorLogTestWatcher.java <nl> - import io.aeron.driver.reports.ErrorReportUtil; <nl> - try ( <nl> - RandomAccessFile file = new RandomAccessFile(cncFile, "r"); <nl> + try (RandomAccessFile file = new RandomAccessFile(cncFile, "r"); <nl> - final AtomicBuffer errorLogBuffer = ErrorReportUtil.mapErrorLogBuffer(cncByteBuffer); <nl> 
new file <nl> ppp Common.java <nl> + package io.aeron.archive; <nl> + import io.aeron.FragmentAssembler; <nl> + import io.aeron.Publication; <nl> + import io.aeron.Subscription; <nl> + import io.aeron.SystemTest; <nl> + import io.aeron.archive.client.RecordingTransitionAdapter; <nl> + import io.aeron.archive.codecs.RecordingTransitionType; <nl> 
mmm MediaConductorTest.java <nl> ppp MediaConductorTest.java <nl> - import uk.co.real_logic.aeron.util.CreatingAdminBufferStrategy; <nl> + import uk.co.real_logic.aeron.util.CreatingConductorBufferStrategy; <nl> - import uk.co.real_logic.aeron.util.MappingAdminBufferStrategy; <nl> + import uk.co.real_logic.aeron.util.MappingConductorBufferStrategy; <nl> 
mmm SystemTest.java <nl> ppp SystemTest.java <nl> mmm Publication.java <nl> ppp Publication.java <nl> - this.maxPayloadLength = mtuLength(logMetaDataBuffer) - HEADER_LENGTH; <nl> + this.maxPayloadLength = LogBufferDescriptor.mtuLength(logMetaDataBuffer) - HEADER_LENGTH; <nl> + checkForMaxPayloadLength(length); <nl> 
new file <nl> ppp LossReport.java <nl> + package io.aeron.driver.reports; <nl> + import org.agrona.BitUtil; <nl> + import org.agrona.concurrent.AtomicBuffer; <nl> + import static org.agrona.BitUtil.CACHE_LINE_LENGTH; <nl> + import static org.agrona.BitUtil.SIZE_OF_INT; <nl> + import static org.agrona.BitUtil.SIZE_OF_LONG; <nl> 
mmm ControlSessionTest.java <nl> ppp ControlSessionTest.java <nl> - import io.aeron.Image; <nl> - private final Image mockImage = mock(Image.class); <nl> + private final ImageControlSession mockParent = mock(ImageControlSession.class); <nl> - session = new ControlSession(mockImage, mockConductor, mockEpochClock, mockProxy); <nl> 
mmm ClientConductor.java <nl> ppp ClientConductor.java <nl> - import uk.co.real_logic.aeron.util.collections.EndPointMap; <nl> + import uk.co.real_logic.aeron.util.collections.ConnectionMap; <nl> - private final EndPointMap<String, Publication> publicationMap = new EndPointMap<>(); <nl> + private final ConnectionMap<String, Publication> publicationMap = new ConnectionMap<>(); <nl> 
new file <nl> ppp LossReportUtil.java <nl> + package io.aeron.driver.reports; <nl> + import java.io.File; <nl> + import java.nio.MappedByteBuffer; <nl> + import static org.agrona.IoUtil.mapNewFile; <nl> + public class LossReportUtil <nl> + { <nl> + public static final String LOSS_REPORT_FILE_NAME = "loss-report.dat"; <nl> 
mmm AeronCluster.java <nl> ppp AeronCluster.java <nl> + import io.aeron.logbuffer.ControlledFragmentHandler; <nl> - private final FragmentAssembler fragmentAssembler = new FragmentAssembler(this::onFragment, 0, true); <nl> + private final FragmentAssembler fragmentAssembler; <nl> + private final ControlledFragmentAssembler controlledFragmentAssembler; <nl> 
new file <nl> ppp HackSelectReceiveSendUdpPong.java <nl> + package uk.co.real_logic.aeron.examples.raw; <nl> + import uk.co.real_logic.aeron.common.concurrent.SigInt; <nl> + import uk.co.real_logic.aeron.driver.NioSelectedKeySet; <nl> + import java.io.IOException; <nl> + import java.net.InetSocketAddress; <nl> 
mmm RecordingLog.java <nl> ppp RecordingLog.java <nl> - public final UnsafeBuffer buffer = new UnsafeBuffer(); <nl> + public final UnsafeBuffer unsafeBuffer = new UnsafeBuffer(); <nl> - buffer.wrap(decodingBuffer); <nl> - decoder.wrap(buffer, 0, RecoveryPlanDecoder.BLOCK_LENGTH, RecoveryPlanDecoder.SCHEMA_VERSION); <nl> 
mmm PublicationTest.java <nl> ppp PublicationTest.java <nl> mmm ManagedBuffer.java <nl> ppp ManagedBuffer.java <nl> mmm Signal.java <nl> ppp Signal.java <nl> mmm ActiveSubscriptions.java <nl> ppp ActiveSubscriptions.java <nl> mmm DriverListener.java <nl> ppp DriverListener.java <nl> mmm FragmentAssemblyAdapterTest.java <nl> 
mmm AeronLatencyUnderLoadPublisher.java <nl> ppp AeronLatencyUnderLoadPublisher.java <nl> - import uk.co.real_logic.aeron.FragmentAssemblyAdapter; <nl> + import uk.co.real_logic.aeron.FragmentAssembler; <nl> - fragmentHandler = new FragmentAssemblyAdapter(this::msgHandler); <nl> + fragmentHandler = new FragmentAssembler(this::msgHandler); <nl> 
mmm UdpChannel.java <nl> ppp UdpChannel.java <nl> + private final boolean hasTagId; <nl> + private final long tagId; <nl> + hasTagId = context.hasTagId; <nl> + tagId = context.tagId; <nl> + final String tagIdStr = channelUri.get(CommonContext.TAG_ID_PARAM_NAME); <nl> + final String controlMode = channelUri.get(CommonContext.MDC_CONTROL_MODE_PARAM_NAME); <nl> 
mmm MappedTermBuffers.java <nl> ppp MappedTermBuffers.java <nl> - import uk.co.real_logic.aeron.common.event.EventLogger; <nl> mmm PubUnicastTest.java <nl> ppp PubUnicastTest.java <nl> - import uk.co.real_logic.aeron.common.event.EventLogger; <nl> mmm SubUnicastTest.java <nl> ppp SubUnicastTest.java <nl> - import uk.co.real_logic.aeron.common.event.EventLogger; <nl> 
mmm OracleToMySqlOutputVisitor.java <nl> ppp OracleToMySqlOutputVisitor.java <nl> mmm PGAlterTableAlterColumnSetNotNull.java <nl> ppp PGAlterTableAlterColumnSetNotNull.java <nl> mmm SQLRevokeStatement.java <nl> ppp SQLRevokeStatement.java <nl> mmm PGCircleExpr.java <nl> ppp PGCircleExpr.java <nl> mmm OdpsSetLabelStatement.java <nl> 
mmm MySqlParameterizedOutputVisitorTest_8.java <nl> ppp MySqlParameterizedOutputVisitorTest_8.java <nl> - import com.alibaba.druid.sql.SQLUtils; <nl> - import com.alibaba.druid.sql.visitor.ParameterizedVisitor; <nl> mmm MySqlDropTriggerTest.java <nl> ppp MySqlDropTriggerTest.java <nl> - import java.util.List; <nl> 
mmm MySqlASTVisitorAdapter.java <nl> ppp MySqlASTVisitorAdapter.java <nl> + import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlPartitionByRange; <nl> + import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlPartitioningDef; <nl> + import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlPartitioningDef.InValues; <nl> 
mmm SQLServerStatementParser.java <nl> ppp SQLServerStatementParser.java <nl> - import com.alibaba.druid.sql.dialect.sqlserver.ast.stmt.SQLServerWaitForStatement; <nl> - if (identifierEquals("WAITFOR")) { <nl> - statementList.add(this.parseWaitFor()); <nl> - return true; <nl> - } <nl> - public SQLServerWaitForStatement parseWaitFor() { <nl> 
new file <nl> ppp DesAction.java <nl> + package com.alibaba.druid.support.security.tool; <nl> + import sun.misc.BASE64Encoder; <nl> + import javax.crypto.Cipher; <nl> + import javax.crypto.SecretKey; <nl> + import javax.crypto.SecretKeyFactory; <nl> + import javax.crypto.spec.DESKeySpec; <nl> + public class DesAction extends AbstractAction { <nl> 
mmm SQLServerASTVisitor.java <nl> ppp SQLServerASTVisitor.java <nl> + import com.alibaba.druid.sql.dialect.sqlserver.ast.stmt.SQLServerBlockStatement; <nl> + import com.alibaba.druid.sql.dialect.sqlserver.ast.stmt.SQLServerIfStatement; <nl> + import com.alibaba.druid.sql.dialect.sqlserver.ast.stmt.SQLServerIfStatement.Else; <nl> 
mmm SQLServerLexer.java <nl> ppp SQLServerLexer.java <nl> + hasComment = true; <nl> + hasComment = true; <nl> mmm OracleOutputVisitor.java <nl> ppp OracleOutputVisitor.java <nl> + print(";"); <nl> + print(";"); <nl> + print(";"); <nl> mmm MySqlCreateTableTest.java <nl> ppp MySqlCreateTableTest.java <nl> + public void test_1() throws Exception { <nl> 
deleted file <nl> mmm OracleMappingProvider.java <nl> - package com.alibaba.druid.mapping.spi; <nl> - import java.util.List; <nl> - import com.alibaba.druid.mapping.MappingContext; <nl> - import com.alibaba.druid.mapping.MappingEngine; <nl> - import com.alibaba.druid.sql.ast.SQLStatement; <nl> - import com.alibaba.druid.sql.ast.statement.SQLInsertStatement; <nl> 
mmm MySqlSchemaStatVisitor.java <nl> ppp MySqlSchemaStatVisitor.java <nl> - import java.util.HashSet; <nl> - import java.util.List; <nl> - import java.util.Set; <nl> - import com.alibaba.druid.sql.ast.SQLObject; <nl> - import com.alibaba.druid.sql.ast.expr.SQLAggregateExpr; <nl> - import com.alibaba.druid.sql.ast.expr.SQLAllColumnExpr; <nl> 
new file <nl> ppp JSONParserTest4.java <nl> + package com.alibaba.druid.bvt.support.json; <nl> + import java.util.LinkedHashMap; <nl> + import java.util.Map; <nl> + import junit.framework.TestCase; <nl> + import com.alibaba.druid.support.json.JSONUtils; <nl> + import com.alibaba.druid.util.Utils; <nl> + public class JSONParserTest4 extends TestCase { <nl> 
mmm OracleExceptionSorter.java <nl> ppp OracleExceptionSorter.java <nl> + import java.util.HashSet; <nl> + import java.util.Set; <nl> + import com.alibaba.druid.support.logging.Log; <nl> + import com.alibaba.druid.support.logging.LogFactory; <nl> + private final static Log  LOG              = LogFactory.getLog(OracleExceptionSorter.class); <nl> 
mmm WallUpdateCheckTest.java <nl> ppp WallUpdateCheckTest.java <nl> - assertTrue(result.getViolations().size() > 0); <nl> + assertTrue(result.getViolations().size() == 0); <nl> mmm WallProvider.java <nl> ppp WallProvider.java <nl> + if(sqlStat == null && updateCheckHandlerEnable){ <nl> + sqlStat = new WallSqlStat(tableStat, context.getFunctionStats(), violations, syntaxError); <nl> 
mmm SQLEvalVisitorUtils.java <nl> ppp SQLEvalVisitorUtils.java <nl> + import java.util.BitSet; <nl> + import com.alibaba.druid.sql.visitor.functions.OneParamFunctions; <nl> + functions.put("md5", OneParamFunctions.instance); <nl> + functions.put("bit_count", OneParamFunctions.instance); <nl> + functions.put("soundex", OneParamFunctions.instance); <nl> 
new file <nl> ppp SQLServerWallTest_6.java <nl> + package com.alibaba.druid.bvt.filter.wall; <nl> + import junit.framework.TestCase; <nl> + import org.junit.Assert; <nl> + import com.alibaba.druid.wall.WallProvider; <nl> + import com.alibaba.druid.wall.spi.SQLServerWallProvider; <nl> + public class SQLServerWallTest_6 extends TestCase { <nl> 
mmm SQLServerOutputVisitor.java <nl> ppp SQLServerOutputVisitor.java <nl> + incrementIndent(); <nl> + decrementIndent(); <nl> new file <nl> ppp SQLUtilsAddConditionTest_pg.java <nl> + package com.alibaba.druid.bvt.sql.mysql; <nl> + import junit.framework.TestCase; <nl> + import org.junit.Assert; <nl> + import com.alibaba.druid.sql.SQLUtils; <nl> 
new file <nl> ppp DruidWebStatFilterConfiguration.java <nl> + package com.alibaba.druid.spring.boot.autoconfigure; <nl> + import com.alibaba.druid.support.http.WebStatFilter; <nl> + import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty; <nl> + import org.springframework.boot.web.servlet.FilterRegistrationBean; <nl> 
deleted file <nl> mmm DruidDataSourceAutoConfigure.java <nl> - package com.alibaba.druid.spring.boot.autoconfigure; <nl> - import com.alibaba.druid.pool.DruidDataSource; <nl> - import org.springframework.boot.autoconfigure.condition.ConditionalOnClass; <nl> - import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean; <nl> 
mmm MySqlAlterTableTest14.java <nl> ppp MySqlAlterTableTest14.java <nl> - import org.junit.Assert; <nl> - import junit.framework.TestCase; <nl> - import com.alibaba.druid.stat.TableStat.Column; <nl> + import junit.framework.TestCase; <nl> + import org.junit.Assert; <nl> mmm DeleteSyntaxTest.java <nl> ppp DeleteSyntaxTest.java <nl> 
mmm OdpsShowStatisticStmt.java <nl> ppp OdpsShowStatisticStmt.java <nl> mmm SQLServerLexer.java <nl> ppp SQLServerLexer.java <nl> + endOfComment = isEOF(); <nl> mmm MySqlWallTest_union.java <nl> ppp MySqlWallTest_union.java <nl> - Assert.assertFalse(WallUtils.isValidateMySql("select f1, f2 from t where id=1 union select 1, 2", config)); <nl> 
deleted file <nl> mmm DruidDataSourceStatStrategyContext.java <nl> - package com.alibaba.druid.stat; <nl> - import java.util.List; <nl> - import java.util.Map; <nl> - public class DruidDataSourceStatStrategyContext { <nl> - 	private DruidDataSourceStatStrategy druidDataSourceStatStrategy; <nl> - 	public DruidDataSourceStatStrategyContext(DruidDataSourceStatStrategy druidDataSourceStatStrategy) { <nl> 
mmm WallSelectWhereTest1.java <nl> ppp WallSelectWhereTest1.java <nl> - Assert.assertTrue(WallUtils.isValidateMySql("SELECT F1, F2 from t WHERE 1 = 1 OR FID = ?")); <nl> + Assert.assertTrue(WallUtils.isValidateMySql("SELECT F1, F2 from t WHERE 1 = 1 AND FID = ?")); <nl> - Assert.assertTrue(WallUtils.isValidateOracle("SELECT F1, F2 from t WHERE 1 = 1 OR FID = ?")); <nl> 
mmm PostgresqlResourceTest.java <nl> ppp PostgresqlResourceTest.java <nl> + System.out.println("coditions : " + visitor.getConditions()); <nl> mmm PGSelectStatement.java <nl> ppp PGSelectStatement.java <nl> + import com.alibaba.druid.sql.ast.statement.SQLSelect; <nl> + public PGSelectStatement(){ <nl> + } <nl> 
new file <nl> ppp PGFromAsTest.java <nl> + package com.alibaba.druid.bvt.sql.postgresql; <nl> + import com.alibaba.druid.sql.PGTest; <nl> + import com.alibaba.druid.sql.dialect.postgresql.ast.stmt.PGSelectStatement; <nl> + public class PGFromAsTest extends PGTest { <nl> + public void testFromAs() throws Exception { <nl> 
mmm SQLASTVisitor.java <nl> ppp SQLASTVisitor.java <nl> + import com.alibaba.druid.sql.ast.SQLParameter; <nl> + import com.alibaba.druid.sql.ast.statement.SQLBlockStatement; <nl> + import com.alibaba.druid.sql.ast.statement.SQLCreateProcedureStatement; <nl> + import com.alibaba.druid.sql.ast.statement.SQLLoopStatement; <nl> 
mmm MySqlOutputVisitor.java <nl> ppp MySqlOutputVisitor.java <nl> + public boolean visit(SQLCharactorDataType x) { <nl> + print(x.getName()); <nl> + if (x.getArguments().size() > 0) { <nl> + print("("); <nl> + printAndAccept(x.getArguments(), ", "); <nl> + print(")"); <nl> + } <nl> + if (x.getCharSetName() != null) { <nl> 
mmm SQLExprParser.java <nl> ppp SQLExprParser.java <nl> - orderBy.getItems().add(parseSelectOrderByItem()); <nl> + orderBy.addItem(parseSelectOrderByItem()); <nl> - orderBy.getItems().add(parseSelectOrderByItem()); <nl> + orderBy.addItem(parseSelectOrderByItem()); <nl> mmm MySqlWallVisitor.java <nl> ppp MySqlWallVisitor.java <nl> 
mmm NoLoggingImpl.java <nl> ppp NoLoggingImpl.java <nl> - package com.alibaba.druid.support.logging; <nl> - public class NoLoggingImpl implements Log { <nl> - private int infoCount; <nl> - private int errorCount; <nl> - private int warnCount; <nl> - private Class<?> clazz; <nl> - public NoLoggingImpl(Class<?> clazz){ <nl> 
mmm OAuth2AccessTokenAuthenticateRequest.java <nl> ppp OAuth2AccessTokenAuthenticateRequest.java <nl> + import java.io.Serializable; <nl> - public class OAuth2AccessTokenAuthenticateRequest { <nl> + public class OAuth2AccessTokenAuthenticateRequest implements Serializable { <nl> mmm UserResponse.java <nl> 
new file <nl> ppp CouponTemplateConvertImpl.java <nl> + package cn.iocoder.mall.promotion.biz.convert; <nl> + import cn.iocoder.mall.promotion.api.bo.CouponTemplateBO; <nl> + import cn.iocoder.mall.promotion.api.dto.CouponCardTemplateAddDTO; <nl> + import cn.iocoder.mall.promotion.api.dto.CouponCardTemplateUpdateDTO; <nl> 
mmm FilteredEntryMultimap.java <nl> ppp FilteredEntryMultimap.java <nl> - @WeakOuter <nl> - class KeySet extends Maps.KeySet<K, Collection<V>> { <nl> - KeySet(Map<K, Collection<V>> map) { <nl> - super(map); <nl> - } <nl> + return new Maps.KeySet<K, Collection<V>>(this) { <nl> - } <nl> - return new KeySet(this); <nl> 
mmm ObjectiveCImplementationGeneratorTest.java <nl> ppp ObjectiveCImplementationGeneratorTest.java <nl> - public void testEmptyAnnotationGeneration() throws IOException { <nl> + public void testAnnotationGeneration() throws IOException { <nl> - "package foo; import java.lang.annotation.*; @Retention(RetentionPolicy.CLASS) " + <nl> 
mmm TCKZoneRules.java <nl> ppp TCKZoneRules.java <nl> - import static org.junit.Assert.assertEquals; <nl> - import static org.junit.Assert.assertFalse; <nl> - import static org.junit.Assert.assertNotNull; <nl> - import static org.junit.Assert.assertTrue; <nl> + import static org.testng.Assert.assertEquals; <nl> 
mmm AtomicInteger.java <nl> ppp AtomicInteger.java <nl> mmm AtomicReference.java <nl> ppp AtomicReference.java <nl> mmm BindingUtil.java <nl> ppp BindingUtil.java <nl> + public static boolean isVolatile(IVariableBinding binding) { <nl> + return Modifier.isVolatile(binding.getModifiers()); <nl> + } <nl> mmm JavaCloneWriter.java <nl> 
deleted file <nl> mmm BasicFileAttributeView.java <nl> - package java.nio.file.attribute; <nl> - import java.io.IOException; <nl> - public interface BasicFileAttributeView <nl> - extends FileAttributeView <nl> - { <nl> - @Override <nl> - String name(); <nl> - BasicFileAttributes readAttributes() throws IOException; <nl> 
mmm InnerClassExtractor.java <nl> ppp InnerClassExtractor.java <nl> + List<IVariableBinding> innerFields = OuterReferenceResolver.getInnerFields(clazz); <nl> + ASTFactory.createInnerFieldDeclarations(node, innerFields); <nl> + } <nl> mmm FieldTest.java <nl> ppp FieldTest.java <nl> mmm ReflectionTest.java <nl> 
mmm StatementGenerator.java <nl> ppp StatementGenerator.java <nl> - import com.google.devtools.j2objc.ast.AnonymousClassDeclaration; <nl> - @Override <nl> - public boolean visit(AnonymousClassDeclaration node) { <nl> - assert node.getBodyDeclarations().size() == 1; <nl> - assert false : "not implemented yet"; <nl> 
new file <nl> ppp Reflection.java <nl> + package com.google.common.reflect; <nl> + import static com.google.common.base.Preconditions.checkArgument; <nl> + import static com.google.common.base.Preconditions.checkNotNull; <nl> + import com.google.common.annotations.Beta; <nl> + import java.lang.reflect.InvocationHandler; <nl> 
mmm GenerationTest.java <nl> ppp GenerationTest.java <nl> + import com.google.devtools.j2objc.ast.TreeConverter; <nl> - return StatementGenerator.generate(statement, <nl> + return StatementGenerator.generate(TreeConverter.convertStatement(statement), <nl> mmm AnonymousClassConverterTest.java <nl> ppp AnonymousClassConverterTest.java <nl> 
mmm DownloadListener.java <nl> ppp DownloadListener.java <nl> + void progress(String url, long downloaded, long length, long usedTime, DownloadingService downloadingService); <nl> - private boolean enableIndicator=true; <nl> + private boolean enableIndicator = true; <nl> - private WeakReference<DownloadListener>mReference=null; <nl> 
new file <nl> ppp Extra.java <nl> + package com.just.agentweb.download; <nl> + import android.app.Activity; <nl> + import android.support.annotation.DrawableRes; <nl> + import android.webkit.WebView; <nl> + import com.download.library.DownloadTask; <nl> + import com.just.agentweb.PermissionInterceptor; <nl> 
mmm JVMMetricsServiceHandlerTestCase.java <nl> ppp JVMMetricsServiceHandlerTestCase.java <nl> - private static JVMMetricsServiceGrpc.JVMMetricsServiceBlockingStub stub; <nl> + private static JVMMetricsServiceGrpc.JVMMetricsServiceBlockingStub STUB; <nl> - stub = JVMMetricsServiceGrpc.newBlockingStub(channel); <nl> 
mmm JVMMetricsServiceHandler.java <nl> ppp JVMMetricsServiceHandler.java <nl> + import org.apache.skywalking.apm.collector.analysis.metric.define.AnalysisMetricModule; <nl> + import org.apache.skywalking.apm.collector.analysis.metric.define.service.IInstanceHeartBeatService; <nl> + private final IInstanceHeartBeatService instanceHeartBeatService; <nl> 
new file <nl> ppp SWConnection.java <nl> + package com.ai.cloud.skywalking.plugin.jdbc; <nl> + import java.sql.Array; <nl> + import java.sql.Blob; <nl> + import java.sql.CallableStatement; <nl> + import java.sql.Clob; <nl> + import java.sql.DatabaseMetaData; <nl> + import java.sql.NClob; <nl> + import java.sql.PreparedStatement; <nl> 
deleted file <nl> mmm MessageSendInterceptor.java <nl> - package org.skywalking.apm.plugin.rocketMQ.v4; <nl> - import java.lang.reflect.Method; <nl> - import org.apache.rocketmq.client.impl.CommunicationMode; <nl> - import org.apache.rocketmq.common.message.Message; <nl> - import org.apache.rocketmq.common.protocol.header.SendMessageRequestHeader; <nl> 
mmm EasyLogger.java <nl> ppp EasyLogger.java <nl> - @Override <nl> - public void warn(Throwable e, String format, Object... arguments) { <nl> - if (isWarnEnable()) <nl> - logger(LogLevel.WARN, replaceParam(format, arguments), e); <nl> - } <nl> mmm EnqueueInterceptor.java <nl> ppp EnqueueInterceptor.java <nl> 
new file <nl> ppp NettySocketIOOnEventInterceptor.java <nl> + package org.apache.skywalking.apm.plugin.netty.socketio; <nl> + import org.apache.skywalking.apm.agent.core.context.ContextCarrier; <nl> + import org.apache.skywalking.apm.agent.core.context.ContextManager; <nl> + import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan; <nl> 
new file <nl> ppp SessionRequestImplIterceptor.java <nl> + package org.apache.skywalking.apm.plugin.httpasyncclient.v4; <nl> + import java.lang.reflect.Method; <nl> + import org.apache.skywalking.apm.agent.core.context.ContextManager; <nl> + import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan; <nl> 
new file <nl> ppp Armeria084ClientInterceptor.java <nl> + package org.apache.skywalking.apm.plugin.armeria; <nl> + import com.linecorp.armeria.client.UserClient; <nl> + import com.linecorp.armeria.common.HttpHeaders; <nl> + import com.linecorp.armeria.common.HttpMethod; <nl> + import com.linecorp.armeria.common.HttpRequest; <nl> 
new file <nl> ppp ModuleBBusiness1Impl.java <nl> + package org.skywalking.apm.collector.core.module; <nl> + public class ModuleBBusiness1Impl implements BaseModuleB.ServiceBBusiness1 { <nl> + } <nl> new file <nl> ppp ModuleBBusiness2Impl.java <nl> + package org.skywalking.apm.collector.core.module; <nl> + public class ModuleBBusiness2Impl implements BaseModuleB.ServiceBBusiness2 { <nl> 
deleted file <nl> mmm MongoDBCollectionMethodInterceptor.java <nl> - package org.skywalking.apm.plugin.mongodb.v2; <nl> - import com.mongodb.AggregationOutput; <nl> - import com.mongodb.CommandResult; <nl> - import com.mongodb.DB; <nl> - import com.mongodb.ServerAddress; <nl> - import com.mongodb.WriteResult; <nl> 
mmm MemcachedMethodInterceptor.java <nl> ppp MemcachedMethodInterceptor.java <nl> - span.setComponent(ComponentsDefine.MEMCACHE); <nl> - Tags.DB_TYPE.set(span, ComponentsDefine.MEMCACHE.getName()); <nl> + span.setComponent(ComponentsDefine.MEMCACHED); <nl> + Tags.DB_TYPE.set(span, ComponentsDefine.MEMCACHED.getName()); <nl> 
mmm TestController.java <nl> ppp TestController.java <nl> - package org.apache.skywalking.apm.testcase.sc.gateway.projectB.controller; <nl> + package test.apache.skywalking.apm.testcase.sc.gateway.projectB.controller; <nl> mmm Application.java <nl> ppp Application.java <nl> - package org.apache.skywalking.apm.testcase.sc.gateway.projectB; <nl> 
mmm ServiceInstanceInventoryCache.java <nl> ppp ServiceInstanceInventoryCache.java <nl> + import org.apache.skywalking.oap.server.library.util.BooleanUtils; <nl> + private final ServiceInstanceInventory userServiceInstance; <nl> + this.userServiceInstance = new ServiceInstanceInventory(); <nl> + this.userServiceInstance.setSequence(Const.USER_INSTANCE_ID); <nl> 
mmm InstanceEsCacheDAO.java <nl> ppp InstanceEsCacheDAO.java <nl> + import org.slf4j.Logger; <nl> + import org.slf4j.LoggerFactory; <nl> + private final Logger logger = LoggerFactory.getLogger(InstanceEsCacheDAO.class); <nl> mmm GraphQLScriptTest.java <nl> ppp GraphQLScriptTest.java <nl> + typeRegistry.merge(schemaParser.parse(loadSchema("config.graphqls"))); <nl> 
new file <nl> ppp MongoDBClientDelegateInstrumentation.java <nl> + package org.apache.skywalking.apm.plugin.mongodb.v3.define.v37; <nl> + import net.bytebuddy.description.method.MethodDescription; <nl> + import net.bytebuddy.matcher.ElementMatcher; <nl> + import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint; <nl> 
new file <nl> ppp ModuleAProvider.java <nl> + package org.skywalking.apm.collector.modulization; <nl> + import java.util.Properties; <nl> + public class ModuleAProvider extends ModuleProvider { <nl> + @Override public String name() { <nl> + return "P-A"; <nl> + } <nl> + @Override public Class<? extends Module> module() { <nl> 
mmm ConsumerConstructorInterceptor.java <nl> ppp ConsumerConstructorInterceptor.java <nl> - package org.apache.skywalking.apm.plugin.spring.annotations.component; <nl> + package org.apache.skywalking.apm.plugin.kafka.v11; <nl> - import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch; <nl> - import org.apache.skywalking.apm.plugin.spring.annotations.AbstractSpringBeanInstrumentation; <nl> 
new file <nl> ppp EnhanceRequiredInfo.java <nl> + package org.apache.skywalking.apm.plugin.okhttp.v3; <nl> + import org.apache.skywalking.apm.agent.core.context.ContextSnapshot; <nl> + import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance; <nl> + public class EnhanceRequiredInfo { <nl> 
deleted file <nl> mmm NacosCoordinatorTest.java <nl> - package org.apache.skywalking.oap.server.cluster.plugin.nacos; <nl> - import com.alibaba.nacos.api.exception.NacosException; <nl> - import com.alibaba.nacos.api.naming.NamingService; <nl> - import com.alibaba.nacos.api.naming.pojo.Instance; <nl> - import java.util.ArrayList; <nl> 
deleted file <nl> mmm CallServerInterceptor.java <nl> - package org.apache.skywalking.apm.plugin.grpc.v1; <nl> - import io.grpc.ForwardingServerCall; <nl> - import io.grpc.ForwardingServerCallListener; <nl> - import io.grpc.Metadata; <nl> - import io.grpc.MethodDescriptor; <nl> - import io.grpc.ServerCall; <nl> 
mmm GCMetricEsUIDAO.java <nl> ppp GCMetricEsUIDAO.java <nl> - gcTrends.add(new Trend((int)count, (int)(duration / times))); <nl> + gcTrends.add(new Trend((int)(count / times), (int)(duration / times))); <nl> mmm ServiceNameService.java <nl> ppp ServiceNameService.java <nl> - ServiceName serviceName = serviceNameCacheService.get(slowService.getService().getId()); <nl> 
mmm SpiTestWorkerFactory.java <nl> ppp SpiTestWorkerFactory.java <nl> - public static final String WorkerRole = "SpiTestWorker"; <nl> mmm TraceSegment.java <nl> ppp TraceSegment.java <nl> - import com.a.eye.skywalking.trace.proto.SegmentMessage; <nl> - import com.a.eye.skywalking.trace.proto.SegmentRefMessage; <nl> 
mmm WorkerCreateListener.java <nl> ppp WorkerCreateListener.java <nl> - public void addWorker(AbstractWorker worker) { <nl> + void addWorker(AbstractWorker worker) { <nl> mmm AbstractRemoteWorkerProvider.java <nl> ppp AbstractRemoteWorkerProvider.java <nl> - import org.apache.skywalking.apm.collector.core.data.AbstractData; <nl> 
new file <nl> ppp JDBCOrderItemRepositoryImpl.java <nl> + package org.apache.skywalking.apm.testcase.shardingsphere.service.repository.jdbc; <nl> + import java.sql.Connection; <nl> + import java.sql.PreparedStatement; <nl> + import java.sql.ResultSet; <nl> + import java.sql.SQLException; <nl> + import java.sql.Statement; <nl> 
deleted file <nl> mmm LoadBalancedConnectionWrapper.java <nl> - package org.apache.skywalking.apm.plugin.jdbc.mysql.v6.wrapper; <nl> - import com.mysql.cj.api.jdbc.ha.LoadBalancedConnection; <nl> - import java.sql.SQLException; <nl> - import org.apache.skywalking.apm.plugin.jdbc.trace.ConnectionInfo; <nl> 
mmm ExtensionContextTest.java <nl> ppp ExtensionContextTest.java <nl> + import org.apache.skywalking.apm.agent.core.context.tag.Tags; <nl> + import org.junit.runner.RunWith; <nl> + import org.powermock.api.mockito.PowerMockito; <nl> + import org.powermock.modules.junit4.PowerMockRunner; <nl> + @RunWith(PowerMockRunner.class) <nl> 
mmm GsonFromJsonInterceptor.java <nl> ppp GsonFromJsonInterceptor.java <nl> + import org.apache.skywalking.apm.agent.core.context.tag.Tags; <nl> - Integer length = allArguments[0].toString().length(); <nl> - span.tag("length", length.toString()); <nl> + int length = allArguments[0].toString().length(); <nl> 
deleted file <nl> mmm SendAckSpanEventHandler.java <nl> - package com.a.eye.skywalking.disruptor.ack; <nl> - import com.a.eye.skywalking.client.Agent2RoutingClient; <nl> - import com.a.eye.skywalking.health.report.HealthCollector; <nl> - import com.a.eye.skywalking.health.report.HeathReading; <nl> - import com.a.eye.skywalking.logging.api.ILog; <nl> 
new file <nl> ppp SecondTTLCalculator.java <nl> + package org.apache.skywalking.oap.server.core.storage.ttl; <nl> + import org.apache.skywalking.oap.server.core.DataTTL; <nl> + import org.joda.time.DateTime; <nl> + public class SecondTTLCalculator implements TTLCalculator { <nl> + @Override public long timeBefore(DateTime currentTime, DataTTL dataTTL) { <nl> 
new file <nl> ppp MessageSendInterceptorTest.java <nl> + package org.apache.skywalking.apm.plugin.rocketMQ.v3; <nl> + import java.util.List; <nl> + import com.alibaba.rocketmq.client.impl.CommunicationMode; <nl> + import com.alibaba.rocketmq.common.message.Message; <nl> + import com.alibaba.rocketmq.common.protocol.header.SendMessageRequestHeader; <nl> 
new file <nl> ppp StandardCharsets.java <nl> + package org.skywalking.apm.agent.core.context.ids.base64; <nl> + import java.nio.charset.Charset; <nl> + public final class StandardCharsets { <nl> + private StandardCharsets() { <nl> + throw new AssertionError("No java.nio.charset.StandardCharsets instances for you!"); <nl> 
mmm JdbcTransactionManagerTests.java <nl> ppp JdbcTransactionManagerTests.java <nl> - import org.springframework.transaction.support.TransactionSynchronizationAdapter; <nl> - 						TransactionSynchronizationManager.registerSynchronization( <nl> - 								new TransactionSynchronizationAdapter() { <nl> - 								}); <nl> 
mmm RealmBaseDataSet.java <nl> ppp RealmBaseDataSet.java <nl> + @Override <nl> + public List<S> getEntriesForXIndex(int xIndex) { <nl> + List<S> entries = new ArrayList<>(); <nl> + if (mIndexField == null) { <nl> + T object = results.get(xIndex); <nl> + if (object != null) <nl> + entries.add(buildEntryFromResultObject(object, xIndex)); <nl> 
mmm ScatterChartActivity.java <nl> ppp ScatterChartActivity.java <nl> - public void onValueSelected(Entry e, int dataSetIndex, Highlight h) { <nl> + public void onValueSelected(Entry e, Highlight h) { <nl> - + ", DataSet index: " + dataSetIndex); <nl> + + ", DataSet index: " + h.getDataSetIndex()); <nl> mmm LineChartActivity2.java <nl> 
mmm BarChartActivity.java <nl> ppp BarChartActivity.java <nl> - mChart.setYLegendCount(5); <nl> + mChart.setYLabelCount(5); <nl> - if (mChart.isAdjustXLegendEnabled()) <nl> - mChart.setAdjustXLegend(false); <nl> + if (mChart.isAdjustXLabelsEnabled()) <nl> + mChart.setAdjustXLabels(false); <nl> - mChart.setAdjustXLegend(true); <nl> 
mmm FileUtils.java <nl> ppp FileUtils.java <nl> - entries.add(new Entry(Float.parseFloat(split[0]), Integer.parseInt(split[1]))); <nl> + entries.add(new Entry(Float.valueOf(split[0]), Integer.valueOf(split[1]))); <nl> mmm PieChartFrag.java <nl> ppp PieChartFrag.java <nl> - mChart.setCenterTextSize(22f); <nl> 
mmm CandleDataProvider.java <nl> ppp CandleDataProvider.java <nl> - public CandleData getCandleData(); <nl> + CandleData getCandleData(); <nl> mmm OnDrawListener.java <nl> ppp OnDrawListener.java <nl> - 	public void onEntryAdded(Entry entry); <nl> + 	void onEntryAdded(Entry entry); <nl> - 	public void onEntryMoved(Entry entry); <nl> 
new file <nl> ppp RealmCandleDataSet.java <nl> + package com.github.mikephil.charting.data.realm; <nl> + public class RealmCandleDataSet { <nl> + } <nl> mmm DataSet.java <nl> ppp DataSet.java <nl> - for (int i = 0; i < mYVals.size(); i++) { <nl> - if (e.equalTo(mYVals.get(i))) <nl> - return i; <nl> - } <nl> - return -1; <nl> 
mmm AppOpticsNamingConvention.java <nl> ppp AppOpticsNamingConvention.java <nl> - private static final Pattern NAME_BLACKLIST = Pattern.compile("[^-:A-Za-z0-9_.]"); <nl> - private static final Pattern TAG_KEY_BLACKLIST = Pattern.compile("[^-.:_\\w]"); <nl> - private static final Pattern TAG_VALUE_BLACKLIST = Pattern.compile("[^-.:_?\\\\/\\w ]"); <nl> 
new file <nl> ppp ElasticMeterRegistryCompatibilityTest.java <nl> + package io.micrometer.elastic; <nl> + import io.micrometer.core.instrument.MeterRegistry; <nl> + import io.micrometer.core.instrument.MockClock; <nl> + import io.micrometer.core.lang.Nullable; <nl> + import io.micrometer.core.tck.MeterRegistryCompatibilityKit; <nl> 
mmm ProcessorMetricsTest.java <nl> ppp ProcessorMetricsTest.java <nl> - package io.micrometer.core.instrument.binder; <nl> + package io.micrometer.core.instrument.binder.system; <nl> + import io.micrometer.core.instrument.binder.system.ProcessorMetrics; <nl> mmm JvmGcMetrics.java <nl> ppp JvmGcMetrics.java <nl> 
new file <nl> ppp package-info.java <nl> + @NonNullApi <nl> + @NonNullFields <nl> + package io.micrometer.health; <nl> + import io.micrometer.core.lang.NonNullApi; <nl> + import io.micrometer.core.lang.NonNullFields; <nl> new file <nl> ppp ServiceLevelObjective.java <nl> + package io.micrometer.health; <nl> + import io.micrometer.core.instrument.Timer; <nl> 
new file <nl> ppp LoggingRegistryPropertiesConfigAdapter.java <nl> + package io.micrometer.spring.autoconfigure.export.logging; <nl> + import io.micrometer.core.instrument.logging.LoggingRegistryConfig; <nl> + import io.micrometer.spring.autoconfigure.export.properties.StepRegistryPropertiesConfigAdapter; <nl> 
mmm NoopFunctionTimer.java <nl> ppp NoopFunctionTimer.java <nl> - import io.micrometer.core.instrument.Meter; <nl> mmm NoopTimer.java <nl> ppp NoopTimer.java <nl> - import io.micrometer.core.instrument.histogram.HistogramConfig; <nl> mmm CounterTest.java <nl> ppp CounterTest.java <nl> - import java.util.concurrent.TimeUnit; <nl> 
mmm PrometheusSample.java <nl> ppp PrometheusSample.java <nl> - @SpringBootApplication(scanBasePackages = "io.micrometer.spring.samples.components") <nl> + @SpringBootApplication(scanBasePackages = "io.micrometer.boot2.samples.components") <nl> mmm SignalFxMeterRegistry.java <nl> ppp SignalFxMeterRegistry.java <nl> 
mmm MeterRegistry.java <nl> ppp MeterRegistry.java <nl> - protected <T> TimeGauge newTimeGauge(Meter.Id id, T obj, TimeUnit valueFunctionUnit, ToDoubleFunction<T> valueFunction) { <nl> + protected <T> TimeGauge newTimeGauge(Meter.Id id, @Nullable T obj, TimeUnit valueFunctionUnit, ToDoubleFunction<T> valueFunction) { <nl> 
new file <nl> ppp HttpMetricsTagConfiguration.java <nl> + package io.micrometer.boot2.samples.components; <nl> + import com.fasterxml.jackson.databind.ObjectMapper; <nl> + import com.google.common.cache.CacheBuilder; <nl> + import io.micrometer.core.instrument.Tag; <nl> + import io.micrometer.core.instrument.Tags; <nl> 
mmm StatsdMeterRegistry.java <nl> ppp StatsdMeterRegistry.java <nl> - distributionStatisticConfig) { <nl> - DistributionSummary summary = new StatsdDistributionSummary(id, lineBuilder(id), publisher, clock, distributionStatisticConfig); <nl> + distributionStatisticConfig, double scale) { <nl> + DistributionSummary summary = new StatsdDistributionSummary(id, lineBuilder(id), publisher, clock, distributionStatisticConfig, scale); <nl> 
new file <nl> ppp AzureMonitorMeterRegistryCompatibilityKit.java <nl> + package io.micrometer.azuremonitor; <nl> + import io.micrometer.core.instrument.MeterRegistry; <nl> + import io.micrometer.core.instrument.MockClock; <nl> + import io.micrometer.core.tck.MeterRegistryCompatibilityKit; <nl> + import java.time.Duration; <nl> 
mmm NettyAsyncResponseTest.java <nl> ppp NettyAsyncResponseTest.java <nl> mmm TestUtils.java <nl> ppp TestUtils.java <nl> new file <nl> ppp HttpContentDecoder.java <nl> + package io.netty.handler.codec.http; <nl> + import io.netty.buffer.ByteBuf; <nl> + import io.netty.channel.ChannelHandlerContext; <nl> + import io.netty.channel.embedded.EmbeddedChannel; <nl> 
mmm Response.java <nl> ppp Response.java <nl> - import java.util.Collection; <nl> - private final Collection<HttpResponseBodyPart> bodies = <nl> - Collections.synchronizedCollection(new ArrayList<HttpResponseBodyPart>()); <nl> + private final List<HttpResponseBodyPart> bodies = <nl> + Collections.synchronizedList(new ArrayList<HttpResponseBodyPart>()); <nl> 
new file <nl> ppp PartSource.java <nl> + package com.ning.http.multipart; <nl> + import java.io.IOException; <nl> + import java.io.InputStream; <nl> + public interface PartSource { <nl> + long getLength(); <nl> + String getFileName(); <nl> + InputStream createInputStream() throws IOException; <nl> + } <nl> new file <nl> 
mmm NettyResponseFuture.java <nl> ppp NettyResponseFuture.java <nl> - import com.ning.http.client.FutureImpl; <nl> + import com.ning.http.client.ListenableFuture; <nl> + import com.ning.http.client.listenable.AbstractListenableFuture; <nl> - public final class NettyResponseFuture<V> implements FutureImpl<V> { <nl> 
new file <nl> ppp HttpHandler.java <nl> + package org.asynchttpclient.netty.handler; <nl> + import io.netty.buffer.ByteBuf; <nl> + import io.netty.channel.Channel; <nl> + import io.netty.channel.ChannelHandler.Sharable; <nl> + import io.netty.handler.codec.http.HttpContent; <nl> + import io.netty.handler.codec.http.HttpHeaders; <nl> 
mmm DefaultChannelPool.java <nl> ppp DefaultChannelPool.java <nl> - boolean added = partitions.computeIfAbsent(partitionKey, pk -> new ConcurrentLinkedQueue<>()).add(new IdleChannel(channel, now)); <nl> - if (added) <nl> - channelId2Creation.putIfAbsent(channelId(channel), new ChannelCreation(now, partitionKey)); <nl> 
mmm BodyHandlerFactory.java <nl> ppp BodyHandlerFactory.java <nl> - new EntityWriterBodyHandler(), <nl> mmm NettyRequests.java <nl> ppp NettyRequests.java <nl> - import io.netty.buffer.ByteBufOutputStream; <nl> - private static int getPredefinedContentLength(Request request, Map<String, Object> headers) { <nl> 
mmm AsyncHttpClientRegistryTest.java <nl> ppp AsyncHttpClientRegistryTest.java <nl> - package org.asynchttpclient; <nl> + package org.asynchttpclient.extra; <nl> - import org.asynchttpclient.util.AsyncImplHelper; <nl> + import org.asynchttpclient.AsyncHttpClient; <nl> + import org.asynchttpclient.extra.AsyncHttpClientFactory; <nl> 
mmm Tween.java <nl> ppp Tween.java <nl> - public interface Tween extends Savable, Cloneable { <nl> + public interface Tween extends Cloneable { <nl> + public class Primitives { <nl> + private static final Map<Class<?>, Class<?>> PRIMITIVE_TO_WRAPPER_TYPE; <nl> + static { <nl> + Map<Class<?>, Class<?>> primToWrap = new HashMap<>(16); <nl> 
deleted file <nl> mmm IrradianceMapGenerator.java <nl> - package com.jme3.texture.pbr; <nl> - import com.jme3.app.Application; <nl> - import com.jme3.math.ColorRGBA; <nl> - import com.jme3.math.Vector3f; <nl> - import com.jme3.texture.TextureCubeMap; <nl> - import static com.jme3.texture.pbr.EnvMapUtils.shBandFactor; <nl> 
mmm JoglDisplay.java <nl> ppp JoglDisplay.java <nl> - import com.jogamp.opengl.GLAutoDrawable; <nl> + import javax.media.opengl.GLAutoDrawable; <nl> mmm TextureUtil.java <nl> ppp TextureUtil.java <nl> - import com.jogamp.opengl.GL; <nl> - import com.jogamp.opengl.GL2; <nl> - import com.jogamp.opengl.GL2ES2; <nl> 
mmm Image.java <nl> ppp Image.java <nl> - ETC1(4, false, true, false); <nl> + ETC1(4, false, true, false), <nl> + R8I(8), 	  	  	  	 <nl> + R8UI(8),  	  	  	 <nl> + R16I(16), 	  	  	  	 <nl> + R16UI(16),	  	  	 <nl> + R32I(32),  	  	  	 <nl> + R32UI(32), 	  	  	 <nl> + RG8I(16),   	  	 <nl> + RG8UI(16), 	  	  	 <nl> 
new file <nl> ppp ArmatureDebugAppState.java <nl> + package com.jme3.scene.debug.custom; <nl> + import com.jme3.animation.*; <nl> + import com.jme3.app.Application; <nl> + import com.jme3.app.state.AbstractAppState; <nl> + import com.jme3.app.state.AppStateManager; <nl> + import com.jme3.input.MouseInput; <nl> 
mmm Diagram.java <nl> ppp Diagram.java <nl> - protected Selectable selectedItem; <nl> + protected List<Selectable> selectedItems = new ArrayList<Selectable>(); <nl> + private final Cursor defCursor = Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR); <nl> + private final Cursor hndCursor = Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR); <nl> 
deleted file <nl> mmm LwjglGLDebugOutputHandler.java <nl> - package com.jme3.system.lwjgl; <nl> - import org.lwjgl.opengl.ARBDebugOutput; <nl> - import org.lwjgl.opengl.GLDebugMessageARBCallback; <nl> - import java.util.HashMap; <nl> - class LwjglGLDebugOutputHandler extends GLDebugMessageARBCallback { <nl> 
deleted file <nl> mmm SrTdRiPixelReader.java <nl> - package com.jme3.texture.plugins.ktx; <nl> - import java.io.DataInput; <nl> - import java.io.IOException; <nl> - import java.nio.ByteBuffer; <nl> - public class SrTdRiPixelReader implements PixelReader { <nl> - @Override <nl> - public int readPixels(int pixelWidth, int pixelHeight, byte[] pixelData, ByteBuffer buffer, DataInput in) throws IOException { <nl> 
new file <nl> ppp PutBatchRecords.java <nl> + package com.example.firehose; <nl> + import software.amazon.awssdk.regions.Region; <nl> + import software.amazon.awssdk.services.firehose.FirehoseClient; <nl> + import software.amazon.awssdk.services.firehose.model.Record; <nl> + import software.amazon.awssdk.services.firehose.model.PutRecordBatchRequest; <nl> 
mmm DescribeTable.java <nl> ppp DescribeTable.java <nl> + import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider; <nl> + import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider; <nl> - String tableName = args[0]; <nl> - Region region = Region.US_WEST_2; <nl> 
new file <nl> ppp GreetingController.java <nl> + package com.example.handlingformsubmission; <nl> + import org.springframework.beans.factory.annotation.Autowired; <nl> + import org.springframework.stereotype.Controller; <nl> + import org.springframework.ui.Model; <nl> + import org.springframework.web.bind.annotation.GetMapping; <nl> 
mmm S3AsyncOps.java <nl> ppp S3AsyncOps.java <nl> - FunctionalUtils.invokeSafely(client::close); <nl> + client.close(); <nl> + future.join(); <nl> mmm UpdateItem.java <nl> ppp UpdateItem.java <nl> - import software.amazon.awssdk.services.dynamodb.model.DynamoDBException; <nl> + import software.amazon.awssdk.services.dynamodb.model.DynamoDbException; <nl> 
new file <nl> ppp DeleteAlias.java <nl> + package com.example.kms; <nl> + import software.amazon.awssdk.regions.Region; <nl> + import software.amazon.awssdk.services.kms.KmsClient; <nl> + import software.amazon.awssdk.services.kms.model.DeleteAliasRequest; <nl> + import software.amazon.awssdk.services.kms.model.KmsException; <nl> 
new file <nl> ppp PublishTextSMS.java <nl> + package com.example.handlingformsubmission; <nl> + import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider; <nl> + import software.amazon.awssdk.regions.Region; <nl> + import software.amazon.awssdk.services.sns.SnsClient; <nl> + import software.amazon.awssdk.services.sns.model.PublishRequest; <nl> 
mmm PutObject.java <nl> ppp PutObject.java <nl> + package aws.example.s3; <nl> + import com.amazonaws.AmazonServiceException; <nl> + import com.amazonaws.services.s3.AmazonS3; <nl> + import com.amazonaws.services.s3.AmazonS3Client; <nl> + import com.amazonaws.services.s3.model.BucketPolicy; <nl> + public class GetBucketPolicy <nl> 
new file <nl> ppp GetServerCertificate.java <nl> + package com.example.iam; <nl> + import software.amazon.awssdk.services.iam.model.GetServerCertificateRequest; <nl> + import software.amazon.awssdk.services.iam.model.GetServerCertificateResponse; <nl> + import software.amazon.awssdk.core.regions.Region; <nl> 
mmm SetWebsiteConfiguration.java <nl> ppp SetWebsiteConfiguration.java <nl> - "Failed to set website configuration for bucket '%s'!\n", <nl> + "Failed to set the website configuration for bucket '%s'!\n", <nl> new file <nl> ppp GetObjectData.java <nl> + package com.example.s3; <nl> + import software.amazon.awssdk.core.ResponseBytes; <nl> 
new file <nl> ppp ListSecrets.java <nl> + package com.example.secrets; <nl> + import software.amazon.awssdk.regions.Region; <nl> + import software.amazon.awssdk.services.secretsmanager.SecretsManagerClient; <nl> + import software.amazon.awssdk.services.secretsmanager.model.ListSecretsResponse; <nl> + import software.amazon.awssdk.services.secretsmanager.model.SecretListEntry; <nl> 
deleted file <nl> mmm GetAccessKeyInfo.java <nl> - package com.example.sts; <nl> - import software.amazon.awssdk.regions.Region; <nl> - import software.amazon.awssdk.services.sts.StsClient; <nl> - import software.amazon.awssdk.services.sts.model.StsException; <nl> - import software.amazon.awssdk.services.sts.model.GetAccessKeyInfoRequest; <nl> 
mmm DescribeTable.java <nl> ppp DescribeTable.java <nl> + import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider; <nl> + import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider; <nl> - String tableName = args[0]; <nl> - Region region = Region.US_WEST_2; <nl> 
mmm EnhancedScanRecords.java <nl> ppp EnhancedScanRecords.java <nl> - package com.example.dynamodb; <nl> - import java.time.Instant; <nl> - import java.util.Iterator; <nl> - import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClient; <nl> - import software.amazon.awssdk.enhanced.dynamodb.DynamoDbTable; <nl> 
mmm GetBucketPolicy.java <nl> ppp GetBucketPolicy.java <nl> - import software.amazon.awssdk.core.regions.Region; <nl> + import software.amazon.awssdk.regions.Region; <nl> mmm DeleteObjects.java <nl> ppp DeleteObjects.java <nl> - import software.amazon.awssdk.core.regions.Region; <nl> + import software.amazon.awssdk.regions.Region; <nl> 
mmm SetBucketPolicy.java <nl> ppp SetBucketPolicy.java <nl> - public class SetBucketPolicy { <nl> + public class SetBucketPolicy { <nl> - String policyText = null; <nl> + String policyText = ""; <nl> - setBucketPolicy(bucketName, policyText); <nl> + Region region = Region.US_WEST_2; <nl> + S3Client s3 = S3Client.builder() <nl> 
new file <nl> ppp CreateCampaign.java <nl> + package com.example.personalize; <nl> + import software.amazon.awssdk.regions.Region; <nl> + import software.amazon.awssdk.services.personalize.PersonalizeClient; <nl> + import software.amazon.awssdk.services.personalize.model.CreateCampaignRequest; <nl> + import software.amazon.awssdk.services.personalize.model.CreateCampaignResponse; <nl> 
mmm GetObjectPresignedUrl.java <nl> ppp GetObjectPresignedUrl.java <nl> + getPresignedUrl(presigner, bucketName,keyName); <nl> + } <nl> + public static void getPresignedUrl( S3Presigner presigner, String bucketName,String keyName ) { <nl> - IoUtils.copy(signedPayload, httpOutputStream); <nl> + IoUtils.copy(signedPayload, httpOutputStream); <nl> 
new file <nl> ppp ListModels.java <nl> + package com.example.sage; <nl> + import software.amazon.awssdk.regions.Region; <nl> + import software.amazon.awssdk.services.sagemaker.SageMakerClient; <nl> + import software.amazon.awssdk.services.sagemaker.model.ListModelsRequest; <nl> + import software.amazon.awssdk.services.sagemaker.model.ListModelsResponse; <nl> 
mmm GetObjectPresignedUrl.java <nl> ppp GetObjectPresignedUrl.java <nl> - if (args.length < 2) { <nl> - System.out.println("Please specify a bucket name and a key name that represents a text file"); <nl> - System.exit(1); <nl> + if (args.length < 2) { <nl> + System.out.println("Please specify a bucket name and key name"); <nl> 
deleted file <nl> mmm DescribeJob.java <nl> - package aws.example.s3control; <nl> - import com.amazonaws.AmazonServiceException; <nl> - import com.amazonaws.SdkClientException; <nl> - import com.amazonaws.auth.profile.ProfileCredentialsProvider; <nl> - import com.amazonaws.services.s3control.AWSS3Control; <nl> 
deleted file <nl> mmm ListEventBuses.java <nl> - package com.example.eventbridge; <nl> - import software.amazon.awssdk.regions.Region; <nl> - import software.amazon.awssdk.services.eventbridge.EventBridgeClient; <nl> - import software.amazon.awssdk.services.eventbridge.model.EventBridgeException; <nl> - import software.amazon.awssdk.services.eventbridge.model.EventBus; <nl> 
new file <nl> ppp DeleteIdentityPool.java <nl> + package com.example.cognito; <nl> + import software.amazon.awssdk.awscore.exception.AwsServiceException; <nl> + import software.amazon.awssdk.regions.Region; <nl> + import software.amazon.awssdk.services.cognitoidentity.CognitoIdentityClient; <nl> + import software.amazon.awssdk.services.cognitoidentity.model.DeleteIdentityPoolRequest; <nl> 
deleted file <nl> mmm DisableCustomerKey.java <nl> - package com.example.kms; <nl> - import software.amazon.awssdk.regions.Region; <nl> - import software.amazon.awssdk.services.kms.KmsClient; <nl> - import software.amazon.awssdk.services.kms.model.DisableKeyRequest; <nl> - import software.amazon.awssdk.services.kms.model.KmsException; <nl> 
mmm AccessValidator.java <nl> ppp AccessValidator.java <nl> + import org.thingsboard.server.common.data.EntityView; <nl> - import org.thingsboard.server.common.data.id.AssetId; <nl> - import org.thingsboard.server.common.data.id.CustomerId; <nl> - import org.thingsboard.server.common.data.id.DeviceId; <nl> 
new file <nl> ppp BaseAuditLogControllerTest.java <nl> + package org.thingsboard.server.controller; <nl> + import com.fasterxml.jackson.core.type.TypeReference; <nl> + import org.junit.After; <nl> + import org.junit.Assert; <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> + import org.thingsboard.server.common.data.Device; <nl> 
mmm AlarmDeduplicationProcessor.java <nl> ppp AlarmDeduplicationProcessor.java <nl> - @Processor(name = "(Deprecated) Alarm Deduplication Processor", descriptor = "AlarmDeduplicationProcessorDescriptor.json", <nl> + @Processor(name = "Alarm Deduplication Processor", descriptor = "AlarmDeduplicationProcessorDescriptor.json", <nl> 
mmm AlarmStatus.java <nl> ppp AlarmStatus.java <nl> + public boolean isAck() { <nl> + return this == ACTIVE_ACK || this == CLEARED_ACK; <nl> + } <nl> + public boolean isCleared() { <nl> + return this == CLEARED_ACK || this == CLEARED_UNACK; <nl> + } <nl> mmm BaseController.java <nl> ppp BaseController.java <nl> 
new file <nl> ppp SqsFifoQueueActionPayload.java <nl> + package org.thingsboard.server.extensions.sqs.action.fifo; <nl> + import lombok.Builder; <nl> + import lombok.Data; <nl> + import org.thingsboard.server.common.msg.session.MsgType; <nl> + import java.io.Serializable; <nl> + @Data <nl> + @Builder <nl> + public class SqsFifoQueueActionPayload implements Serializable { <nl> 
deleted file <nl> mmm DefaultTransportProfileCache.java <nl> - package org.thingsboard.server.common.transport.service; <nl> - import com.google.protobuf.ByteString; <nl> - import lombok.extern.slf4j.Slf4j; <nl> - import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression; <nl> - import org.springframework.stereotype.Component; <nl> 
mmm MqttTransportHandler.java <nl> ppp MqttTransportHandler.java <nl> - processor.process(new SessionCloseMsg(sessionCtx.getSessionId(), false)); <nl> - processor.process(new SessionCloseMsg(sessionCtx.getSessionId(), false)); <nl> + processor.process(SessionCloseMsg.onError(sessionCtx.getSessionId())); <nl> 
mmm KafkaMonolithQueueFactory.java <nl> ppp KafkaMonolithQueueFactory.java <nl> + import javax.annotation.PreDestroy; <nl> + @PreDestroy <nl> + private void destroy() { <nl> + if (coreAdmin != null) { <nl> + coreAdmin.destroy(); <nl> + } <nl> + if (ruleEngineAdmin != null) { <nl> + ruleEngineAdmin.destroy(); <nl> 
mmm AssetEntity.java <nl> ppp AssetEntity.java <nl> - @PartitionKey(value = 3) <nl> - @Column(name = ASSET_TYPE_PROPERTY) <nl> - private String type; <nl> + @Column(name = ASSET_TYPE_PROPERTY) <nl> + private String type; <nl> mmm AssetController.java <nl> ppp AssetController.java <nl> - import org.thingsboard.server.common.data.asset.TenantAssetType; <nl> 
mmm DummyAuditLogServiceImpl.java <nl> ppp DummyAuditLogServiceImpl.java <nl> - @ConditionalOnProperty(prefix = "audit_log", value = "enabled", havingValue = "false") <nl> + @ConditionalOnProperty(prefix = "audit-log", value = "enabled", havingValue = "false") <nl> mmm CassandraAbstractDatabaseSchemaService.java <nl> 
mmm AccessValidator.java <nl> ppp AccessValidator.java <nl> - import org.thingsboard.server.service.security.permission.AccessControlService; <nl> - import org.thingsboard.server.service.security.permission.Operation; <nl> - import org.thingsboard.server.service.security.permission.Resource; <nl> - @Autowired <nl> 
mmm RuleChainActor.java <nl> ppp RuleChainActor.java <nl> + case REMOTE_TO_RULE_CHAIN_TELL_NEXT_MSG: <nl> new file <nl> ppp RemoteToRuleChainTellNextMsg.java <nl> + package org.thingsboard.server.actors.ruleChain; <nl> + import lombok.Data; <nl> + import org.thingsboard.server.common.data.id.RuleChainId; <nl> 
mmm DefaultTenantRoutingInfoService.java <nl> ppp DefaultTenantRoutingInfoService.java <nl> + import org.thingsboard.server.service.profile.TbTenantProfileCache; <nl> - private final TenantProfileService tenantProfileService; <nl> + private final TbTenantProfileCache tenantProfileCache; <nl> - public DefaultTenantRoutingInfoService(TenantService tenantService, TenantProfileService tenantProfileService) { <nl> 
mmm TenantServiceImpl.java <nl> ppp TenantServiceImpl.java <nl> - import org.thingsboard.server.dao.usagerecord.UsageRecordService; <nl> + import org.thingsboard.server.dao.usagerecord.ApiUsageStateService; <nl> - private UsageRecordService usageRecordService; <nl> + private ApiUsageStateService apiUsageStateService; <nl> 
mmm MqttTransportService.java <nl> ppp MqttTransportService.java <nl> + import org.thingsboard.server.common.transport.quota.QuotaService; <nl> + @Autowired(required = false) <nl> + private QuotaService quotaService; <nl> - .childHandler(new MqttTransportServerInitializer(processor, deviceService, authService, relationService, adaptor, sslHandlerProvider)); <nl> 
mmm DashboardInfo.java <nl> ppp DashboardInfo.java <nl> + this.assignedCustomers.remove(customerInfo); <nl> mmm GatewaySessionCtx.java <nl> ppp GatewaySessionCtx.java <nl> + ack(mqttMsg); <nl> mmm MqttClientCallback.java <nl> ppp MqttClientCallback.java <nl> + import io.netty.channel.ChannelId; <nl> - public void connectionLost(Throwable cause); <nl> 
mmm CoapTransportService.java <nl> ppp CoapTransportService.java <nl> - import java.net.InetAddress; <nl> - import java.net.InetSocketAddress; <nl> - import java.net.UnknownHostException; <nl> - import javax.annotation.PostConstruct; <nl> - import javax.annotation.PreDestroy; <nl> - import org.thingsboard.server.common.transport.SessionMsgProcessor; <nl> 
mmm KafkaMonolithQueueFactory.java <nl> ppp KafkaMonolithQueueFactory.java <nl> + import org.thingsboard.server.queue.TbQueueAdmin; <nl> - import org.thingsboard.server.queue.kafka.TBKafkaAdmin; <nl> - import org.thingsboard.server.queue.kafka.TBKafkaConsumerTemplate; <nl> - import org.thingsboard.server.queue.kafka.TBKafkaProducerTemplate; <nl> 
mmm DefaultSubscriptionManagerService.java <nl> ppp DefaultSubscriptionManagerService.java <nl> - s -> (TbAttributeSubscriptionScope.ANY_SCOPE.equals(s.getScope()) || scope.equals(s.getScope().name())), <nl> + s -> (StringUtils.isEmpty(s.getScope()) || scope.equals(s.getScope().name())), <nl> mmm TbSynchronizationBeginNode.java <nl> 
mmm Compiler.java <nl> ppp Compiler.java <nl> - 				Var.pushThreadBindings(RT.map(RT.MACRO_META, ((IObj) form).meta())); <nl> + 				Var.pushThreadBindings(RT.map(RT.MACRO_META, RT.meta(form))); <nl> - 	if(o instanceof IObj) <nl> - 		{ <nl> - 		IObj obj = (IObj) o; <nl> - 		if(obj.meta() != null) <nl> - 			{ <nl> 
mmm Compiler.java <nl> ppp Compiler.java <nl> + static final Symbol DEFTYPE = Symbol.create("deftype*"); <nl> + static final Symbol CASE = Symbol.create("case*"); <nl> + static final Symbol THIS = Symbol.create("this"); <nl> + static final Symbol REIFY = Symbol.create("reify*"); <nl> + static final Keyword volatileKey = Keyword.intern(null, "volatile"); <nl> 
mmm ExpireAfterAccessTest.java <nl> ppp ExpireAfterAccessTest.java <nl> - assertThat(cache.size(), is(1L)); <nl> + assertThat(cache.estimatedSize(), is(1L)); <nl> - assertThat(cache.size(), is(2L)); <nl> + assertThat(cache.estimatedSize(), is(2L)); <nl> - assertThat(cache.size(), is(3L)); <nl> + assertThat(cache.estimatedSize(), is(3L)); <nl> 
mmm CacheSpec.java <nl> ppp CacheSpec.java <nl> + import java.util.concurrent.ThreadLocalRandom; <nl> - import scala.concurrent.forkjoin.ThreadLocalRandom; <nl> mmm ConcurrentMapCache.java <nl> ppp ConcurrentMapCache.java <nl> - package com.github.benmanes.caffeine.cache.map; <nl> + package com.github.benmanes.caffeine.cache.impl; <nl> 
mmm QueueType.java <nl> ppp QueueType.java <nl> + import org.jctools.queues.MpscLinkedQueue8; <nl> + MpscLinkedQueue(MpscLinkedQueue8::new), <nl> - ConcurrentLinkedStack_optimistic(ConcurrentLinkedStack.optimistic()::asLifoQueue), <nl> - ConcurrentLinkedStack_linearizable(ConcurrentLinkedStack.linearizable()::asLifoQueue), <nl> 
mmm BoundedLocalCache.java <nl> ppp BoundedLocalCache.java <nl> - static class BoundedLocalManualCache<K, V> implements <nl> - LocalManualCache<BoundedLocalCache<K, V>, K, V>, Serializable { <nl> + static class BoundedLocalManualCache<K, V> implements LocalManualCache<K, V>, Serializable { <nl> - static final class BoundedLocalLoadingCache<K, V> extends BoundedLocalManualCache<K, V> <nl> 
mmm I18n.java <nl> ppp I18n.java <nl> + import java.util.Locale.*; <nl> + public static Locale locale; <nl> + static protected void init (String language) { <nl> + try { <nl> + if (language == null || language.trim().length() == 0) locale = Locale.getDefault(); <nl> + else locale = new Locale(language); <nl> 
mmm LibraryInstalledInsideCore.java <nl> ppp LibraryInstalledInsideCore.java <nl> - import processing.app.BaseNoGui; <nl> + import cc.arduino.contributions.packages.ContributionsIndexer; <nl> + private final ContributionsIndexer indexer; <nl> + public LibraryInstalledInsideCore(ContributionsIndexer indexer) { <nl> 
mmm ContributionsSelfCheck.java <nl> ppp ContributionsSelfCheck.java <nl> mmm SplashScreenHelper.java <nl> ppp SplashScreenHelper.java <nl> + import processing.app.Theme; <nl> - splashGraphics = splash.createGraphics(); <nl> + splashGraphics = Theme.setupGraphics2D(splash.createGraphics()); <nl> mmm AbstractTextMonitor.java <nl> 
mmm SyntaxUtilities.java <nl> ppp SyntaxUtilities.java <nl> - import java.util.regex.Matcher; <nl> - import java.util.regex.Pattern; <nl> - public static String[] parseCommentUrls(String line) { <nl> - Matcher m = urlPattern.matcher(line.toString()); <nl> - if (!m.find()) <nl> - return null; <nl> - String res[] = new String[3]; <nl> 
deleted file <nl> mmm StringReplacer.java <nl> - package processing.app.helpers; <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - import java.util.Map; <nl> - public class StringReplacer { <nl> - public static String[] formatAndSplit(String src, Map<String, String> dict, <nl> - boolean recursive) throws Exception { <nl> 
deleted file <nl> mmm PreferencesMap.java <nl> - package processing.app.helpers; <nl> - import java.io.File; <nl> - import java.io.FileInputStream; <nl> - import java.io.FileNotFoundException; <nl> - import java.io.IOException; <nl> - import java.io.InputStream; <nl> - import java.util.HashMap; <nl> - import java.util.Hashtable; <nl> 
mmm SystemProfilerParser.java <nl> ppp SystemProfilerParser.java <nl> - private static final Pattern serialNumberRegex = Pattern.compile("^Serial Number: (.+)$"); <nl> - private static final Pattern locationRegex = Pattern.compile("^Location ID: (.+)$"); <nl> - private static final Pattern pidRegex = Pattern.compile("^Product ID: (.+)$"); <nl> 
deleted file <nl> mmm TargetPlatform.java <nl> - package processing.app.debug; <nl> - import java.io.File; <nl> - import java.util.ArrayList; <nl> - import java.util.HashMap; <nl> - import java.util.List; <nl> - import java.util.Map; <nl> - import processing.app.helpers.PreferencesMap; <nl> - import processing.core.PApplet; <nl> 
mmm RunnerException.java <nl> ppp RunnerException.java <nl> + @SuppressWarnings("serial") <nl> + public RunnerException(Exception e) { <nl> + this(e.getMessage(), true); <nl> + } <nl> - Dimension dim = new Dimension(); <nl> - dim.width = fm.charWidth('w') * 10; <nl> - dim.height = fm.getHeight() * 4; <nl> - return dim; <nl> 
mmm LibrariesIndexTableModel.java <nl> ppp LibrariesIndexTableModel.java <nl> + import cc.arduino.contributions.libraries.LibrariesIndexer; <nl> - import processing.app.BaseNoGui; <nl> + private LibrariesIndexer indexer; <nl> + public void setIndexer(LibrariesIndexer _index) { <nl> + indexer = _index; <nl> 
mmm EditorToolbar.java <nl> ppp EditorToolbar.java <nl> - touchBarButtons[i].setAction(event -> { <nl> - EventQueue.invokeLater(new Runnable() { <nl> - @Override <nl> - public void run() { <nl> - handleSelectionPressed(selection); <nl> - } <nl> - }); <nl> - }); <nl> + touchBarButtons[i].setAction(event -> handleSelectionPressed(selection)); <nl> 
deleted file <nl> mmm EasyX509TrustManager.java <nl> - package processing.app.debug; <nl> - import java.security.KeyStore; <nl> - import java.security.KeyStoreException; <nl> - import java.security.NoSuchAlgorithmException; <nl> - import java.security.cert.CertificateException; <nl> - import java.security.cert.X509Certificate; <nl> 
mmm DropdownLibraryOfTypeItem.java <nl> ppp DropdownLibraryOfTypeItem.java <nl> - @Override <nl> - public boolean equals(Object obj) { <nl> - return obj instanceof DropdownLibraryOfTypeItem && ((DropdownLibraryOfTypeItem) obj).type.equals(type); <nl> - } <nl> mmm DropdownCoreOfCategoryItem.java <nl> ppp DropdownCoreOfCategoryItem.java <nl> 
mmm AtmosphereServlet.java <nl> ppp AtmosphereServlet.java <nl> - import org.atmosphere.websocket.WebSocketSupport; <nl> - import org.eclipse.jetty.websocket.WebSocket; <nl> + import org.atmosphere.websocket.WebSocket; <nl> - * @return a {@link WebSocket}} <nl> + * @return a {@link org.eclipse.jetty.websocket.WebSocket}} <nl> 
deleted file <nl> mmm UriPattern.java <nl> - package org.atmosphere.util.uri; <nl> - import java.util.List; <nl> - import java.util.Map; <nl> - import java.util.regex.MatchResult; <nl> - import java.util.regex.Matcher; <nl> - import java.util.regex.Pattern; <nl> - public class UriPattern { <nl> - public static final UriPattern EMPTY = new UriPattern(); <nl> 
mmm JettyWebSocketHandler.java <nl> ppp JettyWebSocketHandler.java <nl> mmm DefaultBroadcaster.java <nl> ppp DefaultBroadcaster.java <nl> - @Override <nl> - public boolean equals(Object o) { <nl> - if (this == o) return true; <nl> - if (o == null || getClass() != o.getClass()) return false; <nl> - DefaultBroadcaster that = (DefaultBroadcaster) o; <nl> 
mmm DefaultWebSocketProcessor.java <nl> ppp DefaultWebSocketProcessor.java <nl> - resource.setIsInScope(false); <nl> - try { <nl> - resource.cancel(); <nl> - } catch (IOException e) { <nl> - logger.trace("", e); <nl> - } <nl> - AsynchronousProcessor.destroyResource(resource); <nl> - r.destroy(true); <nl> + r.destroy(); <nl> 
mmm GwtResponseWriterImpl.java <nl> ppp GwtResponseWriterImpl.java <nl> + import com.google.gwt.rpc.server.RPC; <nl> + import org.atmosphere.gwt.server.GwtResponseWriter; <nl> + import org.atmosphere.gwt.server.deflate.DeflaterOutputStream; <nl> + import org.slf4j.Logger; <nl> + import org.slf4j.LoggerFactory; <nl> 
mmm DefaultAsyncSupportResolver.java <nl> ppp DefaultAsyncSupportResolver.java <nl> - if (testClassExists(JETTY)) <nl> - add(JettyCometSupport.class); <nl> - if (testClassExists(JETTY_7)) <nl> + if (testClassExists(JETTY_9)) <nl> - if (testClassExists(JETTY_9)) <nl> + if (testClassExists(JETTY_7)) <nl> + if (testClassExists(JETTY)) <nl> 
mmm FrameworkConfig.java <nl> ppp FrameworkConfig.java <nl> - String ATMOSPHERE_HANDLER_MAPPING = AtmosphereHandler.class.getName() + ".contextRoot"; <nl> mmm ConcurrentBroadcastTest.java <nl> ppp ConcurrentBroadcastTest.java <nl> - atmoServlet.addAtmosphereHandler("/suspend", new SuspendAndResume()); <nl> 
mmm JettyWebSocketHandler.java <nl> ppp JettyWebSocketHandler.java <nl> mmm WebSocketAdapter.java <nl> ppp WebSocketAdapter.java <nl> mmm WebSocketProcessor.java <nl> ppp WebSocketProcessor.java <nl> - logger.debug("Failed invoking atmosphere servlet doCometSupport()", e); <nl> + logger.warn("Failed invoking atmosphere servlet doCometSupport()", e); <nl> 
mmm UserInterface.java <nl> ppp UserInterface.java <nl> mmm ApplicationConfig.java <nl> ppp ApplicationConfig.java <nl> + String SUSPENDED_ATMOSPHERE_RESOURCE_UUID = AtmosphereResource.class.getName() + "suspended.uuid"; <nl> mmm IEXDomainRequestCometTransport.java <nl> ppp IEXDomainRequestCometTransport.java <nl> 
mmm TypedChannel.java <nl> ppp TypedChannel.java <nl> mmm AsynchronousProcessor.java <nl> ppp AsynchronousProcessor.java <nl> - import org.atmosphere.util.uri.UriTemplate; <nl> - import java.util.HashMap; <nl> - import java.util.Map; <nl> - protected AtmosphereHandlerWrapper map(String path) { <nl> - AtmosphereHandlerWrapper atmosphereHandlerWrapper = config.handlers().get(path); <nl> 
mmm AtmosphereServlet.java <nl> ppp AtmosphereServlet.java <nl> + logger.trace("", t); <nl> + broadcasterFactory.destroy(); <nl> + logger.info("Using BroadcasterFactory class: {}", DefaultBroadcasterFactory.class.getName()); <nl> + broadcasterFactory = new DefaultBroadcasterFactory(bc, broadcasterLifeCyclePolicy, config); <nl> 
mmm WebSocketProtocol.java <nl> ppp WebSocketProtocol.java <nl> - import org.atmosphere.cpr.AsyncProtocol; <nl> - public interface WebSocketProtocol extends AsyncProtocol{ <nl> + public interface WebSocketProtocol { <nl> + package org.atmosphere.websocket; <nl> + public interface WebSocketResponseFilter { <nl> 
mmm SubmitterMain.java <nl> ppp SubmitterMain.java <nl> - import java.nio.charset.Charset; <nl> + import java.util.concurrent.TimeUnit; <nl> + import java.util.logging.Level; <nl> + import com.twitter.heron.api.generated.TopologyAPI; <nl> - import com.twitter.heron.spi.common.Keys; <nl> - import com.twitter.heron.spi.common.Config; <nl> 
new file <nl> ppp MetricsCacheTest.java <nl> + package com.twitter.heron.metricscachemgr.metricscache; <nl> + import java.io.IOException; <nl> + import java.nio.charset.Charset; <nl> + import java.nio.file.Files; <nl> + import java.nio.file.Path; <nl> + import java.nio.file.Paths; <nl> + import java.util.ArrayList; <nl> 
mmm AuroraScheduler.java <nl> ppp AuroraScheduler.java <nl> - import java.nio.charset.Charset; <nl> + import java.nio.charset.StandardCharsets; <nl> - javaOpts.getBytes(Charset.forName("UTF-8"))); <nl> + javaOpts.getBytes(StandardCharsets.UTF_8)); <nl> mmm SubmitterMain.java <nl> ppp SubmitterMain.java <nl> 
mmm HeronExecutorTask.java <nl> ppp HeronExecutorTask.java <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> + import java.util.Map; <nl> + import com.twitter.heron.scheduler.utils.SchedulerUtils.ExecutorPort; <nl> - List<Integer> freePorts = new ArrayList<>(SchedulerUtils.PORTS_REQUIRED_FOR_EXECUTOR); <nl> 
mmm SlurmScheduler.java <nl> ppp SlurmScheduler.java <nl> - SlurmContext.executorSandboxBinary(this.config), <nl> + SlurmContext.executorBinary(this.config), <nl> mmm Context.java <nl> ppp Context.java <nl> - public static String configPath(Config cfg) { <nl> - return cfg.getStringValue(Key.CONFIG_PATH); <nl> 
mmm SchedulerUtils.java <nl> ppp SchedulerUtils.java <nl> - import com.twitter.heron.spi.packing.Resource; <nl> + import com.twitter.heron.spi.packing.PackingPlanProtoSerializer; <nl> - public static Resource getMaxRequiredResource(PackingPlan packingPlan) { <nl> - double maxCpu = 0; <nl> - long maxRam = 0; <nl> 
mmm LauncherUtilsTest.java <nl> ppp LauncherUtilsTest.java <nl> - TopologyAPI.Topology mockTopology = PowerMockito.mock(TopologyAPI.Topology.class); <nl> - Mockito.when(mockConfig.get(Keys.topologyDefinition())).thenReturn(mockTopology); <nl> - PackingPlan resultPacking = LauncherUtils.getInstance().createPackingPlan(mockConfig, <nl> 
mmm NullPackingAlgorithm.java <nl> ppp NullPackingAlgorithm.java <nl> - package com.twitter.heron.packing.nulled; <nl> + package com.twitter.heron.spi.packing; <nl> - import com.twitter.heron.spi.common.Context; <nl> + import com.twitter.heron.spi.scheduler.context.LaunchContext; <nl> - public void initialize(Context context) { <nl> 
new file <nl> ppp Context.java <nl> + package com.twitter.heron.spi.scheduler.context; <nl> + import java.util.Map; <nl> + import com.twitter.heron.spi.scheduler.IConfigLoader; <nl> + import com.twitter.heron.spi.scheduler.SchedulerStateManagerAdaptor; <nl> + import com.twitter.heron.spi.util.Factory; <nl> 
mmm ActivateRequestHandler.java <nl> ppp ActivateRequestHandler.java <nl> + import com.twitter.heron.spi.utils.Runtime; <nl> + import com.twitter.heron.spi.utils.TMasterUtils; <nl> + private Config runtime; <nl> + this.runtime = runtime; <nl> - Scheduler.ActivateTopologyRequest activateTopologyRequest = <nl> 
new file <nl> ppp HeronSubmitterTest.java <nl> + package com.twitter.heron.api; <nl> + import java.util.Map; <nl> + import org.junit.Test; <nl> + import com.twitter.heron.api.bolt.BaseBasicBolt; <nl> + import com.twitter.heron.api.bolt.BasicOutputCollector; <nl> + import com.twitter.heron.api.exception.AlreadyAliveException; <nl> 
new file <nl> ppp StructUtil.java <nl> + package com.google.api.graphql.grpc; <nl> + import com.google.common.collect.ImmutableList; <nl> + import com.google.common.collect.ImmutableMap; <nl> + import com.google.protobuf.ListValue; <nl> + import com.google.protobuf.Struct; <nl> + import com.google.protobuf.Value; <nl> 
deleted file <nl> mmm NameStrategies.java <nl> - package com.yammer.metrics.jdbi.strategies; <nl> - import java.lang.reflect.Method; <nl> - import java.util.regex.Matcher; <nl> - import java.util.regex.Pattern; <nl> - import org.skife.jdbi.v2.ClasspathStatementLocator; <nl> - import org.skife.jdbi.v2.StatementContext; <nl> 
new file <nl> ppp MeteredClass.java <nl> + package com.yammer.metrics.spring; <nl> + import com.yammer.metrics.annotation.ExceptionMetered; <nl> + import com.yammer.metrics.annotation.Gauge; <nl> + import com.yammer.metrics.annotation.Metered; <nl> + import com.yammer.metrics.annotation.Timed; <nl> + public class MeteredClass { <nl> 
mmm TimerTest.java <nl> ppp TimerTest.java <nl> - timer.values().isEmpty(), <nl> - is(true)); <nl> + timer.getSnapshot().size(), <nl> + is(0)); <nl> mmm JmxReporter.java <nl> ppp JmxReporter.java <nl> - import javax.management.*; <nl> + import javax.management.MBeanRegistrationException; <nl> + import javax.management.MBeanServer; <nl> 
mmm PingServlet.java <nl> ppp PingServlet.java <nl> - package com.yammer.metrics.reporting; <nl> + package com.yammer.metrics.servlet; <nl> mmm SocketProvider.java <nl> ppp SocketProvider.java <nl> - package com.yammer.metrics.reporting; <nl> + package com.yammer.metrics.graphite; <nl> mmm GangliaMessageTest.java <nl> 

deleted file <nl> mmm RibbonSessionCleaner.java <nl> - package com.netflix.zuul.ribbon; <nl> - import com.netflix.client.http.HttpResponse; <nl> - import com.netflix.zuul.context.SessionCleaner; <nl> - import com.netflix.zuul.context.SessionContext; <nl> - import rx.Observable; <nl> - import javax.inject.Singleton; <nl> 
mmm SessionContext.java <nl> ppp SessionContext.java <nl> - import com.netflix.zuul.filters.FilterPriority; <nl> + import com.netflix.zuul.message.http.HttpResponseMessage; <nl> - private FilterPriority filterPriority = FilterPriority.LOW; <nl> + private int filterPriority = 0; <nl> + private boolean shouldStopFilterProcessing = false; <nl> 
mmm ClientRequestReceiver.java <nl> ppp ClientRequestReceiver.java <nl> + if (msg instanceof LastHttpContent) { <nl> + ctx.channel().attr(ATTR_LAST_CONTENT_RECEIVED).set(Boolean.TRUE); <nl> + } <nl> - if (msg instanceof LastHttpContent) { <nl> - ctx.channel().attr(ATTR_LAST_CONTENT_RECEIVED).set(Boolean.TRUE); <nl> 
mmm JedisClusterCommands.java <nl> ppp JedisClusterCommands.java <nl> - String xgroupDelConsumer( String key, String groupname, String consumername); <nl> + Long xgroupDelConsumer( String key, String groupname, String consumername); <nl> - String xgroupDelConsumer( String key, String groupname, String consumername); <nl> 
mmm MultiKeyCommands.java <nl> ppp MultiKeyCommands.java <nl> + ScanResult<String> scan(final String cursor, final ScanParams params); <nl> mmm Client.java <nl> ppp Client.java <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> 
mmm Jedis.java <nl> ppp Jedis.java <nl> + import java.net.URI; <nl> + import java.util.AbstractMap; <nl> + import java.util.ArrayList; <nl> + import java.util.HashSet; <nl> + import java.util.Iterator; <nl> + import java.util.LinkedHashSet; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import java.util.Map.Entry; <nl> 
mmm Connection.java <nl> ppp Connection.java <nl> - protected Connection sendCommand(final ProtocolCommand cmd, final String... args) { <nl> + protected Connection sendCommand(final Command cmd, final String... args) { <nl> - protected Connection sendCommand(final ProtocolCommand cmd, final byte[]... args) { <nl> 
deleted file <nl> mmm JedisClusterScriptingCommands.java <nl> - package redis.clients.jedis; <nl> - import java.util.List; <nl> - public interface JedisClusterScriptingCommands extends ScriptingCommands{ <nl> - Boolean scriptExists(String sha1, String key); <nl> - List<Boolean> scriptExists(String key, String... sha1); <nl> 
mmm ShardedJedisTest.java <nl> ppp ShardedJedisTest.java <nl> - for (String clientInfo: deadClient.clientList().split("\n")) { <nl> - 	if (clientInfo.contains("DEAD")) { <nl> - 	    String[] hostAndPort = clientInfo.split(" ")[1].split("=")[1].split(":"); <nl> - 	    deadClient.clientKill(hostAndPort[0]+ ":" +hostAndPort[1]); <nl> 
mmm Jedis.java <nl> ppp Jedis.java <nl> - @SuppressWarnings("unchecked") <nl> - 	public List<? extends Object> sentinelIsMasterDownByAddr(String host, <nl> - 	    int port) { <nl> - 	client.sentinel(Protocol.SENTINEL_IS_MASTER_DOWN_BY_ADDR, host, port); <nl> - 	final List<Object> reply = client.getObjectMultiBulkReply(); <nl> 
mmm JedisSentinelPoolTest.java <nl> ppp JedisSentinelPoolTest.java <nl> + import java.util.concurrent.atomic.AtomicReference; <nl> + import redis.clients.jedis.DebugParams; <nl> + import redis.clients.jedis.JedisPubSub; <nl> - import redis.clients.jedis.exceptions.JedisConnectionException; <nl> - import redis.clients.jedis.tests.utils.JedisSentinelTestUtil; <nl> 
new file <nl> ppp MultiKeyBinaryJedisClusterCommands.java <nl> + package redis.clients.jedis; <nl> + import java.util.List; <nl> + import java.util.Set; <nl> + public interface MultiKeyBinaryJedisClusterCommands { <nl> + Long del(byte[]... keys); <nl> + List<byte[]> blpop(int timeout, byte[]... keys); <nl> + List<byte[]> brpop(int timeout, byte[]... keys); <nl> 
mmm Client.java <nl> ppp Client.java <nl> - import redis.clients.jedis.Protocol.Keyword; <nl> - import redis.clients.util.SafeEncoder; <nl> + import static redis.clients.jedis.Protocol.toByteArray; <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - import static redis.clients.jedis.Protocol.toByteArray; <nl> 
mmm BroadcastHelper.java <nl> ppp BroadcastHelper.java <nl> + import android.os.Build; <nl> + import java.util.Collections; <nl> + import me.leolin.shortcutbadger.ShortcutBadgeException; <nl> + import me.leolin.shortcutbadger.impl.IntentConstants; <nl> - 	public static boolean canResolveBroadcast(Context context, Intent intent) { <nl> 
mmm JedisPool.java <nl> ppp JedisPool.java <nl> + 	protected String poolName; <nl> + 		this.poolName = poolName; <nl> mmm MasterElectorDemo.java <nl> ppp MasterElectorDemo.java <nl> - 		JedisPool pool = new JedisPoolBuilder().setDirectHostAndPort("localhost", "6379").setPoolSize(1).buildPool(); <nl> mmm AdvancedJobConsumerBatchPopDemo.java <nl> 
mmm Tuple8Test.java <nl> ppp Tuple8Test.java <nl> + @Test <nl> + public void shouldRemove1() { <nl> + final Tuple7<Integer, Integer, Integer, Integer, Integer, Integer, Integer> tuple = createIntTuple(1, 2, 3, 4, 5, 6, 7, 8).remove1(); <nl> + assertThat(tuple._1).isEqualTo(2); <nl> + assertThat(tuple._2).isEqualTo(3); <nl> 
mmm CheckedFunction8Test.java <nl> ppp CheckedFunction8Test.java <nl> - public void shouldRecognizeApplicabilityOfNull() { <nl> - final CheckedFunction8<Object, Object, Object, Object, Object, Object, Object, Object, Object> f = (o1, o2, o3, o4, o5, o6, o7, o8) -> null; <nl> - assertThat(f.isApplicableTo(null, null, null, null, null, null, null, null)).isTrue(); <nl> 
mmm Traversable.java <nl> ppp Traversable.java <nl> - private static String lexiographicPermutaionNaive(List<String> stringsToPermutate, int ordinal) { <nl> + private static String lexicographicPermutationNaive(List<String> stringsToPermutate, int ordinal) { <nl> - private static String lexiographicPermutaion(List<String> stringsToPermutate, int ordinal) { <nl> 
mmm Tuple1.java <nl> ppp Tuple1.java <nl> - public Tuple1<T1> w1(T1 t1) { <nl> - return new Tuple1<>(t1); <nl> + public Tuple1<T1> update1(T1 value) { <nl> + return new Tuple1<>(value); <nl> - public Tuple4<T1, T2, T3, T4> w1(T1 t1) { <nl> - return new Tuple4<>(t1, _2, _3, _4); <nl> + public Tuple4<T1, T2, T3, T4> update1(T1 value) { <nl> 
mmm HashMultimapTest.java <nl> ppp HashMultimapTest.java <nl> - @Override <nl> - <T1, T2> Map<T1, T2> javaEmptyMap() { <nl> - return new java.util.HashMap<>(); <nl> - } <nl> mmm TreeMultimap.java <nl> ppp TreeMultimap.java <nl> - * @since 2.1.0 <nl> + * @since 2.0.0 <nl> mmm TreeMultimapTest.java <nl> ppp TreeMultimapTest.java <nl> 
mmm AbstractMultimap.java <nl> ppp AbstractMultimap.java <nl> - import static javaslang.API.Tuple; <nl> + interface SerializableSupplier<T> extends Supplier<T>, Serializable { <nl> + } <nl> - return that.foldLeft((M) this, (map, entry) -> (M) map.put(entry)); <nl> + return that.foldLeft((M) this, (map, entry) -> !map.contains((Tuple2<K, V>) entry) ? (M) map.put(entry) : map); <nl> 
deleted file <nl> mmm Memory.java <nl> - package javaslang; <nl> - import com.carrotsearch.sizeof.RamUsageEstimator; <nl> - import javaslang.collection.*; <nl> - import java.lang.reflect.Field; <nl> - public class Memory { <nl> - private static Map<Integer, Array<String>> memoryUsages = TreeMap.empty(); <nl> 
mmm Tuple2Test.java <nl> ppp Tuple2Test.java <nl> + @Test <nl> + public void shouldAppendTuple2() { <nl> + Tuple2<Integer, Integer> tuple = Tuple.of(1, 2); <nl> + Tuple3<Integer, Integer, Integer> actual = tuple.append(42); <nl> + Tuple3<Integer, Integer, Integer> expected = Tuple.of(1, 2, 42); <nl> + assertThat(actual).isEqualTo(expected); <nl> 
mmm HashMapTest.java <nl> ppp HashMapTest.java <nl> - import javaslang.Tuple2; <nl> + import javaslang.Tuple2; <nl> - return HashMap.<Integer, T> collector(); <nl> + return HashMap.<Integer, T>collector(); <nl> + @Override <nl> + protected <K  extends Comparable<? super K>, V> Map<K, V> of(K key, V value) { <nl> 
mmm Map.java <nl> ppp Map.java <nl> + java.util.Map<K, V> toJavaMap(); <nl> + default <C extends java.util.Collection<T>> C toJavaCollection(Supplier<C> factory) { <nl> + return ValueModule.toJavaCollection(this, factory.get()); <nl> + } <nl> + default <LIST extends java.util.List<T>> LIST toJavaList(Supplier<LIST> factory) { <nl> 
mmm CharSeqTest.java <nl> ppp CharSeqTest.java <nl> + @Test <nl> + public void shouldRemoveAllElementsByPredicateFromNil() { <nl> + assertThat(empty().removeAll(Character::isDigit)).isSameAs(empty()); <nl> + } <nl> + @Test <nl> + public void shouldRemoveAllMatchedElementsFromNonNil() { <nl> + assertThat(of('1', '2', '3', 'a', 'b', 'c').removeAll(Character::isDigit)) <nl> 
mmm Queue.java <nl> ppp Queue.java <nl> - * <nl> + * <p> <nl> - * <nl> + * <p> <nl> - return Queue.ofAll(List.of(element)); <nl> + return ofAll(List.of(element)); <nl> - return Queue.ofAll(List.ofAll(array)); <nl> + return ofAll(List.ofAll(array)); <nl> - return Queue.ofAll(List.ofAll(array)); <nl> + return ofAll(List.ofAll(array)); <nl> 
mmm Vector.java <nl> ppp Vector.java <nl> - private final transient Lazy<Integer> hashCode = Lazy.of(() -> Traversable.hash(this)); <nl> - Vector<?> vector1 = this; <nl> - Vector<?> vector2 = (Vector<?>) o; <nl> - while (!vector1.isEmpty() && !vector2.isEmpty()) { <nl> - final boolean isEqual = Objects.equals(vector1.head(), vector2.head()); <nl> 
mmm Maps.java <nl> ppp Maps.java <nl> - import static javaslang.API.Tuple; <nl> - Map<K, V> replaceValue(K key, V value); <nl> - Map<K, V> replace(K key, V oldValue, V newValue); <nl> - Map<K, V> replaceAll(BiFunction<? super K, ? super V, ? extends V> function); <nl> mmm ValidationTest.java <nl> ppp ValidationTest.java <nl> 
mmm Tuple8.java <nl> ppp Tuple8.java <nl> + @Override <nl> + public <T> Tuple prepend(T value) { <nl> + throw new UnsupportedOperationException("Prepend to Tuple8"); <nl> + } <nl> + @Override <nl> + public <T> Tuple append(T value) { <nl> + throw new UnsupportedOperationException("Append to Tuple8"); <nl> + } <nl> 
deleted file <nl> mmm ISpecialMobSpawnHandler.java <nl> - package net.minecraft.src.forge; <nl> - import net.minecraft.src.EntityLiving; <nl> - import net.minecraft.src.World; <nl> - public interface ISpecialMobSpawnHandler <nl> - { <nl> - public boolean onSpecialEntitySpawn(EntityLiving entity, World world, float x, float y, float z); <nl> 
mmm DataGeneratorTest.java <nl> ppp DataGeneratorTest.java <nl> - import java.nio.file.Path; <nl> - import java.util.HashSet; <nl> - import net.minecraftforge.client.model.generators.ExistingFileHelper; <nl> + import net.minecraftforge.common.data.ExistingFileHelper; <nl> - gen.addProvider(new ItemModels(gen, event.getExistingFileHelper())); <nl> 
mmm WRNormalMod.java <nl> ppp WRNormalMod.java <nl> - @Mod(modid = "wrnormal", version = "1.0") <nl> + @Mod(modid = "wrnormal", name = "WRNormal", version = "1.0") <nl> mmm ModelFluidDebug.java <nl> ppp ModelFluidDebug.java <nl> - @Mod(modid = ModelFluidDebug.MODID, version = ModelFluidDebug.VERSION) <nl> + @Mod(modid = ModelFluidDebug.MODID, name = "ForgeDebugModelFluid", version = ModelFluidDebug.VERSION) <nl> 
mmm VertexLighterSmoothAo.java <nl> ppp VertexLighterSmoothAo.java <nl> - blockInfo.updateShift(false); <nl> + super.updateBlockInfo(); <nl> deleted file <nl> mmm MultiModelState.java <nl> - package net.minecraftforge.client.model; <nl> - import org.apache.commons.lang3.tuple.Pair; <nl> - import com.google.common.base.Objects; <nl> 
mmm UserdevLauncher.java <nl> ppp UserdevLauncher.java <nl> - throw new IllegalArgumentException("Environment variable 'target' must be set to 'fmldevclient' or 'fmldevserver'."); <nl> + throw new IllegalArgumentException("Environment variable 'target' must be set to 'fmluserdevclient' or 'fmluserdevserver'."); <nl> 
mmm ForgeModContainer.java <nl> ppp ForgeModContainer.java <nl> + import net.minecraftforge.common.config.Configuration; <nl> + import net.minecraftforge.common.config.Property; <nl> - import static net.minecraftforge.common.Configuration.*; <nl> + import static net.minecraftforge.common.config.Configuration.*; <nl> 
mmm BlockLiquidWrapper.java <nl> ppp BlockLiquidWrapper.java <nl> - import net.minecraft.item.ItemStack; <nl> + import net.minecraft.item.ItemBucket; <nl> - return 0; <nl> + if (resource.amount < Fluid.BUCKET_VOLUME) <nl> + { <nl> + return 0; <nl> + } <nl> + if (doFill) <nl> + { <nl> + Material material = blockLiquid.getDefaultState().getMaterial(); <nl> 
mmm WebpackMojo.java <nl> ppp WebpackMojo.java <nl> - protected boolean isSkipped() { <nl> + protected boolean skipExecution() { <nl> mmm EmberMojo.java <nl> ppp EmberMojo.java <nl> - protected boolean isSkipped() { <nl> + protected boolean skipExecution() { <nl> mmm NpmMojo.java <nl> ppp NpmMojo.java <nl> - protected boolean isSkipped() { <nl> 
new file <nl> ppp NavigationEntry.java <nl> + package org.horaapps.leafpic.views.navigation_drawer; <nl> + import android.annotation.TargetApi; <nl> + import android.content.Context; <nl> + import android.content.res.TypedArray; <nl> + import android.os.Build; <nl> + import android.support.annotation.ColorInt; <nl> 
mmm StorageProvider.java <nl> ppp StorageProvider.java <nl> - asd.addMedia(new Media(choice.getAbsolutePath(), choice.lastModified())); <nl> + asd.addMedia( new Media(choice.getAbsolutePath(), choice.lastModified())); <nl> new file <nl> ppp CardViewStyle.java <nl> + package org.horaapps.leafpic.util; <nl> + public enum CardViewStyle { <nl> 
new file <nl> ppp AnsjTokenizerFactory.java <nl> + package org.ansj.solr; <nl> + import java.io.BufferedReader; <nl> + import java.io.File; <nl> + import java.io.FileInputStream; <nl> + import java.io.FileNotFoundException; <nl> + import java.io.IOException; <nl> + import java.io.InputStreamReader; <nl> + import java.util.HashSet; <nl> 
new file <nl> ppp BusyThreadInfo.java <nl> + package com.taobao.arthas.core.command.model; <nl> + import java.lang.management.LockInfo; <nl> + import java.lang.management.MonitorInfo; <nl> + import java.lang.management.ThreadInfo; <nl> + public class BusyThreadInfo extends ThreadVO { <nl> + private long         blockedTime; <nl> 
mmm ShellImpl.java <nl> ppp ShellImpl.java <nl> + import com.taobao.arthas.core.shell.system.impl.JobImpl; <nl> + import java.util.ArrayList; <nl> + import java.util.Collections; <nl> + import java.util.SortedMap; <nl> + import java.util.TreeMap; <nl> mmm SumRateCounter.java <nl> ppp SumRateCounter.java <nl> 
mmm MapperAnnotationBuilder.java <nl> ppp MapperAnnotationBuilder.java <nl> - ResultSetType resultSetType = configuration.getDefaultResultSetType(); <nl> + ResultSetType resultSetType = null; <nl> - if (options.resultSetType() != ResultSetType.DEFAULT) { <nl> - resultSetType = options.resultSetType(); <nl> 
mmm XPathParserTest.java <nl> ppp XPathParserTest.java <nl> + import javax.xml.parsers.DocumentBuilder; <nl> + import javax.xml.parsers.DocumentBuilderFactory; <nl> + import java.io.BufferedReader; <nl> + import java.io.IOException; <nl> + import java.io.Reader; <nl> + import org.apache.ibatis.builder.BuilderException; <nl> 
mmm BindingTest.java <nl> ppp BindingTest.java <nl> + import org.apache.ibatis.binding.MapperProxy.MapperMethodInvoker; <nl> - final MapperMethod cachedSelectBlog = mapperProxyFactory.getMethodCache().get(selectBlog); <nl> + final MapperMethodInvoker cachedSelectBlog = mapperProxyFactory.getMethodCache().get(selectBlog); <nl> 
mmm TeacherMapper.java <nl> ppp TeacherMapper.java <nl> - public Teacher selectById(Integer id); <nl> + Teacher selectById(Integer id); <nl> mmm PersonMapper2.java <nl> ppp PersonMapper2.java <nl> - public interface PersonType { <nl> - public Person.Type getType(); <nl> + interface PersonType { <nl> + Person.Type getType(); <nl> 
new file <nl> ppp Mapper.java <nl> + package org.apache.ibatis.submitted.uuid_test; <nl> + import java.util.UUID; <nl> + public interface Mapper { <nl> + User getUser(UUID id); <nl> + void insertUser(User user); <nl> + } <nl> mmm Many.java <nl> ppp Many.java <nl> - FetchType lazy() default FetchType.DEFAULT; <nl> 
new file <nl> ppp LocalTimeTypeHandlerTest.java <nl> + package org.apache.ibatis.type.usesjava8; <nl> + import static org.junit.Assert.*; <nl> + import static org.mockito.Mockito.*; <nl> + import java.sql.Time; <nl> + import java.time.LocalTime; <nl> + import org.apache.ibatis.type.BaseTypeHandlerTest; <nl> 
mmm Text.java <nl> ppp Text.java <nl> - import org.apache.commons.text.WordUtils; <nl> - 	public static String titleCase(Enum o) <nl> - 	{ <nl> - 		String toString = o.toString(); <nl> - 		if (o.name().equals(toString)) <nl> - 		{ <nl> - 			return WordUtils <nl> - 				.capitalize(toString.toLowerCase(), '_') <nl> 
mmm GrandExchangeTrade.java <nl> ppp GrandExchangeTrade.java <nl> - 	private int qty; <nl> - 	private int dqty; <nl> + 	private int quantity; <nl> mmm Quest.java <nl> ppp Quest.java <nl> - 	VAMPYRE_SLAYER(1278, "Vampyre Slayer"), <nl> + 	VAMPIRE_SLAYER(317, "Vampire Slayer"), <nl> - 	SINS_OF_THE_FATHER(1276, "Sins of the Father"), <nl> 
mmm PohOverlay.java <nl> ppp PohOverlay.java <nl> - 		if (config.showSpellbook()) <nl> - 		{ <nl> - 			iconList.add(PohIcons.SPELLBOOKALTAR); <nl> - 		} <nl> - 		if (config.showJewelleryBox()) <nl> - 		{ <nl> - 			iconList.add(PohIcons.JEWELLERYBOX); <nl> - 		} <nl> - 		if (config.showMagicTravel()) <nl> - 		{ <nl> 
mmm SessionClose.java <nl> ppp SessionClose.java <nl> - package net.runelite.api.events; <nl> + package net.runelite.client.events; <nl> mmm SessionOpen.java <nl> ppp SessionOpen.java <nl> - package net.runelite.api.events; <nl> + package net.runelite.client.events; <nl> mmm AccountPlugin.java <nl> ppp AccountPlugin.java <nl> 
mmm EmoteClue.java <nl> ppp EmoteClue.java <nl> + import static net.runelite.api.ItemID.BLUE_WIZARD_ROBE; <nl> - import static net.runelite.api.ItemID.EARTH_RUNE; <nl> - 		new EmoteClue("Bow at the top of the lighthouse. Beware of double agents! Equip a blue dragonhide body, blue dragonhide vambraces and no jewelry.", new WorldPoint(2511, 3641, 2), BOW, item(BLUE_DHIDE_BODY), item(BLUE_DHIDE_VAMB)), <nl> 
mmm XpTrackerPlugin.java <nl> ppp XpTrackerPlugin.java <nl> - import java.util.concurrent.ScheduledExecutorService; <nl> - import net.runelite.api.Player; <nl> - import net.runelite.http.api.xp.XpClient; <nl> - 	@Inject <nl> - 	ScheduledExecutorService executor; <nl> - 	private final XpClient xpClient = new XpClient(); <nl> 
mmm Execution.java <nl> ppp Execution.java <nl> - import net.runelite.deob.deobfuscators.arithmetic.Encryption; <nl> - 	private Encryption encryption; <nl> - 	public Encryption getEncryption() <nl> - 	{ <nl> - 		return encryption; <nl> - 	} <nl> mmm Fields.java <nl> ppp Fields.java <nl> - 	 <nl> - 	public Field findField(String name) <nl> 
mmm InvokeStatic.java <nl> ppp InvokeStatic.java <nl> - 		info.sigterm.deob.Method other = otherClass.findMethod(method.getNameAndType()); <nl> + 		info.sigterm.deob.Method other = otherClass.findMethodDeep(method.getNameAndType()); <nl> + 	 <nl> + 	@Override <nl> + 	public void renameMethod(info.sigterm.deob.Method m, String name) <nl> 
deleted file <nl> mmm HiscoreSkillType.java <nl> - package net.runelite.http.api.hiscore; <nl> - public enum HiscoreSkillType <nl> - { <nl> - 	OVERALL, <nl> - 	SKILL, <nl> - 	ACTIVITY, <nl> - 	BOSS <nl> - } <nl> deleted file <nl> mmm VisibleForExternalPlugins.java <nl> - package net.runelite.api.annotations; <nl> 
mmm IndexData.java <nl> ppp IndexData.java <nl> - 	private boolean usesWhirpool; <nl> - 		usesWhirpool = (2 & hash) != 0; <nl> + 		if ((hash & ~1) != 0) <nl> + 		{ <nl> + 			throw new IllegalArgumentException("Unknown flags"); <nl> + 		} <nl> - 		if (usesWhirpool) <nl> - 		{ <nl> - 			for (int index = 0; index < validArchivesCount; ++index) <nl> 
mmm ScriptID.java <nl> ppp ScriptID.java <nl> - 	public static final int XPDROP_DISABLED = 2091; <nl> deleted file <nl> mmm LootRecordType.java <nl> - package net.runelite.http.api.loottracker; <nl> - public enum LootRecordType <nl> - { <nl> - 	NPC, <nl> - 	PLAYER, <nl> - 	EVENT, <nl> - 	UNKNOWN <nl> - } <nl> deleted file <nl> 
mmm ItemChargeType.java <nl> ppp ItemChargeType.java <nl> - package net.runelite.client.plugins.jewellerycount; <nl> + package net.runelite.client.plugins.itemcharges; <nl> - public enum JewelleryType <nl> + enum ItemChargeType <nl> - 	GLORY, <nl> - 	ROD, <nl> - 	GAMES, <nl> - 	ROW, <nl> - 	ROS, <nl> - 	SKILLS, <nl> 
mmm SlayerPluginTest.java <nl> ppp SlayerPluginTest.java <nl> + 	private static final String TASK_NEW_FIRST = "We'll start you off hunting goblins, you'll need to kill 17 of them."; <nl> + 	@Test <nl> + 	public void testFirstTask() <nl> + 	{ <nl> + 		Widget npcDialog = mock(Widget.class); <nl> + 		when(npcDialog.getText()).thenReturn(TASK_NEW_FIRST); <nl> 
deleted file <nl> mmm MotherlodeConfig.java <nl> - package net.runelite.client.plugins.motherlode; <nl> - import net.runelite.client.config.Config; <nl> - import net.runelite.client.config.ConfigGroup; <nl> - import net.runelite.client.config.ConfigItem; <nl> - @ConfigGroup( <nl> - 	keyName = "motherlode", <nl> 
mmm ConfigPlugin.java <nl> ppp ConfigPlugin.java <nl> - import javax.swing.ImageIcon; <nl> - 		navButton = new NavigationButton("Configuration", this::buildPanel); <nl> - 		ImageIcon icon = new ImageIcon(ImageIO.read(getClass().getResourceAsStream("config_icon.png"))); <nl> - 		navButton.getButton().setIcon(icon); <nl> 
mmm SlayerOverlay.java <nl> ppp SlayerOverlay.java <nl> - import com.google.common.primitives.ImmutableIntArray; <nl> - 	private final static Set<Integer> SLAYER_JEWELRY = ImmutableSet.of( <nl> - 			ItemID.SLAYER_RING_1, <nl> - 			ItemID.SLAYER_RING_2, <nl> - 			ItemID.SLAYER_RING_3, <nl> - 			ItemID.SLAYER_RING_4, <nl> 
mmm Experience.java <nl> ppp Experience.java <nl> - 			XP_FOR_LEVEL[level - 1] = xp / 4; <nl> + 			XP_FOR_LEVEL[level - 1] = xp / 4; <nl> - 		if (level < 1 || level > MAX_VIRT_LEVEL) <nl> + 		if (level < 2 || level > MAX_VIRT_LEVEL) <nl> - 			throw new IllegalArgumentException(level + " is not a valid level"); <nl> 
deleted file <nl> mmm NamedObjectClueScroll.java <nl> - package net.runelite.client.plugins.cluescrolls.clues; <nl> - import javax.annotation.Nullable; <nl> - public interface NamedObjectClueScroll <nl> - { <nl> - 	String[] getObjectNames(); <nl> - 	@Nullable <nl> - 	int[] getObjectRegions(); <nl> - } <nl> deleted file <nl> 
mmm RSNameable.java <nl> ppp RSNameable.java <nl> + import net.runelite.api.Nameable; <nl> - public interface RSNameable <nl> + public interface RSNameable extends Nameable, Comparable <nl> - 	RSName getName(); <nl> + 	RSName getRsName(); <nl> + 	@Import("prevName") <nl> + 	RSName getRsPrevName(); <nl> new file <nl> 
new file <nl> ppp KourendLibraryPlugin.java <nl> + package net.runelite.client.plugins.kourendlibrary; <nl> + import com.google.common.eventbus.Subscribe; <nl> + import java.util.regex.Matcher; <nl> + import java.util.regex.Pattern; <nl> + import javax.imageio.ImageIO; <nl> + import javax.inject.Inject; <nl> 
mmm GpuPlugin.java <nl> ppp GpuPlugin.java <nl> - 	enabledByDefault = false <nl> + 	enabledByDefault = false, <nl> + 	tags = {"fog", "draw distance"} <nl> mmm AgilityShortcutLocation.java <nl> ppp AgilityShortcutLocation.java <nl> + 	MOUNT_KARUULM_LOWER("Rocks", 29, new WorldPoint(1324, 3782, 0)), <nl> + 	MOUNT_KARUULM_UPPER("Rocks", 62, new WorldPoint(1322, 3791, 0)), <nl> 
mmm MotherlodeSackOverlay.java <nl> ppp MotherlodeSackOverlay.java <nl> - import com.google.common.collect.Sets; <nl> + import com.google.common.collect.ImmutableSet; <nl> - 	private static final Set<Integer> MINING_ANIMATION_IDS = Sets.newHashSet( <nl> + 	private static final Set<Integer> MINING_ANIMATION_IDS = ImmutableSet.of( <nl> 
mmm RSWidgetMixin.java <nl> ppp RSWidgetMixin.java <nl> + import java.util.Arrays; <nl> + 	@Inject <nl> + 	@Override <nl> + 	public void deleteAllChildren() <nl> + 	{ <nl> + 		if (getChildren() != null) <nl> + 		{ <nl> + 			Arrays.fill(getChildren(), null); <nl> + 		} <nl> + 	} <nl> mmm RSWidget.java <nl> ppp RSWidget.java <nl> 
mmm RSClientMixin.java <nl> ppp RSClientMixin.java <nl> + import net.runelite.rs.api.RSItem; <nl> + 	@Inject <nl> + 	private static RSItem lastItemDespawn; <nl> + 	@Inject <nl> + 	@Override <nl> + 	public RSItem getLastItemDespawn() <nl> + 	{ <nl> + 		return lastItemDespawn; <nl> + 	} <nl> + 	@Inject <nl> + 	@Override <nl> 
mmm OsbuddyClient.java <nl> ppp OsbuddyClient.java <nl> + 	private static final String USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36"; <nl> - 			.host("storage.googleapis.com") <nl> - 			.addPathSegment("osb-exchange") <nl> 
mmm MenuEntrySwapperPlugin.java <nl> ppp MenuEntrySwapperPlugin.java <nl> - 		else if (config.swapFairyRing() != FairyRingMode.ZANARIS && (option.equals("zanaris") || option.equals("tree"))) <nl> + 		else if (config.swapLastDestination() && (option.equals("zanaris") || option.equals("tree"))) <nl> - 			if (config.swapFairyRing() == FairyRingMode.LAST_DESTINATION) <nl> 
mmm RaidsPlugin.java <nl> ppp RaidsPlugin.java <nl> - 							.append(ChatColorType.NORMAL) <nl> - 							.append("Total points: ") <nl> - 							.append(ChatColorType.HIGHLIGHT) <nl> - 							.append(POINTS_FORMAT.format(totalPoints)) <nl> - 							.append(ChatColorType.NORMAL) <nl> - 							.append(", Personal points: ") <nl> 
new file <nl> ppp DeltaCalculator.java <nl> + package net.runelite.client.plugins.itemstats.delta; <nl> + @FunctionalInterface <nl> + public interface DeltaCalculator <nl> + { <nl> + 	int calculateDelta(int max); <nl> + } <nl> new file <nl> ppp Positivity.java <nl> + package net.runelite.client.plugins.itemstats; <nl> 
mmm MotherlodeConfig.java <nl> ppp MotherlodeConfig.java <nl> + import net.runelite.api.Actor; <nl> + import net.runelite.api.WallObject; <nl> + import net.runelite.api.events.GameObjectChanged; <nl> + import net.runelite.api.events.GameObjectDespawned; <nl> + import net.runelite.api.events.GameObjectSpawned; <nl> 
deleted file <nl> mmm WidgetEditPanel.java <nl> - package net.runelite.client.plugins.devtools; <nl> - import java.awt.Color; <nl> - import java.awt.GridBagConstraints; <nl> - import java.awt.GridBagLayout; <nl> - import javax.swing.JButton; <nl> - import javax.swing.JCheckBox; <nl> - import javax.swing.JLabel; <nl> 
new file <nl> ppp CacheClient.java <nl> + package net.runelite.cache.downloader; <nl> + import io.netty.bootstrap.Bootstrap; <nl> + import io.netty.buffer.ByteBuf; <nl> + import io.netty.buffer.Unpooled; <nl> + import io.netty.channel.Channel; <nl> + import io.netty.channel.ChannelFuture; <nl> + import io.netty.channel.ChannelInitializer; <nl> 
mmm Emote.java <nl> ppp Emote.java <nl> - package net.runelite.client.plugins.cluescrolls.clues; <nl> + package net.runelite.client.plugins.cluescrolls.clues.emote; <nl> new file <nl> ppp RangeItemRequirement.java <nl> + package net.runelite.client.plugins.cluescrolls.clues.emote; <nl> + import net.runelite.api.Client; <nl> 
mmm BoostsPlugin.java <nl> ppp BoostsPlugin.java <nl> + import net.runelite.api.Constants; <nl> - 		return time != -1 ? (int)(time * 0.6 - (diff / 1000d)) : time; <nl> + 		return time != -1 ? (int)((time * Constants.GAME_TICK_LENGTH - diff) / 1000d) : time; <nl> mmm GameTimer.java <nl> ppp GameTimer.java <nl> 
mmm FrameDefinition.java <nl> ppp FrameDefinition.java <nl> + import lombok.EqualsAndHashCode; <nl> + @EqualsAndHashCode <nl> mmm NpcDefinition.java <nl> ppp NpcDefinition.java <nl> + import lombok.EqualsAndHashCode; <nl> + @EqualsAndHashCode <nl> mmm KitDefinition.java <nl> ppp KitDefinition.java <nl> + import lombok.EqualsAndHashCode; <nl> 
mmm ScreenshotPlugin.java <nl> ppp ScreenshotPlugin.java <nl> + 	private static final Pattern LEVEL_UP_PATTERN = Pattern.compile("Your ([a-zA-Z]+) (?:level is|are)? now (\\d+)\\."); <nl> - 				fileName = parseLevelUpWidget(WidgetInfo.LEVEL_UP_SKILL, WidgetInfo.LEVEL_UP_LEVEL); <nl> + 				fileName = parseLevelUpWidget(WidgetInfo.LEVEL_UP_LEVEL); <nl> 
mmm Notifier.java <nl> ppp Notifier.java <nl> - import com.google.inject.Inject; <nl> - import java.io.InputStream; <nl> - import java.nio.file.Files; <nl> - import java.nio.file.Path; <nl> - import java.util.Optional; <nl> - import java.util.concurrent.ScheduledExecutorService; <nl> - import javax.inject.Provider; <nl> 
mmm SortOrder.java <nl> ppp SortOrder.java <nl> + " ASC"; <nl> + public interface GenreSortOrder { <nl> + String GENRE_A_Z = MediaStore.Audio.Genres.DEFAULT_SORT_ORDER; <nl> + String ALBUM_Z_A = GENRE_A_Z + " DESC"; <nl> + } <nl> new file <nl> ppp GenreAdapter.java <nl> + package com.kabouzeid.gramophone.adapter; <nl> 
mmm AppWidgetCard.java <nl> ppp AppWidgetCard.java <nl> - import com.kabouzeid.gramophone.util.Util; <nl> + import com.kabouzeid.gramophone.util.ImageUtil; <nl> - appWidgetView.setImageViewBitmap(R.id.button_next, createBitmap(Util.getTintedVectorDrawable(context, R.drawable.ic_skip_next_white_24dp, MaterialValueHelper.getSecondaryTextColor(context, true)), 1f)); <nl> 
mmm AlbumAdapter.java <nl> ppp AlbumAdapter.java <nl> - import com.bumptech.glide.load.engine.DiskCacheStrategy; <nl> + import com.bumptech.glide.signature.StringSignature; <nl> - .diskCacheStrategy(DiskCacheStrategy.NONE) <nl> + .signature(new StringSignature(album.albumArtPath)) <nl> mmm AlbumDetailActivity.java <nl> 
mmm HistoryPlaylist.java <nl> ppp HistoryPlaylist.java <nl> - @Override <nl> - public void writeToParcel(Parcel dest, int flags) { <nl> - super.writeToParcel(dest, flags); <nl> - } <nl> mmm MusicUtil.java <nl> ppp MusicUtil.java <nl> - final Uri sArtworkUri = Uri <nl> mmm ShuffleAllPlaylist.java <nl> ppp ShuffleAllPlaylist.java <nl> 
mmm PlaylistSongAdapter.java <nl> ppp PlaylistSongAdapter.java <nl> - import com.squareup.picasso.Picasso; <nl> + import com.koushikdutta.ion.Ion; <nl> + @Override <nl> + public void onViewRecycled(ViewHolder holder) { <nl> + super.onViewRecycled(holder); <nl> + } <nl> - Picasso.with(activity) <nl> - .load(MusicUtil.getAlbumArtUri(song.albumId)) <nl> 
new file <nl> ppp DeepLInkRegistry.java <nl> + package com.airbnb.deeplinkdispatch; <nl> + import com.airbnb.deeplinkdispatch.internal.DeepLinkEntry; <nl> + import java.util.LinkedList; <nl> + import java.util.List; <nl> + import java.util.regex.Matcher; <nl> + import java.util.regex.Pattern; <nl> + public class DeepLinkRegistry { <nl> 
mmm ViewDescriptor.java <nl> ppp ViewDescriptor.java <nl> - import com.facebook.stetho.inspector.elements.ComputedStyleAccumulator; <nl> - private static final String VIEW_SELECTOR_NAME = "<this_view>"; <nl> - private static final String ACCESSIBILITY_SELECTOR_NAME = "Accessibility Properties"; <nl> - VIEW_SELECTOR_NAME, <nl> 
mmm ViewDescriptor.java <nl> ppp ViewDescriptor.java <nl> + import android.graphics.Rect; <nl> - public View getViewForHighlighting(View element) { <nl> + @Nullable <nl> + public View getViewAndBoundsForHighlighting(View element, Rect bounds) { <nl> mmm AndroidDocumentProvider.java <nl> ppp AndroidDocumentProvider.java <nl> 
new file <nl> ppp AbstractFormValidationDecorator.java <nl> + package se.citerus.registerapp.validation; <nl> + import java.awt.event.KeyEvent; <nl> + import java.awt.event.KeyListener; <nl> + import java.util.HashMap; <nl> + import java.util.Map.Entry; <nl> + import javax.swing.JComponent; <nl> + public abstract class AbstractFormValidationDecorator implements FormValidationDecorator{ <nl> 
mmm HandlingEvent.java <nl> ppp HandlingEvent.java <nl> - import java.util.Comparator; <nl> - public static final Comparator<HandlingEvent> BY_COMPLETION_TIME_COMPARATOR = <nl> - new Comparator<HandlingEvent>() { <nl> - public int compare(final HandlingEvent he1, final HandlingEvent he2) { <nl> - return he1.completionTime().compareTo(he2.completionTime()); <nl> 
mmm SSLConfigurationTests.java <nl> ppp SSLConfigurationTests.java <nl> - import org.junit.Ignore; <nl> - final SyncConfiguration configOld = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM) <nl> + final SyncConfiguration syncConfig = configurationFactory.createSyncConfigurationBuilder(user, Constants.USER_REALM) <nl> 
mmm OrderedCollectionChangeSet.java <nl> ppp OrderedCollectionChangeSet.java <nl> + import javax.annotation.Nullable; <nl> + public enum State { <nl> + INITIAL, <nl> + UPDATE, <nl> + ERROR <nl> + } <nl> + State getState(); <nl> + @Nullable <nl> + Throwable getError(); <nl> + boolean isCompleteResult(); <nl> mmm ObjectServerFacade.java <nl> 
new file <nl> ppp Person.java <nl> + package io.realm.examples.threads.model; <nl> + import io.realm.RealmObject; <nl> + import io.realm.annotations.PrimaryKey; <nl> + public class Person extends RealmObject { <nl> + @PrimaryKey <nl> + private String id; <nl> + private String name; <nl> + private int age; <nl> 
mmm RealmTest.java <nl> ppp RealmTest.java <nl> + public void testOpeningOfEncryptedRealmWithDifferentKeyInstances() { <nl> + byte[] key1 = new byte[64]; <nl> + byte[] key2 = new byte[64]; <nl> + new Random(42).nextBytes(key1); <nl> + new Random(42).nextBytes(key2); <nl> + assertArrayEquals(key1, key2); <nl> 
mmm RealmExampleActivity.java <nl> ppp RealmExampleActivity.java <nl> - import io.realm.ResultList; <nl> + import io.realm.RealmResults; <nl> - ResultList<City> cities = realm.where(City.class).findAll(); <nl> + RealmResults<City> cities = realm.where(City.class).findAll(); <nl> new file <nl> ppp RealmIOException.java <nl> 
mmm RealmProxyClassGenerator.java <nl> ppp RealmProxyClassGenerator.java <nl> - imports.sort(new Comparator<String>() { <nl> - @Override <nl> - public int compare(String o1, String o2) { <nl> - return o1.compareTo(o2); <nl> - } <nl> - }); <nl> + Collections.sort(imports); <nl> - writer.nextControlFlow("else"); <nl> 
mmm RealmSchema.java <nl> ppp RealmSchema.java <nl> + public abstract RealmObjectSchema createWithPrimaryKeyField(String className, String primaryKeyFieldName, Class<?> fieldType, <nl> + FieldAttribute... attributes); <nl> - columnNames.add(table.getColumnName(i)); <nl> + String name = table.getColumnName(i); <nl> 
mmm CityLoader.java <nl> ppp CityLoader.java <nl> - package realm.io.examples.realmgridview; <nl> + package io.realm.examples.realmgridview; <nl> mmm RealmExampleActivity.java <nl> ppp RealmExampleActivity.java <nl> - package realm.io.examples.realmgridview; <nl> + package io.realm.examples.realmgridview; <nl> 
new file <nl> ppp RealmAdapter.java <nl> + package io.realm.entities; <nl> + import android.content.Context; <nl> + import android.view.View; <nl> + import android.view.ViewGroup; <nl> + import android.widget.ListAdapter; <nl> + import android.widget.TextView; <nl> + import io.realm.RealmBaseAdapter; <nl> + import io.realm.RealmResults; <nl> 
mmm AutomaticSyncPolicy.java <nl> ppp AutomaticSyncPolicy.java <nl> + @Override <nl> + public boolean equals(Object o) { <nl> + if (this == o) return true; <nl> + if (o == null || getClass() != o.getClass()) return false; <nl> + AutomaticSyncPolicy that = (AutomaticSyncPolicy) o; <nl> + if (recurringErrors != that.recurringErrors) return false; <nl> 
mmm TestHelper.java <nl> ppp TestHelper.java <nl> mmm RealmObject.java <nl> ppp RealmObject.java <nl> + static final String MSG_NULL_OBJECT = "'model' is null."; <nl> + static final String MSG_DELETED_OBJECT = "the object is already deleted."; <nl> + static final String MSG_DYNAMIC_OBJECT = "the object is an instance of DynamicRealmObject. Use DynamicRealmObject.getDynamicRealm() instead."; <nl> 
mmm SyncCredentials.java <nl> ppp SyncCredentials.java <nl> - *         {@link SyncUser#loginAsync(SyncCredentials, String, SyncUser.Callback)}. <nl> + * {@link SyncUser#loginAsync(SyncCredentials, String, SyncUser.Callback)}. <nl> - *         {@link SyncUser#loginAsync(SyncCredentials, String, SyncUser.Callback)}. <nl> 
mmm util.java <nl> ppp util.java <nl> - package com.tightdb.internal; <nl> + package com.tightdb; <nl> - 	public static final long REQUIRED_JNI_VERSION = 13; <nl> + 	public static final long REQUIRED_JNI_VERSION = 14; <nl> deleted file <nl> mmm Example.java <nl> - package com.tightdb.example; <nl> - import java.io.IOException; <nl> 
mmm RealmTest.java <nl> ppp RealmTest.java <nl> - assertFalse("contains returns true for non-existing table", testRealm.contains(RealmTest.class)); <nl> + assertFalse("contains returns true for non-existing table", testRealm.contains(null)); <nl> - } catch (RealmException expected) { <nl> + } catch (IllegalArgumentException expected) { <nl> 
new file <nl> ppp SharedGroup.java <nl> + package com.tightdb; <nl> + import com.tightdb.lib.TightDB; <nl> + public class SharedGroup { <nl> + static { <nl> + TightDB.loadLibrary(); <nl> + } <nl> + public SharedGroup(String databaseFile) <nl> + { <nl> + this.nativePtr = createNative(databaseFile, false); <nl> + checkNativePtr(); <nl> 
mmm DynamicReadTransactionIntro.java <nl> ppp DynamicReadTransactionIntro.java <nl> - (new File("mydatabase.tightdb.lock")).delete(); <nl> + group.close(); <nl> + group.close(); <nl> mmm SharedGroupIntro.java <nl> ppp SharedGroupIntro.java <nl> + group.close(); <nl> mmm DynTableExamples.java <nl> ppp DynTableExamples.java <nl> 
mmm OsSharedRealm.java <nl> ppp OsSharedRealm.java <nl> + @Deprecated <nl> mmm OrderedRealmCollectionChangeListener.java <nl> ppp OrderedRealmCollectionChangeListener.java <nl> - * @param changeSet object with information about which rows in the collection were added, removed or modified. <nl> - * {@code null} is returned the first time an async query is completed. <nl> 
mmm BgService.java <nl> ppp BgService.java <nl> mmm BgWriterThread.java <nl> ppp BgWriterThread.java <nl> mmm Dog.java <nl> ppp Dog.java <nl> mmm RealmIntroExampleActivity.java <nl> ppp RealmIntroExampleActivity.java <nl> mmm BgSpawningService.java <nl> ppp BgSpawningService.java <nl> mmm City.java <nl> ppp City.java <nl> 
mmm AllTypes.java <nl> ppp AllTypes.java <nl> + public static final String TAG = "AllTypes"; <nl> new file <nl> ppp Constants.java <nl> + package io.realm.processor; <nl> + public class Constants { <nl> + public static final String REALM_PACKAGE_NAME = "io.realm"; <nl> + public static final String PROXY_SUFFIX = "RealmProxy"; <nl> 
mmm PartialSyncTests.java <nl> ppp PartialSyncTests.java <nl> + .name("partialSync") <nl> - Realm.deleteRealm(syncConfig); <nl> mmm JNIColumnInfoTest.java <nl> ppp JNIColumnInfoTest.java <nl> + import org.junit.After; <nl> - @SuppressWarnings("FieldCanBeLocal") <nl> - private RealmConfiguration config; <nl> - @SuppressWarnings("FieldCanBeLocal") <nl> 
mmm RealmObject.java <nl> ppp RealmObject.java <nl> + import android.app.IntentService; <nl> + * @throws IllegalStateException if you try to add a listener from a non-Looper or {@link IntentService} thread. <nl> - * @throws IllegalStateException if you try to add a listener from a non-Looper Thread. <nl> 
new file <nl> ppp ModulesExampleActivity.java <nl> + package io.realm.examples.appmodules; <nl> + import android.app.Activity; <nl> + import android.os.Bundle; <nl> + import android.util.Log; <nl> + import android.widget.LinearLayout; <nl> + import android.widget.TextView; <nl> + import io.realm.Realm; <nl> + import io.realm.RealmConfiguration; <nl> 
mmm SyncSession.java <nl> ppp SyncSession.java <nl> - import io.realm.annotations.Beta; <nl> - @Beta <nl> mmm AuthenticationListener.java <nl> ppp AuthenticationListener.java <nl> - import io.realm.annotations.Beta; <nl> - @Beta <nl> - @Beta <nl> mmm SyncCredentials.java <nl> ppp SyncCredentials.java <nl> - import io.realm.annotations.Beta; <nl> 
mmm RealmMigrationNeededException.java <nl> ppp RealmMigrationNeededException.java <nl> - public RealmMigrationNeededException(String detailMessage) { <nl> + private final String absoluteRealmPath; <nl> + public RealmMigrationNeededException(String absoluteRealmPath, String detailMessage) { <nl> + this.absoluteRealmPath = absoluteRealmPath; <nl> 
mmm RealmModule.java <nl> ppp RealmModule.java <nl> - package io.realm.annotations.internal; <nl> + package io.realm.annotations; <nl> - @Retention(RetentionPolicy.CLASS) <nl> + @Retention(RetentionPolicy.RUNTIME) <nl> mmm TestHelper.java <nl> ppp TestHelper.java <nl> + import java.util.Random; <nl> + public static byte[] getRandomKey() { <nl> 
mmm MutableRealmSchema.java <nl> ppp MutableRealmSchema.java <nl> + @Override <nl> + public RealmObjectSchema createWithPrimaryKeyField(String className, String primaryKeyFieldName, Class<?> fieldType, <nl> + FieldAttribute... attributes) { <nl> + checkNotEmpty(className, EMPTY_STRING_MSG); <nl> + RealmObjectSchema.checkLegalName(primaryKeyFieldName); <nl> 
mmm RealmObject.java <nl> ppp RealmObject.java <nl> - import android.app.IntentService; <nl> - * @throws IllegalStateException if you try to add a listener from a non-Looper or {@link IntentService} thread. <nl> - * @throws IllegalStateException if you try to add a listener from a non-Looper or {@link IntentService} thread. <nl> 
mmm PrimaryKeyTests.java <nl> ppp PrimaryKeyTests.java <nl> - Table t = sharedRealm.createTable("TestTable"); <nl> + Table t = sharedRealm.createTable(Table.getTableNameForClass("TestTable")); <nl> - Table t = sharedRealm.createTable("TestTable"); <nl> + Table t = sharedRealm.createTable(Table.getTableNameForClass("class_TestTable")); <nl> 
mmm SyncedRealmMigrationTests.java <nl> ppp SyncedRealmMigrationTests.java <nl> + import android.support.test.InstrumentationRegistry; <nl> + import org.junit.Ignore; <nl> + import java.io.IOException; <nl> + import io.realm.entities.PrimaryKeyAsInteger; <nl> + import static org.junit.Assert.assertNotNull; <nl> 
mmm Person.java <nl> ppp Person.java <nl> - package io.realm.examples.realmintroexample.model; <nl> + package io.realm.realmintroexample; <nl> + private Dog dog; <nl> + private byte[] data; <nl> + public Dog getDog() { <nl> + return dog; <nl> + } <nl> + public void setDog(Dog dog) { <nl> + this.dog = dog; <nl> 
deleted file <nl> mmm TypeMirrors.java <nl> - package io.realm.processor; <nl> - import java.util.Date; <nl> - import java.util.List; <nl> - import javax.annotation.processing.ProcessingEnvironment; <nl> - import javax.lang.model.element.VariableElement; <nl> - import javax.lang.model.type.DeclaredType; <nl> 
mmm SyncManagerTests.java <nl> ppp SyncManagerTests.java <nl> - import android.content.Context; <nl> - import android.support.test.InstrumentationRegistry; <nl> - import org.junit.After; <nl> - private Context context; <nl> - context = InstrumentationRegistry.getContext(); <nl> - public SyncUser put(String key, SyncUser user) { <nl> 
deleted file <nl> mmm SetVersionNumberMigration.java <nl> - package io.realm.internal.migration; <nl> - import io.realm.Realm; <nl> - import io.realm.RealmMigration; <nl> - public class SetVersionNumberMigration implements RealmMigration { <nl> - private final int newVersion; <nl> - public SetVersionNumberMigration(int newVersion) { <nl> 
mmm SyncUserTests.java <nl> ppp SyncUserTests.java <nl> - import org.junit.Before; <nl> + import org.junit.After; <nl> + import org.junit.BeforeClass; <nl> - import java.net.MalformedURLException; <nl> - import java.net.URL; <nl> - import io.realm.android.SharedPrefsUserStore; <nl> - @Before <nl> - public void setUp() { <nl> 
mmm RealmSchemaTests.java <nl> ppp RealmSchemaTests.java <nl> + @Test <nl> + public void createWithPrimaryKeyField_string() { <nl> + final String[] validClassNames = { <nl> + TestHelper.getRandomString(1), <nl> + "Darby", <nl> + TestHelper.getRandomString(Table.CLASS_NAME_MAX_LENGTH) <nl> + }; <nl> + if (type == SchemaType.IMMUTABLE) { <nl> 
mmm DynamicRealm.java <nl> ppp DynamicRealm.java <nl> - import android.app.IntentService; <nl> + import android.os.Looper; <nl> - private DynamicRealm(RealmConfiguration configuration) { <nl> - super(configuration); <nl> + private DynamicRealm(RealmConfiguration configuration, boolean autoRefresh) { <nl> + super(configuration, autoRefresh); <nl> 
new file <nl> ppp WakefulReceivingBroadcastReceiver.java <nl> + package io.realm.examples.threads; <nl> + import android.content.Context; <nl> + import android.content.Intent; <nl> + import android.support.v4.content.WakefulBroadcastReceiver; <nl> + public class WakefulReceivingBroadcastReceiver extends WakefulBroadcastReceiver { <nl> 
mmm Mixed.java <nl> ppp Mixed.java <nl> - throw new IllegalMixedTypeException("The type is not a long"); <nl> + throw new IllegalMixedTypeException("Can't get a long from a Mixed containg a " + getType()); <nl> - throw new IllegalMixedTypeException("The type is not a boolean"); <nl> + throw new IllegalMixedTypeException("Can't get a boolean from a Mixed containg a " + getType()); <nl> 
deleted file <nl> mmm DocExamples.java <nl> - package com.tightdb.doc; <nl> - public class DocExamples { <nl> - 	public static void main(String[] args) { <nl> - 	} <nl> - 	 <nl> - } <nl> new file <nl> + package com.tightdb.doc; <nl> + import com.tightdb.generated.Employee; <nl> + public class DocExamples { <nl> 
mmm RealmJsonTypeHelper.java <nl> ppp RealmJsonTypeHelper.java <nl> - .emitStatement("%s(new Date(timestamp))", setter) <nl> + .emitStatement("obj.%s(new Date(timestamp))", setter) <nl> - .emitStatement("%s(JsonUtils.stringToDate(jsonDate))", setter) <nl> + .emitStatement("obj.%s(JsonUtils.stringToDate(jsonDate))", setter) <nl> 
mmm DynamicRealm.java <nl> ppp DynamicRealm.java <nl> - import android.os.Looper; <nl> + import android.app.IntentService; <nl> - private DynamicRealm(RealmConfiguration configuration, boolean autoRefresh) { <nl> - super(configuration, autoRefresh); <nl> + private DynamicRealm(RealmConfiguration configuration) { <nl> 
mmm JNITableInsertTest.java <nl> ppp JNITableInsertTest.java <nl> - import javax.swing.text.TabExpander; <nl> - {345, "row1"}, <nl> - {456, "row2"} }; <nl> + {345, "row1"}, <nl> + {456, "row2"} }; <nl> - {345, "row1"}, <nl> - {456, "row2"} }}); <nl> + {345, "row1"}, <nl> + {456, "row2"} }}); <nl> - new Object[][] {{432, "new"}} }; <nl> 
mmm Table.java <nl> ppp Table.java <nl> mmm RealmQuery.java <nl> ppp RealmQuery.java <nl> + public RealmQuery<E> isNotEmpty(String fieldName) { <nl> + long columnIndices[] = schema.getColumnIndices(fieldName, RealmFieldType.STRING, RealmFieldType.BINARY, RealmFieldType.LIST); <nl> + this.query.isNotEmpty(columnIndices); <nl> 
mmm Transient.java <nl> ppp Transient.java <nl> - return realmGet$name(); <nl> - } <nl> - public void setName(String name) { <nl> - realmSet$name(name); <nl> - } <nl> - public String realmGet$name() { <nl> - public void realmSet$name(String name) { <nl> + public void setName(String name) { <nl> - @Override <nl> 
new file <nl> ppp NoRetryPolicy.java <nl> + package io.realm.internal.async; <nl> + class NoRetryPolicy implements RetryPolicy { <nl> + @Override <nl> + public boolean shouldRetry() { <nl> + return false; <nl> + } <nl> + } <nl> new file <nl> ppp AsyncRealmQuery.java <nl> + package io.realm.internal.android; <nl> 
new file <nl> ppp RealmListNYTimesMultimediumDeserializer.java <nl> + package io.realm.examples.newsreader.model.network; <nl> + import com.fasterxml.jackson.core.JsonParser; <nl> + import com.fasterxml.jackson.core.JsonProcessingException; <nl> + import com.fasterxml.jackson.core.TreeNode; <nl> + import com.fasterxml.jackson.databind.DeserializationContext; <nl> 
mmm TestHelper.java <nl> ppp TestHelper.java <nl> - import java.lang.reflect.Modifier; <nl> - import io.realm.entities.AnnotationIndexTypes; <nl> + import io.realm.entities.AnnotationIndexTypes; <nl> mmm OrderedRealmCollectionTests.java <nl> ppp OrderedRealmCollectionTests.java <nl> - import static org.junit.Assert.assertNull; <nl> 
new file <nl> ppp BenchmarkConfig.java <nl> + package io.realm.benchmarks.config; <nl> + import android.os.Environment; <nl> + import java.io.File; <nl> + import java.util.concurrent.TimeUnit; <nl> + import dk.ilios.spanner.SpannerConfig; <nl> + import dk.ilios.spanner.config.RuntimeInstrumentConfig; <nl> + import dk.ilios.spanner.output.ResultProcessor; <nl> 
mmm SyncManager.java <nl> ppp SyncManager.java <nl> + authServer.clearCustomHeaderSettings(); <nl> - @RealmField(name = "first_name") <nl> + @RealmField("first_name") <nl> mmm CustomRealmNamesModule.java <nl> ppp CustomRealmNamesModule.java <nl> - @RealmModule(classes = { <nl> - ClassNameOverrideModulePolicy.class, <nl> 
mmm RealmTest.java <nl> ppp RealmTest.java <nl> - import android.support.test.InstrumentationRegistry; <nl> - import android.support.test.annotation.UiThreadTest; <nl> - import android.support.test.rule.UiThreadTestRule; <nl> - import android.support.test.runner.AndroidJUnit4; <nl> + import android.test.AndroidTestCase; <nl> 
new file <nl> ppp RemoteInsertManyResult.java <nl> + package io.realm.mongodb.remote; <nl> + import java.util.Map; <nl> + import org.bson.BsonValue; <nl> + public class RemoteInsertManyResult { <nl> + private final Map<Long, BsonValue> insertedIds; <nl> + public RemoteInsertManyResult(final Map<Long, BsonValue> insertedIds) { <nl> 
mmm City.java <nl> ppp City.java <nl> + public Role getPrivateRole() { <nl> + return role; <nl> + } <nl> mmm GridViewExampleActivity.java <nl> ppp GridViewExampleActivity.java <nl> - private GridView mGridView; <nl> - private CityAdapter mAdapter; <nl> + private GridView gridView; <nl> + private CityAdapter adapter; <nl> 
new file <nl> ppp PhoneView.java <nl> + package com.tightdb.generated; <nl> + import com.tightdb.*; <nl> + import com.tightdb.lib.*; <nl> + public class PhoneView extends AbstractView<Phone, PhoneView, PhoneQuery> { <nl> + 	public final StringRowsetColumn<Phone, PhoneQuery> type = new StringRowsetColumn<Phone, PhoneQuery>(PhoneTable.TYPES, rowset, 0, "type"); <nl> 
deleted file <nl> mmm AllTypesRealmProxy.java <nl> - package io.realm; <nl> - import io.realm.RealmList; <nl> - import io.realm.RealmObject; <nl> - import io.realm.internal.ColumnType; <nl> - import io.realm.internal.ImplicitTransaction; <nl> - import io.realm.internal.LinkView; <nl> - import io.realm.internal.Row; <nl> 
mmm QueryTests.java <nl> ppp QueryTests.java <nl> - RealmFieldType.LIST)); <nl> + RealmFieldType.LIST, <nl> + RealmFieldType.LINKING_OBJECTS)); <nl> - list.remove(RealmFieldType.LINKING_OBJECTS); <nl> - realm.copyToRealm(emptyValues); <nl> + AllJavaTypes emptyValuesManaged = realm.copyToRealm(emptyValues); <nl> 
mmm RealmQuery.java <nl> ppp RealmQuery.java <nl> - if (columnIndices.length > 1 && !caseSensitive) { <nl> - throw new IllegalArgumentException("Link queries cannot be case insensitive - coming soon."); <nl> - } <nl> - if (columnIndices.length == 1) { <nl> - this.query.contains(columnIndices[0], value, caseSensitive); <nl> 
mmm RealmCache.java <nl> ppp RealmCache.java <nl> + import java.util.ArrayList; <nl> - import java.util.LinkedList; <nl> - private static final List<WeakReference<RealmCache>> cachesList = new LinkedList<WeakReference<RealmCache>>(); <nl> + private static final List<WeakReference<RealmCache>> cachesList = new ArrayList<WeakReference<RealmCache>>(); <nl> 
mmm RealmList.java <nl> ppp RealmList.java <nl> + import java.util.ArrayList; <nl> + import java.util.LinkedList; <nl> + import java.util.List; <nl> + import io.realm.exceptions.RealmException; <nl> + private static final String ONLY_IN_MANAGED_MODE_MESSAGE = "This method is only available in managed mode"; <nl> 
mmm TestHelper.java <nl> ppp TestHelper.java <nl> + public static void populateAllNonNullRowsForNumericTesting (Realm realm) { <nl> + NullTypes nullTypes1 = new NullTypes(); <nl> + nullTypes1.setId(1); <nl> + nullTypes1.setFieldIntegerNull(3); <nl> + nullTypes1.setFieldFloatNull(4F); <nl> + nullTypes1.setFieldDoubleNull(5D); <nl> 
mmm ThrottleSearchActivity.java <nl> ppp ThrottleSearchActivity.java <nl> - import android.app.Activity; <nl> + import android.support.v7.app.AppCompatActivity; <nl> - import com.jakewharton.rxbinding.widget.RxTextView; <nl> - import com.jakewharton.rxbinding.widget.TextViewTextChangeEvent; <nl> + import com.jakewharton.rxbinding2.widget.RxTextView; <nl> 
mmm Dog.java <nl> ppp Dog.java <nl> - private GridView gridView; <nl> - private CityAdapter adapter; <nl> + private GridView mGridView; <nl> + private CityAdapter mAdapter; <nl> - private RealmResults<City> cities; <nl> - private RealmChangeListener<RealmResults<City>> realmChangeListener = (cities) -> { <nl> 
mmm RealmObjectSchema.java <nl> ppp RealmObjectSchema.java <nl> + if (containsAttribute(attributes, FieldAttribute.PRIMARY_KEY)) { <nl> + checkAddPrimaryKeyForSync(); <nl> + } <nl> + * @throws UnsupportedOperationException if this method is called on a synced Realm. <nl> + checkAddPrimaryKeyForSync(); <nl> 
mmm Mixed.java <nl> ppp Mixed.java <nl> + import java.util.Arrays; <nl> + private Object value; <nl> - public boolean equals(Object second) { <nl> - if (second == null) <nl> - return false; <nl> - if (!(second instanceof Mixed)) <nl> + @Override <nl> + public boolean equals(Object obj) { <nl> + if (this == obj) { <nl> 
deleted file <nl> mmm ReleaseNewsReaderApplication.java <nl> - package io.realm.examples.newsreader; <nl> - public class ReleaseNewsReaderApplication extends NewsReaderApplication { <nl> - @Override <nl> - protected void initializeTimber() { <nl> - } <nl> - } <nl> deleted file <nl> mmm NYTimesMultimedium.java <nl> 
mmm JNITableTest.java <nl> ppp JNITableTest.java <nl> - public void testLookupTable() { <nl> - Table t = new Table(); <nl> - long STRING_COL_INDEX   = t.addColumn(ColumnType.STRING, "col0"); <nl> - long INT_COL_INDEX      = t.addColumn(ColumnType.INTEGER, "col1"); <nl> - t.add("s", 1); <nl> - t.add("s", 2); <nl> 
mmm MixedTableOrViewColumn.java <nl> ppp MixedTableOrViewColumn.java <nl> + import com.tightdb.TableOrViewBase; <nl> mmm TableOrViewBase.java <nl> ppp TableOrViewBase.java <nl> - package com.tightdb.lib; <nl> + package com.tightdb; <nl> - import com.tightdb.ColumnType; <nl> - import com.tightdb.Mixed; <nl> - import com.tightdb.TableBase; <nl> 
mmm GroupExamples.java <nl> ppp GroupExamples.java <nl> - e.printStackTrace(); <nl> mmm TypedReadTransactionIntro.java <nl> ppp TypedReadTransactionIntro.java <nl> - public class ReadTransactionIntro { <nl> + public class TypedReadTransactionIntro { <nl> + (new File("mydatabase.tightdb.lock")).delete(); <nl> 
mmm ColumnTypeViewTest.java <nl> ppp ColumnTypeViewTest.java <nl> - t.finalize(); <nl> + t.close(); <nl> mmm TableQuery.java <nl> ppp TableQuery.java <nl> + private Context context = null; <nl> - public TableQuery(long nativeQueryPtr, boolean immutable){ <nl> + public TableQuery(Context context, long nativeQueryPtr, boolean immutable){ <nl> 
mmm Realm.java <nl> ppp Realm.java <nl> - protected List<WeakReference<RealmChangeListener>> getChangeListeners() { <nl> - return changeListeners; <nl> + List<WeakReference<RealmChangeListener>> getChangeListeners() { <nl> + return weakChangeListeners; <nl> mmm RealmQueryTest.java <nl> ppp RealmQueryTest.java <nl> 
mmm RealmObjectTests.java <nl> ppp RealmObjectTests.java <nl> + import io.realm.entities.pojo.AllTypesRealmModel; <nl> + import static org.junit.Assert.assertSame; <nl> - unmanaged.setRealm("realm"); <nl> + unmanaged.setRealmString("realm"); <nl> - assertEquals("realm", managed.getRealm()); <nl> + assertEquals("realm", managed.getRealmString()); <nl> 
mmm RealmQuery.java <nl> ppp RealmQuery.java <nl> - this.columns = Realm.columnIndices.get(clazz.getSimpleName()); <nl> + this.columns = Realm.columnIndices.getClassFields(clazz); <nl> + package io.realm.internal; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + import java.util.Set; <nl> 
deleted file <nl> mmm RealmError.java <nl> - package io.realm.exceptions; <nl> - public class RealmError extends Error { <nl> - public RealmError() { <nl> - } <nl> - public RealmError(String detailMessage) { <nl> - super(detailMessage); <nl> - } <nl> - public RealmError(String detailMessage, Throwable throwable) { <nl> 
new file <nl> ppp PeopleTable.java <nl> + package com.tightdb.generated; <nl> + import com.tightdb.*; <nl> + import com.tightdb.lib.*; <nl> + public class PeopleTable extends AbstractTable<People, PeopleView, PeopleQuery> { <nl> + 	public static final EntityTypes<PeopleTable, PeopleView, People, PeopleQuery> TYPES = new EntityTypes<PeopleTable, PeopleView, People, PeopleQuery>(PeopleTable.class, PeopleView.class, People.class, PeopleQuery.class); <nl> 
mmm JNIViewTest.java <nl> ppp JNIViewTest.java <nl> - TableView view = query.beginsWith(new long[]{0}, "A").findAll(0, table.size(), Table.INFINITE); <nl> + TableView view = query.beginsWith(0, "A").findAll(0, table.size(), Table.INFINITE); <nl> - TableView view2 = query2.tableview(view).contains(new long[]{0}, "3").findAll(); <nl> 
mmm JNITableTest.java <nl> ppp JNITableTest.java <nl> + import android.util.Pair; <nl> + import java.util.Arrays; <nl> + import java.util.List; <nl> + import java.util.ListIterator; <nl> + import java.util.Locale; <nl> - try { t.setString(0, 0, null);  fail("null string not allowed"); } catch (IllegalArgumentException ignored) { } <nl> 
mmm RealmObject.java <nl> ppp RealmObject.java <nl> - import android.app.IntentService; <nl> - * @throws IllegalStateException if you try to add a listener from a non-Looper or {@link IntentService} thread. <nl> - * @throws IllegalStateException if you try to add a listener from a non-Looper or {@link IntentService} thread. <nl> 
mmm MultimapValuesTester.java <nl> ppp MultimapValuesTester.java <nl> + import static com.google.common.collect.testing.Helpers.assertEqualIgnoringOrder; <nl> + import static com.google.common.collect.testing.Helpers.assertEqualInOrder; <nl> - import static com.google.common.truth.Truth.assertThat; <nl> - assertThat(multimap().values()).containsExactlyElementsIn(expected); <nl> 
mmm AutoLocalCacheTest.java <nl> ppp AutoLocalCacheTest.java <nl> - assertSame(loader, cache.map.defaultLoader); <nl> + assertSame(loader, cache.loader); <nl> - Segment<Object, Object> segment = cache.map.segments[0]; <nl> + Segment<Object, Object> segment = cache.localCache.segments[0]; <nl> mmm CacheBuilder.java <nl> 
mmm CollectionClearTester.java <nl> ppp CollectionClearTester.java <nl> - import static com.google.common.collect.testing.features.CollectionFeature.SUPPORTS_CLEAR; <nl> + import static com.google.common.collect.testing.features.CollectionFeature.SUPPORTS_REMOVE; <nl> - @CollectionFeature.Require(SUPPORTS_CLEAR) <nl> 
mmm CompactLinkedHashMap.java <nl> ppp CompactLinkedHashMap.java <nl> - long predMask = (~0L) << 32; <nl> + long predMask = ~0L << 32; <nl> mmm Hashing.java <nl> ppp Hashing.java <nl> - return ((double) ((int) (state >>> 33) + 1)) / (0x1.0p31); <nl> + return ((double) ((int) (state >>> 33) + 1)) / 0x1.0p31; <nl> 
new file <nl> ppp IncidentEdgeSet.java <nl> + package com.google.common.graph; <nl> + import java.util.AbstractSet; <nl> + import java.util.Set; <nl> + import org.checkerframework.checker.nullness.qual.Nullable; <nl> + abstract class IncidentEdgeSet<N> extends AbstractSet<EndpointPair<N>> { <nl> + protected final N node; <nl> 
mmm UncaughtExceptionHandlers.java <nl> ppp UncaughtExceptionHandlers.java <nl> - * <pre>public static void main(String[] args) { <nl> + * <nl> + * <pre> <nl> + * public static void main(String[] args) { <nl> - @VisibleForTesting static final class Exiter implements UncaughtExceptionHandler { <nl> + @VisibleForTesting <nl> 
mmm Futures.java <nl> ppp Futures.java <nl> mmm ListenableFuture.java <nl> ppp ListenableFuture.java <nl> mmm HashingInputStreamTest.java <nl> ppp HashingInputStreamTest.java <nl> mmm LittleEndianByteArray.java <nl> ppp LittleEndianByteArray.java <nl> + * UnsafeByteArray uses Unsafe.getLong() in an unsupported way, which is known to cause <nl> 
mmm TreeRegexpTest.java <nl> ppp TreeRegexpTest.java <nl> - public void ignores_non_capturing_groups() { <nl> - TreeRegexp tr = new TreeRegexp("(a(?:b)?)(c)"); <nl> - Group g = tr.match("ac"); <nl> - assertEquals("ac", g.getValue()); <nl> - assertEquals("a", g.getChildren().get(0).getValue()); <nl> - assertEquals(emptyList(), g.getChildren().get(0).getChildren()); <nl> 
mmm Main.java <nl> ppp Main.java <nl> - IdGenerator idGenerator = null; <nl> - case "--predictable-ids": <nl> - idGenerator = new IdGenerator.Incrementing(); <nl> - break; <nl> - if (idGenerator == null) { <nl> - idGenerator = new IdGenerator.UUID(); <nl> - } <nl> - Gherkin.fromPaths(paths, includeSource, includeAst, includePickles, idGenerator); <nl> 
mmm RegularExpression.java <nl> ppp RegularExpression.java <nl> + import org.apiguardian.api.API; <nl> - import java.util.Collections; <nl> - import java.util.Set; <nl> - final class RegularExpression implements Expression { <nl> + @API(status = API.Status.STABLE) <nl> + public final class RegularExpression implements Expression { <nl> 
mmm DataTable.java <nl> ppp DataTable.java <nl> + public void diff(DataTable actual) throws DiffException { <nl> + TableDiffer tableDiffer = new TableDiffer(this, actual); <nl> + DataTableDiff dataTableDiff = tableDiffer.calculateDiffs(); <nl> + if(!dataTableDiff.isEmpty()) { <nl> + throw DiffException.diff(dataTableDiff); <nl> 
mmm DataTable.java <nl> ppp DataTable.java <nl> + public void diff(DataTable actual) throws DiffException { <nl> + TableDiffer tableDiffer = new TableDiffer(this, actual); <nl> + DataTableDiff dataTableDiff = tableDiffer.calculateDiffs(); <nl> + if(!dataTableDiff.isEmpty()) { <nl> + throw DiffException.diff(dataTableDiff); <nl> 
mmm AstBuilder.java <nl> ppp AstBuilder.java <nl> - import gherkin.ast.ScenarioDefinition; <nl> - import gherkin.ast.ScenarioOutline; <nl> + import gherkin.ast.StepsContainer; <nl> - case Scenario_Definition: { <nl> + case ScenarioDefinition: { <nl> - AstNode scenarioNode = node.getSingle(RuleType.Scenario, null); <nl> 
mmm DataTableTypeTest.java <nl> ppp DataTableTypeTest.java <nl> + import java.util.Arrays; <nl> + import java.util.Map; <nl> + import static org.junit.Assert.assertEquals; <nl> + @Test <nl> + public void shouldTransformATableEntry() { <nl> + DataTableType tableType = new DataTableType(Place.class, new TableEntryTransformer<Place>() { <nl> 
mmm CommandsQueue.java <nl> ppp CommandsQueue.java <nl> + import java.util.Arrays; <nl> + import java.util.HashSet; <nl> + import java.util.Set; <nl> + private static final Set<String> SKIP_MESSAGES = new HashSet<String>(Arrays.asList("Connection timed out", "Connection reset by peer", "Broken pipe")); <nl> 
mmm RedisCommands.java <nl> ppp RedisCommands.java <nl> + RedisCommand<Object> SRANDMEMBER_SINGLE = new RedisCommand<Object>("SRANDMEMBER"); <nl> mmm RedissonSetTest.java <nl> ppp RedissonSetTest.java <nl> + @Test <nl> + public void testRandom() { <nl> + RSet<Integer> set = redisson.getSet("simple"); <nl> + set.add(1); <nl> 
mmm RedissonConcurrentMapTest.java <nl> ppp RedissonConcurrentMapTest.java <nl> - redisson.getKeys().flushdb(); <nl> + redisson.flushdb(); <nl> mmm RedissonLexSortedSetTest.java <nl> ppp RedissonLexSortedSetTest.java <nl> - import static org.assertj.core.api.Assertions.*; <nl> + import org.hamcrest.MatcherAssert; <nl> 
mmm RedissonMapCacheTest.java <nl> ppp RedissonMapCacheTest.java <nl> + @Test <nl> + public void testFastPutMaxSize() { <nl> + final int maxSize = 2; <nl> + Map<String, String> store = new LinkedHashMap<String, String>() { <nl> + @Override <nl> + protected boolean removeEldestEntry(Entry<String, String> eldest) { <nl> 
new file <nl> ppp RedissonClusterConnectionRenameTest.java <nl> + package org.redisson.spring.data.connection; <nl> + import org.junit.After; <nl> + import org.junit.AfterClass; <nl> + import org.junit.BeforeClass; <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> + import org.junit.runners.Parameterized; <nl> 
mmm RedissonSpringCacheTest.java <nl> ppp RedissonSpringCacheTest.java <nl> - import java.io.Closeable; <nl> - import org.junit.After; <nl> - import org.junit.Before; <nl> + import org.redisson.RedisRunner; <nl> - import org.redisson.client.codec.Codec; <nl> - import org.redisson.codec.JsonJacksonCodec; <nl> 
mmm RSetAsync.java <nl> ppp RSetAsync.java <nl> + Future<Integer> diffAsync(String... keys); <nl> + Future<Set<V>> readDiffAsync(String... keys); <nl> + Future<Integer> intersectionAsync(String... keys); <nl> + Future<Set<V>> readIntersectionAsync(String... keys); <nl> mmm RedissonSetTest.java <nl> ppp RedissonSetTest.java <nl> 
mmm RedissonBaseIterator.java <nl> ppp RedissonBaseIterator.java <nl> + finished = true; <nl> + return false; <nl> + } else if (lastValues.isEmpty() && res.getPos() == 0) { <nl> + if (tryAgain()) { <nl> + client = null; <nl> + firstValues = null; <nl> + nextIterPos = 0; <nl> + prevIterPos = -1; <nl> + continue; <nl> 
mmm SchemaGenerator.java <nl> ppp SchemaGenerator.java <nl> - import com.fasterxml.jackson.databind.DeserializationFeature; <nl> - private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper() <nl> - .enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS); <nl> + private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper(); <nl> 
mmm PropertyRule.java <nl> ppp PropertyRule.java <nl> + } else if ("time".equalsIgnoreCase(format)) { <nl> + ruleFactory.getAnnotator().timeField(field, node); <nl> mmm Jsonschema2PojoMojo.java <nl> ppp Jsonschema2PojoMojo.java <nl> + private boolean formatTimes = false; <nl> + private String customTimePattern; <nl> 
mmm ObjectRule.java <nl> ppp ObjectRule.java <nl> + import static java.lang.Character.*; <nl> - return capitalize(nodeName).replaceAll(ILLEGAL_CHARACTER_REGEX, "_"); <nl> + String className = capitalize(nodeName).replaceAll(ILLEGAL_CHARACTER_REGEX, "_"); <nl> + if (isDigit(className.charAt(0))) { <nl> + className = "_" + className; <nl> 
mmm SchemaStoreTest.java <nl> ppp SchemaStoreTest.java <nl> - Schema schema = new SchemaStore().create(schemaUri); <nl> + Schema schema = new SchemaStore().create(schemaUri, "#/."); <nl> - Schema addressSchema = schemaStore.create(addressSchemaUri); <nl> - Schema enumSchema = schemaStore.create(addressSchema, "enum.json"); <nl> 
mmm ExplorerView.java <nl> ppp ExplorerView.java <nl> + import android.support.design.widget.Snackbar; <nl> + import org.autojs.autojs.tool.Observers; <nl> + Explorers.Providers.workspace().resetSample(mSelectedItem.toScriptFile()) <nl> + .observeOn(AndroidSchedulers.mainThread()) <nl> + .subscribe(ignored -> { <nl> 
mmm AppUtils.java <nl> ppp AppUtils.java <nl> mmm ScriptRuntime.java <nl> ppp ScriptRuntime.java <nl> - import android.os.Handler; <nl> - public void stop() { <nl> + public void exit() { <nl> + @Deprecated <nl> + public void stop() { <nl> + exit(); <nl> + } <nl> - public void onStop() { <nl> - super.onStop(); <nl> 
mmm RunnableScriptExecution.java <nl> ppp RunnableScriptExecution.java <nl> - return doExecution(engine); <nl> + Object r = doExecution(engine); <nl> + getListener().onSuccess(this, r); <nl> + return r; <nl> - getListener().onSuccess(this, result); <nl> mmm NotificationListener.java <nl> ppp NotificationListener.java <nl> 
mmm LoadBalancerBuilder.java <nl> ppp LoadBalancerBuilder.java <nl> + import java.util.List; <nl> + import com.netflix.client.RetryHandler; <nl> - import java.util.List; <nl> + private RetryHandler errorHandler = RetryHandler.DEFAULT; <nl> + public LoadBalancerBuilder<T> withLoadBalancerExecutorRetryHandler(RetryHandler errorHandler) { <nl> 
mmm LoadBalancingTcpClient.java <nl> ppp LoadBalancingTcpClient.java <nl> - import rx.Subscription; <nl> - import io.reactivex.netty.client.ClientMetricsEvent; <nl> - import io.reactivex.netty.metrics.MetricEventsListener; <nl> - @Override <nl> - public Subscription subscribe( <nl> - MetricEventsListener<? extends ClientMetricsEvent<?>> listener) { <nl> 
mmm MethodTemplateExecutorTest.java <nl> ppp MethodTemplateExecutorTest.java <nl> - doTestPostWith("/binaries", "registerBinary", createMock(ByteBuf.class)); <nl> + doTestPostWith("/binaries/byteBuf", "registerByteBufBinary", createMock(ByteBuf.class)); <nl> + } <nl> + @Test <nl> + public void testPostWithByteArray() throws Exception { <nl> 
mmm NettyClientTest.java <nl> ppp NettyClientTest.java <nl> + import org.apache.log4j.Level; <nl> + import org.apache.log4j.LogManager; <nl> + import rx.functions.Action0; <nl> - @Test <nl> + @Ignore <nl> - @Test <nl> + @Ignore <nl> + }, new Action0() { <nl> + @Override <nl> + public void call() { <nl> + Thread.dumpStack(); <nl> 
mmm NettyHttpClient.java <nl> ppp NettyHttpClient.java <nl> + import io.reactivex.netty.client.ClientMetricsEvent; <nl> + import io.reactivex.netty.metrics.MetricEventsListener; <nl> + import io.reactivex.netty.servo.http.HttpClientListener; <nl> + import rx.Subscription; <nl> + HttpClientListener listener; <nl> 
mmm NettyHttpClient.java <nl> ppp NettyHttpClient.java <nl> + import io.reactivex.netty.client.ClientMetricsEvent; <nl> + import io.reactivex.netty.metrics.MetricEventsListener; <nl> + import io.reactivex.netty.pipeline.ssl.DefaultFactories; <nl> + import io.reactivex.netty.servo.http.HttpClientListener; <nl> 
new file <nl> ppp DemoJob.java <nl> + package com.evernote.android.job.demo; <nl> + import android.content.Context; <nl> + import android.os.Handler; <nl> + import android.os.Looper; <nl> + import android.os.SystemClock; <nl> + import android.support.annotation.NonNull; <nl> + import android.widget.Toast; <nl> 
mmm TestJob.java <nl> ppp TestJob.java <nl> + public static final String TAG = "TestJobTag"; <nl> mmm JobBootReceiver.java <nl> ppp JobBootReceiver.java <nl> - Set<JobRequest> requests = JobManager.instance(context).getAllJobRequests(); <nl> + Set<JobRequest> requests = JobManager.instance().getAllJobRequests(); <nl> 
mmm Device.java <nl> ppp Device.java <nl> + import android.support.annotation.NonNull; <nl> + import android.telephony.TelephonyManager; <nl> + @NonNull <nl> + TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE); <nl> + if (telephonyManager != null && telephonyManager.isNetworkRoaming()) { <nl> 
new file <nl> ppp MutableDoubleDataPoint.java <nl> + package net.opentsdb.core; <nl> + public final class MutableDoubleDataPoint implements DataPoint { <nl> + private long timestamp = Long.MAX_VALUE; <nl> + private double value = 0; <nl> + public void reset(final long timestamp, final double value) { <nl> + this.timestamp = timestamp; <nl> 
new file <nl> ppp TestBatchedDataPoints.java <nl> + package net.opentsdb.core; <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.junit.Assert.assertTrue; <nl> + import static org.junit.Assert.assertFalse; <nl> + import static org.mockito.Matchers.any; <nl> + import static org.mockito.Matchers.anyString; <nl> 
mmm OnSubscribeBroadcastRegister.java <nl> ppp OnSubscribeBroadcastRegister.java <nl> - class OperatorBroadcastRegister implements Observable.OnSubscribe<Intent> { <nl> + class OnSubscribeBroadcastRegister implements Observable.OnSubscribe<Intent> { <nl> - public OperatorBroadcastRegister(Context context, IntentFilter intentFilter, String broadcastPermission, Handler schedulerHandler) { <nl> 
mmm TestClassFinder.java <nl> ppp TestClassFinder.java <nl> + import org.hamcrest.MatcherAssert; <nl> - Assert.assertThat(findClassesThatExtend, CoreMatchers.hasItem(LoggingException.class.getName())); <nl> + MatcherAssert.assertThat(findClassesThatExtend, CoreMatchers.hasItem(LoggingException.class.getName())); <nl> 
mmm AbstractReportGui.java <nl> ppp AbstractReportGui.java <nl> + private static final long serialVersionUID = 240L; <nl> mmm HTMLReportWriter.java <nl> ppp HTMLReportWriter.java <nl> + private static final long serialVersionUID = 240L; <nl> mmm AbstractReportWriter.java <nl> ppp AbstractReportWriter.java <nl> 
mmm AbstractProperty.java <nl> ppp AbstractProperty.java <nl> - 	transient private boolean runningVersion = false; <nl> + 	private transient boolean runningVersion = false; <nl> mmm ResultCollector.java <nl> ppp ResultCollector.java <nl> - 	transient private DefaultConfigurationSerializer serializer; <nl> + 	private transient DefaultConfigurationSerializer serializer; <nl> 
new file <nl> ppp TestSwitchController.java <nl> + package org.apache.jmeter.control; <nl> + import org.apache.jmeter.junit.JMeterTestCase; <nl> + import org.apache.jmeter.junit.stubs.TestSampler; <nl> + import org.apache.jmeter.samplers.Sampler; <nl> + import org.apache.jmeter.testelement.TestElement; <nl> 
mmm NewDriver.java <nl> ppp NewDriver.java <nl> - Object instance = initialClass.newInstance(); <nl> + Object instance = initialClass.getDeclaredConstructor().newInstance(); <nl> mmm GraphiteBackendListenerClient.java <nl> ppp GraphiteBackendListenerClient.java <nl> - this.graphiteMetricsManager = (GraphiteMetricsSender) clazz.newInstance(); <nl> 
mmm TimeFunction.java <nl> ppp TimeFunction.java <nl> + @SuppressWarnings("JdkObsolete") <nl> mmm CSVSaveService.java <nl> ppp CSVSaveService.java <nl> + @SuppressWarnings("JdkObsolete") <nl> + @SuppressWarnings("JdkObsolete") <nl> mmm BaseJMSSampler.java <nl> ppp BaseJMSSampler.java <nl> + @SuppressWarnings("JdkObsolete") <nl> 
new file <nl> ppp ItemService.java <nl> + package com.ctrip.apollo.biz.service; <nl> + import org.springframework.beans.factory.annotation.Autowired; <nl> + import org.springframework.stereotype.Service; <nl> + import com.ctrip.apollo.biz.entity.Item; <nl> + import com.ctrip.apollo.biz.repository.ItemRepository; <nl> 
mmm ConfigUtil.java <nl> ppp ConfigUtil.java <nl> + public String getDataCenter() { <nl> + return Foundation.server().getDataCenter(); <nl> + } <nl> - this.m_namespace = namespace; <nl> - this.m_changes = changes; <nl> + m_namespace = namespace; <nl> + m_changes = changes; <nl> + private List<Env> missEnvs; <nl> 
new file <nl> ppp DefaultServerProviderTest.java <nl> + package com.ctrip.framework.apollo.foundation.internals.provider; <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.junit.Assert.assertFalse; <nl> + import static org.junit.Assert.assertNull; <nl> + import static org.junit.Assert.assertTrue; <nl> 
new file <nl> ppp ApolloApplicationContextInitializerTest.java <nl> + package com.ctrip.framework.apollo.spring.boot; <nl> + import static org.junit.Assert.*; <nl> + import static org.mockito.Mockito.mock; <nl> + import static org.mockito.Mockito.when; <nl> + import com.ctrip.framework.apollo.core.ConfigConsts; <nl> 
mmm ApolloConfigNotification.java <nl> ppp ApolloConfigNotification.java <nl> + private long notificationId; <nl> - public ApolloConfigNotification(String namespaceName) { <nl> + public ApolloConfigNotification(String namespaceName, long notificationId) { <nl> + this.notificationId = notificationId; <nl> - public void setNamespaceName(String namespaceName) { <nl> 
mmm ApolloConfigManagerTest.java <nl> ppp ApolloConfigManagerTest.java <nl> + import org.springframework.beans.factory.config.BeanDefinition; <nl> + import org.springframework.beans.factory.support.BeanDefinitionRegistry; <nl> + @Mock <nl> + private BeanDefinitionRegistry beanDefinitionRegistry; <nl> - apolloConfigManager = new ApolloConfigManager(); <nl> 
mmm Namespace.java <nl> ppp Namespace.java <nl> - import javax.persistence.Table; <nl> - @Table(name = "Namespace") <nl> - @Column(name = "appId", nullable = false) <nl> + @Column(nullable = false) <nl> - @Column(name = "ClusterName", nullable = false) <nl> + @Column(nullable = false) <nl> - @Column(name = "NamespaceName", nullable = false) <nl> 
mmm ReleaseKeyGeneratorTest.java <nl> ppp ReleaseKeyGeneratorTest.java <nl> + import com.ctrip.framework.apollo.biz.MockBeanFactory; <nl> - Namespace namespace = assembleNamespace(someAppId, someCluster, someNamespace); <nl> - Namespace anotherNamespace = assembleNamespace(anotherAppId, someCluster, someNamespace); <nl> 
mmm AdminServiceTest.java <nl> ppp AdminServiceTest.java <nl> + import java.util.Date; <nl> - String appName = "someAppName"; <nl> - String ownerName = "someOwnerName"; <nl> - String ownerEmail = "someOwnerName@ctrip.com"; <nl> - String namespace = "someNamespace"; <nl> - App app = adminService.createNewApp(appId, appName, ownerName, ownerEmail, namespace); <nl> 
deleted file <nl> mmm JsonSerialisationTest.java <nl> - package net.officefloor.performance; <nl> - import org.apache.http.HttpResponse; <nl> - import org.apache.http.client.methods.HttpGet; <nl> - import org.apache.http.impl.client.CloseableHttpClient; <nl> - public class JsonSerialisationTest extends AbstractTestCase { <nl> 
new file <nl> ppp DbController.java <nl> + package app.controllers; <nl> + import app.models.World; <nl> + import java.io.IOException; <nl> + import org.javalite.activeweb.AppController; <nl> + import java.util.concurrent.ThreadLocalRandom; <nl> + public class DbController extends AppController { <nl> + public void index() { <nl> 
mmm MongoManaged.java <nl> ppp MongoManaged.java <nl> - package com.example.helloworld.db.mongo; <nl> - import com.mongodb.MongoClient; <nl> - import io.dropwizard.lifecycle.Managed; <nl> + package com.example.helloworld.db; <nl> + import com.mongodb.Mongo; <nl> + import com.yammer.dropwizard.lifecycle.Managed; <nl> 
mmm Application.java <nl> ppp Application.java <nl> - public static Result json() { <nl> + public Result json() { <nl> - public static Result plainText() { <nl> + public Result plainText() { <nl> mmm World.java <nl> ppp World.java <nl> - return JPA.withTransaction("default", true, new play.libs.F.Function0<World>() { <nl> 
deleted file <nl> mmm ApplicationTest.java <nl> - package sabina.benchmark; <nl> - import static org.apache.http.client.fluent.Request.Get; <nl> - import java.io.IOException; <nl> - import java.io.InputStream; <nl> - import java.util.List; <nl> - import java.util.Map; <nl> - import java.util.Scanner; <nl> - import com.google.gson.Gson; <nl> 
mmm HelloDbUpdatesResource.java <nl> ppp HelloDbUpdatesResource.java <nl> + import org.apache.wicket.request.http.WebResponse; <nl> + import org.apache.wicket.request.resource.AbstractResource; <nl> + import javax.sql.DataSource; <nl> - import javax.sql.DataSource; <nl> - import org.apache.wicket.request.resource.AbstractResource; <nl> 
new file <nl> ppp HelloMongoService.java <nl> + package com.example.helloworld; <nl> + import com.example.helloworld.config.HelloMongoConfiguration; <nl> + import com.example.helloworld.db.model.Fortune; <nl> + import com.example.helloworld.db.model.World; <nl> + import com.example.helloworld.db.mongo.FortuneMongoImpl; <nl> 
mmm WebServer.java <nl> ppp WebServer.java <nl> - import java.nio.charset.*; <nl> - import java.text.DateFormat; <nl> - import java.text.SimpleDateFormat; <nl> - import java.util.*; <nl> - import java.util.concurrent.ThreadLocalRandom; <nl> - import org.vertx.java.core.json.JsonObject; <nl> + import org.vertx.java.core.json.JsonObject; <nl> 
mmm QueriesServlet.java <nl> ppp QueriesServlet.java <nl> - 		final World[] worlds = ctx.loadWorlds(count); <nl> + 		final World[] worlds = ctx.loadWorldsSlow(count); <nl> new file <nl> ppp PlaintextAndJsonServer.java <nl> + package lowlevel; <nl> + import common.Message; <nl> + import org.rapidoid.buffer.Buf; <nl> 
new file <nl> ppp Main.java <nl> + package highlevel; <nl> + import common.Helper; <nl> + import common.Message; <nl> + import org.rapidoid.config.Conf; <nl> + import org.rapidoid.http.MediaType; <nl> + import org.rapidoid.log.Log; <nl> + import org.rapidoid.setup.App; <nl> + import org.rapidoid.setup.On; <nl> 
deleted file <nl> mmm LoggerProducer.java <nl> - package com.techempower.ee7.util; <nl> - import javax.enterprise.inject.Produces; <nl> - import javax.enterprise.inject.spi.InjectionPoint; <nl> - import org.jboss.logging.Logger; <nl> - public class LoggerProducer { <nl> - @Produces <nl> - Logger produceLog(InjectionPoint injectionPoint) { <nl> 
new file <nl> ppp HelloWebServer.java <nl> + package hello; <nl> + import java.net.URI; <nl> + import javax.ws.rs.core.UriBuilder; <nl> + import com.sun.jersey.api.container.grizzly2.GrizzlyServerFactory; <nl> + import com.sun.jersey.api.core.PackagesResourceConfig; <nl> + import com.sun.jersey.api.core.ResourceConfig; <nl> 
mmm DbServlet.java <nl> ppp DbServlet.java <nl> - 		final Optional<World> world = ctx.repository.find(ctx.getRandom10k(), ctx.connection); <nl> + 		final Optional<World> world = ctx.worlds.find(ctx.getRandom10k(), ctx.connection); <nl> new file <nl> ppp JsonServlet.java <nl> + package hello; <nl> + import co.paralleluniverse.fibers.Suspendable; <nl> 
mmm HelloWebServer.java <nl> ppp HelloWebServer.java <nl> + import com.github.mustachejava.Mustache; <nl> + import com.mongodb.BasicDBObject; <nl> + import com.mongodb.DBCursor; <nl> + import com.mongodb.DBObject; <nl> + import io.undertow.server.HttpHandler; <nl> + import io.undertow.server.HttpServerExchange; <nl> 
new file <nl> ppp MultipleDatabaseQueriesTest.java <nl> + package net.officefloor.performance; <nl> + import org.apache.http.HttpResponse; <nl> + import org.apache.http.client.methods.HttpGet; <nl> + import org.apache.http.impl.client.CloseableHttpClient; <nl> + import org.apache.http.util.EntityUtils; <nl> 
new file <nl> ppp WorldResource.java <nl> + package com.example.helloworld.resources; <nl> + import java.util.Random; <nl> + import javax.ws.rs.GET; <nl> + import javax.ws.rs.Path; <nl> + import javax.ws.rs.Produces; <nl> + import javax.ws.rs.QueryParam; <nl> + import javax.ws.rs.core.MediaType; <nl> + import com.example.helloworld.core.World; <nl> 
mmm World.java <nl> ppp World.java <nl> - package com.techempower.act.sql.domain; <nl> - import act.data.annotation.Data; <nl> - import com.techempower.act.domain.IWorld; <nl> + package com.techempower.act.model; <nl> + import act.sys.Env; <nl> + import act.util.SimpleBean; <nl> + import com.techempower.act.AppEntry; <nl> 
deleted file <nl> mmm Helper.java <nl> - package hello; <nl> - import io.undertow.server.HttpServerExchange; <nl> - import org.apache.commons.dbcp.ConnectionFactory; <nl> - import org.apache.commons.dbcp.DriverManagerConnectionFactory; <nl> - import org.apache.commons.dbcp.PoolableConnectionFactory; <nl> - import org.apache.commons.dbcp.PoolingDataSource; <nl> 
mmm QueriesController.java <nl> ppp QueriesController.java <nl> - import org.javalite.activeweb.AppController; <nl> - import java.util.Date; <nl> - import java.util.LinkedList; <nl> - import java.util.concurrent.ThreadLocalRandom; <nl> - public class QueriesController extends AppController { <nl> - public void index() { <nl> 
new file <nl> ppp World.java <nl> + package app.models; <nl> + public class World { <nl> + public int id; <nl> + public int randomNumber; <nl> + public World(int i , int r) { <nl> + id = i; <nl> + randomNumber = r; <nl> + } <nl> + } <nl> new file <nl> ppp SimpleHttpProtocol.java <nl> + package hello; <nl> + import org.rapidoid.buffer.Buf; <nl> 
deleted file <nl> mmm WorldControllerBase.java <nl> - package com.techempower.act.controller; <nl> - import act.app.conf.AutoConfig; <nl> - import act.controller.Controller; <nl> - import act.db.Dao; <nl> - import com.techempower.act.domain.IWorld; <nl> - import org.osgl.$; <nl> - import org.osgl.mvc.annotation.GetAction; <nl> 
mmm UpdatesServlet.java <nl> ppp UpdatesServlet.java <nl> - package hello; <nl> - import com.dslplatform.json.JsonWriter; <nl> - import dsl.FrameworkBench.World; <nl> - import javax.servlet.ServletException; <nl> - import javax.servlet.http.*; <nl> - import java.io.IOException; <nl> - import java.util.*; <nl> 
deleted file <nl> mmm DbMongoHandler.java <nl> - package hello; <nl> - import com.fasterxml.jackson.databind.ObjectMapper; <nl> - import com.mongodb.BasicDBObject; <nl> - import com.mongodb.DB; <nl> - import com.mongodb.DBObject; <nl> - import io.undertow.server.HttpHandler; <nl> - import io.undertow.server.HttpServerExchange; <nl> 
deleted file <nl> mmm PlaintextServlet.java <nl> - package fi.markoa.tfb.servlet3; <nl> - import org.slf4j.Logger; <nl> - import org.slf4j.LoggerFactory; <nl> - import javax.servlet.ServletException; <nl> - import javax.servlet.annotation.WebServlet; <nl> - import javax.servlet.http.HttpServlet; <nl> - import javax.servlet.http.HttpServletRequest; <nl> 
mmm GhStore.java <nl> ppp GhStore.java <nl> + import com.techempower.gemini.cluster.client.handler.*; <nl> - @SuppressWarnings("serial") <nl> - public class FortunesServlet extends HttpServlet <nl> - { <nl> - private static final String DB_QUERY = "SELECT * FROM Fortune"; <nl> - @Resource(name="jdbc/hello_world") <nl> 
deleted file <nl> mmm FortunesLogic.java <nl> - package net.officefloor.performance.logic; <nl> - import java.util.Arrays; <nl> - import java.util.Comparator; <nl> - import java.util.List; <nl> - import javax.persistence.EntityManager; <nl> - import lombok.Data; <nl> - import net.officefloor.performance.entities.Fortune; <nl> 
mmm HeapTest.java <nl> ppp HeapTest.java <nl> - Utils.handleError(heap); <nl> + Utils.handleError(sorted,heap); <nl> - Utils.handleError(heap); <nl> + Utils.handleError(sorted,heap); <nl> - Utils.handleError(heap); <nl> + Utils.handleError(_invalid,heap); <nl> - Utils.handleError(heap); <nl> + Utils.handleError(unsorted,heap); <nl> 
deleted file <nl> mmm ProgressiveServiceAbstract.java <nl> - package com.amaze.filemanager.asynchronous.services; <nl> - import android.app.NotificationManager; <nl> - import android.app.PendingIntent; <nl> - import android.app.Service; <nl> - import android.content.Context; <nl> - import android.content.Intent; <nl> 
mmm RarExtractor.java <nl> ppp RarExtractor.java <nl> - outputStream.write(buf, 0, len); <nl> - ServiceWatcherUtil.position += len; <nl> + if (!listener.isCancelled()) { <nl> + outputStream.write(buf, 0, len); <nl> + ServiceWatcherUtil.position += len; <nl> + } else break; <nl> mmm TextEditorActivityTest.java <nl> 
mmm ProgressHandler.java <nl> ppp ProgressHandler.java <nl> + public ProgressHandler() { <nl> + this.sourceFiles = 0; <nl> + this.totalSize = 0; <nl> + } <nl> - public class EncryptService extends ProgressiveService { <nl> + public class EncryptService extends ProgressiveServiceAbstract { <nl> - private ProgressHandler progressHandler; <nl> 
mmm SortHandler.java <nl> ppp SortHandler.java <nl> - AppConfig.getInstance().runInBackground(() -> database.sortDao().insert(sort)); <nl> + AppConfig.runInBackground(() -> database.sortDao().insert(sort)); <nl> - AppConfig.getInstance().runInBackground(() -> database.sortDao().clear(path)); <nl> + AppConfig.runInBackground(() -> database.sortDao().clear(path)); <nl> 
mmm FTPService.java <nl> ppp FTPService.java <nl> + public static final String KEY_PREFERENCE_PATH = "ftp_path"; <nl> + public static final String DEFAULT_PATH = Environment.getExternalStorageDirectory().getAbsolutePath(); <nl> + public static String getDefaultPathFromPreferences(SharedPreferences preferences) { <nl> 
mmm AbstractProgressiveService.java <nl> ppp AbstractProgressiveService.java <nl> - context = getApplicationContext(); <nl> mmm LoadFilesListTask.java <nl> ppp LoadFilesListTask.java <nl> - ArrayList<LayoutElementParcelable> images = new ArrayList<>(); <nl> + ArrayList<LayoutElementParcelable> songs = new ArrayList<>(); <nl> 
mmm TarExtractor.java <nl> ppp TarExtractor.java <nl> - unzipTAREntry(context, inputStream, entry, outputPath); <nl> + extractEntry(context, inputStream, entry, outputPath); <nl> - private void unzipTAREntry(@NonNull final Context context, TarArchiveInputStream inputStream, <nl> - TarArchiveEntry entry, String outputDir) throws IOException { <nl> 
mmm Drawer.java <nl> ppp Drawer.java <nl> + import com.amaze.filemanager.utils.Billing; <nl> + import android.widget.TextView; <nl> + private ImageView donateImageView; <nl> + private ImageView telegramImageView; <nl> + private TextView appVersion; <nl> + private Billing billing; <nl> - drawerHeaderView.setOnLongClickListener( <nl> 
mmm GenericCopyUtil.java <nl> ppp GenericCopyUtil.java <nl> + import com.amaze.filemanager.utils.ProgressHandler; <nl> + private ProgressHandler progressHandler; <nl> - public GenericCopyUtil(Context context) { <nl> + public GenericCopyUtil(Context context, ProgressHandler progressHandler) { <nl> + this.progressHandler = progressHandler; <nl> 
new file <nl> ppp DatabaseContract.java <nl> + package com.amaze.filemanager.utils.provider; <nl> + public class DatabaseContract { <nl> + public static final String APP_PACKAGE_NAME = "com.filemanager.amazecloud"; <nl> + public static final String PROVIDER_AUTHORITY = "com.amaze.cloud.provider"; <nl> + public static final String PERMISSION_PROVIDER = "com.amaze.cloud.permission.ACCESS_PROVIDER"; <nl> 
mmm UtilsHandler.java <nl> ppp UtilsHandler.java <nl> - import android.net.Uri; <nl> mmm SshConnectionPoolTest.java <nl> ppp SshConnectionPoolTest.java <nl> - import android.support.annotation.NonNull; <nl> - import android.support.annotation.Nullable; <nl> - import android.util.Base64; <nl> - import com.amaze.filemanager.database.UtilsHandler; <nl> 
mmm SshConnectionPool.java <nl> ppp SshConnectionPool.java <nl> - private static final String TAG = "SshConnectionPool"; <nl> + private static final String TAG = SshConnectionPool.class.getSimpleName(); <nl> - private SSHClient create(@NonNull String url) { <nl> - return create(Uri.parse(url)); <nl> - } <nl> 
mmm LoadList.java <nl> ppp LoadList.java <nl> + import com.amaze.filemanager.database.CloudEntry; <nl> + import com.amaze.filemanager.exceptions.CloudPluginException; <nl> + import com.amaze.filemanager.fragments.CloudSheetFragment; <nl> + import com.amaze.filemanager.utils.CloudUtil; <nl> + import com.cloudrail.si.exceptions.ParseException; <nl> 
mmm SevenZipExtractor.java <nl> ppp SevenZipExtractor.java <nl> + import android.support.annotation.Nullable; <nl> - public SevenZipExtractor(Context context, String filePath, String outputPath, OnUpdate listener) { <nl> - super(context, filePath, outputPath, listener); <nl> + public SevenZipExtractor(@NonNull Context context, @NonNull String filePath, @NonNull String outputPath, @NonNull OnUpdate listener, @Nullable String password) { <nl> 
mmm MainActivityHelper.java <nl> ppp MainActivityHelper.java <nl> - decompressor.decompress(file.getPath()); <nl> + decompressor.decompress(null); <nl> mmm ProgressHandler.java <nl> ppp ProgressHandler.java <nl> + public ProgressHandler() { <nl> + this.sourceFiles = 0; <nl> + this.totalSize = 0; <nl> + } <nl> 
mmm AmazeFileManagerModule.java <nl> ppp AmazeFileManagerModule.java <nl> - import com.amaze.filemanager.utils.glide.InputStreamModelFactory; <nl> - import java.io.InputStream; <nl> - registry.prepend(InputStream.class, InputStream.class, new InputStreamModelFactory()); <nl> deleted file <nl> mmm InputStreamDataFetcher.java <nl> 
new file <nl> ppp HiddenViewHolder.java <nl> + package com.amaze.filemanager.adapters.holders; <nl> + import android.support.v7.widget.RecyclerView; <nl> + import android.view.View; <nl> + import android.widget.ImageButton; <nl> + import android.widget.LinearLayout; <nl> + import android.widget.TextView; <nl> 
mmm MainActivityHelper.java <nl> ppp MainActivityHelper.java <nl> - import android.widget.EditText; <nl> + import com.afollestad.materialdialogs.DialogAction; <nl> - import com.amaze.filemanager.ui.views.WarnableTextInputValidator; <nl> - mk(R.string.newfolder, "", (dialog, which) -> { <nl> - EditText textfield = dialog.getCustomView().findViewById(R.id.singleedittext_input); <nl> 
mmm HybridFileParcelable.java <nl> ppp HybridFileParcelable.java <nl> + @Override <nl> + public String toString() { <nl> + return new StringBuilder("HybridFileParcelable, path=[").append(path).append(']') <nl> + .append(", name=[").append(name).append(']') <nl> + .append(", size=[").append(size).append(']') <nl> 
mmm MainFragment.java <nl> ppp MainFragment.java <nl> - getMainActivity().getDrawer().lock(DrawerLayout.LOCK_MODE_LOCKED_CLOSED); <nl> + getMainActivity().getDrawer().lock(DrawerLayout.LOCK_MODE_UNDEFINED); <nl> mmm RootUtils.java <nl> ppp RootUtils.java <nl> - import java.util.Arrays; <nl> - import java.util.List; <nl> 
mmm Main.java <nl> ppp Main.java <nl> - import android.graphics.ColorMatrix; <nl> - import android.graphics.ColorMatrixColorFilter; <nl> + import com.amaze.filemanager.utils.color.ColorUsage; <nl> - import java.util.Calendar; <nl> - public String home, CURRENT_PATH = "", year, goback; <nl> + public String home, CURRENT_PATH = "", goback; <nl> 
mmm LoadFilesListTask.java <nl> ppp LoadFilesListTask.java <nl> + case SFTP: <nl> + HybridFile sftpHFile = new HybridFile(OpenMode.SFTP, path); <nl> + list = new ArrayList<LayoutElementParcelable>(); <nl> + sftpHFile.forEachChildrenFile(c, false, file -> { <nl> + LayoutElementParcelable elem = createListParcelables(file); <nl> 
mmm BuilderSingularWildcardListsWithToBuilderWithSetterPrefix.java <nl> ppp BuilderSingularWildcardListsWithToBuilderWithSetterPrefix.java <nl> - class BuilderSingularWildcardListsWithToBuilder { <nl> + class BuilderSingularWildcardListsWithToBuilderWithSetterPrefix { <nl> mmm BuilderSingularGuavaMapsWithPrefix.java <nl> 
mmm BuilderSingularWithPrefixesWithSetterPrefix.java <nl> ppp BuilderSingularWithPrefixesWithSetterPrefix.java <nl> - @lombok.Builder(setterPrefix = "with") @lombok.experimental.Accessors(prefix = "_") class BuilderSingularWithPrefixes { <nl> - public static @java.lang.SuppressWarnings("all") class BuilderSingularWithPrefixesBuilder { <nl> 
new file <nl> ppp BuilderSingularToBuilderWithNullWithSetterPrefix.java <nl> + import lombok.Singular; <nl> + @lombok.Builder(toBuilder = true, setterPrefix = "with") <nl> + class BuilderSingularToBuilderWithNull { <nl> + 	@Singular private java.util.List<String> elems; <nl> + 	 <nl> + 	public static void test() { <nl> 
new file <nl> ppp VarInForOld.java <nl> + import lombok.experimental.var; <nl> + public class VarInForOld { <nl> + 	public void oldFor() { <nl> + 		for (var i = 0; i < 100; ++i) { <nl> + 			System.out.println(i); <nl> + 		} <nl> + 	} <nl> + }deleted file <nl> mmm MyEclipseLocationProvider.java <nl> - package lombok.installer.eclipse; <nl> 
mmm Generated.java <nl> ppp Generated.java <nl> - * later on. By adding {@code lombok.addLombokGeneratedAnnotation = true} to {@code lombok.config} you can already <nl> - * get this behavior. <nl> + * later on. <nl> mmm JavacSingularsRecipes.java <nl> ppp JavacSingularsRecipes.java <nl> - 		public void generateMethods(SingularData data, boolean deprecate, final JavacNode builderType, JCTree source, boolean fluent, final boolean chain) { <nl> 
mmm HandlerUtil.java <nl> ppp HandlerUtil.java <nl> - import java.util.regex.Matcher; <nl> - 	 <nl> - 	private static final Pattern SECTION_FINDER = Pattern.compile("^\\s*\\**\\s*[-*][-*]+\\s*([GS]ETTER|WITH(?:ER)?)\\s*[-*][-*]+\\s*\\**\\s*$", Pattern.MULTILINE | Pattern.CASE_INSENSITIVE); <nl> - 	private static final Pattern LINE_BREAK_FINDER = Pattern.compile("(\\r?\\n)?"); <nl> 
mmm HandleConstructor.java <nl> ppp HandleConstructor.java <nl> - 	private static final char[][] JAVA_BEANS_CONSTRUCTORPROPERTIES = new char[][] { "java".toCharArray(), "beans".toCharArray(), "ConstructorProperties".toCharArray() }; <nl> + 	public static final char[][] JAVA_BEANS_CONSTRUCTORPROPERTIES = new char[][] { "java".toCharArray(), "beans".toCharArray(), "ConstructorProperties".toCharArray() }; <nl> 
mmm SpiLoadUtil.java <nl> ppp SpiLoadUtil.java <nl> - 		BufferedReader r = null; <nl> - 			r = new BufferedReader(new InputStreamReader(in, "UTF-8")); <nl> + 			BufferedReader r = new BufferedReader(new InputStreamReader(in, "UTF-8")); <nl> - 				if (r != null) r.close(); <nl> mmm RunTestsViaEcj.java <nl> ppp RunTestsViaEcj.java <nl> 
mmm FormDataParserTestCase.java <nl> ppp FormDataParserTestCase.java <nl> - import java.util.HashMap; <nl> - import java.util.Map; <nl> - import org.apache.http.Header; <nl> - exchange.getResponseHeaders().add(new HttpString("res"), fd + ":" + val.getValue()); <nl> + exchange.getResponseHeaders().add(new HttpString(fd), val.getValue()); <nl> 
mmm WebSocket00TextFrameSourceChannel.java <nl> ppp WebSocket00TextFrameSourceChannel.java <nl> - if (buf.get(pos) == END_FRAME_MARKER) { <nl> - complete = true; <nl> - buf.position(pos + 1); <nl> - return -1; <nl> - } <nl> + if (buf.get(pos) == END_FRAME_MARKER) { <nl> + complete = true; <nl> + buf.position(pos + 1); <nl> 
mmm DefaultServer.java <nl> ppp DefaultServer.java <nl> + import io.undertow.protocols.ssl.UndertowXnioSsl; <nl> - import org.xnio.ssl.JsseXnioSsl; <nl> - public static final int BUFFER_SIZE = Integer.getInteger("test.bufferSize", 8192); <nl> + public static final int BUFFER_SIZE = Integer.getInteger("test.bufferSize", 8192 * 3); <nl> 
mmm CookieAttribute.java <nl> ppp CookieAttribute.java <nl> - if (token.startsWith("%{") && token.endsWith("}c")) { <nl> - final String cookieName = token.substring(2, token.length() - 2); <nl> + if (token.startsWith("%{c,") && token.endsWith("}")) { <nl> + final String cookieName = token.substring(4, token.length() - 1); <nl> 
mmm SessionAttachmentHandler.java <nl> ppp SessionAttachmentHandler.java <nl> + import io.undertow.UndertowLogger; <nl> + import io.undertow.UndertowMessages; <nl> - import io.undertow.TexugoLogger; <nl> - import io.undertow.TexugoMessages; <nl> - throw TexugoMessages.MESSAGES.sessionManagerMustNotBeNull(); <nl> 
mmm FileErrorPageHandlerTestCase.java <nl> ppp FileErrorPageHandlerTestCase.java <nl> - import io.undertow.test.util.DefaultServer; <nl> - import io.undertow.test.util.HttpClientUtils; <nl> + import io.undertow.test.shared.DefaultServer; <nl> + import io.undertow.test.shared.HttpClientUtils; <nl> mmm DefaultServer.java <nl> 
new file <nl> ppp EncodingEndpoint.java <nl> + package io.undertow.websockets.jsr.test.annotated; <nl> + import javax.websocket.OnMessage; <nl> + import javax.websocket.server.PathParam; <nl> + import javax.websocket.server.ServerEndpoint; <nl> + @ServerEndpoint(value = "/encoding/{user}", encoders = EncodableObject.Encoder.class, decoders = EncodableObject.Decoder.class) <nl> 
mmm HttpClientProvider.java <nl> ppp HttpClientProvider.java <nl> + import io.undertow.client.ALPNClientSelector; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> - private static final String PROTOCOL_KEY = AlpnOpenListener.class.getName() + ".protocol"; <nl> - private final ByteBufferPool bufferPool; <nl> 
new file <nl> ppp SyncServerImpl.java <nl> + package io.objectbox.sync.server; <nl> + import io.objectbox.InternalAccess; <nl> + import io.objectbox.annotation.apihint.Internal; <nl> + import io.objectbox.sync.SyncChangesListener; <nl> + import io.objectbox.sync.SyncCredentials; <nl> + import io.objectbox.sync.SyncCredentialsToken; <nl> 
mmm ObfuscatedEntityCursor.java <nl> ppp ObfuscatedEntityCursor.java <nl> - import io.objectbox.Properties; <nl> - import io.objectbox.annotation.apihint.Temporary; <nl> mmm Order_.java <nl> ppp Order_.java <nl> - import io.objectbox.Properties; <nl> + import io.objectbox.EntityInfo; <nl> - public class Order_ implements Properties<Order> { <nl> 
deleted file <nl> mmm SyncChange.java <nl> - package io.objectbox.sync; <nl> - @SuppressWarnings({"unused", "WeakerAccess"}) <nl> - public class SyncChange { <nl> - final long entityTypeId; <nl> - final long[] changedIds; <nl> - final long[] removedIds; <nl> - public SyncChange(long entityTypeId, long[] changedIds, long[] removedIds) { <nl> 
new file <nl> ppp SyncChangesListener.java <nl> + package io.objectbox.sync; <nl> + import io.objectbox.annotation.apihint.Experimental; <nl> + @SuppressWarnings({"unused"}) <nl> + @Experimental <nl> + public interface SyncChangesListener { <nl> + void onSyncChanges(SyncChange[] syncChanges); <nl> + } <nl> new file <nl> 
mmm MappedStatement.java <nl> ppp MappedStatement.java <nl> + private String[] resultSets; <nl> + public Builder resulSets(String resultSet) { <nl> + mappedStatement.resultSets = delimitedStringtoArray(resultSet); <nl> + return this; <nl> + } <nl> + public String[] getResulSets() { <nl> + return resultSets; <nl> 
new file <nl> ppp HostUnauthorizedExceptionTest.java <nl> + package org.jsecurity.authz; <nl> + import org.jsecurity.ExceptionTest; <nl> + public class HostUnauthorizedExceptionTest extends ExceptionTest { <nl> + protected Class getExceptionClass() { <nl> + return HostUnauthorizedException.class; <nl> + } <nl> 
new file <nl> ppp FilterStub.java <nl> + package org.apache.shiro.web.env; <nl> + import javax.servlet.Filter; <nl> + import javax.servlet.FilterChain; <nl> + import javax.servlet.FilterConfig; <nl> + import javax.servlet.ServletException; <nl> + import javax.servlet.ServletRequest; <nl> + import javax.servlet.ServletResponse; <nl> 
deleted file <nl> mmm ShiroRequestMappingConfig.java <nl> - package org.apache.shiro.spring.web.config; <nl> - import org.apache.shiro.spring.web.ShiroUrlPathHelper; <nl> - import org.springframework.context.annotation.Configuration; <nl> - import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping; <nl> 
mmm AppVariantOutputContext.java <nl> ppp AppVariantOutputContext.java <nl> + import java.io.File; <nl> + import java.util.ArrayList; <nl> + import java.util.HashMap; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import java.util.Set; <nl> - import java.io.File; <nl> - import java.util.ArrayList; <nl> 
mmm InstrumentationHook.java <nl> ppp InstrumentationHook.java <nl> - import android.taobao.atlas.util.log.impl.AtlasMonitor; <nl> - 		if(!TextUtils.isEmpty(bundleName)){ <nl> + 		if(!TextUtils.isEmpty(bundleName) && !Atlas.isDisableBundle(bundleName)){ <nl> - 						if(dialog.isShowing()) <nl> + 						if(dialog.isShowing()) { <nl> 
new file <nl> ppp Attribute.java <nl> + package android.content.res.chunk.types; <nl> + import android.content.res.IntReader; <nl> + import android.content.res.chunk.AttributeType; <nl> + import android.content.res.chunk.ChunkType; <nl> + import android.content.res.chunk.sections.ResourceSection; <nl> + import android.content.res.chunk.sections.StringSection; <nl> 
deleted file <nl> mmm StubbingComparator.java <nl> - package org.mockito.internal.stubbing; <nl> - import org.mockito.internal.invocation.InvocationComparator; <nl> - import org.mockito.internal.invocation.Stubbing; <nl> - import java.util.Comparator; <nl> - public class StubbingComparator implements Comparator<Stubbing> { <nl> 
mmm InvocationsFinderStub.java <nl> ppp InvocationsFinderStub.java <nl> + import org.mockito.verification.VerificationMode; <nl> mmm MockitoVerificationMode.java <nl> ppp MockitoVerificationMode.java <nl> + import org.mockito.verification.VerificationMode; <nl> - package org.mockito.internal.verification; <nl> 
mmm VerificationOverTimeImplTest.java <nl> ppp VerificationOverTimeImplTest.java <nl> - import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent; <nl> + import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent; <nl> mmm VarargsTest.java <nl> ppp VarargsTest.java <nl> - import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent; <nl> 
mmm BridgeMethodsHitAgainTest.java <nl> ppp BridgeMethodsHitAgainTest.java <nl> - import org.junit.Before; <nl> + import org.junit.Ignore; <nl> - import org.mockito.MockitoAnnotations; <nl> + import java.io.Serializable; <nl> + public interface Base<T extends Serializable> { <nl> + int test(T value); <nl> + } <nl> 
mmm StubbingWithCustomAnswerTest.java <nl> ppp StubbingWithCustomAnswerTest.java <nl> - public void shoudAnswerVoidMethod() throws Exception { <nl> + public void shouldAnswerVoidMethod() throws Exception { <nl> mmm AtLeastXVerificationTest.java <nl> ppp AtLeastXVerificationTest.java <nl> - public void shouldFailVerifiationAtLeastXTimes() throws Exception { <nl> 
new file <nl> ppp VoidAnswer4.java <nl> + package org.mockito.stubbing; <nl> + import org.mockito.Incubating; <nl> + @Incubating <nl> + public interface VoidAnswer4<A, B, C, D> { <nl> + void answer(A a, B b, C c, D d); <nl> + } <nl> mmm AdditionalAnswers.java <nl> ppp AdditionalAnswers.java <nl> - import org.mockito.internal.stubbing.answers.AnswerFunctionalInterfaces; <nl> 
mmm Times.java <nl> ppp Times.java <nl> - missingInvocation.verify(data.getAllInvocations(), data.getWanted()); <nl> + missingInvocation.check(data.getAllInvocations(), data.getWanted()); <nl> - numberOfInvocations.verify(data.getAllInvocations(), data.getWanted(), wantedCount); <nl> + numberOfInvocations.check(data.getAllInvocations(), data.getWanted(), wantedCount); <nl> 
mmm Invocation.java <nl> ppp Invocation.java <nl> - private int sequenceNumber; <nl> + private final int sequenceNumber; <nl> - public Invocation(Object mock, Method method, Object[] args) { <nl> + public Invocation(Object mock, Method method, Object[] args, int sequenceNumber) { <nl> + this.sequenceNumber = sequenceNumber; <nl> 
mmm PluginRegistry.java <nl> ppp PluginRegistry.java <nl> + import org.mockito.creation.instance.InstantiationException; <nl> + import org.mockito.creation.instance.Instantiator; <nl> + import org.mockito.mock.MockCreationSettings; <nl> + import org.mockito.plugins.InstantiatorProvider2; <nl> + private InstantiatorProvider defaultInstantiatorProvider; <nl> 
deleted file <nl> mmm SimplePerRealmReloadingClassLoader.java <nl> - package org.mockitoutil; <nl> - import java.net.MalformedURLException; <nl> - import java.net.URL; <nl> - import java.net.URLClassLoader; <nl> - import java.util.HashMap; <nl> - import java.util.Map; <nl> - import java.util.concurrent.Callable; <nl> 
mmm VerificationWithDescriptionTest.java <nl> ppp VerificationWithDescriptionTest.java <nl> - package org.mockitousage.verification; <nl> + package org.mockito.internal.verification; <nl> mmm TestBase.java <nl> ppp TestBase.java <nl> - protected static <T> void assertThat(T actual, Matcher<T> m) { <nl> - org.junit.Assert.assertThat(actual, m); <nl> 
mmm SystemEnvironment.java <nl> ppp SystemEnvironment.java <nl> + public static GoSystemProperty<Boolean> GO_SSL_CONFIG_JETTY_WANT_CLIENT_AUTH = new GoBooleanSystemProperty("go.ssl.config.want.client.auth", false); <nl> mmm Jetty9ServerTest.java <nl> ppp Jetty9ServerTest.java <nl> + when(systemEnvironment.get(SystemEnvironment.GO_SSL_CONFIG_JETTY_WANT_CLIENT_AUTH)).thenReturn(false); <nl> 
new file <nl> ppp PostBackupScript.java <nl> + package com.thoughtworks.go.server.domain; <nl> + import com.google.common.collect.ImmutableMap; <nl> + import com.google.gson.internal.bind.util.ISO8601Utils; <nl> + import com.thoughtworks.go.server.service.BackupService; <nl> + import com.thoughtworks.go.util.command.CommandLine; <nl> 
mmm EnvironmentConfigServiceTest.java <nl> ppp EnvironmentConfigServiceTest.java <nl> - config.getEnvironments().add(env); <nl> + EnvironmentsConfig environments = config.getEnvironments(); <nl> + environments.add(env); <nl> + environmentConfigService.sync(environments); <nl> - assertThat(environmentConfigService.forEdit("foo", result).getConfigElement(), Is.<EnvironmentConfig>is(env)); <nl> 
mmm RoutesHelper.java <nl> ppp RoutesHelper.java <nl> + import com.thoughtworks.go.api.spring.SparkSpringController; <nl> - private List<SparkController> controllers; <nl> - private List<BaseController> sparkControllers; <nl> + private List<SparkSpringController> controllers; <nl> + private List<SparkController> sparkControllers; <nl> 
mmm StageServiceTest.java <nl> ppp StageServiceTest.java <nl> - import com.thoughtworks.go.helper.ModificationsMother; <nl> + import static com.thoughtworks.go.helper.ModificationsMother.*; <nl> + import static com.thoughtworks.go.helper.PipelineMother.completedFailedStageInstance; <nl> + import static java.util.Collections.emptyList; <nl> 
new file <nl> ppp FeatureToggles.java <nl> + package com.thoughtworks.go.server.domain.support.toggle; <nl> + import org.apache.commons.lang.builder.EqualsBuilder; <nl> + import org.apache.commons.lang.builder.HashCodeBuilder; <nl> + import org.apache.commons.lang.builder.ToStringBuilder; <nl> + import java.util.ArrayList; <nl> 
mmm MagicalGoConfigXmlWriter.java <nl> ppp MagicalGoConfigXmlWriter.java <nl> - package com.thoughtworks.go.util; <nl> - import org.jdom.input.SAXBuilder; <nl> - import java.net.URISyntaxException; <nl> - import java.net.URL; <nl> - class ValidatingSaxBuilder extends SAXBuilder { <nl> - public ValidatingSaxBuilder() { <nl> 
mmm StringUtil.java <nl> ppp StringUtil.java <nl> + public static String unQuote(String string) { <nl> + return string == null ? null: string.replaceAll("^\"|\"$", ""); <nl> + } <nl> mmm OperatingSystem.java <nl> ppp OperatingSystem.java <nl> + */ <nl> - public enum OperatingSystem { <nl> - LINUX("Linux"), OSX("Mac OS X"), SUN_OS("SunOS"), WINDOWS("Windows"), UNKNOWN("Unknown"); <nl> 
mmm AuthenticationExtension.java <nl> ppp AuthenticationExtension.java <nl> - import com.thoughtworks.go.plugin.access.PluginInteractionCallback; <nl> + import com.thoughtworks.go.plugin.access.DefaultPluginInteractionCallback; <nl> - return pluginRequestHelper.submitRequest(pluginId, REQUEST_PLUGIN_CONFIGURATION, new PluginInteractionCallback<AuthenticationPluginConfiguration>() { <nl> 
mmm SCMViewModelBuilder.java <nl> ppp SCMViewModelBuilder.java <nl> + @Deprecated <nl> mmm PluginService.java <nl> ppp PluginService.java <nl> + @Deprecated <nl> mmm AuthenticationViewModelBuilder.java <nl> ppp AuthenticationViewModelBuilder.java <nl> + @Deprecated <nl> mmm AuthorizationViewModelBuilder.java <nl> 
new file <nl> ppp PluginNotificationListenerTest.java <nl> + package com.thoughtworks.go.server.messaging.plugin; <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> + import org.mockito.Mock; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + import static org.mockito.Mockito.verify; <nl> 
new file <nl> ppp UsersRepresenter.java <nl> + package com.thoughtworks.go.apiv3.users.representers; <nl> + import com.thoughtworks.go.api.base.OutputWriter; <nl> + import com.thoughtworks.go.apiv3.users.model.UserToRepresent; <nl> + import com.thoughtworks.go.domain.User; <nl> + import com.thoughtworks.go.spark.Routes; <nl> 
new file <nl> ppp AuthenticationViewModelBuilderTest.java <nl> + package com.thoughtworks.go.server.service.plugins.builder; <nl> + import com.thoughtworks.go.plugin.access.authentication.AuthenticationPluginRegistry; <nl> + import com.thoughtworks.go.plugin.infra.PluginManager; <nl> + import com.thoughtworks.go.plugin.infra.plugininfo.GoPluginDescriptor; <nl> 
mmm UnrunStagesPopulator.java <nl> ppp UnrunStagesPopulator.java <nl> + import java.util.HashSet; <nl> + import java.util.List; <nl> - import com.thoughtworks.go.domain.valuestreammap.*; <nl> + import com.thoughtworks.go.domain.valuestreammap.Node; <nl> + import com.thoughtworks.go.domain.valuestreammap.ValueStreamMap; <nl> 
new file <nl> ppp BitBucketServerPayload.java <nl> + package com.thoughtworks.go.apiv1.webhook.request.payload; <nl> + import com.google.gson.annotations.SerializedName; <nl> + import com.thoughtworks.go.config.exceptions.BadRequestException; <nl> + import java.net.MalformedURLException; <nl> + import java.net.URI; <nl> 
mmm GoServerTest.java <nl> ppp GoServerTest.java <nl> - when(systemEnvironment.getSslServerPort()).thenReturn(9443); <nl> - when(systemEnvironment.keystore()).thenReturn(tmpFile); <nl> - when(systemEnvironment.truststore()).thenReturn(tmpFile); <nl> mmm SystemEnvironmentTest.java <nl> ppp SystemEnvironmentTest.java <nl> 
new file <nl> ppp AddEnvironmentCommandTest.java <nl> + package com.thoughtworks.go.config.update; <nl> + import com.thoughtworks.go.config.BasicCruiseConfig; <nl> + import com.thoughtworks.go.config.BasicEnvironmentConfig; <nl> + import com.thoughtworks.go.config.CaseInsensitiveString; <nl> + import com.thoughtworks.go.helper.GoConfigMother; <nl> 
mmm AccessTokenRepresenter.java <nl> ppp AccessTokenRepresenter.java <nl> - final boolean hasToBeOutput = token instanceof AccessToken.AccessTokenWithDisplayValue && token.persisted(); <nl> - if (hasToBeOutput) { <nl> + if (token.persisted()) { <nl> + if (token.persisted()) { <nl> + outputWriter.add("id", token.getId()); <nl> 
mmm Role.java <nl> ppp Role.java <nl> - import com.thoughtworks.go.config.rules.Directive; <nl> - import com.thoughtworks.go.config.rules.RulesValidationContext; <nl> - import static com.thoughtworks.go.config.rules.SupportedEntity.ENVIRONMENT; <nl> - import static com.thoughtworks.go.config.rules.SupportedEntity.unmodifiableListOf; <nl> 
mmm StringUtil.java <nl> ppp StringUtil.java <nl> + public static String unQuote(String string) { <nl> + return string == null ? null: string.replaceAll("^\"|\"$", ""); <nl> + } <nl> mmm FileUtil.java <nl> ppp FileUtil.java <nl> - import java.io.*; <nl> + import java.io.File; <nl> + import java.io.FileInputStream; <nl> 
mmm TfsMaterialConfig.java <nl> ppp TfsMaterialConfig.java <nl> - validateSecretParams(validationContext); <nl> + validateEncryptedPassword(); <nl> mmm P4MaterialConfigTest.java <nl> ppp P4MaterialConfigTest.java <nl> - import com.thoughtworks.go.config.rules.Allow; <nl> - import com.thoughtworks.go.config.rules.Rules; <nl> 
mmm Toggles.java <nl> ppp Toggles.java <nl> - public static String PLUGIN_SPA_TOGGLE_KEY = "plugin_spa_toggle_key"; <nl> mmm GoVelocityView.java <nl> ppp GoVelocityView.java <nl> - velocityContext.put(Toggles.PLUGIN_SPA_TOGGLE_KEY, Toggles.isToggleOn(Toggles.PLUGIN_SPA_TOGGLE_KEY)); <nl> mmm UserServiceTest.java <nl> 
mmm RepresenterUtils.java <nl> ppp RepresenterUtils.java <nl> - apply plugin: 'org.junit.platform.gradle.plugin' <nl> - apply plugin: 'jacoco' <nl> - apply plugin: 'groovy' <nl> + package com.thoughtworks.go.api.representers; <nl> - apply from: rootProject.file('buildSrc/junit5-support.gradle') <nl> - dependencies { <nl> 
deleted file <nl> mmm PluginsListTest.java <nl> - package com.thoughtworks.go.plugin.infra.commons; <nl> - import com.thoughtworks.go.util.ReflectionUtil; <nl> - import com.thoughtworks.go.util.SystemEnvironment; <nl> - import org.apache.commons.io.FileUtils; <nl> - import org.junit.After; <nl> - import org.junit.Before; <nl> 
mmm AgentPluginsInitializerTest.java <nl> ppp AgentPluginsInitializerTest.java <nl> - inOrder.verify(pluginManager).startInfrastructure(); <nl> - verify(pluginManager,never()).registerZipUpdater(); <nl> + inOrder.verify(pluginManager).startPluginInfrastructure(); <nl> mmm PluginsZipInitializer.java <nl> ppp PluginsZipInitializer.java <nl> 
new file <nl> ppp PipelineDependencyModificationRepresenter.java <nl> + package com.thoughtworks.go.apiv2.dashboard.representers; <nl> + import com.google.common.collect.ImmutableMap; <nl> + import com.thoughtworks.go.api.representers.JsonWriter; <nl> + import com.thoughtworks.go.domain.materials.Modification; <nl> 
mmm HeaderConstraint.java <nl> ppp HeaderConstraint.java <nl> + import java.util.Arrays; <nl> + import java.util.List; <nl> + private static final List<String> HEADERS = Arrays.asList("Confirm", "X-GoCD-Confirm"); <nl> - String requestHeader = request.getHeader("Confirm"); <nl> + return HEADERS.stream().anyMatch(header -> isValid(request, header)); <nl> 
mmm ConfigFileFixture.java <nl> ppp ConfigFileFixture.java <nl> - @SuppressWarnings("UnusedDeclaration") <nl> - + "           <server artifactsdir=\"logs\">\n" <nl> - + "           </server>\n" <nl> - + "            <agents>\n" <nl> - + "              <agent hostname=\"crey\" ipaddress=\"10.18.8.18\" uuid=\"f73955ee-ff0f-4506-b6d0-0b7231d065a2\">\n" <nl> 
deleted file <nl> mmm OauthAuthorization.java <nl> - package com.thoughtworks.go.server.domain.oauth; <nl> - import java.util.Map; <nl> - import com.thoughtworks.go.server.oauth.OauthDataSource; <nl> - public class OauthAuthorization extends OauthDomainEntity<OauthDataSource.OauthAuthorizationDTO> { <nl> - private String userId; <nl> 
mmm AuthorizationMessageConverter.java <nl> ppp AuthorizationMessageConverter.java <nl> - String authorizationServerRedirectUrlRequestBody(String pluginId, List<SecurityAuthConfig> authConfigs, String siteUrl); <nl> + String authorizationServerUrlRequestBody(String pluginId, List<SecurityAuthConfig> authConfigs, String siteUrl); <nl> 
mmm BackgroundStageLoaderIntegrationTest.java <nl> ppp BackgroundStageLoaderIntegrationTest.java <nl> - import com.thoughtworks.go.util.TempFiles; <nl> + import org.junit.Rule; <nl> + import org.junit.rules.TemporaryFolder; <nl> + @Rule <nl> + public TemporaryFolder temporaryFolder = new TemporaryFolder(); <nl> 
mmm StageInstanceModels.java <nl> ppp StageInstanceModels.java <nl> + import java.util.Date; <nl> - import java.util.Date; <nl> mmm StageServiceTest.java <nl> ppp StageServiceTest.java <nl> - import com.thoughtworks.go.presentation.pipelinehistory.StageInstanceModels; <nl> - import com.thoughtworks.go.server.service.result.HttpOperationResult; <nl> 
mmm Toggles.java <nl> ppp Toggles.java <nl> + public static String ALLOW_EMPTY_PIPELINE_GROUPS_DASHBOARD = "allow_empty_pipeline_groups_dashboard"; <nl> + public static void deinitialize() { <nl> + service = null; <nl> + } <nl> new file <nl> ppp DashboardRepresenter.java <nl> + package com.thoughtworks.go.apiv4.dashboard.representers; <nl> 
mmm HgModificationSplitter.java <nl> ppp HgModificationSplitter.java <nl> + package com.thoughtworks.go.util; <nl> + import org.jdom.input.SAXBuilder; <nl> + import java.net.URISyntaxException; <nl> + import java.net.URL; <nl> + class ValidatingSaxBuilder extends SAXBuilder { <nl> + public ValidatingSaxBuilder() { <nl> 
mmm GoMailSender.java <nl> ppp GoMailSender.java <nl> + */ <nl> + String ERROR_MESSAGE = "Failed to send an email. Please check the GoCD server logs for any extra information that might be present."; <nl> mmm CreateSCMConfigCommand.java <nl> ppp CreateSCMConfigCommand.java <nl> - import com.thoughtworks.go.i18n.LocalizedMessage; <nl> 
mmm BasicEnvironmentConfig.java <nl> ppp BasicEnvironmentConfig.java <nl> + @Override <nl> mmm GoConfigMother.java <nl> ppp GoConfigMother.java <nl> + import com.thoughtworks.go.config.materials.git.GitMaterialConfig; <nl> + import com.thoughtworks.go.config.remote.ConfigRepoConfig; <nl> + import com.thoughtworks.go.config.remote.ConfigReposConfig; <nl> 
mmm CreateLoginStatementAssert.java <nl> ppp CreateLoginStatementAssert.java <nl> - import org.apache.shardingsphere.sql.parser.sql.common.statement.dcl.CreateLoginStatement; <nl> + import org.apache.shardingsphere.sql.parser.sql.dialect.statement.sqlserver.dcl.SQLServerCreateLoginStatement; <nl> - public static void assertIs(final SQLCaseAssertContext assertContext, final CreateLoginStatement actual, final CreateLoginStatementTestCase expected) { <nl> 
deleted file <nl> mmm TransactionEngine.java <nl> - package io.shardingsphere.proxy.backend.jdbc.transaction; <nl> - import com.google.common.base.Optional; <nl> - import io.shardingsphere.core.constant.TCLType; <nl> - import lombok.Getter; <nl> - import lombok.RequiredArgsConstructor; <nl> - import lombok.Setter; <nl> 
new file <nl> ppp AggregationDistinctSelectItemTest.java <nl> + package io.shardingsphere.core.parsing.parser.context.selectitem; <nl> + import com.google.common.base.Optional; <nl> + import io.shardingsphere.core.constant.AggregationType; <nl> + import org.junit.Test; <nl> + import static org.hamcrest.core.Is.is; <nl> 
mmm RegistryListenerManagerTest.java <nl> ppp RegistryListenerManagerTest.java <nl> - import org.apache.shardingsphere.governance.repository.api.listener.DataChangedEvent.ChangedType; <nl> + import org.apache.shardingsphere.governance.repository.api.listener.DataChangedEvent.Type; <nl> - verify(instanceStateChangedListener).watch(ChangedType.UPDATED); <nl> 
mmm ShowCreateTableMergedResult.java <nl> ppp ShowCreateTableMergedResult.java <nl> - import com.google.common.base.Optional; <nl> - Optional<TableRule> tableRule = shardingRule.tryFindTableRuleByActualTable(tableName); <nl> - if (tableRule.isPresent()) { <nl> - String logicTableName = tableRule.get().getLogicTable(); <nl> 
mmm JdbcMethodInvocation.java <nl> ppp JdbcMethodInvocation.java <nl> - package com.dangdang.ddframe.rdb.sharding.jdbc.util; <nl> + package com.dangdang.ddframe.rdb.sharding.jdbc.adapter; <nl> - public final class JdbcMethodInvocation { <nl> + public class JdbcMethodInvocation { <nl> new file <nl> ppp SetParameterMethodInvocation.java <nl> 
mmm AtomikosXARecoverableResourceTest.java <nl> ppp AtomikosXARecoverableResourceTest.java <nl> - import io.shardingsphere.transaction.xa.jta.resource.ShardingXAResource; <nl> + import io.shardingsphere.transaction.xa.jta.resource.SingleXAResource; <nl> - private ShardingXAResource shardingXAResource; <nl> 
mmm ExpectedColumn.java <nl> ppp ExpectedColumn.java <nl> - import org.apache.shardingsphere.sql.parser.integrate.jaxb.segment.impl.owner.ExpectedTableOwner; <nl> + import org.apache.shardingsphere.sql.parser.integrate.jaxb.segment.impl.table.ExpectedTableOwner; <nl> mmm ProjectionAssert.java <nl> ppp ProjectionAssert.java <nl> 
mmm AllInternalTests.java <nl> ppp AllInternalTests.java <nl> + import io.shardingsphere.orchestration.internal.rule.AllRuleTests; <nl> + import io.shardingsphere.orchestration.internal.state.AllStateTests; <nl> - AllConfigTests.class <nl> + AllConfigTests.class, <nl> + AllStateTests.class, <nl> + AllRuleTests.class <nl> 
mmm RowCountTokenGenerator.java <nl> ppp RowCountTokenGenerator.java <nl> - import org.apache.shardingsphere.core.parse.sql.token.impl.RowCountToken; <nl> + import org.apache.shardingsphere.core.rewrite.token.pojo.RowCountToken; <nl> + package org.apache.shardingsphere.core.rewrite.token.generator; <nl> + import com.google.common.base.Optional; <nl> 
mmm OrchestrationShardingDataSource.java <nl> ppp OrchestrationShardingDataSource.java <nl> + import com.google.common.eventbus.Subscribe; <nl> + import io.shardingsphere.core.constant.properties.ShardingProperties; <nl> + import io.shardingsphere.jdbc.orchestration.internal.event.config.ShardingConfigurationEventBusEvent; <nl> 
mmm DataTypesCodec.java <nl> ppp DataTypesCodec.java <nl> - if ((flag & 0x01) != 0) bitSet.set(bit); <nl> - if ((flag & 0x02) != 0) bitSet.set(bit + 1); <nl> - if ((flag & 0x04) != 0) bitSet.set(bit + 2); <nl> - if ((flag & 0x08) != 0) bitSet.set(bit + 3); <nl> - if ((flag & 0x10) != 0) bitSet.set(bit + 4); <nl> 
mmm ShardingInsertStatementValidator.java <nl> ppp ShardingInsertStatementValidator.java <nl> - import org.apache.shardingsphere.underlying.common.exception.ShardingSphereException; <nl> - import org.apache.shardingsphere.sql.parser.sql.segment.dml.column.ColumnSegment; <nl> - import org.apache.shardingsphere.sql.parser.sql.segment.dml.column.OnDuplicateKeyColumnsSegment; <nl> 
mmm YamlTableRuleConfiguration.java <nl> ppp YamlTableRuleConfiguration.java <nl> - logicTable = tableRuleConfiguration.getLogicTable(); <nl> + package io.shardingsphere.core.parsing.parser.constant; <nl> + import lombok.AccessLevel; <nl> + import lombok.RequiredArgsConstructor; <nl> + @RequiredArgsConstructor(access = AccessLevel.PRIVATE) <nl> 
mmm GroupByMemoryMergedResultTest.java <nl> ppp GroupByMemoryMergedResultTest.java <nl> + import org.apache.shardingsphere.core.optimize.statement.sharding.dml.select.pagination.Pagination; <nl> - import org.apache.shardingsphere.core.optimize.statement.sharding.dml.select.item.SelectItems; <nl> - import org.apache.shardingsphere.core.optimize.statement.sharding.dml.select.pagination.Pagination; <nl> 
new file <nl> ppp AbstractOrchestrationBeanDefinitionParser.java <nl> + package io.shardingjdbc.orchestration.spring.namespace.parser; <nl> + import io.shardingjdbc.orchestration.api.config.OrchestrationConfiguration; <nl> + import org.springframework.beans.factory.config.BeanDefinition; <nl> + import org.springframework.beans.factory.support.BeanDefinitionBuilder; <nl> 
mmm ShardingConfigurationLoaderTest.java <nl> ppp ShardingConfigurationLoaderTest.java <nl> - assertTrue(actual.getEncryptStrategies().containsKey("encrypt_strategy_aes")); <nl> - assertTrue(actual.getEncryptStrategies().containsKey("encrypt_strategy_md5")); <nl> - YamlEncryptStrategyConfiguration aesEncryptStrategyConfiguration = actual.getEncryptStrategies().get("encrypt_strategy_aes"); <nl> 
mmm SQLRewriteEngineTest.java <nl> ppp SQLRewriteEngineTest.java <nl> - selectStatement.getOrderByItems().add(new OrderItem("x", "id", OrderType.ASC, Optional.<String>absent())); <nl> - selectStatement.getGroupByItems().add(new OrderItem("x", "id", OrderType.DESC, Optional.<String>absent())); <nl> + selectStatement.getOrderByItems().add(new OrderItem("x", "id", OrderType.ASC, OrderType.ASC, Optional.<String>absent())); <nl> 
mmm PostgreSQLWalDumper.java <nl> ppp PostgreSQLWalDumper.java <nl> - import org.apache.shardingsphere.scaling.postgresql.wal.WalPosition; <nl> mmm ZookeeperResumablePositionManager.java <nl> ppp ZookeeperResumablePositionManager.java <nl> - return new OrchestrationCenterConfiguration("zookeeper", resumeConfiguration.getServerLists(), new Properties()); <nl> 
mmm AbstractBaseExecutorTest.java <nl> ppp AbstractBaseExecutorTest.java <nl> - import org.apache.shardingsphere.transaction.ShardingTransactionManagerEngine; <nl> - ShardingTransactionManagerEngine shardingTransactionManagerEngine = mock(ShardingTransactionManagerEngine.class); <nl> - connection = new ShardingConnection(dataSourceSourceMap, shardingContext, shardingTransactionManagerEngine, TransactionType.LOCAL); <nl> 
mmm ProxySQLExecuteCallback.java <nl> ppp ProxySQLExecuteCallback.java <nl> - return connectionMode == ConnectionMode.MEMORY_STRICTLY ? new StreamQueryResult(resultSet, shardingRule) : new MemoryQueryResult(resultSet, shardingRule); <nl> + return connectionMode == ConnectionMode.MEMORY_STRICTLY ? new StreamQueryResult(resultSet, shardingRule.getAllActualTableNames(), shardingRule.getShardingEncryptorEngine()) <nl> 
deleted file <nl> mmm MetricsBeanDefinitionParser.java <nl> - package org.apache.shardingsphere.spring.namespace.orchestration.parser; <nl> - import com.google.common.base.Strings; <nl> - import org.apache.shardingsphere.metrics.configuration.config.MetricsConfiguration; <nl> - import org.apache.shardingsphere.spring.namespace.orchestration.constants.MetricsBeanDefinitionTag; <nl> 
new file <nl> ppp ShardingTransactionManager.java <nl> + package io.shardingsphere.core.transaction; <nl> + import io.shardingsphere.core.event.transaction.ShardingTransactionEvent; <nl> + import java.sql.SQLException; <nl> + public interface ShardingTransactionManager<T extends ShardingTransactionEvent> { <nl> 
mmm RdbmsConfigurationUtil.java <nl> ppp RdbmsConfigurationUtil.java <nl> - PrimaryKeyPosition position = positionManager.getCurrentPosition(); <nl> + PrimaryKeyPosition position = positionManager.getPosition(); <nl> mmm ResumeBreakPointManager.java <nl> ppp ResumeBreakPointManager.java <nl> + import org.apache.shardingsphere.scaling.core.job.position.Position; <nl> 
mmm SQLStatement.java <nl> ppp SQLStatement.java <nl> - Conditions getConditions(); <nl> + Conditions getRouteConditions(); <nl> + Conditions getEncryptConditions(); <nl> - private final Conditions conditions = new Conditions(); <nl> + private final Conditions routeConditions = new Conditions(); <nl> + private final Conditions encryptConditions = new Conditions(); <nl> 
mmm QueryResultMetaData.java <nl> ppp QueryResultMetaData.java <nl> - import java.util.ArrayList; <nl> - import java.util.Map.Entry; <nl> - import java.util.Collections; <nl> mmm OrConditionFiller.java <nl> ppp OrConditionFiller.java <nl> + import org.apache.shardingsphere.core.parse.old.parser.context.condition.Condition; <nl> 
mmm EncryptResultSetMetaData.java <nl> ppp EncryptResultSetMetaData.java <nl> - import org.apache.shardingsphere.underlying.common.constant.ShardingConstant; <nl> + import org.apache.shardingsphere.underlying.common.database.DefaultSchema; <nl> - return ShardingConstant.LOGIC_SCHEMA_NAME; <nl> + return DefaultSchema.LOGIC_NAME; <nl> 
deleted file <nl> mmm ExpectedAggregationDistinctToken.java <nl> - package io.shardingsphere.core.parsing.integrate.jaxb.token; <nl> - import lombok.Getter; <nl> - import lombok.Setter; <nl> - import javax.xml.bind.annotation.XmlAccessType; <nl> - import javax.xml.bind.annotation.XmlAccessorType; <nl> - import javax.xml.bind.annotation.XmlAttribute; <nl> 
mmm AlterTableStatementMetaDataRefreshStrategy.java <nl> ppp AlterTableStatementMetaDataRefreshStrategy.java <nl> + import org.apache.shardingsphere.infra.binder.metadata.schema.SchemaMetaData; <nl> + import org.apache.shardingsphere.infra.binder.metadata.table.TableMetaData; <nl> - import org.apache.shardingsphere.infra.binder.metadata.schema.SchemaMetaData; <nl> 
new file <nl> ppp SQLSet.java <nl> + package io.shardingsphere.dbtest.cases.authority.sql; <nl> + import io.shardingsphere.core.constant.DatabaseType; <nl> + import lombok.Getter; <nl> + import javax.xml.bind.annotation.XmlAccessType; <nl> + import javax.xml.bind.annotation.XmlAccessorType; <nl> + import javax.xml.bind.annotation.XmlAttribute; <nl> 
mmm SelectItemSegment.java <nl> ppp SelectItemSegment.java <nl> + String getText(); <nl> mmm FunctionSelectItemExtractor.java <nl> ppp FunctionSelectItemExtractor.java <nl> - type, innerExpressionStartIndex, getDistinctExpression(aggregationFunctionCallNode)) <nl> - : new AggregationSelectItemSegment(aggregationFunctionCallNode.getStart().getStartIndex(), aggregationFunctionCallNode.getStop().getStopIndex(), type, innerExpressionStartIndex); <nl> 
mmm SpringBootShardingTest.java <nl> ppp SpringBootShardingTest.java <nl> - EncryptRule encryptRule = ((ShardingRule) runtimeContext.getRules().iterator().next()).getEncryptRule(); <nl> + EncryptRule encryptRule = runtimeContext.getRule().getEncryptRule(); <nl> - ShardingRule shardingRule = (ShardingRule) runtimeContext.getRules().iterator().next(); <nl> 
mmm InsertStatement.java <nl> ppp InsertStatement.java <nl> - import com.google.common.base.Function; <nl> - import com.google.common.base.Predicate; <nl> - import com.google.common.collect.Collections2; <nl> - import com.google.common.collect.Lists; <nl> - import org.apache.shardingsphere.core.parsing.parser.token.InsertValuesToken; <nl> 
mmm MemoryQueryResult.java <nl> ppp MemoryQueryResult.java <nl> - import lombok.SneakyThrows; <nl> - import java.io.ByteArrayInputStream; <nl> - import java.io.ByteArrayOutputStream; <nl> - import java.io.ObjectOutputStream; <nl> - return getInputStream(currentRow.getColumnValue(columnIndex)); <nl> + return (InputStream) currentRow.getColumnValue(columnIndex); <nl> 
mmm MasterSlaveDataSourceBeanDefinitionParserTag.java <nl> ppp MasterSlaveDataSourceBeanDefinitionParserTag.java <nl> - public static final String MASTER_DATA_SOURCE_NAME_ATTRIBUTE = "master-data-source-name"; <nl> - public static final String SLAVE_DATA_SOURCE_NAMES_ATTRIBUTE = "slave-data-source-names"; <nl> 
deleted file <nl> mmm TransactionLoader.java <nl> - package io.shardingsphere.core.jdbc.core.transaction; <nl> - import io.shardingsphere.core.constant.TransactionType; <nl> - import io.shardingsphere.core.transaction.TransactionContext; <nl> - import io.shardingsphere.core.transaction.TransactionContextHolder; <nl> 
deleted file <nl> mmm AbstractMySQLVisitor.java <nl> - package com.dangdang.ddframe.rdb.sharding.parser.visitor.basic.mysql; <nl> - import com.alibaba.druid.sql.ast.expr.SQLBetweenExpr; <nl> - import com.alibaba.druid.sql.ast.expr.SQLBinaryOpExpr; <nl> - import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr; <nl> 
mmm OracleVisitor.java <nl> ppp OracleVisitor.java <nl> - import org.apache.shardingsphere.sql.parser.sql.segment.dml.column.InsertColumnsSegment; <nl> - Collection<ColumnSegment> columnSegments = new LinkedList<>(); <nl> + CollectionValue<ColumnSegment> result = new CollectionValue<>(); <nl> - columnSegments.add((ColumnSegment) visit(each)); <nl> 

mmm InsertStatement.java <nl> ppp InsertStatement.java <nl> - import com.dangdang.ddframe.rdb.sharding.parsing.parser.context.Condition; <nl> + import com.dangdang.ddframe.rdb.sharding.parsing.parser.context.condition.Condition; <nl> - add(new Condition(column, sqlExpression)); <nl> + getConditions().add(new Condition(column, sqlExpression)); <nl> 
mmm ShardingTableMetaDataInitializer.java <nl> ppp ShardingTableMetaDataInitializer.java <nl> + import org.apache.shardingsphere.underlying.common.metadata.table.TableMetas; <nl> - public final class TableMetaDataInitializer { <nl> + public final class ShardingTableMetaDataInitializer { <nl> - public TableMetaDataInitializer(final DataSourceMetas dataSourceMetas, final ExecutorEngine executorEngine, <nl> 
new file <nl> ppp OptimizeEngineFactory.java <nl> + package io.shardingjdbc.core.optimizer; <nl> + import io.shardingjdbc.core.parsing.parser.sql.SQLStatement; <nl> + import io.shardingjdbc.core.parsing.parser.sql.dml.DMLStatement; <nl> + import io.shardingjdbc.core.parsing.parser.sql.dml.insert.InsertStatement; <nl> 
mmm TestRegistryCenter.java <nl> ppp TestRegistryCenter.java <nl> mmm FirstTestRegistryCenter.java <nl> ppp FirstTestRegistryCenter.java <nl> - package io.shardingsphere.orchestration.registry; <nl> + package io.shardingsphere.orchestration.fixture; <nl> mmm InstanceStateServiceTest.java <nl> ppp InstanceStateServiceTest.java <nl> 
mmm DatabaseTest.java <nl> ppp DatabaseTest.java <nl> - SQLRouteResult actual = new StatementRoutingEngine(shardingRule, DatabaseType.MySQL, false).route(originSql); <nl> + SQLRouteResult actual = new StatementRoutingEngine(shardingRule, null, DatabaseType.MySQL, false).route(originSql); <nl> - SQLRouteResult actual = new StatementRoutingEngine(shardingRule, DatabaseType.MySQL, false).route(originSql); <nl> 
mmm AbstractDataSourceAdapter.java <nl> ppp AbstractDataSourceAdapter.java <nl> - import java.lang.reflect.Method; <nl> - import java.util.Map; <nl> - public abstract class AbstractDataSourceAdapter extends AbstractUnsupportedOperationDataSource implements AutoCloseable { <nl> + public abstract class AbstractDataSourceAdapter extends AbstractUnsupportedOperationDataSource { <nl> 
mmm AllTests.java <nl> ppp AllTests.java <nl> - import com.dangdang.ddframe.rdb.sharding.config.common.internal.CommonTest; <nl> - import com.dangdang.ddframe.rdb.sharding.config.common.internal.ConfigErrorTest; <nl> - import com.dangdang.ddframe.rdb.sharding.config.common.internal.TableRuleTest; <nl> + import com.dangdang.ddframe.rdb.sharding.config.common.internal.ConfigUtilTest; <nl> 
mmm ShardingWhereOptimizeEngine.java <nl> ppp ShardingWhereOptimizeEngine.java <nl> - import com.google.common.collect.Range; <nl> - import org.apache.shardingsphere.core.exception.ShardingException; <nl> - import org.apache.shardingsphere.core.optimize.statement.sharding.dml.condition.AlwaysFalseRouteValue; <nl> 
mmm DatabaseTest.java <nl> ppp DatabaseTest.java <nl> - import com.google.common.collect.Lists; <nl> - import io.shardingsphere.api.config.TableRuleConfiguration; <nl> - import io.shardingsphere.api.config.strategy.InlineShardingStrategyConfiguration; <nl> - import io.shardingsphere.core.parsing.parser.sql.dql.select.SelectStatement; <nl> 
mmm PredicateExtractor.java <nl> ppp PredicateExtractor.java <nl> - import io.shardingsphere.core.parsing.antlr.sql.segment.expr.CommonExpressionSegment; <nl> - import io.shardingsphere.core.util.NumberUtil; <nl> + private ExpressionExtractor expressionExtractor; <nl> + expressionExtractor = new ExpressionExtractor(questionNodeIndexMap); <nl> 
mmm SQLExecutionHook.java <nl> ppp SQLExecutionHook.java <nl> - package io.shardingsphere.spi.executor; <nl> + package io.shardingsphere.core.spi.executor; <nl> mmm OpenTracingSQLExecutionHookTest.java <nl> ppp OpenTracingSQLExecutionHookTest.java <nl> - import io.shardingsphere.spi.executor.SPISQLExecutionHook; <nl> 
mmm MySQLFrontendHandler.java <nl> ppp MySQLFrontendHandler.java <nl> + import io.shardingsphere.core.routing.router.masterslave.MasterVisitedManager; <nl> + import io.shardingsphere.proxy.backend.common.jdbc.ConnectionManager; <nl> + } finally { <nl> + MasterVisitedManager.clear(); <nl> + ConnectionManager.clear(); <nl> 
mmm ShardingPreparedStatement.java <nl> ppp ShardingPreparedStatement.java <nl> - connection.getRuntimeContext().getProperties().<Integer>getValue(ConfigurationPropertyKey.MAX_CONNECTIONS_SIZE_PER_QUERY)); <nl> + connection.getRuntimeContext().getProperties().<Integer>getValue(ConfigurationPropertyKey.MAX_CONNECTIONS_SIZE_PER_QUERY), <nl> 
deleted file <nl> mmm FieldUtil.java <nl> - package org.apache.shardingsphere.metrics.facade.util; <nl> - import lombok.RequiredArgsConstructor; <nl> - import lombok.SneakyThrows; <nl> - import java.lang.reflect.Field; <nl> - @RequiredArgsConstructor <nl> - public final class FieldUtil { <nl> - @SneakyThrows <nl> 
mmm TokenAssert.java <nl> ppp TokenAssert.java <nl> - if(DatabaseType.MySQL == databaseType) { <nl> + if (DatabaseType.MySQL == databaseType) { <nl> mmm ShardingSetAssignmentsFiller.java <nl> ppp ShardingSetAssignmentsFiller.java <nl> - import org.apache.shardingsphere.core.parse.antlr.sql.segment.dml.expr.LiteralExpressionSegment; <nl> 
mmm StatementAdapterTest.java <nl> ppp StatementAdapterTest.java <nl> + import io.shardingsphere.shardingjdbc.jdbc.core.statement.ShardingPreparedStatement; <nl> - import java.sql.Connection; <nl> - import java.util.Collection; <nl> + import static org.mockito.Mockito.doReturn; <nl> + import static org.mockito.Mockito.spy; <nl> 
new file <nl> ppp TransactionContext.java <nl> + package io.shardingsphere.core.transaction; <nl> + import io.shardingsphere.core.constant.TransactionType; <nl> + import io.shardingsphere.core.transaction.event.TransactionEvent; <nl> + import io.shardingsphere.core.transaction.event.WeakXaTransactionEvent; <nl> 
deleted file <nl> mmm ShardingValues.java <nl> - package io.shardingjdbc.core.api.algorithm.sharding; <nl> - import com.google.common.base.Optional; <nl> - import lombok.Getter; <nl> - import lombok.RequiredArgsConstructor; <nl> - import lombok.ToString; <nl> - import java.util.LinkedList; <nl> - import java.util.List; <nl> 
mmm MySQLVisitor.java <nl> ppp MySQLVisitor.java <nl> - import org.apache.shardingsphere.sql.parser.sql.segment.dml.predicate.value.PredicateBracketValue; <nl> - import org.apache.shardingsphere.sql.parser.sql.segment.dml.predicate.value.PredicateLeftBracketValue; <nl> - import org.apache.shardingsphere.sql.parser.sql.segment.dml.predicate.value.PredicateRightBracketValue; <nl> 
mmm ShardingDatabaseOnlyForStatementWithSelectTest.java <nl> ppp ShardingDatabaseOnlyForStatementWithSelectTest.java <nl> - import com.dangdang.ddframe.rdb.sharding.jdbc.core.datasource.ShardingDataSource; <nl> - import org.junit.Before; <nl> - private ShardingDataSource shardingDataSource; <nl> - @Before <nl> 
mmm AllListenerTests.java <nl> ppp AllListenerTests.java <nl> - import io.shardingsphere.transaction.listener.local.LocalTransactionListenerTest; <nl> - LocalTransactionListenerTest.class, <nl> mmm LocalTransactionListenerTest.java <nl> ppp LocalTransactionListenerTest.java <nl> - package io.shardingsphere.transaction.listener.local; <nl> 
mmm ConfigurationServiceTest.java <nl> ppp ConfigurationServiceTest.java <nl> - + "      inline:\n" + "        shardingColumn: user_id\n" + "        algorithmExpression: db_ms_${user_id % 2}\n" + "    tableStrategy: \n" + "      inline:\n" <nl> + + "      inline:\n" + "        shardingColumn: user_id\n" + "        algorithmExpression: db_ms_${order_id % 2}\n" + "    tableStrategy: \n" + "      inline:\n" <nl> 
mmm JDBCBackendHandler.java <nl> ppp JDBCBackendHandler.java <nl> - import com.google.common.base.Optional; <nl> - import io.shardingsphere.proxy.backend.BackendHandler; <nl> + import io.shardingsphere.proxy.backend.AbstractBackendHandler; <nl> - import io.shardingsphere.proxy.config.RuleRegistry; <nl> + import io.shardingsphere.proxy.config.RuleRegistry; <nl> 
mmm AllConfigTests.java <nl> ppp AllConfigTests.java <nl> - import io.shardingsphere.orchestration.internal.config.node.ConfigurationNodeTest; <nl> - import io.shardingsphere.orchestration.internal.config.service.ConfigurationServiceTest; <nl> mmm ConfigurationServiceTest.java <nl> ppp ConfigurationServiceTest.java <nl> 
mmm ShardingStrategyBeanDefinitionParser.java <nl> ppp ShardingStrategyBeanDefinitionParser.java <nl> - package org.apache.shardingsphere.sharding.spring.namespace.parser; <nl> + package org.apache.shardingsphere.sharding.spring.namespace.parser.strategy; <nl> mmm KeyGenerateStrategyBeanDefinitionParser.java <nl> 
mmm ConfigurationYamlConverter.java <nl> ppp ConfigurationYamlConverter.java <nl> - import org.apache.shardingsphere.orchestration.core.common.configuration.DataSourceConfigurationYamlSwapper; <nl> - import org.apache.shardingsphere.orchestration.core.common.configuration.YamlDataSourceConfiguration; <nl> 
mmm CreateTableStatementMetaDataRefreshStrategy.java <nl> ppp CreateTableStatementMetaDataRefreshStrategy.java <nl> - import org.apache.shardingsphere.underlying.common.metadata.schema.loader.RuleSchemaMetaDataLoader; <nl> + import org.apache.shardingsphere.underlying.common.metadata.schema.RuleSchemaMetaDataLoader; <nl> 
mmm ColumnDefinition.java <nl> ppp ColumnDefinition.java <nl> - private ColumnPosition position; <nl> deleted file <nl> mmm ASTExtractHandler1.java <nl> - package io.shardingsphere.core.parsing.antlr.extractor.statement.handler; <nl> - import org.antlr.v4.runtime.ParserRuleContext; <nl> - import io.shardingsphere.core.parsing.antlr.extractor.statement.handler.result.ExtractResult; <nl> 
mmm ShardingTableMetaDataLoader.java <nl> ppp ShardingTableMetaDataLoader.java <nl> - List<TableMetaData> metaList = executorEngine.execute(getTableNamesInput(tableNames), new GroupedCallback<String, TableMetaData>() { <nl> + List<TableMetaData> tableMetaDataList = executorEngine.execute(getTableNamesInputGroups(tableNames), new GroupedCallback<String, TableMetaData>() { <nl> 
mmm EncryptTableTest.java <nl> ppp EncryptTableTest.java <nl> - import com.google.common.collect.ImmutableMap; <nl> - import java.util.Optional; <nl> - import static org.hamcrest.CoreMatchers.is; <nl> - import static org.junit.Assert.assertThat; <nl> - encryptTable = new EncryptTable(new EncryptTableRuleConfiguration("t_encrypt", <nl> 
mmm SQLParseEngine.java <nl> ppp SQLParseEngine.java <nl> + import com.alibaba.druid.sql.ast.statement.SQLDeleteStatement; <nl> + import com.alibaba.druid.sql.ast.statement.SQLInsertStatement; <nl> + import com.alibaba.druid.sql.ast.statement.SQLSelectStatement; <nl> + import com.alibaba.druid.sql.ast.statement.SQLUpdateStatement; <nl> 
mmm PaginationContextEngineTest.java <nl> ppp PaginationContextEngineTest.java <nl> - import org.apache.shardingsphere.sql.parser.sql.segment.dml.TableFactorSegment; <nl> - import org.apache.shardingsphere.sql.parser.sql.segment.dml.TableReferenceSegment; <nl> - import org.apache.shardingsphere.sql.parser.sql.segment.dml.expr.subquery.SubquerySegment; <nl> 
mmm SQLStatement.java <nl> ppp SQLStatement.java <nl> - String getLogicSQL(); <nl> deleted file <nl> mmm DeleteFromWhereSegment.java <nl> - package org.apache.shardingsphere.core.parsing.antlr.sql.segment.dml; <nl> - import lombok.Getter; <nl> - import org.apache.shardingsphere.core.parsing.antlr.sql.segment.FromWhereSegment; <nl> 
mmm ParsingSQLRouter.java <nl> ppp ParsingSQLRouter.java <nl> - if (sqlStatement instanceof SelectStatement && null != ((SelectStatement) sqlStatement).getLimit() && !routingResult.isSingleRouting()) { <nl> + if (sqlStatement instanceof SelectStatement && null != ((SelectStatement) sqlStatement).getLimit()) { <nl> 
deleted file <nl> mmm CacheClient.java <nl> - package com.saaavsaaa.client.zookeeper; <nl> - import com.saaavsaaa.client.untils.PathUtil; <nl> - import org.apache.zookeeper.KeeperException; <nl> - import org.apache.zookeeper.Transaction; <nl> - import javax.swing.tree.DefaultMutableTreeNode; <nl> - import java.util.Iterator; <nl> 
mmm ShardingMetaData.java <nl> ppp ShardingMetaData.java <nl> + import com.google.common.base.Strings; <nl> - import com.google.common.util.concurrent.MoreExecutors; <nl> - import com.google.common.util.concurrent.ThreadFactoryBuilder; <nl> + import java.util.Collection; <nl> - import java.util.concurrent.LinkedBlockingQueue; <nl> 
mmm StandardRoutingEngineTest.java <nl> ppp StandardRoutingEngineTest.java <nl> + import org.apache.shardingsphere.core.metadata.table.TableMetaData; <nl> - new GroupBy(Collections.<OrderByItem>emptyList(), 0), new OrderBy(Collections.<OrderByItem>emptyList(), false), new SelectItems(0, 0, false, Collections.<SelectItem>emptyList()), <nl> 
mmm InsertColumnValuesTest.java <nl> ppp InsertColumnValuesTest.java <nl> - package org.apache.shardingsphere.core.optimize; <nl> + package org.apache.shardingsphere.core.optimize.result; <nl> - import org.apache.shardingsphere.core.optimize.result.InsertColumnValues; <nl> new file <nl> ppp EncryptInsertOptimizeEngineTest.java <nl> 
mmm RuleSchemaMetaData.java <nl> ppp RuleSchemaMetaData.java <nl> + import java.util.HashMap; <nl> + public SchemaMetaData getSchemaMetaData() { <nl> + SchemaMetaData result = new SchemaMetaData(new HashMap<>()); <nl> + unconfiguredSchemaMetaDataMap.values().forEach(result::merge); <nl> + result.merge(configuredSchemaMetaData); <nl> 
mmm SQLLogger.java <nl> ppp SQLLogger.java <nl> + public static void logSQL(final String encryptSQL){ <nl> + log("Rule Type: encrypt"); <nl> + log("SQL: {}", encryptSQL); <nl> + } <nl> - return new EncryptDataSource(dataSource, encryptRuleConfiguration); <nl> + return createDataSource(dataSource, encryptRuleConfiguration, new Properties()); <nl> 
mmm InsertOptimizeEngine.java <nl> ppp InsertOptimizeEngine.java <nl> - String assistedColumnName = shardingRule.getTableRule(insertStatement.getTables().getSingleTableName()).getEncryptorStrategy().getAssistedQueryColumn(columnName).get(); <nl> + String assistedColumnName = shardingRule.getTableRule(insertStatement.getTables().getSingleTableName()).getShardingEncryptorStrategy().getAssistedQueryColumn(columnName).get(); <nl> 
deleted file <nl> mmm ShardingNamespaceHandler.java <nl> - package io.shardingjdbc.spring.namespace.handler; <nl> - import io.shardingjdbc.spring.namespace.constants.ShardingJdbcDataSourceBeanDefinitionParserTag; <nl> - import io.shardingjdbc.spring.namespace.constants.ShardingJdbcStrategyBeanDefinitionParserTag; <nl> 
mmm EncryptSQLRewriter.java <nl> ppp EncryptSQLRewriter.java <nl> - package org.apache.shardingsphere.core.rewrite.engine; <nl> + package org.apache.shardingsphere.core.rewrite.rewriter; <nl> - import org.apache.shardingsphere.core.parse.sql.statement.dml.InsertStatement; <nl> - import org.apache.shardingsphere.core.parse.sql.token.Substitutable; <nl> 
mmm EncryptInsertOptimizeEngine.java <nl> ppp EncryptInsertOptimizeEngine.java <nl> + import com.google.common.base.Strings; <nl> - import java.util.Collection; <nl> - import java.util.LinkedList; <nl> - package org.apache.shardingsphere.core.optimize.engine.sharding; <nl> + package org.apache.shardingsphere.core.optimize; <nl> 
mmm ShardingProxy.java <nl> ppp ShardingProxy.java <nl> - if (ruleRegistry.isProxyBackendUseNio()) { <nl> + if (ruleRegistry.isWithoutJdbc()) { <nl> - if (ruleRegistry.isProxyBackendUseNio()) { <nl> + if (ruleRegistry.isWithoutJdbc()) { <nl> mmm RuleRegistry.java <nl> ppp RuleRegistry.java <nl> + private final boolean withoutJdbc = false; <nl> 
mmm QueryOptimizeEngineTest.java <nl> ppp QueryOptimizeEngineTest.java <nl> - package org.apache.shardingsphere.core.optimize.engine.sharding; <nl> + package org.apache.shardingsphere.core.optimize; <nl> mmm EncryptRuleConfigurationYamlSwapper.java <nl> ppp EncryptRuleConfigurationYamlSwapper.java <nl> - if (null != yamlEncryptRuleConfiguration.getDefaultEncryptor()) { <nl> 
mmm OpenTracingSQLExecutionHookTest.java <nl> ppp OpenTracingSQLExecutionHookTest.java <nl> - import io.shardingsphere.core.spi.executor.SPISQLExecutionHook; <nl> - import io.shardingsphere.core.spi.executor.SQLExecutionHook; <nl> + import io.shardingsphere.spi.executor.SPISQLExecutionHook; <nl> + import io.shardingsphere.spi.executor.SQLExecutionHook; <nl> 
mmm ShardingStatement.java <nl> ppp ShardingStatement.java <nl> - statementExecutorWrappers.add(new StatementExecutorWrapper(statement, each)); <nl> + statementExecutorWrappers.add(new StatementExecutorWrapper(routeResult.getSqlStatement().getType(), statement, each)); <nl> mmm ShardingPreparedStatement.java <nl> 
mmm ShardingInsertOptimizeEngine.java <nl> ppp ShardingInsertOptimizeEngine.java <nl> + import org.apache.shardingsphere.core.optimize.statement.sharding.dml.insert.ShardingInsertColumns; <nl> - import java.util.LinkedHashSet; <nl> - InsertOptimizeResultUnit result = new InsertOptimizeResultUnit(columnNames, insertValues, parameters, startIndexOfAppendedParameters); <nl> 
mmm XAShardingTransactionEngineTest.java <nl> ppp XAShardingTransactionEngineTest.java <nl> - import io.shardingsphere.transaction.xa.jta.connection.ShardingXAConnection; <nl> - import io.shardingsphere.transaction.xa.jta.datasource.ShardingXADataSource; <nl> + import io.shardingsphere.transaction.xa.jta.connection.SingleXAConnection; <nl> 
mmm ShardingTableMetaData.java <nl> ppp ShardingTableMetaData.java <nl> - private final Map<String, TableMetaData> tableMetaDataMap; <nl> + private final Map<String, TableMetaData> tables; <nl> - return tableMetaDataMap.get(logicTableName); <nl> + return tables.get(logicTableName); <nl> - tableMetaDataMap.put(logicTableName, tableMetaData); <nl> 
mmm SQLRouteResult.java <nl> ppp SQLRouteResult.java <nl> + import org.apache.shardingsphere.core.keygen.GeneratedKey; <nl> - import org.apache.shardingsphere.core.routing.router.sharding.GeneratedKey; <nl> mmm SQLRewriteEngine.java <nl> ppp SQLRewriteEngine.java <nl> - import com.google.common.base.Function; <nl> 
mmm DistinctQueryResultTest.java <nl> ppp DistinctQueryResultTest.java <nl> - import com.google.common.collect.HashMultimap; <nl> - import com.google.common.collect.Multimap; <nl> + import static org.mockito.Mockito.doReturn; <nl> + private QueryResultMetaData queryResultMetaData; <nl> + queryResultMetaData = getQueryResultMetaData(); <nl> 
new file <nl> ppp SelectItemPrefixTokenGenerator.java <nl> + package org.apache.shardingsphere.core.rewrite.token.generator; <nl> + import com.google.common.base.Optional; <nl> + import org.apache.shardingsphere.core.parse.sql.segment.dml.SelectItemsSegment; <nl> + import org.apache.shardingsphere.core.parse.sql.segment.dml.item.AggregationDistinctSelectItemSegment; <nl> 
deleted file <nl> mmm RawJdbcYamlShardingDatabaseMain.java <nl> - package io.shardingsphere.example.jdbc.yaml; <nl> - import io.shardingsphere.example.jdbc.yaml.repository.RawJdbcYamlRepository; <nl> - import io.shardingsphere.core.api.ShardingDataSourceFactory; <nl> - import javax.sql.DataSource; <nl> - import java.io.File; <nl> 
mmm IndexFiller.java <nl> ppp IndexFiller.java <nl> - ((CreateIndexStatement) sqlStatement).setIndex(sqlSegment); <nl> + ((CreateIndexStatement) sqlStatement).setIndexName(sqlSegment.getIndexName()); <nl> - ((DropIndexStatement) sqlStatement).getIndexes().add(sqlSegment); <nl> + ((DropIndexStatement) sqlStatement).setIndexName(sqlSegment.getIndexName()); <nl> 
mmm SingleAlgorithm.java <nl> ppp SingleAlgorithm.java <nl> - import java.util.Collection; <nl> + import java.util.Collection; <nl> - @Override <nl> - public Collection<String> doInSharding(final Collection availableTargetNames, final ShardingValue shardingValue) { <nl> - return null; <nl> - } <nl> mmm MultipleKeysShardingAlgorithm.java <nl> 
mmm RandomGeneratorTest.java <nl> ppp RandomGeneratorTest.java <nl> - package io.shardingsphere.proxy.util; <nl> + package io.shardingsphere.proxy.transport.mysql.packet.handshake; <nl> - import io.shardingsphere.proxy.transport.mysql.packet.handshake.RandomGenerator; <nl> new file <nl> ppp AuthPluginDataTest.java <nl> 
mmm SQLParserEngine.java <nl> ppp SQLParserEngine.java <nl> - import lombok.RequiredArgsConstructor; <nl> - import org.antlr.v4.runtime.tree.ParseTree; <nl> - import org.apache.shardingsphere.sql.parser.cache.SQLParseResultCache; <nl> - import org.apache.shardingsphere.sql.parser.core.parser.SQLParserExecutor; <nl> 
mmm EncryptDataSourceBeanDefinitionParserTag.java <nl> ppp EncryptDataSourceBeanDefinitionParserTag.java <nl> - public static final String ROOT_TAG = "data-source"; <nl> - public static final String DATA_SOURCE_NAME_TAG = "data-source-name"; <nl> - public static final String PROPS_TAG = "props"; <nl> mmm DataSourceNamespaceHandler.java <nl> 
deleted file <nl> mmm JPACountryService.java <nl> - package org.apache.shardingsphere.example.common.jpa.service; <nl> - import org.apache.shardingsphere.example.common.service.CommonService; <nl> - public interface JPACountryService extends CommonService { <nl> - } <nl> deleted file <nl> mmm Country.java <nl> 
deleted file <nl> mmm InsertColumnValues.java <nl> - package org.apache.shardingsphere.core.optimize.result; <nl> - import lombok.Getter; <nl> - import org.apache.shardingsphere.core.exception.ShardingException; <nl> - import org.apache.shardingsphere.core.parse.old.lexer.token.DefaultKeyword; <nl> - import org.apache.shardingsphere.core.parse.old.parser.expression.SQLExpression; <nl> 
mmm FunctionExpressionSegment.java <nl> ppp FunctionExpressionSegment.java <nl> + import lombok.Setter; <nl> + package io.shardingsphere.core.parsing.parser.constant; <nl> + import lombok.AccessLevel; <nl> + import lombok.RequiredArgsConstructor; <nl> + @RequiredArgsConstructor(access = AccessLevel.PRIVATE) <nl> 
deleted file <nl> mmm Constants.java <nl> - package com.saaavsaaa.client.untils; <nl> - import java.nio.charset.Charset; <nl> - public final class Constants { <nl> - public static final int VERSION = -1; <nl> - public static final byte[] NOTHING_DATA = new byte[0]; <nl> - public static final String NOTHING_VALUE = ""; <nl> 
mmm LeafSegmentKeyGeneratorTest.java <nl> ppp LeafSegmentKeyGeneratorTest.java <nl> - public class LeafSegmentKeyGeneratorTest { <nl> + public final class LeafSegmentKeyGeneratorTest { <nl> deleted file <nl> mmm LocalMasterSlaveRuleCondition.java <nl> - package org.apache.shardingsphere.shardingjdbc.orchestration.spring.boot.masterslave; <nl> 
mmm ConsensusReplicationSQLRouter.java <nl> ppp ConsensusReplicationSQLRouter.java <nl> + import org.apache.shardingsphere.infra.schema.ShardingSphereSchema; <nl> - public RouteContext createRouteContext(final LogicSQL logicSQL, final ConsensusReplicationRule rule, final ConfigurationProperties props) { <nl> 
mmm OrchestrationShardingSphereDataSourceTest.java <nl> ppp OrchestrationShardingSphereDataSourceTest.java <nl> + import org.apache.shardingsphere.kernel.context.SchemaContexts; <nl> - private static JDBCOrchestrationSchemaContexts schemaContexts; <nl> + private static JDBCOrchestrationSchemaContexts orchestrationSchemaContexts; <nl> 
mmm SQLServerCreateLoginStatement.java <nl> ppp SQLServerCreateLoginStatement.java <nl> - import org.apache.shardingsphere.sql.parser.sql.common.statement.dcl.CreateLoginStatement; <nl> + import org.apache.shardingsphere.sql.parser.sql.common.statement.AbstractSQLStatement; <nl> - public final class SQLServerCreateLoginStatement extends CreateLoginStatement implements DCLStatement, SQLServerStatement { <nl> 
new file <nl> ppp AbstractFromWhereFiller.java <nl> + package io.shardingsphere.core.parsing.antlr.filler.impl; <nl> + import com.google.common.base.Optional; <nl> + import io.shardingsphere.core.constant.ShardingOperator; <nl> + import io.shardingsphere.core.metadata.table.ShardingTableMetaData; <nl> + import io.shardingsphere.core.parsing.antlr.filler.SQLStatementFiller; <nl> 
new file <nl> ppp GlobalExceptionHandler.java <nl> + package io.shardingsphere.shardingui.web.advice; <nl> + import io.shardingsphere.shardingui.common.exception.ShardingUIException; <nl> + import io.shardingsphere.shardingui.web.response.ResponseResult; <nl> + import io.shardingsphere.shardingui.web.response.ResponseResultUtil; <nl> 
deleted file <nl> mmm ConsensusReplicationExecutorCallback.java <nl> - package org.apache.shardingsphere.replication.consensus.execute.callback; <nl> - import java.sql.SQLException; <nl> - import java.util.Collection; <nl> - import java.util.Map; <nl> - public interface ConsensusReplicationExecutorCallback<I, O> { <nl> 
new file <nl> ppp ClusterConfiguration.java <nl> + package org.apache.shardingsphere.cluster.configuration.config; <nl> + import lombok.Getter; <nl> + import lombok.Setter; <nl> + @Getter <nl> + @Setter <nl> + public final class ClusterConfiguration { <nl> + private HeartBeatConfiguration heartBeat; <nl> + } <nl> 
mmm InstanceListenerManager.java <nl> ppp InstanceListenerManager.java <nl> - public void watchSharding() { <nl> - regCenter.watch(stateNode.getInstancesNodeFullPath(OrchestrationInstance.getInstance().getInstanceId()), new EventListener() { <nl> - @Override <nl> - public void onChange(final DataChangedEvent event) { <nl> 
mmm MySQLAlterTableParser.java <nl> ppp MySQLAlterTableParser.java <nl> - import io.shardingsphere.core.parsing.parser.sql.ddl.alter.AbstractAlterParser; <nl> + import io.shardingsphere.core.parsing.parser.sql.ddl.alter.table.AbstractAlterTableParser; <nl> - public final class MySQLAlterParser extends AbstractAlterParser { <nl> 
mmm MasterSlaveLoadBalanceAlgorithmTypeTest.java <nl> ppp MasterSlaveLoadBalanceAlgorithmTypeTest.java <nl> - package org.apache.shardingsphere.core.encrypt.encryptor; <nl> + package org.apache.shardingsphere.api.algorithm.masterslave; <nl> - public interface ShardingQueryAssistedEncryptor extends ShardingEncryptor { <nl> 
mmm DataSetIndex.java <nl> ppp DataSetIndex.java <nl> + import lombok.Setter; <nl> + @Setter <nl> mmm JDBCResourceManager.java <nl> ppp JDBCResourceManager.java <nl> - package io.shardingsphere.proxy.backend.resource; <nl> + package io.shardingsphere.proxy.backend.common.jdbc; <nl> - import lombok.Setter; <nl> 
new file <nl> ppp OrchestrationSpringBootDataJpaMain.java <nl> + package io.shardingjdbc.example.orchestration.spring.boot.jpa; <nl> + import io.shardingjdbc.example.orchestration.spring.boot.jpa.service.DemoService; <nl> + import org.springframework.boot.SpringApplication; <nl> + import org.springframework.boot.autoconfigure.SpringBootApplication; <nl> 
mmm ColumnDefinition41PacketTest.java <nl> ppp ColumnDefinition41PacketTest.java <nl> + import static org.hamcrest.CoreMatchers.is; <nl> + import static org.junit.Assert.assertThat; <nl> - new ColumnDefinition41Packet(1, resultSetMetaData, 1).write(payload); <nl> + ColumnDefinition41Packet actual = new ColumnDefinition41Packet(1, resultSetMetaData, 1); <nl> 
mmm MultiplePermissionsReport.java <nl> ppp MultiplePermissionsReport.java <nl> - public final class PermissionsReport { <nl> + public final class MultiplePermissionsReport { <nl> - PermissionsReport() { <nl> + MultiplePermissionsReport() { <nl> mmm CompositeMultiplePermissionsListener.java <nl> ppp CompositeMultiplePermissionsListener.java <nl> 
mmm AlterExpression.java <nl> ppp AlterExpression.java <nl> - public void setConstraintIfExists(boolean constraintIfExists) { <nl> + public void setConstraintIfExists( boolean constraintIfExists ) { <nl> - if (operation == AlterOperation.CHANGE) { <nl> - if (optionalSpecifier != null) { <nl> + if(operation == AlterOperation.CHANGE) { <nl> 
mmm AlterTest.java <nl> ppp AlterTest.java <nl> + @Test <nl> + public void testAlterTableIndex586() throws Exception { <nl> + Statement result = CCJSqlParserUtil.parse("ALTER TABLE biz_add_fee DROP INDEX operation_time, " + <nl> + "ADD UNIQUE INDEX operation_time (`operation_time`, `warehouse_code`, `customerid`, `fees_type`, `external_no`) " + <nl> 
new file <nl> ppp TestFeignDecorator.java <nl> + package io.github.resilience4j.feign.test; <nl> + import java.lang.reflect.Method; <nl> + import feign.InvocationHandlerFactory.MethodHandler; <nl> + import feign.Target; <nl> + import io.github.resilience4j.feign.FeignDecorator; <nl> + import io.vavr.CheckedFunction1; <nl> 
mmm TaggedRateLimiterMetricsPublisherTest.java <nl> ppp TaggedRateLimiterMetricsPublisherTest.java <nl> + @Test <nl> + public void testReplaceNewMeter() { <nl> + RateLimiter oldOne = RateLimiter.of("backendC", RateLimiterConfig.ofDefaults()); <nl> + taggedRateLimiterMetricsPublisher.addMetrics(meterRegistry, oldOne); <nl> 
new file <nl> ppp FilterUserFragment.java <nl> + package org.qii.weiciyuan.ui.preference.filter; <nl> + import org.qii.weiciyuan.support.database.FilterDBTask; <nl> + import java.util.List; <nl> + import java.util.Set; <nl> + public class FilterUserFragment extends AbstractFilterFragment { <nl> + @Override <nl> 
mmm TouchExpansionTestInternalNode.java <nl> ppp TouchExpansionTestInternalNode.java <nl> - public class TouchExpansionTestInternalNode extends InternalNode { <nl> + public class TouchExpansionTestInternalNode extends DefaultInternalNode { <nl> - int getTouchExpansionLeft() { <nl> + public int getTouchExpansionLeft() { <nl> 
mmm ComponentTree.java <nl> ppp ComponentTree.java <nl> - void updateState(String componentKey, StateUpdate stateUpdate) { <nl> + void updateStateSync(String componentKey, StateUpdate stateUpdate) { <nl> mmm SectionContext.java <nl> ppp SectionContext.java <nl> - public void updateState(StateUpdate stateUpdate) { <nl> 
mmm ComponentTree.java <nl> ppp ComponentTree.java <nl> - private LithoView mComponentView; <nl> + private LithoView mLithoView; <nl> - if (mComponentView != null) { <nl> - mComponentView.setMountStateDirty(); <nl> + if (mLithoView != null) { <nl> + mLithoView.setMountStateDirty(); <nl> - int viewWidth = mComponentView.getMeasuredWidth(); <nl> 
mmm IncrementalVisibilityEventsTest.java <nl> ppp IncrementalVisibilityEventsTest.java <nl> - import com.facebook.rendercore.visibility.VisibilityOutputsExtension; <nl> + import com.facebook.rendercore.visibility.VisibilityMountExtension; <nl> - if (extensions.get(i) instanceof VisibilityOutputsExtension) { <nl> 
mmm ComponentContext.java <nl> ppp ComponentContext.java <nl> - InternalNode newLayoutBuilder( <nl> - Component component, @AttrRes int defStyleAttr, @StyleRes int defStyleRes) { <nl> - final InternalNode layoutCreatedInWillRender = component.consumeLayoutCreatedInWillRender(); <nl> - if (layoutCreatedInWillRender != null) { <nl> 
mmm ComponentHostTest.java <nl> ppp ComponentHostTest.java <nl> - component, <nl> - null, <nl> - view, <nl> - null, <nl> - null, <nl> - null, <nl> - 0, <nl> - IMPORTANT_FOR_ACCESSIBILITY_AUTO); <nl> + component, null, view, null, null, null, 0, IMPORTANT_FOR_ACCESSIBILITY_AUTO, null); <nl> - IMPORTANT_FOR_ACCESSIBILITY_AUTO); <nl> 
mmm SectionsProcessorIntegrationTest.java <nl> ppp SectionsProcessorIntegrationTest.java <nl> - @Test <nl> - public void compilesGroupSpecWithoutError() { <nl> - final JavaFileObject javaFileObject = <nl> - JavaFileObjects.forResource( <nl> - Resources.getResource(getClass(), RES_PREFIX + "SimpleGroupSectionSpec.java")); <nl> 
mmm SpecModel.java <nl> ppp SpecModel.java <nl> - ImmutableList<PropModel> getRawProps(); <nl> mmm TestLayoutSpecModelFactoryTest.java <nl> ppp TestLayoutSpecModelFactoryTest.java <nl> - .contains("child", atIndex(0)) <nl> - .contains("i", atIndex(1)) <nl> - .contains("s", atIndex(2)) <nl> - .contains("size", atIndex(3)); <nl> 
mmm GroupSectionSpecModel.java <nl> ppp GroupSectionSpecModel.java <nl> - .superclass( <nl> - ParameterizedTypeName.get(SectionClassNames.SECTION, getComponentTypeName())) <nl> + .superclass(SectionClassNames.SECTION) <nl> mmm BuilderGeneratorTest.java <nl> ppp BuilderGeneratorTest.java <nl> - @Prop Section<?> section, <nl> 
mmm EventValidationTest.java <nl> ppp EventValidationTest.java <nl> - "Param must be annotated with one of @FromEvent, @Prop, @InjectProp, @TreeProp, @State or @Param."); <nl> + "Param must be annotated with one of @FromEvent, @Prop, @InjectProp, @TreeProp, @CachedValue, @State or @Param."); <nl> mmm DelegateMethodValidation.java <nl> 
mmm LayoutSpecModel.java <nl> ppp LayoutSpecModel.java <nl> - ImmutableList<UpdateStateMethodModel> updateStateMethods, <nl> + ImmutableList<SpecMethodModel<UpdateStateMethod, Void>> updateStateMethods, <nl> - public ImmutableList<UpdateStateMethodModel> getUpdateStateMethods() { <nl> + public ImmutableList<SpecMethodModel<UpdateStateMethod, Void>> getUpdateStateMethods() { <nl> 
mmm ComponentContext.java <nl> ppp ComponentContext.java <nl> - import com.facebook.litho.LayoutState.LayoutStateReferenceWrapper; <nl> + import com.facebook.litho.LayoutState.LayoutStateContext; <nl> - return mLayoutStateReferenceWrapper != null <nl> - && mLayoutStateReferenceWrapper.getLayoutState() != null; <nl> 
mmm RecyclerBinderTest.java <nl> ppp RecyclerBinderTest.java <nl> - import static org.mockito.Matchers.anyString; <nl> - import com.facebook.litho.ComponentsLogger; <nl> + import com.facebook.litho.ComponentsReporter; <nl> + import com.facebook.litho.testing.logging.TestComponentsReporter; <nl> + final TestComponentsReporter reporter = new TestComponentsReporter(); <nl> 
mmm BuilderGenerator.java <nl> ppp BuilderGenerator.java <nl> - .returns(getBuilderType(specModel)) <nl> - .addCode(codeBlock); <nl> + .returns(getBuilderType(specModel)); <nl> + if (prop.isCommonProp()) { <nl> + builder.addAnnotation(Override.class); <nl> + final CodeBlock.Builder superCodeBlock = CodeBlock.builder().add("super.$L(", name); <nl> 
mmm ComponentInfo.java <nl> ppp ComponentInfo.java <nl> - private Component mComponent; <nl> - private SimpleArrayMap<String, Object> mCustomAttributes; <nl> + private final Component mComponent; <nl> + private final SimpleArrayMap<String, Object> mCustomAttributes; <nl> mmm LogEvent.java <nl> ppp LogEvent.java <nl> 
mmm SectionTree.java <nl> ppp SectionTree.java <nl> - logger.betterLog(logEvent); <nl> + logger.logPerfEvent(logEvent); <nl> - logger.betterLog(logEvent); <nl> + logger.logPerfEvent(logEvent); <nl> - logger.betterLog(logEvent); <nl> + logger.logPerfEvent(logEvent); <nl> mmm DataDiffSectionSpec.java <nl> ppp DataDiffSectionSpec.java <nl> 
mmm LearningContainersComponentSpec.java <nl> ppp LearningContainersComponentSpec.java <nl> - package com.facebook.samples.litho.examples.modules; <nl> + package com.facebook.samples.lithocodelab.examples.modules; <nl> mmm LearningClickEventsComponentSpec.java <nl> ppp LearningClickEventsComponentSpec.java <nl> 
mmm Storage.java <nl> ppp Storage.java <nl> - public Storage(Volume.VolumeFactory volFac, boolean disableLocks, boolean appendOnly, <nl> + public Storage(Volume.Factory volFac, boolean disableLocks, boolean appendOnly, <nl> mmm VolumeTest.java <nl> ppp VolumeTest.java <nl> - Volume b = new Volume.MemoryVolume(false); <nl> 
mmm StoreWAL.java <nl> ppp StoreWAL.java <nl> - throw new AssertionError(); <nl> + throw new DBException.DataCorruption(); <nl> - throw new AssertionError(); <nl> + throw new DBException.DataCorruption(); <nl> - throw new AssertionError(); <nl> + throw new DBException.DataCorruption(); <nl> - throw new AssertionError(); <nl> 
mmm Volume.java <nl> ppp Volume.java <nl> + import java.util.concurrent.atomic.AtomicBoolean; <nl> - protected volatile boolean closed; <nl> + protected final AtomicBoolean closed = new AtomicBoolean(false); <nl> - return closed; <nl> + return closed.get(); <nl> - if(!closed <nl> + if(!closed.get() <nl> mmm SingleByteArrayVol.java <nl> 
mmm CompressLZFSerializer.java <nl> ppp CompressLZFSerializer.java <nl> - JdbmUtil.packInt(out, 0); <nl> + Utils.packInt(out, 0); <nl> - int expendedLen = JdbmUtil.unpackInt(in); <nl> + int expendedLen = Utils.unpackInt(in); <nl> mmm StorageTransTest.java <nl> ppp StorageTransTest.java <nl> - if(!JdbmUtil.isWindows()) <nl> 
mmm BindTest.java <nl> ppp BindTest.java <nl> - Set<Tuple2<Integer,String>> sec = new TreeSet<Tuple2<Integer, String>>(); <nl> + Set<Object[]> sec = new TreeSet(Fun.COMPARABLE_ARRAY_COMPARATOR); <nl> - assert(sec.contains(t2(2,"d"))); <nl> - assert(sec.contains(t2(2,"v"))); <nl> - assert(sec.contains(t2(2,"e"))); <nl> 
mmm FlowAdapters.java <nl> ppp FlowAdapters.java <nl> - public final class ReactiveStreamsFlowBridge { <nl> + public final class FlowAdapters { <nl> - private ReactiveStreamsFlowBridge() { <nl> + private FlowAdapters() { <nl> mmm SingleElementFlowPublisherTest.java <nl> ppp SingleElementFlowPublisherTest.java <nl> 
mmm AnnotatedTypeNameTest.java <nl> ppp AnnotatedTypeNameTest.java <nl> - String expected = "@java.lang.Override @" + NN + " java.lang.String"; <nl> + String expected = "@" + NN + " @java.lang.Override java.lang.String"; <nl> mmm AnnotationSpec.java <nl> ppp AnnotationSpec.java <nl> - return addMember(name, CodeBlock.builder().add(format, args).build()); <nl> 
mmm Types.java <nl> ppp Types.java <nl> - import com.google.common.base.Function; <nl> - import com.google.common.collect.FluentIterable; <nl> - import com.google.common.collect.ImmutableList; <nl> - import com.google.common.collect.Iterables; <nl> + import java.util.Collection; <nl> + import java.util.Collections; <nl> 
new file <nl> ppp ParameterWriterTest.java <nl> + package com.squareup.javawriter; <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> + import org.junit.runners.JUnit4; <nl> + import static com.google.common.truth.Truth.assertThat; <nl> + @RunWith(JUnit4.class) <nl> + public final class ParameterWriterTest { <nl> 
mmm RuntimeOption.java <nl> ppp RuntimeOption.java <nl> - import com.yanzhenjie.permission.runtime.setting.SettingRequest; <nl> - SettingRequest setting(); <nl> mmm AlertWindowSettingPage.java <nl> ppp AlertWindowSettingPage.java <nl> - public class LSettingPage { <nl> + public class AlertWindowSettingPage { <nl> 
deleted file <nl> mmm SimpleSessionManagerListener.java <nl> - package com.naman14.timber.cast; <nl> - import com.google.android.gms.cast.framework.Session; <nl> - import com.google.android.gms.cast.framework.SessionManagerListener; <nl> - public class SimpleSessionManagerListener implements SessionManagerListener { <nl> 
mmm EurekaModuleTest.java <nl> ppp EurekaModuleTest.java <nl> + import com.netflix.governator.guice.LifecycleInjectorMode; <nl> - LifecycleInjectorBuilder builder = LifecycleInjector.builder(); <nl> + LifecycleInjectorBuilder builder = LifecycleInjector.builder().withMode(LifecycleInjectorMode.SIMULATED_CHILD_INJECTORS); <nl> 
mmm ResponseCache.java <nl> ppp ResponseCache.java <nl> + private final com.netflix.servo.monitor.Timer serializeAllAppsWithRemoteRegionTimer = Monitors <nl> + .newTimer("serialize-all_remote_region"); <nl> + private final com.netflix.servo.monitor.Timer serializeDeltaAppsWithRemoteRegionTimer = Monitors <nl> 
mmm ApplicationInfoManager.java <nl> ppp ApplicationInfoManager.java <nl> + import javax.inject.Singleton; <nl> - import com.netflix.governator.guice.lazy.FineGrainedLazySingleton; <nl> - @FineGrainedLazySingleton <nl> + @Singleton <nl> mmm MyDataCenterInstanceConfig.java <nl> ppp MyDataCenterInstanceConfig.java <nl> 
mmm LegacyClusterResolver.java <nl> ppp LegacyClusterResolver.java <nl> - logger.warn("Invalid eureka server URI: {}; removing from the server pool", serviceUrl); <nl> + logger.warn("Invalid eureka server URI: ; removing from the server pool", serviceUrl); <nl> mmm Application.java <nl> ppp Application.java <nl> 
mmm ResponseCache.java <nl> ppp ResponseCache.java <nl> - public final static String ALL_APPS = "ALL_APPS"; <nl> - public final static String ALL_APPS_DELTA = "ALL_APPS_DELTA"; <nl> + public static final String ALL_APPS = "ALL_APPS"; <nl> + public static final String ALL_APPS_DELTA = "ALL_APPS_DELTA"; <nl> 
mmm DefaultErrorHandler.java <nl> ppp DefaultErrorHandler.java <nl> - package com.github.pwittchen.reactivenetwork.library.internet.observing.error; <nl> + package com.github.pwittchen.reactivenetwork.library.rx2.internet.observing.error; <nl> - import static com.github.pwittchen.reactivenetwork.library.ReactiveNetwork.LOG_TAG; <nl> 
mmm TrieST.java <nl> ppp TrieST.java <nl> - * @throws NullPointerException if {@code key} is {@code null} <nl> + * @throws IllegalArgumentException if {@code key} is {@code null} <nl> + if (key == null) throw new IllegalArgumentException("argument to get() is null"); <nl> - * @throws NullPointerException if {@code key} is {@code null} <nl> 
mmm FieldNode.java <nl> ppp FieldNode.java <nl> + import jadx.dex.attributes.AttrNode; <nl> + import jadx.dex.info.ClassInfo; <nl> + import jadx.dex.instructions.args.ArgType; <nl> - public class FieldNode extends FieldInfo { <nl> + public class FieldNode extends AttrNode { <nl> + 	private final String name; <nl> 
mmm DexClassData.java <nl> ppp DexClassData.java <nl> + 		methodData.setMethodRef(new DexMethodRef()); <nl> - 		methodData.setParentClassType(getType()); <nl> - 			in.fillMethodData(methodData, mthIdx); <nl> + 			DexMethodRef methodRef = methodData.getMethodRef(); <nl> + 			methodRef.reset(); <nl> + 			in.initMethodRef(mthIdx, methodRef); <nl> 
mmm ClassCodeContentPanel.java <nl> ppp ClassCodeContentPanel.java <nl> + 	public CodePanel getJavaCodePanel() { <nl> + 		return javaCodePanel; <nl> + 	} <nl> mmm CacheObject.java <nl> ppp CacheObject.java <nl> + import jadx.gui.jobs.RefreshJob; <nl> + 	private RefreshJob refreshJob; <nl> + 	public RefreshJob getRefreshJob() { <nl> 
mmm StaticCompiler.java <nl> ppp StaticCompiler.java <nl> - 		public JavaFileObject getJavaFileForOutput(Location location, String className, JavaFileObject.Kind kind, FileObject sibling) throws IOException { <nl> + 		public JavaFileObject getJavaFileForOutput(Location location, String className, JavaFileObject.Kind kind, <nl> 
mmm PrepareForCodeGen.java <nl> ppp PrepareForCodeGen.java <nl> mmm Utils.java <nl> ppp Utils.java <nl> - 	@SuppressWarnings("unchecked") <nl> mmm TestAnnotations.java <nl> ppp TestAnnotations.java <nl> - 		private static @interface A { <nl> + 		private @interface A { <nl> - 		private static @interface V { <nl> 
mmm Res9patchStreamDecoder.java <nl> ppp Res9patchStreamDecoder.java <nl> - import org.apache.commons.io.IOUtils; <nl> + import javax.imageio.ImageIO; <nl> - import javax.imageio.ImageIO; <nl> + import org.apache.commons.io.IOUtils; <nl> - public void decode(InputStream in, OutputStream out) throws JadxException { <nl> 
mmm CompileTimeConstantChecker.java <nl> ppp CompileTimeConstantChecker.java <nl> - * {@link com.google.common.annotations.CompileTimeConstant} type annotation, the <nl> + * {@link com.google.errorprone.annotations.CompileTimeConstant} type annotation, the <nl> - * {@link com.google.common.annotations.CompileTimeConstant} annotation.</li> <nl> 
mmm AnnotationHasElementWithValueTest.java <nl> ppp AnnotationHasElementWithValueTest.java <nl> - public class AnnotationHasArgumentWithValueTest extends CompilerBasedTest { <nl> + public class AnnotationHasElementWithValueTest extends CompilerBasedTest { <nl> - assertCompiles(annotationMatches(true, new AnnotationHasArgumentWithValue("stuff", stringLiteral("y")))); <nl> 
mmm IndexedPosition.java <nl> ppp IndexedPosition.java <nl> + import com.sun.tools.javac.tree.EndPosTable; <nl> - public abstract class AbstractIndexedPosition implements DiagnosticPosition { <nl> + public class IndexedPosition implements DiagnosticPosition { <nl> - public AbstractIndexedPosition(int startPos, int endPos) { <nl> 
mmm ErrorProneTestCompiler.java <nl> ppp ErrorProneTestCompiler.java <nl> + public Builder search(Scanner errorProneScanner) { <nl> + wrappedCompilerBuilder.search(errorProneScanner); <nl> + return this; <nl> + } <nl> mmm ErrorProneJavaCompiler.java <nl> ppp ErrorProneJavaCompiler.java <nl> + import static com.google.errorprone.ErrorProneScanner.EnabledPredicate.DEFAULT_CHECKS; <nl> 
mmm StaticAccessedFromInstancePositiveCase2.java <nl> ppp StaticAccessedFromInstancePositiveCase2.java <nl> + package com.google.errorprone.bugpatterns; <nl> mmm GuiceAssistedParametersNegativeCases.java <nl> ppp GuiceAssistedParametersNegativeCases.java <nl> + package com.google.errorprone.bugpatterns; <nl> 
mmm DeadExceptionChecker.java <nl> ppp DeadExceptionChecker.java <nl> - package com.google.errorprone.checkers.dead_exception; <nl> + package com.google.errorprone.checkers; <nl> - import com.google.errorprone.checkers.ErrorChecker; <nl> - import com.google.errorprone.BugPattern; <nl> - import static com.google.errorprone.BugPattern.Category.UNIVERSAL; <nl> 
mmm BugCheckerRefactoringTestHelperTest.java <nl> ppp BugCheckerRefactoringTestHelperTest.java <nl> - import static com.google.errorprone.BugPattern.MaturityLevel.EXPERIMENTAL; <nl> - severity = SUGGESTION, <nl> - maturity = EXPERIMENTAL <nl> + severity = SUGGESTION <nl> - severity = SUGGESTION, <nl> - maturity = EXPERIMENTAL <nl> 
new file <nl> ppp FsFileSource.java <nl> + package com.google.errorprone.apply; <nl> + import java.io.IOException; <nl> + import java.nio.charset.StandardCharsets; <nl> + import java.nio.file.Files; <nl> + import java.nio.file.Path; <nl> + public final class FsFileSource implements FileSource { <nl> + private final Path rootPath; <nl> 
mmm FallThroughSuppression.java <nl> ppp FallThroughSuppression.java <nl> + import static com.google.errorprone.BugPattern.Category.APPLICATION_SPECIFIC; <nl> + import static com.google.errorprone.BugPattern.MaturityLevel.EXPERIMENTAL; <nl> + import static com.google.errorprone.BugPattern.SeverityLevel.WARNING; <nl> 
new file <nl> ppp EventListenerThreadingDecorator.java <nl> + package roboguice.event.eventListener.factory; <nl> + import roboguice.event.EventListener; <nl> + import roboguice.event.EventThread; <nl> + import roboguice.event.eventListener.AsynchronousEventListenerDecorator; <nl> + import roboguice.event.eventListener.UIThreadEventListenerDecorator; <nl> 
mmm RoboListActivity.java <nl> ppp RoboListActivity.java <nl> - public class GuiceListActivity extends ListActivity implements InjectorProvider { <nl> + public class RoboListActivity extends ListActivity implements InjectorProvider { <nl> mmm RoboMapActivity.java <nl> ppp RoboMapActivity.java <nl> - public abstract class GuiceMapActivity extends MapActivity implements InjectorProvider { <nl> 
mmm OnStartEvent.java <nl> ppp OnStartEvent.java <nl> - package roboguice.service.event; <nl> + package roboguice.context.event; <nl> + import android.content.Context; <nl> - public class OnStartEvent {} <nl> + public class OnStartEvent<T extends Context> { <nl> + protected T context; <nl> + public OnStartEvent(T context) { <nl> 
mmm RoboSplashActivity.java <nl> ppp RoboSplashActivity.java <nl> + import android.content.Intent; <nl> mmm RoboPreferenceActivity.java <nl> ppp RoboPreferenceActivity.java <nl> + import android.content.Intent; <nl> mmm RoboExpandableListActivity.java <nl> ppp RoboExpandableListActivity.java <nl> + import android.content.Intent; <nl> 
mmm BaseCommentServiceImpl.java <nl> ppp BaseCommentServiceImpl.java <nl> + import run.halo.app.model.dto.BaseCommentDTO; <nl> + import java.util.stream.Collectors; <nl> - private Comparator<BaseCommentVO> buildCommentComparator(Sort sort) { <nl> + protected Comparator<BaseCommentVO> buildCommentComparator(Sort sort) { <nl> 
mmm BasePostMinimalDTO.java <nl> ppp BasePostMinimalDTO.java <nl> + import run.halo.app.model.enums.PostEditorType; <nl> + private PostEditorType editorType; <nl> mmm OtherProperties.java <nl> ppp OtherProperties.java <nl> + import run.halo.app.model.enums.PostEditorType; <nl> - GLOBAL_ABSOLUTE_PATH_ENABLED("global_absolute_path_enabled", Boolean.class, "true"); <nl> 
mmm AttachmentType.java <nl> ppp AttachmentType.java <nl> - LOCAL(0), <nl> + SERVER(0), <nl> - QNYUN(2); <nl> + QINIUYUN(2); <nl> new file <nl> ppp FileService.java <nl> + package cc.ryanc.halo.service; <nl> + import cc.ryanc.halo.model.support.UploadResult; <nl> + import org.springframework.lang.NonNull; <nl> 
new file <nl> ppp AttachmentAdminOutputDTO.java <nl> + package cc.ryanc.halo.model.dto; <nl> + import cc.ryanc.halo.model.domain.Attachment; <nl> + import cc.ryanc.halo.model.dto.base.AbstractOutputConverter; <nl> + import lombok.Data; <nl> + @Data <nl> + public class AttachmentAdminOutputDTO extends AbstractOutputConverter<AttachmentAdminOutputDTO, Attachment> { <nl> 
mmm SmmsFileHandler.java <nl> ppp SmmsFileHandler.java <nl> - import lombok.ToString; <nl> - result.setFilename(FilenameUtils.getBasename(file.getOriginalFilename())); <nl> + result.setFilename(FilenameUtils.getBasename(Objects.requireNonNull(file.getOriginalFilename()))); <nl> - public boolean supportType(AttachmentType type) { <nl> 
mmm SheetController.java <nl> ppp SheetController.java <nl> - @RestController("PortalSheetController") <nl> + @RestController("ApiContentSheetController") <nl> mmm StatisticDTO.java <nl> ppp StatisticDTO.java <nl> - * @date 3/19/19 <nl> + * @author ryanwang <nl> + * @date 2019-03-19 <nl> - private long postCount; <nl> 
mmm RNSVGDefinitionShadowNode.java <nl> ppp RNSVGDefinitionShadowNode.java <nl> - public int hitTest(Point point, View view, Matrix matrix) { <nl> - return -1; <nl> - } <nl> - @Override <nl> - public int hitTest(Point point, View view) { <nl> + public int hitTest(Point point, Matrix matrix) { <nl> mmm RNSVGGroupShadowNode.java <nl> 
mmm LineShadowNode.java <nl> ppp LineShadowNode.java <nl> - public class RNSVGLineShadowNode extends RNSVGPathShadowNode { <nl> + public class LineShadowNode extends PathShadowNode { <nl> deleted file <nl> mmm RNSVGRenderableViewManager.java <nl> - package com.horcrux.svg; <nl> - import android.view.View; <nl> 
mmm RectShadowNode.java <nl> ppp RectShadowNode.java <nl> - public class RectShadowNode extends PathShadowNode { <nl> + public class RectShadowNode extends RenderableShadowNode { <nl> - @Override <nl> - public void draw(Canvas canvas, Paint paint, float opacity) { <nl> - mPath = getPath(canvas, paint); <nl> 
new file <nl> ppp BaseModelView.java <nl> + package com.airbnb.epoxy; <nl> + import android.content.Context; <nl> + import android.widget.FrameLayout; <nl> + @ModelView(defaultLayout = 1) <nl> + public class BaseModelView extends FrameLayout { <nl> + public BaseModelView(Context context) { <nl> + super(context); <nl> 
mmm TestFieldPropNullOnRecycleOptionViewModel_.java <nl> ppp TestFieldPropNullOnRecycleOptionViewModel_.java <nl> - @Nullable <nl> - public TestFieldPropNullOnRecycleOptionViewModel_ value(final OnModelClickListener<TestFieldPropNullOnRecycleOptionViewModel_, TestFieldPropNullOnRecycleOptionView> value) { <nl> 
mmm JetCacheInterceptor.java <nl> ppp JetCacheInterceptor.java <nl> + @Override <nl> mmm CaffeineCache.java <nl> ppp CaffeineCache.java <nl> + @Override <nl> + @Override <nl> + @Override <nl> mmm FastjsonKeyConvertor.java <nl> ppp FastjsonKeyConvertor.java <nl> + @Override <nl> mmm AbstractCacheBuilder.java <nl> 
mmm Location2IDFullWithEdgesIndex.java <nl> ppp Location2IDFullWithEdgesIndex.java <nl> + import com.graphhopper.util.Helper; <nl> - private DistanceCalc calc = new DistanceCalcEarth(); <nl> + private DistanceCalc calc = Helper.DIST_EARTH; <nl> - calc = new DistancePlaneProjection(); <nl> + calc = Helper.DIST_PLANE; <nl> 
mmm MMapDataAccess.java <nl> ppp MMapDataAccess.java <nl> - int bufferIndex = (int) (bytePos >>> segmentSizePower); <nl> + int bufferIndex = (int) (bytePos >> segmentSizePower); <nl> - int bufferIndex = (int) (bytePos >>> segmentSizePower); <nl> + int bufferIndex = (int) (bytePos >> segmentSizePower); <nl> 
mmm JTSTree.java <nl> ppp JTSTree.java <nl> + public long getEmptyEntries(boolean b) { <nl> + throw new UnsupportedOperationException("Not supported yet."); <nl> + } <nl> mmm QuadTreeSimpleTest.java <nl> ppp QuadTreeSimpleTest.java <nl> - createQuadTree(10).put(10, 10, null); <nl> + createQuadTree(10).add(10, 10, null); <nl> 
mmm VirtualEdgeIteratorState.java <nl> ppp VirtualEdgeIteratorState.java <nl> - if (mode == 3) <nl> + if (mode == 4) { <nl> + if (pointList.getSize() < 3) <nl> + return pointList.clone(false); <nl> + PointList towerNodes = new PointList(2, pointList.is3D()); <nl> + towerNodes.add(pointList, 0); <nl> + towerNodes.add(pointList, pointList.getSize() - 1); <nl> 
mmm AStarTest.java <nl> ppp AStarTest.java <nl> + import com.graphhopper.routing.util.AlgorithmPreparation; <nl> + import com.graphhopper.routing.util.NoOpAlgorithmPreparation; <nl> + import com.graphhopper.routing.util.WeightCalculation; <nl> + import com.graphhopper.routing.util.AlgorithmPreparation; <nl> 
mmm GraphHopperManaged.java <nl> ppp GraphHopperManaged.java <nl> + import com.graphhopper.reader.gtfs.GraphHopperGtfs; <nl> - graphHopper = new GraphHopperOSM(landmarkSplittingFeatureCollection).forServer(); <nl> + if (configuration.has("gtfs.file")) { <nl> + graphHopper = new GraphHopperGtfs(configuration); <nl> 
mmm AStar.java <nl> ppp AStar.java <nl> - import de.jetsli.graph.util.GraphUtility; <nl> mmm DebugDijkstraBidirection.java <nl> ppp DebugDijkstraBidirection.java <nl> - import de.jetsli.graph.storage.Graph; <nl> + import de.jetsli.graph.storage.Graph; <nl> - if (g2 != null) <nl> - mg.plotNode(g2, currLoc, Color.YELLOW); <nl> 
mmm FastestWeightingTest.java <nl> ppp FastestWeightingTest.java <nl> - import com.graphhopper.storage.*; <nl> + import com.graphhopper.storage.Graph; <nl> + import com.graphhopper.storage.GraphBuilder; <nl> + import com.graphhopper.storage.GraphHopperStorage; <nl> + import com.graphhopper.storage.IntsRef; <nl> 
mmm PrepareContractionHierarchiesTest.java <nl> ppp PrepareContractionHierarchiesTest.java <nl> - QueryGraph queryGraph = new QueryGraph(lg); <nl> - queryGraph.lookup(Collections.singletonList(qr)); <nl> + QueryGraph queryGraph = QueryGraph.lookup(lg, Collections.singletonList(qr)); <nl> mmm GraphHopper.java <nl> 
mmm FinishInstruction.java <nl> ppp FinishInstruction.java <nl> - super(FINISH, "", 0, 0, 0, 0, new PointList() <nl> + super(FINISH, "", 0, 0, new PointList() <nl> mmm InstructionListTest.java <nl> ppp InstructionListTest.java <nl> - instructions.add(new Instruction(Instruction.CONTINUE_ON_STREET, "temp", 0, 0, 240, 15000, pl)); <nl> 
new file <nl> ppp OSMFileHeader.java <nl> + package com.graphhopper.reader; <nl> + import javax.xml.stream.XMLStreamConstants; <nl> + import javax.xml.stream.XMLStreamException; <nl> + import javax.xml.stream.XMLStreamReader; <nl> + public class OSMFileHeader extends OSMElement <nl> + { <nl> + public static OSMFileHeader create( long id, XMLStreamReader parser ) throws XMLStreamException <nl> 
mmm Path.java <nl> ppp Path.java <nl> + if (revert && !encoder.isBackward(flags) <nl> + || !revert && !encoder.isForward(flags)) <nl> + throw new IllegalStateException("Calculating time should not require to read speed from edge in wrong direction. " <nl> + + "Reverse:" + revert + ", fwd:" + encoder.isForward(flags) + ", bwd:" + encoder.isBackward(flags)); <nl> 
new file <nl> ppp DijkstraBidirectionRefTest.java <nl> + package de.jetsli.graph.routing; <nl> + import de.jetsli.graph.storage.MemoryGraph; <nl> + import de.jetsli.graph.storage.Graph; <nl> + import org.junit.Test; <nl> + import static org.junit.Assert.*; <nl> + public class DijkstraBidirectionRefTest extends AbstractRoutingAlgorithmTester { <nl> 
mmm GetProduct.java <nl> ppp GetProduct.java <nl> - "personId" <nl> + "productId" <nl> - @XmlRootElement(name = "GetPerson") <nl> - public class GetPerson { <nl> + @XmlRootElement(name = "GetProduct") <nl> + public class GetProduct { <nl> - protected String personId; <nl> + protected String productId; <nl> - public String getPersonId() { <nl> 
mmm UserAdapter.java <nl> ppp UserAdapter.java <nl> + import static org.keycloak.models.utils.Pbkdf2PasswordEncoder.getSalt; <nl> + import java.util.Comparator; <nl> + import java.util.Date; <nl> + if (cred.getType().equals(UserCredentialModel.PASSWORD)) { <nl> + updatePasswordCredential(cred); <nl> + } else { <nl> 
deleted file <nl> mmm MigrationTestExecutionDecider.java <nl> - package org.keycloak.testsuite.arquillian.migration; <nl> - import java.lang.reflect.Method; <nl> - import org.jboss.arquillian.test.spi.execution.ExecutionDecision; <nl> - import org.jboss.arquillian.test.spi.execution.TestExecutionDecider; <nl> 
mmm RealmAdapter.java <nl> ppp RealmAdapter.java <nl> - return new ApplicationAdapter(this, realm.getAdminApp(), invocationContext); <nl> + ApplicationEntity appData = getMongoStore().loadEntity(ApplicationEntity.class, realm.getAdminAppId(), invocationContext); <nl> + return new ApplicationAdapter(this, appData, invocationContext); <nl> 
deleted file <nl> mmm Resources.java <nl> - package org.keycloak.example.photoz.util; <nl> - import javax.annotation.PostConstruct; <nl> - import javax.annotation.PreDestroy; <nl> - import javax.enterprise.context.ApplicationScoped; <nl> - import javax.enterprise.context.RequestScoped; <nl> - import javax.enterprise.inject.Produces; <nl> 
mmm UserRequiredActionEntity.java <nl> ppp UserRequiredActionEntity.java <nl> - @NamedQuery(name="deleteUserRequiredActionsByRealm", query="delete from UserRequiredActionEntity action where action.user IN (select u from UserEntity u where u.realmId=:realmId)") <nl> + @NamedQuery(name="deleteUserRequiredActionsByRealm", query="delete from UserRequiredActionEntity action where action.user IN (select u from UserEntity u where u.realmId=:realmId)"), <nl> 
mmm AdapterTest.java <nl> ppp AdapterTest.java <nl> - realmModel.setCookieLoginAllowed(true); <nl> - realmModel.setCookieLoginAllowed(true); <nl> mmm RealmEntity.java <nl> ppp RealmEntity.java <nl> - private boolean cookieLoginAllowed; <nl> - @AttributeValue <nl> - public boolean isCookieLoginAllowed() { <nl> 
mmm Tomcat7Test.java <nl> ppp Tomcat7Test.java <nl> + @Test <nl> + public void testAccountManagementSessionsLogout() throws Throwable { <nl> + testStrategy.testAccountManagementSessionsLogout(); <nl> + } <nl> mmm AdapterTest.java <nl> ppp AdapterTest.java <nl> + @Test <nl> + public void testAccountManagementSessionsLogout() throws Throwable { <nl> 
deleted file <nl> mmm UsersPermissions.java <nl> - package org.keycloak.authorization.admin.permissions; <nl> - import org.jboss.logging.Logger; <nl> - import org.keycloak.authorization.AuthorizationProvider; <nl> - import org.keycloak.authorization.Decision; <nl> - import org.keycloak.authorization.common.DefaultEvaluationContext; <nl> 
mmm ClientInstallationTest.java <nl> ppp ClientInstallationTest.java <nl> - clientInstallationPage.form().setConfigFormat("Keycloak JSON"); <nl> + clientInstallationPage.form().setConfigFormat("Keycloak OIDC JSON"); <nl> - clientInstallationPage.form().setConfigFormat("Wildfly/EAP Subsystem XML"); <nl> + clientInstallationPage.form().setConfigFormat("Keycloak OIDC JBoss Subsystem XML"); <nl> 
mmm UserSessionModel.java <nl> ppp UserSessionModel.java <nl> - public String getNote(String name); <nl> - public void setNote(String name, String value); <nl> - public void removeNote(String name); <nl> - State getState(); <nl> - void setState(State state); <nl> - public static enum State { <nl> - LOGGING_IN, <nl> 
mmm KeycloakProviderDeploymentProcessor.java <nl> ppp KeycloakProviderDeploymentProcessor.java <nl> - logger.infov("Deploying Keycloak provider: {0}", deploymentUnit.getName()); <nl> + logger.infof("Deploying Keycloak provider: {0}", deploymentUnit.getName()); <nl> - logger.infov("Undeploying Keycloak provider: {0}", context.getName()); <nl> 
new file <nl> ppp ImportSynchronization.java <nl> + package org.keycloak.storage.user; <nl> + import org.keycloak.models.KeycloakSessionFactory; <nl> + import org.keycloak.storage.UserStorageProviderModel; <nl> + import java.util.Date; <nl> + public interface ImportSynchronization { <nl> + SynchronizationResult sync(KeycloakSessionFactory sessionFactory, String realmId, UserStorageProviderModel model); <nl> 
mmm KerberosFederationProviderFactory.java <nl> ppp KerberosFederationProviderFactory.java <nl> + import org.keycloak.models.AuthenticationExecutionModel; <nl> + import org.keycloak.models.RealmModel; <nl> + import org.keycloak.representations.idm.CredentialRepresentation; <nl> + import org.keycloak.utils.CredentialHelper; <nl> 
new file <nl> ppp ClientInfo.java <nl> + package org.keycloak.performance; <nl> + public class ClientInfo { <nl> + public final int index; <nl> + public final String clientId; <nl> + public final String secret; <nl> + public final String appUrl; <nl> + public ClientInfo(int index, String clientId, String secret, String appUrl) { <nl> 
mmm AbstractSAMLServletsAdapterTest.java <nl> ppp AbstractSAMLServletsAdapterTest.java <nl> + import org.apache.http.client.methods.CloseableHttpResponse; <nl> + import org.apache.http.client.methods.HttpGet; <nl> + import org.apache.http.client.methods.HttpUriRequest; <nl> + import org.apache.http.client.protocol.HttpClientContext; <nl> 
mmm RepresentationToModel.java <nl> ppp RepresentationToModel.java <nl> + identityProviderModel.setAuthenticateByDefault(representation.isAuthenticateByDefault()); <nl> mmm RealmAdapter.java <nl> ppp RealmAdapter.java <nl> + identityProviderModel.setAuthenticateByDefault(entity.isAuthenticateByDefault()); <nl> 
new file <nl> ppp AssertEvents.java <nl> + package org.keycloak.testsuite; <nl> + import org.apache.commons.io.IOUtils; <nl> + import org.apache.http.client.methods.CloseableHttpResponse; <nl> + import org.apache.http.client.methods.HttpPost; <nl> + import org.apache.http.impl.client.CloseableHttpClient; <nl> 
mmm UndertowDemoServletsAdapterTest.java <nl> ppp UndertowDemoServletsAdapterTest.java <nl> + import org.junit.Ignore; <nl> + @Ignore <nl> + @Override <nl> + public void testAuthenticatedWithCustomSessionConfig() { <nl> + } <nl> mmm MigrationTest.java <nl> ppp MigrationTest.java <nl> + import org.keycloak.common.constants.KerberosConstants; <nl> 
mmm KeycloakSpringBootConfiguration.java <nl> ppp KeycloakSpringBootConfiguration.java <nl> - webAppContext.setHandler(securityHandler); <nl> + webAppContext.setSecurityHandler(securityHandler); <nl> mmm KeycloakAdapterPolicyEnforcer.java <nl> ppp KeycloakAdapterPolicyEnforcer.java <nl> - String accessDeniedPath = getEnforcerConfig().getAccessDeniedPath(); <nl> 
mmm TokenManager.java <nl> ppp TokenManager.java <nl> - import java.util.ArrayList; <nl> - String requestedScope = clientSession.getNote(OAuth2Constants.SCOPE); <nl> - if (accessToken != null && requestedScope != null) { <nl> - List<String> returnedScopes = new ArrayList<String>(); <nl> - List<String> requestedScopes = Arrays.asList(requestedScope.split(" ")); <nl> 
mmm EnumToStringMapper.java <nl> ppp EnumToStringMapper.java <nl> mmm SimpleMongoStoreInvocationContext.java <nl> ppp SimpleMongoStoreInvocationContext.java <nl> - public void addCreatedObject(MongoIdentifiableEntity entity) { <nl> + public void addCreatedEntity(MongoIdentifiableEntity entity) { <nl> - public void addLoadedObject(MongoIdentifiableEntity entity) { <nl> 
new file <nl> ppp BadClientSalesPostSigServlet.java <nl> + package org.keycloak.testsuite.adapter.page; <nl> + import org.jboss.arquillian.container.test.api.OperateOnDeployment; <nl> + import org.jboss.arquillian.test.api.ArquillianResource; <nl> + import java.net.URL; <nl> + public class BadClientSalesPostSigServlet extends SAMLServletWithLogout { <nl> 
mmm WelcomePage.java <nl> ppp WelcomePage.java <nl> + import org.openqa.selenium.By; <nl> - return !driver.getPageSource().contains("Please create an initial admin user to get started."); <nl> + return !(driver.getPageSource().contains("Please create an initial admin user to get started.") || <nl> + driver.getPageSource().contains("You need local access to create the initial admin user.")); <nl> 
mmm MongoRealmProvider.java <nl> ppp MongoRealmProvider.java <nl> + import org.keycloak.models.RealmListenerHelper; <nl> + protected RealmListenerHelper listeners; <nl> - public MongoRealmProvider(KeycloakSession session, MongoStoreInvocationContext invocationContext) { <nl> + public MongoRealmProvider(KeycloakSession session, MongoStoreInvocationContext invocationContext, RealmListenerHelper listeners) { <nl> 
mmm Validation.java <nl> ppp Validation.java <nl> + import org.keycloak.models.UserModel; <nl> - if (!realm.isRegistrationEmailAsUsername() && isEmpty(formData.getFirst(FIELD_USERNAME))) { <nl> + if (!realm.isRegistrationEmailAsUsername() && isBlank(formData.getFirst(FIELD_USERNAME))) { <nl> - if (isEmpty(formData.getFirst(FIELD_FIRST_NAME))) { <nl> 
deleted file <nl> mmm InitialProvidersTest.java <nl> - package org.keycloak.testsuite.admin.authentication; <nl> - import org.junit.Assert; <nl> - import org.junit.Test; <nl> - import java.util.ArrayList; <nl> - import java.util.Collections; <nl> - import java.util.Comparator; <nl> - import java.util.HashMap; <nl> 
new file <nl> ppp UriBuilder.java <nl> + package org.keycloak.social.util; <nl> + import java.net.URI; <nl> + import java.net.URISyntaxException; <nl> + import javax.ws.rs.core.HttpHeaders; <nl> + import javax.ws.rs.core.UriInfo; <nl> + public class UriBuilder { <nl> + private final javax.ws.rs.core.UriBuilder b; <nl> 
mmm UpdateCmd.java <nl> ppp UpdateCmd.java <nl> + if (printHelp()) { <nl> + return CommandResult.SUCCESS; <nl> + } <nl> - warnfErr(ParseUtil.CLIENTID_OPTION_WARN, clientId); <nl> + warnfErr(ParseUtil.CLIENT_OPTION_WARN, clientId); <nl> + protected String help() { <nl> + return usage(); <nl> + } <nl> - out.println("    -c, --config          Path to the config file (" + DEFAULT_CONFIG_FILE_STRING + " by default)"); <nl> 
new file <nl> ppp WildflySamlSessionStore.java <nl> + package org.keycloak.adapters.saml.wildfly; <nl> + import io.undertow.security.api.SecurityContext; <nl> + import io.undertow.server.HttpServerExchange; <nl> + import org.keycloak.adapters.SessionIdMapper; <nl> + import org.keycloak.adapters.saml.SamlSession; <nl> 
mmm AbstractAuthOptionsCmd.java <nl> ppp AbstractAuthOptionsCmd.java <nl> - @Option(name = "no-config", description = "No configuration file should be used, no authentication info should be saved", hasValue = false) <nl> + @Option(name = "no-config", description = "Don't use config file - no authentication info is loaded or saved", hasValue = false) <nl> 
mmm AS7OIDCAdapterTest.java <nl> ppp AS7OIDCAdapterTest.java <nl> - import org.keycloak.testsuite.adapter.servlet.AbstractDemoServletsAdapterTest; <nl> + import org.keycloak.testsuite.adapter.servlet.AbstractJBossOIDCServletsAdapterTest; <nl> - public class AS7OIDCAdapterTest extends AbstractDemoServletsAdapterTest { <nl> 
mmm KeycloakApplication.java <nl> ppp KeycloakApplication.java <nl> - import org.keycloak.services.managers.PeriodicSyncManager; <nl> + import org.keycloak.services.managers.UsersSyncManager; <nl> - new PeriodicSyncManager().bootstrap(sessionFactory, timer); <nl> + new UsersSyncManager().bootstrapPeriodic(sessionFactory, timer); <nl> 
mmm AppServerTestEnricher.java <nl> ppp AppServerTestEnricher.java <nl> - import java.io.File; <nl> - import java.io.IOException; <nl> - import java.net.MalformedURLException; <nl> - import java.net.URL; <nl> - import static org.keycloak.testsuite.arquillian.AuthServerTestEnricher.getAuthServerContextRoot; <nl> 
mmm ComponentResource.java <nl> ppp ComponentResource.java <nl> - import org.keycloak.models.utils.StripSecretsUtils; <nl> - adminEvent.operation(OperationType.CREATE).resourcePath(uriInfo, model.getId()).representation(StripSecretsUtils.strip(session, rep)).success(); <nl> + adminEvent.operation(OperationType.CREATE).resourcePath(uriInfo, model.getId()).representation(rep).success(); <nl> 
mmm XMLTimeUtil.java <nl> ppp XMLTimeUtil.java <nl> - public static XMLGregorianCalendar add(XMLGregorianCalendar value, long milis) { <nl> + public static XMLGregorianCalendar add(XMLGregorianCalendar value, long milis) throws ConfigurationException { <nl> - duration = DATATYPE_FACTORY.get().newDuration(milis); <nl> 
mmm DefaultJpaConnectionProviderFactory.java <nl> ppp DefaultJpaConnectionProviderFactory.java <nl> - import org.keycloak.models.KeycloakSessionTask; <nl> - import org.keycloak.models.utils.KeycloakModelUtils; <nl> + Connection connection = null; <nl> - String databaseSchema; <nl> - String databaseSchemaConf = config.get("databaseSchema"); <nl> 
mmm UserModel.java <nl> ppp UserModel.java <nl> + Set<String> getRedirectUris(); <nl> + void setRedirectUris(Set<String> redirectUris); <nl> + void addRedirectUri(String redirectUri); <nl> + void removeRedirectUri(String redirectUri); <nl> mmm ApplicationManager.java <nl> ppp ApplicationManager.java <nl> + import java.util.HashSet; <nl> 
mmm Permissions.java <nl> ppp Permissions.java <nl> + import java.util.Arrays; <nl> + import java.util.Collections; <nl> + public static List<ResourcePermission> permission(ResourceServer server, Resource resource, Scope scope) { <nl> + return Arrays.asList(new ResourcePermission(resource, Arrays.asList(scope), server)); <nl> 
mmm AbstractUserProfile.java <nl> ppp AbstractUserProfile.java <nl> - import org.keycloak.userprofile.utils.StoredUserProfile; <nl> - public abstract class AbstractUserProfile implements UserProfile , StoredUserProfile { <nl> + public abstract class AbstractUserProfile implements UserProfile  { <nl> - package org.keycloak.userprofile.profile.represenations; <nl> 
mmm LdapUserProviderForm.java <nl> ppp LdapUserProviderForm.java <nl> + import static org.keycloak.testsuite.util.WaitUtils.waitAjaxForElement; <nl> + import static org.keycloak.testsuite.util.WaitUtils.waitGuiForElement; <nl> - import static org.keycloak.testsuite.util.WaitUtils.waitGuiForElement; <nl> + @FindBy(id = "rdnLDAPAttribute") <nl> 
mmm OfflineTokenTest.java <nl> ppp OfflineTokenTest.java <nl> + import org.keycloak.jose.jws.JWSInputException; <nl> - RefreshToken refreshToken = new JWSInput(ctx.getRefreshToken()).readJsonContent(RefreshToken.class); <nl> + RefreshToken refreshToken = null; <nl> + try { <nl> + refreshToken = new JWSInput(ctx.getRefreshToken()).readJsonContent(RefreshToken.class); <nl> 
mmm TestRealmKeycloakTest.java <nl> ppp TestRealmKeycloakTest.java <nl> + import org.keycloak.admin.client.resource.RealmResource; <nl> + import org.keycloak.representations.idm.UserRepresentation; <nl> + protected UserRepresentation findUserInRealmRep(RealmRepresentation testRealm, String userName) { <nl> 
mmm ProviderConfigProperty.java <nl> ppp ProviderConfigProperty.java <nl> + public static final String PASSWORD="Password"; <nl> mmm SAMLServletWithLogout.java <nl> ppp SAMLServletWithLogout.java <nl> - getUriBuilder().replaceQueryParam("GLO", null); <nl> + getUriBuilder().replaceQueryParam("GLO", new Object()); <nl> 
mmm AbstractClusterTest.java <nl> ppp AbstractClusterTest.java <nl> - import java.util.HashMap; <nl> - import java.util.HashSet; <nl> + import java.util.ArrayList; <nl> - import java.util.Map; <nl> - import java.util.Set; <nl> + import org.jboss.arquillian.graphene.page.Page; <nl> - import org.junit.Before; <nl> 
mmm AccountService.java <nl> ppp AccountService.java <nl> - public static final String ACCOUNT_IDENTITY_COOKIE = "KEYCLOAK_ACCOUNT_IDENTITY"; <nl> mmm ClassLoaderTheme.java <nl> ppp ClassLoaderTheme.java <nl> + private final ClassLoader classLoader; <nl> - public ClassLoaderTheme(String name, Type type) throws IOException { <nl> 
mmm RealmModel.java <nl> ppp RealmModel.java <nl> - public boolean isRegistrationEmailAsUsername(); <nl> + boolean isRegistrationEmailAsUsername(); <nl> - public void setRegistrationEmailAsUsername(boolean registrationEmailAsUsername); <nl> - boolean isPasswordCredentialGrantAllowed(); <nl> - void setPasswordCredentialGrantAllowed(boolean passwordCredentialGrantAllowed); <nl> 
mmm OAuthClient.java <nl> ppp OAuthClient.java <nl> + private String codeVerifier; <nl> + private String codeChallenge; <nl> + private String codeChallengeMethod; <nl> + codeVerifier = null; <nl> + codeChallenge = null; <nl> + codeChallengeMethod = null; <nl> + if (codeVerifier != null) { <nl> + parameters.add(new BasicNameValuePair(OAuth2Constants.CODE_VERIFIER, codeVerifier)); <nl> 
mmm ClientResource.java <nl> ppp ClientResource.java <nl> + @Produces(MediaType.APPLICATION_JSON) <nl> + @Produces(MediaType.APPLICATION_JSON) <nl> mmm TestApplicationResource.java <nl> ppp TestApplicationResource.java <nl> + import org.keycloak.representations.adapters.action.TestAvailabilityAction; <nl> + @GET <nl> 
mmm Applications.java <nl> ppp Applications.java <nl> - import java.util.List; <nl> - import javax.ws.rs.core.UriBuilder; <nl> + import org.openqa.selenium.By; <nl> + import javax.ws.rs.core.UriBuilder; <nl> + import java.util.List; <nl> - protected List<WebElement> applicationLinks; <nl> + private List<WebElement> applicationRows; <nl> 
deleted file <nl> mmm PersonImpl.java <nl> - package org.keycloak.example.ws; <nl> - import javax.jws.WebService; <nl> - import javax.xml.ws.Holder; <nl> - @WebService(serviceName = "PersonService", endpointInterface = "org.keycloak.example.ws.Person") <nl> - public class PersonImpl implements Person { <nl> 
mmm InputServlet.java <nl> ppp InputServlet.java <nl> - resp.setContentType("text/html"); <nl> + resp.setContentType("text/plain"); <nl> - pw.printf("<html><head><title>%s</title></head><body>", "Input Page"); <nl> - pw.printf("parameter=hello"); <nl> - pw.print("</body></html>"); <nl> + pw.printf("parameter=" + req.getParameter("parameter")); <nl> 
mmm JpaKeycloakSessionFactory.java <nl> ppp JpaKeycloakSessionFactory.java <nl> + import org.keycloak.util.JpaUtils; <nl> - emf = Persistence.createEntityManagerFactory("jpa-keycloak-identity-store", getHibernateProperties()); <nl> + emf = Persistence.createEntityManagerFactory("jpa-keycloak-identity-store", JpaUtils.getHibernateProperties()); <nl> 
mmm IdpReviewProfileAuthenticator.java <nl> ppp IdpReviewProfileAuthenticator.java <nl> + import org.keycloak.models.AuthenticatorConfigModel; <nl> - public class IdpUpdateProfileAuthenticator extends AbstractIdpAuthenticator { <nl> + public class IdpReviewProfileAuthenticator extends AbstractIdpAuthenticator { <nl> 
mmm SPXmlParser.java <nl> ppp SPXmlParser.java <nl> - import org.keycloak.adapters.saml.config.IDP; <nl> - import org.keycloak.adapters.saml.config.Key; <nl> - import org.keycloak.adapters.saml.config.SP; <nl> - import org.keycloak.saml.common.exceptions.ParsingException; <nl> - import org.keycloak.saml.common.parsers.AbstractParser; <nl> 
mmm SamlProtocolFactory.java <nl> ppp SamlProtocolFactory.java <nl> - import org.keycloak.models.ClientTemplateModel; <nl> - import org.keycloak.representations.idm.ClientTemplateRepresentation; <nl> - SamlRepresentationAttributes rep = new SamlRepresentationAttributes(clientRep.getAttributes()); <nl> + SamlClientRepresentation rep = new SamlClientRepresentation(clientRep); <nl> 
mmm NoCacheRealmProvider.java <nl> ppp NoCacheRealmProvider.java <nl> - @Override <nl> - public void registerListener(RealmCreationListener listener) { <nl> - getDelegate().registerListener(listener); <nl> - } <nl> - @Override <nl> - public void unregisterListener(RealmCreationListener listener) { <nl> - getDelegate().unregisterListener(listener); <nl> 
new file <nl> ppp PostBrokerFlowTest.java <nl> + package org.keycloak.testsuite.broker; <nl> + import java.util.Arrays; <nl> + import java.util.List; <nl> + import java.util.Set; <nl> + import org.junit.Assert; <nl> + import org.junit.ClassRule; <nl> + import org.junit.Test; <nl> + import org.keycloak.authentication.authenticators.broker.IdpEmailVerificationAuthenticatorFactory; <nl> 
mmm ResourceAdminManager.java <nl> ppp ResourceAdminManager.java <nl> - import org.jboss.resteasy.client.jaxrs.ResteasyClient; <nl> - import org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder; <nl> + import org.apache.http.client.HttpClient; <nl> + import org.jboss.resteasy.client.ClientRequest; <nl> + import org.jboss.resteasy.client.ClientResponse; <nl> 
mmm KcRegUpdateTest.java <nl> ppp KcRegUpdateTest.java <nl> - Assert.assertEquals("exitCode == 0", 0, exe.exitCode()); <nl> + assertExitCodeAndStdErrSize(exe, 0, 0); <nl> - Assert.assertEquals("exitCode", 1, exe.exitCode()); <nl> + assertExitCodeAndStdErrSize(exe, 1, 0); <nl> - lines = exe.stderrLines(); <nl> 
mmm EmailTemplateProvider.java <nl> ppp EmailTemplateProvider.java <nl> - public interface EmailProvider extends Provider { <nl> + public interface EmailTemplateProvider extends Provider { <nl> - public EmailProvider setRealm(RealmModel realm); <nl> + public EmailTemplateProvider setRealm(RealmModel realm); <nl> 
mmm BasePopupWindow.java <nl> ppp BasePopupWindow.java <nl> - public abstract class BasePopupWindow implements BasePopup, PopupWindow.OnDismissListener, LifecycleObserver { <nl> + public abstract class BasePopupWindow implements PopupWindow.OnDismissListener, LifecycleObserver { <nl> + public abstract View onCreateContentView(); <nl> 
mmm PluginServiceImpl.java <nl> ppp PluginServiceImpl.java <nl> + import org.dromara.soul.admin.mapper.PluginMapper; <nl> + import org.dromara.soul.admin.vo.PluginVO; <nl> + import org.springframework.beans.factory.annotation.Autowired; <nl> + import java.time.format.DateTimeFormatter; <nl> + import java.util.stream.Collectors; <nl> 
mmm PluginService.java <nl> ppp PluginService.java <nl> + import java.util.List; <nl> - int delete(String id); <nl> + int delete(List<String> ids); <nl> - int delete(String id); <nl> + int delete(List<String> ids); <nl> - @DeleteMapping("/{id}") <nl> - public Mono<SoulResult> deleteRule(@PathVariable("id") final String id) { <nl> 
deleted file <nl> mmm DefaultIgnoreExceptionsTest.java <nl> - package com.netflix.hystrix.contrib.javanica.test.spring.error; <nl> - import com.netflix.hystrix.contrib.javanica.test.common.error.BasicDefaultIgnoreExceptionsTest; <nl> - import com.netflix.hystrix.contrib.javanica.test.spring.conf.AopCglibConfig; <nl> 
mmm HystrixCommandTest.java <nl> ppp HystrixCommandTest.java <nl> + import java.util.concurrent.ExecutorService; <nl> + import java.util.concurrent.Executors; <nl> + @Test <nl> + public void testSemaphoreThreadSafety() { <nl> + final int NUM_PERMITS = 1; <nl> + final TryableSemaphoreActual s = new TryableSemaphoreActual(HystrixProperty.Factory.asProperty(NUM_PERMITS)); <nl> 
mmm HystrixRollingPercentile.java <nl> ppp HystrixRollingPercentile.java <nl> - import javax.annotation.concurrent.NotThreadSafe; <nl> - @NotThreadSafe <nl> mmm HystrixObservableCommand.java <nl> ppp HystrixObservableCommand.java <nl> - import javax.annotation.concurrent.NotThreadSafe; <nl> - import javax.annotation.concurrent.ThreadSafe; <nl> 
mmm MetaHolder.java <nl> ppp MetaHolder.java <nl> + import com.netflix.hystrix.contrib.javanica.command.closure.Closure; <nl> - private Method asyncMethod; <nl> - private Object asyncObj; <nl> + private Closure closure; <nl> - private boolean async; <nl> + private ExecutionType executionType; <nl> - this.asyncMethod = builder.asyncMethod; <nl> 
mmm DemoVerifier.java <nl> ppp DemoVerifier.java <nl> + import static apijson.demo.server.Controller.ACCESS_; <nl> + import java.rmi.ServerException; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> - import apijson.demo.server.model.Comment; <nl> - import apijson.demo.server.model.Login; <nl> 
mmm PlainIndexableObject.java <nl> ppp PlainIndexableObject.java <nl> + private boolean ignoreNull; <nl> + } <nl> + @Override <nl> + public IndexableObject ignoreNull(boolean ignorenull) { <nl> + this.ignoreNull = ignorenull; <nl> + return this; <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> 
mmm SQLCommand.java <nl> ppp SQLCommand.java <nl> mmm PlainIndexableObject.java <nl> ppp PlainIndexableObject.java <nl> - if (ignoreNull && (o == null || (o instanceof Values) && ((Values)o).isNull())) { <nl> + if (ignoreNull && (o == null || (o instanceof Values) && ((Values) o).isNull())) { <nl> mmm KeyValueStreamAdapter.java <nl> 
mmm AccountService.java <nl> ppp AccountService.java <nl> - import org.dromara.hmily.annotation.HmilyTCC; <nl> + boolean testPayment(AccountDTO accountDTO); <nl> + boolean mockWithTryException(AccountDTO accountDTO); <nl> + boolean mockWithTryTimeout(AccountDTO accountDTO); <nl> mmm AccountMapper.java <nl> 
new file <nl> ppp CleanEventHandler.java <nl> + package com.hmily.tcc.core.disruptor.handler; <nl> + import com.hmily.tcc.core.disruptor.event.HmilyTransactionEvent; <nl> + import com.lmax.disruptor.EventHandler; <nl> + import org.springframework.stereotype.Component; <nl> + @Component <nl> + public class CleanEventHandler implements EventHandler<HmilyTransactionEvent> { <nl> 
mmm TestUtils.java <nl> ppp TestUtils.java <nl> - import cn.dreamtobe.okdownload.core.download.DownloadCall; <nl> + import cn.dreamtobe.okdownload.core.download.DownloadCache; <nl> + import static org.mockito.Mockito.doNothing; <nl> + doNothing().when(fileStrategy).discardProcess(any(DownloadTask.class)); <nl> 
mmm CodeItem.java <nl> ppp CodeItem.java <nl> - if (elements.size() == 0) { <nl> - out.annotate(4, "first_key"); <nl> - } else { <nl> - out.annotate(4, "first_key = %d", elements.get(0).getKey()); <nl> - out.annotate(0, "targets:"); <nl> - out.indent(); <nl> - for (int i=0; i<elements.size(); i++) { <nl> - out.annotate(4, "target[%d] = %d", i, elements.get(i).getOffset()); <nl> 
mmm EntryViewHolder.java <nl> ppp EntryViewHolder.java <nl> mmm ApplicationTest.java <nl> ppp ApplicationTest.java <nl> - import org.shadowice.flocke.andotp.Utilities.Constants; <nl> - import org.shadowice.flocke.andotp.Utilities.KeyStoreHelper; <nl> - import javax.crypto.SecretKey; <nl> + import static org.shadowice.flocke.andotp.Utilities.TokenCalculator.TOTP_DEFAULT_PERIOD; <nl> 
new file <nl> ppp StorageAccessHelper.java <nl> + package org.shadowice.flocke.andotp.Utilities; <nl> + import android.content.Context; <nl> + import android.net.Uri; <nl> + import android.os.ParcelFileDescriptor; <nl> + import org.apache.commons.codec.Charsets; <nl> + import java.io.ByteArrayOutputStream; <nl> 
mmm PageFetcher.java <nl> ppp PageFetcher.java <nl> mmm CrawlController.java <nl> ppp CrawlController.java <nl> + protected TLDList tldList; <nl> - this(config, pageFetcher, new Parser(config), robotstxtServer); <nl> + this(config, pageFetcher, null, robotstxtServer); <nl> - TLDList.setUseOnline(config.isOnlineTldListUpdate()); <nl> 
new file <nl> ppp MainTest.java <nl> + package net.librec; <nl> + import net.librec.conf.Configuration; <nl> + import net.librec.data.model.TextDataModel; <nl> + import net.librec.eval.EvalContext; <nl> + import net.librec.eval.RecommenderEvaluator; <nl> + import net.librec.eval.ranking.NormalizedDCGEvaluator; <nl> 
mmm JvstTest5.java <nl> ppp JvstTest5.java <nl> + import javassist.bytecode.AttributeInfo; <nl> + public void testAddDefaultMethod() throws Exception { <nl> + CtClass cc = sloader.makeInterface("test5.AddDefaultMethod"); <nl> + cc.addMethod(CtNewMethod.make("static int foo() { return 1; }", cc)); <nl> + cc.addMethod(CtNewMethod.make("public static int foo1() { return 1; }", cc)); <nl> 
mmm WorkerHealthReportRunnable.java <nl> ppp WorkerHealthReportRunnable.java <nl> - import com.github.kfcfans.common.AkkaConstant; <nl> + import com.github.kfcfans.common.RemoteConstant; <nl> - String serverPath = AkkaUtils.getAkkaServerNodePath(AkkaConstant.SERVER_ACTOR_NAME); <nl> + String serverPath = AkkaUtils.getAkkaServerNodePath(RemoteConstant.SERVER_ACTOR_NAME); <nl> 
mmm WorkflowDAGUtils.java <nl> ppp WorkflowDAGUtils.java <nl> - import com.github.kfcfans.oms.common.model.PLWorkflowDAG; <nl> + import com.github.kfcfans.oms.common.model.PEWorkflowDAG; <nl> - public static WorkflowDAG convert(PLWorkflowDAG plWorkflowDAG) { <nl> + public static WorkflowDAG convert(PEWorkflowDAG PEWorkflowDAG) { <nl> 
mmm WorkflowService.java <nl> ppp WorkflowService.java <nl> - Long wfInstanceId = workflowInstanceManager.create(wfInfo, initParams, System.currentTimeMillis() + delay); <nl> + Long wfInstanceId = workflowInstanceManager.create(wfInfo, initParams); <nl> deleted file <nl> mmm RejectedExecutionHandlerFactory.java <nl> 
new file <nl> ppp Field.java <nl> + package net.bytebuddy.instrumentation.method.bytecode.bind.annotation; <nl> + import net.bytebuddy.instrumentation.Instrumentation; <nl> + import net.bytebuddy.instrumentation.attribute.annotation.AnnotationDescription; <nl> + import net.bytebuddy.instrumentation.method.MethodDescription; <nl> 
deleted file <nl> mmm AnnotationDescriptionForLoadedAnnotationOtherTest.java <nl> - package net.bytebuddy.instrumentation.attribute.annotation; <nl> - import java.lang.annotation.Retention; <nl> - import java.lang.annotation.RetentionPolicy; <nl> - public class AnnotationDescriptionForLoadedAnnotationOtherTest extends AbstractAnnotationDescriptionTest<AnnotationDescriptionForLoadedAnnotationOtherTest.Sample> { <nl> 
new file <nl> ppp CachedReturnPlugin$char.java <nl> + package net.bytebuddy.build; <nl> + import edu.umd.cs.findbugs.annotations.SuppressFBWarnings; <nl> + import net.bytebuddy.asm.Advice; <nl> + class CachedReturnPlugin$char { <nl> + private CachedReturnPlugin$char() { <nl> + throw new UnsupportedOperationException("This class is merely an advice template and should not be instantiated"); <nl> 
mmm MethodGraphCompilerDefaultHarmonizerForJVMMethodTest.java <nl> ppp MethodGraphCompilerDefaultHarmonizerForJVMMethodTest.java <nl> - .Default<MethodGraph.Compiler.Default.Harmonizer.ForJVMMethod.Token>(MethodGraph.Compiler.Default.Harmonizer.ForJVMMethod.INSTANCE))); <nl> + .Default<MethodGraph.Compiler.Default.Harmonizer.ForJVMMethod.Token>(MethodGraph.Compiler.Default.Harmonizer.ForJVMMethod.INSTANCE, <nl> 
mmm MethodMatchers.java <nl> ppp MethodMatchers.java <nl> - return method.getDeclaringClass() == type; <nl> + try { <nl> + return method.getDeclaringClass() == type || type.getDeclaredMethod(method.getName(), method.getParameterTypes()) != null; <nl> + } catch (NoSuchMethodException e) { <nl> + return false; <nl> 
mmm MethodCall.java <nl> ppp MethodCall.java <nl> - for (ArgumentLoader.Factory argumentLoader : argumentLoaders) { <nl> - instrumentedType = argumentLoader.prepare(instrumentedType); <nl> + for (InstrumentedType.Prepareable prepareable : CompoundList.of(argumentLoaders, preparables)) { <nl> + instrumentedType = prepareable.prepare(instrumentedType); <nl> 
new file <nl> ppp MethodGraphLinkedDelegationTest.java <nl> + package net.bytebuddy.dynamic.scaffold; <nl> + import net.bytebuddy.description.method.MethodDescription; <nl> + import net.bytebuddy.description.type.TypeDescription; <nl> + import net.bytebuddy.test.utility.MockitoRule; <nl> + import net.bytebuddy.test.utility.ObjectPropertyAssertion; <nl> 
mmm GCViewer.java <nl> ppp GCViewer.java <nl> + import java.awt.Image; <nl> - import java.awt.Toolkit; <nl> + import java.io.IOException; <nl> + import javax.imageio.ImageIO; <nl> + import com.tagtraum.perf.gcviewer.action.OSXFullScreen; <nl> + import com.tagtraum.perf.gcviewer.util.OSXSupport; <nl> + public class OSXFullScreen extends AbstractAction { <nl> 
mmm TestDataReaderSun1_2_2.java <nl> ppp TestDataReaderSun1_2_2.java <nl> - AbstractGCEvent event1 = new GCEvent(0, 817, 187, 819, 0.008, GCEvent.Type.GC); <nl> - AbstractGCEvent event2 = new GCEvent(0.02, 775, 188, 819, 0.005, GCEvent.Type.GC); <nl> - AbstractGCEvent event3 = new GCEvent(0.741, 1213, 1213, 1639, 0.0, GCEvent.Type.GC); <nl> 
mmm Condition.java <nl> ppp Condition.java <nl> - EQ, GT, LT, GTE, LTE, N, LIKE, NLIKE, IS, ISN, IN, NIN, BETWEEN, NBETWEEN, GEO_INTERSECTS, GEO_BOUNDING_BOX, GEO_DISTANCE, GEO_DISTANCE_RANGE, GEO_POLYGON, GEO_CELL, IN_TERMS, TERM, IDS_QUERY, NESTED_COMPLEX, CHILDREN_COMPLEX, SCRIPT,NIN_TERMS,NTERM; <nl> 
mmm MainActivity.java <nl> ppp MainActivity.java <nl> - day = CalendarDay.today(); <nl> + day = new CalendarDay(); <nl> mmm OneDayDecorator.java <nl> ppp OneDayDecorator.java <nl> - date = CalendarDay.today(); <nl> + date = new CalendarDay(); <nl> - this.date = CalendarDay.from(date); <nl> + this.date = new CalendarDay(date); <nl> 
mmm MonthArrayTitleFormatter.java <nl> ppp MonthArrayTitleFormatter.java <nl> mmm DateFormatTitleFormatter.java <nl> ppp DateFormatTitleFormatter.java <nl> mmm MaterialCalendarView.java <nl> ppp MaterialCalendarView.java <nl> - private List<DayViewDecorator> decorators = new ArrayList<>(); <nl> + private List<DayViewDecorator> decorators = null; <nl> 
new file <nl> ppp ExtractorDistsimConjunction.java <nl> + package edu.stanford.nlp.tagger.maxent; <nl> + public class ExtractorDistsimConjunction extends Extractor { <nl> + private static final long serialVersionUID = 1L; <nl> + private final Distsim lexicon; <nl> + private final int left; <nl> + private final int right; <nl> 
mmm Redwood.java <nl> ppp Redwood.java <nl> - if (numThreads == 1 || isThreaded) { <nl> + if (numThreads == 1) { <nl> mmm DVModel.java <nl> ppp DVModel.java <nl> - import org.ejml.simple.*; <nl> + import org.ejml.simple.SimpleMatrix; <nl> + import edu.stanford.nlp.rnn.RNNUtils; <nl> - System.err.println("Reading in the word vector file: " + op.lexOptions.wordVectorFile); <nl> 
new file <nl> ppp ShiftReduceParserQuery.java <nl> + package edu.stanford.nlp.parser.shiftreduce; <nl> + import java.io.PrintWriter; <nl> + import java.util.Collection; <nl> + import java.util.Collections; <nl> + import java.util.Iterator; <nl> + import java.util.List; <nl> + import java.util.PriorityQueue; <nl> 
mmm ProtobufAnnotationSerializer.java <nl> ppp ProtobufAnnotationSerializer.java <nl> + if (Thread.interrupted()) { <nl> + throw new RuntimeInterruptedException(); <nl> + } <nl> + if (Thread.interrupted()) { <nl> + throw new RuntimeInterruptedException(); <nl> + } <nl> + if (Thread.interrupted()) { <nl> + throw new RuntimeInterruptedException(); <nl> 
mmm NERGUI.java <nl> ppp NERGUI.java <nl> - private static int HEIGHT = 600; <nl> - private static int WIDTH = 650; <nl> + private static final int HEIGHT = 600; <nl> + private static final int WIDTH = 650; <nl> - frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); <nl> + frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); <nl> 
mmm TwoDimensionalCollectionValuedMap.java <nl> ppp TwoDimensionalCollectionValuedMap.java <nl> - public void putAll(Map<K1, CollectionValuedMap<K2, V>> toAdd){ <nl> - map.putAll(toAdd); <nl> - } <nl> mmm RVFDatum.java <nl> ppp RVFDatum.java <nl> - private String id = null; <nl> - public void setID(String id){ <nl> 
mmm MulticoreWrapper.java <nl> ppp MulticoreWrapper.java <nl> - Future<JobResult<O>> result = queue.take(); <nl> + queue.take(); <nl> mmm ArabicSegmenter.java <nl> ppp ArabicSegmenter.java <nl> + private static final String optTedEval = "tedEval"; <nl> + private static final String optFeatureFactory = "featureFactory"; <nl> 
mmm BinaryTransition.java <nl> ppp BinaryTransition.java <nl> + public final boolean isRoot; <nl> - public BinaryTransition(String label, Side side) { <nl> + public BinaryTransition(String label, Side side, boolean isRoot) { <nl> + this.isRoot = isRoot; <nl> - ShiftReduceOptions op; <nl> + final ShiftReduceOptions op; <nl> 
mmm SeqClassifierFlags.java <nl> ppp SeqClassifierFlags.java <nl> + public boolean strictGoodCoNLL = false; <nl> + public boolean removeStrictGoodCoNLLDuplicates = false; <nl> + } else if (key.equalsIgnoreCase("strictGoodCoNLL")) { <nl> + strictGoodCoNLL = Boolean.parseBoolean(val); <nl> + } else if (key.equalsIgnoreCase("removeStrictGoodCoNLLDuplicates")) { <nl> 
mmm GenericAnnotationSerializer.java <nl> ppp GenericAnnotationSerializer.java <nl> - import edu.stanford.nlp.pipeline.Annotation; <nl> - import edu.stanford.nlp.pipeline.AnnotationSerializer; <nl> + import edu.stanford.nlp.util.Pair; <nl> - public class GenericAnnotationSerializer implements AnnotationSerializer { <nl> 
mmm LabeledScoredTreeNode.java <nl> ppp LabeledScoredTreeNode.java <nl> - private static final long serialVersionUID = -8992385140984593817L; <nl> - private double score = Double.NaN; <nl> - public LabeledScoredTreeNode() { <nl> - setChildren(EMPTY_TREE_ARRAY); <nl> - } <nl> - public LabeledScoredTreeNode(Label label) { <nl> 
mmm DVModel.java <nl> ppp DVModel.java <nl> + wordVectors.put(word, vector); <nl> mmm TwoDimensionalIntCounter.java <nl> ppp TwoDimensionalIntCounter.java <nl> - if (c.size()==0) { <nl> + if (c.isEmpty()) { <nl> - if(removeKeys) <nl> - Counters.retainNonZeros(myInner); <nl> + if (removeKeys) { <nl> + Counters.retainNonZeros(myInner); <nl> 
mmm Tree.java <nl> ppp Tree.java <nl> - import edu.stanford.nlp.util.Filter; <nl> - import edu.stanford.nlp.util.Filters; <nl> - import edu.stanford.nlp.util.Generics; <nl> - import edu.stanford.nlp.util.IntPair; <nl> - import edu.stanford.nlp.util.MutableInteger; <nl> - import edu.stanford.nlp.util.Pair; <nl> 
deleted file <nl> mmm RothResultsByRelation.java <nl> - package edu.stanford.nlp.ie.machinereading.domains.roth; <nl> - import java.io.PrintWriter; <nl> - import java.util.ArrayList; <nl> - import java.util.Collections; <nl> - import java.util.Comparator; <nl> - import java.util.HashMap; <nl> - import java.util.List; <nl> 
mmm Treebank.java <nl> ppp Treebank.java <nl> - pw.println("  Warning! " + numNullLabel + " tree nodes with null or empty string labels, e.g.:"); <nl> + pw.println("  Warning!  " + numNullLabel + " tree nodes with null or empty string labels, e.g.:"); <nl> - pw.println("  Warning!! Stanford Parser does not work with categories containing '@' like: " + cat); <nl> 
mmm CoordinationTransformer.java <nl> ppp CoordinationTransformer.java <nl> - TregexPattern.safeCompile("/^UCP/=ucp <, /^JJ|ADJP/", true), <nl> + TregexPattern.compile("/^UCP/=ucp <, /^JJ|ADJP/"), <nl> - TregexPattern.safeCompile("/^UCP/=ucp <, (DT $+ /^JJ|ADJP/)", true) <nl> + TregexPattern.compile("/^UCP/=ucp <, (DT $+ /^JJ|ADJP/)") <nl> 
mmm NERClassifierCombiner.java <nl> ppp NERClassifierCombiner.java <nl> + import edu.stanford.nlp.util.RuntimeInterruptedException; <nl> - return makeDatumFromStrings(tab.split(line)); <nl> + return makeDatumFromStrings(splitLineToFields(line)); <nl> - * @param strings The elements that features a made from (the tab-split columns of a TSV file) <nl> 
mmm ArrayMath.java <nl> ppp ArrayMath.java <nl> - double sum = 0; <nl> + double sum = 0.0; <nl> - sum += (anA < 0 ? -anA : anA); <nl> + sum += Math.abs(anA); <nl> - double sum = 0; <nl> + double sum = 0.0; <nl> - sum += (anA < 0 ? -anA : anA); <nl> + sum += Math.abs(anA); <nl> - double squaredSum = 0; <nl> + double squaredSum = 0.0; <nl> 
mmm RelationTripleSegmenterTest.java <nl> ppp RelationTripleSegmenterTest.java <nl> + "4\twith\t5\tcase\n" + <nl> + "5\twith\t6\tcase\n" + <nl> + "4\twith\t5\tcase\n" + <nl> + "4\tas\t5\tcase\n" + <nl> - "3\tpresident\t2\tnmod:as\n" + <nl> - "4\tHarvard\t6\tcompound\n" + <nl> - "5\tLaw\t6\tcompound\n" + <nl> 
mmm IdentityHashSet.java <nl> ppp IdentityHashSet.java <nl> mmm ParserGrammar.java <nl> ppp ParserGrammar.java <nl> + public abstract String[] defaultCoreNLPFlags(); <nl> new file <nl> ppp DistsimFeatureFactory.java <nl> + package edu.stanford.nlp.parser.shiftreduce; <nl> + import java.util.List; <nl> + import edu.stanford.nlp.ling.CoreLabel; <nl> 
mmm SisterAnnotationStats.java <nl> ppp SisterAnnotationStats.java <nl> - ArrayList topScores = new ArrayList(); <nl> + List<Pair> topScores = new ArrayList<>(); <nl> - ArrayList answers = new ArrayList(); <nl> + List<Pair<String, Double>> answers = new ArrayList<>(); <nl> - answers.add(new Pair(annotatedLabel, new Double(kl * support2))); <nl> 
new file <nl> ppp ChineseGrammaticalStructureTest.java <nl> + package edu.stanford.nlp.trees.international.pennchinese; <nl> + import java.util.*; <nl> + import junit.framework.TestCase; <nl> + import edu.stanford.nlp.trees.*; <nl> + import edu.stanford.nlp.util.Pair; <nl> + public class ChineseGrammaticalStructureTest extends TestCase { <nl> 
mmm RuleBasedCorefMentionFinder.java <nl> ppp RuleBasedCorefMentionFinder.java <nl> - SieveCoreferenceSystem.logger.warning("RuleBasedCorefMentionFinder: Last resort: returning as head: " + leaves.get(leaves.size() - 2)); <nl> + int fallback = Math.max(0, leaves.size() - 2); <nl> + SieveCoreferenceSystem.logger.warning("RuleBasedCorefMentionFinder: Last resort: returning as head: " + leaves.get(fallback)); <nl> 
mmm BasicSequenceMatchResult.java <nl> ppp BasicSequenceMatchResult.java <nl> + @Override <nl> + @Override <nl> + @Override <nl> - BasicSequenceMatchResult res = new BasicSequenceMatchResult<T>(); <nl> + BasicSequenceMatchResult<T> res = new BasicSequenceMatchResult<T>(); <nl> + @Override <nl> + @Override <nl> 
mmm ScorePatternsRatioModifiedFreq.java <nl> ppp ScorePatternsRatioModifiedFreq.java <nl> + import edu.stanford.nlp.util.Execution; <nl> - || patternScoring.equals(PatternScoring.LOGREG)) { <nl> + || patternScoring.equals(PatternScoring.LOGREG) <nl> + || patternScoring.equals(PatternScoring.LOGREGlogP)) { <nl> 
mmm XMLOutputter.java <nl> ppp XMLOutputter.java <nl> - public boolean printSingletons = false; <nl> - public class TreePrintTest extends TestCase { <nl> - public void testConll2007() { <nl> - Tree test = Tree.valueOf("((S (NP (PRP It)) (VP (VBZ is) (RB not) (ADJP (JJ normal)) (SBAR (IN for) (S (NP (NNS dogs)) (VP (TO to) (VP (VB be) (VP (VBG vomiting)))))))))"); <nl> 
mmm Counters.java <nl> ppp Counters.java <nl> + public static <E> List<Pair<E, Double>> toSortedListWithCounts(Counter<E> c, Comparator<Pair<E,Double>> comparator) { <nl> + List<Pair<E, Double>> l = new ArrayList<Pair<E, Double>>(c.size()); <nl> + for (E e : c.keySet()) { <nl> + l.add(new Pair<E, Double>(e, c.getCount(e))); <nl> 
new file <nl> ppp TrainParserTest.java <nl> + package edu.stanford.nlp.parser.shiftreduce; <nl> + import junit.framework.TestCase; <nl> + import java.util.List; <nl> + import edu.stanford.nlp.parser.lexparser.BinaryHeadFinder; <nl> + import edu.stanford.nlp.parser.lexparser.Options; <nl> + import edu.stanford.nlp.trees.HeadFinder; <nl> 
mmm AbstractTokenizer.java <nl> ppp AbstractTokenizer.java <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> mmm TaggerConfig.java <nl> ppp TaggerConfig.java <nl> + import edu.stanford.nlp.io.RuntimeIOException; <nl> + import edu.stanford.nlp.util.PropertiesUtils; <nl> mmm Constants.java <nl> 
new file <nl> ppp EntityExtractorResultsPrinter.java <nl> + package edu.stanford.nlp.ie.machinereading; <nl> + import java.io.PrintWriter; <nl> + import java.text.DecimalFormat; <nl> + import java.util.ArrayList; <nl> + import java.util.Collections; <nl> + import java.util.HashSet; <nl> + import java.util.List; <nl> 
mmm GrammaticalRelation.java <nl> ppp GrammaticalRelation.java <nl> mmm DVModel.java <nl> ppp DVModel.java <nl> - static final boolean TRAIN_WORD_VECTORS = true; <nl> - if (op.dvCombineCategories) { <nl> - basic = op.tlpParams.combineCategory(basic); <nl> - } <nl> - if (TRAIN_WORD_VECTORS) { <nl> + if (op.trainOptions.trainWordVectors) { <nl> 
mmm TokenizerAnnotatorTest.java <nl> ppp TokenizerAnnotatorTest.java <nl> + private static final String spanishText = "Me voy a Madrid (ES).\n\"Me gusta\", lo dice."; <nl> + private static List<String> spanishTokens = Arrays.asList(new String[] { "Me", "voy", "a", "Madrid", "=LRB=", "ES", "=RRB=", ".", "\"", "Me", "gusta", "\"", ",", "lo", "dice", "." }); <nl> 
mmm AbstractStochasticCachingDiffUpdateFunction.java <nl> ppp AbstractStochasticCachingDiffUpdateFunction.java <nl> + public double valueAt(double[] x, double xScale, int batchSize) { <nl> + getBatch(batchSize); <nl> + return valueAt(x, xScale, thisBatch); <nl> + } <nl> - "\1\6\2\0\5\6\1\0\1\6\2\0\3\6\1\0"+ <nl> 
mmm package-info.java <nl> ppp package-info.java <nl> mmm Index.java <nl> ppp Index.java <nl> - * <p>Often one uses a List to associate a unique index with each Object <nl> - * (e.g. controlled vocabulary, feature map, etc.). Index offers constant-time <nl> - * performance for both <code>index -&gt; Object</code> ({@link #get(int)}) and <code> <nl> 
mmm TestSentence.java <nl> ppp TestSentence.java <nl> - hasOffset = origWords != null && (origWords.get(0) instanceof HasOffset); <nl> + hasOffset = origWords != null && origWords.size() > 0 && (origWords.get(0) instanceof HasOffset); <nl> mmm SerializedAnnotationCreator.java <nl> ppp SerializedAnnotationCreator.java <nl> 
deleted file <nl> mmm ExtractorDistsimConjunction.java <nl> - package edu.stanford.nlp.tagger.maxent; <nl> - public class ExtractorDistsimConjunction extends Extractor { <nl> - private static final long serialVersionUID = 1L; <nl> - private final Distsim lexicon; <nl> - private final int left; <nl> - private final int right; <nl> 
mmm ParserAnnotatorITest.java <nl> ppp ParserAnnotatorITest.java <nl> + private void assertParseOK(ParserAnnotator parser) { <nl> + AnnotationPipeline pipeline = new AnnotationPipeline(); <nl> + pipeline.addAnnotator(new PTBTokenizerAnnotator(false)); <nl> + pipeline.addAnnotator(new WordsToSentencesAnnotator(false)); <nl> 
mmm TregexMatcher.java <nl> ppp TregexMatcher.java <nl> + import edu.stanford.nlp.trees.HeadFinder; <nl> mmm TregexPattern.java <nl> ppp TregexPattern.java <nl> - VariableStrings variableStrings); <nl> + VariableStrings variableStrings, <nl> + HeadFinder headFinder); <nl> - return matcher(t, t, null, Generics.<String, Tree>newHashMap(), new VariableStrings()); <nl> 
new file <nl> ppp NilLabelValidator.java <nl> + package edu.stanford.nlp.ie.machinereading; <nl> + import java.io.Serializable; <nl> + import edu.stanford.nlp.ie.machinereading.structure.ExtractionObject; <nl> + public class NilLabelValidator implements Serializable, LabelValidator { <nl> + private static final long serialVersionUID = 1L; <nl> 
mmm Sentence.java <nl> ppp Sentence.java <nl> - return this.document.asAnnotation(true).get(CoreAnnotations.SentencesAnnotation.class).get(this.sentenceIndex()); <nl> + return this.document.asAnnotation().get(CoreAnnotations.SentencesAnnotation.class).get(this.sentenceIndex()); <nl> - public final String protocol; <nl> 
mmm TrieMapMatcher.java <nl> ppp TrieMapMatcher.java <nl> - PartialApproxMatch<K,V> npam = pam.withMatch(costFunction, costFunction.cost(t, null), t, null); <nl> + PartialApproxMatch<K,V> npam = pam.withMatch(costFunction, costFunction.cost(t, null, pam.getMatchedLength()), t, null); <nl> - double deltaCost = costFunction.cost(a,b); <nl> 
mmm JodaTimeUtils.java <nl> ppp JodaTimeUtils.java <nl> + import edu.stanford.nlp.util.Pair; <nl> - if (p.getValue(i) > 0) { <nl> + if (p.getValue(i) != 0) { <nl> - if (p.getValue(i) > 0) { <nl> + if (p.getValue(i) != 0) { <nl> + p2 = JodaTimeUtils.discardMoreSpecificFields(p2, DateTimeFieldType.dayOfMonth()); <nl> 
mmm GeneralDataset.java <nl> ppp GeneralDataset.java <nl> - * This uses the Fisher-Yates (or Durstenfeld-Knuth) shuffle, which is unbiased. <nl> - * The same algorithm is used by shuffle() in j.u.Collections, and so you should get compatible <nl> - * results if using it on a Collection with the same seed (as of JDK1.7, at least). <nl> 
mmm UniversalEnglishGrammaticalRelations.java <nl> ppp UniversalEnglishGrammaticalRelations.java <nl> - * {@code compound}(thousand, four), <p/> <nl> + * {@code compound}(thousand, four) <p/> <nl> + public static final GrammaticalRelation NAME_MODIFIER = <nl> + new GrammaticalRelation(Language.UniversalEnglish, "name", "name", MODIFIER); <nl> 
new file <nl> ppp ShiftTransition.java <nl> + package edu.stanford.nlp.parser.shiftreduce; <nl> + import edu.stanford.nlp.trees.Tree; <nl> + import java.util.regex.Pattern; <nl> + public class ShiftTransition implements Transition { <nl> + public boolean isLegal(State state) { <nl> + if (state.finished) { <nl> 
mmm ParserDemo.java <nl> ppp ParserDemo.java <nl> + import edu.stanford.nlp.process.Tokenizer; <nl> - PTBTokenizer.factory(new CoreLabelTokenFactory(), ""); <nl> - List<CoreLabel> rawWords2 = <nl> - tokenizerFactory.getTokenizer(new StringReader(sent2)).tokenize(); <nl> + PTBTokenizer.factory(new CoreLabelTokenFactory(), ""); <nl> 
new file <nl> ppp TwoDimensionalIntCounterTest.java <nl> + package edu.stanford.nlp.stats; <nl> + import junit.framework.TestCase; <nl> + public class TwoDimensionalIntCounterTest extends TestCase { <nl> + public void testTraditionalMain() { <nl> + String answer1 = "b\td\t1.0\n" + <nl> + "b\tc\t1.0\n" + <nl> 
new file <nl> ppp StatisticalCorefProperties.java <nl> + package edu.stanford.nlp.scoref; <nl> + import java.util.Properties; <nl> + import edu.stanford.nlp.hcoref.CorefProperties; <nl> + import edu.stanford.nlp.util.PropertiesUtils; <nl> + import edu.stanford.nlp.util.StringUtils; <nl> + public class StatisticalCorefProperties { <nl> 
mmm CoordinationTransformer.java <nl> ppp CoordinationTransformer.java <nl> + import edu.stanford.nlp.trees.tregex.TregexMatcher; <nl> - return changedSbar; <nl> + Tree nowThat = rearrangeNowThat(changedSbar); <nl> + if (VERBOSE) { <nl> + System.err.println("After rearrangeNowThat:           " + nowThat); <nl> 
mmm AbstractCoreLabel.java <nl> ppp AbstractCoreLabel.java <nl> - public <KEY extends Key<String>> String getString(Class<KEY> key); <nl> + <KEY extends Key<String>> String getString(Class<KEY> key); <nl> - public <KEY extends Key<String>> String getString(Class<KEY> key, String def); <nl> + <KEY extends Key<String>> String getString(Class<KEY> key, String def); <nl> 
mmm ScorePatternsF1.java <nl> ppp ScorePatternsF1.java <nl> + import java.util.Set; <nl> - String label, <nl> + String label, Set<String> allCandidatePhrases, <nl> - TwoDimensionalCounter<Integer, String> negandUnLabeledPatternsandWords4Label, <nl> - TwoDimensionalCounter<Integer, String> allPatternsandWords4Label, Properties props, Counter<String> p0Set, Integer p0){ <nl> 
mmm TregexTest.java <nl> ppp TregexTest.java <nl> + runTest("(NP (< NN | < NNS) & > S)", <nl> + "(foo (S (NP NN) (NP foo) (NP NNS)) (NP NNS))", <nl> + "(NP NN)", "(NP NNS)"); <nl> mmm TregexParser.java <nl> ppp TregexParser.java <nl> + case 12: <nl> - case 12:{ <nl> - jj_consume_token(12); <nl> - child = ChildrenDisj(); <nl> 
new file <nl> ppp CompoundUnaryTransition.java <nl> + package edu.stanford.nlp.parser.shiftreduce; <nl> + import java.util.Arrays; <nl> + import java.util.List; <nl> + import edu.stanford.nlp.ling.CoreLabel; <nl> + import edu.stanford.nlp.trees.LabeledScoredTreeNode; <nl> + import edu.stanford.nlp.trees.Tree; <nl> 
mmm ScorePatternsRatioModifiedFreq.java <nl> ppp ScorePatternsRatioModifiedFreq.java <nl> + import java.lang.reflect.InvocationTargetException; <nl> - ScorePhrases scorePhrases) { <nl> + ScorePhrases scorePhrases, Properties props) { <nl> - negandUnLabeledPatternsandWords4Label, allPatternsandWords4Label); <nl> 
mmm Counter.java <nl> ppp Counter.java <nl> - * renamed to {@link ClassicCounter}.  An alternative Counter <nl> - * implementation, which is more memory efficient but not necessarily faster, <nl> - * is {@link OpenAddressCounter}. <nl> + * renamed to {@link ClassicCounter}. <nl> + * <nl> + * <nl> + * <nl> mmm CoreNLPProtos.java <nl> 
mmm ScorePhrasesLearnFeatWt.java <nl> ppp ScorePhrasesLearnFeatWt.java <nl> - public TwoDimensionalCounter<String, ScorePhraseMeasures> phraseScoresRaw = new TwoDimensionalCounter<String, ScorePhraseMeasures>(); <nl> + public TwoDimensionalCounter<CandidatePhrase, ScorePhraseMeasures> phraseScoresRaw = new TwoDimensionalCounter<CandidatePhrase, ScorePhraseMeasures>(); <nl> 
mmm SeqClassifierFlags.java <nl> ppp SeqClassifierFlags.java <nl> + public boolean useWordLabelCounts = false; <nl> + public boolean usePos = false; <nl> + public boolean useAgreement = false; <nl> + public boolean useAccCase = false; <nl> + public boolean useInna = false; <nl> + public boolean useConcord = false; <nl> 
mmm TokensRegexAnnotatorDemo.java <nl> ppp TokensRegexAnnotatorDemo.java <nl> - import java.io.IOException; <nl> - import java.io.PrintWriter; <nl> - import java.util.List; <nl> - import java.util.Properties; <nl> + import edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor; <nl> + import edu.stanford.nlp.ling.tokensregex.MatchedExpression; <nl> 
mmm ChineseLexiconAndWordSegmenter.java <nl> ppp ChineseLexiconAndWordSegmenter.java <nl> - import edu.stanford.nlp.trees.international.pennchinese.ChineseTreebankLanguagePack; <nl> - Treebank tuneTreebank = null; <nl> - int tagDelimiter = -1; <nl> - String sentenceDelimiter = "\n"; <nl> - boolean fromXML = false; <nl> 
mmm SloppyMathTest.java <nl> ppp SloppyMathTest.java <nl> - public void testPythonMod() { <nl> - assertEquals(0, SloppyMath.pythonMod(9, 3)); <nl> - assertEquals(0, SloppyMath.pythonMod(-9, 3)); <nl> - assertEquals(0, SloppyMath.pythonMod(9, -3)); <nl> - assertEquals(0, SloppyMath.pythonMod(-9, -3)); <nl> - assertEquals(2, SloppyMath.pythonMod(8, 3)); <nl> 
mmm CreatePatterns.java <nl> ppp CreatePatterns.java <nl> - import java.util.*; <nl> + import java.util.ArrayList; <nl> + import java.util.Arrays; <nl> + import java.util.HashMap; <nl> + import java.util.HashSet; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import java.util.Properties; <nl> 
mmm KBPAnnotator.java <nl> ppp KBPAnnotator.java <nl> + private String NOT_PROVIDED = "none"; <nl> + private Properties kbpProperties; <nl> - @ArgumentParser.Option(name="kbp.language", gloss="language for kbp") <nl> - private String language = "english"; <nl> - @ArgumentParser.Option(name="kbp.model", gloss="The path to the model") <nl> 
mmm Tree.java <nl> ppp Tree.java <nl> - public static boolean DISPLAY_SCORES = true; <nl> - String nodeString = onlyLabelValue ? nodeString() : nodeString(); <nl> + String nodeString; <nl> + if (onlyLabelValue) { <nl> + String value = value(); <nl> + nodeString = (value == null) ? "" : value; <nl> + } else { <nl> 
mmm TokensRegexNERAnnotatorITest.java <nl> ppp TokensRegexNERAnnotatorITest.java <nl> - public void testTokensRegexMatchGroup() throws Exception { <nl> - String[][] regexes = <nl> - new String[][]{ <nl> - new String[]{"( /the/? /movie/ (/[A-Z].*/+) )", "MOVIE", "", "0", "1"} <nl> - }; <nl> - Annotator annotatorCased = getTokensRegexNerAnnotator(regexes, false); <nl> 
mmm DcorefBenchmarkSlowITest.java <nl> ppp DcorefBenchmarkSlowITest.java <nl> - "-" + Constants.LOG_PROP, baseLogFile, <nl> - "-" + Constants.CONLL_OUTPUT_PROP, WORK_DIR_FILE.toString() }; <nl> + "-" + Constants.LOG_PROP, baseLogFile, <nl> + "-" + Constants.CONLL_OUTPUT_PROP, WORK_DIR_FILE.toString() }; <nl> 
mmm SentimentAnnotator.java <nl> ppp SentimentAnnotator.java <nl> + static final String DEFAULT_MODEL = "edu/stanford/nlp/models/sentiment/sentiment.ser.gz"; <nl> - this.modelPath = props.getProperty(name + ".model"); <nl> + this.modelPath = props.getProperty(name + ".model", DEFAULT_MODEL); <nl> mmm Execution.java <nl> 
mmm GetPatternsFromDataMultiClass.java <nl> ppp GetPatternsFromDataMultiClass.java <nl> + import edu.stanford.nlp.trees.Trees; <nl> + import edu.stanford.nlp.util.Execution.*; <nl> - * <nl> + * <nl> - * <nl> + * IMPORTANT: Many flags are described in the classes <nl> + * {@link ConstantsAndVariables}, {@link CreatePatterns}, and <nl> 
mmm CounterTestBase.java <nl> ppp CounterTestBase.java <nl> - private boolean integral; <nl> + private final boolean integral; <nl> mmm DVParser.java <nl> ppp DVParser.java <nl> - long nextDebugCycle = op.trainOptions.debugOutputSeconds * 1000; <nl> + int batchCount = 0; <nl> + ++batchCount; <nl> - if (nextDebugCycle > 0 && totalElapsed > nextDebugCycle) { <nl> 
mmm FastNeuralCorefProperties.java <nl> ppp FastNeuralCorefProperties.java <nl> - "edu/stanford/nlp/models/coref/fastneural/fast-english-model.ser.gz"); <nl> + "edu/stanford/nlp/models/coref/fastneural/model.ser.gz"); <nl> mmm DocumentPreprocessor.java <nl> ppp DocumentPreprocessor.java <nl> - if (cm.size() == 1) { <nl> 
mmm EnglishGrammaticalRelations.java <nl> ppp EnglishGrammaticalRelations.java <nl> - private static final String copularWordRegex = <nl> + static final String copularWordRegex = <nl> + static final String clausalComplementRegex = <nl> + "/^(?i:seem|seems|seemed|seeming|resemble|resembles|resembled|resembling|become|becomes|became|becoming)$/"; <nl> 
new file <nl> ppp Transition.java <nl> + package edu.stanford.nlp.parser.shiftreduce; <nl> + import java.io.Serializable; <nl> + public interface Transition extends Serializable { <nl> + public boolean isLegal(State state); <nl> + public State apply(State state); <nl> + public State apply(State state, double scoreDelta); <nl> 
mmm SpeakerInfo.java <nl> ppp SpeakerInfo.java <nl> + import edu.stanford.nlp.util.Generics; <nl> - import java.util.LinkedHashSet; <nl> - public SpeakerInfo(String speakerName) { <nl> + public SpeakerInfo(String speakerName, Mention originalMention) { <nl> + this.originalMention = originalMention; <nl> + if (originalMention != null && originalMention.corefClusterID >= 0) { <nl> 
mmm ScorePhrasesLearnFeatWt.java <nl> ppp ScorePhrasesLearnFeatWt.java <nl> - if(constVars.usePatternEvalWordShape){ <nl> - scoreslist.setCount(ScorePhraseMeasures.WORDSHAPE, this.getWordShapeScore(word, label)); <nl> - } <nl> - if(constVars.usePhraseEvalWordShape){ <nl> - scoreslist.setCount(ScorePhraseMeasures.WORDSHAPE, this.getWordShapeScore(word, label)); <nl> 
mmm TokenSequencePattern.java <nl> ppp TokenSequencePattern.java <nl> + public TokenSequenceMatcher matcher(List<? extends CoreMap> tokens) { <nl> + return getMatcher(tokens); <nl> + } <nl> mmm TrieMapTest.java <nl> ppp TrieMapTest.java <nl> - import java.util.ArrayList; <nl> - import java.util.Arrays; <nl> - import java.util.List; <nl> 
new file <nl> ppp BinaryTransition.java <nl> + package edu.stanford.nlp.parser.shiftreduce; <nl> + import edu.stanford.nlp.ling.CoreLabel; <nl> + import edu.stanford.nlp.trees.LabeledScoredTreeNode; <nl> + import edu.stanford.nlp.trees.Tree; <nl> + import edu.stanford.nlp.trees.TreeCoreAnnotations; <nl> + import edu.stanford.nlp.util.TreeShapedStack; <nl> 
mmm LexicalizedParser.java <nl> ppp LexicalizedParser.java <nl> - BufferedReader in = IOUtils.readerFromString(textFileOrUrl); <nl> + BufferedReader in = IOUtils.readReaderFromString(textFileOrUrl); <nl> mmm ArabicMorphoFeatureSpecification.java <nl> ppp ArabicMorphoFeatureSpecification.java <nl> - private static final String[] defVals = {"I", "D"}; <nl> 
mmm ExhaustivePCFGParser.java <nl> ppp ExhaustivePCFGParser.java <nl> - @Override <nl> - @Override <nl> - @Override <nl> - if (iScore == null || iScore.length == 0 || iScore[0].length <= length || iScore[0][length].length <= goal) { <nl> - return Double.NEGATIVE_INFINITY; <nl> - } <nl> - @Override <nl> - @Override <nl> 
mmm JSONOutputter.java <nl> ppp JSONOutputter.java <nl> - l3.set("originalText", token.originalText()); <nl> new file <nl> ppp UDFeatureAnnotator.java <nl> + package edu.stanford.nlp.pipeline; <nl> + import edu.stanford.nlp.semgraph.SemanticGraph; <nl> + import edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations; <nl> 
mmm CorefMentionFinder.java <nl> ppp CorefMentionFinder.java <nl> - Locale lang; <nl> - public HeadFinder headFinder; <nl> + protected Locale lang; <nl> + protected HeadFinder headFinder; <nl> - protected void removeSpuriousMentionsZh(Annotation doc, List<List<Mention>> predictedMentions, Dictionaries dict, boolean removeNested) { <nl> 
mmm MainActivity.java <nl> ppp MainActivity.java <nl> + import android.view.View; <nl> + import androidx.annotation.NonNull; <nl> + import androidx.drawerlayout.widget.DrawerLayout; <nl> - mMainActivityViewModel = getActivityViewModel(MainActivityViewModel.class); <nl> - } else if (mBinding.dl != null && mBinding.dl.isDrawerOpen(GravityCompat.START)) { <nl> 
new file <nl> ppp IProfileContract.java <nl> + package com.thirtydegreesray.openhub.mvp.contract; <nl> + import com.thirtydegreesray.openhub.db.DaoSession; <nl> + import com.thirtydegreesray.openhub.mvp.presenter.BasePresenter; <nl> + public interface IProfileContract { <nl> + interface View extends IBaseView{ <nl> 
new file <nl> ppp TracePresenter.java <nl> + package com.thirtydegreesray.openhub.mvp.presenter; <nl> + import com.thirtydegreesray.openhub.dao.DaoSession; <nl> + import com.thirtydegreesray.openhub.dao.LocalRepo; <nl> + import com.thirtydegreesray.openhub.dao.LocalUser; <nl> + import com.thirtydegreesray.openhub.dao.Trace; <nl> 
mmm Downloader.java <nl> ppp Downloader.java <nl> + AppHelper.updateAppLanguage(context); <nl> mmm UpgradeDialog.java <nl> ppp UpgradeDialog.java <nl> + .setCancelable(true) <nl> mmm RepositoryActivity.java <nl> ppp RepositoryActivity.java <nl> - import com.thirtydegreesray.openhub.ui.widget.AdaptiveView; <nl> 
mmm BookmarksAdapter.java <nl> ppp BookmarksAdapter.java <nl> - .placeholder(R.mipmap.logo_round) <nl> + .placeholder(R.mipmap.logo) <nl> - .placeholder(R.mipmap.logo_round) <nl> + .placeholder(R.mipmap.logo) <nl> mmm TraceAdapter.java <nl> ppp TraceAdapter.java <nl> - .placeholder(R.mipmap.logo_round) <nl> + .placeholder(R.mipmap.logo) <nl> 
mmm CodeWebView.java <nl> ppp CodeWebView.java <nl> - settings.setSupportZoom(!wrap); <nl> - settings.setBuiltInZoomControls(!wrap); <nl> - if (!wrap) settings.setDisplayZoomControls(false); <nl> + settings.setSupportZoom(true); <nl> + settings.setBuiltInZoomControls(true); <nl> + settings.setDisplayZoomControls(false); <nl> 
mmm VideoHook.java <nl> ppp VideoHook.java <nl> + import com.microsoft.Malmo.MissionHandlerInterfaces.IVideoProducer.VideoType; <nl> + import com.microsoft.Malmo.Utils.TextureHelper; <nl> - this.renderWidth = videoProducer.getWidth(missionInit); <nl> - this.renderHeight = videoProducer.getHeight(missionInit); <nl> 
new file <nl> ppp AvroReflectiveSerializer.java <nl> + package voldemort.serialization.avro; <nl> + import java.io.ByteArrayOutputStream; <nl> + import java.io.IOException; <nl> + import org.apache.avro.file.DataFileReader; <nl> + import org.apache.avro.file.DataFileWriter; <nl> + import org.apache.avro.io.DatumReader; <nl> 
mmm RebalanceStealInfo.java <nl> ppp RebalanceStealInfo.java <nl> + private final String storeName; <nl> + public String getStoreName() { <nl> + return storeName; <nl> + } <nl> - public RebalanceStealInfo(int donorId, List<Integer> partitionList, int attempt) { <nl> + public RebalanceStealInfo(String storeName, <nl> 
mmm AbstractAction.java <nl> ppp AbstractAction.java <nl> - import voldemort.store.routed.StateData; <nl> - import voldemort.store.routed.StateMachine.Event; <nl> + import voldemort.store.routed.PipelineData; <nl> + import voldemort.store.routed.Pipeline.Event; <nl> - public abstract class AbstractAction<T extends StateData> implements Action { <nl> 
deleted file <nl> mmm ByteBufferBackedOutputStream.java <nl> - package voldemort.utils; <nl> - import java.io.IOException; <nl> - import java.io.OutputStream; <nl> - import java.nio.ByteBuffer; <nl> - import voldemort.annotations.concurrency.NotThreadsafe; <nl> - @NotThreadsafe <nl> - public class ByteBufferBackedOutputStream extends OutputStream { <nl> 
mmm SystemStoreClientFactory.java <nl> ppp SystemStoreClientFactory.java <nl> + long idleConnectionTimeout = clientConfig.getIdleConnectionTimeout(TimeUnit.MILLISECONDS); <nl> + .setIdleConnectionTimeout(idleConnectionTimeout, TimeUnit.MILLISECONDS) <nl> mmm TestSocketStoreFactory.java <nl> ppp TestSocketStoreFactory.java <nl> 
mmm StealerBasedRebalanceAsyncOperation.java <nl> ppp StealerBasedRebalanceAsyncOperation.java <nl> + private final int partitionStoreCount; <nl> - super(rebalancer, voldemortConfig, metadataStore, requestId, "Stealer based rebalance : " <nl> - + stealInfo); <nl> + super(rebalancer, <nl> + voldemortConfig, <nl> 
mmm NioSocketService.java <nl> ppp NioSocketService.java <nl> + import voldemort.annotations.jmx.JmxGetter; <nl> + @JmxGetter(name = "numActiveConnections", description = "total number of active connections across selector managers") <nl> + public final int getNumActiveConnections() { <nl> + int sum = 0; <nl> 
mmm AbstractZonedRebalanceTest.java <nl> ppp AbstractZonedRebalanceTest.java <nl> - import org.junit.BeforeClass; <nl> - @BeforeClass <nl> - public static void generalSetup() throws IOException { <nl> + @Before <nl> + public void setUp() throws IOException { <nl> + setUpRWStuff(); <nl> + setupZZandZZZ(); <nl> 
mmm ConfigurationStorageEngine.java <nl> ppp ConfigurationStorageEngine.java <nl> + "  to this " + value.getVersion() <nl> - + "exists for key " + key); <nl> + + " exists for key " + key); <nl> new file <nl> ppp GossipTest.java <nl> + package voldemort.utils; <nl> + import org.apache.commons.io.IOUtils; <nl> 
mmm VoldemortEc2InstanceCreatorApp.java <nl> ppp VoldemortEc2InstanceCreatorApp.java <nl> - List<HostNamePair> hostNamePairs = ec2Connection.create(ami, <nl> - keypairId, <nl> - instanceType, <nl> - instanceCount); <nl> + List<HostNamePair> hostNamePairs = ec2Connection.createInstances(ami, <nl> + keypairId, <nl> 
mmm PutPipelineData.java <nl> ppp PutPipelineData.java <nl> - public class PutPipelineData extends ListStateData { <nl> + public class PutPipelineData extends BasicPipelineData { <nl> mmm UpdateResults.java <nl> ppp UpdateResults.java <nl> - import voldemort.store.routed.ListStateData; <nl> + import voldemort.store.routed.BasicPipelineData; <nl> 
mmm Ec2RemoteTestConfig.java <nl> ppp Ec2RemoteTestConfig.java <nl> + protected int getIntProperty(Properties properties, String propertyName, int defaultValue) { <nl> + String value = properties.getProperty(propertyName); <nl> + return value != null ? Integer.parseInt(value) : defaultValue; <nl> + } <nl> 
mmm StorageEngine.java <nl> ppp StorageEngine.java <nl> + public ClosableIterator<K> keys(); <nl> mmm MetadataStore.java <nl> ppp MetadataStore.java <nl> + public ClosableIterator<ByteArray> keys() { <nl> + throw new VoldemortException("You cannot iterate over all keys in Metadata"); <nl> + } <nl> mmm MysqlStorageEngine.java <nl> 
mmm ServerTestUtils.java <nl> ppp ServerTestUtils.java <nl> + null, <nl> - return new SocketRequestHandlerFactory(repository, null, null, null); <nl> + return new SocketRequestHandlerFactory(repository, null, null, null, null); <nl> mmm ServiceType.java <nl> ppp ServiceType.java <nl> - GOSSIP("gossip-service"); <nl> 
mmm AdminRebalanceTest.java <nl> ppp AdminRebalanceTest.java <nl> - .setRoutingPolicy(RoutingTier.SERVER) <nl> + .setRoutingPolicy(RoutingTier.CLIENT) <nl> - .setRoutingPolicy(RoutingTier.SERVER) <nl> + .setRoutingPolicy(RoutingTier.CLIENT) <nl> - .setRoutingPolicy(RoutingTier.SERVER) <nl> + .setRoutingPolicy(RoutingTier.CLIENT) <nl> 
mmm KratiStorageEngine.java <nl> ppp KratiStorageEngine.java <nl> - import krati.cds.array.DataArray; <nl> - import krati.cds.impl.segment.SegmentFactory; <nl> - import krati.cds.impl.store.DynamicDataStore; <nl> + import krati.array.DataArray; <nl> + import krati.core.segment.SegmentFactory; <nl> + import krati.store.DynamicDataStore; <nl> 
new file <nl> ppp AvroReflectiveSerializer.java <nl> + package voldemort.serialization.avro; <nl> + import java.io.ByteArrayInputStream; <nl> + import java.io.ByteArrayOutputStream; <nl> + import java.io.IOException; <nl> + import org.apache.avro.file.DataFileStream; <nl> + import org.apache.avro.file.DataFileWriter; <nl> 
mmm SineEvaluatorTest.java <nl> ppp SineEvaluatorTest.java <nl> - @Test <nl> + @Test(expected = IOException.class) <nl> - @Test <nl> + @Test(expected = IOException.class) <nl> mmm CubedRootEvaluatorTest.java <nl> ppp CubedRootEvaluatorTest.java <nl> - @Test <nl> + @Test(expected = IOException.class) <nl> - assertNull(result); <nl> 
mmm SQLHandler.java <nl> ppp SQLHandler.java <nl> + import java.sql.ResultSetMetaData; <nl> + import java.sql.SQLException; <nl> - import java.util.Collections; <nl> - import java.util.HashSet; <nl> + import java.util.HashMap; <nl> - import java.util.Locale; <nl> - import java.util.Set; <nl> - import com.facebook.presto.sql.tree.*; <nl> 
new file <nl> ppp TestDocCount.java <nl> + package org.apache.lucene.index; <nl> + import org.apache.lucene.document.Document; <nl> + import org.apache.lucene.document.StringField; <nl> + import org.apache.lucene.index.codecs.CodecProvider; <nl> + import org.apache.lucene.search.DocIdSetIterator; <nl> + import org.apache.lucene.store.Directory; <nl> 
deleted file <nl> mmm MultiCLMain.java <nl> - package org.apache.lucene.demo.facet.multiCL; <nl> - import java.util.List; <nl> - import org.apache.lucene.store.Directory; <nl> - import org.apache.lucene.store.RAMDirectory; <nl> - import org.apache.lucene.demo.facet.ExampleResult; <nl> - import org.apache.lucene.demo.facet.ExampleUtils; <nl> 
mmm TestNoMergePolicy.java <nl> ppp TestNoMergePolicy.java <nl> - assertNull(mp.findMerges(null, (SegmentInfos)null)); <nl> - assertNull(mp.findForcedMerges(null, 0, null)); <nl> - assertNull(mp.findForcedDeletesMerges(null)); <nl> + assertNull(mp.findMerges(null, (SegmentInfos)null, null)); <nl> + assertNull(mp.findForcedMerges(null, 0, null, null)); <nl> 
mmm WrappedIntPointField.java <nl> ppp WrappedIntPointField.java <nl> + import org.apache.lucene.search.DoubleValuesSource; <nl> - bindings.add(new SortField("valid0", SortField.Type.INT)); <nl> - bindings.add(new SortField("valid1", SortField.Type.INT)); <nl> - bindings.add(new SortField("valid2", SortField.Type.INT)); <nl> 
mmm Policy.java <nl> ppp Policy.java <nl> + import java.io.PrintWriter; <nl> + public static final List<Map<String, Object>> DEFAULT_CLUSTER_POLICY_JSON = Collections.unmodifiableList( <nl> + Arrays.asList( <nl> + Utils.makeMap("replica","<2", "shard","#EACH", "node", "#ANY", "strict", "false"), <nl> + Utils.makeMap("replica", "#EQUAL", "node", "#ANY", "strict", "false"), <nl> 
new file <nl> ppp TokenStreamToAutomaton.java <nl> + package org.apache.lucene.analysis; <nl> + import java.io.FileOutputStream; <nl> + import java.io.IOException; <nl> + import java.io.OutputStreamWriter; <nl> + import java.io.Writer; <nl> + import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute; <nl> 
mmm WFSTCompletionLookup.java <nl> ppp WFSTCompletionLookup.java <nl> - fst.save(output); <nl> + fst.save(output, output); <nl> - this.fst = new FST<>(input, PositiveIntOutputs.getSingleton()); <nl> + this.fst = new FST<>(input, input, PositiveIntOutputs.getSingleton()); <nl> mmm AnalyzingSuggester.java <nl> 
mmm SolrIndexSearcher.java <nl> ppp SolrIndexSearcher.java <nl> + import org.apache.lucene.index.NumericDocValues; <nl> - import org.apache.lucene.search.BooleanClause; <nl> + import org.apache.lucene.search.*; <nl> - import org.apache.lucene.search.BooleanQuery; <nl> - import org.apache.lucene.search.CollectionStatistics; <nl> 
mmm VarStraightBytesImpl.java <nl> ppp VarStraightBytesImpl.java <nl> - PackedInts.bitsRequired(0)); <nl> + PackedInts.bitsRequired(0), PackedInts.DEFAULT); <nl> - PackedInts.bitsRequired(address)); <nl> + PackedInts.bitsRequired(address), PackedInts.DEFAULT); <nl> mmm Bytes.java <nl> ppp Bytes.java <nl> - * @param fasterButMoreRam whether packed ints for docvalues should be optimized for speed by rounding up the bytes <nl> 
new file <nl> ppp TestPendingDeletes.java <nl> + package org.apache.lucene.index; <nl> + import java.io.IOException; <nl> + import java.util.Collections; <nl> + import java.util.HashMap; <nl> + import org.apache.lucene.codecs.Codec; <nl> + import org.apache.lucene.store.IOContext; <nl> + import org.apache.lucene.store.RAMDirectory; <nl> 
mmm UnifiedSolrHighlighter.java <nl> ppp UnifiedSolrHighlighter.java <nl> - import org.apache.lucene.search.postingshighlight.CustomSeparatorBreakIterator; <nl> - import org.apache.lucene.search.postingshighlight.WholeBreakIterator; <nl> + import org.apache.lucene.search.uhighlight.CustomSeparatorBreakIterator; <nl> 
mmm DocSet.java <nl> ppp DocSet.java <nl> - import org.apache.solr.common.SolrException; <nl> + import org.apache.lucene.util.Bits; <nl> + import org.apache.lucene.util.FixedBitSet; <nl> - public void add(int doc); <nl> - public void addUnique(int doc); <nl> + DocSet() { <nl> + assert this instanceof BitDocSet || this instanceof SortedIntDocSet; <nl> 
mmm RMIRemoteSearchable.java <nl> ppp RMIRemoteSearchable.java <nl> - * <nl> - *  @version $Id:$ <nl> mmm TestSmallFloat.java <nl> ppp TestSmallFloat.java <nl> mmm TestIndexWriterLockRelease.java <nl> ppp TestIndexWriterLockRelease.java <nl> - * <nl> - * @version $Id$ <nl> mmm TestFieldNormModifier.java <nl> ppp TestFieldNormModifier.java <nl> 
new file <nl> ppp BinomialDistributionEvaluator.java <nl> + package org.apache.solr.client.solrj.io.eval; <nl> + import java.io.IOException; <nl> + import java.util.Locale; <nl> + import org.apache.commons.math3.distribution.BinomialDistribution; <nl> + import org.apache.solr.client.solrj.io.stream.expr.StreamExpression; <nl> 
mmm SortingAtomicReaderTest.java <nl> ppp SortingAtomicReaderTest.java <nl> + @Override <nl> + public String getID() { <nl> + return ID_FIELD; <nl> + } <nl> mmm IndexWriter.java <nl> ppp IndexWriter.java <nl> + public static final String SOURCE = "source"; <nl> + public static final String SOURCE_MERGE = "merge"; <nl> 
mmm TestClassicAnalyzer.java <nl> ppp TestClassicAnalyzer.java <nl> - IndexReader reader = IndexReader.open(dir, true); <nl> + IndexReader reader = IndexReader.open(dir); <nl> - reader = IndexReader.open(dir, true); <nl> + reader = IndexReader.open(dir); <nl> mmm TestNumericRangeFilterBuilder.java <nl> ppp TestNumericRangeFilterBuilder.java <nl> 
mmm DisjunctionMaxScorer.java <nl> ppp DisjunctionMaxScorer.java <nl> + if (firstTime) { <nl> + if (!more) return false; <nl> + heapify(); <nl> + firstTime = false; <nl> + } <nl> mmm CheckHits.java <nl> ppp CheckHits.java <nl> + QueryUtils.check(query,searcher); <nl> mmm TestDisjunctionMaxQuery.java <nl> ppp TestDisjunctionMaxQuery.java <nl> 
mmm StreamingTest.java <nl> ppp StreamingTest.java <nl> + rollupStream = new RollupStream(stream, buckets, metrics); <nl> + tuples = getTuples(rollupStream); <nl> + assert(tuples.size() == 3); <nl> + tuple = tuples.get(0); <nl> + bucket = tuple.getString("a_s"); <nl> + assertTrue(bucket.equals("hello0")); <nl> 
mmm BlockTreeTermsReader.java <nl> ppp BlockTreeTermsReader.java <nl> - indexStartFP, indexIn, minTerm, maxTerm, state.openedFromWriter)); <nl> + indexStartFP, indexIn, minTerm, maxTerm)); <nl> mmm TestDoc.java <nl> ppp TestDoc.java <nl> - SegmentReader r1 = new SegmentReader(si1, Version.LATEST.major, false, context); <nl> 
deleted file <nl> mmm AbstractTrieRangeQuery.java <nl> - package org.apache.lucene.search.trie; <nl> - import java.io.IOException; <nl> - import org.apache.lucene.search.Filter; <nl> - import org.apache.lucene.search.MultiTermQuery; <nl> - import org.apache.lucene.search.FilteredTermEnum; <nl> - import org.apache.lucene.index.IndexReader; <nl> 
mmm HighlightParams.java <nl> ppp HighlightParams.java <nl> + public static final String FRAG_LIST_BUILDER = HIGHLIGHT+".fragListBuilder"; <nl> + public static final String FRAGMENTS_BUILDER = HIGHLIGHT+".fragmentsBuilder"; <nl> + public static final String USE_HIGHLIGHTER = HIGHLIGHT + ".useHighlighter"; <nl> 
mmm GroupFacetCollectorTest.java <nl> ppp GroupFacetCollectorTest.java <nl> - import org.apache.lucene.document.*; <nl> + import org.apache.lucene.document.Document; <nl> + import org.apache.lucene.document.Field; <nl> + import org.apache.lucene.document.FieldType; <nl> + import org.apache.lucene.document.SortedDocValuesField; <nl> 
mmm SecurityConfHandler.java <nl> ppp SecurityConfHandler.java <nl> - import org.apache.solr.api.SpecProvider; <nl> + import org.apache.solr.common.SpecProvider; <nl> - final SpecProvider authcCommands = ApiBag.getSpec("cluster.security.authentication.Commands"); <nl> - final SpecProvider authzCommands = ApiBag.getSpec("cluster.security.authorization.Commands"); <nl> 
deleted file <nl> mmm SolrSort.java <nl> - package org.apache.solr.handler.sql; <nl> - import org.apache.calcite.plan.RelOptCluster; <nl> - import org.apache.calcite.plan.RelOptCost; <nl> - import org.apache.calcite.plan.RelOptPlanner; <nl> - import org.apache.calcite.plan.RelTraitSet; <nl> - import org.apache.calcite.rel.RelCollation; <nl> 
mmm LeaderVoteWaitTimeoutTest.java <nl> ppp LeaderVoteWaitTimeoutTest.java <nl> - try { <nl> - waitForState("Timeout waiting for new leader", collectionName, (liveNodes, collectionState) -> { <nl> + waitForState("Timeout waiting for new leader", collectionName, new CollectionStatePredicate() { <nl> + @Override <nl> 
mmm TermVectorsConsumer.java <nl> ppp TermVectorsConsumer.java <nl> + import org.apache.lucene.util.Counter; <nl> - super(docWriter, false, null); <nl> + super(docWriter, Counter.newCounter(), null); <nl> - IOContext context = new IOContext(new FlushInfo(docWriter.getNumDocsInRAM(), docWriter.bytesUsed())); <nl> 
mmm PointInPolygonQuery.java <nl> ppp PointInPolygonQuery.java <nl> mmm FloatPoint.java <nl> ppp FloatPoint.java <nl> + import org.apache.lucene.search.Query; <nl> - public static PointRangeQuery newExactQuery(String field, float value) { <nl> + public static Query newExactQuery(String field, float value) { <nl> 
mmm TestCoreContainer.java <nl> ppp TestCoreContainer.java <nl> - "/solr/cores[@defaultCoreName='collection1']", <nl> - "/solr/cores/core[@name='collection1' and @instanceDir='" + instDir <nl> - + "']", "1=count(/solr/cores/core)"); <nl> + "/solr/cores[@defaultCoreName='collection1' and not(@swappableCacheSize)]", <nl> 
new file <nl> ppp SolrProject.java <nl> + package org.apache.solr.handler.sql; <nl> + import java.util.HashMap; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import org.apache.calcite.adapter.java.JavaTypeFactory; <nl> + import org.apache.calcite.plan.RelOptCluster; <nl> + import org.apache.calcite.plan.RelOptCost; <nl> 
mmm FuzzyLikeThisQuery.java <nl> ppp FuzzyLikeThisQuery.java <nl> + ts.reset(); <nl> - } <nl> + } <nl> + ts.end(); <nl> + ts.close(); <nl> mmm OffsetLimitTokenFilterTest.java <nl> ppp OffsetLimitTokenFilterTest.java <nl> - TokenStream stream = new MockTokenizer(new StringReader( <nl> + MockTokenizer stream = new MockTokenizer(new StringReader( <nl> 
mmm ChainedFilter.java <nl> ppp ChainedFilter.java <nl> - protected DocIdSet finalResult(OpenBitSetDISI result, int maxDocs) { <nl> - return (result.cardinality() < (maxDocs / 9)) <nl> - ? (DocIdSet) new SortedVIntList(result) <nl> - : (DocIdSet) result; <nl> + *  switch to a different DocIdSet implementation yourself. <nl> 
mmm ResponseParser.java <nl> ppp ResponseParser.java <nl> - import java.io.InputStreamReader; <nl> 
mmm TestMergePolicyConfig.java <nl> ppp TestMergePolicyConfig.java <nl> + import org.apache.lucene.index.NoMergePolicy; <nl> + public void testNoMergePolicyFactoryConfig() throws Exception { <nl> + initCore("solrconfig-nomergepolicyfactory.xml","schema-minimal.xml"); <nl> + IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore()); <nl> 
new file <nl> ppp TrecJudge.java <nl> + package org.apache.lucene.benchmark.quality.trec; <nl> + import java.io.BufferedReader; <nl> + import java.io.IOException; <nl> + import java.io.PrintWriter; <nl> + import java.util.ArrayList; <nl> + import java.util.HashMap; <nl> + import java.util.Iterator; <nl> + import java.util.StringTokenizer; <nl> 
new file <nl> ppp MeanDifferenceEvaluator.java <nl> + package org.apache.solr.client.solrj.io.eval; <nl> + import java.io.IOException; <nl> + import java.math.BigDecimal; <nl> + import java.util.List; <nl> + import java.util.Locale; <nl> + import org.apache.commons.math3.stat.StatUtils; <nl> + import org.apache.solr.client.solrj.io.stream.expr.StreamExpression; <nl> 
mmm CloudTestUtils.java <nl> ppp CloudTestUtils.java <nl> + ClusterState state = null; <nl> + DocCollection coll = null; <nl> - ClusterState state = cloudManager.getClusterStateProvider().getClusterState(); <nl> - DocCollection coll = state.getCollectionOrNull(collection); <nl> + state = cloudManager.getClusterStateProvider().getClusterState(); <nl> 
mmm ClassicTokenizerImpl.java <nl> ppp ClassicTokenizerImpl.java <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> mmm ParseException.java <nl> ppp ParseException.java <nl> mmm CharStream.java <nl> ppp CharStream.java <nl> mmm UAX29URLEmailTokenizerImpl.java <nl> ppp UAX29URLEmailTokenizerImpl.java <nl> 
mmm AssertingWeight.java <nl> ppp AssertingWeight.java <nl> - return scorerSupplier.get(false); <nl> + return scorerSupplier.get(Long.MAX_VALUE); <nl> - public Scorer get(boolean randomAccess) throws IOException { <nl> + public Scorer get(long leadCost) throws IOException { <nl> - return AssertingScorer.wrap(new Random(random.nextLong()), inScorerSupplier.get(randomAccess), needsScores); <nl> 
mmm IntroSelector.java <nl> ppp IntroSelector.java <nl> mmm TestMutablePointsReaderUtils.java <nl> ppp TestMutablePointsReaderUtils.java <nl> - int cmp = StringHelper.compare(bytesPerDim, o1.packedValue, 0, o2.packedValue, 0); <nl> + int cmp = o1.packedValue.compareTo(o2.packedValue); <nl> + BytesRef firstValue = points[0].packedValue; <nl> 
mmm PulsingPostingsReaderImpl.java <nl> ppp PulsingPostingsReaderImpl.java <nl> mmm TestIndexWriter.java <nl> ppp TestIndexWriter.java <nl> + if (VERBOSE) { <nl> + System.out.println("TEST: add doc id=" + id); <nl> + } <nl> - System.out.println("TEST: delete doc " + delID); <nl> + System.out.println("TEST: delete doc id=" + delID); <nl> 
new file <nl> ppp AssertingCodec.java <nl> + package org.apache.lucene.codecs.asserting; <nl> + import org.apache.lucene.codecs.Codec; <nl> + import org.apache.lucene.codecs.DocValuesFormat; <nl> + import org.apache.lucene.codecs.FieldInfosFormat; <nl> + import org.apache.lucene.codecs.LiveDocsFormat; <nl> 
mmm StreamExpressionTest.java <nl> ppp StreamExpressionTest.java <nl> + @Test <nl> + public void testReverse() throws Exception { <nl> + UpdateRequest updateRequest = new UpdateRequest(); <nl> + int i=0; <nl> + while(i<50) { <nl> + updateRequest.add(id, "id_"+(++i),"test_dt", getDateString("2016", "5", "1"), "price_f", "400.00"); <nl> 
new file <nl> ppp SolrRel.java <nl> + package org.apache.solr.handler.sql; <nl> + import org.apache.calcite.plan.Convention; <nl> + import org.apache.calcite.plan.RelOptTable; <nl> + import org.apache.calcite.rel.RelNode; <nl> + import org.apache.calcite.util.Pair; <nl> + import java.util.*; <nl> + interface SolrRel extends RelNode { <nl> 
new file <nl> ppp ThreadInterruptedException.java <nl> + package org.apache.lucene.util; <nl> + public final class ThreadInterruptedException extends RuntimeException { <nl> + public ThreadInterruptedException(InterruptedException ie) { <nl> + super(ie); <nl> + } <nl> + } <nl> mmm Lock.java <nl> ppp Lock.java <nl> 
mmm IntRangeField.java <nl> ppp IntRangeField.java <nl> + public static Query newCrossesQuery(String field, final int[] min, final int[] max) { <nl> + checkArgs(min, max); <nl> + return new RangeFieldQuery(field, encode(min, max), min.length, QueryType.CROSSES) { <nl> + @Override <nl> + protected String toString(byte[] ranges, int dimension) { <nl> 
mmm ZkCLI.java <nl> ppp ZkCLI.java <nl> - import org.apache.commons.io.FileUtils; <nl> - import org.apache.commons.io.IOUtils; <nl> + import org.apache.commons.io.FileUtils; <nl> + import org.apache.commons.io.IOUtils; <nl> + import org.apache.solr.common.cloud.ZkConfigManager; <nl> - import org.apache.zookeeper.ZooDefs; <nl> 
mmm TestPerSegmentDeletes.java <nl> ppp TestPerSegmentDeletes.java <nl> + fsmp = (RangeMergePolicy) writer.getConfig().getMergePolicy(); <nl> mmm MergePolicy.java <nl> ppp MergePolicy.java <nl> - public abstract class MergePolicy implements java.io.Closeable { <nl> + public abstract class MergePolicy implements java.io.Closeable, Cloneable { <nl> 
mmm TestGeo3DPointField.java <nl> ppp TestGeo3DPointField.java <nl> - import org.apache.lucene.geo3d.GeoCircle; <nl> + import org.apache.lucene.geo3d.GeoStandardCircle; <nl> - new GeoCircle(PlanetModel.WGS84, toRadians(50), toRadians(-97), Math.PI/180.)), 1).totalHits); <nl> + new GeoStandardCircle(PlanetModel.WGS84, toRadians(50), toRadians(-97), Math.PI/180.)), 1).totalHits); <nl> 
mmm NumericDocValues.java <nl> ppp NumericDocValues.java <nl> mmm FieldComparator.java <nl> ppp FieldComparator.java <nl> + import org.apache.lucene.index.BinaryDocValues; <nl> - import org.apache.lucene.search.FieldCache.DocTerms; <nl> - private DocTerms docTerms; <nl> + private BinaryDocValues docTerms; <nl> 
mmm MetricsHandlerTest.java <nl> ppp MetricsHandlerTest.java <nl> - import java.util.Arrays; <nl> - import org.apache.solr.common.util.Utils; <nl> - import org.apache.solr.core.PluginBag; <nl> - import org.apache.solr.core.PluginInfo; <nl> - import org.apache.solr.core.SolrCore; <nl> - import org.apache.solr.handler.RequestHandlerBase; <nl> 
mmm TestMemoryIndexAgainstRAMDir.java <nl> ppp TestMemoryIndexAgainstRAMDir.java <nl> - for (String field : MultiFields.getFields(other)) { <nl> + for (String field : MultiFields.getIndexedFields(other)) { <nl> mmm TestSegmentReader.java <nl> ppp TestSegmentReader.java <nl> - Fields fields = MultiFields.getFields(reader); <nl> 
new file <nl> ppp ExpressionSortField.java <nl> + package org.apache.lucene.expressions; <nl> + import java.io.IOException; <nl> + import org.apache.lucene.queries.function.ValueSource; <nl> + import org.apache.lucene.search.FieldComparator; <nl> + import org.apache.lucene.search.SortField; <nl> + class ExpressionSortField extends SortField { <nl> 
mmm PointWriter.java <nl> ppp PointWriter.java <nl> + for (PointReader reader : mergeState.pointReaders) { <nl> + if (reader != null) { <nl> + reader.checkIntegrity(); <nl> + } <nl> + } <nl> mmm LatLonPointDistanceQuery.java <nl> ppp LatLonPointDistanceQuery.java <nl> - if (box.maxLon < box.minLon) { <nl> + if (box.crossesDateline()) { <nl> 
mmm ClientDataProvider.java <nl> ppp ClientDataProvider.java <nl> - import org.apache.solr.recipe.ClusterDataProvider; <nl> - import org.apache.solr.recipe.Policy.ReplicaInfo; <nl> + import org.apache.solr.autoscaling.ClusterDataProvider; <nl> + import org.apache.solr.autoscaling.Policy.ReplicaInfo; <nl> mmm ClusterDataProvider.java <nl> 
mmm FieldsReader.java <nl> ppp FieldsReader.java <nl> - import org.apache.lucene.store.InputStream; <nl> + import org.apache.lucene.store.IndexInput; <nl> - private InputStream fieldsStream; <nl> - private InputStream indexStream; <nl> + private IndexInput fieldsStream; <nl> + private IndexInput indexStream; <nl> 
mmm SegmentCodecs.java <nl> ppp SegmentCodecs.java <nl> - * {@link SegmentCodecs#build(FieldInfos, CodecProvider)} should be used to <nl> - * create a {@link SegmentCodecs} instance during {@link IndexWriter} sessions <nl> - * which creates the ordering of distinct codecs and assigns the <nl> - * {@link FieldInfo#codecId} or in other words, the ord of the codec maintained <nl> 
new file <nl> ppp CalciteSolrDriver.java <nl> + package org.apache.solr.handler.sql; <nl> + import org.apache.calcite.jdbc.CalciteConnection; <nl> + import org.apache.calcite.jdbc.Driver; <nl> + import org.apache.calcite.schema.SchemaPlus; <nl> + import java.sql.Connection; <nl> + import java.sql.SQLException; <nl> 
new file <nl> ppp SolrTableScan.java <nl> + package org.apache.solr.handler.sql; <nl> + import org.apache.calcite.plan.*; <nl> + import org.apache.calcite.rel.RelNode; <nl> + import org.apache.calcite.rel.core.TableScan; <nl> + import org.apache.calcite.rel.type.RelDataType; <nl> + import java.util.List; <nl> 
mmm Policy.java <nl> ppp Policy.java <nl> + import org.apache.solr.client.solrj.cloud.autoscaling.Suggestion.ConditionType; <nl> - final List<Pair<String, Suggestion.ConditionType>> params; <nl> + final List<Pair<String, ConditionType>> params; <nl> + for (String newParam : new ArrayList<>(newParams)) { <nl> 
mmm TestSimilarityBase.java <nl> ppp TestSimilarityBase.java <nl> + import org.apache.lucene.search.CollectionStatistics; <nl> + import org.apache.lucene.search.TermStatistics; <nl> + import org.apache.lucene.util.BytesRef; <nl> + private CollectionStatistics toCollectionStats(BasicStats stats) { <nl> + return new CollectionStatistics("spoof", stats.getNumberOfDocuments(), -1, stats.getNumberOfFieldTokens(), -1); <nl> 
mmm ExtractingDocumentLoader.java <nl> ppp ExtractingDocumentLoader.java <nl> + @SuppressWarnings({"unchecked"}) <nl> + @SuppressWarnings({"rawtypes"}) <nl> mmm SchedulerMetricsCollector.java <nl> ppp SchedulerMetricsCollector.java <nl> - private void collectMetrics() { <nl> + private@SuppressWarnings({"try"}) <nl> 
new file <nl> ppp BaseSegmentInfoFormatTestCase.java <nl> + package org.apache.lucene.index; <nl> + import java.io.IOException; <nl> + import java.util.Collections; <nl> + import java.util.HashMap; <nl> + import java.util.HashSet; <nl> + import java.util.Map; <nl> + import java.util.Set; <nl> + import org.apache.lucene.codecs.Codec; <nl> 
mmm ICUCollationKeyFilterFactory.java <nl> ppp ICUCollationKeyFilterFactory.java <nl> - import org.apache.lucene.analysis.util.TokenFilterFactory; <nl> + import org.apache.lucene.analysis.util.*; <nl> - import org.apache.lucene.analysis.util.ResourceLoader; <nl> - import org.apache.lucene.analysis.util.ResourceLoaderAware; <nl> 
mmm BlockJoinComparatorSource.java <nl> ppp BlockJoinComparatorSource.java <nl> + @SuppressWarnings({"unchecked", "rawtypes"}) <nl> mmm PatternParser.java <nl> ppp PatternParser.java <nl> - @SuppressWarnings("unchecked") <nl> + @SuppressWarnings({"unchecked", "rawtypes"}) <nl> - @SuppressWarnings("unchecked") <nl> 
mmm TransposeEvaluator.java <nl> ppp TransposeEvaluator.java <nl> - return new Matrix(tmatrix.getData()); <nl> + Matrix newMatrix = new Matrix(tmatrix.getData()); <nl> + newMatrix.setColumnLabels(matrix.getRowLabels()); <nl> + newMatrix.setRowLabels(matrix.getColumnLabels()); <nl> + return newMatrix; <nl> mmm StreamExpressionTest.java <nl> 
mmm CollectionReloadTest.java <nl> ppp CollectionReloadTest.java <nl> - CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete(); <nl> - req.setCollectionName(testCollectionName); <nl> - req.process(cloudClient); <nl> + new CollectionAdminRequest.Delete() <nl> + .setCollectionName(testCollectionName).process(cloudClient); <nl> 
mmm AbstractLuceneSpellChecker.java <nl> ppp AbstractLuceneSpellChecker.java <nl> + import org.apache.lucene.search.spell.StringDistance; <nl> mmm QueryConverter.java <nl> ppp QueryConverter.java <nl> mmm BinaryQueryResponseWriter.java <nl> ppp BinaryQueryResponseWriter.java <nl> mmm ShortFieldSource.java <nl> 
mmm TestSimNodeLostTrigger.java <nl> ppp TestSimNodeLostTrigger.java <nl> - String lostNode = cluster.getSimClusterStateProvider().simGetRandomNode(random()); <nl> + String lostNode = cluster.getSimClusterStateProvider().simGetRandomNode(); <nl> mmm ComputePlanAction.java <nl> ppp ComputePlanAction.java <nl> 
mmm TokenInfoDictionaryTest.java <nl> ppp TokenInfoDictionaryTest.java <nl> + import org.apache.lucene.analysis.ja.util.DictionaryBuilder; <nl> - import org.apache.lucene.analysis.ja.util.TokenInfoDictionaryBuilder; <nl> - import org.apache.lucene.analysis.ja.util.TokenInfoDictionaryWriter; <nl> - TokenInfoDictionaryBuilder builder = new TokenInfoDictionaryBuilder(DictionaryFormat.IPADIC, "utf-8", true); <nl> 
mmm CloudSolrStream.java <nl> ppp CloudSolrStream.java <nl> + import org.apache.solr.common.cloud.DocCollection; <nl> - if(slices == null) { <nl> + if (slices == null) { <nl> - for(String col : clusterState.getCollections()) { <nl> - if(col.equalsIgnoreCase(collection)) { <nl> - slices = clusterState.getActiveSlices(col); <nl> 
new file <nl> ppp CryptoModule.java <nl> + package org.cryptomator.crypto.aes256; <nl> + import java.security.NoSuchAlgorithmException; <nl> + import java.security.SecureRandom; <nl> + import org.cryptomator.crypto.Cryptor; <nl> + import dagger.Module; <nl> + import dagger.Provides; <nl> + @Module <nl> + public class CryptoModule { <nl> 
mmm VaultModule.java <nl> ppp VaultModule.java <nl> - 		flags.append(" -ovolname=").append(mountName.get()); <nl> + 		flags.append(" -ovolname=").append('"').append(mountName.get()).append('"'); <nl> - 		flags.append(" -ovolname=").append(mountName.get()); <nl> + 		flags.append(" -ovolname=").append('"').append(mountName.get()).append('"'); <nl> 
new file <nl> ppp BytesWithSequenceNumber.java <nl> + package org.cryptomator.crypto.engine.impl; <nl> + import java.nio.ByteBuffer; <nl> + import java.util.concurrent.ExecutionException; <nl> + import java.util.concurrent.Future; <nl> + class BytesWithSequenceNumber implements Comparable<BytesWithSequenceNumber> { <nl> 
mmm UnlockWorkflow.java <nl> ppp UnlockWorkflow.java <nl> - import org.cryptomator.common.mountpoint.InvalidMountPointException; <nl> - import org.cryptomator.common.vaults.MountPointRequirement; <nl> - import org.cryptomator.common.vaults.Volume.VolumeException; <nl> + import org.cryptomator.common.vaults.Volume; <nl> 
mmm SettingsController.java <nl> ppp SettingsController.java <nl> - 		EasyBind.subscribe(checkForUpdatesCheckbox.selectedProperty(), settings::setCheckForUpdatesEnabled); <nl> + 		EasyBind.subscribe(checkForUpdatesCheckbox.selectedProperty(), this::checkForUpdateDidChange); <nl> - 		EasyBind.subscribe(useIpv6Checkbox.selectedProperty(), settings::setUseIpv6); <nl> 
new file <nl> ppp BaseCachingSnapshotParser.java <nl> + package com.firebase.ui.common; <nl> + import android.support.annotation.RestrictTo; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) <nl> + public abstract class BaseCachingSnapshotParser<S, T> implements BaseSnapshotParser<S, T> { <nl> 
mmm TwitterProvider.java <nl> ppp TwitterProvider.java <nl> + import android.net.Uri; <nl> - import java.lang.ref.WeakReference; <nl> + import com.twitter.sdk.android.core.models.User; <nl> - public static void signout(Context context) { <nl> + public static void signOut(Context context) { <nl> - public void success(Result<TwitterSession> result) { <nl> 
mmm GoogleProvider.java <nl> ppp GoogleProvider.java <nl> + import android.widget.Toast; <nl> + private boolean mSpecificAccount; <nl> + mSpecificAccount = !TextUtils.isEmpty(email); <nl> + if (mSpecificAccount) { <nl> + Toast.makeText( <nl> + mActivity, <nl> + mActivity.getString( <nl> + R.string.signed_in_with_specific_account, <nl> 
mmm FirebaseAuthWrapper.java <nl> ppp FirebaseAuthWrapper.java <nl> + import android.support.v4.app.FragmentActivity; <nl> - PendingIntent getEmailHintIntent(Context context); <nl> + PendingIntent getEmailHintIntent(FragmentActivity context); <nl> mmm FirebaseArrayTest.java <nl> ppp FirebaseArrayTest.java <nl> 
mmm EmailActivityTest.java <nl> ppp EmailActivityTest.java <nl> - import com.firebase.ui.auth.BuildConfig; <nl> - @Config(constants = BuildConfig.class, sdk = 25) <nl> mmm AuthUITest.java <nl> ppp AuthUITest.java <nl> - import org.robolectric.annotation.Config; <nl> - @Config(constants = BuildConfig.class, sdk = 25) <nl> 
mmm WelcomeBackPasswordPromptTest.java <nl> ppp WelcomeBackPasswordPromptTest.java <nl> + import com.firebase.ui.auth.AuthUI; <nl> - import com.firebase.ui.auth.testhelpers.CustomRobolectricGradleTestRunner; <nl> + import org.robolectric.RobolectricTestRunner; <nl> - @RunWith(CustomRobolectricGradleTestRunner.class) <nl> 
mmm FacebookProvider.java <nl> ppp FacebookProvider.java <nl> + import com.firebase.ui.auth.ErrorCodes; <nl> + import com.firebase.ui.auth.FirebaseUiException; <nl> - onFailure(); <nl> + onFailure(requestError.getException()); <nl> - onFailure(); <nl> + onFailure(new FirebaseUiException(ErrorCodes.UNKNOWN_ERROR)); <nl> 
mmm KickoffActivity.java <nl> ppp KickoffActivity.java <nl> - import com.firebase.ui.auth.ui.HelperActivityBase; <nl> + import com.firebase.ui.auth.ui.InvisibleActivityBase; <nl> - public class KickoffActivity extends HelperActivityBase { <nl> + public class KickoffActivity extends InvisibleActivityBase { <nl> 
mmm AuthMethodPickerActivityTest.java <nl> ppp AuthMethodPickerActivityTest.java <nl> - import com.google.firebase.auth.TwitterAuthProvider; <nl> - import static junit.framework.Assert.assertTrue; <nl> - @Test <nl> - @Config(shadows = {ActivityHelperShadow.class}) <nl> - public void testTwitterLoginFlowStarts() { <nl> 
mmm PhoneVerificationActivityTest.java <nl> ppp PhoneVerificationActivityTest.java <nl> + ShadowLooper.runUiThreadTasksIncludingDelayedTasks(); <nl> + TestHelper.verifySmartLockSave(PhoneAuthProvider.PROVIDER_ID, null, PHONE, null); <nl> mmm SmartLockBase.java <nl> ppp SmartLockBase.java <nl> + case PhoneAuthProvider.PROVIDER_ID: <nl> 
mmm MocoEventListener.java <nl> ppp MocoEventListener.java <nl> + import com.github.dreamhead.moco.internal.dumper.Dumper; <nl> - private final HttpRequestDumper requestDumper = new HttpRequestDumper(); <nl> - private final HttpResponseDumper responseDumper = new HttpResponseDumper(); <nl> + private final Dumper requestDumper = new HttpRequestDumper(); <nl> 
new file <nl> ppp LambdaUtilTest.java <nl> + package io.confluent.ksql.execution.codegen.helpers; <nl> + import static org.hamcrest.MatcherAssert.assertThat; <nl> + import static org.hamcrest.Matchers.instanceOf; <nl> + import static org.hamcrest.Matchers.is; <nl> + import io.confluent.ksql.execution.codegen.CodeGenTestUtil; <nl> 
mmm PingPongQueueLatencyTest.java <nl> ppp PingPongQueueLatencyTest.java <nl> - import static org.junit.Assert.assertTrue; <nl> - assertTrue(histogram.getHistogramData().getTotalCount() >= ITERATIONS); <nl> mmm OneToThreeDiamondQueueThroughputTest.java <nl> ppp OneToThreeDiamondQueueThroughputTest.java <nl> 
new file <nl> ppp OneToOneOffHeapThroughputTest.java <nl> + package com.lmax.disruptor.offheap; <nl> + import java.nio.ByteBuffer; <nl> + import java.util.Random; <nl> + import java.util.concurrent.CountDownLatch; <nl> + import java.util.concurrent.Executor; <nl> + import java.util.concurrent.Executors; <nl> 
mmm JsonSupport.java <nl> ppp JsonSupport.java <nl> - public interface JsonSupport { <nl> + public interface JsonSupport extends Cloneable { <nl> + JsonSupport clone(); <nl> mmm DecoderBaseTest.java <nl> ppp DecoderBaseTest.java <nl> + import com.corundumstudio.socketio.namespace.NamespacesHub; <nl> - decoder = new PacketDecoder(new JacksonJsonSupport(new Configuration()), ackManager); <nl> 
new file <nl> ppp MachineConstant.java <nl> + package com.zhisheng.common.constant; <nl> + public class MachineConstant { <nl> + public static final String CLUSTER_NAME = "cluster_name"; <nl> + public static final String HOST_IP = "host_ip"; <nl> + public static final String LOAD5 = "load5"; <nl> + public static final String USED_PERCENT = "usedPercent"; <nl> 
deleted file <nl> mmm CoinmateUrlEncodedConnectionFactory.java <nl> - package info.bitrich.xchangestream.coinmate.dto.auth; <nl> - import com.pusher.client.util.ConnectionFactory; <nl> - import java.io.IOException; <nl> - import java.net.URLEncoder; <nl> - import java.util.Iterator; <nl> - import java.util.Map; <nl> 
mmm DsxSort.java <nl> ppp DsxSort.java <nl> - SORT_ASCENDING("asc"), <nl> - SORT_DESCENDING("desc"); <nl> - private final String sort; <nl> - DsxSort(String sort) { <nl> - this.sort = sort; <nl> - } <nl> - @Override <nl> - public String toString() { <nl> - return sort; <nl> - } <nl> + ASC, <nl> + DESC; <nl> new file <nl> 
deleted file <nl> mmm TimeInForce.java <nl> - package org.knowm.xchange.deribit.v2.dto.trade; <nl> - public enum TimeInForce { <nl> - good_til_cancelled, <nl> - fill_or_kill, <nl> - immediate_or_cancel; <nl> - } <nl> mmm DeribitBaseService.java <nl> - import lombok.Getter; <nl> - @Getter protected final DeribitAuth deribitAuth; <nl> 
mmm ExchangeSpecification.java <nl> ppp ExchangeSpecification.java <nl> new file <nl> ppp RetryWithDelay.java <nl> + package info.bitrich.xchangestream.service.netty; <nl> + import io.reactivex.Flowable; <nl> + import io.reactivex.functions.Function; <nl> + import java.util.concurrent.TimeUnit; <nl> + import org.reactivestreams.Publisher; <nl> 
mmm CoinmateTradeServiceRaw.java <nl> ppp CoinmateTradeServiceRaw.java <nl> - public CoinmateTradeHistory getCoinmateTradeHistory(String currencyPair, int limit, String order, String startId) <nl> + public CoinmateTradeHistory getCoinmateTradeHistory(String currencyPair, int limit, String order) <nl> - startId, <nl> 
mmm UpbitMarketDataService.java <nl> ppp UpbitMarketDataService.java <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> - import org.knowm.xchange.exceptions.ExchangeException; <nl> - import org.knowm.xchange.exceptions.NotAvailableFromExchangeException; <nl> - import org.knowm.xchange.exceptions.NotYetImplementedForExchangeException; <nl> 
new file <nl> ppp HuobiStepType.java <nl> + package info.bitrich.xchangestream.huobi.dto; <nl> + public enum HuobiStepType { <nl> + STEP0("step0"), <nl> + STEP1("step1"), <nl> + STEP2("step2"), <nl> + STEP3("step3"), <nl> + STEP4("step4"), <nl> + STEP5("step5"), <nl> + PERCENT10("pencent10"); <nl> + HuobiStepType(String name) { <nl> 
mmm BithumbAdapters.java <nl> ppp BithumbAdapters.java <nl> + import java.math.BigDecimal; <nl> + import java.util.ArrayList; <nl> + import java.util.Date; <nl> + import java.util.List; <nl> + import java.util.stream.Collectors; <nl> + import org.apache.commons.lang3.StringUtils; <nl> - import org.knowm.xchange.bithumb.dto.account.BithumbOrderDetailResponse; <nl> 
mmm NettyDirectSecureProxyIntegrationTest.java <nl> ppp NettyDirectSecureProxyIntegrationTest.java <nl> - logger.warn("SERVER_HTTP_PORT = " + SERVER_HTTP_PORT); <nl> - logger.warn("SERVER_HTTPS_PORT = " + SERVER_HTTPS_PORT); <nl> - logger.warn("PROXY_DIRECT_SECURE_PORT = " + PROXY_DIRECT_SECURE_PORT); <nl> 
mmm DirectProxy.java <nl> ppp DirectProxy.java <nl> - import java.util.Collections; <nl> - public class MockServerMultiplePortIntegrationTest extends AbstractMockServerNettyIntegrationTest { <nl> + public class MockServerMultiplePortIntegrationTest extends AbstractRestartableMockServerNettyIntegrationTest { <nl> 
mmm OHttpGraphResponse.java <nl> ppp OHttpGraphResponse.java <nl> - import com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx; <nl> + import com.tinkerpop.blueprints.impls.orient.OrientGraphFactory; <nl> - final OrientGraphNoTx graph = new OrientGraphNoTx(ODatabaseRecordThreadLocal.INSTANCE.get()); <nl> 
deleted file <nl> mmm OSQLFunctionBothE.java <nl> - package com.orientechnologies.orient.graph.sql.functions; <nl> - import com.orientechnologies.orient.core.db.record.OIdentifiable; <nl> - import com.tinkerpop.blueprints.Direction; <nl> - import com.tinkerpop.blueprints.impls.orient.OrientBaseGraph; <nl> 
mmm TestSetup.java <nl> ppp TestSetup.java <nl> + import java.util.Collection; <nl> - enum PortType { <nl> - HTTP, <nl> - BINARY <nl> - } <nl> + OrientDB createRemote( <nl> + Collection<String> serverIds, <nl> + String serverUser, <nl> + String serverPassword, <nl> + OrientDBConfig config); <nl> + enum PortType { <nl> 
mmm OCommandExecutorSQLResultsetAbstract.java <nl> ppp OCommandExecutorSQLResultsetAbstract.java <nl> - final int tot = Math.min(limit + start, t.size()); <nl> + int tot = t.size(); <nl> + if (limit > -1) { <nl> + tot = Math.min(limit + start, tot); <nl> + } <nl> mmm OCommandExecutorSQLSelectTest.java <nl> ppp OCommandExecutorSQLSelectTest.java <nl> 
new file <nl> ppp LuceneContextRemoteTest.java <nl> + package com.orientechnologies.lucene.test; <nl> + import org.testng.annotations.AfterClass; <nl> + import org.testng.annotations.BeforeClass; <nl> + public class LuceneContextRemoteTest extends LuceneContextTest { <nl> + public LuceneContextRemoteTest() { <nl> 
mmm OSelectStatementTest.java <nl> ppp OSelectStatementTest.java <nl> + @Test <nl> + public void testSpatial() { <nl> + checkRightSyntax("select *,$distance from Place where [latitude,longitude,$spatial] NEAR [41.893056,12.482778,{\"maxDistance\": 0.5}]"); <nl> + checkRightSyntax("select * from Place where [latitude,longitude] WITHIN [[51.507222,-0.1275],[55.507222,-0.1275]]"); <nl> 
mmm OStorageRemote.java <nl> ppp OStorageRemote.java <nl> + unstickToSession(); <nl> - unstickToSession(); <nl> - public List<ORecordOperation> commit(final OTransactionInternal iTx, final Runnable callback) { <nl> + public List<ORecordOperation> commit(final OTransactionInternal iTx) { <nl> mmm RemoteIndexSupportTest.java <nl> 
mmm OTransactionOptimistic.java <nl> ppp OTransactionOptimistic.java <nl> + import com.orientechnologies.orient.core.record.ORecordInternal; <nl> - iRecord.onBeforeIdentityChanged(iRecord); <nl> + ORecordInternal.onBeforeIdentityChanged(iRecord); <nl> - iRecord.onAfterIdentityChanged(iRecord); <nl> + ORecordInternal.onAfterIdentityChanged(iRecord); <nl> 
mmm ODistributedConfiguration.java <nl> ppp ODistributedConfiguration.java <nl> + import com.orientechnologies.orient.core.record.impl.ODocumentInternal; <nl> - cluster = new ODocument().addOwner(clusters); <nl> + cluster = new ODocument(); <nl> + ODocumentInternal.addOwner(cluster, clusters); <nl> mmm ODocumentTest.java <nl> 
mmm ONetworkProtocolHttpAbstract.java <nl> ppp ONetworkProtocolHttpAbstract.java <nl> + import java.io.ByteArrayInputStream; <nl> + import java.io.ByteArrayOutputStream; <nl> + import java.io.IOException; <nl> + import java.net.Socket; <nl> + import java.net.SocketException; <nl> + import java.net.SocketTimeoutException; <nl> 
mmm ORecordLazySet.java <nl> ppp ORecordLazySet.java <nl> + import java.util.Collection; <nl> + import java.util.HashSet; <nl> + import java.util.Iterator; <nl> + import java.util.Map.Entry; <nl> + import java.util.Set; <nl> - import com.orientechnologies.common.log.OLogManager; <nl> - import com.orientechnologies.orient.core.db.ODatabaseRecordThreadLocal; <nl> 
mmm OIndexAbstract.java <nl> ppp OIndexAbstract.java <nl> - import java.io.IOException; <nl> - import java.lang.reflect.InvocationTargetException; <nl> - import java.util.ArrayList; <nl> - import java.util.Collection; <nl> - import java.util.Collections; <nl> - import java.util.HashMap; <nl> - import java.util.HashSet; <nl> 
mmm OrientBaseGraph.java <nl> ppp OrientBaseGraph.java <nl> - public static final String                                  CONNECTION_OUT      = "out"; <nl> - public static final String                                  CONNECTION_IN       = "in"; <nl> - public static final String                                  CLASS_PREFIX        = "class:"; <nl> 
mmm OrientDBRemote.java <nl> ppp OrientDBRemote.java <nl> + import com.orientechnologies.orient.core.command.OCommandOutputListener; <nl> + import com.orientechnologies.orient.core.storage.OStorage; <nl> + import java.io.InputStream; <nl> + import java.util.concurrent.Callable; <nl> + public class OrientDBDistributed extends OrientDBEmbedded { <nl> 
new file <nl> ppp ORemoteScriptSecurityTest.java <nl> + package com.orientechnologies.orient.server.security; <nl> + import com.orientechnologies.orient.core.config.OGlobalConfiguration; <nl> + import com.orientechnologies.orient.core.db.ODatabaseSession; <nl> + import com.orientechnologies.orient.core.db.ODatabaseType; <nl> 
mmm OWriteCache.java <nl> ppp OWriteCache.java <nl> + * <nl> - * @return  id associated with given file or value &lt; 0 if such file does not exist. <nl> + * <nl> + * @return id associated with given file or value &lt; 0 if such file does not exist. <nl> - OCachePointer[] load(long fileId, long startPageIndex, int pageCount, boolean addNewPages, OModifiableBoolean cacheHit) <nl> 
deleted file <nl> mmm ODocumentEntry.java <nl> - package com.orientechnologies.orient.core.record.impl; <nl> - import com.orientechnologies.orient.core.db.record.OMultiValueChangeTimeLine; <nl> - import com.orientechnologies.orient.core.metadata.schema.OProperty; <nl> - import com.orientechnologies.orient.core.metadata.schema.OType; <nl> 
mmm OStorageConfigurationSegment.java <nl> ppp OStorageConfigurationSegment.java <nl> - package com.orientechnologies.orient.core.storage.impl.local; <nl> - import com.orientechnologies.common.exception.OException; <nl> - import com.orientechnologies.common.io.OIOUtils; <nl> - import com.orientechnologies.common.log.OLogManager; <nl> 
new file <nl> ppp ONestedProjection.java <nl> + package com.orientechnologies.orient.core.sql.parser; <nl> + import com.orientechnologies.orient.core.command.OCommandContext; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + import java.util.stream.Collectors; <nl> 
mmm ODocument.java <nl> ppp ODocument.java <nl> + import java.io.ByteArrayOutputStream; <nl> + import java.io.Externalizable; <nl> + import java.io.IOException; <nl> + import java.io.InputStream; <nl> + import java.io.ObjectInput; <nl> + import java.io.ObjectOutput; <nl> + import java.lang.ref.WeakReference; <nl> 
mmm DistributedDatabaseCRUDTest.java <nl> ppp DistributedDatabaseCRUDTest.java <nl> - import com.orientechnologies.orient.core.db.ODatabasePool; <nl> - import com.orientechnologies.orient.core.db.OrientDBConfig; <nl> + import com.orientechnologies.orient.core.db.*; <nl> - import com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx; <nl> 
mmm OHashTableDirectoryV2Test.java <nl> ppp OHashTableDirectoryV2Test.java <nl> - long[] level = new long[LocalHashTableV2.MAX_LEVEL_SIZE]; <nl> + long[] level = new long[OLocalHashTableV2.MAX_LEVEL_SIZE]; <nl> - long[] level = new long[LocalHashTableV2.MAX_LEVEL_SIZE]; <nl> + long[] level = new long[OLocalHashTableV2.MAX_LEVEL_SIZE]; <nl> 
mmm OConsoleApplication.java <nl> ppp OConsoleApplication.java <nl> - "\n!Wrong syntax. If you're runnin in batch mode make sure all commands are delimited by semicolon (;) or a linefeed (\\n). Expected: \n\r\n\r%s", <nl> + "\n!Wrong syntax. If you're running in batch mode make sure all commands are delimited by semicolon (;) or a linefeed (\\n). Expected: \n\r\n\r%s", <nl> 
mmm OConnectionBinaryExecutor.java <nl> ppp OConnectionBinaryExecutor.java <nl> - if (!database.getTransaction().isActive()) <nl> - throw new ODatabaseException("No Transaction Active"); <nl> - database.rollback(true); <nl> + if (database.getTransaction().isActive()) { <nl> + database.rollback(true); <nl> + } <nl> 
mmm OMetadataObject.java <nl> ppp OMetadataObject.java <nl> + import com.orientechnologies.orient.core.cache.OCommandCache; <nl> - import com.orientechnologies.orient.core.metadata.schema.OSchema; <nl> - protected OMetadataInternal          underlying; <nl> + protected OMetadataInternal  underlying; <nl> + @Override <nl> 
new file <nl> ppp OValuesConverter.java <nl> + package com.orientechnologies.orient.core.db.tool.importer; <nl> + public interface OValuesConverter<T> { <nl> + T convert(T value); <nl> + } <nl> new file <nl> ppp OLinksRewriter.java <nl> + package com.orientechnologies.orient.core.db.tool.importer; <nl> + import com.orientechnologies.orient.core.db.document.ODocumentFieldVisitor; <nl> 
mmm ODatabaseDocumentAbstract.java <nl> ppp ODatabaseDocumentAbstract.java <nl> - if (!ODocumentInternal.getImmutableSchemaClass(outDocument).isVertexType()) <nl> + if (inDocument == null) { <nl> + inDocument = inVertex.getRecord(); <nl> + if (inDocument == null) <nl> + throw new IllegalArgumentException("destination vertex is invalid (rid=" + inVertex.getIdentity() + ")"); <nl> 
mmm OPaginatedClusterV2.java <nl> ppp OPaginatedClusterV2.java <nl> + import com.orientechnologies.orient.core.storage.impl.local.paginated.ORecordOperationMetadata; <nl> + addAtomicOperationMetadata(new ORecordId(id, pos.clusterPosition), atomicOperation); <nl> + addAtomicOperationMetadata(new ORecordId(id, clusterPosition), atomicOperation); <nl> 
mmm OLogId.java <nl> ppp OLogId.java <nl> + private long term; <nl> - public OLogId(long id) { <nl> + public OLogId(long id, long term) { <nl> + this.term = term; <nl> + output.writeLong(-1); <nl> + output.writeLong(id.term); <nl> + long term = input.readLong(); <nl> - return new OLogId(val); <nl> + return new OLogId(term, term); <nl> 
mmm OLuceneIndexEngineAbstract.java <nl> ppp OLuceneIndexEngineAbstract.java <nl> - import org.apache.lucene.search.ControlledRealTimeReopenThread; <nl> - import org.apache.lucene.search.IndexSearcher; <nl> - import org.apache.lucene.search.Query; <nl> - import org.apache.lucene.search.ScoreDoc; <nl> - import org.apache.lucene.search.SearcherManager; <nl> 
mmm OrientDBRemote.java <nl> ppp OrientDBRemote.java <nl> - storage = new OStorageRemote(buildUrl(name), this, "rw", connectionManager, null); <nl> + storage = new OStorageRemote(buildUrl(name), this, "rw", connectionManager, solveConfig(pool.getConfig())); <nl> mmm ORidBagTest.java <nl> ppp ORidBagTest.java <nl> 
mmm OIndexTxAwareMultiValue.java <nl> ppp OIndexTxAwareMultiValue.java <nl> - return txCursor; <nl> + return new OIndexCursorSecurityDecorator(txCursor, this); <nl> - return new OIndexTxCursor(txCursor, backedCursor, ascOrder, indexChanges); <nl> + return new OIndexCursorSecurityDecorator(new OIndexTxCursor(txCursor, backedCursor, ascOrder, indexChanges), this); <nl> 
mmm OMethodCall.java <nl> ppp OMethodCall.java <nl> - return bidirectionalMethods.contains(methodName.getValue().toLowerCase()); <nl> + return bidirectionalMethods.contains(methodName.getStringValue().toLowerCase()); <nl> - return execute(targetObjects, ctx, methodName.getValue(), params, null); <nl> + return execute(targetObjects, ctx, methodName.getStringValue(), params, null); <nl> 
new file <nl> ppp ONewSQLCommandTask.java <nl> + package com.orientechnologies.orient.server.distributed.impl.task; <nl> + import com.orientechnologies.orient.core.command.OCommandDistributedReplicateRequest; <nl> + import com.orientechnologies.orient.core.db.ODatabaseDocumentInternal; <nl> + import com.orientechnologies.orient.core.db.OScenarioThreadLocal; <nl> 
mmm OPropertyImpl.java <nl> ppp OPropertyImpl.java <nl> - return getDatabase().getStorage() instanceof OAutoshardedStorage && !OScenarioThreadLocal.INSTANCE.isRunModeDistributed(); <nl> + return getDatabase().getStorage() instanceof OAutoshardedStorage && !((OAutoshardedStorage) getDatabase().getStorage()).isLocalEnv(); <nl> 
mmm OTransactionOptimisticServer.java <nl> ppp OTransactionOptimisticServer.java <nl> - import com.orientechnologies.orient.core.metadata.security.OIdentity; <nl> + @Override <nl> + public int getClientTransactionId() { <nl> + return clientTxId; <nl> + } <nl> mmm OMemoryWriteAheadLog.java <nl> ppp OMemoryWriteAheadLog.java <nl> 
mmm OTransactionRealAbstract.java <nl> ppp OTransactionRealAbstract.java <nl> + * <nl> + *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com) <nl> + *  * <nl> + *  *  Licensed under the Apache License, Version 2.0 (the "License"); <nl> + *  *  you may not use this file except in compliance with the License. <nl> 
mmm LocalPaginatedStorageMixCrashRestore.java <nl> ppp LocalPaginatedStorageMixCrashRestore.java <nl> - private OLockManager<Integer>            idLockManager   = new OLockManager<Integer>(true, 1000); <nl> + private OLockManager<Integer, Thread>    idLockManager   = new OLockManager<Integer, Thread>(true, 1000); <nl> 
mmm BareBoneBase3ServerTest.java <nl> ppp BareBoneBase3ServerTest.java <nl> - servers[0] = dbServer(DB1_DIR, getLocalURL(), "asynch-dserver-config-0.xml"); <nl> + servers[0] = dbServer(DB1_DIR, getDatabaseName(), "asynch-dserver-config-0.xml"); <nl> - servers[1] = dbServer(DB2_DIR, getLocalURL2(), "asynch-dserver-config-1.xml"); <nl> 
mmm OTransactionOptimistic.java <nl> ppp OTransactionOptimistic.java <nl> - if ((status == OTransaction.TXSTATUS.COMMITTING) && database.getStorage() instanceof OStorageEmbedded) { <nl> + if ((status == OTransaction.TXSTATUS.COMMITTING) && database.getStorage().getUnderlying() instanceof OStorageEmbedded) { <nl> 
mmm ConversationActivity.java <nl> ppp ConversationActivity.java <nl> - 			Log.d("xmppService","on conversation list changed event received"); <nl> + 			final Conversation currentConv = conversationList.get(selectedConversation); <nl> - 				public void run() { <nl> - 					listAdapter.notifyDataSetChanged(); <nl> 
mmm ChooseContactActivity.java <nl> ppp ChooseContactActivity.java <nl> - 							&& contact.match(needle)) { <nl> + 							&& contact.match(this, needle)) { <nl> mmm UIHelper.java <nl> ppp UIHelper.java <nl> + import eu.siacs.conversations.entities.ListItem; <nl> + import eu.siacs.conversations.entities.Presence; <nl> 
mmm AudioPlayer.java <nl> ppp AudioPlayer.java <nl> + import android.content.Context; <nl> - import android.media.MediaPlayer; <nl> + import android.hardware.Sensor; <nl> + import android.hardware.SensorEvent; <nl> + import android.hardware.SensorEventListener; <nl> + import android.hardware.SensorManager; <nl> 
mmm MucDetailsActivity.java <nl> ppp MucDetailsActivity.java <nl> - 					imageView.setImageBitmap(UIHelper.getContactPicture(contact.getName(), 89,this.getApplicationContext())); <nl> + 					imageView.setImageBitmap(UIHelper.getContactPicture(null,contact.getName(), 90,this.getApplicationContext())); <nl> 
mmm ConferenceDetailsActivity.java <nl> ppp ConferenceDetailsActivity.java <nl> - 			View view = inflater.inflate(R.layout.contact, membersView, <nl> + 			View view = (View) inflater.inflate(R.layout.contact, membersView, <nl> mmm ConversationFragment.java <nl> ppp ConversationFragment.java <nl> + 			return true; <nl> 
mmm ScramSha1.java <nl> ppp ScramSha1.java <nl> - 	public static String getMechanism() { <nl> + 	@Override <nl> + 	public int getPriority() { <nl> + 		return 20; <nl> + 	} <nl> + 	@Override <nl> + 	public String getMechanism() { <nl> mmm StartConversationActivity.java <nl> ppp StartConversationActivity.java <nl> 
mmm Namespace.java <nl> ppp Namespace.java <nl> - package eu.siacs.conversations.utils; <nl> + package eu.siacs.conversations.xml; <nl> - public final class Xmlns { <nl> + public final class Namespace { <nl> mmm MucOptions.java <nl> ppp MucOptions.java <nl> - import eu.siacs.conversations.utils.Xmlns; <nl> + import eu.siacs.conversations.xml.Namespace; <nl> 
mmm HttpConnectionManager.java <nl> ppp HttpConnectionManager.java <nl> - import java.net.URL; <nl> - import eu.siacs.conversations.entities.Message.ImageParams; <nl> mmm PresenceParser.java <nl> ppp PresenceParser.java <nl> - 					mXmppConnectionService.getNotificationService() <nl> - 							.deactivateGracePeriod(); <nl> 
deleted file <nl> mmm Question.java <nl> - package de.measite.minidns; <nl> - import java.io.ByteArrayOutputStream; <nl> - import java.io.DataInputStream; <nl> - import java.io.DataOutputStream; <nl> - import java.io.IOException; <nl> - import java.util.Arrays; <nl> - import de.measite.minidns.Record.CLASS; <nl> 
mmm RenderTextureView.java <nl> ppp RenderTextureView.java <nl> - private RenderTextureView mTextureView; <nl> + private WeakReference<RenderTextureView> mTextureRefer; <nl> - this.mTextureView = textureView; <nl> + mTextureRefer = new WeakReference<>(textureView); <nl> + RenderTextureView getTextureView(){ <nl> 
new file <nl> ppp DefaultDpadFocusCover.java <nl> + package com.kk.taurus.playerbase.cover; <nl> + import android.content.Context; <nl> + import android.os.Bundle; <nl> + import android.view.KeyEvent; <nl> + import android.view.View; <nl> + import android.widget.FrameLayout; <nl> + import com.kk.taurus.playerbase.callback.OnPlayerEventListener; <nl> 
new file <nl> ppp PlayValueGetter.java <nl> + package com.kk.taurus.playerbase.record; <nl> + public interface PlayValueGetter { <nl> + int getCurrentPosition(); <nl> + int getBufferPercentage(); <nl> + int getDuration(); <nl> + int getState(); <nl> + } <nl> mmm BSPlayer.java <nl> ppp BSPlayer.java <nl> - stop(); <nl> 
mmm RAddinPaletteItem.java <nl> ppp RAddinPaletteItem.java <nl> - return super.labelMatchesSearch(addin_.getPackage() + " " + label_, keywords); <nl> + return super.labelMatchesSearch(label_, keywords); <nl> mmm Source.java <nl> ppp Source.java <nl> + import com.google.gwt.event.shared.HandlerRegistration; <nl> 
mmm PanmirrorEvent.java <nl> ppp PanmirrorEvent.java <nl> - public static String ExecuteRmdChunk = "panmirrorExecuteRmdChunk"; <nl> deleted file <nl> mmm RAddinCommandPaletteEntry.java <nl> - package org.rstudio.studio.client.application.ui; <nl> - import java.util.List; <nl> - import org.rstudio.core.client.StringUtil; <nl> 
mmm HTMLPreviewApplication.java <nl> ppp HTMLPreviewApplication.java <nl> + public PrefValue<Boolean> ariaApplicationRole() <nl> + { <nl> + return bool("aria_application_role", false); <nl> + } <nl> + if (source.hasKey("aria_application_role")) <nl> + ariaApplicationRole().setValue(layer, source.getBool("aria_application_role")); <nl> 
mmm PackagesPane.java <nl> ppp PackagesPane.java <nl> + import org.rstudio.studio.client.workbench.projects.ProjectContext; <nl> - public void setPackageState(PackratContext packratContext, <nl> + public void setPackageState(ProjectContext projectContext, <nl> - packratContext_ = packratContext; <nl> + projectContext_ = projectContext; <nl> 
mmm RMarkdownPreferencesPane.java <nl> ppp RMarkdownPreferencesPane.java <nl> - import org.rstudio.core.client.Debug; <nl> - import org.rstudio.core.client.widget.DirectoryChooserTextBox; <nl> - import org.rstudio.studio.client.RStudioGinjector; <nl> - import org.rstudio.studio.client.common.FileDialogs; <nl> 
mmm Source.java <nl> ppp Source.java <nl> + dynamicCommands_.add(commands.openNewTerminalAtEditorLocation()); <nl> + dynamicCommands_.add(commands.sendFilenameToTerminal()); <nl> mmm TerminalPane.java <nl> ppp TerminalPane.java <nl> + import org.rstudio.studio.client.workbench.WorkbenchContext; <nl> + WorkbenchContext workbenchContext, <nl> 
mmm ApplicationInterrupt.java <nl> ppp ApplicationInterrupt.java <nl> - server_.interrupt(new VoidServerRequestCallback() { <nl> + server_.interrupt(new ServerRequestCallback<Boolean>() <nl> + { <nl> - public void onSuccess() <nl> + public void onResponseReceived(Boolean response) <nl> - public void onFailure() <nl> 
mmm RStudioGinjector.java <nl> ppp RStudioGinjector.java <nl> + import org.rstudio.studio.client.workbench.ui.polyfill.FocusVisiblePolyfill; <nl> + FocusVisiblePolyfill getFocusVisiblePolyfill(); <nl> mmm SourceColumn.java <nl> ppp SourceColumn.java <nl> - public void addTab(Widget widget, <nl> - FileIcon icon, <nl> 
mmm MenuItem.java <nl> ppp MenuItem.java <nl> - import com.google.gwt.aria.client.CheckedValue; <nl> - import com.google.gwt.aria.client.MenuitemRole; <nl> - import com.google.gwt.aria.client.MenuitemcheckboxRole; <nl> - import com.google.gwt.aria.client.MenuitemradioRole; <nl> - private final MenuitemRole menurole; <nl> 
mmm RStudioGinjector.java <nl> ppp RStudioGinjector.java <nl> + import org.rstudio.studio.client.workbench.views.source.editors.text.visualmode.VisualModeConfirm; <nl> + void injectMembers(VisualModeConfirm visualModeConfirm); <nl> mmm PanmirrorWidget.java <nl> ppp PanmirrorWidget.java <nl> - editor_.spellingInvalidateAllWords(); <nl> 
new file <nl> ppp CommandPaletteLauncher.java <nl> + package org.rstudio.studio.client.application.ui; <nl> + import org.rstudio.core.client.command.CommandBinder; <nl> + import org.rstudio.core.client.command.Handler; <nl> + import org.rstudio.core.client.command.ShortcutManager; <nl> + import org.rstudio.studio.client.workbench.addins.AddinsCommandManager; <nl> 
mmm RSConnectDeployOutputPresenter.java <nl> ppp RSConnectDeployOutputPresenter.java <nl> + import org.rstudio.core.client.command.CommandBinder; <nl> + import org.rstudio.core.client.command.Handler; <nl> + import org.rstudio.studio.client.workbench.commands.Commands; <nl> - implements RSConnectDeploymentStartedEvent.Handler, <nl> 
mmm SessionInfo.java <nl> ppp SessionInfo.java <nl> mmm VisualModePanmirrorFormat.java <nl> ppp VisualModePanmirrorFormat.java <nl> + public boolean isBookdownProjectDocument() <nl> + { <nl> + return sessionInfo_.getBuildToolsBookdownWebsite() && isDocInProject(); <nl> + } <nl> - private boolean isBookdownProjectDocument() <nl> 
mmm PanmirrorXRefServer.java <nl> ppp PanmirrorXRefServer.java <nl> - import org.rstudio.studio.client.workbench.views.source.editors.text.TextEditingTarget; <nl> - public PanmirrorXRefServer(TextEditingTarget target) { <nl> + public PanmirrorXRefServer() { <nl> - target_ = target; <nl> - target_.withSavedDoc(() -> { <nl> 
mmm SessionInfo.java <nl> ppp SessionInfo.java <nl> + import org.rstudio.studio.client.common.dependencies.model.DependencyList; <nl> mmm FindOutputPresenter.java <nl> ppp FindOutputPresenter.java <nl> - import org.rstudio.core.client.Debug; <nl> - import org.rstudio.studio.client.workbench.views.output.find.events.PreviewReplaceEvent; <nl> 
mmm Commands.java <nl> ppp Commands.java <nl> + public abstract AppCommand showFileMenu(); <nl> + public abstract AppCommand showEditMenu(); <nl> + public abstract AppCommand showCodeMenu(); <nl> + public abstract AppCommand showViewMenu(); <nl> + public abstract AppCommand showPlotsMenu(); <nl> + public abstract AppCommand showSessionMenu(); <nl> 
mmm TerminalPopupMenu.java <nl> ppp TerminalPopupMenu.java <nl> + addSeparator(); <nl> + addItem(commands_.showTerminalOptions().createMenuItem(false)); <nl> mmm WorkbenchScreen.java <nl> ppp WorkbenchScreen.java <nl> + import org.rstudio.studio.client.workbench.prefs.views.TerminalPreferencesPane; <nl> + @Handler <nl> 
mmm PackagesPreferencesPane.java <nl> ppp PackagesPreferencesPane.java <nl> - tabPanel.setSize("435px", "533px"); <nl> + tabPanel.setSize("435px", "498px"); <nl> deleted file <nl> mmm PanmirrorZoteroServer.java <nl> - package org.rstudio.studio.client.panmirror.server; <nl> - import org.rstudio.core.client.promise.PromiseServerRequestCallback; <nl> 
mmm RemoteServer.java <nl> ppp RemoteServer.java <nl> + @Override <nl> + public void dataciteSearch(String query, ServerRequestCallback<JavaScriptObject> callback) <nl> + { <nl> + sendRequest(RPC_SCOPE, DATACITE_SEARCH, query, callback); <nl> + } <nl> + @Override <nl> + public void pubmedSearch(String query, ServerRequestCallback<JavaScriptObject> callback) <nl> 
mmm PanmirrorPandocFormatConfig.java <nl> ppp PanmirrorPandocFormatConfig.java <nl> + import java.util.Arrays; <nl> + import jsinterop.annotations.JsOverlay; <nl> + public static boolean isDoctype(PanmirrorPandocFormatConfig config, String doctype) <nl> + { <nl> + return config.doctypes != null && Arrays.asList(config.doctypes).contains(doctype); <nl> 
mmm PanmirrorServerOperations.java <nl> ppp PanmirrorServerOperations.java <nl> - PanmirrorZoteroServerOperations, <nl> mmm RStudioGinModule.java <nl> ppp RStudioGinModule.java <nl> - import org.rstudio.studio.client.panmirror.server.PanmirrorZoteroServerOperations; <nl> - bind(PanmirrorZoteroServerOperations.class).to(RemoteServer.class); <nl> 
mmm ThemeFonts.java <nl> ppp ThemeFonts.java <nl> + static class EmptyThemeFontLoader implements ThemeFontLoader <nl> + { <nl> + @Override <nl> + public String getProportionalFont() <nl> + { <nl> + return ""; <nl> + } <nl> + @Override <nl> + public String getFixedWidthFont() <nl> + { <nl> + return ""; <nl> + } <nl> 
mmm AceEditor.java <nl> ppp AceEditor.java <nl> + import org.rstudio.core.client.BrowseCap; <nl> + import org.rstudio.core.client.Debug; <nl> + import org.rstudio.core.client.ExternalJavaScriptLoader.Callback; <nl> + import org.rstudio.core.client.command.ShortcutManager; <nl> - if (!userPrefs_.tabCompletion().getValue() || userPrefs_.tabKeyMoveFocus().getValue()) <nl> 
mmm EditingTargetSource.java <nl> ppp EditingTargetSource.java <nl> + public static FileType getTypeFromDocument(FileTypeRegistry registry, SourceDocument document) <nl> + { <nl> + FileType type = registry.getTypeByTypeName(document.getType()); <nl> + if (type == null) <nl> + { <nl> + Debug.log("Unknown document type: " + document.getType()); <nl> 
mmm FindOutputCodec.java <nl> ppp FindOutputCodec.java <nl> - td2.setInnerHTML(entry.getLineHTML().asString()); <nl> + if (!entry.getReplaceIndicator()) <nl> + td2.setInnerHTML(entry.getLineHTML().asString()); <nl> + else <nl> + td2.setInnerHTML(entry.getLineReplaceHTML().asString()); <nl> new file <nl> ppp ReplaceResultEvent.java <nl> 
deleted file <nl> mmm XTermTheme.java <nl> - package org.rstudio.studio.client.workbench.views.terminal.xterm; <nl> - import com.google.gwt.core.client.JavaScriptObject; <nl> - import com.google.gwt.core.client.JsArrayString; <nl> - import org.rstudio.core.client.ColorUtil; <nl> - import org.rstudio.core.client.dom.DomUtils; <nl> 
mmm VisualMode.java <nl> ppp VisualMode.java <nl> - visualModeContext_ = new VisualModePanmirrorContext(docUpdateSentinel_, target_, visualModeExec_, visualModeFormat_); <nl> + visualModeContext_ = new VisualModePanmirrorContext(docUpdateSentinel_, visualModeExec_, visualModeFormat_); <nl> deleted file <nl> 
mmm SourceColumn.java <nl> ppp SourceColumn.java <nl> - final String defaultNamePrefix = editingTargetSource_.getDefaultNamePrefix(doc); <nl> - doc, fileContext_, () -> getNextDefaultName(defaultNamePrefix)); <nl> + doc, <nl> + fileContext_, <nl> + (EditingTarget et) -> <nl> + { <nl> + String prefix = et.getDefaultNamePrefix(); <nl> 
mmm RStudioAPI.java <nl> ppp RStudioAPI.java <nl> - import com.google.gwt.user.client.Command; <nl> - HyperlinkLabel link = new HyperlinkLabel(url, new Command() { <nl> - @Override <nl> - public void execute() <nl> - { <nl> - RStudioGinjector.INSTANCE.getGlobalDisplay() <nl> - .openWindow(url); <nl> - } <nl> + HyperlinkLabel link = new HyperlinkLabel(url, () -> <nl> 
mmm TextEditingTarget.java <nl> ppp TextEditingTarget.java <nl> + import org.rstudio.studio.client.workbench.views.source.editors.text.visualmode.VisualMode; <nl> - visualMode_ = new TextEditingTargetVisualMode( <nl> + visualMode_ = new VisualMode( <nl> - private TextEditingTargetVisualMode visualMode_; <nl> 
mmm ConsoleOutputWriterTests.java <nl> ppp ConsoleOutputWriterTests.java <nl> - return new ConsoleOutputWriter(new VCFactory()); <nl> + return new ConsoleOutputWriter(new VCFactory(), null); <nl> mmm TutorialServerOperations.java <nl> ppp TutorialServerOperations.java <nl> + import org.rstudio.core.client.js.JsObject; <nl> 
mmm FindInFilesState.java <nl> ppp FindInFilesState.java <nl> mmm DomUtils.java <nl> ppp DomUtils.java <nl> - import com.google.gwt.resources.client.TextResource; <nl> - public static final void loadScript(TextResource resource) <nl> - { <nl> - ScriptElement scriptEl = Document.get().createScriptElement(); <nl> 
mmm PanmirrorPandocFormatConfig.java <nl> ppp PanmirrorPandocFormatConfig.java <nl> - public String wrap; <nl> + public int wrapColumn; <nl> - return StringUtil.equals(a.wrap, b.wrap) && <nl> + return a.wrapColumn == b.wrapColumn && <nl> mmm VisualModeMarkdownWriter.java <nl> ppp VisualModeMarkdownWriter.java <nl> 
mmm TextEditingTargetWidget.java <nl> ppp TextEditingTargetWidget.java <nl> + docUpdateSentinel_.addPropertyValueChangeHandler( <nl> + TextEditingTarget.USE_RAINBOW_PARENS, (newval) -> <nl> + { <nl> + boolean rainbowParens = StringUtil.equals(newval.getValue(), <nl> + DocUpdateSentinel.PROPERTY_TRUE); <nl> 
mmm FindOutputPane.java <nl> ppp FindOutputPane.java <nl> + useGitIgnore_ = new CheckBox(); <nl> + useGitIgnoreLabel_ = <nl> + new CheckboxLabel(useGitIgnore_, "Use .gitignore").getLabel(); <nl> + useGitIgnore_.getElement().getStyle().setMarginRight(0, Unit.PX); <nl> + replaceToolbar_.addLeftWidget(useGitIgnore_); <nl> 
mmm RAddinCommandPaletteEntry.java <nl> ppp RAddinCommandPaletteEntry.java <nl> - @Override <nl> - public boolean enabled() <nl> - { <nl> - return true; <nl> - } <nl> mmm PanmirrorWidget.java <nl> ppp PanmirrorWidget.java <nl> + import org.rstudio.studio.client.panmirror.uitools.PanmirrorPandocFormatConfig; <nl> 
mmm PanmirrorToolbarMenu.java <nl> ppp PanmirrorToolbarMenu.java <nl> - submenu.addMenuBarStyle(RES.styles().toolbarPopupMenu()); <nl> + submenu.addMenuBarStyle(RES.styles().toolbarPopupSubmenu()); <nl> mmm Commands.java <nl> ppp Commands.java <nl> + public abstract AppCommand showCodeOptions(); <nl> + public abstract AppCommand showConsoleOptions(); <nl> 
mmm PanmirrorUIChunkEditor.java <nl> ppp PanmirrorUIChunkEditor.java <nl> + package org.rstudio.studio.client.panmirror.ui; <nl> + import com.google.gwt.dom.client.Element; <nl> + import jsinterop.annotations.JsFunction; <nl> + import jsinterop.annotations.JsType; <nl> + @JsType <nl> + public class PanmirrorUIChunkCallbacks <nl> 
mmm PreferencesDialogResources.java <nl> ppp PreferencesDialogResources.java <nl> + String label(); <nl> - @Source("iconAddSourcePane_2x.png") <nl> - ImageResource iconAddSourcePane2x(); <nl> + @Source("iconAddSourcePane.png") <nl> + ImageResource iconAddSourcePane(); <nl> + @Source("iconRemoveSourcePane.png") <nl> 
mmm RxQueryable.java <nl> ppp RxQueryable.java <nl> + package io.requery.query.element; <nl> + public enum InsertType { <nl> + VALUES, <nl> + SELECT <nl> + } <nl> mmm InsertGenerator.java <nl> ppp InsertGenerator.java <nl> + package io.requery.query; <nl> + public interface InsertInto<R> extends Return<R> { <nl> 
mmm GzipResponseStream.java <nl> ppp GzipResponseStream.java <nl> - 	public void write(byte b[]) throws IOException { <nl> + 	public void write(byte[] b) throws IOException { <nl> - 	public void write(byte b[], int off, int len) throws IOException { <nl> + 	public void write(byte[] b, int off, int len) throws IOException { <nl> 
mmm TypeCache.java <nl> ppp TypeCache.java <nl> - import java.util.function.Supplier; <nl> - 	public static class Defaults { <nl> - 		public static Supplier<TypeCache> implementation = () -> TypeCache.create().get(); <nl> - 	} <nl> - 		return (TypeCache<A>)Defaults.implementation.get(); <nl> + 		return TypeCache.<A>create().get(); <nl> 
mmm AnnotationTxAdviceManager.java <nl> ppp AnnotationTxAdviceManager.java <nl> - 			TransactionAnnotationData tad = annotationInstance.readAnnotationData(method); <nl> + 			TransactionAnnotationData tad = annotationInstance.readAnnotatedElement(method); <nl> mmm AnnotationDataReader.java <nl> ppp AnnotationDataReader.java <nl> 
mmm AbstractTemplateViewActionResult.java <nl> ppp AbstractTemplateViewActionResult.java <nl> + import jodd.madvoc.meta.Scope; <nl> - 	@In(scope = ScopeType.CONTEXT) <nl> + 	@In @Scope(ScopeType.CONTEXT) <nl> - 	@In(scope = ScopeType.CONTEXT) <nl> + 	@In @Scope(ScopeType.CONTEXT) <nl> - 	@In(scope = ScopeType.CONTEXT) <nl> 
mmm package-info.java <nl> ppp package-info.java <nl> mmm FastBuffer.java <nl> ppp FastBuffer.java <nl> + import java.util.Arrays; <nl> - 	private E[][] buffers = (E[][]) new Object[16][]; <nl> - 	private int buffersCount; <nl> - 	private int currentBufferIndex = -1; <nl> - 	private E[] currentBuffer; <nl> + 	private E[] buffer; <nl> 
mmm TargetMember.java <nl> ppp TargetMember.java <nl> - package org.hibernate.ejb; <nl> - import org.jboss.logging.Logger; <nl> - public class Version { <nl> - public static final EntityManagerLogger LOG = Logger.getMessageLogger(EntityManagerLogger.class, Version.class.getName()); <nl> - 	public static String getVersionString() { <nl> 
deleted file <nl> mmm select_multiple_values_array.java <nl> - CriteriaQuery<Object[]> criteria = builder.createQuery( Object[].class ); <nl> - Root<Person> personRoot = criteria.from( Person.class ); <nl> - Path<Long> idPath = personRoot.get( Person_.id ); <nl> - Path<Integer> agePath = personRoot.get( Person_.age ); <nl> 
new file <nl> ppp database-identity.java <nl> + foo.getId().equals( bar.getId() )new file <nl> ppp opening_a_session.java <nl> + Session session = sessions.openSession();new file <nl> ppp embedding_SchemaExport.java <nl> + Configuration cfg = ....; <nl> + new SchemaExport(cfg).create(false, true);new file <nl> 
mmm JdbcIsolationDelegate.java <nl> ppp JdbcIsolationDelegate.java <nl> - import org.slf4j.Logger; <nl> - import org.slf4j.LoggerFactory; <nl> + import org.hibernate.HibernateLogger; <nl> + import org.jboss.logging.Logger; <nl> - 	private static final Logger log = LoggerFactory.getLogger( JdbcIsolationDelegate.class ); <nl> 
new file <nl> ppp MetricsReplicationTableSource.java <nl> + package org.apache.hadoop.hbase.replication.regionserver; <nl> + import org.apache.hadoop.hbase.metrics.BaseSource; <nl> + import org.apache.yetus.audience.InterfaceAudience; <nl> + @InterfaceAudience.Private <nl> + public interface MetricsReplicationTableSource extends BaseSource { <nl> 
mmm TestMasterObserver.java <nl> ppp TestMasterObserver.java <nl> - admin.addColumnFamily(tableName, new HColumnDescriptor(TEST_FAMILY2)); <nl> + admin.addColumn(tableName, new HColumnDescriptor(TEST_FAMILY2)); <nl> - admin.modifyColumnFamily(tableName, hcd1); <nl> + admin.modifyColumn(tableName, hcd1); <nl> 
mmm HFileBlockIndex.java <nl> ppp HFileBlockIndex.java <nl> - *  found in {@link HFileReaderImpl} and <nl> + *  found in {@link HFileWriterImpl} and <nl> mmm HFileReaderImpl.java <nl> ppp HFileReaderImpl.java <nl> + HFileBlock prevBlock = null; <nl> - HFileBlock prevBlock = null; <nl> - long onDiskSize = prevBlock != null? prevBlock.getNextBlockOnDiskSize(): -1; <nl> 
mmm MultiThreadedAction.java <nl> ppp MultiThreadedAction.java <nl> + protected static void appendToStatus(StringBuilder sb, String desc, <nl> + String v) { <nl> + sb.append(", "); <nl> + sb.append(desc); <nl> + sb.append("="); <nl> + sb.append(v); <nl> + } <nl> - public void waitUntilAllRegionsAssigned(final int countOfRegions) <nl> 
mmm HConstants.java <nl> ppp HConstants.java <nl> - public static final String MASTER_ADDRS_DEFAULT =  "localhost:" + DEFAULT_MASTER_PORT; <nl> mmm RSRpcServices.java <nl> ppp RSRpcServices.java <nl> - import java.net.UnknownHostException; <nl> - import org.apache.hadoop.hbase.util.Strings; <nl> - String hostname = getHostname(conf, true); <nl> 
deleted file <nl> mmm DevModeType.java <nl> - package io.quarkus.dev.spi; <nl> - public enum DevModeType { <nl> - LOCAL, <nl> - REMOTE_LOCAL_SIDE, <nl> - REMOTE_SERVER_SIDE <nl> - } <nl> mmm SmallRyeContextPropagationRecorder.java <nl> - import java.util.function.Supplier; <nl> - import org.eclipse.microprofile.context.ThreadContext; <nl> 
deleted file <nl> mmm Customer.java <nl> - package io.quarkus.it.jpa.db2; <nl> - import javax.persistence.Embedded; <nl> - import javax.persistence.Entity; <nl> - import javax.persistence.Id; <nl> - @Entity <nl> - public class Customer extends Human { <nl> - @Id <nl> - private Long id; <nl> - private Address address; <nl> 
mmm SubclassGenerator.java <nl> ppp SubclassGenerator.java <nl> - * @see Subclass#destroy() <nl> + * @see Subclass#destroy$subclass() <nl> - MethodCreator destroy = subclass.getMethodCreator(MethodDescriptor.ofMethod(Subclass.class, "destroy", void.class)); <nl> + MethodCreator destroy = subclass <nl> + .getMethodCreator(MethodDescriptor.ofMethod(Subclass.class, "destroy$subclass", void.class)); <nl> 
new file <nl> ppp SyslogHandlerTest.java <nl> + package io.quarkus.logging; <nl> + import static org.assertj.core.api.Assertions.assertThat; <nl> + import static org.wildfly.common.net.HostName.getQualifiedHostName; <nl> + import static org.wildfly.common.os.Process.getProcessName; <nl> + import java.util.Arrays; <nl> 
deleted file <nl> mmm MojoLogger.java <nl> - package org.jboss.shamrock.maven; <nl> - import java.text.MessageFormat; <nl> - import java.util.Collections; <nl> - import java.util.Map; <nl> - import java.util.function.Supplier; <nl> - import org.apache.maven.plugin.logging.Log; <nl> - import org.apache.maven.shared.utils.logging.MessageBuilder; <nl> 
new file <nl> ppp JsonProducerTest.java <nl> + package io.quarkus.kafka.client.serialization; <nl> + import org.assertj.core.api.Assertions; <nl> + import org.junit.jupiter.api.Test; <nl> + public class JsonProducerTest { <nl> + @Test <nl> + public void shouldProduceJsonb() { <nl> + Assertions.assertThat(JsonbProducer.get()).isNotNull(); <nl> 
deleted file <nl> mmm DroolsTestIT.java <nl> - package io.quarkus.it.kogito.drools; <nl> - import io.quarkus.test.junit.NativeImageTest; <nl> - @NativeImageTest <nl> - public class DroolsTestIT extends DroolsTest { <nl> - } <nl> deleted file <nl> mmm RulesCompilationProvider.java <nl> - package io.quarkus.kogito.deployment; <nl> 
new file <nl> ppp DefaultAndNamedMongoClientConfigTest.java <nl> + package io.quarkus.mongodb; <nl> + import static org.assertj.core.api.Assertions.assertThat; <nl> + import javax.enterprise.inject.Default; <nl> + import javax.enterprise.inject.literal.NamedLiteral; <nl> + import javax.inject.Inject; <nl> + import org.jboss.shrinkwrap.api.ShrinkWrap; <nl> 
mmm LocalWorkspaceDiscoveryTest.java <nl> ppp LocalWorkspaceDiscoveryTest.java <nl> + import java.util.List; <nl> + assertLocalDeps(project, "root-module-not-direct-child", "root-no-parent-module", "root-module-with-parent"); <nl> + assertLocalDeps(project); <nl> + assertLocalDeps(project, "root-module-not-direct-child"); <nl> 
mmm DevModeMain.java <nl> ppp DevModeMain.java <nl> - private static File classesRoot; <nl> + private static List<File> classesRoots; <nl> - classesRoot = new File(args[0]); <nl> + final String[] classesRootsParts = args[0].split(","); <nl> + classesRoots = new ArrayList<>(classesRootsParts.length); <nl> + for (String classesRootsPart : classesRootsParts) { <nl> 
new file <nl> ppp LibraryTestDepBean.java <nl> + package org.acme; <nl> + import javax.enterprise.context.ApplicationScoped; <nl> + @ApplicationScoped <nl> + public class LibraryTestDepBean { <nl> + public String getValue() { <nl> + return "test"; <nl> + } <nl> + } <nl> new file <nl> ppp ExampleResource.java <nl> 
mmm ArcProcessor.java <nl> ppp ArcProcessor.java <nl> + List<ObserverTransformerBuildItem> observerTransformers, <nl> - for (AnnotationsTransformerBuildItem transformerItem : annotationTransformers) { <nl> - builder.addAnnotationTransformer(transformerItem.getAnnotationsTransformer()); <nl> + for (AnnotationsTransformerBuildItem transformer : annotationTransformers) { <nl> 
mmm InjectionFactoryBuildItem.java <nl> ppp InjectionFactoryBuildItem.java <nl> - import org.jboss.builder.item.MultiBuildItem; <nl> + import org.jboss.shamrock.runtime.InjectionFactory; <nl> + private final InjectionFactory factory; <nl> + public InjectionFactoryBuildItem(InjectionFactory factory) { <nl> 
mmm DerivedMethodsAdder.java <nl> ppp DerivedMethodsAdder.java <nl> - entityClassInfo, returnType.name(), parseResult.getTopCount(), method.name(), null); <nl> + entityClassInfo, returnType.name(), parseResult.getTopCount(), method.name()); <nl> mmm VertxWebProcessor.java <nl> ppp VertxWebProcessor.java <nl> 
mmm SourceType.java <nl> ppp SourceType.java <nl> - import java.util.Arrays; <nl> - import java.util.Optional; <nl> - JAVA(MojoUtils.JAVA_FILE_EXTENSION, MojoUtils.JAVA_EXTENSION_NAME), <nl> - KOTLIN(MojoUtils.KOTLIN_FILE_EXTENSION, MojoUtils.KOTLIN_EXTENSION_NAME), <nl> + JAVA(MojoUtils.JAVA_EXTENSION), <nl> 
new file <nl> ppp ScalingTestBase.java <nl> + package io.quarkus.grpc.server.scaling; <nl> + import java.util.ArrayList; <nl> + import java.util.HashSet; <nl> + import java.util.List; <nl> + import java.util.Set; <nl> + import java.util.concurrent.Callable; <nl> + import java.util.concurrent.ExecutionException; <nl> 
mmm QuarkusRestCommonProcessor.java <nl> ppp QuarkusRestCommonProcessor.java <nl> - import static org.jboss.resteasy.reactive.common.deployment.framework.QuarkusRestDotNames.DELETE; <nl> - import static org.jboss.resteasy.reactive.common.deployment.framework.QuarkusRestDotNames.GET; <nl> - import static org.jboss.resteasy.reactive.common.deployment.framework.QuarkusRestDotNames.HEAD; <nl> 
mmm QuartzScheduler.java <nl> ppp QuartzScheduler.java <nl> + import javax.enterprise.context.ApplicationScoped; <nl> + import javax.enterprise.context.BeforeDestroyed; <nl> + import org.quartz.JobDetail; <nl> - import org.quartz.JobExecutionException; <nl> - Properties props = new Properties(); <nl> - props.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_ID, "QuarkusQuartzScheduler"); <nl> 
deleted file <nl> mmm MultipleAddMissingNoargsConstructorTest.java <nl> - package io.quarkus.arc.test.unproxyable; <nl> - import java.util.ArrayList; <nl> - import java.util.Arrays; <nl> - import java.util.Collections; <nl> - import java.util.List; <nl> - import javax.enterprise.context.ApplicationScoped; <nl> 
deleted file <nl> mmm VertxProducer.java <nl> - package org.jboss.shamrock.vertx.runtime; <nl> - import io.vertx.core.Vertx; <nl> - import io.vertx.core.VertxOptions; <nl> - import io.vertx.core.eventbus.EventBus; <nl> - import io.vertx.core.eventbus.EventBusOptions; <nl> - import io.vertx.core.http.ClientAuth; <nl> 

new file <nl> ppp CamelApplication.java <nl> + package io.quarkus.camel.it.aws; <nl> + import javax.ws.rs.ApplicationPath; <nl> + import javax.ws.rs.core.Application; <nl> + @ApplicationPath("/test") <nl> + public class CamelApplication extends Application { <nl> + }diff --git a/data/zhouhj/data6/quarkus_git/3028/old/RuntimeCompilationSetup.java b/data/zhouhj/data6/quarkus_git/3028/new/RuntimeCompilationSetup.java <nl> 
mmm StockMethodsAdder.java <nl> ppp StockMethodsAdder.java <nl> - return getIdAnnotationTargetRec(entityDotName, index, entityDotName); <nl> - } <nl> - private AnnotationTarget getIdAnnotationTargetRec(DotName currentDotName, IndexView index, DotName originalEntityDotName) { <nl> - ClassInfo classInfo = index.getClassByName(currentDotName); <nl> 
mmm CatRepository.java <nl> ppp CatRepository.java <nl> + Long countByColorContainsIgnoreCase(String color); <nl> mmm BookRepository.java <nl> ppp BookRepository.java <nl> + List<Book> findByNameContainingIgnoreCase(String name); <nl> + long countByNameStartsWithIgnoreCase(String name); <nl> mmm BookResource.java <nl> 
mmm NoArgsConstructorProcessor.java <nl> ppp NoArgsConstructorProcessor.java <nl> - ClassVisitor cv = new ClassVisitor(Opcodes.ASM6, classVisitor) { <nl> + ClassVisitor cv = new ClassVisitor(Opcodes.ASM7, classVisitor) { <nl> deleted file <nl> mmm KubernetesClientProcessor.java <nl> - package io.quarkus.kubernetes.client.deployment; <nl> 
mmm HibernateOrmProcessor.java <nl> ppp HibernateOrmProcessor.java <nl> + import org.hibernate.dialect.MySQL8Dialect; <nl> + if (resolvedDriver.contains("com.mysql.cj.jdbc.Driver")) { <nl> + return Optional.of(MySQL8Dialect.class.getName()); <nl> + } <nl> + "'. Add an explicit '" + HIBERNATE_ORM_CONFIG_PREFIX + "dialect' property." <nl> 
mmm ExpressionNode.java <nl> ppp ExpressionNode.java <nl> - import java.util.Set; <nl> + import java.util.List; <nl> - public Set<Expression> getExpressions() { <nl> - return Collections.singleton(expression); <nl> + public List<Expression> getExpressions() { <nl> + return Collections.singletonList(expression); <nl> 
mmm QuarkusTestExtension.java <nl> ppp QuarkusTestExtension.java <nl> - private final RestAssuredURLManager restAssuredURLManager = new RestAssuredURLManager(false); <nl> + .addToClassPath(testClassLocation) <nl> - restAssuredURLManager.clearURL(); <nl> + RestAssuredURLManager.clearURL(); <nl> - restAssuredURLManager.setURL(); <nl> 
deleted file <nl> mmm OpenshiftUtils.java <nl> - package io.quarkus.container.image.openshift.deployment; <nl> - import java.util.ArrayList; <nl> - import java.util.Collection; <nl> - import java.util.List; <nl> - import java.util.Set; <nl> - import java.util.concurrent.TimeUnit; <nl> - import java.util.stream.Collectors; <nl> 
new file <nl> ppp BossGroup.java <nl> + package io.quarkus.netty; <nl> + import java.lang.annotation.Retention; <nl> + import java.lang.annotation.RetentionPolicy; <nl> + import javax.inject.Qualifier; <nl> + @Qualifier <nl> + @Retention(RetentionPolicy.RUNTIME) <nl> + public @interface BossGroup { <nl> + } <nl> 
new file <nl> ppp HibernateReactiveDB2AlternativeTest.java <nl> + package io.quarkus.it.hibernate.reactive.db2; <nl> + import static org.hamcrest.Matchers.is; <nl> + import org.junit.jupiter.api.Test; <nl> + import io.quarkus.test.junit.QuarkusTest; <nl> + import io.restassured.RestAssured; <nl> + @QuarkusTest <nl> 
mmm BytecodeRecorderTestCase.java <nl> ppp BytecodeRecorderTestCase.java <nl> + @Test <nl> + public void testRecordableConstructor() throws Exception { <nl> + runTest(generator -> { <nl> + TestConstructorBean bean = new TestConstructorBean("John", "Citizen"); <nl> + bean.setAge(30); <nl> + TestRecorder recorder = generator.getRecordingProxy(TestRecorder.class); <nl> 
mmm CreateProjectCommandHandler.java <nl> ppp CreateProjectCommandHandler.java <nl> - quarkusProps.forEach((k, v) -> invocation.setValue(k.toString().replace("-", "_"), v.toString())); <nl> + quarkusProps.forEach((k, v) -> { <nl> + String name = k.toString().replace("-", "_"); <nl> + if (!invocation.hasValue(name)) { <nl> 
mmm Beans.java <nl> ppp Beans.java <nl> + if (isAlternative && alternativePriority == null) { <nl> + alternativePriority = initStereotypeAlternativePriority(stereotypes); <nl> + } <nl> + if (alternativePriority == null) { <nl> + alternativePriority = initStereotypeAlternativePriority(stereotypes); <nl> + } <nl> 
mmm PathConverter.java <nl> ppp PathConverter.java <nl> + import java.io.Serializable; <nl> - public class PathConverter implements Converter<Path> { <nl> + public class PathConverter implements Converter<Path>, Serializable { <nl> + private static final long serialVersionUID = 4452863383998867844L; <nl> mmm LevelConverter.java <nl> 
mmm ApplicationInfoTestCase.java <nl> ppp ApplicationInfoTestCase.java <nl> - .then().body(is("main-integration-test/1.0")); <nl> + .then().body(is("main-integration-test/1.0/test")); <nl> mmm ApplicationInfoResource.java <nl> ppp ApplicationInfoResource.java <nl> + @ConfigProperty(name = "quarkus.profile") <nl> 
mmm AbstractGraphQLTest.java <nl> ppp AbstractGraphQLTest.java <nl> - import java.util.Map; <nl> - return getPropertyAsString(null); <nl> - } <nl> - protected static String getPropertyAsString(Map<String, String> otherProperties) { <nl> - if (otherProperties != null) { <nl> - PROPERTIES.putAll(otherProperties); <nl> 
mmm RootDefinition.java <nl> ppp RootDefinition.java <nl> - segments, <nl> + withoutSuffix( <nl> + withoutSuffix( <nl> + segments, <nl> + "Runtime", "Configuration"), <nl> + "Runtime", "Config"), <nl> mmm TestProcessor.java <nl> ppp TestProcessor.java <nl> + import io.quarkus.extest.runtime.config.FooRuntimeConfig; <nl> 
deleted file <nl> mmm ElasticsearchConfig.java <nl> - package io.quarkus.elasticsearch.restclient.lowlevel.runtime; <nl> - import java.net.InetSocketAddress; <nl> - import java.time.Duration; <nl> - import java.util.List; <nl> - import java.util.Optional; <nl> - import io.quarkus.runtime.annotations.ConfigGroup; <nl> 
mmm MessageConsumerMethodTest.java <nl> ppp MessageConsumerMethodTest.java <nl> + import javax.enterprise.context.RequestScoped; <nl> - .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class).addClasses(SimpleBean.class)); <nl> + .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class).addClasses(SimpleBean.class, Transformer.class)); <nl> 
mmm BeanDeployment.java <nl> ppp BeanDeployment.java <nl> + if (buildContext != null) { <nl> + buildContext.putInternal(Key.QUALIFIERS.asString(), Collections.unmodifiableMap(qualifiers)); <nl> + buildContext.putInternal(Key.INTERCEPTOR_BINDINGS.asString(), Collections.unmodifiableMap(interceptorBindings)); <nl> 
mmm BuildMojo.java <nl> ppp BuildMojo.java <nl> - out.putNextEntry(new ZipEntry("META-INF/")); <nl> mmm SimpleHealthCheck.java <nl> ppp SimpleHealthCheck.java <nl> - package org.jboss.shamrock.example; <nl> + package org.jboss.shamrock.example.health; <nl> mmm RuntimeClassLoader.java <nl> ppp RuntimeClassLoader.java <nl> 
mmm ElasticsearchClientTest.java <nl> ppp ElasticsearchClientTest.java <nl> - package io.quarkus.test.elasticsearch.test; <nl> + package io.quarkus.test.hibernate.search.elasticsearch; <nl> new file <nl> ppp HibernateSearchClasses.java <nl> + package io.quarkus.hibernate.search.elasticsearch; <nl> + import java.util.Arrays; <nl> 
mmm PanacheQueryImpl.java <nl> ppp PanacheQueryImpl.java <nl> + import java.lang.reflect.Constructor; <nl> + import java.lang.reflect.Parameter; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + import java.util.regex.Matcher; <nl> + import java.util.regex.Pattern; <nl> + import javax.persistence.NonUniqueResultException; <nl> 
mmm RedisAPIProducer.java <nl> ppp RedisAPIProducer.java <nl> - import java.net.InetSocketAddress; <nl> - import java.util.Set; <nl> + import java.util.Map; <nl> + import java.util.concurrent.ConcurrentHashMap; <nl> + import java.util.function.Function; <nl> - import javax.enterprise.context.ApplicationScoped; <nl> 
mmm AddExtensionMojo.java <nl> ppp AddExtensionMojo.java <nl> + import java.util.HashSet; <nl> + import org.apache.commons.lang3.StringUtils; <nl> - private Set<String> extensions; <nl> + Set<String> extensions; <nl> + @Parameter(property = "extension") <nl> + String extension; <nl> + throw new MojoExecutionException("Either the `extension` or `extensions` parameter must be set"); <nl> 
mmm ServletTestCase.java <nl> ppp ServletTestCase.java <nl> + @Test(expected = Exception.class) <nl> + public void testSecureAccessFailure() { <nl> + String msg = URLTester.relative("secure-test").invokeURL().asString(); <nl> + Assert.assertEquals("A secured message", msg); <nl> + } <nl> mmm RecorderContext.java <nl> 
mmm VersionUpdate.java <nl> ppp VersionUpdate.java <nl> - LATEST("latest"), NEXT("next"), NONE("none"), UNKNOWN(null); <nl> + LATEST("latest"), <nl> + NEXT("next"), <nl> + NONE("none"), <nl> + UNKNOWN(null); <nl> mmm Diagnostic.java <nl> ppp Diagnostic.java <nl> - ERROR("error"), WARN("warning"), NOTE("note"), <nl> 
mmm AbstractDataSourceProducer.java <nl> ppp AbstractDataSourceProducer.java <nl> - if (dataSourceRuntimeConfig.newConnectionSql.isPresent()) { <nl> - agroalConnectionFactoryConfigurationSupplier.initialSql(dataSourceRuntimeConfig.newConnectionSql.get()); <nl> - } <nl> mmm SmallRyeOpenApiProcessor.java <nl> 
deleted file <nl> mmm DynamoDBUtils.java <nl> - package io.quarkus.it.dynamodb; <nl> - import java.util.ArrayList; <nl> - import java.util.HashMap; <nl> - import java.util.List; <nl> - import java.util.Map; <nl> - import java.util.concurrent.CompletableFuture; <nl> - import java.util.function.Supplier; <nl> - import org.jboss.logging.Logger; <nl> 
deleted file <nl> mmm FallbackTest.java <nl> - package io.quarkus.smallrye.faulttolerance.test.fallback; <nl> - import static org.junit.jupiter.api.Assertions.assertEquals; <nl> - import javax.inject.Inject; <nl> - import org.jboss.shrinkwrap.api.ShrinkWrap; <nl> - import org.jboss.shrinkwrap.api.spec.JavaArchive; <nl> 
mmm CodestartProjectRunIT.java <nl> ppp CodestartProjectRunIT.java <nl> - class CodestartProjectRunTest extends PlatformAwareTestBase { <nl> + class CodestartProjectRunIT extends PlatformAwareTestBase { <nl> - return CodestartProjectGenerationTest.getTestInputData(getPlatformDescriptor(), override); <nl> 
mmm ShamrockFaultToleranceOperationProvider.java <nl> ppp ShamrockFaultToleranceOperationProvider.java <nl> - public FaultToleranceOperation get(Class<?> beanClass, Method method) { <nl> - return FaultToleranceOperation.of(beanClass, method); <nl> + public FaultToleranceOperation apply(Method method) { <nl> 
mmm QuartzProcessor.java <nl> ppp QuartzProcessor.java <nl> - if (resolvedDriver.contains("com.microsoft.sqlserver.jdbc.SQLServerResource")) { <nl> + if (resolvedDriver.contains("com.microsoft.sqlserver.jdbc.SQLServerDriver")) { <nl> mmm VaultAppRoleITCase.java <nl> ppp VaultAppRoleITCase.java <nl> + @DisabledOnOs(OS.WINDOWS) <nl> 
mmm JaxbProcessor.java <nl> ppp JaxbProcessor.java <nl> - import org.jboss.jandex.AnnotationTarget.Kind; <nl> - import org.jboss.jandex.IndexView; <nl> - private static final DotName XML_ROOT_ELEMENT = DotName.createSimple(XmlRootElement.class.getName()); <nl> - private static final DotName XML_TYPE = DotName.createSimple(XmlType.class.getName()); <nl> 
deleted file <nl> mmm TestServlet.java <nl> - package io.quarkus.it.infinispan.embedded; <nl> - import java.io.IOException; <nl> - import java.nio.file.Paths; <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - import java.util.concurrent.TimeUnit; <nl> - import javax.enterprise.event.Observes; <nl> 
mmm InfinispanCacheJPAFunctionalityTestEndpoint.java <nl> ppp InfinispanCacheJPAFunctionalityTestEndpoint.java <nl> - reportException("Oops, shit happened, No boot for you!", e, resp); <nl> + reportException("An error occurred while performing Hibernate operations", e, resp); <nl> mmm JPAFunctionalityTestEndpoint.java <nl> 
mmm FastBootReactiveEntityManagerFactoryBuilder.java <nl> ppp FastBootReactiveEntityManagerFactoryBuilder.java <nl> - package io.quarkus.hibernate.rx.runtime.boot; <nl> + package io.quarkus.hibernate.reactive.runtime.boot; <nl> - import org.hibernate.rx.boot.impl.RxSessionFactoryOptions; <nl> - import org.hibernate.rx.engine.impl.RxSessionFactoryImpl; <nl> 
mmm ReactiveSessionProducer.java <nl> ppp ReactiveSessionProducer.java <nl> + @Produces <nl> + @RequestScoped <nl> + @DefaultBean <nl> + public Stage.Session createStageSession() { <nl> + return reactiveSessionFactory.createSession(); <nl> + } <nl> + @Produces <nl> + @RequestScoped <nl> + @DefaultBean <nl> + public Mutiny.Session createMutinySession() { <nl> 
mmm SectionNode.java <nl> ppp SectionNode.java <nl> mmm EngineImpl.java <nl> ppp EngineImpl.java <nl> - return new Parser(this).parse(new StringReader(content), Optional.ofNullable(variant)); <nl> + String generatedId = generateId(); <nl> + return new Parser(this).parse(new StringReader(content), Optional.ofNullable(variant), generatedId, generatedId); <nl> 
mmm StockMethodsAdder.java <nl> ppp StockMethodsAdder.java <nl> + import io.quarkus.hibernate.orm.panache.runtime.AdditionalJpaOperations; <nl> - MethodDescriptor.ofMethod(JpaOperations.class, "deleteAll", long.class, Class.class.getName()), <nl> + MethodDescriptor.ofMethod(AdditionalJpaOperations.class, "deleteAllWithCascade", long.class, <nl> 
mmm KeycloakPolicyEnforcerAuthorizer.java <nl> ppp KeycloakPolicyEnforcerAuthorizer.java <nl> + import io.quarkus.oidc.OidcTenantConfig; <nl> - import io.quarkus.oidc.runtime.OidcTenantConfig; <nl> mmm CustomTenantConfigResolver.java <nl> ppp CustomTenantConfigResolver.java <nl> + import io.quarkus.oidc.OidcTenantConfig; <nl> 
mmm AzureMonitorEnabledInvalidTest.java <nl> ppp AzureMonitorEnabledInvalidTest.java <nl> - import javax.inject.Inject; <nl> - import io.micrometer.core.instrument.MeterRegistry; <nl> + final static String testedAttribute = "quarkus.micrometer.export.azuremonitor.instrumentation-key"; <nl> - .assertException(t -> { <nl> 
mmm ClientResource.java <nl> ppp ClientResource.java <nl> - @Inject <nl> - @RestClient <nl> - RestClientConfigKeyInterface restClientConfigKeyInterface; <nl> - @Inject <nl> - @RestClient <nl> - RestClientBaseUriConfigKeyInterface restClientBaseUriConfigKeyInterface; <nl> - @GET <nl> - @Path("/annotation/configKey") <nl> 
mmm GrpcServerReloader.java <nl> ppp GrpcServerReloader.java <nl> - if (server != null) { <nl> - server.shutdown(); <nl> - server = null; <nl> - } <nl> + server.shutdown(); <nl> + server = null; <nl> mmm ResteasyServerCommonProcessor.java <nl> ppp ResteasyServerCommonProcessor.java <nl> + import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem; <nl> 
mmm NativeImageMojo.java <nl> ppp NativeImageMojo.java <nl> - @Override <nl> - public Path getLibDir() { <nl> - return runnerJar.getParent().resolve("lib"); <nl> - } <nl> new file <nl> ppp ExceptionHandlingInterceptorBinding.java <nl> + package org.jboss.protean.arc.test.interceptors.exceptionhandling; <nl> + import static java.lang.annotation.ElementType.METHOD; <nl> 
mmm UnhandledAnnotatedRuntimeException.java <nl> ppp UnhandledAnnotatedRuntimeException.java <nl> - public class SecondException extends RuntimeException { <nl> + public class UnhandledAnnotatedRuntimeException extends RuntimeException { <nl> new file <nl> ppp ResponseContentTypeResolver.java <nl> + package io.quarkus.spring.web.runtime; <nl> 
mmm Expressions.java <nl> ppp Expressions.java <nl> - ImmutableList.Builder<String> parts = ImmutableList.builder(); <nl> + ImmutableList.Builder<String> builder = ImmutableList.builder(); <nl> - if (addPart(buffer, parts)) { <nl> + if (buffer.length() > 0) { <nl> + builder.add(buffer.toString()); <nl> - if (addPart(buffer, parts)) { <nl> 
mmm ForwardingService.java <nl> ppp ForwardingService.java <nl> - Futures.addCallback(tx.getConfidence().getDepthFuture(1), new FutureCallback<Transaction>() { <nl> + Futures.addCallback(tx.getConfidence().getDepthFuture(1), new FutureCallback<TransactionConfidence>() { <nl> - public void onSuccess(Transaction result) { <nl> 
mmm FakeTxBuilder.java <nl> ppp FakeTxBuilder.java <nl> - } catch (VerificationException e) { <nl> - } catch (BlockStoreException e) { <nl> + } catch (VerificationException | BlockStoreException e) { <nl> mmm PaymentProtocolTool.java <nl> ppp PaymentProtocolTool.java <nl> - } catch (URISyntaxException e) { <nl> 
mmm PeerDataEventListener.java <nl> ppp PeerDataEventListener.java <nl> - import org.bitcoinj.core.Block; <nl> - import org.bitcoinj.core.FilteredBlock; <nl> - import org.bitcoinj.core.GetDataMessage; <nl> - import org.bitcoinj.core.Message; <nl> - import org.bitcoinj.core.Peer; <nl> - import org.bitcoinj.core.Transaction; <nl> 
mmm BtcFixedFormat.java <nl> ppp BtcFixedFormat.java <nl> + *  the denomination is millibitcoins, this method will return the value {@code 3}.  */ <nl> mmm PaymentChannelServer.java <nl> ppp PaymentChannelServer.java <nl> mmm BtcAutoFormat.java <nl> ppp BtcAutoFormat.java <nl> - * <p>When parsing <code>String</code> representations of Bitcoin monetary values, instances of <nl> 
mmm Response.java <nl> ppp Response.java <nl> + import java.nio.charset.Charset; <nl> + import static com.google.common.base.Charsets.UTF_8; <nl> - this.body = body == null ? null : body.getBytes(headers.getContentTypeHeader().encodingOrUtf8()); <nl> + this.body = body == null ? null : body.getBytes(encodingFromContentTypeHeaderOrUtf8()); <nl> 
mmm HttpHeaders.java <nl> ppp HttpHeaders.java <nl> + import com.google.common.collect.ImmutableList; <nl> + import com.google.common.collect.ImmutableMultimap; <nl> + import static com.google.common.base.Preconditions.checkNotNull; <nl> - headers = LinkedHashMultimap.create(); <nl> + headers = ImmutableMultimap.of(); <nl> 
new file <nl> ppp Secret.java <nl> + package com.github.tomakehurst.wiremock.crypto; <nl> + import java.util.Arrays; <nl> + import static java.util.Arrays.copyOf; <nl> + import static java.util.Arrays.fill; <nl> + import static java.util.Objects.requireNonNull; <nl> + public class Secret implements AutoCloseable { <nl> 
mmm Options.java <nl> ppp Options.java <nl> + import com.github.tomakehurst.wiremock.HttpServerFactory; <nl> + HttpServerFactory httpServerFactory(); <nl> mmm JettyHttpServerFactory.java <nl> ppp JettyHttpServerFactory.java <nl> - package com.github.tomakehurst.wiremock.jetty; <nl> + package com.github.tomakehurst.wiremock.jetty9; <nl> 
deleted file <nl> mmm SnapshotTaskTest.java <nl> - package com.github.tomakehurst.wiremock.admin; <nl> - import com.github.tomakehurst.wiremock.admin.model.GetServeEventsResult; <nl> - import com.github.tomakehurst.wiremock.admin.model.PaginatedResult; <nl> - import com.github.tomakehurst.wiremock.admin.model.PathParams; <nl> 
mmm HttpServletRequestAdapter.java <nl> ppp HttpServletRequestAdapter.java <nl> + import java.util.Enumeration; <nl> + import java.util.LinkedHashSet; <nl> + import java.util.Set; <nl> + 	@SuppressWarnings("unchecked") <nl> + 	@Override <nl> + 	public Set<String> getAllHeaderKeys() { <nl> + 		LinkedHashSet<String> headerKeys = new LinkedHashSet<String>(); <nl> 
mmm JettyHttpServer.java <nl> ppp JettyHttpServer.java <nl> - import java.lang.reflect.InvocationTargetException; <nl> - import java.lang.reflect.Method; <nl> 
mmm TokenIssueProcessor.java <nl> ppp TokenIssueProcessor.java <nl> - import org.tron.core.exception.ContractExeException; <nl> - public void execute(Object contract, Repository repository) throws ContractExeException { <nl> + public void execute(Object contract, Repository repository) { <nl> - if ((TRX.equals(ByteArray.toStr(tokenIssueParam.getName()).toLowerCase()))) { <nl> 
new file <nl> ppp IsSRCandidateTest001.java <nl> + package stest.tron.wallet.dailybuild.tvmnewcommand.tvmStake; <nl> + import com.codahale.metrics.MetricRegistryListener.Base; <nl> + import io.grpc.ManagedChannel; <nl> + import io.grpc.ManagedChannelBuilder; <nl> + import java.util.HashMap; <nl> + import org.testng.Assert; <nl> 
mmm StakeSuicideTest003.java <nl> ppp StakeSuicideTest003.java <nl> - @BeforeClass(enabled = false) <nl> + @BeforeClass(enabled = true) <nl> - @Test(enabled = false, description = "suicide target Address is owner Address") <nl> + @Test(enabled = true, description = "suicide target Address is owner Address") <nl> 
mmm Program.java <nl> ppp Program.java <nl> - import static java.lang.StrictMath.min; <nl> - import static java.lang.String.format; <nl> - import static org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY; <nl> - import static org.apache.commons.lang3.ArrayUtils.getLength; <nl> - import static org.apache.commons.lang3.ArrayUtils.isEmpty; <nl> 
mmm MessageTypes.java <nl> ppp MessageTypes.java <nl> + PBFT_BLOCK_MSG(0x14), <nl> + PBFT_SRL_MSG(0x15), <nl> - return code <= TRX_INVENTORY.asByte() && code >= FIRST.asByte(); <nl> + return code <= PBFT_SRL_MSG.asByte() && code >= FIRST.asByte(); <nl> mmm OpCode.java <nl> ppp OpCode.java <nl> - CHAINID(0x46, 0, 1, OpCode.Tier.BaseTier), <nl> 
mmm SuicideTest.java <nl> ppp SuicideTest.java <nl> + import java.util.Arrays; <nl> + import org.tron.core.capsule.VotesCapsule; <nl> + import org.tron.core.db.TransactionTrace; <nl> + import org.tron.core.store.AccountStore; <nl> + import org.tron.core.store.VotesStore; <nl> + import org.tron.core.store.WitnessStore; <nl> 
mmm WikidataConstraintFetcher.java <nl> ppp WikidataConstraintFetcher.java <nl> - import org.wikidata.wdtk.datamodel.interfaces.SnakGroup; <nl> - public static String TYPE_CONSTRAINT_QID = "Q21503250"; <nl> - protected List<SnakGroup> getSingleConstraint(PropertyIdValue pid, String qid) { <nl> - List<Statement> statementList = getConstraintsByType(pid, qid); <nl> 
new file <nl> ppp QuantityScrutinizerTest.java <nl> + package org.openrefine.wikidata.qa.scrutinizers; <nl> + import java.math.BigDecimal; <nl> + import org.openrefine.wikidata.qa.MockConstraintFetcher; <nl> + import org.testng.annotations.Test; <nl> + import org.wikidata.wdtk.datamodel.helpers.Datamodel; <nl> 
deleted file <nl> mmm ReconType.java <nl> - package com.google.refine.model; <nl> - import java.util.Properties; <nl> - import org.json.JSONException; <nl> - import org.json.JSONObject; <nl> - import org.json.JSONWriter; <nl> - import com.google.refine.Jsonizable; <nl> - public class ReconType implements Jsonizable { <nl> 
mmm ExpressionNominalValueGrouperTests.java <nl> ppp ExpressionNominalValueGrouperTests.java <nl> + private static String dateTimeStringValue = "2017-05-12T05:45:00Z"; <nl> + private static String integerStringValue = "1"; <nl> - private static Boolean booleanValue = true; <nl> - Assert.assertEquals(grouper.choices.size(),0); <nl> 
mmm ReconJudgeSimilarCellsOperation.java <nl> ppp ReconJudgeSimilarCellsOperation.java <nl> - return "Mark to create one single new topic for all cells containing \"" + <nl> + return "Mark to create one single new item for all cells containing \"" + <nl> - return "Mark to create one new topic for each cell containing \"" + <nl> 
mmm HistoryEntry.java <nl> ppp HistoryEntry.java <nl> - import java.util.Date; <nl> + import java.time.ZoneId; <nl> + import java.time.ZonedDateTime; <nl> - final public Date   time; <nl> + final public ZonedDateTime   time; <nl> - this(id,project.id,description,operation,new Date()); <nl> + this(id,project.id,description,operation,ZonedDateTime.now(ZoneId.of("Z"))); <nl> 
mmm PreviewWikibaseSchemaCommand.java <nl> ppp PreviewWikibaseSchemaCommand.java <nl> - import static org.openrefine.wikidata.commands.CommandUtilities.respondError; <nl> + import org.json.JSONObject; <nl> + import static org.openrefine.wikidata.commands.CommandUtilities.respondError; <nl> mmm FormatScrutinizer.java <nl> 
mmm SelectHtml.java <nl> ppp SelectHtml.java <nl> - package com.google.refine.expr.functions.xml; <nl> + package com.google.refine.expr.functions.html; <nl> - public class SelectXml implements Function { <nl> + public class SelectHtml implements Function { <nl> - if (args.length == 2) { <nl> + if (args.length >= 2) { <nl> 
mmm XmlText.java <nl> ppp XmlText.java <nl> - package com.google.refine.expr.functions.html; <nl> + package com.google.refine.expr.functions.xml; <nl> - public class HtmlText implements Function { <nl> + public class XmlText implements Function { <nl> - if (args.length >= 1) { <nl> + if (args.length == 1) { <nl> 
mmm CancelProcessesCommandTests.java <nl> ppp CancelProcessesCommandTests.java <nl> - import org.junit.After; <nl> - import org.junit.Assert; <nl> - import org.junit.Before; <nl> - import org.junit.Test; <nl> + import org.testng.Assert; <nl> + import org.testng.annotations.AfterMethod; <nl> + import org.testng.annotations.BeforeMethod; <nl> 
mmm WbItemVariable.java <nl> ppp WbItemVariable.java <nl> - if (cell.recon.identifierSpace == null || !cell.recon.identifierSpace.equals(Datamodel.SITE_WIKIDATA)) { <nl> + if (!cell.recon.identifierSpace.equals(Datamodel.SITE_WIKIDATA)) { <nl> deleted file <nl> mmm RestrictedValuesScrutinizerTest.java <nl> 
mmm ServiceTest.java <nl> ppp ServiceTest.java <nl> + import com.alipay.sofa.infra.endpoint.SofaBootVersionEndpointMvcAdapter; <nl> - String sofaBootVersionUrl = urlHttpPrefix + "/actuator/versions"; <nl> + String sofaBootVersionUrl = urlHttpPrefix + "/" <nl> + + SofaBootVersionEndpointMvcAdapter.SOFA_BOOT_VERSION_URL; <nl> 
new file <nl> ppp DownHealthIndicataor.java <nl> + package com.alipay.sofa.healthcheck.readiness; <nl> + import org.springframework.boot.actuate.health.Health; <nl> + import org.springframework.boot.actuate.health.HealthIndicator; <nl> + import org.springframework.stereotype.Component; <nl> + @Component <nl> 
new file <nl> ppp SSLParametersWebSocketServerFactoryTest.java <nl> + package org.java_websocket.server; <nl> + import org.java_websocket.WebSocket; <nl> + import org.java_websocket.WebSocketAdapter; <nl> + import org.java_websocket.WebSocketImpl; <nl> + import org.java_websocket.drafts.Draft; <nl> + import org.java_websocket.drafts.Draft_6455; <nl> 
mmm CloseFrameBuilder.java <nl> ppp CloseFrameBuilder.java <nl> - import org.java_websocket.exeptions.InvalidDataException; <nl> - import org.java_websocket.exeptions.InvalidFrameException; <nl> + import org.java_websocket.exceptions.InvalidDataException; <nl> + import org.java_websocket.exceptions.InvalidFrameException; <nl> 
mmm Protocol.java <nl> ppp Protocol.java <nl> + import java.util.regex.Pattern; <nl> + 	private static final Pattern COMPILE = Pattern.compile(" "); <nl> + 	private static final Pattern PATTERN = Pattern.compile(","); <nl> - 		String protocolHeader = inputProtocolHeader.replaceAll( " ", "" ); <nl> - 		String[] headers = protocolHeader.split( "," ); <nl> 
mmm FrameBuilder.java <nl> ppp FrameBuilder.java <nl> - package net.tootallnate.websocket; <nl> + package org.java_websocket; <nl> - import net.tootallnate.websocket.exeptions.InvalidDataException; <nl> + import org.java_websocket.exeptions.InvalidDataException; <nl> mmm Draft_10.java <nl> ppp Draft_10.java <nl> 
deleted file <nl> mmm CheFeature.java <nl> - package org.eclipse.che.api.workspace.server.wsnext.model; <nl> - import java.util.Objects; <nl> - public class CheFeature extends TypeMeta { <nl> - private ObjectMeta metadata = null; <nl> - private CheFeatureSpec spec = null; <nl> - public CheFeature metadata(ObjectMeta metadata) { <nl> 
mmm ContributePartViewImpl.java <nl> ppp ContributePartViewImpl.java <nl> + this.refreshContributionBranchNameListButton.ensureDebugId("refreshContributionBranchButton"); <nl> mmm PullRequestPluginTest.java <nl> ppp PullRequestPluginTest.java <nl> + import static java.util.regex.Pattern.compile; <nl> + import static org.eclipse.che.selenium.core.constant.TestMenuCommandsConstants.Git.BRANCHES; <nl> 
mmm CommandEditorTest.java <nl> ppp CommandEditorTest.java <nl> + import static org.mockito.Mockito.never; <nl> + import org.eclipse.che.ide.ui.dialogs.confirm.ConfirmCallback; <nl> + @Test() <nl> + public void shouldNotSaveCommandWhenInvalidData() throws Exception { <nl> + when(namePage.hasInvalidData()).thenReturn(true); <nl> 
deleted file <nl> mmm ContainerSearch.java <nl> - package org.eclipse.che.api.devfile.server.convert.tool.kubernetes; <nl> - import static java.util.stream.Collectors.toList; <nl> - import io.fabric8.kubernetes.api.model.Container; <nl> - import io.fabric8.kubernetes.api.model.HasMetadata; <nl> - import io.fabric8.kubernetes.api.model.ObjectMeta; <nl> 
mmm CreateWorkspaceTest.java <nl> ppp CreateWorkspaceTest.java <nl> + newWorkspace.waitDevfileSelected(Devfile.JAVA_MAVEN); <nl> mmm TheiaIde.java <nl> ppp TheiaIde.java <nl> + import org.openqa.selenium.TimeoutException; <nl> - seleniumWebDriverHelper.waitVisibility(theiaIde, PREPARING_WS_TIMEOUT_SEC); <nl> 
mmm InternalRuntime.java <nl> ppp InternalRuntime.java <nl> - rewriteExternalServers(e.getValue().getServers())))); <nl> + rewriteExternalServers(e.getValue().getServers()), <nl> + e.getValue().getStatus()))); <nl> - FAILED; <nl> + FAILED <nl> mmm GdbConfigurationPagePresenter.java <nl> ppp GdbConfigurationPagePresenter.java <nl> 
mmm PluginProvisioner.java <nl> ppp PluginProvisioner.java <nl> - Map<String, String> pluginIdToComponentAlias = extractPluginIdToComponentAlias(workspaceConfig); <nl> + Map<String, String> pluginIdToComponentName = extractPluginIdToComponentName(workspaceConfig); <nl> - ComponentImpl pluginComponent = new ComponentImpl(PLUGIN_COMPONENT_TYPE, pluginId); <nl> 
mmm GithubFactoryParametersResolver.java <nl> ppp GithubFactoryParametersResolver.java <nl> - package org.eclipse.che.plugin.github.factory.resolver; <nl> + package org.eclipse.che.api.factory.server.github; <nl> mmm GithubUrl.java <nl> ppp GithubUrl.java <nl> - package org.eclipse.che.plugin.github.factory.resolver; <nl> 
mmm KubernetesNamespace.java <nl> ppp KubernetesNamespace.java <nl> + import io.fabric8.kubernetes.api.model.Secret; <nl> + private final KubernetesSecrets secrets; <nl> - KubernetesIngresses kubernetesIngresses) { <nl> + KubernetesIngresses kubernetesIngresses, <nl> + KubernetesSecrets secrets) { <nl> + this.secrets = secrets; <nl> 
new file <nl> ppp StartSynchronizerFactory.java <nl> + package org.eclipse.che.workspace.infrastructure.kubernetes; <nl> + import org.eclipse.che.api.core.model.workspace.runtime.RuntimeIdentity; <nl> + public interface StartSynchronizerFactory { <nl> + StartSynchronizer create(RuntimeIdentity runtimeIdentity); <nl> 
mmm WorkspaceShare.java <nl> ppp WorkspaceShare.java <nl> + import com.google.inject.Singleton; <nl> + @Singleton <nl> mmm StackDetails.java <nl> ppp StackDetails.java <nl> + import com.google.inject.Singleton; <nl> + @Singleton <nl> mmm Stacks.java <nl> ppp Stacks.java <nl> + import com.google.inject.Singleton; <nl> 
mmm KubernetesInfraModule.java <nl> ppp KubernetesInfraModule.java <nl> + import org.eclipse.che.workspace.infrastructure.kubernetes.wsplugins.PluginBrokerManager; <nl> + import org.eclipse.che.workspace.infrastructure.kubernetes.wsplugins.SidecarToolingProvisioner; <nl> + import org.eclipse.che.workspace.infrastructure.kubernetes.wsplugins.brokerphases.BrokerEnvironmentFactory; <nl> 
mmm CheckFactoryWithPerClickCreatePolicyTest.java <nl> ppp CheckFactoryWithPerClickCreatePolicyTest.java <nl> mmm DirectUrlFactoryWithRootFolderTest.java <nl> ppp DirectUrlFactoryWithRootFolderTest.java <nl> mmm NavigateToFileTest.java <nl> ppp NavigateToFileTest.java <nl> mmm JavaTestPluginJunit4Test.java <nl> 
mmm MySection.java <nl> ppp MySection.java <nl> - private boolean isMroe; <nl> + private boolean isMore; <nl> - this.isMroe = isMroe; <nl> + this.isMore = isMroe; <nl> - public boolean isMroe() { <nl> - return isMroe; <nl> + public boolean isMore() { <nl> + return isMore; <nl> - public void setMroe(boolean mroe) { <nl> 
mmm SectionUerActivity.java <nl> ppp SectionUerActivity.java <nl> - SectionAdapter sectionAdapter = new SectionAdapter(this, R.layout.image_view, R.layout.def_section_head, DataServer.getSampleData()); <nl> + SectionAdapter sectionAdapter = new SectionAdapter(this, R.layout.head_view, R.layout.def_section_head, DataServer.getSampleData()); <nl> 
new file <nl> ppp NativeListExpandCardFragment.java <nl> + package it.gmariotti.cardslib.demo.fragment.nativeview; <nl> + import android.os.Bundle; <nl> + import android.view.LayoutInflater; <nl> + import android.view.View; <nl> + import android.view.ViewGroup; <nl> + import android.widget.Toast; <nl> + import java.util.ArrayList; <nl> 
mmm BTraceRuntimeImpl_9.java <nl> ppp BTraceRuntimeImpl_9.java <nl> + @Override <nl> + public int version() { <nl> + return 9; <nl> + } <nl> mmm BTraceRuntimeImplBase.java <nl> ppp BTraceRuntimeImplBase.java <nl> - BTraceRuntimeAccess.debugPrint0( <nl> - "\"" <nl> - + BTraceRuntime.CMD_QUEUE_LIMIT_KEY <nl> - + "\" not provided. " <nl> 
mmm ConstructorArgs.java <nl> ppp ConstructorArgs.java <nl> mmm NoArgs.java <nl> ppp NoArgs.java <nl> mmm ArgsNoSelf.java <nl> ppp ArgsNoSelf.java <nl> mmm StaticNoArgs.java <nl> ppp StaticNoArgs.java <nl> mmm StaticNoArgsSelf.java <nl> ppp StaticNoArgsSelf.java <nl> mmm AnytypeArgs.java <nl> ppp AnytypeArgs.java <nl> 
mmm OnMethodTest.java <nl> ppp OnMethodTest.java <nl> + import com.sun.btrace.AnyType; <nl> + import com.sun.btrace.BTraceUtils; <nl> + import com.sun.btrace.annotations.Kind; <nl> + import com.sun.btrace.annotations.Location; <nl> + import com.sun.btrace.annotations.Return; <nl> + package traces; <nl> + import com.sun.btrace.AnyType; <nl> 

mmm SearchActivity.java <nl> ppp SearchActivity.java <nl> - import com.example.jingbin.cloudreader.base.refreshadapter.JQuickAdapter; <nl> + import com.example.jingbin.cloudreader.base.refreshadapter.BaseBindingAdapter; <nl> + import me.jingbin.library.ByRecyclerView; <nl> + public abstract class BaseBindingHolder<T, B extends ViewDataBinding> extends BaseByViewHolder<T> { <nl> 
deleted file <nl> mmm FroyoGestureDetector.java <nl> - package uk.co.senab.photoview.gestures; <nl> - import android.annotation.TargetApi; <nl> - import android.content.Context; <nl> - import android.view.MotionEvent; <nl> - import android.view.ScaleGestureDetector; <nl> - @TargetApi(8) <nl> - public class FroyoGestureDetector extends EclairGestureDetector { <nl> 
new file <nl> ppp CoinUserInfoBean.java <nl> + package com.example.jingbin.cloudreader.bean.wanandroid; <nl> + import android.databinding.BaseObservable; <nl> + import android.databinding.Bindable; <nl> + import com.example.jingbin.cloudreader.BR; <nl> + public class CoinUserInfoBean extends BaseObservable { <nl> 
new file <nl> ppp GetClusterMetadataMessageTask.java <nl> + package com.hazelcast.client.impl.protocol.task.management; <nl> + import com.hazelcast.client.impl.management.MCClusterMetadata; <nl> + import com.hazelcast.client.impl.protocol.ClientMessage; <nl> + import com.hazelcast.client.impl.protocol.codec.MCGetClusterMetadataCodec; <nl> 
mmm LongGaugeImpl.java <nl> ppp LongGaugeImpl.java <nl> + import com.hazelcast.internal.metrics.Gauge; <nl> - private static final long DEFAULT_VALUE = 0; <nl> + static final long DEFAULT_VALUE = 0L; <nl> + private volatile LongGaugeSource gaugeSource; <nl> + ProbeInstance probeInstance = metricsRegistry.getProbeInstance(name); <nl> 
mmm ExecutorServiceTestSupport.java <nl> ppp ExecutorServiceTestSupport.java <nl> - import com.hazelcast.config.Config; <nl> - HazelcastInstance instance = createHazelcastInstance(new Config().addExecutorConfig(executorConfig)); <nl> + HazelcastInstance instance = createHazelcastInstance(smallInstanceConfig().addExecutorConfig(executorConfig)); <nl> 
mmm ManagementCenterService.java <nl> ppp ManagementCenterService.java <nl> + import com.hazelcast.client.impl.protocol.codec.MCInterruptHotRestartBackupCodec; <nl> + import com.hazelcast.client.impl.protocol.codec.MCTriggerForceStartCodec; <nl> + import com.hazelcast.client.impl.protocol.codec.MCTriggerHotRestartBackupCodec; <nl> 
mmm AddLockConfigMessageTask.java <nl> ppp AddLockConfigMessageTask.java <nl> - config.setQuorumName(parameters.quorumName); <nl> + config.setQuorumName(parameters.splitBrainProtectionName); <nl> mmm DynamicConfigAddLockConfigCodec.java <nl> ppp DynamicConfigAddLockConfigCodec.java <nl> - public java.lang.String quorumName; <nl> 
mmm ClusterServiceImpl.java <nl> ppp ClusterServiceImpl.java <nl> + import com.hazelcast.cluster.Address; <nl> + import com.hazelcast.internal.nio.Connection; <nl> + import com.hazelcast.internal.nio.ConnectionListener; <nl> + import com.hazelcast.internal.util.UuidUtil; <nl> + import com.hazelcast.internal.util.executor.ExecutorType; <nl> 
mmm MemcachedTest.java <nl> ppp MemcachedTest.java <nl> - import com.hazelcast.spi.properties.GroupProperty; <nl> - config.setProperty(GroupProperty.MEMCACHE_ENABLED.getName(), "true"); <nl> + config.getNetworkConfig().getMemcacheProtocolConfig().setEnabled(true); <nl> mmm TextProtocolsConfigTest.java <nl> 
mmm TestClientApplicationContext.java <nl> ppp TestClientApplicationContext.java <nl> + import com.hazelcast.config.PersistentMemoryConfig; <nl> + import static com.hazelcast.config.PersistentMemoryMode.MOUNTED; <nl> + import static com.hazelcast.config.PersistentMemoryMode.SYSTEM_MEMORY; <nl> + @Resource(name = "client21-persistent-memory-system-memory") <nl> 
new file <nl> ppp LocalTrendsMethodsAsync.java <nl> + package twitter4j.api; <nl> + public interface LocalTrendsMethodsAsync <nl> + { <nl> + } <nl> new file <nl> ppp SocialGraphMethodsAsync.java <nl> + package twitter4j.api; <nl> + import twitter4j.TwitterListener; <nl> + public interface SocialGraphMethodsAsync <nl> 
mmm LazyDirectMessage.java <nl> ppp LazyDirectMessage.java <nl> - @Override <nl> - public MediaEntity[] getExtendedMediaEntities() { <nl> - return getTarget().getExtendedMediaEntities(); <nl> - } <nl> mmm StatusJSONImplTest.java <nl> ppp StatusJSONImplTest.java <nl> - public void testExtendedMediaEntities() throws Exception { <nl> 
new file <nl> ppp ExtendedMediaEntityJSONImpl.java <nl> + package twitter4j; <nl> + import java.util.Arrays; <nl> + public class ExtendedMediaEntityJSONImpl extends MediaEntityJSONImpl implements ExtendedMediaEntity { <nl> + private static final long serialVersionUID = -3889082303259253211L; <nl> + private int videoAspectRatioWidth; <nl> 
deleted file <nl> mmm OAuth2Support.java <nl> - package twitter4j.auth; <nl> - import twitter4j.TwitterException; <nl> - public interface OAuth2Support { <nl> - void setOAuthConsumer(String consumerKey, String consumerSecret); <nl> - OAuth2Token getOAuth2Token() throws TwitterException; <nl> - void setOAuth2Token(OAuth2Token oauth2Token); <nl> 
mmm UsersResourcesTest.java <nl> ppp UsersResourcesTest.java <nl> - assertNotNull(user.getTimeZone()); <nl> - ResponseList<User> users = twitter1.getContributors("twitter"); <nl> - assertTrue(users.size() > 0); <nl> - users = twitter1.getContributees(users.get(0).getId()); <nl> - assertTrue(users.size() > 0); <nl> 
mmm FlyingAI.java <nl> ppp FlyingAI.java <nl> - vec.setLength(unit.speed()); <nl> + vec.setLength(unit.type.speed); <nl> mmm LExecutor.java <nl> ppp LExecutor.java <nl> - if(build != null && dropped > 0 && unit.within(build, logicItemTransferRange + build.block.size * tilesize/2f)){ <nl> + if(build != null && build.isValid() && dropped > 0 && unit.within(build, logicItemTransferRange + build.block.size * tilesize/2f)){ <nl> 
mmm BulletType.java <nl> ppp BulletType.java <nl> - public float statusDuration = 60 * 1f; <nl> + public float statusDuration = 60 * 10f; <nl> new file <nl> ppp ProxySound.java <nl> + package io.anuke.mindustry.mod; <nl> + import io.anuke.arc.audio.*; <nl> + import io.anuke.arc.audio.mock.*; <nl> + import io.anuke.arc.math.geom.*; <nl> 
mmm Unloader.java <nl> ppp Unloader.java <nl> - if(tile.entity.timer.get(timerUnload, speed) && tile.entity.items.total() == 0){ <nl> + if(tile.entity.timer.get(timerUnload, speed / entity.timeScale) && tile.entity.items.total() == 0){ <nl> mmm Fx.java <nl> ppp Fx.java <nl> - Lines.poly(e.x, e.y, 10, 2f + e.finpow() * 7f); <nl> 
mmm AmmoListValue.java <nl> ppp AmmoListValue.java <nl> + import mindustry.type.*; <nl> - table.image(icon(t)).size(3 * 8).padRight(4).right().top(); <nl> - table.add(t.localizedName).padRight(10).left().top(); <nl> + if(!(t instanceof UnitType)){ <nl> + table.image(icon(t)).size(3 * 8).padRight(4).right().top(); <nl> 
mmm NetServer.java <nl> ppp NetServer.java <nl> - if(packet.versionType == null || ((packet.version == -1 || !packet.versionType.equals("official")) && Version.build != -1 && !admins.allowsCustomClients())){ <nl> + if(packet.versionType == null || ((packet.version == -1 || !packet.versionType.equals(Version.type)) && Version.build != -1 && !admins.allowsCustomClients())){ <nl> 
mmm CustomGameDialog.java <nl> ppp CustomGameDialog.java <nl> - public class CustomGameDialog extends FloatingDialog{ <nl> + public class <nl> + CustomGameDialog extends FloatingDialog{ <nl> mmm SaveVersion.java <nl> ppp SaveVersion.java <nl> + if(state.rules.spawns.isEmpty()) state.rules.spawns = DefaultWaves.get(); <nl> 
mmm PlacementFragment.java <nl> ppp PlacementFragment.java <nl> - currentCategory = input.block.buildCategory; <nl> + currentCategory = input.block.category; <nl> - currentCategory = input.block.buildCategory; <nl> + currentCategory = input.block.category; <nl> - Color color = state.rules.infiniteResources || (core != null && (core.items.has(block.buildRequirements, state.rules.buildCostMultiplier) || state.rules.infiniteResources)) ? Color.white : Color.gray; <nl> 
mmm Drawf.java <nl> ppp Drawf.java <nl> + arrow(x, y, x2, y2, length, radius, Pal.accent); <nl> + } <nl> + public static void arrow(float x, float y, float x2, float y2, float length, float radius, Color color){ <nl> - Draw.color(Pal.accent); <nl> + Draw.color(color); <nl> mmm TechTreeDialog.java <nl> ppp TechTreeDialog.java <nl> 
mmm LaunchLoadoutDialog.java <nl> ppp LaunchLoadoutDialog.java <nl> + int cap = selected.findCore().itemCapacity; <nl> + ItemSeq resources = universe.getLaunchResources(); <nl> + resources.min(cap); <nl> + universe.updateLaunchResources(resources); <nl> - loadout.show(core.itemCapacity, out, UnlockableContent::unlocked, out::clear, () -> {}, () -> { <nl> 
mmm Map.java <nl> ppp Map.java <nl> - Rules result = JsonIO.read(Rules.class, base, tags.get("rules", "{}")); <nl> + Rules result = JsonIO.read(Rules.class, base, tags.get("rules", "{}").replace("teams:{2:{infiniteAmmo:true}},", "")); <nl> mmm Teams.java <nl> ppp Teams.java <nl> - private Seq<TeamData> active = new Seq<>(); <nl> 
mmm ContentParser.java <nl> ppp ContentParser.java <nl> + boolean exists = Vars.content.getByName(type, name) != null; <nl> - c.sourceFile = file; <nl> - c.mod = mod; <nl> + if(!exists){ <nl> + c.sourceFile = file; <nl> + c.mod = mod; <nl> + } <nl> mmm ItemLiquidGenerator.java <nl> ppp ItemLiquidGenerator.java <nl> 
mmm Floor.java <nl> ppp Floor.java <nl> - 	public boolean hasOres = true; <nl> + 	public boolean hasOres = false; <nl> mmm MapIO.java <nl> ppp MapIO.java <nl> + Color color = new Color(); <nl> - pixmap.drawPixel(x, pixmap.getHeight() - 1 - y, wallc == 0 ? ColorMapper.getColor(floor) : wallc); <nl> + wallc = wallc == 0 ? ColorMapper.getColor(floor) : wallc; <nl> 
mmm Block.java <nl> ppp Block.java <nl> + 	public void configure(Tile tile, byte data){} <nl> + 	public void setConfigure(Tile tile, byte data){ <nl> + 		Vars.netClient.handleBlockConfig(tile, data); <nl> + 	} <nl> mmm Teleporter.java <nl> ppp Teleporter.java <nl> + 	@Override <nl> + 	public void configure(Tile tile, byte data) { <nl> 
mmm FloorValue.java <nl> ppp FloorValue.java <nl> - } <nl> + } <nl> mmm ArcNetProvider.java <nl> ppp ArcNetProvider.java <nl> - } <nl> + } <nl> mmm Conveyor.java <nl> ppp Conveyor.java <nl> - } <nl> + } <nl> mmm CustomGameDialog.java <nl> ppp CustomGameDialog.java <nl> - } <nl> + } <nl> mmm TerrainFilter.java <nl> ppp TerrainFilter.java <nl> 
mmm ContentParser.java <nl> ppp ContentParser.java <nl> - import arc.struct.Seq; <nl> mmm SectorInfo.java <nl> ppp SectorInfo.java <nl> + import arc.util.ArcAnnotate.*; <nl> - private static final int exportWindow = 60; <nl> + private static final int valueWindow = 60; <nl> + public ObjectMap<Item, ExportStat> production = new ObjectMap<>(); <nl> 
mmm SaveVersion.java <nl> ppp SaveVersion.java <nl> + context.onReadBuilding(); <nl> mmm Waves.java <nl> ppp Waves.java <nl> - public static final int waveVersion = 1; <nl> + public static final int waveVersion = 2; <nl> - {flare, horizon, rand.chance(0.2) && difficulty > 0.5 ? poly : zenith, rand.chance(0.5) ? quad : antumbra, rand.chance(0.1) ? quad : eclipse} <nl> 
mmm StorageBlock.java <nl> ppp StorageBlock.java <nl> - return linkedCore != null; <nl> + return linkedCore == null; <nl> mmm SolidPump.java <nl> ppp SolidPump.java <nl> - return liquids.get(result) < liquidCapacity - 0.01f; <nl> + return liquids.get(result) < liquidCapacity - 0.01f && super.shouldConsume(); <nl> 
mmm Autotiler.java <nl> ppp Autotiler.java <nl> - if(blends(tile, rotation, directional, i, world) && (tile != null && tile.getNearbyEntity(realDir) != null && !tile.getNearbyEntity(realDir).block.squareSprite)){ <nl> + if(blends(tile, rotation, directional, i, world) && (tile != null && tile.nearbyBuild(realDir) != null && !tile.nearbyBuild(realDir).block.squareSprite)){ <nl> 
mmm NetServer.java <nl> ppp NetServer.java <nl> - if(packet.versionType == null || ((packet.version == -1 || !packet.versionType.equals("official")) && Version.build != -1 && !admins.allowsCustomClients())){ <nl> + if(packet.versionType == null || ((packet.version == -1 || !packet.versionType.equals(Version.type)) && Version.build != -1 && !admins.allowsCustomClients())){ <nl> 
mmm PlaceMode.java <nl> ppp PlaceMode.java <nl> - 					Draw.polygon(tile.worldx() + offset.y, tile.worldy() + offset.x, 25, 4 + (1f - fract) * 26); <nl> + 					Draw.polygon(tile.worldx() + offset.x, tile.worldy() + offset.y, 25, 4 + (1f - fract) * 26); <nl> mmm EMP.java <nl> ppp EMP.java <nl> - 		Draw.polygon(y, x, 34, radius * Vars.tilesize); <nl> 
mmm TechTree.java <nl> ppp TechTree.java <nl> - requirements[i] = new ItemStack(block.buildRequirements[i].item, block.buildRequirements[i].amount * 8); <nl> + requirements[i] = new ItemStack(block.buildRequirements[i].item, block.buildRequirements[i].amount * 10); <nl> mmm MapRenderer.java <nl> ppp MapRenderer.java <nl> 
deleted file <nl> mmm RunShell.java <nl> - package io.vertx.example.shell.run_telnet; <nl> - import io.vertx.core.AbstractVerticle; <nl> - import io.vertx.example.util.Runner; <nl> - import io.vertx.ext.shell.ShellService; <nl> - import io.vertx.ext.shell.ShellServiceOptions; <nl> - import io.vertx.ext.shell.net.TelnetOptions; <nl> 
mmm Client.java <nl> ppp Client.java <nl> - package io.vertx.example.reactivex.web.client.zip; <nl> + package io.vertx.example.rxjava.database.mongo; <nl> - import io.vertx.reactivex.core.AbstractVerticle; <nl> - import io.vertx.reactivex.ext.web.client.WebClient; <nl> - import io.vertx.reactivex.ext.web.codec.BodyCodec; <nl> 
new file <nl> ppp SomeDatabaseServiceVerticle.java <nl> + package io.vertx.example.reactivex.services.serviceproxy; <nl> + import io.vertx.example.util.Runner; <nl> + import io.vertx.reactivex.core.AbstractVerticle; <nl> + import io.vertx.serviceproxy.ServiceBinder; <nl> + public class SomeDatabaseServiceVerticle extends AbstractVerticle { <nl> 
deleted file <nl> mmm MainClassNode2.java <nl> - import io.vertx.core.DeploymentOptions; <nl> - import io.vertx.core.Vertx; <nl> - import io.vertx.core.VertxOptions; <nl> - import io.vertx.core.json.JsonObject; <nl> - import io.vertx.core.spi.cluster.ClusterManager; <nl> - import io.vertx.spi.cluster.zookeeper.ZookeeperClusterManager; <nl> 
mmm Baritone.java <nl> ppp Baritone.java <nl> - import baritone.api.IBaritoneProvider; <nl> + import baritone.api.IBaritone; <nl> - import baritone.behavior.*; <nl> + import baritone.behavior.Behavior; <nl> + import baritone.behavior.LookBehavior; <nl> + import baritone.behavior.MemoryBehavior; <nl> + import baritone.behavior.PathingBehavior; <nl> 
mmm SchematicAdapter.java <nl> ppp SchematicAdapter.java <nl> - import baritone.api.schematic.IStaticSchematic; <nl> + import baritone.api.schematic.ISchematic; <nl> - public final class SchematicAdapter implements IStaticSchematic { <nl> + public final class SchematicAdapter implements ISchematic { <nl> - return this.getDirect(x, y, z); <nl> 
mmm IPathExecutor.java <nl> ppp IPathExecutor.java <nl> + int getPosition(); <nl> mmm MovementHelper.java <nl> ppp MovementHelper.java <nl> + import baritone.api.IBaritone; <nl> + import baritone.api.pathing.movement.MovementStatus; <nl> + import net.minecraft.util.math.RayTraceResult; <nl> + import net.minecraft.util.math.Vec3d; <nl> 
mmm MovementPillar.java <nl> ppp MovementPillar.java <nl> - return COST_INF; <nl> + double placeCost = 0; <nl> + if (!ladder) { <nl> + placeCost = context.costOfPlacingAt(x, y, z); <nl> + if (placeCost >= COST_INF) { <nl> + return COST_INF; <nl> + } <nl> - return JUMP_ONE_BLOCK_COST + context.placeBlockCost + context.jumpPenalty + hardness; <nl> 
mmm MovementDescend.java <nl> ppp MovementDescend.java <nl> - double diffX2 = player().posX - (fakeDest.getX() + 0.5); <nl> - double diffZ2 = player().posZ - (fakeDest.getZ() + 0.5); <nl> - double d = Math.sqrt(diffX2 * diffX2 + diffZ2 * diffZ2); <nl> mmm MovementPillar.java <nl> ppp MovementPillar.java <nl> 
mmm RelativeFile.java <nl> ppp RelativeFile.java <nl> + import java.io.UncheckedIOException; <nl> - * @author LoganDark and his hate of checked exceptions <nl> + * @author LoganDark <nl> - private static File SHUT_THE_FUCK_UP_IOEXCEPTION_NOBODY_LIKES_YOU(File file) { <nl> + private static File getCanonicalFileUnchecked(File file) { <nl> 
mmm ActionCostsButOnlyTheOnesThatMakeMickeyDieInsideTest.java <nl> ppp ActionCostsButOnlyTheOnesThatMakeMickeyDieInsideTest.java <nl> - import static baritone.pathing.movement.ActionCostsButOnlyTheOnesThatMakeMickeyDieInside.*; <nl> + import static baritone.api.pathing.movement.ActionCostsButOnlyTheOnesThatMakeMickeyDieInside.*; <nl> 
deleted file <nl> mmm ShouldContainerBeExecutedCondition.java <nl> - package org.junit.gen5.api.extension; <nl> - @FunctionalInterface <nl> - public interface ShouldContainerBeExecutedCondition extends ExtensionPoint { <nl> - 	ConditionEvaluationResult shouldContainerBeExecuted(ContainerExtensionContext context); <nl> 
new file <nl> ppp CommonBuilderTests.java <nl> + package org.junit.gen5.engine; <nl> + import static org.junit.gen5.api.Assertions.*; <nl> + import static org.junit.gen5.engine.FilterResult.excluded; <nl> + import static org.junit.gen5.engine.FilterResult.included; <nl> + import java.util.StringJoiner; <nl> 
new file <nl> ppp CustomTypeBasedMethodArgumentResolver.java <nl> + package org.junit.gen5.engine.junit5.execution.injection.sample; <nl> + import java.lang.reflect.Parameter; <nl> + import org.junit.gen5.api.extension.MethodArgumentResolver; <nl> + public class CustomTypeBasedMethodArgumentResolver implements MethodArgumentResolver { <nl> 
mmm DefaultLauncherConfig.java <nl> ppp DefaultLauncherConfig.java <nl> + import org.junit.platform.launcher.PostDiscoveryFilter; <nl> + 	@API(status = EXPERIMENTAL, since = "1.7") <nl> + 	boolean isPostDiscoveryFilterAutoRegistrationEnabled(); <nl> + 	@API(status = EXPERIMENTAL, since = "1.7") <nl> + 	Collection<PostDiscoveryFilter> getAdditionalPostDiscoveryFilters(); <nl> 
mmm TerminationInfo.java <nl> ppp TerminationInfo.java <nl> - import static org.apiguardian.api.API.Status.EXPERIMENTAL; <nl> + import static org.apiguardian.api.API.Status.MAINTAINED; <nl> - @API(status = EXPERIMENTAL, since = "1.4") <nl> + @API(status = MAINTAINED, since = "1.7") <nl> mmm Events.java <nl> 
mmm ParameterResolverTests.java <nl> ppp ParameterResolverTests.java <nl> - import static org.junit.gen5.api.Assertions.assertEquals; <nl> - import static org.junit.gen5.api.Assertions.assertNotNull; <nl> - import static org.junit.gen5.api.Assertions.assertTrue; <nl> + import static org.junit.gen5.api.Assertions.*; <nl> 
mmm ClasspathSelector.java <nl> ppp ClasspathSelector.java <nl> - import org.junit.gen5.engine.DiscoverySelectorVisitor; <nl> - 	void accept(DiscoverySelectorVisitor visitor); <nl> mmm UniqueIdSelector.java <nl> ppp UniqueIdSelector.java <nl> - import org.junit.gen5.engine.DiscoverySelectorVisitor; <nl> - 	@Override <nl> 
mmm MethodTestDescriptorTests.java <nl> ppp MethodTestDescriptorTests.java <nl> - import static org.junit.gen5.api.Assertions.*; <nl> + import static org.junit.gen5.api.Assertions.assertEquals; <nl> - import java.util.List; <nl> - import org.junit.gen5.engine.EngineDescriptor; <nl> - import org.junit.gen5.engine.TestDescriptor; <nl> 
mmm MethodLevelCallbackTests.java <nl> ppp MethodLevelCallbackTests.java <nl> - public class MethodLevelCallbackTests extends AbstractJUnit5TestEngineTestCase { <nl> + public class MethodLevelCallbackTests extends AbstractJUnit5TestEngineTests { <nl> mmm CoreJUnit5TestEngineTests.java <nl> ppp CoreJUnit5TestEngineTests.java <nl> 
mmm AssertIterableEqualsAssertionsTests.java <nl> ppp AssertIterableEqualsAssertionsTests.java <nl> - class AssertionsAssertIterableEqualsTests { <nl> + class AssertIterableEqualsAssertionsTests { <nl> mmm AssertTrueAssertionsTests.java <nl> ppp AssertTrueAssertionsTests.java <nl> - class AssertionsAssertTrueTests { <nl> 
mmm JOptSimpleCommandLineOptionsParserTests.java <nl> ppp JOptSimpleCommandLineOptionsParserTests.java <nl> - import static org.junit.jupiter.api.Assertions.expectThrows; <nl> - 		RuntimeException exception = expectThrows(RuntimeException.class, () -> parser.printHelp(writer)); <nl> + 		RuntimeException exception = assertThrows(RuntimeException.class, () -> parser.printHelp(writer)); <nl> 
mmm DefaultDiscoveryRequest.java <nl> ppp DefaultDiscoveryRequest.java <nl> + import org.junit.platform.launcher.LauncherDiscoveryListener; <nl> + 	private final LauncherDiscoveryListener discoveryListener; <nl> - 			LauncherConfigurationParameters configurationParameters) { <nl> + 			LauncherConfigurationParameters configurationParameters, LauncherDiscoveryListener discoveryListener) { <nl> 
mmm ExcludePackages.java <nl> ppp ExcludePackages.java <nl> - package org.junit.platform.runner; <nl> + package org.junit.platform.suite.api; <nl> mmm IncludeClassNamePatterns.java <nl> ppp IncludeClassNamePatterns.java <nl> - package org.junit.platform.runner; <nl> + package org.junit.platform.suite.api; <nl> 
mmm ExtensionValuesStore.java <nl> ppp ExtensionValuesStore.java <nl> + 	public void closeAllStoredCloseableValues() { <nl> + 		ThrowableCollector throwableCollector = new ThrowableCollector(); <nl> + 		for (Supplier<Object> supplier : storedValues.values()) { <nl> + 			Object value = supplier.get(); <nl> 
mmm JUnit5TestableFactory.java <nl> ppp JUnit5TestableFactory.java <nl> + import org.junit.gen5.commons.util.PreconditionViolationException; <nl> - 			() -> new IllegalArgumentException(String.format("No method with name '%s' and parameter types '%s'", <nl> + 			() -> new PreconditionViolationException(String.format("No method with name '%s' and parameter types '%s'", <nl> 
mmm MyInstanceIDListenerService.java <nl> ppp MyInstanceIDListenerService.java <nl> - public void onTokenRefresh() { <nl> + public void onTokenRefresh(boolean updateID) { <nl> deleted file <nl> mmm ReferrerReceiver.java <nl> - package com.google.android.gms.samples.appinvite; <nl> - import com.google.android.gms.appinvite.AppInviteReferral; <nl> 
deleted file <nl> mmm Scope.java <nl> - package io.swagger.annotations; <nl> - public @interface Scope { <nl> - String name(); <nl> - String description(); <nl> - } <nl> mmm Swagger.java <nl> + @JsonIgnore <nl> + @JsonIgnore <nl> + @JsonIgnore <nl> mmm JsonSerializationTest.java <nl> ppp JsonSerializationTest.java <nl> 
deleted file <nl> mmm BaseBean.java <nl> - package io.swagger.models; <nl> - import com.fasterxml.jackson.annotation.JsonSubTypes; <nl> - import com.fasterxml.jackson.annotation.JsonTypeInfo; <nl> - import io.swagger.annotations.ApiModel; <nl> - @JsonTypeInfo(include = JsonTypeInfo.As.PROPERTY, use = JsonTypeInfo.Id.NAME, property = "type", visible = true) <nl> 
new file <nl> ppp CollectionFormatTest.java <nl> + package io.swagger; <nl> + import io.swagger.jaxrs.Reader; <nl> + import io.swagger.models.Operation; <nl> + import io.swagger.models.Swagger; <nl> + import io.swagger.models.parameters.AbstractSerializableParameter; <nl> + import org.testng.annotations.Test; <nl> 
new file <nl> ppp ResponseDeserializer.java <nl> + package io.swagger.util; <nl> + import com.fasterxml.jackson.core.JsonParser; <nl> + import com.fasterxml.jackson.core.JsonProcessingException; <nl> + import com.fasterxml.jackson.databind.DeserializationContext; <nl> + import com.fasterxml.jackson.databind.JsonDeserializer; <nl> 
new file <nl> ppp BeanValidatorTest.java <nl> + package io.swagger; <nl> + import io.swagger.converter.ModelConverters; <nl> + import io.swagger.models.BeanValidationsModel; <nl> + import io.swagger.models.Model; <nl> + import io.swagger.models.properties.DoubleProperty; <nl> + import io.swagger.models.properties.IntegerProperty; <nl> 
mmm SampleExceptionMapper.java <nl> ppp SampleExceptionMapper.java <nl> 
new file <nl> ppp Headers.java <nl> + package io.swagger.models.headers; <nl> + import java.util.Objects; <nl> + import java.util.LinkedHashMap; <nl> + import java.util.Map; <nl> + import com.fasterxml.jackson.annotation.JsonCreator; <nl> + import com.fasterxml.jackson.annotation.JsonProperty; <nl> + import com.fasterxml.jackson.annotation.JsonValue; <nl> 
mmm ModelResolver.java <nl> ppp ModelResolver.java <nl> + import com.fasterxml.jackson.databind.introspect.AnnotatedClass; <nl> - final io.swagger.v3.oas.annotations.media.Schema directSchemaAnnotation = type.getRawClass().getAnnotation(io.swagger.v3.oas.annotations.media.Schema.class); <nl> + final io.swagger.v3.oas.annotations.media.Schema declaredSchemaAnnotation = type.getRawClass().getDeclaredAnnotation(io.swagger.v3.oas.annotations.media.Schema.class); <nl> 
mmm ResourceWithMapReturnValue.java <nl> ppp ResourceWithMapReturnValue.java <nl> - @DefaultValue("1") <nl> + @DefaultValue("5") <nl> mmm Reader.java <nl> ppp Reader.java <nl> - String defaultValue; <nl> + String defaultValue = null; <nl> + qp.setDefaultValue(defaultValue); <nl> + pp.setDefaultValue(defaultValue); <nl> 
mmm ScannerTest.java <nl> ppp ScannerTest.java <nl> + import com.fasterxml.jackson.core.JsonProcessingException; <nl> + import io.swagger.resources.ResourceWithExtensions; <nl> + import io.swagger.util.Json; <nl> + import java.util.Map; <nl> + @Test( description = "scan resource with extensions") <nl> + public void scanResourceWithExtensions() throws JsonProcessingException { <nl> 
mmm TypeNameResolver.java <nl> ppp TypeNameResolver.java <nl> - _add(map, "uuid", UUID.class); <nl> - _add(map, "url", URL.class); <nl> - _add(map, "uri", URI.class); <nl> + _add(map, "string", UUID.class, URL.class, URI.class); <nl> mmm Reader.java <nl> ppp Reader.java <nl> - if(responseType == null) { <nl> 
mmm BaseGameActivity.java <nl> ppp BaseGameActivity.java <nl> - import org.anddev.andengine.util.Debug; <nl> + import org.anddev.andengine.util.debug.Debug; <nl> mmm RenderSurfaceView.java <nl> ppp RenderSurfaceView.java <nl> - import org.anddev.andengine.util.Debug; <nl> + import org.anddev.andengine.util.debug.Debug; <nl> 
mmm BitmapFont.java <nl> ppp BitmapFont.java <nl> - import org.andengine.util.StringUtils; <nl> + import org.andengine.util.TextUtils; <nl> - 					final String[] commonAttributes = StringUtils.SPLITPATTERN_SPACE.split(common, BitmapFont.TAG_COMMON_ATTRIBUTECOUNT + 1); <nl> + 					final String[] commonAttributes = TextUtils.SPLITPATTERN_SPACE.split(common, BitmapFont.TAG_COMMON_ATTRIBUTECOUNT + 1); <nl> 
mmm ConsumerRecordBinderRegistry.java <nl> ppp ConsumerRecordBinderRegistry.java <nl> - Optional<Annotation> annotation = argument.findAnnotationWithStereoType(Bindable.class); <nl> - if (annotation.isPresent()) { <nl> + Optional<Class<? extends Annotation>> annotationType = argument.getAnnotationMetadata().getAnnotationTypeByStereotype(Bindable.class); <nl> 
deleted file <nl> mmm JavadocParser.java <nl> - package io.micronaut.openapi.javadoc; <nl> - import io.micronaut.core.annotation.Experimental; <nl> - import io.micronaut.core.util.CollectionUtils; <nl> - import io.micronaut.core.util.StringUtils; <nl> - import java.util.Set; <nl> - @Experimental <nl> - public class JavadocParser { <nl> 
mmm BFactory.java <nl> ppp BFactory.java <nl> - @Bean <nl> mmm DefaultApplicationContext.java <nl> ppp DefaultApplicationContext.java <nl> - @Override <nl> - public <T> ApplicationContext registerSingleton(Class<T> beanType, T singleton, Qualifier<T> qualifier) { <nl> - return (ApplicationContext) super.registerSingleton(beanType, singleton, qualifier); <nl> 
new file <nl> ppp InMemoryJavaFileManager.java <nl> + package io.micronaut.openapi; <nl> + import com.google.common.base.MoreObjects; <nl> + import com.google.common.base.Optional; <nl> + import com.google.common.cache.CacheBuilder; <nl> + import com.google.common.cache.CacheLoader; <nl> + import com.google.common.cache.LoadingCache; <nl> 
deleted file <nl> mmm MultipartBody.java <nl> - package io.micronaut.http.server.multipart; <nl> - import io.micronaut.http.multipart.CompletedPart; <nl> - import org.reactivestreams.Publisher; <nl> - public interface MultipartBody extends Publisher<CompletedPart> { <nl> - } <nl> mmm NettyCompletedFileUpload.java <nl> 
mmm HttpResponseFactory.java <nl> ppp HttpResponseFactory.java <nl> - .firstOr("io.micronaut.http.server.netty.NettyHttpResponseFactory", HttpResponseFactory.class.getClassLoader()) <nl> + .firstOr("io.micronaut.http.simple.SimpleHttpResponseFactory", HttpResponseFactory.class.getClassLoader()) <nl> + package io.micronaut.http.simple.cookies; <nl> 
mmm ExecutableMethod.java <nl> ppp ExecutableMethod.java <nl> - Class getDeclaringType(); <nl> + Class<?> getDeclaringType(); <nl> + boolean accept(MediaType contentType); <nl> mmm AnnotatedMethodRouteBuilder.java <nl> ppp AnnotatedMethodRouteBuilder.java <nl> + import org.particleframework.http.MediaType; <nl> 
deleted file <nl> mmm StatsdMeterRegistryFactory.java <nl> - package io.micronaut.configuration.metrics.micrometer.statsd; <nl> - import io.micrometer.core.instrument.Clock; <nl> - import io.micrometer.core.instrument.composite.CompositeMeterRegistry; <nl> - import io.micrometer.statsd.StatsdConfig; <nl> - import io.micrometer.statsd.StatsdMeterRegistry; <nl> 
mmm RxInstrumentedSubscriber.java <nl> ppp RxInstrumentedSubscriber.java <nl> + import io.micronaut.scheduling.instrument.Instrumentation; <nl> + @SuppressWarnings("ReactiveStreamsSubscriberImplementation") <nl> - private boolean active; <nl> - this.instrumenter = instrumenterFactory.create(); <nl> + this.instrumenter = RunOnceInvocationInstrumenter.create(instrumenterFactory); <nl> 
mmm DefaultHttpClient.java <nl> ppp DefaultHttpClient.java <nl> + protected static final String HANDLER_CONNECT_TTL = "handler-connect-ttl"; <nl> + private final @Nullable Long connectionTimeAliveMillis; <nl> + Optional<Duration> connectTtl = configuration.getConnectTtl(); <nl> + this.connectionTimeAliveMillis = connectTtl.map(duration -> !duration.isNegative() ? duration.toMillis() : null).orElse(null); <nl> 
new file <nl> ppp MdcInstrumenter.java <nl> + package io.micronaut.tracing.instrument.util; <nl> + import java.util.Map; <nl> + import java.util.Optional; <nl> + import java.util.function.Function; <nl> + import javax.inject.Singleton; <nl> + import io.micronaut.context.annotation.Requires; <nl> + import io.micronaut.core.annotation.Internal; <nl> 
mmm LogoutController.java <nl> ppp LogoutController.java <nl> - import io.micronaut.http.HttpStatus; <nl> - import io.micronaut.http.annotation.Get; <nl> - import javax.inject.Inject; <nl> - @Inject <nl> - public LogoutController(@Nullable LogoutHandler logoutHandler, <nl> - ApplicationEventPublisher eventPublisher, <nl> 
mmm BearerAccessRefreshToken.java <nl> ppp BearerAccessRefreshToken.java <nl> + * @param tokenType Type of token <nl> new file <nl> ppp ServerSslBuilder.java <nl> + package io.micronaut.http.server.netty.ssl; <nl> + import io.micronaut.http.ssl.ServerSslConfiguration; <nl> + import io.netty.handler.ssl.SslContext; <nl> 
deleted file <nl> mmm EC2ServiceInstance.java <nl> - package io.micronaut.discovery.aws.route53.registration; <nl> - import io.micronaut.core.convert.value.ConvertibleValues; <nl> - import io.micronaut.core.util.StringUtils; <nl> - import io.micronaut.discovery.ServiceInstance; <nl> - import io.micronaut.health.HealthStatus; <nl> 
mmm HttpServerConfiguration.java <nl> ppp HttpServerConfiguration.java <nl> new file <nl> ppp WebSocketMessageEncoder.java <nl> + package io.micronaut.http.netty.websocket; <nl> + import io.micronaut.buffer.netty.NettyByteBufferFactory; <nl> + import io.micronaut.core.reflect.ClassUtils; <nl> + import io.micronaut.http.MediaType; <nl> 
deleted file <nl> mmm AbstractRedisClientFactory.java <nl> - package io.micronaut.configuration.lettuce; <nl> - import io.lettuce.core.RedisClient; <nl> - import io.lettuce.core.RedisURI; <nl> - import io.lettuce.core.api.StatefulRedisConnection; <nl> - import io.lettuce.core.pubsub.StatefulRedisPubSubConnection; <nl> 
new file <nl> ppp GraphiteMeterRegistryFactory.java <nl> + package io.micronaut.configuration.metrics.micrometer.graphite; <nl> + import io.micrometer.core.instrument.Clock; <nl> + import io.micrometer.core.instrument.composite.CompositeMeterRegistry; <nl> + import io.micrometer.graphite.GraphiteConfig; <nl> 
new file <nl> ppp EpollChannelOptionFactory.java <nl> + package io.micronaut.http.netty.channel.converters; <nl> + import javax.inject.Singleton; <nl> + import io.micronaut.context.annotation.Requires; <nl> + import io.micronaut.context.env.Environment; <nl> + import io.micronaut.core.annotation.Internal; <nl> 
mmm TypedRequestArgumentBinder.java <nl> ppp TypedRequestArgumentBinder.java <nl> - default boolean supportsSuperTypes() { <nl> - return true; <nl> - } <nl> mmm BlockingHttpClient.java <nl> ppp BlockingHttpClient.java <nl> + import java.io.Closeable; <nl> - public interface BlockingHttpClient { <nl> + public interface BlockingHttpClient extends Closeable { <nl> 
mmm GenericTypeUtils.java <nl> ppp GenericTypeUtils.java <nl> - import org.particleframework.core.convert.TypeConverter; <nl> + import java.util.Optional; <nl> - public static Class resolveSuperGenericTypeArgument(Class type) { <nl> + public static Optional<Class> resolveSuperGenericTypeArgument(Class type) { <nl> 
new file <nl> ppp ReflectionUtils.java <nl> + package org.particleframework.core.reflect; <nl> + import java.lang.reflect.Constructor; <nl> + import java.lang.reflect.Method; <nl> + import java.util.Optional; <nl> + public class ReflectionUtils { <nl> + public static Optional<Method> getDeclaredMethod(Class type, String methodName, Class...argTypes) { <nl> 
mmm BooksFetcher.java <nl> ppp BooksFetcher.java <nl> - package demo.particlediandroid; <nl> + package demo.micronautdiandroid; <nl> mmm RxHttpClient.java <nl> ppp RxHttpClient.java <nl> - Sdk sdk() default Sdk.PARTICLE; <nl> + Sdk sdk() default Sdk.MICRONAUT; <nl> 
mmm OffersController.java <nl> ppp OffersController.java <nl> - @Singleton <nl> mmm FileTypeHandler.java <nl> ppp FileTypeHandler.java <nl> - System.out.println("inside file handler"); <nl> mmm IssuesController.java <nl> ppp IssuesController.java <nl> - @Singleton <nl> mmm RoutingInBoundHandler.java <nl> ppp RoutingInBoundHandler.java <nl> 
mmm BeanDefinitionInjectProcessor.java <nl> ppp BeanDefinitionInjectProcessor.java <nl> - import static javax.lang.model.element.ElementKind.CLASS; <nl> - import javax.lang.model.SourceVersion; <nl> mmm JsonHttpContentSubscriberFactory.java <nl> ppp JsonHttpContentSubscriberFactory.java <nl> - @Consumes({MediaType.APPLICATION_JSON_STREAM,MediaType.APPLICATION_JSON}) <nl> 
new file <nl> ppp AbstractDynamicMBeanFactory.java <nl> + package io.micronaut.configuration.jmx.context; <nl> + import io.micronaut.core.async.publisher.Publishers; <nl> + import io.micronaut.core.type.Argument; <nl> + import io.micronaut.inject.BeanDefinition; <nl> + import io.micronaut.inject.ExecutableMethod; <nl> 
mmm AbstractBeanDefinition.java <nl> ppp AbstractBeanDefinition.java <nl> - protected List<MethodInjectionPoint> postConstructMethods; <nl> + protected final List<MethodInjectionPoint> postConstructMethods = new ArrayList<>(1); <nl> - protected List<MethodInjectionPoint> preDestroyMethods; <nl> + protected final List<MethodInjectionPoint> preDestroyMethods = new ArrayList<>(1); <nl> 
mmm DefaultEnvironment.java <nl> ppp DefaultEnvironment.java <nl> + protected final List<PropertySource> refreshablePropertySources = new ArrayList<>(); <nl> + this.propertySources.values().removeAll(refreshablePropertySources); <nl> + refreshablePropertySources.clear(); <nl> - propertySources.addAll(this.propertySources.values()); <nl> 
new file <nl> ppp ContextBuilder.java <nl> + package io.micronaut.security.ldap.context; <nl> + import javax.annotation.Nullable; <nl> + import javax.naming.NamingException; <nl> + import javax.naming.directory.DirContext; <nl> + public interface ContextBuilder { <nl> + DirContext build(ContextSettings contextSettings) throws NamingException; <nl> 
mmm ApplicationContextBuilder.java <nl> ppp ApplicationContextBuilder.java <nl> mmm ElapseTimeElement.java <nl> ppp ElapseTimeElement.java <nl> mmm DefaultRetryPredicate.java <nl> ppp DefaultRetryPredicate.java <nl> mmm AutomaticFeatureUtils.java <nl> ppp AutomaticFeatureUtils.java <nl> mmm DefaultBeanContext.java <nl> 
new file <nl> ppp HttpFilterResolver.java <nl> + package io.micronaut.http.filter; <nl> + import io.micronaut.http.HttpRequest; <nl> + import java.util.List; <nl> + public interface HttpFilterResolver { <nl> + List<? extends HttpFilter> resolveFilters(HttpRequest<?> request); <nl> + } <nl> mmm HttpFunctionExecutor.java <nl> 
deleted file <nl> mmm ConditionalInstrumenter.java <nl> - package io.micronaut.reactive.rxjava2; <nl> - import io.micronaut.scheduling.instrument.Instrumenters; <nl> - import io.micronaut.scheduling.instrument.InvocationInstrumenter; <nl> - import java.util.concurrent.Callable; <nl> - import java.util.function.Supplier; <nl> 
mmm BeanDefinitionInjectProcessor.java <nl> ppp BeanDefinitionInjectProcessor.java <nl> - boolean isInterface = JavaModelUtils.isInterface(method.getEnclosingElement()); <nl> - boolean isDefault = method.isDefault(); <nl> - if (isInterface && isDefault) { <nl> - owningType = introductionTypeName; <nl> - } <nl> 
mmm GroovyPropertySourceLoader.java <nl> ppp GroovyPropertySourceLoader.java <nl> + import io.micronaut.core.io.ResourceLoader; <nl> - protected Optional<InputStream> readInput(Environment environment, String fileName) { <nl> - Stream<URL> urls = environment.getResources(fileName); <nl> + protected Optional<InputStream> readInput(ResourceLoader resourceLoader, String fileName) { <nl> 
mmm StreamUtils.java <nl> ppp StreamUtils.java <nl> - import java.util.Comparator; <nl> + import java.util.*; <nl> + public static <T, A extends Collection<T>> Collector<T, A, Collection<T>> toImmutableCollection(Supplier<A> collectionFactory) { <nl> + return Collector.of(collectionFactory, Collection::add, (left, right) -> { <nl> 
mmm Get.java <nl> ppp Get.java <nl> - package org.particleframework.web.router.annotation; <nl> + package org.particleframework.http.annotation; <nl> - import org.particleframework.http.annotation.Produces; <nl> - @Action <nl> + @HttpMethodMapping <nl> - @AliasFor(annotation = Action.class, member = "value") <nl> 
new file <nl> ppp AImpl.java <nl> + package org.particleframework.inject.constructor; <nl> + import javax.inject.Singleton; <nl> + @Singleton <nl> + public class AImpl implements A { <nl> + } <nl> new file <nl> ppp BWithAC.java <nl> + package org.particleframework.inject.constructor; <nl> + import javax.inject.Inject; <nl> 
mmm GroovyParameterElement.java <nl> ppp GroovyParameterElement.java <nl> + if (isFactoryType && annotationUtils.hasStereotype(concreteClass, AROUND_TYPE)) { <nl> + visitExecutableMethod(beanMethod, annotationUtils.getAnnotationMetadata(beanMethod)); <nl> + } <nl> mmm MutableHttpHeaders.java <nl> ppp MutableHttpHeaders.java <nl> 
deleted file <nl> mmm StatsdMeterRegistryFactory.java <nl> - package io.micronaut.configuration.metrics.micrometer.statsd; <nl> - import io.micrometer.core.instrument.Clock; <nl> - import io.micrometer.core.instrument.composite.CompositeMeterRegistry; <nl> - import io.micrometer.statsd.StatsdConfig; <nl> - import io.micrometer.statsd.StatsdMeterRegistry; <nl> 
new file <nl> ppp StringsCompleter.java <nl> + package io.micronaut.cli.interactive.completers; <nl> + import jline.console.completer.Completer; <nl> + import java.util.*; <nl> + import static jline.internal.Preconditions.checkNotNull; <nl> + public class StringsCompleter <nl> + implements Completer <nl> + { <nl> 
mmm BeanDefinitionInjectProcessor.java <nl> ppp BeanDefinitionInjectProcessor.java <nl> - import javax.inject.Inject; <nl> - import javax.inject.Provider; <nl> - import javax.inject.Scope; <nl> + import javax.inject.*; <nl> - boolean injected = methodAnnotationMetadata.hasStereotype(Inject.class); <nl> - boolean postConstruct = methodAnnotationMetadata.hasStereotype(PostConstruct.class); <nl> 
new file <nl> ppp StatsdConfigurationProperties.java <nl> + package io.micronaut.configuration.metrics.micrometer.statsd; <nl> + import io.micrometer.statsd.StatsdConfig; <nl> + import io.micronaut.context.annotation.ConfigurationProperties; <nl> + import io.micronaut.context.env.Environment; <nl> + import io.micronaut.core.naming.NameUtils; <nl> 
mmm DefaultFunctionRegistry.java <nl> ppp DefaultFunctionRegistry.java <nl> - public class DefaultFunctionRegistry implements ExecutableMethodProcessor<org.particleframework.function.Function>, FunctionRegistry, MediaTypeCodecRegistry { <nl> + public class DefaultFunctionRegistry implements ExecutableMethodProcessor<FunctionBean>, FunctionRegistry, MediaTypeCodecRegistry { <nl> 
mmm AbstractAnnotationMetadataBuilder.java <nl> ppp AbstractAnnotationMetadataBuilder.java <nl> - private static final Map<String, List<AnnotationMapper>> ANNOTATION_MAPPERS = new HashMap<>(10); <nl> + private static final Map<String, List<AnnotationMapper<?>>> ANNOTATION_MAPPERS = new HashMap<>(10); <nl> 
mmm BearerTokenConfigurationProperties.java <nl> ppp BearerTokenConfigurationProperties.java <nl> + import io.micronaut.context.annotation.Requires; <nl> + import io.micronaut.core.util.StringUtils; <nl> + @Requires(property = BearerTokenConfigurationProperties.PREFIX + ".enabled", notEquals = StringUtils.FALSE) <nl> 
mmm DefaultSyncCache.java <nl> ppp DefaultSyncCache.java <nl> - import java.util.concurrent.Executor; <nl> mmm MeterRegistryCreationListener.java <nl> ppp MeterRegistryCreationListener.java <nl> - private static Logger LOGGER = LoggerFactory.getLogger(MeterRegistryCreationListener.class); <nl> + private static Logger logger = LoggerFactory.getLogger(MeterRegistryCreationListener.class); <nl> 
deleted file <nl> mmm DefaultRolesFinder.java <nl> - package io.micronaut.security.token; <nl> - import io.micronaut.security.token.config.TokenConfiguration; <nl> - import javax.annotation.Nonnull; <nl> - import javax.inject.Singleton; <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - @Singleton <nl> 
new file <nl> ppp SpringCloudConfiguration.java <nl> + package io.micronaut.discovery.spring; <nl> + import io.micronaut.context.annotation.ConfigurationProperties; <nl> + import io.micronaut.discovery.config.ConfigDiscoveryConfiguration; <nl> + import io.micronaut.discovery.spring.condition.RequiresSpringCloudConfig; <nl> 
new file <nl> ppp Validated.java <nl> + package org.particleframework.validation; <nl> + import org.particleframework.aop.Around; <nl> + import org.particleframework.context.annotation.Type; <nl> + import java.lang.annotation.Documented; <nl> + import java.lang.annotation.ElementType; <nl> + import java.lang.annotation.Retention; <nl> 
new file <nl> ppp InventoryClient.java <nl> + package io.micronaut.security.token.propagation; <nl> + import io.micronaut.context.annotation.Requires; <nl> + import io.micronaut.http.annotation.Get; <nl> + import io.micronaut.http.client.annotation.Client; <nl> + import io.reactivex.Maybe; <nl> + @Requires(property = "spec.name", value = "tokenpropagation.gateway") <nl> 
mmm Issue.java <nl> ppp Issue.java <nl> - import javax.persistence.Version; <nl> + import org.hibernate.annotations.DynamicUpdate; <nl> + @DynamicUpdate <nl> - 	@Version <nl> - 	private long version; <nl> - 	 <nl> - 	public long getVersion() { <nl> - 		return version; <nl> - 	} <nl> mmm CompareContext.java <nl> 
mmm DefaultCommitInfoManager.java <nl> ppp DefaultCommitInfoManager.java <nl> + import java.util.Iterator; <nl> - import javax.annotation.Nullable; <nl> + import com.gitplex.server.git.DayAndCommits; <nl> + import com.gitplex.server.git.UserContribution; <nl> + import com.gitplex.server.util.Day; <nl> + import com.gitplex.utils.Pair; <nl> 
mmm DefaultUserManager.java <nl> ppp DefaultUserManager.java <nl> + import java.util.List; <nl> + import com.google.common.collect.Lists; <nl> + 	@Override <nl> + 	@Sessional <nl> + 	public List<User> getManagableAccounts(User user) { <nl> + 		Preconditions.checkNotNull(user); <nl> + 		Collection<Membership> memberships = user.getMemberships(); <nl> 
mmm UpdateCommitsPanel.java <nl> ppp UpdateCommitsPanel.java <nl> - 				}, commit, new LoadableDetachableModel<List<CommentThread>>() { <nl> + 				}, new LoadableDetachableModel<List<CommentThread>>() { <nl> deleted file <nl> mmm BlobLoader.java <nl> - package com.pmease.gitplex.core.comment; <nl> - import java.util.List; <nl> 
new file <nl> ppp EnumPropertyEditor.java <nl> + package com.pmease.commons.wicket.editor.enumeration; <nl> + import java.util.ArrayList; <nl> + import java.util.EnumSet; <nl> + import java.util.Iterator; <nl> + import java.util.List; <nl> + import org.apache.wicket.markup.html.form.DropDownChoice; <nl> + import org.apache.wicket.model.IModel; <nl> 
new file <nl> ppp VexBehavior.java <nl> + package com.pmease.gitop.web.common.component.vex; <nl> + import org.apache.wicket.Component; <nl> + import org.apache.wicket.behavior.Behavior; <nl> + import org.apache.wicket.markup.head.CssHeaderItem; <nl> + import org.apache.wicket.markup.head.IHeaderResponse; <nl> 
mmm AndCriteria.java <nl> ppp AndCriteria.java <nl> - import java.util.HashMap; <nl> - import java.util.Map; <nl> + import io.onedev.server.web.page.project.issues.workflowreconcile.UndefinedFieldValue; <nl> - 	public Map<String, String> getUndefinedFieldValues(Project project) { <nl> - 		Map<String, String> undefinedFieldValues = new HashMap<>(); <nl> 
mmm Project.java <nl> ppp Project.java <nl> - 				Blob blob = getBlob(new BlobIdent(refInfo.getPeeledObj().name(), BuildSpec.BLOB_PATH, FileMode.TYPE_FILE), false); <nl> + 				Blob blob = getBlob(new BlobIdent(refInfo.getPeeledObj().name(), <nl> + 						BuildSpec.BLOB_PATH, FileMode.TYPE_FILE), false); <nl> 
mmm TestResource.java <nl> ppp TestResource.java <nl> - import com.pmease.gitop.web.common.util.StandardObjectMapper; <nl> + import com.pmease.gitop.web.util.StandardObjectMapper; <nl> mmm Languages.java <nl> ppp Languages.java <nl> - import com.pmease.gitop.web.common.util.StandardObjectMapper; <nl> + import com.pmease.gitop.web.util.StandardObjectMapper; <nl> 
deleted file <nl> mmm Modal.java <nl> - package com.pmease.gitop.web.common.wicket.component.modal; <nl> - import org.apache.wicket.Component; <nl> - import org.apache.wicket.ajax.AjaxEventBehavior; <nl> - import org.apache.wicket.ajax.AjaxRequestTarget; <nl> - import org.apache.wicket.markup.html.WebMarkupContainer; <nl> 
mmm DependencyUtils.java <nl> ppp DependencyUtils.java <nl> + 		 <nl> new file <nl> ppp ResourceBundleReferencesTest.java <nl> + package com.gitplex.web.util.resourcebundle; <nl> + import org.apache.wicket.markup.head.CssReferenceHeaderItem; <nl> + import org.apache.wicket.markup.head.JavaScriptReferenceHeaderItem; <nl> 
new file <nl> ppp BlobContent.java <nl> + package com.gitplex.server.git; <nl> + import java.io.Serializable; <nl> + import org.eclipse.jgit.lib.FileMode; <nl> + public interface BlobContent extends Serializable { <nl> + 	byte[] getBytes(); <nl> + 	 <nl> + 	FileMode getMode(); <nl> + 	 <nl> + 	public static class Immutable implements BlobContent { <nl> 
new file <nl> ppp AbstractAdministrationTab.java <nl> + package com.pmease.gitop.web.page.admin; <nl> + import org.apache.wicket.Component; <nl> + import org.apache.wicket.extensions.markup.html.tabs.AbstractTab; <nl> + import org.apache.wicket.markup.html.link.AbstractLink; <nl> + import org.apache.wicket.markup.html.link.BookmarkablePageLink; <nl> 
mmm RepoBranchesPage.java <nl> ppp RepoBranchesPage.java <nl> + import org.apache.wicket.markup.head.CssHeaderItem; <nl> + import org.apache.wicket.markup.head.IHeaderResponse; <nl> + import org.apache.wicket.request.resource.CssResourceReference; <nl> + 	@Override <nl> + 	public void renderHead(IHeaderResponse response) { <nl> 
mmm PullRequestOperation.java <nl> ppp PullRequestOperation.java <nl> + import org.apache.wicket.Session; <nl> - 			OneDev.getInstance(PullRequestManager.class).discard(request, comment); <nl> + 			OneDev.getInstance(PullRequestManager.class).discard(request, comment);			 <nl> + 			Session.get().success("Approved"); <nl> 
mmm Commit.java <nl> ppp Commit.java <nl> + import java.util.Collections; <nl> + import org.apache.commons.lang3.StringUtils; <nl> - 	this.parentHashes = checkNotNull(parentHashes, "parentHashes"); <nl> + 	this.parentHashes = new ArrayList<>(checkNotNull(parentHashes, "parentHashes")); <nl> + 	this.note = note; <nl> 
mmm PackageArtifactMojo.java <nl> ppp PackageArtifactMojo.java <nl> - import org.sonatype.aether.RepositorySystem; <nl> - import org.sonatype.aether.RepositorySystemSession; <nl> - import org.sonatype.aether.repository.RemoteRepository; <nl> + import org.eclipse.aether.RepositorySystem; <nl> + import org.eclipse.aether.RepositorySystemSession; <nl> 
mmm AccountSettingPage.java <nl> ppp AccountSettingPage.java <nl> - import com.pmease.gitop.web.page.account.setting.password.AccountPasswordPage; <nl> - 		tabs.add(new AccountSettingTab(Model.of("Change Password"), AccountPasswordPage.class)); <nl> mmm User.java <nl> ppp User.java <nl> + import org.hibernate.validator.constraints.Length; <nl> 
mmm IfApprovedByProjectWriters.java <nl> ppp IfApprovedByProjectWriters.java <nl> - } else if (result.isApprove()) { <nl> + } else if (result == Vote.Result.APPROVE) { <nl> mmm PullRequestModel.java <nl> ppp PullRequestModel.java <nl> - package com.pmease.gitop.web.model; <nl> + package com.pmease.gitop.web.page.project.pullrequest.activity; <nl> 
new file <nl> ppp BlobResource.java <nl> + package com.pmease.gitplex.web.resource; <nl> + import java.io.IOException; <nl> + import java.io.InputStream; <nl> + import javax.persistence.EntityNotFoundException; <nl> + import org.apache.commons.lang3.StringUtils; <nl> + import org.apache.tika.io.IOUtils; <nl> 
mmm PullRequestComment.java <nl> ppp PullRequestComment.java <nl> + import java.util.List; <nl> + import javax.annotation.Nullable; <nl> + import javax.persistence.Column; <nl> + import javax.persistence.Embedded; <nl> + import javax.persistence.FetchType; <nl> + import javax.persistence.JoinColumn; <nl> + import javax.persistence.ManyToOne; <nl> 
mmm ProjectAttachmentSupport.java <nl> ppp ProjectAttachmentSupport.java <nl> - import io.onedev.server.storage.AttachmentManager; <nl> + import io.onedev.server.storage.AttachmentStorageManager; <nl> - 		File attachmentDir = OneDev.getInstance(AttachmentManager.class).getAttachmentDir(getProject(), attachmentDirUUID); <nl> 
mmm CallbackReference.java <nl> ppp CallbackReference.java <nl> + { setFieldOrder(new String[] { "daemon", "detach", "name" }); } <nl> mmm ReturnTypesTest.java <nl> ppp ReturnTypesTest.java <nl> + { setFieldOrder(new String[] { "c1", "c2", "s" }); } <nl> + { setFieldOrder(new String[] { "c", "s", "i", "j", "inner" }); } <nl> 
mmm NativeLibraryTest.java <nl> ppp NativeLibraryTest.java <nl> + NativeLibrary.disposeAll(); <nl> - assertEquals("Library should be loaded exactly once", <nl> + assertEquals("Library should be newly loaded after all others disposed", <nl> mmm Platform.java <nl> ppp Platform.java <nl> + public static final boolean RO_FIELDS; <nl> 
mmm Win32Exception.java <nl> ppp Win32Exception.java <nl> - super(Kernel32Util.formatMessageFromHR(hr)); <nl> + super(Kernel32Util.formatMessage(hr)); <nl> mmm Crypt32Test.java <nl> ppp Crypt32Test.java <nl> - 	assertEquals("description", pDescription.getValue().getString(0, true)); <nl> + 	assertEquals("description", pDescription.getValue().getWideString(0)); <nl> 
mmm CallbacksTest.java <nl> ppp CallbacksTest.java <nl> - import java.util.HashSet; <nl> - import java.util.Set; <nl> - void callVoidCallbackThreaded(VoidCallback c, int count, int ms); <nl> + refs.putAll(CallbackReference.directCallbackMap); <nl> - refs = CallbackReference.callbackMap; <nl> + refs = ref.proxy != null ? CallbackReference.callbackMap <nl> 
mmm OleAuto.java <nl> ppp OleAuto.java <nl> + import com.sun.jna.platform.win32.WTypes.VARTYPEByReference; <nl> + import com.sun.jna.platform.win32.WinDef.LONG; <nl> - 	HRESULT VariantClear(Pointer pvarg); <nl> + 	HRESULT VariantClear(VARIANT pvarg); <nl> - 	SAFEARRAY.ByReference SafeArrayCreate(VARTYPE vt, int cDims, <nl> 
mmm Netapi32Util.java <nl> ppp Netapi32Util.java <nl> + import com.sun.jna.platform.win32.DsGetDC.PDS_DOMAIN_TRUSTS; <nl> - PointerByReference domainsPointerRef = new PointerByReference(); <nl> - int rc = Netapi32.INSTANCE.DsEnumerateDomainTrusts(serverName, <nl> - DsGetDC.DS_DOMAIN_VALID_FLAGS, domainsPointerRef, domainCount); <nl> 
mmm StdCallFunctionMapper.java <nl> ppp StdCallFunctionMapper.java <nl> - cls = new NativeMappedConverter(cls).nativeType(); <nl> + cls = NativeMappedConverter.getInstance(cls).nativeType(); <nl> mmm CallbackReference.java <nl> ppp CallbackReference.java <nl> - return new NativeMappedConverter(cls).nativeType(); <nl> 
mmm TxClientConfig.java <nl> ppp TxClientConfig.java <nl> mmm LcnStartingTransaction.java <nl> ppp LcnStartingTransaction.java <nl> mmm LcnRunningTransaction.java <nl> ppp LcnRunningTransaction.java <nl> mmm LcnDefaultTransaction.java <nl> ppp LcnDefaultTransaction.java <nl> mmm LcnTypeTransactionSeparator.java <nl> 
deleted file <nl> mmm TransactionStateManager.java <nl> - package com.codingapi.txlcn.tc.state; <nl> - import com.codingapi.txlcn.tc.parser.AnnotationParserHelper; <nl> - import com.codingapi.txlcn.tc.parser.TxAnnotation; <nl> - import lombok.extern.slf4j.Slf4j; <nl> - import java.lang.reflect.Method; <nl> 
mmm TransactionControlTemplate.java <nl> ppp TransactionControlTemplate.java <nl> + tracerHelper.createGroupId(null); <nl> mmm TXLCNRoundRobinLoadBalance.java <nl> ppp TXLCNRoundRobinLoadBalance.java <nl> - package com.codingapi.txlcn.client.spi.sleuth.dubbo.loadbalance; <nl> + package com.codingapi.txlcn.tc.spi.sleuth.dubbo.loadbalance; <nl> 
mmm FlowableTest.java <nl> ppp FlowableTest.java <nl> mmm HttpExceptionTest.java <nl> ppp HttpExceptionTest.java <nl> - package retrofit2.adapter.rxjava2; <nl> + package retrofit2; <nl> - import retrofit2.Response; <nl> mmm ObservableTest.java <nl> ppp ObservableTest.java <nl> mmm GuavaCallAdapterFactory.java <nl> 
mmm SimpleXMLConverter.java <nl> ppp SimpleXMLConverter.java <nl> - @Override public Object fromBody(TypedInput body, Type type) throws IOException { <nl> + @Override public Object fromBody(TypedInput body, Type type) throws ConversionException { <nl> - } catch (IOException e) { <nl> - throw e; <nl> - throw new RuntimeException(e); <nl> 
mmm RestAdapterTest.java <nl> ppp RestAdapterTest.java <nl> + import com.google.gson.JsonParseException; <nl> - import retrofit.converter.ConversionException; <nl> - assertThat(e.getKind()).isEqualTo(RetrofitError.Kind.CONVERSION); <nl> + assertThat(e.getKind()).isEqualTo(RetrofitError.Kind.UNEXPECTED); <nl> 
deleted file <nl> mmm RestException.java <nl> - package retrofit.http; <nl> - import java.io.IOException; <nl> - import static org.apache.http.HttpStatus.SC_UNAUTHORIZED; <nl> - public abstract class RestException extends RuntimeException { <nl> - private final String url; <nl> - protected RestException(String url, String message) { <nl> 
mmm NetworkBehavior.java <nl> ppp NetworkBehavior.java <nl> - import java.util.concurrent.Callable; <nl> - import okhttp3.ResponseBody; <nl> - import retrofit2.Response; <nl> + public interface Adapter<T> { <nl> + T applyBehavior(NetworkBehavior behavior, T value); <nl> + } <nl> - private volatile int errorPercent = DEFAULT_ERROR_PERCENT; <nl> 
mmm POST.java <nl> ppp POST.java <nl> + * @author Patrick Forhan (patrick@squareup.com) <nl> + @HttpMethod(value = HttpMethodType.POST) <nl> mmm CallbackResponseHandler.java <nl> ppp CallbackResponseHandler.java <nl> - import com.google.gson.Gson; <nl> + import retrofit.internal.gson.Gson; <nl> - private static String getName(Annotation[] annotations, Method method, <nl> 
mmm Retrofit.java <nl> ppp Retrofit.java <nl> - converterFactories.add(new BuiltInConverterFactory()); <nl> + converterFactories.add(new BuiltInConverters()); <nl> deleted file <nl> mmm VoidConverter.java <nl> - package retrofit; <nl> - import com.squareup.okhttp.ResponseBody; <nl> - import java.io.IOException; <nl> 
new file <nl> ppp UndoExecutorHolderFactory.java <nl> + package io.seata.rm.datasource.undo; <nl> + import io.seata.common.loader.EnhancedServiceLoader; <nl> + import java.text.MessageFormat; <nl> + import java.util.HashMap; <nl> + import java.util.List; <nl> + import java.util.Map; <nl> + public class UndoExecutorHolderFactory <nl> 
mmm RmRpcClient.java <nl> ppp RmRpcClient.java <nl> - "register RM sucesss. server version:" + ((RegisterRMResponse)response).getVersion() <nl> + "register RM success. server version:" + ((RegisterRMResponse)response).getVersion() <nl> + ",channel:" + channel); <nl> mmm GlobalTransactionScanner.java <nl> ppp GlobalTransactionScanner.java <nl> 
mmm ChannelEventListener.java <nl> ppp ChannelEventListener.java <nl> + @Deprecated <nl> + package io.seata.core.rpc.processor.client; <nl> + import io.netty.channel.ChannelHandlerContext; <nl> + import io.seata.common.util.NetUtil; <nl> + import io.seata.core.protocol.RpcMessage; <nl> + import io.seata.core.protocol.transaction.BranchRollbackRequest; <nl> 
mmm PackageIconLoader.java <nl> ppp PackageIconLoader.java <nl> - if (!request.getScheme().startsWith("package")) <nl> + if (request == null || request.getScheme() == null || !request.getScheme().startsWith("package")) <nl> mmm BitmapInfo.java <nl> ppp BitmapInfo.java <nl> + import java.lang.ref.WeakReference; <nl> 
mmm IonRequestBuilder.java <nl> ppp IonRequestBuilder.java <nl> + import org.apache.http.NameValuePair; <nl> + @Override <nl> + public ResponseFuture<InputStream> asInputStream() { <nl> + return execute(new InputStreamParser()); <nl> + } <nl> - return execute(new OutputStreamDataSink(ion.getServer(), outputStream, true), close, outputStream); <nl> 
mmm NamingSnapshotOperationTest.java <nl> ppp NamingSnapshotOperationTest.java <nl> - import com.alibaba.nacos.core.storage.kv.RocksStorage; <nl> + import com.alibaba.nacos.core.storage.kv.KvStorage; <nl> + import org.mockito.Mock; <nl> - private RocksStorage storage; <nl> + @Mock <nl> + private KvStorage storage; <nl> 
mmm PropertyUtil.java <nl> ppp PropertyUtil.java <nl> - private static boolean standaloneUseMysql = false; <nl> - setStandaloneUseMysql(getString("spring.datasource.platform", "").equals("mysql")); <nl> - public static boolean isStandaloneUseMysql() { <nl> - return standaloneUseMysql; <nl> - } <nl> - public static void setStandaloneUseMysql(boolean standaloneUseMysql) { <nl> 
new file <nl> ppp CmdbExecutor.java <nl> + package com.alibaba.nacos.cmdb.utils; <nl> + import com.alibaba.nacos.cmdb.CmdbApp; <nl> + import com.alibaba.nacos.common.executor.ExecutorFactory; <nl> + import com.alibaba.nacos.common.executor.NameThreadFactory; <nl> + import com.alibaba.nacos.core.utils.ClassUtils; <nl> 
mmm Service.java <nl> ppp Service.java <nl> - getPushService().serviceChanged(namespaceId, getName()); <nl> + getPushService().serviceChanged(this); <nl> new file <nl> ppp ServiceChangeEvent.java <nl> + package com.alibaba.nacos.naming.push; <nl> + import com.alibaba.nacos.naming.core.Service; <nl> + import org.springframework.context.ApplicationEvent; <nl> 
mmm Credentials.java <nl> ppp Credentials.java <nl> - public Credentials(String accessKey, String secretKey) { <nl> + private volatile String tenantId; <nl> + public Credentials(String accessKey, String secretKey, String tenantId) { <nl> + this.tenantId = tenantId; <nl> - this(null, null); <nl> + this(null, null, null); <nl> 
mmm HealthCheckExtendProvider.java <nl> ppp HealthCheckExtendProvider.java <nl> - import com.alibaba.nacos.api.naming.pojo.AbstractHealthChecker; <nl> + import com.alibaba.nacos.api.naming.pojo.healthcheck.AbstractHealthChecker; <nl> - import com.alibaba.nacos.naming.healthcheck.HealthCheckType; <nl> + import com.alibaba.nacos.api.naming.pojo.healthcheck.HealthCheckType; <nl> 
mmm DiskCache.java <nl> ppp DiskCache.java <nl> - NAMING_LOGGER.error("NA", "failed to write cache for dom:" + dom.getName(), e); <nl> + NAMING_LOGGER.error("[NA] failed to write cache for dom:" + dom.getName(), e); <nl> - NAMING_LOGGER.error("NA", "error while parsing cache file: " + json, e); <nl> + NAMING_LOGGER.error("[NA] error while parsing cache file: " + json, e); <nl> 
mmm CapacityManagementAspect.java <nl> ppp CapacityManagementAspect.java <nl> - 		OVER_MAX_SIZE("超过配置的内容大小上限", 429); <nl> + 		OVER_MAX_SIZE("超过配置的内容大小上限", 429), <nl> + 		OVER_MAX_AGGR_COUNT("超过聚合子配置个数上限", 429), <nl> + 		OVER_MAX_AGGR_SIZE("超过聚合数据子配置的内容大小上限", 429); <nl> mmm RequestLogAspect.java <nl> ppp RequestLogAspect.java <nl> 
mmm ServerMemberManager.java <nl> ppp ServerMemberManager.java <nl> + import com.alibaba.nacos.common.http.Callback; <nl> + import com.alibaba.nacos.common.http.HttpClientManager; <nl> + import com.alibaba.nacos.common.http.HttpUtils; <nl> + import com.alibaba.nacos.common.http.NAsyncHttpClient; <nl> + import com.alibaba.nacos.common.http.param.Header; <nl> 
new file <nl> ppp ServerListController.java <nl> + package com.alibaba.nacos.address.controller; <nl> + import com.alibaba.nacos.address.component.AddressServerGeneratorManager; <nl> + import com.alibaba.nacos.api.common.Constants; <nl> + import com.alibaba.nacos.naming.core.Cluster; <nl> + import com.alibaba.nacos.naming.core.Service; <nl> 
new file <nl> ppp DeregisterInstance_With_RootContextPath_ITCase.java <nl> + package com.alibaba.nacos.test.naming; <nl> + import org.springframework.test.context.TestPropertySource; <nl> + @TestPropertySource( properties = {"server.servlet.context-path=/"}) <nl> + public class DeregisterInstance_With_RootContextPath_ITCase extends DeregisterInstance_ITCase { <nl> 
mmm IpAddressInfo.java <nl> ppp IpAddressInfo.java <nl> mmm NamespaceController.java <nl> ppp NamespaceController.java <nl> mmm ServiceDetailInfo.java <nl> ppp ServiceDetailInfo.java <nl> mmm ClusterInfo.java <nl> ppp ClusterInfo.java <nl> mmm ServiceDetailView.java <nl> ppp ServiceDetailView.java <nl> mmm TenantInfo.java <nl> 
mmm HttpClient.java <nl> ppp HttpClient.java <nl> - import com.alibaba.nacos.client.naming.utils.LogUtils; <nl> - public static final int TIME_OUT_MILLIS = Integer <nl> - .getInteger("com.alibaba.nacos.client.naming.ctimeout", 50000); <nl> - public static final int CON_TIME_OUT_MILLIS = Integer <nl> - .getInteger("com.alibaba.nacos.client.naming.ctimeout", 3000); <nl> 
mmm SwitchEntry.java <nl> ppp SwitchEntry.java <nl> + public static final String CLIENT_GO = "go"; <nl> mmm Switch.java <nl> ppp Switch.java <nl> + public static String getPushGoVersion() { <nl> + return dom.pushGoVersion; <nl> + } <nl> + public static void setPushGoVersion(String pushGoVersion) { <nl> + dom.pushGoVersion = pushGoVersion; <nl> 
mmm DistroController.java <nl> ppp DistroController.java <nl> - import com.alibaba.fastjson.JSONObject; <nl> + import com.alibaba.nacos.common.utils.JacksonUtils; <nl> + import com.fasterxml.jackson.databind.JsonNode; <nl> - public ResponseEntity get(@RequestBody JSONObject body) throws Exception { <nl> + public ResponseEntity get(@RequestBody String body) throws Exception { <nl> 
mmm EventDispatcherTest.java <nl> ppp EventDispatcherTest.java <nl> - class MockEvent implements Event { <nl> + class MockEvent implements Event { <nl> mmm RaftStore.java <nl> ppp RaftStore.java <nl> - if (!StringUtils.equals(decodeFileName(cache.getName()), key)) { <nl> + if (!StringUtils.equals(cache.getName(), key)) { <nl> 
mmm NacosNamingService.java <nl> ppp NacosNamingService.java <nl> + import java.util.concurrent.TimeUnit; <nl> + import java.util.concurrent.TimeUnit; <nl> - String CONFIG_LONG_POLL_TIMEOUT = "configLongPollTimeout"; <nl> - String CONFIG_RETRY_TIME = "configRetryTime"; <nl> - String MAX_RETRY = "maxRetry"; <nl> 
mmm DefaultServerFactory.java <nl> ppp DefaultServerFactory.java <nl> - import com.google.common.base.MoreObjects; <nl> - @Override <nl> - public String toString() { <nl> - return MoreObjects.toStringHelper(this) <nl> - .add("applicationConnectors", applicationConnectors) <nl> - .add("adminConnectors", adminConnectors) <nl> 
new file <nl> ppp MaxDuration.java <nl> + package com.yammer.dropwizard.validation; <nl> + import javax.validation.Constraint; <nl> + import javax.validation.Payload; <nl> + import java.lang.annotation.Documented; <nl> + import java.lang.annotation.Retention; <nl> + import java.lang.annotation.Target; <nl> + import java.util.concurrent.TimeUnit; <nl> 
deleted file <nl> mmm BaseFormattedReporterFactory.java <nl> - package com.codahale.dropwizard.metrics.reporters; <nl> - import com.codahale.metrics.Clock; <nl> - import com.fasterxml.jackson.annotation.JsonProperty; <nl> - import javax.validation.constraints.NotNull; <nl> - import java.util.Locale; <nl> - public abstract class BaseFormattedReporterFactory extends BaseReporterFactory { <nl> 
mmm ChainedAuthFactory.java <nl> ppp ChainedAuthFactory.java <nl> - private List<AuthFactory<? extends Object, T>> factories = null; <nl> + private List<AuthFactory<?, T>> factories = null; <nl> - this(new ArrayList<AuthFactory<? extends Object, T>>()); <nl> + this(new ArrayList<AuthFactory<?, T>>()); <nl> 
mmm ViewBundleTest.java <nl> ppp ViewBundleTest.java <nl> - verify(jerseyEnvironment).addProvider(any(ViewMessageBodyWriter.class)); <nl> + verify(jerseyEnvironment).register(any(ViewMessageBodyWriter.class)); <nl> mmm HibernateBundle.java <nl> ppp HibernateBundle.java <nl> - environment.jersey().addProvider(new UnitOfWorkResourceMethodDispatchAdapter(sessionFactory)); <nl> 
new file <nl> ppp OptionalLongParamConverterProviderTest.java <nl> + package io.dropwizard.jersey.optional; <nl> + import org.junit.jupiter.api.Test; <nl> + import static org.assertj.core.api.Assertions.assertThat; <nl> + import static org.assertj.core.api.Assertions.assertThatThrownBy; <nl> + class OptionalLongParamConverterProviderTest { <nl> 
deleted file <nl> mmm Http2IntegrationTest.java <nl> - package io.dropwizard.http2; <nl> - import com.google.common.base.Optional; <nl> - import com.google.common.net.HttpHeaders; <nl> - import io.dropwizard.Configuration; <nl> - import io.dropwizard.testing.ConfigOverride; <nl> - import io.dropwizard.testing.ResourceHelpers; <nl> 
mmm SessionFactoryHealthCheckTest.java <nl> ppp SessionFactoryHealthCheckTest.java <nl> + import org.hibernate.jdbc.ReturningWork; <nl> + import javax.annotation.Nullable; <nl> + import java.util.Optional; <nl> + import static org.mockito.ArgumentMatchers.any; <nl> - private final SessionFactoryHealthCheck healthCheck = new SessionFactoryHealthCheck(factory, "SELECT 1"); <nl> 
new file <nl> ppp OptionalHeaderParamValueFactoryProvider.java <nl> + package io.dropwizard.jersey.guava; <nl> + import com.google.common.base.Optional; <nl> + import org.glassfish.hk2.api.Factory; <nl> + import org.glassfish.hk2.api.ServiceLocator; <nl> + import org.glassfish.jersey.internal.util.ReflectionHelper; <nl> 
mmm DropwizardApacheConnectorTest.java <nl> ppp DropwizardApacheConnectorTest.java <nl> - import static org.hamcrest.CoreMatchers.any; <nl> + import static org.assertj.core.api.Assertions.assertThatThrownBy; <nl> - thrown.expect(ProcessingException.class); <nl> - thrown.expectCause(any(SocketTimeoutException.class)); <nl> 
mmm ConstraintViolationExceptionMapperTest.java <nl> ppp ConstraintViolationExceptionMapperTest.java <nl> + import io.dropwizard.jersey.AbstractJerseyTest; <nl> - import io.dropwizard.logging.BootstrapLogging; <nl> - import org.glassfish.jersey.test.JerseyTest; <nl> - import org.glassfish.jersey.test.TestProperties; <nl> 
mmm JacksonMessageBodyProviderTest.java <nl> ppp JacksonMessageBodyProviderTest.java <nl> - .containsOnly("text may not be null (was null)"); <nl> + .containsOnly("text may not be null"); <nl> - .containsOnly("id must be greater than or equal to 0 (was -1)"); <nl> + .containsOnly("id must be greater than or equal to 0"); <nl> 
mmm Size.java <nl> ppp Size.java <nl> - if (count == 0 && other.count == 0) { <nl> - return 0; <nl> - } <nl> - if (count < 0 && other.count >= 0) { <nl> - return -1; <nl> - } <nl> - if (count >= 0 && other.count < 0) { <nl> - return 1; <nl> - } <nl> mmm HttpsConnectorFactoryTest.java <nl> ppp HttpsConnectorFactoryTest.java <nl> 
mmm FreemarkerViewRenderer.java <nl> ppp FreemarkerViewRenderer.java <nl> - import freemarker.template.DefaultObjectWrapper; <nl> + import freemarker.template.DefaultObjectWrapperBuilder; <nl> + import freemarker.template.Version; <nl> + private static final Version FREEMARKER_VERSION = Configuration.getVersion(); <nl> 
mmm ConfigurationFactoryTest.java <nl> ppp ConfigurationFactoryTest.java <nl> - "  * name must match \"[\\w]+[\\s]+[\\w]+([\\s][\\w]+)?\"%n")); <nl> + "  * name must match \"[\\w]+[\\s]+[\\w]+([\\s][\\w]+)?\" (was Boop)%n")); <nl> mmm SizeValidatorTest.java <nl> ppp SizeValidatorTest.java <nl> - .containsOnly("outOfRange must be between 10 KILOBYTES and 100 KILOBYTES", <nl> 
mmm JFXSlider.java <nl> ppp JFXSlider.java <nl> - @Override <nl> - public String getUserAgentStylesheet() { <nl> - return getClass().getResource("/css/controls/jfx-slider.css").toExternalForm(); <nl> - } <nl> mmm JFXRadioButtonSkin.java <nl> ppp JFXRadioButtonSkin.java <nl> - rippler.setOverlayVisible(true); <nl> 
mmm JFXTextField.java <nl> ppp JFXTextField.java <nl> - 		private static final CssMetaData<JFXTextField, Paint> UNFOCUS_COLOR = new CssMetaData<JFXTextField, Paint>("-fx-unfocus-color", PaintConverter.getInstance(), Color.valueOf("#A6A6A6")) { <nl> + 		private static final CssMetaData<JFXTextField, Paint> UNFOCUS_COLOR = new CssMetaData<JFXTextField, Paint>("-fx-unfocus-color", PaintConverter.getInstance(), Color.rgb(77, 77, 77)) { <nl> 
mmm JFXRippler.java <nl> ppp JFXRippler.java <nl> - private static final double RIPPLE_MAX_RADIUS = 300; <nl> + protected static final double RIPPLE_MAX_RADIUS = 300; <nl> + protected void setOverLayBounds(Rectangle overlay){ <nl> + overlay.setWidth(control.getLayoutBounds().getWidth()); <nl> + overlay.setHeight(control.getLayoutBounds().getHeight()); <nl> 
mmm ViewProcessor.java <nl> ppp ViewProcessor.java <nl> - public static View evalView(NutConfig config, ActionInfo ai, String viewType) { <nl> + protected static View evalView(NutConfig config, ActionInfo ai, String viewType) { <nl> mmm UpdateFieldsPItem.java <nl> ppp UpdateFieldsPItem.java <nl> - 	return Pojos.getFieldsForUpdate(_en(en), getFieldMatcher(), refer == null ? pojo.getOperatingObject() : refer); <nl> 
mmm XmlIocLoader.java <nl> ppp XmlIocLoader.java <nl> + if ("true".equals(fieldElement.getAttribute("optional"))) <nl> + 	iocField.setOptional(true); <nl> mmm ObjectMakerImpl.java <nl> ppp ObjectMakerImpl.java <nl> - import org.nutz.log.Log; <nl> - import org.nutz.log.Logs; <nl> - private static final Log log = Logs.get(); <nl> 
mmm StringInputing.java <nl> ppp StringInputing.java <nl> + import java.nio.charset.Charset; <nl> - StringInputing(String str, String charset) { <nl> + StringInputing(String str, Charset charset) { <nl> deleted file <nl> mmm Objs.java <nl> - package org.nutz.lang; <nl> - import java.lang.reflect.Type; <nl> - import org.nutz.mapl.Mapl; <nl> 
mmm Log4jLogAdapter.java <nl> ppp Log4jLogAdapter.java <nl> + @Override <nl> + public boolean isDebugEnabled() { <nl> + return logger.isDebugEnabled(); <nl> + } <nl> + @Override <nl> + public boolean isErrorEnabled() { <nl> + return logger.isEnabledFor(Level.ERROR); <nl> + } <nl> + @Override <nl> + public boolean isFatalEnabled() { <nl> 
mmm Nums.java <nl> ppp Nums.java <nl> - package org.nutz.lang; <nl> - public abstract class Nums { <nl> - public static int[] array(int... is) { <nl> - return is; <nl> - } <nl> - public static boolean isin(int[] ary, int i) { <nl> - if (null != ary) <nl> - for (int num : ary) <nl> - if (num == i) <nl> - return true; <nl> 
mmm DerbyJdbcExpert.java <nl> ppp DerbyJdbcExpert.java <nl> - sb.append('\n').append(mf.getColumnName()); <nl> + sb.append('\n').append(mf.getColumnNameInSql()); <nl> mmm AnnotationEntityMaker.java <nl> ppp AnnotationEntityMaker.java <nl> + import org.nutz.dao.util.Daos; <nl> + if (Daos.FORCE_UPPER_COLUMN_NAME) <nl> 
mmm JsonFormat.java <nl> ppp JsonFormat.java <nl> + private boolean null2EmtryString; <nl> - public class DefaultMirrorFactory implements MirrorFactory { <nl> + public class DefaultMirrorFactory extends AbstractLifeCycle implements MirrorFactory { <nl> + public ThreadLocal<Object> L = new ThreadLocal<Object>(); <nl> 
mmm HsqldbJdbcExpert.java <nl> ppp HsqldbJdbcExpert.java <nl> + if (mf.isReadonly()) <nl> + continue; <nl> mmm FastUploading.java <nl> ppp FastUploading.java <nl> + import java.io.ByteArrayOutputStream; <nl> - StringBuilder sb = new StringBuilder(); <nl> + ByteArrayOutputStream bao = new ByteArrayOutputStream(); <nl> 
mmm BaseWebappTest.java <nl> ppp BaseWebappTest.java <nl> + import org.nutz.http.Header; <nl> - resp = Sender.create(Request.create(getBaseURL() + path, METHOD.POST, params, null)).send(); <nl> + Header header = Header.create(); <nl> + header.set("Content-Type", "application/x-www-form-urlencoded"); <nl> + resp = Sender.create(Request.create(getBaseURL() + path, METHOD.POST, params, header)).send(); <nl> 
mmm Palindrome.java <nl> ppp Palindrome.java <nl> - public Matrix divide(int scalar) { <nl> - 	int[][] newData = new int[this.data.length][this.data[0].length]; <nl> - 		for (int i = 0; i < this.getRows(); ++i) <nl> - 			for(int j = 0; j < this.getColumns(); ++j) <nl> - 				newData[i][j] = this.data[i][j] / scalar; <nl> 
new file <nl> ppp Knapsack.java <nl> + public class Knapsack <nl> + { <nl> + 	private static int knapSack(int W, int wt[], int val[], int n) <nl> + 	{ <nl> + 		int i, w; <nl> + 	 <nl> + 	for (i = 0; i <= n; i++) <nl> + 	{ <nl> + 		for (w = 0; w <= W; w++) <nl> + 		{ <nl> + 			if (i==0 || w==0) <nl> + 				rv[i][w] = 0; <nl> 
mmm TreeTraversal.java <nl> ppp TreeTraversal.java <nl> + tree.insert(2); <nl> - tree.insert(1); <nl> - tree.insert(9); <nl> - tree.printInOrder(); <nl> - System.out.println(); <nl> + tree.insert(4); <nl> + tree.insert(6); <nl> + tree.insert(8); <nl> + System.out.println("Pre order traversal:"); <nl> + System.out.println("In order traversal:"); <nl> 
mmm MonokaiTheme.java <nl> ppp MonokaiTheme.java <nl> - return "FCFCFA"; <nl> + return "ffd966"; <nl> - @Override <nl> - protected String[] getCaretResources() { <nl> - return new String[]{ <nl> - "monokai.caretForeground" <nl> - }; <nl> - } <nl> mmm ArcDarkTheme.java <nl> ppp ArcDarkTheme.java <nl> - @Override <nl> 
mmm MTMaterialFontsAction.java <nl> ppp MTMaterialFontsAction.java <nl> + import com.intellij.openapi.actionSystem.AnActionEvent; <nl> - import com.intellij.openapi.actionSystem.AnActionEvent; <nl> - return MTConfig.getInstance().isUseMaterialFont(); <nl> + return MTConfig.getInstance().isUseMaterialFont2(); <nl> 
mmm MTAbstractTheme.java <nl> ppp MTAbstractTheme.java <nl> - "TabbedPane.highlight", <nl> - "TabbedPane.darkShadow", <nl> - "TabbedPane.shadow", <nl> - "CheckBox.darcula.disabledBorderColor2" <nl> + "CheckBox.darcula.disabledBorderColor2", <nl> + "TabbedPane.highlight", <nl> + "TabbedPane.darkShadow", <nl> + "TabbedPane.shadow" <nl> 
mmm MTCheckBoxUI.java <nl> ppp MTCheckBoxUI.java <nl> - import javax.swing.plaf.*; <nl> - import javax.swing.plaf.basic.*; <nl> - import javax.swing.text.*; <nl> + import javax.swing.plaf.ComponentUI; <nl> + import javax.swing.plaf.basic.BasicHTML; <nl> + import javax.swing.text.View; <nl> + import com.chrisrm.idea.MTConfig; <nl> 
mmm MTLighterTheme.java <nl> ppp MTLighterTheme.java <nl> + protected String[] getNotificationsResources() { <nl> + return new String[]{ <nl> + "Notifications.background", <nl> + "Notifications.borderColor" <nl> + }; <nl> + } <nl> - return new String[] { <nl> + return new String[]{ <nl> - return new String[] { <nl> 
mmm MTLightCustomTheme.java <nl> ppp MTLightCustomTheme.java <nl> - public static final String SELECTION_BACKGROUND = "80CBC4"; <nl> - public MTLightCustomTheme() { <nl> - super("mt.light_custom", "Material Light Custom", false); <nl> - } <nl> + public MTLightCustomTheme() { <nl> + super("mt.light_custom", "Material Light Custom", false); <nl> 
mmm ExampleUnitTest.java <nl> ppp ExampleUnitTest.java <nl> - package com.sample; <nl> + package com.sample.encrypt; <nl> - public void addition_isCorrect() throws Exception { <nl> + public void addition_isCorrect() { <nl> - } <nl> + } <nl> mmm MainActivity.java <nl> ppp MainActivity.java <nl> + package com.sample.encrypt; <nl> 
mmm ClientMapper.java <nl> ppp ClientMapper.java <nl> - import java.sql.ResultSet; <nl> - import java.sql.SQLException; <nl> - import java.time.ZoneOffset; <nl> - import org.skife.jdbi.v2.StatementContext; <nl> - import org.skife.jdbi.v2.tweak.ResultSetMapper; <nl> + import org.jooq.Record; <nl> + import org.jooq.RecordMapper; <nl> 
mmm ListAction.java <nl> ppp ListAction.java <nl> - public class ListAction implements Runnable { <nl> + import static com.google.common.base.Preconditions.checkArgument; <nl> + public class ListAction implements Runnable { <nl> - List<String> listOptions = listActionConfig.listOptions; <nl> + List<String> listOptions = listActionConfig.listType; <nl> 
mmm UserAuthenticatorFactory.java <nl> ppp UserAuthenticatorFactory.java <nl> mmm JsonCookieTest.java <nl> ppp JsonCookieTest.java <nl> mmm GenerateAesKeyCommand.java <nl> ppp GenerateAesKeyCommand.java <nl> mmm DSLContexts.java <nl> ppp DSLContexts.java <nl> mmm TinyIntConverter.java <nl> ppp TinyIntConverter.java <nl> 
mmm GroupResource.java <nl> ppp GroupResource.java <nl> - @POST @Timed <nl> + @Timed <nl> + @POST <nl> - @GET @Timed <nl> + @Timed <nl> + @GET <nl> - @GET @Timed <nl> + @Timed <nl> + @GET <nl> - @DELETE @Timed <nl> + @Timed <nl> + @DELETE <nl> mmm StatusResource.java <nl> ppp StatusResource.java <nl> - @GET @Timed <nl> 
new file <nl> ppp SecretControllerTest.java <nl> + package keywhiz.service.daos; <nl> + import com.google.common.collect.ImmutableList; <nl> + import java.time.OffsetDateTime; <nl> + import java.util.ArrayList; <nl> + import java.util.HashSet; <nl> + import java.util.List; <nl> + import java.util.Set; <nl> + import javax.inject.Inject; <nl> 
new file <nl> ppp AdaptReadWriteTest.java <nl> + package org.immutables.gson.adapters; <nl> + import com.google.common.collect.ImmutableSet; <nl> + import com.google.gson.Gson; <nl> + import com.google.gson.GsonBuilder; <nl> + import org.junit.Test; <nl> + import static org.immutables.check.Checkers.*; <nl> 
mmm Operators.java <nl> ppp Operators.java <nl> + public static final Operator STARTS_WITH =  new SimpleOperator("STARTS_WITH", Boolean.class); <nl> + public static final Operator ENDS_WITH =  new SimpleOperator("ENDS_WITH", Boolean.class); <nl> mmm MongoQueryVisitor.java <nl> ppp MongoQueryVisitor.java <nl> 
mmm Constant.java <nl> ppp Constant.java <nl> + import com.google.common.collect.ImmutableSet; <nl> - import java.util.List; <nl> + import java.util.Collection; <nl> + import java.util.Set; <nl> - public List<Object> values() { <nl> + public Collection<Object> values() { <nl> + if (value instanceof Set) { <nl> 
mmm package-info.java <nl> ppp package-info.java <nl> mmm PersonCriteriaTest.java <nl> ppp PersonCriteriaTest.java <nl> + } <nl> + @Test <nl> + public void nonScalar() { <nl> + Date dob = new Date((System.currentTimeMillis() / 1000) * 1000); <nl> + Person john = ImmutablePerson.builder().id("p1").name("John").age(30).aliases(Collections.singleton("a1")) <nl> 
new file <nl> ppp ReactorMapper4.java <nl> + package org.immutables.criteria.reactor; <nl> + import org.immutables.criteria.backend.Backend; <nl> + import org.immutables.criteria.expression.Query; <nl> + import org.immutables.criteria.repository.MapperFunction4; <nl> + import org.immutables.criteria.repository.Tuple; <nl> 
mmm OptionalMatcher.java <nl> ppp OptionalMatcher.java <nl> - return Matchers.extract(this).<R, S, C>factory().createRoot(expr); <nl> + return Matchers.extract(this).<R, S>factory().createRoot(expr); <nl> - return Matchers.extract(this).<R, S, C>factory().createRoot(expr); <nl> + return Matchers.extract(this).<R, S>factory().createRoot(expr); <nl> 
mmm ValueAttribute.java <nl> ppp ValueAttribute.java <nl> + private static final Splitter LINE_SPLITTER = Splitter.on('\n').omitEmptyStrings(); <nl> - private static final Splitter DOC_COMMENT_LINE_SPLITTER = Splitter.on('\n').omitEmptyStrings(); <nl> - this.docComment = ImmutableList.copyOf(DOC_COMMENT_LINE_SPLITTER.split(docComment)); <nl> 
deleted file <nl> mmm ExtraCollection.java <nl> - package org.immutables.fixture; <nl> - import java.util.Arrays; <nl> - import com.google.common.collect.Multimap; <nl> - import com.google.common.collect.SetMultimap; <nl> - import com.google.common.collect.ListMultimap; <nl> - import com.google.common.collect.Multiset; <nl> 
deleted file <nl> mmm Operation.java <nl> - package org.apache.dubbo.admin.model.domain; <nl> - import java.util.Arrays; <nl> - import java.util.Collections; <nl> - import java.util.List; <nl> - public class Operation extends Entity { <nl> - public static final String PROVIDER_TYPE = "Provider"; <nl> - public static final String CONSUMER_TYPE = "Consumer"; <nl> 
mmm MD5Util.java <nl> ppp MD5Util.java <nl> - import org.apache.dubbo.common.logger.Logger; <nl> - import org.apache.dubbo.common.logger.LoggerFactory; <nl> - private static final Logger logger = LoggerFactory.getLogger(MD5Util.class); <nl> - logger.error(e.getMessage(), e); <nl> + e.printStackTrace(); <nl> 
mmm RarModule.java <nl> ppp RarModule.java <nl> mmm EarPluginException.java <nl> ppp EarPluginException.java <nl> mmm EarMojo.java <nl> ppp EarMojo.java <nl> mmm EarModule.java <nl> ppp EarModule.java <nl> mmm EarModuleFactory.java <nl> ppp EarModuleFactory.java <nl> mmm EjbModule.java <nl> ppp EjbModule.java <nl> 
mmm MavenCliTest.java <nl> ppp MavenCliTest.java <nl> - import static org.mockito.Mockito.any; <nl> + import static org.mockito.ArgumentMatchers.any; <nl> + import java.util.Collections; <nl> + import org.codehaus.plexus.DefaultPlexusContainer; <nl> + import org.eclipse.sisu.plexus.PlexusBeanModule; <nl> + import com.google.inject.Binder; <nl> 
mmm CLIManager.java <nl> ppp CLIManager.java <nl> - String[] cleanArgs = null; <nl> + String[] cleanArgs; <nl> mmm LogbackConfiguration.java <nl> ppp LogbackConfiguration.java <nl> - ch.qos.logback.classic.Level value = ch.qos.logback.classic.Level.INFO; <nl> + ch.qos.logback.classic.Level value; <nl> mmm TransferListenerAdapter.java <nl> 
mmm DefaultArtifactInstaller.java <nl> ppp DefaultArtifactInstaller.java <nl> mmm RemoteSnapshotMetadataGenerator.java <nl> ppp RemoteSnapshotMetadataGenerator.java <nl> + import java.util.Date; <nl> + private final Date timestamp; <nl> - legacyFormat = ConfigUtils.getBoolean( session.getConfigProperties(), false, "maven.metadata.legacy" ); <nl> 
mmm ModelInterpolationException.java <nl> ppp ModelInterpolationException.java <nl> - } <nl> + } <nl> mmm MetadataGraph.java <nl> ppp MetadataGraph.java <nl> - * @param versionedVertices true if graph nodes should be versioned (different versions -> different nodes) <nl> + * @param versionedVertices true if graph nodes should be versioned (different versions -&gt; different nodes) <nl> 
mmm DynamicSqlSupportClassGenerator.java <nl> ppp DynamicSqlSupportClassGenerator.java <nl> 
new file <nl> ppp KotlinProperty.java <nl> + package org.mybatis.generator.api.dom.kotlin; <nl> + import java.util.Objects; <nl> + import java.util.Optional; <nl> + public class KotlinProperty extends KotlinNamedItem { <nl> + private String dataType; <nl> + private String initializationString; <nl> + private Type type; <nl> 
mmm MainActivity.java <nl> ppp MainActivity.java <nl> - package com.getcapacitor.app; <nl> + package io.avocadojs.android.helloapp; <nl> + import android.support.v7.app.AppCompatActivity; <nl> - import com.getcapacitor.BridgeActivity; <nl> - public class MainActivity extends BridgeActivity{ <nl> + public class MainActivity extends AppCompatActivity { <nl> 
mmm RingBurstRoundTripWithGroups.java <nl> ppp RingBurstRoundTripWithGroups.java <nl> - import org.jctools.queues.TypeQueueFactory; <nl> + import org.jctools.queues.QueueByTypeFactory; <nl> - if (BURST_SIZE > TypeQueueFactory.QUEUE_CAPACITY * CHAIN_LENGTH >> 1) { <nl> + if (BURST_SIZE > QueueByTypeFactory.QUEUE_CAPACITY * CHAIN_LENGTH >> 1) { <nl> 
deleted file <nl> mmm HashSetTest.java <nl> - package org.jctools.sets; <nl> - import static org.junit.Assert.assertEquals; <nl> - import static org.junit.Assert.assertFalse; <nl> - import static org.junit.Assert.assertTrue; <nl> - import java.util.Iterator; <nl> - import java.util.Set; <nl> - import org.jctools.sets.OpenHashSet; <nl> 
mmm ConcurrentQueueSpec.java <nl> ppp ConcurrentQueueSpec.java <nl> - public final Growth growth; <nl> - public ConcurrentQueueSpec(int producers, int consumers, int capacity, Growth growth, Ordering ordering, <nl> + public ConcurrentQueueSpec(int producers, int consumers, int capacity, Ordering ordering, <nl> 
new file <nl> ppp Contest.java <nl> + package com.fishercoder.solutions; <nl> + import java.util.ArrayList; <nl> + import java.util.Arrays; <nl> + import java.util.Collections; <nl> + import java.util.HashMap; <nl> + import java.util.HashSet; <nl> + import java.util.LinkedList; <nl> + import java.util.List; <nl> 
mmm FileDirectory.java <nl> ppp FileDirectory.java <nl> - package main.com.tencent.mm.directory; <nl> + package com.tencent.mm.directory; <nl> mmm LEDataInputStream.java <nl> ppp LEDataInputStream.java <nl> - package main.com.mindprod.ledatastream; <nl> + package com.mindprod.ledatastream; <nl> mmm PathAlreadyExists.java <nl> 
mmm Hdr.java <nl> ppp Hdr.java <nl> + import androidx.annotation.NonNull; <nl> 
mmm TapToFocus.java <nl> ppp TapToFocus.java <nl> - package com.flurgle.camerakit.annotations; <nl> + package com.flurgle.camerakit.types; <nl> mmm Camera1.java <nl> ppp Camera1.java <nl> + import android.support.annotation.NonNull; <nl> - public class Camera1 extends CameraViewImpl { <nl> + public class Camera1 extends CameraImpl { <nl> 
new file <nl> ppp FirstMviFragment.java <nl> + package com.hannesdorfmann.mosby3.mvi.integrationtest.backstack.first; <nl> + import android.os.Bundle; <nl> + import android.support.annotation.NonNull; <nl> + import android.support.annotation.Nullable; <nl> + import android.view.LayoutInflater; <nl> + import android.view.View; <nl> 
mmm BlueFavorite.java <nl> ppp BlueFavorite.java <nl> - import com.fasterxml.jackson.annotation.JsonProperty; <nl> - public class BlueFavorite { <nl> - private static final String PIPELINE = "pipeline"; <nl> - private final String pipeline; <nl> + public abstract class BlueFavorite extends Resource{ <nl> + private static final String ITEM = "item"; <nl> 
new file <nl> ppp PipelineStageUtil.java <nl> + package io.jenkins.blueocean.service.embedded.rest; <nl> + import hudson.model.Result; <nl> + import io.jenkins.blueocean.rest.model.BlueRun; <nl> + import org.jenkinsci.plugins.workflow.graph.FlowNode; <nl> + import org.jenkinsci.plugins.workflow.steps.FlowInterruptedException; <nl> 
mmm NavigationTest.java <nl> ppp NavigationTest.java <nl> + import org.openqa.selenium.By; <nl> - activityPage.getRunRowForBranch("feature@2").click(); <nl> + activityPage.getRunRowForBranch("feature@2").findElement(By.cssSelector("a")).click(); <nl> mmm AthModule.java <nl> ppp AthModule.java <nl> + import org.apache.log4j.Logger; <nl> 
mmm BlueBranch.java <nl> ppp BlueBranch.java <nl> - public static final String WEATHER="weather"; <nl> + public static final String WEATHER_SCORE ="weatherScore"; <nl> - @Exported(name = WEATHER) <nl> - @JsonProperty(WEATHER) <nl> - public abstract int getWeather(); <nl> + @Exported(name = WEATHER_SCORE) <nl> 
mmm BluePipelineNode.java <nl> ppp BluePipelineNode.java <nl> - import com.fasterxml.jackson.annotation.JsonProperty; <nl> - @JsonProperty(STATE) <nl> deleted file <nl> mmm BlueBranch.java <nl> - package io.jenkins.blueocean.rest.model; <nl> - import com.fasterxml.jackson.annotation.JsonProperty; <nl> - import org.kohsuke.stapler.export.Exported; <nl> 
mmm Resource.java <nl> ppp Resource.java <nl> + import io.jenkins.blueocean.rest.hal.Links; <nl> + import org.kohsuke.stapler.export.Exported; <nl> + @Exported(name = "_links") <nl> + public Links getLinks(){ <nl> + return new Links(this); <nl> + } <nl> mmm BlueOrganization.java <nl> ppp BlueOrganization.java <nl> 
mmm SbeTool.java <nl> ppp SbeTool.java <nl> + public static final String JAVA_BUFFER = "sbe.java.buffer"; <nl> - import uk.co.real_logic.sbe.codec.java.DirectBuffer; <nl> + import uk.co.real_logic.agrona.DirectBuffer; <nl> mmm CodecUtil.java <nl> ppp CodecUtil.java <nl> + import uk.co.real_logic.agrona.DirectBuffer; <nl> 
deleted file <nl> mmm RustUtil.java <nl> - package uk.co.real_logic.sbe.generation.rust; <nl> - import org.agrona.Verify; <nl> - import uk.co.real_logic.sbe.PrimitiveType; <nl> - import java.io.IOException; <nl> - import java.nio.charset.StandardCharsets; <nl> - import java.util.*; <nl> - import static java.lang.String.format; <nl> 
mmm JavaGeneratorTest.java <nl> ppp JavaGeneratorTest.java <nl> - import static uk.co.real_logic.sbe.generation.CodeGenerator.READ_ONLY_MESSAGE_HEADER_TYPE; <nl> - import static uk.co.real_logic.sbe.generation.java.JavaGenerator.MESSAGE_HEADER_TYPE; <nl> + import static uk.co.real_logic.sbe.generation.CodeGenerator.MESSAGE_HEADER_DECODER_TYPE; <nl> 
mmm ImageAssetManager.java <nl> ppp ImageAssetManager.java <nl> - @Nullable private ImageAssetDelegate assetDelegate; <nl> + @Nullable private ImageAssetDelegate delegate; <nl> - ImageAssetDelegate assetDelegate, Map<String, LottieImageAsset> imageAssets) { <nl> + ImageAssetDelegate delegate, Map<String, LottieImageAsset> imageAssets) { <nl> 
mmm NetworkCache.java <nl> ppp NetworkCache.java <nl> - import com.airbnb.lottie.L; <nl> + import com.airbnb.lottie.utils.Logger; <nl> - L.debug("Cache hit for " + url + " at " + cachedFile.getAbsolutePath()); <nl> + Logger.debug("Cache hit for " + url + " at " + cachedFile.getAbsolutePath()); <nl> - L.debug("Copying temp file to real file (" + newFile + ")"); <nl> 
new file <nl> ppp ConfigCenterTest.java <nl> + package com.shinemo.mpush.ps; <nl> + import org.junit.Test; <nl> + import com.shinemo.mpush.tools.config.ConfigCenter; <nl> + public class ConfigCenterTest { <nl> + 	 <nl> + 	@Test <nl> + 	public void test(){ <nl> + 		 <nl> + 		System.out.println(ConfigCenter.holder.zkIp()); <nl> 
mmm ZKClient.java <nl> ppp ZKClient.java <nl> - if (I == null) return new ZKClient(); <nl> - else return I; <nl> + return I == null ? new ZKClient() : I; <nl> - Logs.Console.error("init zk client waiting for connected..."); <nl> + Logs.Console.info("init zk client waiting for connected..."); <nl> - Logs.Console.error("init zk client success..."); <nl> 
mmm FastConnectHandler.java <nl> ppp FastConnectHandler.java <nl> + import org.slf4j.Logger; <nl> + import org.slf4j.LoggerFactory; <nl> + public static final Logger LOGGER = LoggerFactory.getLogger(FastConnectHandler.class); <nl> + LOGGER.warn("fast connect failure, session is expired, sessionId={}, deviceId={}", message.sessionId, message.deviceId); <nl> 
new file <nl> ppp SheetsConfigurationTest.java <nl> + package org.apache.camel.component.google.sheets; <nl> + import org.apache.camel.CamelContext; <nl> + import org.apache.camel.builder.RouteBuilder; <nl> + import org.apache.camel.component.google.sheets.internal.GoogleSheetsApiCollection; <nl> + import org.apache.camel.component.google.sheets.internal.SheetsSpreadsheetsApiMethod; <nl> 
mmm PropertyBindingSupport.java <nl> ppp PropertyBindingSupport.java <nl> - import org.apache.camel.Component; <nl> - import org.apache.camel.support.service.ServiceHelper; <nl> - public static class Builder { <nl> - private CamelContext camelContext; <nl> - private Object target; <nl> - private Map<String, Object> properties; <nl> 
mmm MultiPartFormWithCustomFilterTest.java <nl> ppp MultiPartFormWithCustomFilterTest.java <nl> - import org.apache.camel.impl.JndiRegistry; <nl> mmm HandlerTest.java <nl> ppp HandlerTest.java <nl> - import org.apache.camel.impl.JndiRegistry; <nl> mmm HttpGZipEncodingTest.java <nl> ppp HttpGZipEncodingTest.java <nl> 
mmm EndpointBuilderFactory.java <nl> ppp EndpointBuilderFactory.java <nl> - RestOpenApiEndpointBuilderFactory, <nl> deleted file <nl> mmm RestOpenApiComponent.java <nl> - package org.apache.camel.component.rest.openapi; <nl> - import java.net.URI; <nl> - import java.util.Map; <nl> - import org.apache.camel.CamelContext; <nl> 
mmm JGroupsComponentTest.java <nl> ppp JGroupsComponentTest.java <nl> - import org.apache.camel.test.junit4.CamelTestSupport; <nl> + import org.apache.camel.test.junit5.CamelTestSupport; <nl> - import org.junit.After; <nl> - import org.junit.Test; <nl> + import org.junit.jupiter.api.AfterEach; <nl> + import org.junit.jupiter.api.Test; <nl> 
mmm IgniteCacheContinuousQueryTest.java <nl> ppp IgniteCacheContinuousQueryTest.java <nl> - import org.junit.After; <nl> - import org.junit.Test; <nl> + import org.junit.jupiter.api.AfterEach; <nl> + import org.junit.jupiter.api.Test; <nl> + import org.junit.jupiter.api.TestInstance; <nl> + @TestInstance(TestInstance.Lifecycle.PER_CLASS) <nl> 
mmm SoapUnMarshalTest.java <nl> ppp SoapUnMarshalTest.java <nl> - import org.apache.camel.test.junit4.CamelTestSupport; <nl> - import org.junit.Test; <nl> + import org.apache.camel.test.junit5.CamelTestSupport; <nl> + import org.junit.jupiter.api.Test; <nl> + import static org.junit.jupiter.api.Assertions.assertEquals; <nl> 
mmm LoadRouteFromXmlWithPolicyTest.java <nl> ppp LoadRouteFromXmlWithPolicyTest.java <nl> - context.addRouteDefinitions(is); <nl> + RoutesDefinition routes = ModelHelper.loadRoutesDefinition(context, is); <nl> + context.addRouteDefinitions(routes.getRoutes()); <nl> mmm LoadRouteFromXmlTest.java <nl> ppp LoadRouteFromXmlTest.java <nl> 
mmm SolrServerMissingTest.java <nl> ppp SolrServerMissingTest.java <nl> - import org.junit.Test; <nl> + import org.junit.jupiter.api.Test; <nl> + import static org.junit.jupiter.api.Assertions.assertTrue; <nl> mmm InitSolrEndpointTest.java <nl> ppp InitSolrEndpointTest.java <nl> - import org.junit.Test; <nl> 
mmm OptimisticLockRetryPolicyDefinition.java <nl> ppp OptimisticLockRetryPolicyDefinition.java <nl> + @Metadata(javaType = "java.lang.Integer") <nl> - @Metadata(defaultValue = "50") <nl> + @Metadata(javaType = "java.lang.Long", defaultValue = "50") <nl> - @Metadata(defaultValue = "1000") <nl> + @Metadata(javaType = "java.lang.Long", defaultValue = "1000") <nl> 
mmm IgniteSetTest.java <nl> ppp IgniteSetTest.java <nl> + import org.assertj.core.api.Assertions; <nl> - import static com.google.common.truth.Truth.assert_; <nl> - assert_().that(result).isTrue(); <nl> - assert_().that(ignite().set(resourceUid, new CollectionConfiguration()).contains("hello")).isTrue(); <nl> 
mmm MySqlConnectorEmbeddedDebeziumConfiguration.java <nl> ppp MySqlConnectorEmbeddedDebeziumConfiguration.java <nl> - @UriParam(label = LABEL_NAME, defaultValue = "0.1s", javaType = "java.time.Duration") <nl> + @UriParam(label = LABEL_NAME, defaultValue = "100ms", javaType = "java.time.Duration") <nl> - @UriParam(label = LABEL_NAME, defaultValue = "0.5s", javaType = "java.time.Duration") <nl> 
mmm ManagedThreadPoolProfileTest.java <nl> ppp ManagedThreadPoolProfileTest.java <nl> - import org.apache.camel.util.concurrent.ThreadPoolRejectedPolicy; <nl> + import org.apache.camel.util.concurrent.ThreadPoolRejectedPolicy; <nl> mmm DefaultManagementLifecycleStrategy.java <nl> ppp DefaultManagementLifecycleStrategy.java <nl> 
mmm RedisSetTest.java <nl> ppp RedisSetTest.java <nl> - import org.junit.runner.RunWith; <nl> - import org.mockito.junit.MockitoJUnitRunner; <nl> mmm RedisKeyTest.java <nl> ppp RedisKeyTest.java <nl> - import org.junit.runner.RunWith; <nl> - import org.mockito.junit.MockitoJUnitRunner; <nl> mmm RedisConnectionTest.java <nl> 
mmm EndpointSchemaGeneratorMojo.java <nl> ppp EndpointSchemaGeneratorMojo.java <nl> + if (classesDirectory == null) { <nl> + classesDirectory = new File(project.getBuild().getOutputDirectory()); <nl> + } <nl> + if (sourcesOutputDir == null) { <nl> + sourcesOutputDir = new File(project.getBasedir(), "src/generated/java"); <nl> 
mmm SlackConsumer.java <nl> ppp SlackConsumer.java <nl> + import org.apache.camel.util.json.DeserializationException; <nl> + import org.apache.camel.util.json.JsonArray; <nl> + import org.apache.camel.util.json.JsonObject; <nl> + import org.apache.camel.util.json.Jsoner; <nl> - import org.json.simple.DeserializationException; <nl> 
new file <nl> ppp CoAPTestSupport.java <nl> + package org.apache.camel.coap; <nl> + import org.apache.camel.test.AvailablePortFinder; <nl> + import org.apache.camel.test.junit4.CamelTestSupport; <nl> + import org.apache.camel.util.FileUtil; <nl> + import org.eclipse.californium.core.CoapClient; <nl> + import org.eclipse.californium.core.network.config.NetworkConfig; <nl> 
mmm NettyConfiguration.java <nl> ppp NettyConfiguration.java <nl> + import java.net.URL; <nl> + import org.apache.camel.util.CamelContextHelper; <nl> + import org.apache.camel.util.StringHelper; <nl> - keyStoreFile = component.getAndRemoveOrResolveReferenceParameter(parameters, "keyStoreFile", File.class, keyStoreFile); <nl> 
mmm NatsConsumerTest.java <nl> ppp NatsConsumerTest.java <nl> - import org.junit.Test; <nl> + import org.junit.jupiter.api.Test; <nl> mmm NatsConsumerWithRedeliveryTest.java <nl> ppp NatsConsumerWithRedeliveryTest.java <nl> - import org.junit.Test; <nl> + import org.junit.jupiter.api.Test; <nl> mmm NatsProducerTest.java <nl> 
mmm BlobServiceAppendConsumerTest.java <nl> ppp BlobServiceAppendConsumerTest.java <nl> + import org.apache.camel.CamelContext; <nl> - import org.apache.camel.impl.JndiRegistry; <nl> - protected JndiRegistry createRegistry() throws Exception { <nl> - JndiRegistry registry = super.createRegistry(); <nl> - registry.bind("creds", <nl> 
mmm RestDefinitionEmitterTest.java <nl> ppp RestDefinitionEmitterTest.java <nl> - import org.junit.Test; <nl> + import org.junit.jupiter.api.Test; <nl> mmm ApiComponentGeneratorMojoTest.java <nl> ppp ApiComponentGeneratorMojoTest.java <nl> - import org.junit.Test; <nl> + import org.junit.jupiter.api.Test; <nl> 
mmm SkipIterator.java <nl> ppp SkipIterator.java <nl> - import java.util.Scanner; <nl> + import org.apache.camel.util.Scanner; <nl> - if (it instanceof Scanner) { <nl> - Scanner scanner = (Scanner) it; <nl> - scanner.close(); <nl> - IOException ioException = scanner.ioException(); <nl> - if (ioException != null) { <nl> 
mmm HL7MLLPNettyCodecStandAndEndBytesTest.java <nl> ppp HL7MLLPNettyCodecStandAndEndBytesTest.java <nl> - import org.apache.camel.impl.JndiRegistry; <nl> 
mmm ProducerConnectionRetryTest.java <nl> ppp ProducerConnectionRetryTest.java <nl> - @EndpointInject(uri = "direct:soroush") <nl> + 	 <nl> + @EndpointInject("direct:soroush") <nl> mmm ProducerAutoUploadFileIsFalse.java <nl> ppp ProducerAutoUploadFileIsFalse.java <nl> - @EndpointInject(uri = "direct:soroush") <nl> 
new file <nl> ppp RobotFrameworkComponentConfiguration.java <nl> + package org.apache.camel.component.robotframework.springboot; <nl> + import java.io.File; <nl> + import javax.annotation.Generated; <nl> + import org.apache.camel.spring.boot.ComponentConfigurationPropertiesCommon; <nl> + import org.springframework.boot.context.properties.ConfigurationProperties; <nl> 
new file <nl> ppp SplunkHECComponentConfigurer.java <nl> + package org.apache.camel.component.splunkhec; <nl> + import java.util.Map; <nl> + import org.apache.camel.CamelContext; <nl> + import org.apache.camel.spi.GeneratedPropertyConfigurer; <nl> + import org.apache.camel.spi.PropertyConfigurerGetter; <nl> 
mmm MiscTest.java <nl> ppp MiscTest.java <nl> - TestElf.setSlf4jTargetStream(Class.forName("com.zaxxer.hikari.pool.LeakTask"), ps); <nl> - TestElf.setConfigUnitTest(true); <nl> + TestElf.setSlf4jTargetStream(Class.forName("com.zaxxer.hikari.pool.ProxyLeakTask"), ps); <nl> + TestElf.setConfigUnitTest(true); <nl> 
mmm StubConnection.java <nl> ppp StubConnection.java <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> 
mmm JavassistProxyFactory.java <nl> ppp JavassistProxyFactory.java <nl> - private JavassistProxyFactory() throws Exception <nl> - { <nl> + private JavassistProxyFactory() throws Exception { <nl> - switch (method.getName()) { <nl> - case "getProxyConnection": <nl> + String methodName = method.getName(); <nl> 
mmm PlayerHelper.java <nl> ppp PlayerHelper.java <nl> - import org.schabi.newpipe.extractor.MediaFormat; <nl> + import org.schabi.newpipe.extractor.Subtitles; <nl> - import org.schabi.newpipe.extractor.stream.SubtitlesStream; <nl> + import org.schabi.newpipe.extractor.stream.SubtitlesFormat; <nl> - public static String mimeTypesOf(final MediaFormat format) { <nl> 
mmm YoutubeService.java <nl> ppp YoutubeService.java <nl> + import org.schabi.newpipe.extractor.ChannelExtractor; <nl> - import org.schabi.newpipe.extractor.StreamUrlIdHandler; <nl> + import org.schabi.newpipe.extractor.UrlIdHandler; <nl> - StreamUrlIdHandler urlIdHandler = new YoutubeStreamUrlIdHandler(); <nl> 
mmm PlaylistPlayQueue.java <nl> ppp PlaylistPlayQueue.java <nl> + public PlaylistPlayQueue(final PlaylistInfo info) { <nl> + this(info.getServiceId(), info.getUrl(), info.getNextStreamsUrl(), info.getRelatedStreams(), 0); <nl> + } <nl> mmm PermissionHelper.java <nl> ppp PermissionHelper.java <nl> - public static final int PERMISSION_SYSTEM_ALERT_WINDOW = 779; <nl> 
mmm BaseStateFragment.java <nl> ppp BaseStateFragment.java <nl> - onReCaptchaException(); <nl> + onReCaptchaException((ReCaptchaException) exception); <nl> - public void onReCaptchaException() { <nl> + public void onReCaptchaException(ReCaptchaException exception) { <nl> - startActivityForResult(new Intent(activity, ReCaptchaActivity.class), ReCaptchaActivity.RECAPTCHA_REQUEST); <nl> 
mmm FocusAwareSeekBar.java <nl> ppp FocusAwareSeekBar.java <nl> 
mmm PopupVideoPlayer.java <nl> ppp PopupVideoPlayer.java <nl> - import android.content.BroadcastReceiver; <nl> - import org.schabi.newpipe.ActivityCommunicator; <nl> - import org.schabi.newpipe.extractor.stream_info.VideoStream; <nl> - private static final boolean DEBUG = AbstractPlayer.DEBUG; <nl> + private static final boolean DEBUG = BasePlayer.DEBUG; <nl> 
mmm PopupVideoPlayer.java <nl> ppp PopupVideoPlayer.java <nl> + private static final int SHUTDOWN_FLING_VELOCITY = 10000; <nl> - savePositionAndSize(); <nl> - private int onDownPopupWidth = 0; <nl> - private boolean isResizingRightSide; <nl> - onDownPopupWidth = windowLayoutParams.width; <nl> - return false; <nl> 
mmm MainVideoPlayer.java <nl> ppp MainVideoPlayer.java <nl> - muteButton.setColorFilter(ContextCompat.getColor(getApplicationContext(), isMuted ? R.color.white : R.color.gray)); <nl> + muteButton.setImageDrawable(AppCompatResources.getDrawable(getApplicationContext(), <nl> + isMuted ? R.drawable.ic_volume_off_white_72dp : R.drawable.ic_volume_up_white_72dp)); <nl> 
mmm BasePlayer.java <nl> ppp BasePlayer.java <nl> - return Observable.interval(PROGRESS_LOOP_INTERVAL_MILLIS, TimeUnit.MILLISECONDS, AndroidSchedulers.mainThread()) <nl> + return Observable.interval(PROGRESS_LOOP_INTERVAL_MILLIS, TimeUnit.MILLISECONDS) <nl> mmm CommentsMiniInfoItemHolder.java <nl> ppp CommentsMiniInfoItemHolder.java <nl> 
mmm ExtractorHelper.java <nl> ppp ExtractorHelper.java <nl> + import org.schabi.newpipe.extractor.kiosk.KioskInfo; <nl> + public static Single<KioskInfo> getKioskInfo(final int serviceId, final String url, final String contentCountry, boolean forceLoad) { <nl> + return checkCache(forceLoad, serviceId, url, Single.fromCallable(new Callable<KioskInfo>() { <nl> 
mmm VideoPlayerImpl.java <nl> ppp VideoPlayerImpl.java <nl> - import android.view.DisplayCutout; <nl> - import androidx.preference.PreferenceManager; <nl> + import androidx.core.view.DisplayCutoutCompat; <nl> + import androidx.core.view.ViewCompat; <nl> + import androidx.preference.PreferenceManager; <nl> - import org.schabi.newpipe.util.DeviceUtils; <nl> 
mmm DownloadManager.java <nl> ppp DownloadManager.java <nl> - static final String TAG_AUDIO = "audio"; <nl> - static final String TAG_VIDEO = "video"; <nl> + public static final String TAG_AUDIO = "audio"; <nl> + public static final String TAG_VIDEO = "video"; <nl> mmm RouterActivity.java <nl> ppp RouterActivity.java <nl> 
mmm BaseListInfoFragment.java <nl> ppp BaseListInfoFragment.java <nl> + infoListAdapter.clearStreamItemList(); <nl> mmm TabsJsonHelperTest.java <nl> ppp TabsJsonHelperTest.java <nl> - import org.junit.Ignore; <nl> - @Ignore <nl> + final List<Tab> defaultTabs = TabsJsonHelper.getDefaultTabs(); <nl> - assertTrue(!items.isEmpty()); <nl> 
mmm LocalStatisticStreamItemHolder.java <nl> ppp LocalStatisticStreamItemHolder.java <nl> - import java.text.DateFormat; <nl> + import java.time.format.DateTimeFormatter; <nl> - final DateFormat dateFormat) { <nl> + final DateTimeFormatter dateTimeFormatter) { <nl> - final String uploadDate = dateFormat.format(entry.getLatestAccessDate()); <nl> 
mmm YoutubeSearchEngine.java <nl> ppp YoutubeSearchEngine.java <nl> - import org.schabi.newpipe.Downloader; <nl> - import org.schabi.newpipe.SearchEngine; <nl> - import org.schabi.newpipe.VideoInfoItem; <nl> - import java.util.regex.Matcher; <nl> - import java.util.regex.Pattern; <nl> + import org.schabi.newpipe.Downloader; <nl> 
mmm VideoItemDetailFragment.java <nl> ppp VideoItemDetailFragment.java <nl> - import java.util.Calendar; <nl> + import java.text.ParseException; <nl> + import java.text.SimpleDateFormat; <nl> + import java.util.ArrayList; <nl> + import org.schabi.newpipe.services.Extractor; <nl> + import org.schabi.newpipe.services.ServiceList; <nl> 
mmm ActionBarHandler.java <nl> ppp ActionBarHandler.java <nl> + private int startPosition; <nl> - activity.startActivity(intent); <nl> + intent.putExtra(PlayVideoActivity.START_POSITION, startPosition); <nl> + public void setStartPosition(int startPositionSeconds) <nl> + { <nl> + this.startPosition = startPositionSeconds; <nl> 
mmm RouterActivity.java <nl> ppp RouterActivity.java <nl> - @State <nl> - protected int currentServiceId = -1; <nl> + @State protected int currentServiceId = -1; <nl> - @State <nl> - protected LinkType currentLinkType; <nl> - @State <nl> - protected int selectedRadioPosition = -1; <nl> + @State protected LinkType currentLinkType; <nl> 
new file <nl> ppp ExtractorWorker.java <nl> + package org.schabi.newpipe.workers; <nl> + import android.app.Activity; <nl> + import android.content.Context; <nl> + import android.os.Handler; <nl> + import android.util.Log; <nl> + import android.view.View; <nl> + import org.schabi.newpipe.extractor.NewPipe; <nl> 
mmm VideoItemDetailFragment.java <nl> ppp VideoItemDetailFragment.java <nl> - import android.annotation.SuppressLint; <nl> - import android.content.SharedPreferences; <nl> - import java.text.DateFormat; <nl> - import java.text.NumberFormat; <nl> - import java.text.ParseException; <nl> - import java.text.SimpleDateFormat; <nl> 
mmm ContentSettingsFragment.java <nl> ppp ContentSettingsFragment.java <nl> + import android.support.v7.preference.ListPreference; <nl> + import android.support.v7.preference.Preference; <nl> + final ListPreference mainPageContentPref =  (ListPreference) findPreference(getString(R.string.main_page_content_key)); <nl> 
mmm InfoItemBuilder.java <nl> ppp InfoItemBuilder.java <nl> - if(onStreamInfoItemSelectedListener != null) { <nl> + if(onChannelInfoItemSelectedListener != null) { <nl> mmm MainActivity.java <nl> ppp MainActivity.java <nl> + import android.support.design.widget.TabLayout; <nl> + import android.support.v4.app.FragmentManager; <nl> 
mmm MissionsFragment.java <nl> ppp MissionsFragment.java <nl> - mBinder.addMissionEventListener(mAdapter.getMessenger()); <nl> + mBinder.addMissionEventListener(mAdapter); <nl> - mBinder.removeMissionEventListener(mAdapter.getMessenger()); <nl> + mBinder.removeMissionEventListener(mAdapter); <nl> - mPause.setVisible(true); <nl> 
mmm DownloadManagerImpl.java <nl> ppp DownloadManagerImpl.java <nl> - static void sortByTimestamp(List<DownloadMission> missions) { <nl> - Collections.sort(missions, new Comparator<DownloadMission>() { <nl> - @Override <nl> - public int compare(DownloadMission o1, DownloadMission o2) { <nl> - return Long.valueOf(o1.timestamp).compareTo(o2.timestamp); <nl> 
mmm ChooseTabsFragment.java <nl> ppp ChooseTabsFragment.java <nl> - import androidx.appcompat.app.ActionBar; <nl> - import androidx.appcompat.app.AppCompatActivity; <nl> - updateTitle(); <nl> + ThemeHelper.setTitleToAppCompatActivity(getActivity(), <nl> + getString(R.string.main_page_content)); <nl> - private void updateTitle() { <nl> 
mmm DashVodRendererBuilder.java <nl> ppp DashVodRendererBuilder.java <nl> - import com.google.android.exoplayer.dash.DashMp4ChunkSource; <nl> + import com.google.android.exoplayer.dash.DashChunkSource; <nl> - ChunkSource videoChunkSource = new DashMp4ChunkSource(videoDataSource, <nl> + ChunkSource videoChunkSource = new DashChunkSource(videoDataSource, <nl> 
mmm ColorParser.java <nl> ppp ColorParser.java <nl> + @SuppressWarnings("nullness:argument.type.incompatible") <nl> mmm IcyDecoder.java <nl> ppp IcyDecoder.java <nl> + @SuppressWarnings("nullness:switching.nullable") <nl> mmm SsaStyle.java <nl> ppp SsaStyle.java <nl> + @SuppressWarnings("nullness:argument.type.incompatible") <nl> 
mmm EventLogger.java <nl> ppp EventLogger.java <nl> - public void onVideoSizeChanged(int width, int height, float pixelWidthHeightRatio) { <nl> - Log.d(TAG, "videoSizeChanged [" + width + ", " + height + ", " + pixelWidthHeightRatio + "]"); <nl> + public void onVideoSizeChanged(int width, int height, int unappliedRotationDegrees, <nl> 
mmm LoopingMediaSourceTest.java <nl> ppp LoopingMediaSourceTest.java <nl> - import org.robolectric.annotation.LooperMode; <nl> - @LooperMode(LooperMode.Mode.PAUSED) <nl> mmm FakeClockTest.java <nl> ppp FakeClockTest.java <nl> - import org.robolectric.annotation.LooperMode; <nl> - @LooperMode(LooperMode.Mode.PAUSED) <nl> 
mmm Mp3ExtractorTest.java <nl> ppp Mp3ExtractorTest.java <nl> + import com.google.android.exoplayer2.testutil.ExtractorAsserts.AssertionConfig; <nl> - public ExtractorAsserts.Config assertionConfig; <nl> + public ExtractorAsserts.SimulationConfig simulationConfig; <nl> - Mp3Extractor::new, "mp3/bear-vbr-xing-header.mp3", assertionConfig); <nl> 
mmm DefaultHttpDataSource.java <nl> ppp DefaultHttpDataSource.java <nl> - protected final @Nullable HttpURLConnection getConnection() { <nl> + @Nullable <nl> + protected final HttpURLConnection getConnection() { <nl> - byte[] httpBody = dataSpec.httpBody; <nl> + @Nullable byte[] httpBody = dataSpec.httpBody; <nl> 
mmm OpusDecoderException.java <nl> ppp OpusDecoderException.java <nl> + super(message, cause); <nl> + } <nl> mmm FfmpegAudioRenderer.java <nl> ppp FfmpegAudioRenderer.java <nl> + import com.google.android.exoplayer2.drm.ExoMediaCrypto; <nl> - super(message); <nl> - } <nl> + super(message); <nl> + } <nl> + super(message, cause); <nl> 
mmm SingleSampleMediaChunk.java <nl> ppp SingleSampleMediaChunk.java <nl> - * @param isLastChunk True if this is the last chunk in the media. False otherwise. <nl> - Format format, long startTimeUs, long endTimeUs, int chunkIndex, boolean isLastChunk, <nl> - MediaFormat sampleFormat, DrmInitData sampleDrmInitData, int parentId) { <nl> 
mmm ApicFrame.java <nl> ppp ApicFrame.java <nl> - public final String description; <nl> + public final @Nullable String description; <nl> - public ApicFrame(String mimeType, String description, int pictureType, byte[] pictureData) { <nl> + public ApicFrame( <nl> + String mimeType, @Nullable String description, int pictureType, byte[] pictureData) { <nl> 
new file <nl> ppp LibopusAudioTrackRenderer.java <nl> + package com.google.android.exoplayer.ext.opus; <nl> + import com.google.android.exoplayer.ExoPlaybackException; <nl> + import com.google.android.exoplayer.ExoPlayer; <nl> + import com.google.android.exoplayer.MediaFormat; <nl> + import com.google.android.exoplayer.MediaFormatHolder; <nl> 
mmm AtomParsers.java <nl> ppp AtomParsers.java <nl> - if (trackType != Track.TYPE_AUDIO && trackType != Track.TYPE_VIDEO <nl> - && trackType != Track.TYPE_TEXT && trackType != Track.TYPE_SUBTITLE) { <nl> + if (trackType != Track.TYPE_soun && trackType != Track.TYPE_vide && trackType != Track.TYPE_text <nl> 
new file <nl> ppp VideoPlayer.java <nl> + package com.google.android.exoplayer.demo.webm; <nl> + import com.google.android.exoplayer.ExoPlaybackException; <nl> + import com.google.android.exoplayer.ExoPlayer; <nl> + import com.google.android.exoplayer.TrackRenderer; <nl> + import com.google.android.exoplayer.VideoSurfaceView; <nl> 
new file <nl> ppp MetadataParser.java <nl> + package com.google.android.exoplayer.metadata; <nl> + import java.io.IOException; <nl> + public interface MetadataParser<T> { <nl> + public boolean canParse(String mimeType); <nl> + public T parse(byte[] data, int size) throws IOException; <nl> + } <nl> new file <nl> 
mmm SingleSampleMediaPeriod.java <nl> ppp SingleSampleMediaPeriod.java <nl> - dataSpec.uri, <nl> + loadable.dataSource.getLastResponseHeaders(), <nl> + loadable.dataSource.getLastResponseHeaders(), <nl> + loadable.dataSource.getLastResponseHeaders(), <nl> mmm AdsMediaSource.java <nl> ppp AdsMediaSource.java <nl> 
mmm MetadataRendererTest.java <nl> ppp MetadataRendererTest.java <nl> + import com.google.common.collect.ImmutableList; <nl> - EMSG_FORMAT, <nl> - new FakeSampleStreamItem(input), <nl> - FakeSampleStreamItem.END_OF_STREAM_ITEM), <nl> + EMSG_FORMAT, <nl> + ImmutableList.of( <nl> + FakeSampleStreamItem.END_OF_STREAM_ITEM)), <nl> 
mmm DrmInitData.java <nl> ppp DrmInitData.java <nl> + import android.support.annotation.Nullable; <nl> + public DrmInitData copyWithSchemeType(@Nullable String schemeType) { <nl> + boolean isCopyRequired = false; <nl> + for (SchemeData schemeData : schemeDatas) { <nl> + if (!Util.areEqual(schemeData.type, schemeType)) { <nl> 
mmm ExoPlayerImplInternal.java <nl> ppp ExoPlayerImplInternal.java <nl> - eventHandler.obtainMessage(MSG_SEEK_ACK, 1, 0, playbackInfo).sendToTarget(); <nl> + eventHandler.obtainMessage(MSG_SEEK_ACK, playbackInfo).sendToTarget(); <nl> - boolean seekPositionAdjusted = seekPosition.windowPositionUs == C.TIME_UNSET; <nl> 
new file <nl> ppp TsExtractor.java <nl> + package com.google.android.exoplayer.parser.ts; <nl> + import com.google.android.exoplayer.MediaFormat; <nl> + import com.google.android.exoplayer.SampleHolder; <nl> + import com.google.android.exoplayer.upstream.NonBlockingInputStream; <nl> + import com.google.android.exoplayer.util.Assertions; <nl> 
new file <nl> ppp ParsableBitArrayTest.java <nl> + package com.google.android.exoplayer2.util; <nl> + import static com.google.common.truth.Truth.assertThat; <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> + import org.robolectric.RobolectricTestRunner; <nl> 
mmm PlaybackStats.java <nl> ppp PlaybackStats.java <nl> - @PlaybackState <nl> - public int getPlaybackStateAtTime(long realtimeMs) { <nl> + public @PlaybackState int getPlaybackStateAtTime(long realtimeMs) { <nl> mmm ProjectionRenderer.java <nl> ppp ProjectionRenderer.java <nl> + import androidx.annotation.Nullable; <nl> 
new file <nl> ppp TsChunk.java <nl> + package com.google.android.exoplayer.hls; <nl> + import com.google.android.exoplayer.upstream.DataSource; <nl> + import com.google.android.exoplayer.upstream.DataSpec; <nl> + public final class TsChunk extends HlsChunk { <nl> + public final int variantIndex; <nl> + public final long startTimeUs; <nl> 
mmm AudioTrack.java <nl> ppp AudioTrack.java <nl> + import android.media.AudioAttributes; <nl> + import java.nio.ByteOrder; <nl> - public static final int SESSION_ID_NOT_SET = 0; <nl> + private boolean useHwAvSync; <nl> + private ByteBuffer avSyncHeader; <nl> + private int bytesUntilNextAvSync; <nl> + if (Util.SDK_INT <= 23 && "foster".equals(Util.DEVICE) && "NVIDIA".equals(Util.MANUFACTURER)) { <nl> 
new file <nl> ppp TxxxMetadata.java <nl> + package com.google.android.exoplayer.metadata; <nl> + public class TxxxMetadata { <nl> + public static final String TYPE = "TXXX"; <nl> + public final String description; <nl> + public final String value; <nl> + public TxxxMetadata(String description, String value) { <nl> 
mmm MediaCodecAudioTrackRenderer.java <nl> ppp MediaCodecAudioTrackRenderer.java <nl> + import com.google.android.exoplayer.util.Util; <nl> - protected boolean handlesTrack(MediaCodecSelector mediaCodecSelector, MediaFormat mediaFormat) <nl> + protected int supportsFormat(MediaCodecSelector mediaCodecSelector, MediaFormat mediaFormat) <nl> 
deleted file <nl> mmm TsChunk.java <nl> - package com.google.android.exoplayer.hls; <nl> - import com.google.android.exoplayer.C; <nl> - import com.google.android.exoplayer.upstream.DataSource; <nl> - import com.google.android.exoplayer.upstream.DataSpec; <nl> - import java.io.IOException; <nl> - public final class TsChunk extends HlsChunk { <nl> 
mmm ExoPlayerTest.java <nl> ppp ExoPlayerTest.java <nl> + @Override <nl> + public PlaybackParameters setPlaybackParameters(PlaybackParameters playbackParameters) { <nl> + return PlaybackParameters.DEFAULT; <nl> + } <nl> + @Override <nl> + public PlaybackParameters getPlaybackParameters() { <nl> + return PlaybackParameters.DEFAULT; <nl> 
new file <nl> ppp TestUtil.java <nl> + package com.google.android.exoplayer.testutil; <nl> + import com.google.android.exoplayer.C; <nl> + import com.google.android.exoplayer.extractor.DefaultExtractorInput; <nl> + import com.google.android.exoplayer.extractor.Extractor; <nl> + import com.google.android.exoplayer.extractor.ExtractorInput; <nl> 
new file <nl> ppp LibvpxVideoTrackRenderer.java <nl> + package com.google.android.exoplayer.ext.vp9; <nl> + import com.google.android.exoplayer.ExoPlaybackException; <nl> + import com.google.android.exoplayer.ExoPlayer; <nl> + import com.google.android.exoplayer.MediaFormat; <nl> + import com.google.android.exoplayer.MediaFormatHolder; <nl> 
mmm ForwardingTimeline.java <nl> ppp ForwardingTimeline.java <nl> + @Override <nl> + public Object getUidOfPeriod(int periodIndex) { <nl> + return timeline.getUidOfPeriod(periodIndex); <nl> + } <nl> mmm SinglePeriodTimeline.java <nl> ppp SinglePeriodTimeline.java <nl> + @Override <nl> + public Object getUidOfPeriod(int periodIndex) { <nl> 
mmm MediaCodecAudioRenderer.java <nl> ppp MediaCodecAudioRenderer.java <nl> + import com.google.android.exoplayer2.drm.FrameworkMediaCrypto; <nl> - DrmSessionManager drmSessionManager, boolean playClearSamplesWithoutKeys, <nl> - Handler eventHandler, AudioRendererEventListener eventListener) { <nl> + DrmSessionManager<FrameworkMediaCrypto> drmSessionManager, <nl> 
new file <nl> ppp HlsMasterPlaylist.java <nl> + package com.google.android.exoplayer.hls; <nl> + import android.net.Uri; <nl> + import java.util.List; <nl> + public final class HlsMasterPlaylist { <nl> + public final Uri baseUri; <nl> + public final List<Variant> variants; <nl> + public HlsMasterPlaylist(Uri baseUri, List<Variant> variants) { <nl> 
new file <nl> ppp DashRendererBuilder.java <nl> + package com.google.android.exoplayer.demo.webm; <nl> + import com.google.android.exoplayer.DefaultLoadControl; <nl> + import com.google.android.exoplayer.LoadControl; <nl> + import com.google.android.exoplayer.MediaCodecAudioTrackRenderer; <nl> + import com.google.android.exoplayer.SampleSource; <nl> 
mmm DefaultDownloadIndex.java <nl> ppp DefaultDownloadIndex.java <nl> - import com.google.android.exoplayer2.upstream.cache.CacheUtil.CachingCounters; <nl> - values.put(COLUMN_DOWNLOAD_PERCENTAGE, download.getDownloadPercentage()); <nl> - values.put(COLUMN_DOWNLOADED_BYTES, download.getDownloadedBytes()); <nl> 
mmm ExoPlayerImpl.java <nl> ppp ExoPlayerImpl.java <nl> - if (msg.arg1 != 0) { <nl> - for (Player.EventListener listener : listeners) { <nl> - listener.onPositionDiscontinuity(DISCONTINUITY_REASON_SEEK); <nl> + for (Player.EventListener listener : listeners) { <nl> + if (msg.arg1 != 0) { <nl> + listener.onPositionDiscontinuity(DISCONTINUITY_REASON_INTERNAL); <nl> 
new file <nl> ppp package-info.java <nl> + @NonNullApi <nl> + package com.google.android.exoplayer2.text.ttml; <nl> + import com.google.android.exoplayer2.util.NonNullApi; <nl> mmm WebvttCue.java <nl> ppp WebvttCue.java <nl> mmm WebvttCueParser.java <nl> ppp WebvttCueParser.java <nl> - String firstLine = webvttData.readLine(); <nl> 
mmm TeeAudioProcessor.java <nl> ppp TeeAudioProcessor.java <nl> - public void configure(int sampleRateHz, int channelCount, @C.PcmEncoding int encoding) { <nl> - setInputFormat(sampleRateHz, channelCount, encoding); <nl> + public AudioFormat onConfigure(AudioFormat inputAudioFormat) { <nl> + return inputAudioFormat; <nl> 
mmm MediaCodecTrackRenderer.java <nl> ppp MediaCodecTrackRenderer.java <nl> + private static final int REINIT_STATE_NONE = 0; <nl> + private static final int REINIT_STATE_SIGNAL_END_OF_STREAM = 1; <nl> + private static final int REINIT_STATE_WAIT_END_OF_STREAM = 2; <nl> + private int codecReinitState; <nl> 
mmm PlayerNotificationManager.java <nl> ppp PlayerNotificationManager.java <nl> + @SuppressWarnings("deprecation") <nl> + @SuppressWarnings("deprecation") <nl> mmm OkHttpDataSource.java <nl> ppp OkHttpDataSource.java <nl> + @SuppressWarnings("deprecation") <nl> mmm AudioSink.java <nl> ppp AudioSink.java <nl> 
mmm MediaCodecAudioTrackRenderer.java <nl> ppp MediaCodecAudioTrackRenderer.java <nl> + import com.google.android.exoplayer.audio.AudioTrack; <nl> - import com.google.android.exoplayer.util.Util; <nl> - import android.media.AudioFormat; <nl> - import android.media.AudioManager; <nl> - import android.media.AudioTimestamp; <nl> 
mmm Eia608TrackRenderer.java <nl> ppp Eia608TrackRenderer.java <nl> - import com.google.android.exoplayer.SampleSourceTrackRenderer; <nl> - public final class Eia608TrackRenderer extends SampleSourceTrackRenderer implements Callback { <nl> + public final class Eia608TrackRenderer extends TrackRenderer implements Callback { <nl> 
mmm VpxPlaybackTest.java <nl> ppp VpxPlaybackTest.java <nl> + import com.google.android.exoplayer.ExoPlayerFactory; <nl> - private static class TestPlaybackThread extends Thread implements ExoPlayer.Listener { <nl> + private static class TestPlaybackThread extends Thread implements ExoPlayer.EventListener { <nl> 
mmm EditBitFieldAction.java <nl> ppp EditBitFieldAction.java <nl> + import java.awt.Window; <nl> + import javax.swing.SwingUtilities; <nl> - 		DockingWindowManager.showDialog(c, dlg); <nl> + 		Window w = SwingUtilities.windowForComponent(c); <nl> + 		DockingWindowManager.showDialog(w, dlg, c); <nl> mmm DiffApply2Test.java <nl> 
mmm ApplyEnums.java <nl> ppp ApplyEnums.java <nl> - 			log.appendMsg(e.getMessage()); <nl> + 			log.appendMsg("PDB", "Enum " + enumdt.getName() + ": " + e.getMessage()); <nl> mmm ApplyDataTypes.java <nl> ppp ApplyDataTypes.java <nl> - 	private List<CompositeDefinition> getCompositeDefinitionsInpostDependencyOrder( <nl> 
mmm DockingErrorDisplayTest.java <nl> ppp DockingErrorDisplayTest.java <nl> - 		doDisplay(display, logger, exception); <nl> + 		reportException(display, logger, exception); <nl> - 		doDisplay(display, logger, exception); <nl> + 		reportException(display, logger, exception); <nl> + 	@Test <nl> + 	public void testDefaultErrorDisplay_MultipleAsynchronousExceptions() { <nl> 
mmm SleighLanguage.java <nl> ppp SleighLanguage.java <nl> - 						else { <nl> + 						if (currentManual == null) { <nl> mmm DecompilerClangTest.java <nl> ppp DecompilerClangTest.java <nl> - import static org.junit.Assert.*; <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.junit.Assert.fail; <nl> 
mmm GhidraScriptComponentProvider.java <nl> ppp GhidraScriptComponentProvider.java <nl> - import javax.swing.table.*; <nl> + import javax.swing.table.TableColumn; <nl> + import javax.swing.table.TableColumnModel; <nl> - 	private BundleStatusProvider bundleStatusProvider; <nl> + 	private BundleStatusComponentProvider bundleStatusComponentProvider; <nl> 
mmm RegisterPlugin.java <nl> ppp RegisterPlugin.java <nl> - import java.awt.Component; <nl> - 		tool.showDialog(dialog, (Component) null); <nl> + 		tool.showDialog(dialog); <nl> - 		tool.showDialog(dialog, (Component) null); <nl> + 		tool.showDialog(dialog); <nl> mmm PluginTool.java <nl> ppp PluginTool.java <nl> 
deleted file <nl> mmm AbstractCInitAnalyzer.java <nl> - package ghidra.app.plugin.core.analysis; <nl> - import ghidra.app.services.*; <nl> - import ghidra.app.util.importer.MessageLog; <nl> - import ghidra.framework.store.LockException; <nl> - import ghidra.program.model.address.*; <nl> - import ghidra.program.model.lang.Processor; <nl> 
mmm FunctionComparisonService.java <nl> ppp FunctionComparisonService.java <nl> + * <nl> + * <p>Concurrent usage: All work performed by this service will be done on the Swing thread. <nl> + * Further, all calls that do not return a value will be run immediately if the caller is on <nl> + * the Swing thread; otherwise, the work will be done on the Swing thread at a later time. <nl> 
mmm ReflectionUtilitiesTest.java <nl> ppp ReflectionUtilitiesTest.java <nl> + import java.util.ArrayList; <nl> + 	@Test(expected = NullPointerException.class) <nl> + 	public void testRuntimeTypeDiscovery_Null() { <nl> + 		ReflectionUtilities.getTypeArguments(List.class, null); <nl> + 	} <nl> + 	@Test <nl> + 	public void testRumtimeTypeDiscovery_AnonymousClass() { <nl> 
mmm MzLoader.java <nl> ppp MzLoader.java <nl> - 			if (!blocks[i].isInitialized()) { <nl> + 			MemoryBlock block = blocks[i]; <nl> + 			if (!block.isInitialized()) { <nl> - 			for (int mIndex = 15; mIndex >= 0; mIndex--) { <nl> + 			int mIndex = 15; <nl> + 			if (block.getSize() <= 16) { <nl> + 				mIndex = (int) block.getSize() - 2; <nl> 
new file <nl> ppp StoredAnalyzerTimes.java <nl> + package ghidra.app.plugin.core.analysis; <nl> + import java.util.*; <nl> + import ghidra.framework.options.*; <nl> + import ghidra.program.model.listing.Program; <nl> + public class StoredAnalyzerTimes implements CustomOption { <nl> + 	public static final String OPTIONS_LIST = Program.PROGRAM_INFO + ".Analysis Times"; <nl> 
mmm MatchFunctions.java <nl> ppp MatchFunctions.java <nl> - package ghidra.app.plugin.prototype.match; <nl> + package ghidra.app.plugin.match; <nl> mmm ExactInstructionsFunctionHasher.java <nl> ppp ExactInstructionsFunctionHasher.java <nl> - package ghidra.app.plugin.prototype.match; <nl> + package ghidra.app.plugin.match; <nl> 
mmm CodeBrowserOptionsTest.java <nl> ppp CodeBrowserOptionsTest.java <nl> - import static org.junit.Assert.assertEquals; <nl> - import static org.junit.Assert.assertTrue; <nl> + import static org.junit.Assert.*; <nl> + import java.util.stream.Collectors; <nl> + import docking.help.Help; <nl> + import docking.help.HelpService; <nl> 
mmm DefaultGraphDisplayComponentProvider.java <nl> ppp DefaultGraphDisplayComponentProvider.java <nl> - 		setSubTitle(Integer.toString(display.getId())); <nl> mmm TestGraphDisplay.java <nl> ppp TestGraphDisplay.java <nl> - 	private String graphDescription; <nl> + 	private String title; <nl> - 	public void setGraph(AttributedGraph graph, String description, boolean append, <nl> 
mmm DataTypeArchiveGTree.java <nl> ppp DataTypeArchiveGTree.java <nl> + 			label.setBackground(tree.getBackground()); <nl> mmm GListCellRenderer.java <nl> ppp GListCellRenderer.java <nl> - 	public Dimension computePlainTextListCellDimensions(JList<? extends E> list, List<E> items, <nl> + 	public Dimension computePlainTextListCellDimensions(JList<? extends E> list, <nl> 
mmm AddMemoryBlockCmdTest.java <nl> ppp AddMemoryBlockCmdTest.java <nl> - import ghidra.program.database.mem.MemoryBlockSourceInfo; <nl> - import ghidra.program.model.mem.MemoryBlock; <nl> - import ghidra.program.model.mem.MemoryBlockType; <nl> + import ghidra.program.model.mem.*; <nl> + package ghidra.program.model.mem; <nl> 
mmm MIPS_ElfExtension.java <nl> ppp MIPS_ElfExtension.java <nl> - import ghidra.program.model.address.Address; <nl> - import ghidra.program.model.address.AddressOutOfBoundsException; <nl> + import ghidra.program.model.address.*; <nl> + 	public static final String MIPS_GP_GNU_LOCAL_SYMBOL_NAME = "__gnu_local_gp"; <nl> 
mmm CppExporter.java <nl> ppp CppExporter.java <nl> - 			else { <nl> - 			} <nl> mmm ClangToken.java <nl> ppp ClangToken.java <nl> - 		if (lineparent != null) { <nl> - 			return lineparent.getLineNumber() + ": " + text; <nl> - 		} <nl> mmm FunctionComparisonPlugin.java <nl> ppp FunctionComparisonPlugin.java <nl> 
deleted file <nl> mmm LocalActivity.java <nl> - package com.github.rubensousa.previewseekbar.sample; <nl> - import android.os.Bundle; <nl> - import android.support.annotation.Nullable; <nl> - import android.support.v7.app.AppCompatActivity; <nl> - public class LocalActivity extends AppCompatActivity { <nl> 
new file <nl> ppp PreviewFrameLayout.java <nl> + package com.github.rubensousa.previewseekbar; <nl> + import android.annotation.TargetApi; <nl> + import android.content.Context; <nl> + import android.os.Build; <nl> + import android.util.AttributeSet; <nl> + import android.widget.FrameLayout; <nl> + public class PreviewFrameLayout extends FrameLayout { <nl> 
deleted file <nl> mmm PreviewFrameLayout.java <nl> - package com.github.rubensousa.previewseekbar; <nl> - import android.annotation.TargetApi; <nl> - import android.content.Context; <nl> - import android.os.Build; <nl> - import android.util.AttributeSet; <nl> - import android.widget.FrameLayout; <nl> - public class PreviewFrameLayout extends FrameLayout { <nl> 
mmm TriggerAction.java <nl> ppp TriggerAction.java <nl> mmm TriggerLoaderException.java <nl> ppp TriggerLoaderException.java <nl> - package azkaban.trigger; <nl> + package azkaban.trigger; <nl> - } <nl> + } <nl> mmm ConditionChecker.java <nl> ppp ConditionChecker.java <nl> mmm ActionTypeLoader.java <nl> ppp ActionTypeLoader.java <nl> 
mmm SlaAlertAction.java <nl> ppp SlaAlertAction.java <nl> mmm ExecutionChecker.java <nl> ppp ExecutionChecker.java <nl> mmm JdbcTriggerLoader.java <nl> ppp JdbcTriggerLoader.java <nl> mmm ExecuteFlowAction.java <nl> ppp ExecuteFlowAction.java <nl> mmm TriggerException.java <nl> ppp TriggerException.java <nl> - package azkaban.trigger; <nl> 
mmm NodeBeanLoaderTest.java <nl> ppp NodeBeanLoaderTest.java <nl> - assertThat(shellEnd.getProps().size()).isEqualTo(0); <nl> + assertThat(shellEnd.getProps().size()).isEqualTo(1); <nl> + assertThat(shellEnd.getProps().get(Constants.NODE_TYPE)).isEqualTo(TYPE_NOOP); <nl> - assertThat(shellEcho.getProps().size()).isEqualTo(1); <nl> 
mmm HistoryServlet.java <nl> ppp HistoryServlet.java <nl> - import azkaban.executor.ExecutorManager; <nl> mmm ExecuteFlowActionTest.java <nl> ppp ExecuteFlowActionTest.java <nl> - import java.lang.reflect.InvocationTargetException; <nl> - import azkaban.trigger.TriggerAction; <nl> - import azkaban.trigger.TriggerException; <nl> 
deleted file <nl> mmm CommonParams.java <nl> - package azkaban.migration.schedule2trigger; <nl> - public class CommonParams { <nl> - 	public static final String TYPE_FLOW_FINISH = "FlowFinish"; <nl> - 	public static final String TYPE_FLOW_SUCCEED = "FlowSucceed"; <nl> - 	public static final String TYPE_FLOW_PROGRESS = "FlowProgress"; <nl> 
mmm ProjectWhitelist.java <nl> ppp ProjectWhitelist.java <nl> - MemoryCheck, <nl> - NumJobPerFlow <nl> + MemoryCheck <nl> mmm FlowRunnerManager.java <nl> ppp FlowRunnerManager.java <nl> - import azkaban.project.ProjectWhitelist; <nl> - import azkaban.project.ProjectWhitelist.WhitelistType; <nl> - if (numJobs > 0 && (numJobs <= numJobThreads || ProjectWhitelist <nl> 
new file <nl> ppp ReportalType.java <nl> + package azkaban.viewer.reportal; <nl> + import azkaban.reportal.util.Reportal; <nl> + import azkaban.user.User; <nl> + import azkaban.utils.Props; <nl> + import java.io.BufferedOutputStream; <nl> + import java.io.File; <nl> + import java.io.FileOutputStream; <nl> + import java.io.IOException; <nl> 
mmm JobRunner.java <nl> ppp JobRunner.java <nl> + 	private String attachmentFileName; <nl> - 			} catch (IOException e) { <nl> + 			} <nl> + 			catch (IOException e) { <nl> + 	private void createAttachmentFile() { <nl> + 		String fileName = createAttachmentFileName(node); <nl> + 		File file = new File(workingDir, fileName); <nl> 
mmm ExecutorLoader.java <nl> ppp ExecutorLoader.java <nl> - public void unassignExecutor(int executionId) throws ExecutorManagerException; <nl> - MemoryCheck, <nl> - NumJobPerFlow <nl> + MemoryCheck <nl> deleted file <nl> mmm StringUtilsTest.java <nl> - package azkaban.utils; <nl> - import org.junit.Assert; <nl> 
mmm XmlValidatorManagerTest.java <nl> ppp XmlValidatorManagerTest.java <nl> - @Test(expected=ValidatorManagerException.class) <nl> + @Test <nl> - new XmlValidatorManager(props); <nl> + XmlValidatorManager manager = new XmlValidatorManager(props); <nl> + assertEquals("XmlValidatorManager should contain only the default validator when no xml configuration " <nl> 
mmm LoginAbstractAzkabanServlet.java <nl> ppp LoginAbstractAzkabanServlet.java <nl> - 			resp.addCookie(new Cookie(SESSION_ID_NAME, randomUID)); <nl> + 			Cookie cookie = new Cookie(SESSION_ID_NAME, randomUID); <nl> + 			cookie.setPath("/"); <nl> + 			resp.addCookie(cookie); <nl> mmm FlowRunnerManager.java <nl> 
mmm HybridInstance.java <nl> ppp HybridInstance.java <nl> - import java.util.UUID; <nl> - public class HybridStorageEngine { <nl> + public class HybridStorageEngine implements IStorageEngine { <nl> + private static final Logger logger = LoggerFactory.getLogger(HybridStorageEngine.class); <nl> + private HybridInstance hybridInstance; <nl> 
mmm FactTableGenerator.java <nl> ppp FactTableGenerator.java <nl> + import com.kylinolap.metadata.model.schema.DataType; <nl> - import java.io.BufferedReader; <nl> - import java.io.File; <nl> - import java.io.FileInputStream; <nl> - import java.io.FileNotFoundException; <nl> - import java.io.FileOutputStream; <nl> 
mmm HBaseMiniclusterHelper.java <nl> ppp HBaseMiniclusterHelper.java <nl> - import org.apache.commons.lang3.StringUtils; <nl> - import org.apache.kylin.common.persistence.HBaseConnection; <nl> + public class FixedHLLCodec extends FixedLenMeasureCodec<HyperLogLogPlusCounter> { <nl> + private DataType type; <nl> 
mmm AbstractKylinTestCase.java <nl> ppp AbstractKylinTestCase.java <nl> - if (System.getProperty(KylinConfig.KYLIN_CONF_HOME) == null && System.getenv(KylinConfig.KYLIN_CONF_HOME) == null) <nl> - System.setProperty(KylinConfig.KYLIN_CONF_HOME, kylinConfigFolder); <nl> + if (System.getProperty(KylinConfig.KYLIN_CONF) == null && System.getenv(KylinConfig.KYLIN_CONF) == null) <nl> 
mmm JobFlowListener.java <nl> ppp JobFlowListener.java <nl> - content = content.replaceAll("\\$\\{submitter\\}", jobInstance.getSubmitter()); <nl> mmm TableController.java <nl> ppp TableController.java <nl> - public Map<String, String[]> loadHiveTable(@PathVariable String tables,@PathVariable String project){ <nl> 
mmm ProjectManager.java <nl> ppp ProjectManager.java <nl> - String tableIdentity = TableDesc.getTableIdentity(table); <nl> - if (this.projectTables.containsEntry(project, new ProjectTable(tableIdentity))) { <nl> + if (this.projectTables.containsEntry(project, new ProjectTable(table))) { <nl> - if (oneTable.getName().equalsIgnoreCase(tableIdentity)) { <nl> 
mmm RowKeyDesc.java <nl> ppp RowKeyDesc.java <nl> - package org.apache.kylin.cube.model.v2; <nl> + package org.apache.kylin.cube.model.v3; <nl> mmm HBaseColumnDesc.java <nl> ppp HBaseColumnDesc.java <nl> - package org.apache.kylin.cube.model.v2; <nl> + package org.apache.kylin.cube.model.v3; <nl> mmm HBaseMappingDesc.java <nl> 
deleted file <nl> mmm CubeSizeEstimationCLITest.java <nl> - package org.apache.kylin.cube; <nl> - import org.junit.After; <nl> - import org.junit.Before; <nl> - import org.junit.Test; <nl> - import org.apache.kylin.common.util.LocalFileMetadataTestCase; <nl> - import org.apache.kylin.cube.estimation.CubeSizeEstimationCLI; <nl> 
mmm AccessControllerTest.java <nl> ppp AccessControllerTest.java <nl> - Assert.assertNotNull(accessController.getAccessEntities("JobInstance", "")); <nl> mmm AdminController.java <nl> ppp AdminController.java <nl> - import com.kylinolap.rest.service.UserService; <nl> - public class UserService extends JdbcUserDetailsManager { <nl> 
mmm CubeManager.java <nl> ppp CubeManager.java <nl> + import static com.google.common.base.Preconditions.checkNotNull; <nl> + import static com.google.common.base.Preconditions.checkState; <nl> - import javax.annotation.Nullable; <nl> - import com.google.common.base.Function; <nl> - import com.google.common.collect.Collections2; <nl> 
mmm OLAPToEnumerableConverter.java <nl> ppp OLAPToEnumerableConverter.java <nl> + if (System.getProperty("calcite.debug") != null) { <nl> + String dumpPlan = RelOptUtil.dumpPlan("", this, false, SqlExplainLevel.DIGEST_ATTRIBUTES); <nl> + System.out.println("EXECUTION PLAN BEFORE REWRITE"); <nl> + System.out.println(dumpPlan); <nl> 
new file <nl> ppp KafkaConsumerTest.java <nl> + package org.apache.kylin.streaming.kafka; <nl> + import com.google.common.collect.Lists; <nl> + import kafka.cluster.Broker; <nl> + import org.junit.After; <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> + import java.util.Collections; <nl> + import java.util.List; <nl> 
mmm TableController.java <nl> ppp TableController.java <nl> - } catch (Exception e) { <nl> + } catch (IOException e) { <nl> - public Map<String, String[]> loadHiveTable(@PathVariable String tables,@PathVariable String project) throws IOException { <nl> - String[] arr = cubeMgmtService.reloadHiveTable(tables); <nl> 
mmm BasicTest.java <nl> ppp BasicTest.java <nl> + import org.slf4j.*; <nl> + this(dbName, tableName, null); <nl> + } <nl> + public HiveTableReader(String dbName, String tableName, Map<String, String> partitionKV) throws IOException { <nl> + this.partitionKV = partitionKV; <nl> - this.readCntxt = getHiveReaderContext(dbName, tableName); <nl> 
mmm IIKeyValueCodec.java <nl> ppp IIKeyValueCodec.java <nl> - bitMapValues.add(new ImmutableBytesWritable(v)); <nl> + bitMapValues.add(v); <nl> mmm LookupTableEnumerator.java <nl> ppp LookupTableEnumerator.java <nl> mmm BytesUtil.java <nl> ppp BytesUtil.java <nl> - import org.apache.hadoop.hbase.io.ImmutableBytesWritable; <nl> 
mmm MetadataManager.java <nl> ppp MetadataManager.java <nl> - public void removeCubeDesc(CubeDesc cubeDesc) throws IOException{ <nl> - String path = cubeDesc.getResourcePath(); <nl> - getStore().deleteResource(path); <nl> - cubeDescMap.remove(cubeDesc.getName()); <nl> - } <nl> mmm CubeService.java <nl> ppp CubeService.java <nl> 
mmm IIStreamBuilder.java <nl> ppp IIStreamBuilder.java <nl> - import com.google.common.collect.Collections2; <nl> - import com.google.common.collect.HashMultimap; <nl> - import com.google.common.collect.Lists; <nl> - import com.google.common.collect.Maps; <nl> + import com.google.common.collect.*; <nl> - import org.apache.kylin.invertedindex.index.BatchSliceBuilder; <nl> 
mmm FactDistinctColumnsMapper.java <nl> ppp FactDistinctColumnsMapper.java <nl> + private int errorRecordCounter; <nl> - System.out.println(col + " -- " + i); <nl> - bytesSplitter.split(value.getBytes(), value.getLength(), byteRowDelimiter); <nl> - SplittedBytes[] splitBuffers = bytesSplitter.getSplitBuffers(); <nl> 
mmm CubeService.java <nl> ppp CubeService.java <nl> - import java.io.File; <nl> + import java.util.Set; <nl> - import com.kylinolap.metadata.tool.HiveSourceTableMgmt; <nl> + import com.kylinolap.metadata.tool.HiveSourceTableLoader; <nl> - String xPath = ResourceStore.TABLE_EXD_RESOURCE_ROOT + "/" + tableName.toUpperCase() + "." + HiveSourceTableMgmt.OUTPUT_SURFIX; <nl> 
mmm ItemSelectHandler.java <nl> ppp ItemSelectHandler.java <nl> - import org.androidannotations.holder.EComponentWithViewSupportHolder; <nl> - 	protected void processParameters(EComponentWithViewSupportHolder holder, JMethod listenerMethod, JInvocation itemSelectedCall, List<? extends VariableElement> parameters) { <nl> 
mmm BeanHandler.java <nl> ppp BeanHandler.java <nl> - import static com.sun.codemodel.JExpr._null; <nl> - import static com.sun.codemodel.JExpr.ref; <nl> - import static org.androidannotations.helper.ModelConstants.GENERATION_SUFFIX; <nl> - import javax.annotation.processing.ProcessingEnvironment; <nl> - import javax.lang.model.element.Element; <nl> 
mmm ModelConstants.java <nl> ppp ModelConstants.java <nl> - import javax.annotation.processing.ProcessingEnvironment; <nl> + import org.androidannotations.AndroidAnnotationsEnvironment; <nl> + import org.androidannotations.process.Option; <nl> + 	public static final Option OPTION_CLASS_SUFFIX = new Option("classSuffix", "_"); <nl> 
mmm EBeanProcessor.java <nl> ppp EBeanProcessor.java <nl> + 		EBean eBeanAnnotation = element.getAnnotation(EBean.class); <nl> + 		Scope eBeanScope = eBeanAnnotation.scope(); <nl> + 		boolean hasSingletonScope = eBeanScope == Scope.Singleton; <nl> - 			EBean eBeanAnnotation = element.getAnnotation(EBean.class); <nl> 
new file <nl> ppp SomeClass.java <nl> + package com.googlecode.androidannotations.manifest; <nl> + import com.googlecode.androidannotations.annotations.EBean; <nl> + @EBean <nl> + public class SomeClass { <nl> + } <nl> new file <nl> ppp ClassFinder.java <nl> + package com.googlecode.androidannotations.utils; <nl> 
mmm HelloAndroidActivity.java <nl> ppp HelloAndroidActivity.java <nl> - import org.androidannotations.annotations.AfterViews; <nl> - import org.androidannotations.annotations.EActivity; <nl> - import org.androidannotations.annotations.ViewById; <nl> - import org.androidannotations.annotations.res.StringRes; <nl> 
mmm ValidatorHelper.java <nl> ppp ValidatorHelper.java <nl> + 		TypeElement runtimeExceptionDaoTypeElement = annotationHelper.typeElementFromQualifiedName(CanonicalNameConstants.RUNTIME_EXCEPTION_DAO); <nl> + 			DeclaredType runtimeExceptionDaoParameterizedType = annotationHelper.getTypeUtils().getDeclaredType(runtimeExceptionDaoTypeElement, modelTypeMirror, wildcardType); <nl> 
mmm AwaitingResultActivity.java <nl> ppp AwaitingResultActivity.java <nl> - 	static final int FIFTH_REQUEST = 55; <nl> - 	Intent originalIntent; <nl> - 	Intent extraIntent; <nl> - 	@OnActivityResult(FIFTH_REQUEST) <nl> - 	void onResultWithIntentExtras(Intent originalIntent, @OnActivityResult.Extra Intent extraIntent) { <nl> 
mmm HelloAndroidActivity.java <nl> ppp HelloAndroidActivity.java <nl> - import org.androidannotations.annotations.AfterViews; <nl> - import org.androidannotations.annotations.EActivity; <nl> - import org.androidannotations.annotations.ViewById; <nl> - import org.androidannotations.annotations.res.StringRes; <nl> 
new file <nl> ppp CustomFrameLayoutActivity.java <nl> + package com.googlecode.androidannotations.test15; <nl> + import android.app.Activity; <nl> + import com.googlecode.androidannotations.annotations.AfterViews; <nl> + import com.googlecode.androidannotations.annotations.EActivity; <nl> + @EActivity(R.layout.main) <nl> 
mmm SomeActivity.java <nl> ppp SomeActivity.java <nl> + 	@Bean <nl> + 	@NonConfigurationInstance <nl> + 	SingletonBean maintainedSingeltonDependency; <nl> new file <nl> ppp SingletonBean.java <nl> + package org.androidannotations.ebean; <nl> + import org.androidannotations.annotations.EBean; <nl> + @EBean(scope = EBean.Scope.Singleton) <nl> 
mmm LongClickHandler.java <nl> ppp LongClickHandler.java <nl> - import org.androidannotations.holder.EComponentWithViewSupportHolder; <nl> - 	protected void processParameters(EComponentWithViewSupportHolder holder, JMethod listenerMethod, JInvocation call, List<? extends VariableElement> parameters) { <nl> 

mmm Builder.java <nl> ppp Builder.java <nl> mmm EBeanInterceptor.java <nl> ppp EBeanInterceptor.java <nl> mmm MyRequestFactory.java <nl> ppp MyRequestFactory.java <nl> mmm SimpleAnnotation.java <nl> ppp SimpleAnnotation.java <nl> mmm ServiceIntentBuilder.java <nl> ppp ServiceIntentBuilder.java <nl> mmm IntentBuilder.java <nl> 
mmm CanonicalNameConstants.java <nl> ppp CanonicalNameConstants.java <nl> + 	public static final String INTENT_SERVICE = "android.app.IntentService"; <nl> new file <nl> ppp EIntentServiceProcessor.java <nl> + package org.androidannotations.processing; <nl> + import static com.sun.codemodel.JExpr._this; <nl> 
mmm InstanceStateHandler.java <nl> ppp InstanceStateHandler.java <nl> - 		saveStateBody.invoke(saveStateBundleParam, bundleHelper.getMethodNameToSave()).arg(fieldName).arg(ref); <nl> + 		saveStateBody.add(bundleHelper.getExpressionToSaveFromField(saveStateBundleParam, JExpr.lit(fieldName), ref)); <nl> mmm BundleHelper.java <nl> 
mmm SherlockFragment.java <nl> ppp SherlockFragment.java <nl> mmm HttpsClientProcessor.java <nl> ppp HttpsClientProcessor.java <nl> mmm AnnotationHelper.java <nl> ppp AnnotationHelper.java <nl> - import java.lang.reflect.InvocationTargetException; <nl> - import javax.lang.model.type.MirroredTypeException; <nl> 
mmm AbstractResHandler.java <nl> ppp AbstractResHandler.java <nl> - 		if (!validation.isValid()) { <nl> - 			return; <nl> - 		} <nl> mmm BackgroundExecutor.java <nl> ppp BackgroundExecutor.java <nl> - 		if (task.id != null || task.serial != null) { <nl> - 			TASKS.add(task); <nl> - 		} <nl> + 		Future<?> future = null; <nl> 
mmm Switch.java <nl> ppp Switch.java <nl> + import android.annotation.TargetApi; <nl> + import android.os.Build; <nl> + @TargetApi(Build.VERSION_CODES.LOLLIPOP) <nl> - super(context, attrs, defStyleAttr); <nl> + super(context, attrs, defStyleAttr, defStyleRes); <nl> - 	private void init(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes){ <nl> 
mmm InstrumentationHandler.java <nl> ppp InstrumentationHandler.java <nl> + Lock readLock = sourceLoadedBindingsLock.readLock(); <nl> + Lock readLock = sourceExecutedBindingsLock.readLock(); <nl> - EventBinding.Source<?>[] bindingsToNofify = null; <nl> - List<Source> globalNewSources = null; <nl> + boolean haveNewSources = false; <nl> 
mmm PurgeUnprocessed.java <nl> ppp PurgeUnprocessed.java <nl> - Query query = getSession().createQuery("SELECT s.id FROM " + Snapshot.class.getSimpleName() + " s WHERE s.last=false AND status=:status AND s.createdAt<:date"); <nl> + Query query = getSession().createQuery("SELECT s.id FROM " + Snapshot.class.getSimpleName() + " s WHERE s.last=:last AND status=:status AND s.createdAt<:date"); <nl> 
mmm DefaultUserTest.java <nl> ppp DefaultUserTest.java <nl> - package org.sonar.core.user; <nl> + package org.sonar.server.user; <nl> + import org.sonar.core.user.DefaultUser; <nl> mmm DefaultUserFinder.java <nl> ppp DefaultUserFinder.java <nl> - package org.sonar.core.user; <nl> + package org.sonar.server.user; <nl> 
mmm UserResultSetIterator.java <nl> ppp UserResultSetIterator.java <nl> - import org.apache.commons.lang.StringUtils; <nl> - import org.sonar.db.DbSession; <nl> - import org.sonar.db.user.UserDto; <nl> - import org.sonar.db.DbClient; <nl> - import org.sonar.db.ResultSetIterator; <nl> + import org.apache.commons.lang.StringUtils; <nl> 
mmm HotspotMetricWidget.java <nl> ppp HotspotMetricWidget.java <nl> - @WidgetCategory("Hotspots") <nl> - @WidgetProperties({ <nl> - @WidgetProperty(key = "title", type = WidgetPropertyType.STRING), <nl> - @WidgetProperty(key = "metric", type = WidgetPropertyType.METRIC, defaultValue = "ncloc"), <nl> - @WidgetProperty(key = "numberOfLines", type = WidgetPropertyType.INTEGER, defaultValue = "5") <nl> 
mmm ConfigurationUtilsTest.java <nl> ppp ConfigurationUtilsTest.java <nl> - Map<String,String> output = Maps.newHashMap(); <nl> + Map<String, String> output = Maps.newHashMap(); <nl> mmm ServerSettings.java <nl> ppp ServerSettings.java <nl> - import org.sonar.api.database.configuration.Property; <nl> - import org.sonar.jpa.session.DatabaseSessionFactory; <nl> 
mmm DefaultUserFinder.java <nl> ppp DefaultUserFinder.java <nl> - private List<User> toUsers(Collection<UserDto> dtos) { <nl> + private static List<User> toUsers(Collection<UserDto> dtos) { <nl> mmm ResourceKeyUpdaterDao.java <nl> ppp ResourceKeyUpdaterDao.java <nl> - private Set<ResourceDto> collectAllModules(long projectId, String stringToReplace, ResourceKeyUpdaterMapper mapper) { <nl> 
mmm IssueStorage.java <nl> ppp IssueStorage.java <nl> - if (count++ > BatchSession.MAX_BATCH_SIZE) { <nl> + if (count > BatchSession.MAX_BATCH_SIZE) { <nl> + count++; <nl> mmm ListingWs.java <nl> ppp ListingWs.java <nl> - if (!controller.actions().isEmpty()) { <nl> - Ordering<Action> ordering = Ordering.natural().onResultOf(new Function<Action, String>() { <nl> 
new file <nl> ppp PersistentCacheProvider.java <nl> + package org.sonar.batch.bootstrap; <nl> + import org.sonar.home.cache.PersistentCacheBuilder; <nl> + import org.picocontainer.injectors.ProviderAdapter; <nl> + import java.nio.file.Paths; <nl> + import org.sonar.home.cache.PersistentCache; <nl> + public class PersistentCacheProvider extends ProviderAdapter { <nl> 
mmm PublicDocumentedApiDensityFormulaTest.java <nl> ppp PublicDocumentedApiDensityFormulaTest.java <nl> - Measurable measurable = new SourceClass("com.Toto"); <nl> + Measurable<Metric> measurable = new SourceClass("com.Toto"); <nl> mmm FilterResult.java <nl> ppp FilterResult.java <nl> - this.rows = new ArrayList(rows); <nl> 
mmm DefaultStaticAnalysisWidget.java <nl> ppp DefaultStaticAnalysisWidget.java <nl> + import org.sonar.api.web.Description; <nl> + @Description("Reports general metrics on the size of the project.") <nl> - return "Static analysis"; <nl> + return "Size metrics"; <nl> mmm PackageDesignWidget.java <nl> ppp PackageDesignWidget.java <nl> 
mmm SeleniumDriver.java <nl> ppp SeleniumDriver.java <nl> - package selenium; <nl> + package util.selenium; <nl> mmm LazyShould.java <nl> ppp LazyShould.java <nl> - package selenium; <nl> + package util.selenium; <nl> - import com.google.common.base.*; <nl> + import com.google.common.base.Function; <nl> + import com.google.common.base.Joiner; <nl> 
mmm CancelAllWsAction.java <nl> ppp CancelAllWsAction.java <nl> - .setDescription("Cancels all pending task. Requires system administration permission.") <nl> + .setDescription("Cancels all pending tasks. Requires system administration permission. In-progress tasks are not canceled.") <nl> + .setSince("5.2") <nl> 
mmm CodeScanner.java <nl> ppp CodeScanner.java <nl> - public abstract class CodeScanner<VISITOR extends CodeVisitor> { <nl> + public abstract class CodeScanner<V extends CodeVisitor> { <nl> - public abstract Collection<Class<? extends VISITOR>> getVisitorClasses(); <nl> + public abstract Collection<Class<? extends V>> getVisitorClasses(); <nl> 
mmm MutableAnalysisMetadataHolder.java <nl> ppp MutableAnalysisMetadataHolder.java <nl> - import java.util.Date; <nl> - MutableAnalysisMetadataHolder setAnalysisDate(Date date); <nl> + MutableAnalysisMetadataHolder setAnalysisDate(long date); <nl> - import java.util.Date; <nl> - public Date getAnalysisDate() { <nl> 
mmm WebServiceEngine.java <nl> ppp WebServiceEngine.java <nl> + import com.google.common.base.Charsets; <nl> - JsonWriter json = JsonWriter.of(new OutputStreamWriter(stream.output())); <nl> + JsonWriter json = JsonWriter.of(new OutputStreamWriter(stream.output(), Charsets.UTF_8)); <nl> mmm BundleSynchronizedMatcher.java <nl> 
deleted file <nl> mmm DeleteWsRequest.java <nl> - package org.sonarqube.ws.client.usergroup; <nl> - import javax.annotation.CheckForNull; <nl> - import javax.annotation.Nullable; <nl> - import javax.annotation.concurrent.Immutable; <nl> - @Immutable <nl> - public class DeleteWsRequest { <nl> - private final Long id; <nl> 
mmm PropertySetsTest.java <nl> ppp PropertySetsTest.java <nl> - package administation.suite; <nl> + package administation.suite.administration; <nl> + import administation.suite.AdministrationTestSuite; <nl> mmm WebServiceTest.java <nl> ppp WebServiceTest.java <nl> - package administation.suite; <nl> + package administation.suite.administration; <nl> 
mmm MakeUuidColumnsNotNullOnProjects.java <nl> ppp MakeUuidColumnsNotNullOnProjects.java <nl> + import static org.sonar.db.version.VarcharColumnDef.UUID_VARCHAR_SIZE; <nl> - private static final int UUID_VARCHAR_SIZE = 50; <nl> mmm MakeUuidColumnsNotNullOnSnapshots.java <nl> ppp MakeUuidColumnsNotNullOnSnapshots.java <nl> 
mmm PostJobsExecutor.java <nl> ppp PostJobsExecutor.java <nl> - import java.util.List; <nl> mmm BootstrapModule.java <nl> ppp BootstrapModule.java <nl> - import org.sonar.persistence.DefaultDatabase; <nl> mmm VariationDecorator.java <nl> ppp VariationDecorator.java <nl> - import com.google.common.collect.Lists; <nl> 
new file <nl> ppp MockHttpServerInterceptor.java <nl> + package org.sonarqube.ws.client; <nl> + import org.junit.rules.ExternalResource; <nl> + import java.util.Map; <nl> + public final class MockHttpServerInterceptor extends ExternalResource { <nl> + private MockHttpServer server; <nl> + @Override <nl> + protected final void before() throws Throwable { <nl> 
mmm BulkIndexer.java <nl> ppp BulkIndexer.java <nl> + import static java.lang.String.format; <nl> + import com.google.common.base.Optional; <nl> + import com.google.common.collect.ImmutableMap; <nl> + import java.util.Map; <nl> + import javax.annotation.CheckForNull; <nl> - import org.sonar.server.util.cache.MemoryCache; <nl> 
mmm ReviewsDecorator.java <nl> ppp ReviewsDecorator.java <nl> - package org.sonar.plugins.core.sensors; <nl> - import javax.persistence.EntityManager; <nl> - import javax.persistence.EntityTransaction; <nl> - import javax.persistence.Query; <nl> - import org.slf4j.Logger; <nl> - import org.slf4j.LoggerFactory; <nl> 
mmm CoverageMeasuresStep.java <nl> ppp CoverageMeasuresStep.java <nl> - import org.sonar.server.computation.formula.SumFormula; <nl> + import static org.sonar.server.computation.formula.SumFormula.createIntSumFormula; <nl> - package org.sonar.server.computation.formula; <nl> + package org.sonar.server.computation.formula.counter; <nl> 
mmm DistributionFormula.java <nl> ppp DistributionFormula.java <nl> - public Optional<Measure> createMeasure(DistributionCounter counter, Component.Type componentType) { <nl> + public Optional<Measure> createMeasure(DistributionCounter counter, CreateMeasureContext context) { <nl> + Component.Type componentType = context.getComponent().getType(); <nl> 
mmm DatabaseUtils.java <nl> ppp DatabaseUtils.java <nl> - static final String[] TABLE_NAMES = { <nl> - "action_plans", <nl> - "action_plans_reviews", <nl> - "active_dashboards", <nl> - "active_filters", <nl> - "active_rules", <nl> - "active_rule_changes", <nl> - "active_rule_parameters", <nl> - "active_rule_param_changes", <nl> 
mmm InsertDto.java <nl> ppp InsertDto.java <nl> - public List<ActionRequest> doCall(Index index) throws Exception { <nl> + public List<ActionRequest> doCall(Index index) { <nl> mmm RuleIndex.java <nl> ppp RuleIndex.java <nl> - qb.should(this.termQuery(RuleNormalizer.RuleField._TAGS, queryString, 10f)); <nl> 
mmm QualityGateNotificationTest.java <nl> ppp QualityGateNotificationTest.java <nl> - import org.sonarqube.tests.Category1Suite; <nl> - public static Orchestrator orchestrator = Category1Suite.ORCHESTRATOR; <nl> + public static Orchestrator orchestrator = QualityGateSuite.ORCHESTRATOR; <nl> - public Tester tester = new Tester(orchestrator).disableOrganizations(); <nl> 
mmm GlobalContainer.java <nl> ppp GlobalContainer.java <nl> - import org.sonar.api.SonarPlugin; <nl> + import org.sonar.api.Plugin; <nl> + import org.sonar.api.utils.Durations; <nl> + import org.sonar.core.i18n.DefaultI18n; <nl> + import org.sonar.core.i18n.RuleI18nManager; <nl> - CachesManager.class, <nl> + CachesManager.class, <nl> 
mmm PmdViolationsXmlParserTest.java <nl> ppp PmdViolationsXmlParserTest.java <nl> - Violation wanted = new Violation(null, new JavaFile("ch.hortis.sonar.mvn.ClassWithComments")) <nl> + Violation wanted = Violation.create((Rule)null, new JavaFile("ch.hortis.sonar.mvn.ClassWithComments")) <nl> mmm FindbugsSensor.java <nl> 
mmm IssueDoc.java <nl> ppp IssueDoc.java <nl> - public void setTechnicalCreationDate(@Nullable Date d) { <nl> - setField(IssueIndexDefinition.FIELD_ISSUE_TECHNICAL_CREATED_AT, d); <nl> - } <nl> mmm IssueIndexDefinition.java <nl> ppp IssueIndexDefinition.java <nl> - public static final String FIELD_ISSUE_TECHNICAL_CREATED_AT = "createdAt"; <nl> 
mmm MinimumViableSystemTest.java <nl> ppp MinimumViableSystemTest.java <nl> + import org.junit.Rule; <nl> + import org.junit.rules.TemporaryFolder; <nl> + import java.io.File; <nl> + @Rule <nl> + public TemporaryFolder temp = new TemporaryFolder(); <nl> - private void scheduleAutokill(final Boolean isMonitored) { <nl> 
mmm IndexSynchronizer.java <nl> ppp IndexSynchronizer.java <nl> - import org.sonar.core.cluster.WorkQueue; <nl> + import org.sonar.server.cluster.WorkQueue; <nl> mmm QProfileActiveRuleOperations.java <nl> ppp QProfileActiveRuleOperations.java <nl> - QProfileValidations.checkRuleIsNotNull(rule); <nl> - return createActiveRule(profileId, rule.getId(), severity, session); <nl> 
mmm DomainsActionTest.java <nl> ppp DomainsActionTest.java <nl> - import org.sonar.server.metric.persistence.MetricDao; <nl> + import org.sonar.db.metric.MetricDao; <nl> mmm RegisterMetricsTest.java <nl> ppp RegisterMetricsTest.java <nl> - import org.sonar.server.metric.persistence.MetricDao; <nl> + import org.sonar.db.metric.MetricDao; <nl> 
mmm PersistFileSourcesStep.java <nl> ppp PersistFileSourcesStep.java <nl> - import org.sonar.db.MyBatis; <nl> - DbSession session = dbClient.openSession(false); <nl> - try { <nl> - new DepthTraversalTypeAwareCrawler(new FileSourceVisitor(session)) <nl> + try (DbSession dbSession = dbClient.openSession(false)) { <nl> 
mmm ListDefinitionsRequest.java <nl> ppp ListDefinitionsRequest.java <nl> - package org.sonarqube.ws.client.setting; <nl> + package org.sonarqube.ws.client.settings; <nl> - import javax.annotation.CheckForNull; <nl> - import javax.annotation.Nullable; <nl> - import javax.annotation.concurrent.Immutable; <nl> 
mmm MethodComplexityCheck.java <nl> ppp MethodComplexityCheck.java <nl> - import org.sonar.check.IsoCategory; <nl> - @Rule(key = "MethodCyclomaticComplexity", name = "Avoid too complex method", isoCategory = IsoCategory.Maintainability, <nl> + @Rule(key = "MethodCyclomaticComplexity", name = "Avoid too complex method", <nl> 
mmm ProjectsActionTest.java <nl> ppp ProjectsActionTest.java <nl> - userSessionRule.logIn("obiwan").setUserId(user.getId().intValue()); <nl> + userSessionRule.logIn("obiwan").setUserId(user.getId()); <nl> mmm PermissionIndexerTest.java <nl> ppp PermissionIndexerTest.java <nl> - userSession.logIn(u.getLogin()).setUserId(u.getId().intValue()); <nl> 
mmm SearchServerTest.java <nl> ppp SearchServerTest.java <nl> - import org.junit.Ignore; <nl> - @Ignore <nl> - while (!searchServer.isReady() && count < 100) { <nl> + while (!searchServer.isReady() && count < 5) { <nl> - Thread.sleep(500); <nl> + Thread.sleep(100); <nl> - assertThat(count).isEqualTo(100); <nl> 
new file <nl> ppp WidgetDisplayingProperties.java <nl> + import org.sonar.api.web.AbstractRubyTemplate; <nl> + import org.sonar.api.web.RubyRailsWidget; <nl> + import org.sonar.api.web.WidgetScope; <nl> + import static org.sonar.api.web.WidgetScope.GLOBAL; <nl> + @WidgetScope(GLOBAL) <nl> + public class WidgetDisplayingProperties extends AbstractRubyTemplate implements RubyRailsWidget { <nl> 
mmm DetailMoreTypeActivity.java <nl> ppp DetailMoreTypeActivity.java <nl> mmm InputUrlDetailActivity.java <nl> ppp InputUrlDetailActivity.java <nl> mmm ListNormalAdapter.java <nl> ppp ListNormalAdapter.java <nl> mmm WebDetailActivity.java <nl> ppp WebDetailActivity.java <nl> mmm PlayActivity.java <nl> ppp PlayActivity.java <nl> 
mmm ErlangServerCodegen.java <nl> ppp ErlangServerCodegen.java <nl> mmm FlaskConnexionCodegen.java <nl> ppp FlaskConnexionCodegen.java <nl> mmm GoServerCodegen.java <nl> ppp GoServerCodegen.java <nl> mmm HaskellServantCodegen.java <nl> ppp HaskellServantCodegen.java <nl> mmm PistacheServerCodegen.java <nl> ppp PistacheServerCodegen.java <nl> 
new file <nl> ppp AdditionalPropertiesString.java <nl> + package org.openapitools.model; <nl> + import java.util.Objects; <nl> + import com.fasterxml.jackson.annotation.JsonProperty; <nl> + import com.fasterxml.jackson.annotation.JsonCreator; <nl> + import io.swagger.annotations.ApiModel; <nl> + import io.swagger.annotations.ApiModelProperty; <nl> 
mmm PostRequest.java <nl> ppp PostRequest.java <nl> - if(entity == null ) { <nl> - return null; <nl> - } <nl> - if(entity == null) { <nl> - return null; <nl> - } <nl> mmm UserApiController.java <nl> ppp UserApiController.java <nl> + import io.swagger.model.*; <nl> - public class UserApiController implements UserApi { <nl> 
mmm Tag.java <nl> ppp Tag.java <nl> - import com.fasterxml.jackson.annotation.JsonProperty; <nl> - import com.fasterxml.jackson.annotation.JsonValue; <nl> - import io.swagger.annotations.ApiModel; <nl> - import io.swagger.annotations.ApiModelProperty; <nl> - import javax.xml.bind.annotation.XmlRootElement; <nl> 
mmm RubySinatraServerOptionsProvider.java <nl> ppp RubySinatraServerOptionsProvider.java <nl> - public class SinatraServerOptionsProvider implements OptionsProvider { <nl> + public class RubySinatraServerOptionsProvider implements OptionsProvider { <nl> mmm CppPistacheServerCodegen.java <nl> ppp CppPistacheServerCodegen.java <nl> 
mmm StoreApi.java <nl> ppp StoreApi.java <nl> - @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2015-09-30T16:27:52.437+08:00") <nl> + @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2015-10-01T23:05:28.119+08:00") <nl> 
mmm JavaInflectorServerCodegen.java <nl> ppp JavaInflectorServerCodegen.java <nl> + protected String invokerPackage = "io.swagger.handler"; <nl> + protected String groupId = "io.swagger"; <nl> + protected String artifactId = "swagger-inflector-server"; <nl> + protected String artifactVersion = "1.0.0"; <nl> 
mmm SpringBootServerCodegen.java <nl> ppp SpringBootServerCodegen.java <nl> + public static final String JAVA_8 = "java8"; <nl> + public static final String ASYNC = "async"; <nl> + protected boolean java8 = false; <nl> + protected boolean async = false; <nl> + cliOptions.add(CliOption.newBoolean(JAVA_8, "use java8 default interface")); <nl> 
deleted file <nl> mmm Manifest.java <nl> - package io.swagger.client; <nl> - public final class Manifest { <nl> - }diff --git a/data/zhouhj/data8/openapi-generator_git/9856/old/HaskellHttpClientCodegen.java b/data/zhouhj/data8/openapi-generator_git/9856/new/HaskellHttpClientCodegen.java <nl> mmm HaskellHttpClientCodegen.java <nl> 
mmm FakeApiController.java <nl> ppp FakeApiController.java <nl> - @RequestHeader(value = "Accept", required = false) String accept) throws IOException { <nl> + @RequestHeader(value = "Accept", required = false) String accept) throws Exception { <nl> - @RequestHeader(value = "Accept", required = false) String accept) throws IOException { <nl> 
mmm StoreApiServiceFactory.java <nl> ppp StoreApiServiceFactory.java <nl> - @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JaxRSServerCodegen", date = "2015-11-05T18:43:02.375-08:00") <nl> + @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JaxRSServerCodegen", date = "2015-11-05T22:31:25.130-08:00") <nl> 
mmm HttpBasicAuth.java <nl> ppp HttpBasicAuth.java <nl> - @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2015-10-01T23:05:28.119+08:00") <nl> + @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2015-09-30T16:27:52.437+08:00") <nl> 
mmm UserApiTest.java <nl> ppp UserApiTest.java <nl> - @Ignore @Test <nl> + @Test <nl> - } <nl> + } <nl> mmm ApiClient.java <nl> ppp ApiClient.java <nl> + public boolean isJsonMime(String mime) { <nl> + return mime != null && mime.matches("(?i)application\\/json(;.*)?"); <nl> + } <nl> - if (accepts.length == 0) return null; <nl> 
mmm GoClientOptionsTest.java <nl> ppp GoClientOptionsTest.java <nl> - package io.swagger.codegen.go; <nl> + package io.swagger.codegen.Go; <nl> - times = 1; <nl> + times = 1; <nl> mmm LumenServerOptionsTest.java <nl> ppp LumenServerOptionsTest.java <nl> - package io.swagger.codegen.lumen; <nl> + package io.swagger.codegen.slim; <nl> 
mmm Pet.java <nl> ppp Pet.java <nl> - @javax.annotation.Generated(value = "class io.swagger.codegen.languages.SpringMVCServerCodegen", date = "2016-01-19T23:33:00.911+08:00") <nl> + @javax.annotation.Generated(value = "class io.swagger.codegen.languages.SpringMVCServerCodegen", date = "2016-01-22T15:27:38.634-06:00") <nl> 
mmm User.java <nl> ppp User.java <nl> - @ApiModel(description = "") <nl> mmm InlineResponse200.java <nl> ppp InlineResponse200.java <nl> - @ApiModel(description = "") <nl> - @SerializedName("tags") <nl> - private List<Tag> tags = new ArrayList<Tag>(); <nl> + @SerializedName("photoUrls") <nl> + private List<String> photoUrls = new ArrayList<String>(); <nl> 
mmm FakeApiService.java <nl> ppp FakeApiService.java <nl> - public abstract Response testEnumParameters( List<String> enumHeaderStringArray, String enumHeaderString, List<String> enumQueryStringArray, String enumQueryString, Integer enumQueryInteger, Double enumQueryDouble,List<String> enumFormStringArray,String enumFormString,SecurityContext securityContext) throws NotFoundException; <nl> 
mmm UserApi.java <nl> ppp UserApi.java <nl> - import io.swagger.client.ApiClient; <nl> - import io.swagger.client.Configuration; <nl> + import io.swagger.client.ApiInvoker; <nl> - private ApiClient apiClient; <nl> + ApiInvoker apiInvoker = ApiInvoker.getInstance(); <nl> - public UserApi() { <nl> - this(Configuration.getDefaultApiClient()); <nl> 
new file <nl> ppp RetryingOAuth.java <nl> + package org.openapitools.client.auth; <nl> + import com.squareup.okhttp.Interceptor; <nl> + import com.squareup.okhttp.OkHttpClient; <nl> + import com.squareup.okhttp.Request; <nl> + import com.squareup.okhttp.Response; <nl> + import org.apache.oltu.oauth2.client.OAuthClient; <nl> 
mmm TizenClientCodegen.java <nl> ppp TizenClientCodegen.java <nl> + @Override <nl> + public String toOperationId(String operationId) { <nl> + if(reservedWords.contains(operationId)) <nl> + throw new RuntimeException(operationId + " (reserved word) cannot be used as method name"); <nl> + return camelize(operationId, true); <nl> 
new file <nl> ppp ScalaGatlingCodegen.java <nl> + package io.swagger.codegen.languages; <nl> + import io.swagger.codegen.*; <nl> + import io.swagger.models.*; <nl> + import io.swagger.models.parameters.*; <nl> + import io.swagger.models.properties.*; <nl> + import org.apache.commons.io.FileUtils; <nl> + import org.apache.commons.lang3.StringUtils; <nl> 
new file <nl> ppp CodegenConfiguratorTest.java <nl> + package io.swagger.codegen.config; <nl> + import io.swagger.codegen.ClientOptInput; <nl> + import io.swagger.codegen.CodegenConfig; <nl> + import io.swagger.codegen.CodegenConfigLoader; <nl> + import io.swagger.codegen.CodegenConstants; <nl> + import io.swagger.codegen.auth.AuthParser; <nl> 
mmm KotlinClientCodegenModelTest.java <nl> ppp KotlinClientCodegenModelTest.java <nl> - Assert.assertTrue(property1.isNotContainer); <nl> + Assert.assertFalse(property1.isContainer); <nl> - Assert.assertTrue(property2.isNotContainer); <nl> + Assert.assertFalse(property2.isContainer); <nl> - Assert.assertTrue(property3.isNotContainer); <nl> 
deleted file <nl> mmm GzipRequestInterceptor.java <nl> - package org.openapitools.client; <nl> - import okhttp3.*; <nl> - import okio.Buffer; <nl> - import okio.BufferedSink; <nl> - import okio.GzipSink; <nl> - import okio.Okio; <nl> - import java.io.IOException; <nl> - class GzipRequestInterceptor implements Interceptor { <nl> 
mmm User.java <nl> ppp User.java <nl> - @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-02-22T14:59:49.052+08:00") <nl> + @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-03-10T11:48:21.307-08:00") <nl> 
mmm MapTest.java <nl> ppp MapTest.java <nl> + import org.openapitools.model.StringBooleanMap; <nl> + @JsonProperty("direct_map") <nl> + @Valid <nl> + private Map<String, Boolean> directMap = null; <nl> + @JsonProperty("indirect_map") <nl> + private StringBooleanMap indirectMap = null; <nl> + public MapTest directMap(Map<String, Boolean> directMap) { <nl> 
mmm ScalaAkkaClientOptionsProvider.java <nl> ppp ScalaAkkaClientOptionsProvider.java <nl> - public static final String DATE_LIBRARY = "joda"; <nl> - .put("dateLibrary", DATE_LIBRARY) <nl> mmm ScalaHttpClientCodegen.java <nl> ppp ScalaHttpClientCodegen.java <nl> - setDateLibrary("legacy",true); <nl> mmm ScalaHttpClientOptionsTest.java <nl> 
mmm UserApi.java <nl> ppp UserApi.java <nl> - @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2015-10-21T11:55:20.020+08:00") <nl> + @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2015-11-17T11:17:50.535-05:00") <nl> 
mmm ScalatraServerCodegen.java <nl> ppp ScalatraServerCodegen.java <nl> + typeMapping.put("binary", "String"); <nl> - } <nl> + } <nl> mmm SlimFrameworkServerCodegen.java <nl> ppp SlimFrameworkServerCodegen.java <nl> + typeMapping.put("binary", "string"); <nl> mmm ScalaClientCodegen.java <nl> ppp ScalaClientCodegen.java <nl> 
mmm StoreApi.java <nl> ppp StoreApi.java <nl> - final String[] accepts = { <nl> - "application/json", "application/xml" <nl> - }; <nl> - final String accept = apiClient.selectHeaderAccept(accepts); <nl> - final String[] contentTypes = { <nl> + String[] contentTypes = { <nl> - final String contentType = apiClient.selectHeaderContentType(contentTypes); <nl> 
mmm PetApiController.java <nl> ppp PetApiController.java <nl> - import java.io.File; <nl> + import org.springframework.core.io.Resource; <nl> + import com.fasterxml.jackson.databind.ObjectMapper; <nl> + import java.io.IOException; <nl> - public ResponseEntity<Void> addPet(@ApiParam(value = "Pet object that needs to be added to the store" ,required=true )  @Valid @RequestBody Pet body) { <nl> 
mmm AbstractJavaJAXRSServerCodegen.java <nl> ppp AbstractJavaJAXRSServerCodegen.java <nl> - if (url.getPort() != 0) { <nl> - port = url.getPort(); <nl> - } <nl> - this.additionalProperties.put("serverPort", port); <nl> + this.additionalProperties.put("serverPort", URLPathUtils.getPort(url, 8080)); <nl> mmm CSharpNancyFXServerCodegen.java <nl> 
mmm ApiClient.java <nl> ppp ApiClient.java <nl> - import retrofit2.GsonConverterFactory; <nl> - import retrofit2.RxJavaCallAdapterFactory; <nl> + import retrofit2.converter.gson.GsonConverterFactory; <nl> + import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory; <nl> - if (authName == "petstore_auth") { <nl> 
deleted file <nl> mmm PetApiTest.java <nl> - package io.swagger.petstore.test; <nl> - import io.swagger.client.ApiException; <nl> - import io.swagger.client.api.*; <nl> - import io.swagger.client.model.*; <nl> - import java.util.*; <nl> - import java.io.*; <nl> - import static org.junit.Assert.*; <nl> - import org.junit.*; <nl> 
mmm JavaMSF4JServerCodegen.java <nl> ppp JavaMSF4JServerCodegen.java <nl> - embeddedTemplateDir = templateDir = "MSF4J"; <nl> + embeddedTemplateDir = templateDir = "java-msf4j-server"; <nl> mmm PhpZendExpressivePathHandlerServerCodegen.java <nl> ppp PhpZendExpressivePathHandlerServerCodegen.java <nl> - embeddedTemplateDir = templateDir = "ze-ph"; <nl> 
mmm UserApi.java <nl> ppp UserApi.java <nl> - import retrofit.Callback; <nl> - @POST("/user") <nl> - void createUser( <nl> - @Body User body, Callback<Void> cb <nl> - ); <nl> + ); <nl> - @POST("/user/createWithArray") <nl> - void createUsersWithArrayInput( <nl> - @Body List<User> body, Callback<Void> cb <nl> - ); <nl> 
mmm JavaModelTest.java <nl> ppp JavaModelTest.java <nl> - final CodegenModel cm = codegen.fromModel("sample", model); <nl> + final CodegenModel cm = codegen.fromModel("sample", model, Collections.singletonMap("sample", model)); <nl> - final CodegenModel cm = codegen.fromModel("sample", schema); <nl> + final CodegenModel cm = codegen.fromModel("sample", schema, Collections.singletonMap("sample", schema)); <nl> 
mmm ScalatraServerCodegen.java <nl> ppp ScalatraServerCodegen.java <nl> + typeMapping.put("binary", "String"); <nl> - } <nl> + } <nl> mmm SlimFrameworkServerCodegen.java <nl> ppp SlimFrameworkServerCodegen.java <nl> + typeMapping.put("binary", "string"); <nl> mmm ScalaClientCodegen.java <nl> ppp ScalaClientCodegen.java <nl> 
deleted file <nl> mmm Application.java <nl> - package io.swagger; <nl> - import feign.Logger; <nl> - import org.springframework.boot.autoconfigure.SpringBootApplication; <nl> - import org.springframework.boot.builder.SpringApplicationBuilder; <nl> - import org.springframework.cloud.netflix.feign.EnableFeignClients; <nl> 
mmm Pet.java <nl> ppp Pet.java <nl> - import java.util.*; <nl> + import java.util.*; <nl> - import com.fasterxml.jackson.annotation.JsonProperty; <nl> + import com.fasterxml.jackson.annotation.*; <nl> - @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2015-12-09T22:59:22.180-05:00") <nl> 
mmm JsonUtil.java <nl> ppp JsonUtil.java <nl> + if ("Animal".equalsIgnoreCase(className)) { <nl> + return new TypeToken<List<Animal>>(){}.getType(); <nl> + } <nl> + if ("Cat".equalsIgnoreCase(className)) { <nl> + return new TypeToken<List<Cat>>(){}.getType(); <nl> + } <nl> + if ("Dog".equalsIgnoreCase(className)) { <nl> 
new file <nl> ppp TestUtils.java <nl> + package io.swagger; <nl> + import java.util.Random; <nl> + import java.util.concurrent.atomic.AtomicLong; <nl> + public class TestUtils { <nl> + private static final AtomicLong atomicId = createAtomicId(); <nl> + public static long nextId() { <nl> + return atomicId.getAndIncrement(); <nl> 
mmm UserApi.java <nl> ppp UserApi.java <nl> mmm CppQt5ClientCodegen.java <nl> ppp CppQt5ClientCodegen.java <nl> + import io.swagger.v3.oas.models.media.ArraySchema; <nl> + import io.swagger.v3.oas.models.media.Schema; <nl> + import io.swagger.v3.parser.util.SchemaTypeUtil; <nl> + import org.apache.commons.lang3.StringUtils; <nl> 
deleted file <nl> mmm UserApi.java <nl> - package io.swagger.server.api.verticle; <nl> - import io.swagger.server.api.MainApiException; <nl> - import io.swagger.server.api.model.User; <nl> - import rx.Completable; <nl> - import rx.Single; <nl> - import java.util.List; <nl> - import java.util.Map; <nl> - public interface UserApi  { <nl> 
deleted file <nl> mmm TypeScriptAngularClientCodegen.java <nl> - package io.swagger.codegen.languages; <nl> - import java.io.File; <nl> - import io.swagger.codegen.SupportingFile; <nl> - public class TypeScriptAngularClientCodegen extends TypeScriptNodeClientCodegen { <nl> - 	 <nl> - 	@Override <nl> - 	public String getName() { <nl> 
deleted file <nl> mmm StoreApiTest.java <nl> - package io.swagger.petstore.test; <nl> - import io.swagger.client.ServiceGenerator; <nl> - import io.swagger.client.api.*; <nl> - import io.swagger.client.model.*; <nl> - import retrofit.RetrofitError; <nl> - import java.util.*; <nl> - import java.io.*; <nl> - import static org.junit.Assert.*; <nl> 
mmm SwiftCodegen.java <nl> ppp SwiftCodegen.java <nl> - typeMapping.put("date", "NSDate"); <nl> - typeMapping.put("Date", "NSDate"); <nl> + typeMapping.put("date", "ISOFullDate"); <nl> + typeMapping.put("Date", "ISOFullDate"); <nl> mmm SwiftCodegenTest.java <nl> ppp SwiftCodegenTest.java <nl> + @Test(description = "returns ISOFullDate when response format is date") <nl> 
mmm FormatTest.java <nl> ppp FormatTest.java <nl> + import com.fasterxml.jackson.annotation.JsonValue; <nl> - @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-05-06T18:35:05.435+08:00") <nl> + @javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-05-13T16:29:08.210Z") <nl> 
mmm CSharpClientCodegen.java <nl> ppp CSharpClientCodegen.java <nl> - "string", <nl> - "bool?", <nl> - "double?", <nl> - "int?", <nl> - "long?", <nl> - "float?", <nl> - "byte[]", <nl> - "List", <nl> - "Dictionary", <nl> - "DateTime", <nl> + "boolean", <nl> - typeMapping.put("string", "string"); <nl> - return toModelName(type); <nl> 

deleted file <nl> mmm ReadRemoteFileOperation.java <nl> - package com.owncloud.android.oc_framework.operations.remote; <nl> - import java.util.ArrayList; <nl> - import org.apache.http.HttpStatus; <nl> - import org.apache.jackrabbit.webdav.DavConstants; <nl> - import org.apache.jackrabbit.webdav.MultiStatus; <nl> 
mmm LoadingDialog.java <nl> ppp LoadingDialog.java <nl> mmm FileDisplayActivity.java <nl> ppp FileDisplayActivity.java <nl> - import android.content.res.Configuration; <nl> + import android.support.v4.app.FragmentManager; <nl> + import com.owncloud.android.ui.dialog.SslUntrustedCertDialog; <nl> - import com.owncloud.android.ui.dialog.SslValidatorDialog; <nl> 
mmm FileUploader.java <nl> ppp FileUploader.java <nl> - wc.allowUnsignedCertificates(); <nl> + wc.allowSelfsignedCertificates(); <nl> new file <nl> ppp OnDatatransferProgressListener.java <nl> + package eu.alefzero.owncloud.files.interfaces; <nl> + public interface OnDatatransferProgressListener { <nl> + void transferProgress(long progressRate); <nl> 
mmm OCFileListFragment.java <nl> ppp OCFileListFragment.java <nl> - case R.id.action_favorite_file:{ <nl> - mContainerActivity.getFileOperationsHelper().toggleKeepInSync(mTargetFile, true); <nl> - return true; <nl> - } <nl> - case R.id.action_unfavorite_file:{ <nl> - mContainerActivity.getFileOperationsHelper().toggleKeepInSync(mTargetFile, false); <nl> 
mmm SynchronizeFileOperation.java <nl> ppp SynchronizeFileOperation.java <nl> - file.setEtag(we.etag()); <nl> mmm OCFile.java <nl> ppp OCFile.java <nl> - private boolean mEnforceMetadataUpdate; <nl> - private boolean mSyncFullAccount; <nl> - long parentId, <nl> - boolean enforceMetadataUpdate, <nl> - boolean syncFullAccount, <nl> 
mmm FolderPickerActivity.java <nl> ppp FolderPickerActivity.java <nl> + ".EXTRA_FILES"; <nl> - private SyncBroadcastReceiver mSyncBroadcastReceiver; <nl> + private SyncBroadcastReceiver mSyncBroadcastReceiver; <nl> - setContentView(R.layout.files_folder_picker); <nl> - OCFileListFragment listOfFiles = new OCFileListFragment(); <nl> 
mmm RemoteOperationResult.java <nl> ppp RemoteOperationResult.java <nl> - private RemoteOperationResult(boolean success, int httpCode) { <nl> + public RemoteOperationResult(boolean success, int httpCode) { <nl> mmm FileSyncAdapter.java <nl> ppp FileSyncAdapter.java <nl> - import com.owncloud.android.authentication.AccountAuthenticator; <nl> 
mmm FileActivity.java <nl> ppp FileActivity.java <nl> + import com.owncloud.android.operations.UnshareLinkOperation; <nl> - } <nl> + } else if (operation instanceof UnshareLinkOperation) { <nl> + onUnshareLinkOperationFinish((UnshareLinkOperation)operation, result); <nl> + } <nl> + private void onUnshareLinkOperationFinish(UnshareLinkOperation operation, RemoteOperationResult result) { <nl> 
mmm PreviewMediaFragment.java <nl> ppp PreviewMediaFragment.java <nl> + item = menu.findItem(R.id.action_move); <nl> + if (item != null) { <nl> + item.setVisible(false); <nl> + item.setEnabled(false); <nl> + } <nl> mmm LogHistoryActivity.java <nl> ppp LogHistoryActivity.java <nl> - import java.io.BufferedReader; <nl> 
mmm UploadFilesActivity.java <nl> ppp UploadFilesActivity.java <nl> - import com.actionbarsherlock.app.SherlockFragmentActivity; <nl> - public class UploadFilesActivity extends SherlockFragmentActivity implements <nl> + public class UploadFilesActivity extends FileActivity implements <nl> - private Account mAccount; <nl> 
mmm PreviewImageActivity.java <nl> ppp PreviewImageActivity.java <nl> - private PreviewImagePagerAdapter mPreviewImagePagerAdapter; <nl> + private PreviewImagePagerAdapter mPreviewImagePagerAdapter; <nl> + private int mSavedPosition = 0; <nl> + private boolean mHasSavedPosition = false; <nl> - int position = mPreviewImagePagerAdapter.getFilePosition(getFile()); <nl> 
mmm ConflictsResolveActivity.java <nl> ppp ConflictsResolveActivity.java <nl> - import com.owncloud.android.db.UploadDbObject; <nl> - import com.owncloud.android.files.services.FileUploadService; <nl> + import com.owncloud.android.files.services.FileUploader; <nl> - Intent i = new Intent(getApplicationContext(), FileUploadService.class); <nl> 
mmm FileDataStorageManager.java <nl> ppp FileDataStorageManager.java <nl> - if (file.getParentId() != DataStorageManager.ROOT_PARENT_ID) <nl> + if (file.getParentId() != 0) <nl> - cv.put(ProviderTableMeta.FILE_ETAG, file.getEtag()); <nl> - if (file.getParentId() != DataStorageManager.ROOT_PARENT_ID) <nl> + if (file.getParentId() != 0) <nl> 
mmm RemoteOperation.java <nl> ppp RemoteOperation.java <nl> - if (listener == null) { <nl> - throw new IllegalArgumentException("Trying to execute a remote operation asynchronously without a listener to notiy the result"); <nl> - } <nl> - if (listenerHandler == null) { <nl> - throw new IllegalArgumentException("Trying to execute a remote operation asynchronously without a handler to the listener's thread"); <nl> 
mmm SynchronizeFileOperation.java <nl> ppp SynchronizeFileOperation.java <nl> - mServerFile.setFavorite(mLocalFile.isFavorite()); <nl> + mServerFile.setFavoriteStatus(mLocalFile.getFavoriteStatus()); <nl> mmm FileListListAdapter.java <nl> ppp FileListListAdapter.java <nl> - if (file.isFavorite() == OCFile.FavoriteStatus.NO_FAVORITE.getValue()) { <nl> 
mmm UploadFileOperation.java <nl> ppp UploadFileOperation.java <nl> + import java.util.HashSet; <nl> + import java.util.Set; <nl> + import android.accounts.Account; <nl> + private Account mAccount = null; <nl> - private OnDatatransferProgressListener mDataTransferListener = null; <nl> + private Set<OnDatatransferProgressListener> mDataTransferListeners = new HashSet<OnDatatransferProgressListener>(); <nl> 
mmm MainApp.java <nl> ppp MainApp.java <nl> + import android.app.Activity; <nl> + import android.os.Build; <nl> + import android.os.Bundle; <nl> + import com.owncloud.android.authentication.PassCodeManager; <nl> - implements OnItemClickListener, android.view.View.OnClickListener { <nl> + implements OnItemClickListener, android.view.View.OnClickListener, <nl> 
mmm CreateFolderTest.java <nl> ppp CreateFolderTest.java <nl> mmm TestActivity.java <nl> ppp TestActivity.java <nl> - import com.owncloud.android.oc_framework.operations.remote.RenameRemoteFileOperation; <nl> - 	private static final String mAccountHost = "beta.owncloud.com"; <nl> - 	private static final String mAccountUser = "testandroid"; <nl> 
mmm OperationsService.java <nl> ppp OperationsService.java <nl> + import com.owncloud.android.operations.MoveFileOperation; <nl> + public static final String EXTRA_NEW_PARENT_PATH = "NEW_PARENT_PATH"; <nl> + public static final String ACTION_MOVE_FILE = "MOVE_FILE"; <nl> + } else if (action.equals(ACTION_MOVE_FILE)) { <nl> 
mmm LogHistoryActivity.java <nl> ppp LogHistoryActivity.java <nl> - ActionBar actionBar = getSupportActionBar(); <nl> - actionBar.setIcon(DisplayUtils.getSeasonalIconId()); <nl> - actionBar.setDisplayHomeAsUpEnabled(true); <nl> + getSupportActionBar().setDisplayHomeAsUpEnabled(true); <nl> mmm ConfirmationDialogFragment.java <nl> 
mmm UnshareLinkOperation.java <nl> ppp UnshareLinkOperation.java <nl> - import android.content.Context; <nl> - import com.owncloud.android.lib.operations.remote.ExistenceCheckRemoteOperation; <nl> - private Context mContext; <nl> - public UnshareLinkOperation(OCFile file, Context context) { <nl> + public UnshareLinkOperation(OCFile file) { <nl> 
mmm ElasticsearchHttpStorage.java <nl> ppp ElasticsearchHttpStorage.java <nl> + import zipkin.internal.AsyncSpan2ConsumerAdapter; <nl> + import zipkin.internal.Span2Component; <nl> - public abstract class ElasticsearchHttpStorage implements StorageComponent { <nl> + public abstract class ElasticsearchHttpStorage extends Span2Component implements StorageComponent { <nl> 
mmm HttpElasticsearchTestGraph.java <nl> ppp HttpElasticsearchTestGraph.java <nl> - public AssumptionViolatedException ex; <nl> + AssumptionViolatedException ex; <nl> mmm NativeClient.java <nl> ppp NativeClient.java <nl> + import com.google.common.io.Resources; <nl> + import java.io.IOException; <nl> + import java.util.Properties; <nl> 
mmm SpanStoreSpanCollector.java <nl> ppp SpanStoreSpanCollector.java <nl> - void accept(List<Span> spans); <nl> + void accept(Iterator<Span> spans); <nl> + import java.util.Iterator; <nl> - public void accept(List<Span> spans) { <nl> + public void accept(Iterator<Span> spans) { <nl> mmm ZipkinServerConfiguration.java <nl> 
mmm ElasticsearchSpanConsumer.java <nl> ppp ElasticsearchSpanConsumer.java <nl> + import zipkin2.internal.Nullable; <nl> + final char indexTypeDelimiter; <nl> + this.indexTypeDelimiter = es.indexTypeDelimiter(); <nl> + String formatTypeAndTimestampForInsert(String type, long timestampMillis) { <nl> + return indexNameFormatter.formatTypeAndTimestampForInsert(type, indexTypeDelimiter, <nl> 

mmm QueryRequest.java <nl> ppp QueryRequest.java <nl> - package io.zipkin.query; <nl> + package io.zipkin.spanstore; <nl> mmm ZipkinServer.java <nl> ppp ZipkinServer.java <nl> - import io.zipkin.jdbc.JDBCZipkinQuery; <nl> - import io.zipkin.query.InMemoryZipkinQuery; <nl> - import io.zipkin.query.ZipkinQuery; <nl> 
mmm KafkaCollector.java <nl> ppp KafkaCollector.java <nl> + import zipkin2.collector.handler.CollectedSpanHandler; <nl> - @Override <nl> - public Builder storage(StorageComponent storage) { <nl> - delegate.storage(storage); <nl> + @Override public Builder sampler(CollectorSampler sampler) { <nl> + this.delegate.sampler(sampler); <nl> 
mmm Z.java <nl> ppp Z.java <nl> - 			String[] querySplit = Util.split(query, ';'); <nl> + 			String escapeSeq = "\"',;<%>!"; <nl> + 			char escapeChar = '\\'; <nl> + 			String [] blockStart = new String[]{ "\"", "'", "<%", "<", "N_<", "!"}; <nl> + 			String [] blockEnd = new String[]{ "\"", "'", "%>", ";", "N_>", ";" }; <nl> 
mmm HiveZeppelinDriver.java <nl> ppp HiveZeppelinDriver.java <nl> - import com.nflabs.zeppelin.driver.ZeppelinDriver; <nl> + import com.nflabs.zeppelin.driver.ZeppelinDriver; <nl> - 	 <nl> mmm ShellExecStatement.java <nl> ppp ShellExecStatement.java <nl> - package com.nflabs.zeppelin.zengine.api; <nl> + package com.nflabs.zeppelin.zengine; <nl> 
mmm PythonInterpreterPandasSqlTest.java <nl> ppp PythonInterpreterPandasSqlTest.java <nl> + * Licensed to the Apache Software Foundation (ASF) under one or more <nl> + * contributor license agreements.  See the NOTICE file distributed with <nl> + * this work for additional information regarding copyright ownership. <nl> 
mmm InterpreterFactory.java <nl> ppp InterpreterFactory.java <nl> - interpreterGroup.destroy(key); <nl> mmm RemoteInterpreterTest.java <nl> ppp RemoteInterpreterTest.java <nl> - intpGroup.destroy(); <nl> mmm InterpreterSetting.java <nl> ppp InterpreterSetting.java <nl> - groupToRemove.destroy(); <nl> mmm FlinkInterpreterTest.java <nl> 
mmm Job.java <nl> ppp Job.java <nl> - 		PENDING, <nl> new file <nl> ppp AbstractTestRestApi.java <nl> + package com.nflabs.zeppelin.rest; <nl> + import java.io.IOException; <nl> + import java.lang.ref.WeakReference; <nl> + import java.util.concurrent.ExecutorService; <nl> + import java.util.concurrent.Executors; <nl> 
mmm ZTest.java <nl> ppp ZTest.java <nl> - 		HiveZeppelinDriver driver = new HiveZeppelinDriver(Z.conf()); <nl> + 		HiveZeppelinDriver driver = new HiveZeppelinDriver(Z.getConf()); <nl> mmm ZeppelinServer.java <nl> ppp ZeppelinServer.java <nl> - 		if(Z.conf().getString(ConfVars.ZEPPELIN_JOB_SCHEDULER).equals("FIFO")){ <nl> 
mmm ZeppelinHubRealm.java <nl> ppp ZeppelinHubRealm.java <nl> + import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.utils.ZeppelinhubUtils; <nl> - UserSessionContainer.instance.setSession(account.login, userSession); <nl> - HashSet<String> userAndRoles = new HashSet<String>(); <nl> - userAndRoles.add(account.login); <nl> 
mmm FileSystemRecoveryStorageTest.java <nl> ppp FileSystemRecoveryStorageTest.java <nl> + import org.junit.After; <nl> - @Override <nl> + @After <nl> + System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_RECOVERY_STORAGE_CLASS.getVarName(), <nl> + ZeppelinConfiguration.ConfVars.ZEPPELIN_RECOVERY_STORAGE_CLASS.getStringValue()); <nl> 
mmm NoteManager.java <nl> ppp NoteManager.java <nl> - import org.apache.zeppelin.scheduler.Job; <nl> + import javax.inject.Inject; <nl> + import javax.inject.Singleton; <nl> + @Singleton <nl> + @Inject <nl> - this.notebookRepo.save(note, subject); <nl> mmm VFSNotebookRepo.java <nl> ppp VFSNotebookRepo.java <nl> 
new file <nl> ppp MockReplFactory.java <nl> + package com.nflabs.zeppelin.repl; <nl> + import java.util.Properties; <nl> + import com.nflabs.zeppelin.conf.ZeppelinConfiguration; <nl> + public class MockReplFactory extends ReplFactory { <nl> + 	public MockReplFactory(ZeppelinConfiguration conf) { <nl> + 		super(conf); <nl> 
mmm DoraemonInterceptor.java <nl> ppp DoraemonInterceptor.java <nl> - package com.didichuxing.doraemonkit.kit.network.okhttp; <nl> + package com.didichuxing.doraemonkit.kit.network.okhttp.interceptor; <nl> - Request request = chain.request(); <nl> - return chain.proceed(request); <nl> + Request request = chain.request(); <nl> 
mmm Service.java <nl> ppp Service.java <nl> + import rx.Observable; <nl> + import org.web3j.protocol.websocket.events.Notification; <nl> 
mmm SolidityFunctionWrapper.java <nl> ppp SolidityFunctionWrapper.java <nl> + import java.util.HashSet; <nl> + import java.util.Set; <nl> - import org.web3j.abi.EventValues; <nl> + private static final String FUNC_NAME_PREFIX = "FUNC_"; <nl> + classBuilder.addFields(buildFuncNameConstants(abi)); <nl> - buildEventFunctions(functionDefinition, classBuilder); <nl> 
mmm Sign.java <nl> ppp Sign.java <nl> - byte v = (byte) headerByte; <nl> + byte[] v = new byte[]{(byte) headerByte}; <nl> - int header = signatureData.getV() & 0xFF; <nl> + int header = signatureData.getV()[0] & 0xFF; <nl> - private final byte v; <nl> + private final byte[] v; <nl> + this(new byte[]{v}, r, s); <nl> 
mmm ProjectImporter.java <nl> ppp ProjectImporter.java <nl> - import java.util.Arrays; <nl> - if (args.length > 0 && args[0].equals(COMMAND_INTERACTIVE)) { <nl> - final InteractiveImporter options = new InteractiveImporter(); <nl> - final List<String> stringOptions = new ArrayList<>(); <nl> - stringOptions.add("-n"); <nl> 
new file <nl> ppp Bip44WalletUtilsTest.java <nl> + package org.web3j.crypto; <nl> + import java.io.File; <nl> + import org.junit.After; <nl> + import org.junit.Before; <nl> + import org.junit.Test; <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.web3j.crypto.Bip32Test.addChecksum; <nl> 
mmm Fibonacci.java <nl> ppp Fibonacci.java <nl> - Arrays.<TypeReference<?>>asList(), <nl> mmm PublicResolver.java <nl> ppp PublicResolver.java <nl> - Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}), <nl> - Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {})); <nl> + Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>() {})); <nl> 
mmm UtilsTest.java <nl> ppp UtilsTest.java <nl> + import org.web3j.abi.datatypes.generated.StaticArray2; <nl> + @Test <nl> + public void testTypeMapNested() { <nl> + List<BigInteger> innerList1 = Arrays.asList(BigInteger.valueOf(1), BigInteger.valueOf(2)); <nl> + List<BigInteger> innerList2 = Arrays.asList(BigInteger.valueOf(3), BigInteger.valueOf(4)); <nl> 
mmm JSONTarget.java <nl> ppp JSONTarget.java <nl> - public abstract class JSONTarget { <nl> + public abstract class JSONTarget<R> { <nl> - public abstract Object getResult(); <nl> + public abstract R getResult(); <nl> mmm JSONValidationTarget.java <nl> ppp JSONValidationTarget.java <nl> - public abstract class JSONValidationTarget extends JSONTarget { <nl> 
mmm Database.java <nl> ppp Database.java <nl> + if(mvStore != null) { <nl> + mvStore.getTransactionStore().init(); <nl> + } <nl> - if(mvStore != null) { <nl> - mvStore.getTransactionStore().init(systemSession); <nl> - } <nl> mmm AlterTableAddConstraint.java <nl> ppp AlterTableAddConstraint.java <nl> - for (Index index : createdIndexes) { <nl> 
new file <nl> ppp AlterDomainAddConstraint.java <nl> + package org.h2.command.ddl; <nl> + import org.h2.api.ErrorCode; <nl> + import org.h2.command.CommandInterface; <nl> + import org.h2.constraint.ConstraintDomain; <nl> + import org.h2.engine.Database; <nl> + import org.h2.engine.Domain; <nl> + import org.h2.engine.Session; <nl> 
mmm Table.java <nl> ppp Table.java <nl> + private ArrayList<TableView> views; <nl> - private boolean tableExpression; <nl> - private boolean isBeingDropped; <nl> + @SuppressWarnings("unused") <nl> + @SuppressWarnings("unused") <nl> + @SuppressWarnings("unused") <nl> + @SuppressWarnings("unused") <nl> + @SuppressWarnings("unused") <nl> 
mmm WindowFrame.java <nl> ppp WindowFrame.java <nl> - private abstract class Itr implements Iterator<Value[]> { <nl> + private static abstract class Itr implements Iterator<Value[]> { <nl> - private final class PlainItr extends Itr { <nl> + private static final class PlainItr extends Itr { <nl> - private final class PlainReverseItr extends Itr { <nl> 
mmm TestKillRestart.java <nl> ppp TestKillRestart.java <nl> - import java.io.IOException; <nl> - import java.lang.reflect.Field; <nl> - import java.util.concurrent.CountDownLatch; <nl> - import java.util.concurrent.TimeUnit; <nl> - waitForTimeout(p); <nl> + p.waitFor(); <nl> - private static void waitForTimeout(final Process p) <nl> 
mmm Parser.java <nl> ppp Parser.java <nl> - Query query; <nl> - session.setParsingView(true); <nl> - try { <nl> - query = parseSelect(); <nl> - query.prepare(); <nl> - } finally { <nl> - session.setParsingView(false); <nl> - } <nl> + Query query = parseSelect(); <nl> + query.prepare(); <nl> mmm Table.java <nl> ppp Table.java <nl> 
mmm TestDataUtils.java <nl> ppp TestDataUtils.java <nl> - assertEquals(-1, DataUtils.getFletcher32(data, i)); <nl> + assertEquals(-1, DataUtils.getFletcher32(data, 0, i)); <nl> - assertEquals(-1, DataUtils.getFletcher32(data, i)); <nl> + assertEquals(-1, DataUtils.getFletcher32(data, 0, i)); <nl> - int a = DataUtils.getFletcher32(data, i); <nl> 
mmm Session.java <nl> ppp Session.java <nl> - if (SysProperties.CHECK2) { <nl> - if (this == getDatabase().getLobSession() <nl> - && !Thread.holdsLock(this) && !Thread.holdsLock(getDatabase())) { <nl> - throw DbException.throwInternalError(); <nl> - } <nl> - } <nl> + assert this != getDatabase().getLobSession() || Thread.holdsLock(this) || Thread.holdsLock(getDatabase()); <nl> 
mmm Data.java <nl> ppp Data.java <nl> - return type == ARRAY ? ValueArray.get(list) : ValueRow.get(list); <nl> + return type == ARRAY ? ValueArray.get(list, null) : ValueRow.get(list); <nl> mmm TestValue.java <nl> ppp TestValue.java <nl> - v = ValueArray.get(new Value[] { ValueVarchar.get("hello"), ValueVarchar.get("world") }); <nl> 
mmm TestAll.java <nl> ppp TestAll.java <nl> + import org.h2.test.unit.TestSubqueryPerformanceOnLazyExecutionMode; <nl> + addTest(new TestSubqueryPerformanceOnLazyExecutionMode()); <nl> mmm MVMap.java <nl> ppp MVMap.java <nl> - private static long getVersion(RootReference rootReference) { <nl> + private long getVersion(RootReference rootReference) { <nl> 
mmm FunctionsMySQL.java <nl> ppp FunctionsMySQL.java <nl> - import org.h2.engine.Database; <nl> - public static Function getFunction(Database database, String upperName) { <nl> + public static Function getFunction(String upperName) { <nl> - return info != null ? new FunctionsMySQL(database, info) : null; <nl> 
mmm Page.java <nl> ppp Page.java <nl> + import static org.h2.engine.Constants.MEMORY_ARRAY; <nl> + import static org.h2.engine.Constants.MEMORY_OBJECT; <nl> + import static org.h2.engine.Constants.MEMORY_POINTER; <nl> + import static org.h2.mvstore.DataUtils.PAGE_TYPE_LEAF; <nl> + import java.util.ArrayList; <nl> 
mmm TestFunctions.java <nl> ppp TestFunctions.java <nl> - public static Object[] getArray() { <nl> - return new Object[] { "0", "Hello" }; <nl> + public static String[] getArray() { <nl> + return new String[] { "0", "Hello" }; <nl> - public static Object[] dynamic(Object[] args) { <nl> + public static String[] dynamic(String[] args) { <nl> 
mmm ValueDataType.java <nl> ppp ValueDataType.java <nl> + import org.h2.util.JdbcUtils; <nl> + private static final int CUSTOM_DATA_TYPE = 133; <nl> + if (JdbcUtils.customDataTypesHandler != null) { <nl> + byte[] b = v.getBytesNoCopy(); <nl> + buff.put((byte)CUSTOM_DATA_TYPE). <nl> + putVarInt(type). <nl> + putVarInt(b.length). <nl> 
mmm ValueDataType.java <nl> ppp ValueDataType.java <nl> + import org.h2.mvstore.rtree.Spatial; <nl> - import org.h2.mvstore.rtree.SpatialKey; <nl> - spatialType = new SpatialDataType(2); <nl> + spatialType = new SpatialDataType(2) { <nl> + @Override <nl> + protected Spatial create(long id, float... minMax) { <nl> 
mmm Session.java <nl> ppp Session.java <nl> - private Deque<String> viewNameStack = new ArrayDeque<String>(); <nl> + private Deque<String> viewNameStack = new ArrayDeque<String>(); <nl> - } <nl> + } <nl> - database.unlockMeta(this); <nl> + database.unlockMeta(this); <nl> mmm Parser.java <nl> ppp Parser.java <nl> 
deleted file <nl> mmm MemoryUnmapper.java <nl> - package org.h2.util; <nl> - import java.lang.reflect.Field; <nl> - import java.lang.reflect.Method; <nl> - import java.nio.ByteBuffer; <nl> - import org.h2.engine.SysProperties; <nl> - public final class MemoryUnmapper { <nl> - private static final boolean ENABLED; <nl> 
mmm FullTextLucene.java <nl> ppp FullTextLucene.java <nl> - private void commitIndex() throws SQLException { <nl> + void commitIndex() throws SQLException { <nl> - private IndexAccess(IndexWriter writer) throws IOException { <nl> + IndexAccess(IndexWriter writer) throws IOException { <nl> - private synchronized IndexSearcher getSearcher() { <nl> 
mmm SequenceOptions.java <nl> ppp SequenceOptions.java <nl> + import org.h2.api.ErrorCode; <nl> + import org.h2.message.DbException; <nl> + import org.h2.value.TypeInfo; <nl> + private TypeInfo dataType; <nl> + private long[] bounds; <nl> + public TypeInfo getDataType() { <nl> + return dataType; <nl> + } <nl> 
mmm Function.java <nl> ppp Function.java <nl> - package org.h2.expression; <nl> + package org.h2.expression.function; <nl> + import org.h2.expression.Expression; <nl> + import org.h2.expression.ExpressionColumn; <nl> + import org.h2.expression.ExpressionVisitor; <nl> + import org.h2.expression.SequenceValue; <nl> 
mmm ValueLong.java <nl> ppp ValueLong.java <nl> - public Value divide(Value v, long divisorPrecision) { <nl> + public Value divide(Value v) { <nl> mmm ValueShort.java <nl> ppp ValueShort.java <nl> - public Value divide(Value v, long divisorPrecision) { <nl> + public Value divide(Value v) { <nl> mmm ValueDouble.java <nl> 
mmm TxDecisionMaker.java <nl> ppp TxDecisionMaker.java <nl> - protected     long           lastOperationId; <nl> + private       long           lastOperationId; <nl> - } else if (id == lastOperationId) { <nl> + } else if (isRepeatedOperation(id)) { <nl> - lastOperationId = id; <nl> - final MVMap.Decision setDecision(MVMap.Decision d) { <nl> 
deleted file <nl> mmm TestSubqueryPerformanceOnLazyExecutionMode.java <nl> - package org.h2.test.unit; <nl> - import org.h2.command.dml.SetTypes; <nl> - import org.h2.test.TestBase; <nl> - import org.h2.test.TestDb; <nl> - import java.sql.Connection; <nl> - import java.sql.PreparedStatement; <nl> - import java.sql.ResultSet; <nl> 
mmm ValueNull.java <nl> ppp ValueNull.java <nl> + import org.h2.engine.Mode; <nl> + return convert(v, null); <nl> + } <nl> + public Value convert(Value v, Mode mode) { <nl> - return v.convertTo(type); <nl> + return v.convertTo(type, MathUtils.convertLongToInt(precision), mode); <nl> mmm Mode.java <nl> ppp Mode.java <nl> 
mmm TableValueConstructor.java <nl> ppp TableValueConstructor.java <nl> + import org.h2.engine.Constants; <nl> - visibleColumnCount = rows.get(0).size(); <nl> + if ((visibleColumnCount = rows.get(0).size()) > Constants.MAX_COLUMNS) { <nl> + throw DbException.get(ErrorCode.TOO_MANY_COLUMNS_1, "" + Constants.MAX_COLUMNS); <nl> 
mmm MVMap.java <nl> ppp MVMap.java <nl> + import java.util.HashMap; <nl> - * @param id map id <nl> - * @param createVersion version in which this map was created <nl> + * @param config the configuration <nl> - protected void init(MVStore store, int id, long createVersion) { <nl> + protected void init(MVStore store, HashMap<String, Object> config) { <nl> 
mmm MVTable.java <nl> ppp MVTable.java <nl> - if (!(c.getConstraintType().equals(Constraint.REFERENTIAL))) { <nl> + if (c.getConstraintType() != Constraint.Type.REFERENTIAL) { <nl> mmm ConstraintReferential.java <nl> ppp ConstraintReferential.java <nl> - public String getConstraintType() { <nl> - return Constraint.REFERENTIAL; <nl> 
mmm LobStorageInterface.java <nl> ppp LobStorageInterface.java <nl> - import org.h2.value.Value; <nl> - Value createClob(Reader reader, long maxLength); <nl> + ValueLob createClob(Reader reader, long maxLength); <nl> - Value createBlob(InputStream in, long maxLength); <nl> + ValueLob createBlob(InputStream in, long maxLength); <nl> 
deleted file <nl> mmm Function.java <nl> - package org.h2.expression.function; <nl> - import java.math.BigDecimal; <nl> - import java.math.MathContext; <nl> - import java.util.HashMap; <nl> - import java.util.regex.Pattern; <nl> - import org.h2.api.ErrorCode; <nl> - import org.h2.engine.Database; <nl> - import org.h2.engine.Mode.ModeEnum; <nl> 
mmm TestCases.java <nl> ppp TestCases.java <nl> - "set default ifnull((select max(id) from test)+1, 0)"); <nl> + "set default ifnull((select max(id) from test for update)+1, 0)"); <nl> mmm DbSettings.java <nl> ppp DbSettings.java <nl> + public final boolean selectForUpdateMvcc = get("SELECT_FOR_UPDATE_MVCC", true); <nl> 
mmm FileStore.java <nl> ppp FileStore.java <nl> - try { <nl> - if(file != null && file.isOpen()) { <nl> + if(file != null) { <nl> + try { <nl> + fileLock = null; <nl> + freeSpace.clear(); <nl> + } catch (Exception e) { <nl> + throw DataUtils.newIllegalStateException( <nl> + DataUtils.ERROR_WRITING_FAILED, <nl> 
deleted file <nl> mmm CreateSynonym.java <nl> - package org.h2.command.ddl; <nl> - import org.h2.api.ErrorCode; <nl> - import org.h2.command.CommandInterface; <nl> - import org.h2.engine.Database; <nl> - import org.h2.engine.Session; <nl> - import org.h2.message.DbException; <nl> - import org.h2.schema.Schema; <nl> 
mmm TestDataPage.java <nl> ppp TestDataPage.java <nl> - rs.addColumn("ID", "ID", Value.INT, 0, 0, ValueInt.DISPLAY_SIZE); <nl> - rs.addColumn("NAME", "NAME", Value.STRING, 255, 0, 255); <nl> + rs.addColumn("ID", "ID", Value.INT, 0, 0); <nl> + rs.addColumn("NAME", "NAME", Value.STRING, 255, 0); <nl> mmm ValueDataType.java <nl> 
mmm MVStore.java <nl> ppp MVStore.java <nl> - return m == null ? null : DataUtils.parseMap(m).get("name"); <nl> + return m == null ? null : DataUtils.getMapName(m); <nl> + Object o; <nl> - return new JdbcClob(this, v, id); <nl> + o = new JdbcClob(this, v, id); <nl> + break; <nl> - return new JdbcBlob(this, v, id); <nl> 
mmm DropDatabase.java <nl> ppp DropDatabase.java <nl> + list.addAll(db.getAllSchemaObjects(DbObject.DOMAIN)); <nl> mmm Schema.java <nl> ppp Schema.java <nl> - import org.h2.engine.Domain; <nl> mmm AlterDomainDropConstraint.java <nl> ppp AlterDomainDropConstraint.java <nl> - import org.h2.engine.Domain; <nl> + import org.h2.schema.Domain; <nl> 
mmm Build.java <nl> ppp Build.java <nl> - public class TransactionMap<K, V> { <nl> + public class TransactionMap<K, V> extends AbstractMap<K, V> { <nl> + @Override <nl> + public final int size() { <nl> + long size = sizeAsLong(); <nl> + return size > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) size; <nl> + } <nl> 
mmm TestScript.java <nl> ppp TestScript.java <nl> - "script", "select", "show", "with" }) { <nl> + "script", "select", "show", "table", "with" }) { <nl> mmm ParserUtil.java <nl> ppp ParserUtil.java <nl> + public static final int TABLE = SELECT + 1; <nl> - public static final int TRUE = SELECT + 1; <nl> + public static final int TRUE = TABLE + 1; <nl> 
mmm MultiVersionIndex.java <nl> ppp MultiVersionIndex.java <nl> - public int getRootPageId() { <nl> - return base.getRootPageId(); <nl> - } <nl> - public int compareKeys(SearchRow rowData, SearchRow compare) { <nl> - return base.compareKeys(rowData, compare); <nl> - } <nl> - public String getColumnListSQL() { <nl> 
mmm TcpServerThread.java <nl> ppp TcpServerThread.java <nl> - ci.setProperty("IFEXISTS", "TRUE"); <nl> + ci.setProperty("FORBID_CREATION", "TRUE"); <nl> mmm WebServer.java <nl> ppp WebServer.java <nl> - databaseUrl += ";IFEXISTS=TRUE"; <nl> + databaseUrl += ";FORBID_CREATION=TRUE"; <nl> mmm Shell.java <nl> ppp Shell.java <nl> 

mmm ConsulEcwidClient.java <nl> ppp ConsulEcwidClient.java <nl> - 	public static ConsulClient client; <nl> + public static ConsulClient client; <nl> - 	public ConsulEcwidClient(String host, int port) { <nl> - 		super(host, port); <nl> - 		client = new ConsulClient(host + ":" + port); <nl> - 		LoggerUtil.info("ConsulEcwidClient init finish. client host:" + host <nl> 
new file <nl> ppp TraceableRequest.java <nl> + package com.weibo.api.motan.rpc; <nl> + import java.util.concurrent.Executor; <nl> + public interface TraceableRequest extends Request { <nl> + long getStartTime(); <nl> + void setStartTime(long startTime); <nl> + long getEndTime(); <nl> + void addTraceInfo(String key, String value); <nl> 
new file <nl> ppp NettyHttpRequestHandler.java <nl> + package com.weibo.api.motan.transport.netty4.http; <nl> + import io.netty.buffer.Unpooled; <nl> + import io.netty.channel.ChannelHandler.Sharable; <nl> + import io.netty.channel.ChannelHandlerContext; <nl> + import io.netty.channel.SimpleChannelInboundHandler; <nl> 
mmm ServerController.java <nl> ppp ServerController.java <nl> + import org.springframework.beans.factory.annotation.Autowired; <nl> - import javax.annotation.Resource; <nl> + import java.util.Map; <nl> + package com.weibo.dao; <nl> + import com.weibo.api.motan.util.LoggerUtil; <nl> + import com.weibo.utils.ManagerConstants; <nl> 
mmm EEConcurrentDefaultBindingProcessor.java <nl> ppp EEConcurrentDefaultBindingProcessor.java <nl> - import org.jboss.as.ee.component.Attachments; <nl> - import org.jboss.as.ee.component.BindingConfiguration; <nl> - import org.jboss.as.ee.component.ComponentDescription; <nl> - import org.jboss.as.ee.component.ComponentNamingMode; <nl> 
mmm CodecSessionConfig.java <nl> ppp CodecSessionConfig.java <nl> + private static final AttachmentKey<Boolean> SESSION_ID_SET = AttachmentKey.create(Boolean.class); <nl> - private static final AttachmentKey<Boolean> SESSION_ID_SET = AttachmentKey.create(Boolean.class); <nl> - this.config.setSessionId(exchange, this.codec.encode(sessionId)); <nl> 
mmm TracingCDIExtension.java <nl> ppp TracingCDIExtension.java <nl> + import java.util.Collections; <nl> + import java.util.Map; <nl> + import java.util.WeakHashMap; <nl> - import javax.enterprise.inject.spi.BeanManager; <nl> - import javax.enterprise.inject.spi.BeforeBeanDiscovery; <nl> + import javax.enterprise.inject.spi.AfterBeanDiscovery; <nl> 
new file <nl> ppp ConfigurationHelper.java <nl> + package org.wildfly.extension.messaging.activemq; <nl> + import static org.wildfly.extension.messaging.activemq.BridgeAdd.createBridgeConfiguration; <nl> + import static org.wildfly.extension.messaging.activemq.CommonAttributes.DURABLE; <nl> + import static org.wildfly.extension.messaging.activemq.CommonAttributes.FILTER; <nl> 
mmm QueueAdd.java <nl> ppp QueueAdd.java <nl> - import org.apache.activemq.artemis.api.core.RoutingType; <nl> - import static org.wildfly.extension.messaging.activemq.QueueDefinition.ROUTING_TYPE; <nl> + @Ignore("WFLY-11670") <nl> mmm MessagingSubsystemParser_6_0.java <nl> ppp MessagingSubsystemParser_6_0.java <nl> 
mmm EjbSecurityDomainSetup.java <nl> ppp EjbSecurityDomainSetup.java <nl> - if (System.getProperty("elytron") == null) { <nl> + if (System.getProperty("elytron") == null && System.getProperty("ts.ee9") == null) { <nl> mmm AbstractValidationUnitTest.java <nl> ppp AbstractValidationUnitTest.java <nl> + result = result.replace("${jboss.messaging.connector.host:localhost}", "localhost"); <nl> 
deleted file <nl> mmm InfinispanRegionFactory.java <nl> - package org.jboss.as.jpa.hibernate5.infinispan; <nl> - @Deprecated <nl> - public class InfinispanRegionFactory extends DeprecatedInfinispanRegionFactory { <nl> - private static final long serialVersionUID = 6526170943015350422L; <nl> - public InfinispanRegionFactory() { <nl> 
mmm TransactionFirstPhaseErrorTestCase.java <nl> ppp TransactionFirstPhaseErrorTestCase.java <nl> - import org.jboss.as.test.integration.transactions.TransactionTestLookupUtil; <nl> + import org.jboss.as.test.integration.transactions.RemoteLookups; <nl> - .addPackage(TestLastResource.class.getPackage()) <nl> 
mmm FineSessionExpirationTestCase.java <nl> ppp FineSessionExpirationTestCase.java <nl> + import org.infinispan.transaction.TransactionMode; <nl> - import org.jboss.arquillian.junit.Arquillian; <nl> - import org.junit.runner.RunWith; <nl> - @RunWith(Arquillian.class) <nl> + public FineSessionExpirationTestCase() { <nl> 
new file <nl> ppp SingletonElectionListener.java <nl> + package org.wildfly.clustering.singleton; <nl> + import java.util.List; <nl> + import org.wildfly.clustering.group.Node; <nl> + public interface SingletonElectionListener { <nl> + void elected(List<Node> candidateMembers, Node electedMember); <nl> + } <nl> 
mmm XSDValidationUnitTestCase.java <nl> ppp XSDValidationUnitTestCase.java <nl> + import static org.junit.Assert.assertNotNull; <nl> + import java.io.File; <nl> + import java.io.IOException; <nl> + import java.net.URL; <nl> + import java.net.URLClassLoader; <nl> + import java.nio.file.FileVisitResult; <nl> + import java.nio.file.Files; <nl> 
new file <nl> ppp SubsystemConfigurationTestCase.java <nl> + package org.wildfly.test.integration.microprofile.opentracing; <nl> + import static org.jboss.as.test.shared.ServerReload.executeReloadAndWaitForCompletion; <nl> + import io.opentracing.noop.NoopTracer; <nl> + import java.net.URL; <nl> + import org.apache.http.HttpResponse; <nl> 
deleted file <nl> mmm Time.java <nl> - package org.wildfly.clustering.ejb; <nl> - import java.util.concurrent.TimeUnit; <nl> - public class Time { <nl> - private final long value; <nl> - private final TimeUnit unit; <nl> - public Time(long value, TimeUnit unit) { <nl> - this.value = value; <nl> - this.unit = unit; <nl> 
mmm DirConfigSourceRegistrationService.java <nl> ppp DirConfigSourceRegistrationService.java <nl> - import org.jboss.msc.service.Service; <nl> + import org.jboss.msc.Service; <nl> - class DirConfigSourceService implements Service<ConfigSource> { <nl> + class DirConfigSourceRegistrationService implements Service { <nl> 
mmm ProxyConfigurationResourceDefinition.java <nl> ppp ProxyConfigurationResourceDefinition.java <nl> - import org.jboss.as.clustering.controller.AttributeValueTranslator; <nl> - private static final AttributeTranslation SIMPLE_LOAD_PROVIDER_TRANSLATION = new AttributeTranslation() { <nl> + private AttributeTranslation SIMPLE_LOAD_PROVIDER_TRANSLATION = new AttributeTranslation() { <nl> 
mmm JMSTopicService.java <nl> ppp JMSTopicService.java <nl> - import org.apache.activemq.artemis.jms.client.ActiveMQTopic; <nl> + import org.apache.activemq.artemis.jms.client.ActiveMQDestination; <nl> - this.name = name; <nl> + if (name.startsWith(JMS_TOPIC_PREFIX)) { <nl> + this.name = name.substring(JMS_TOPIC_PREFIX.length()); <nl> 
deleted file <nl> mmm MicroProfileOpenAPISubsystemTestCase.java <nl> - package org.wildfly.extension.microprofile.openapi; <nl> - import java.io.IOException; <nl> - import java.util.EnumSet; <nl> - import java.util.Locale; <nl> - import org.jboss.as.subsystem.test.AbstractSubsystemBaseTest; <nl> - import org.junit.Test; <nl> 
mmm InfinispanBeanManager.java <nl> ppp InfinispanBeanManager.java <nl> - Duration stopTimeout = Duration.ofMillis(this.cache.getCacheConfiguration().transaction().cacheStopTimeout()); <nl> - schedulers.add(new BeanExpirationScheduler<>(this.dispatcherFactory.getGroup(), this.batcher, this.beanFactory, this.expiration, new ExpiredBeanRemover<>(this.beanFactory, this.expiration), stopTimeout)); <nl> 
mmm JaccService.java <nl> ppp JaccService.java <nl> - package org.jboss.as.security.service; <nl> + package org.jboss.as.ee.security; <nl> - import static org.jboss.as.security.service.SecurityBootstrapService.JACC_MODULE; <nl> + import static org.jboss.as.ee.logging.EeLogger.ROOT_LOGGER; <nl> + import static org.wildfly.common.Assert.checkNotNullParam; <nl> 
mmm ElytronSSOServerSetupTask.java <nl> ppp ElytronSSOServerSetupTask.java <nl> - boolean hasApplicationSecurityDomain = Boolean.getBoolean("ts.layers") <nl> - || Boolean.getBoolean("ts.standalone.microprofile") <nl> - || Boolean.getBoolean("ts.bootable") <nl> - || Boolean.getBoolean("ts.ee9"); <nl> + boolean layersTest = Boolean.getBoolean("ts.layers") || Boolean.getBoolean("ts.standalone.microprofile") || Boolean.getBoolean("ts.bootable"); <nl> 
new file <nl> ppp PureProxyApiService.java <nl> + package org.jboss.as.test.integration.management.deploy.runtime.jaxrs; <nl> + import javax.ws.rs.GET; <nl> + import javax.ws.rs.Path; <nl> + import javax.ws.rs.PathParam; <nl> + @Path("pure/proxy") <nl> + public interface PureProxyApiService { <nl> + @Path("test/{a}/{b}") <nl> 
mmm HttpsListenerAdd.java <nl> ppp HttpsListenerAdd.java <nl> - return new HttpsListenerService(name, serverName, listenerBuilder.getMap(), cipherSuites, builder.getMap(), certificateForwarding, proxyAddressForwarding, proxyProtocol); <nl> + return new HttpsListenerService(context.getCurrentAddress(), serverName, listenerBuilder.getMap(), cipherSuites, builder.getMap(), certificateForwarding, proxyAddressForwarding, proxyProtocol); <nl> 
mmm TopologyChangeListenerBean.java <nl> ppp TopologyChangeListenerBean.java <nl> + import javax.naming.Context; <nl> + import javax.naming.InitialContext; <nl> + import javax.naming.NamingException; <nl> + import org.infinispan.manager.EmbeddedCacheManager; <nl> - import org.jboss.as.server.CurrentServiceContainer; <nl> 
mmm LoadBalanceListenerExecutor.java <nl> ppp LoadBalanceListenerExecutor.java <nl> + * <nl> - import java.util.List; <nl> - import org.springframework.beans.factory.annotation.Autowired; <nl> + import org.springframework.beans.factory.annotation.Autowired; <nl> + import java.util.List; <nl> - @Autowired <nl> 
mmm ListActivity.java <nl> ppp ListActivity.java <nl> - import android.arch.lifecycle.LiveData; <nl> - import android.arch.lifecycle.Observer; <nl> - import android.support.annotation.NonNull; <nl> + import android.os.Handler; <nl> - import org.havenapp.main.database.HavenEventDB; <nl> - import org.havenapp.main.database.async.EventDeleteAllAsync; <nl> 
deleted file <nl> mmm EventTrigger.java <nl> - package org.havenapp.main.model; <nl> - import android.content.Context; <nl> - import com.orm.SugarRecord; <nl> - import org.havenapp.main.R; <nl> - import java.util.Date; <nl> - public class EventTrigger extends SugarRecord { <nl> - private int mType; <nl> - private Date mTime; <nl> 
mmm MonitorService.java <nl> ppp MonitorService.java <nl> - StringTokenizer st = new StringTokenizer(mPrefs.getSmsNumber(), ","); <nl> + StringTokenizer st = new StringTokenizer(mPrefs.getRemotePhoneNumber(), ","); <nl> - } else if (mPrefs.getSmsActivation()) { <nl> - SmsManager manager = SmsManager.getDefault(); <nl> 
mmm SetUserPictureCmd.java <nl> ppp SetUserPictureCmd.java <nl> - import org.activiti.engine.impl.persistence.entity.UserEntity; <nl> 
mmm AppModel.java <nl> ppp AppModel.java <nl> + protected String key; <nl> + protected String name; <nl> + protected String description; <nl> + public String getKey() { <nl> + return key; <nl> + } <nl> + public void setKey(String key) { <nl> + this.key = key; <nl> + } <nl> + public String getName() { <nl> + return name; <nl> 
mmm ExecutionEntityManagerImpl.java <nl> ppp ExecutionEntityManagerImpl.java <nl> + import org.flowable.engine.common.impl.Page; <nl> mmm AbstractNativeQuery.java <nl> ppp AbstractNativeQuery.java <nl> + import java.io.Serializable; <nl> + import java.util.HashMap; <nl> + import java.util.Objects; <nl> + import org.apache.commons.lang3.StringUtils; <nl> 
mmm ExecuteDecisionBuilder.java <nl> ppp ExecuteDecisionBuilder.java <nl> - ExecuteDecisionBuilder fallbackToDefaultTenant(); <nl> mmm DecisionTaskJsonConverter.java <nl> ppp DecisionTaskJsonConverter.java <nl> - boolean fallbackToDefaultTenant = getPropertyValueAsBoolean(PROPERTY_DECISIONTABLE_FALLBACK_TO_DEFAULT_TENANT, elementNode); <nl> 
mmm DmnXMLConstants.java <nl> ppp DmnXMLConstants.java <nl> + public static final String ELEMENT_INPUT_VALUES = "inputValues"; <nl> mmm MvelExecutionContextBuilder.java <nl> ppp MvelExecutionContextBuilder.java <nl> + import org.flowable.engine.common.api.FlowableException; <nl> + import org.joda.time.LocalDate; <nl> 
mmm DebugProcessOperationTest.java <nl> ppp DebugProcessOperationTest.java <nl> - Job job = managementService.createSuspendedJobQuery().handlerType("breakpoint").singleResult(); <nl> + Job job = managementService.createDeadLetterJobQuery().handlerType("breakpoint").singleResult(); <nl> - Job activatedJob = managementService.moveSuspendedJobToExecutableJob(job.getId()); <nl> 
mmm ContentItemResourceTest.java <nl> ppp ContentItemResourceTest.java <nl> - import java.io.IOException; <nl> - String contentItemId = createContentItem("test.pdf", "application/pdf", null, "12345", <nl> - null, null, "test", "test2"); <nl> + String contentItemId = createContentItem("test.pdf", "application/pdf", null, "12345", null, "test", "test2"); <nl> 
mmm HistoricPlanItemInstanceQueryImpl.java <nl> ppp HistoricPlanItemInstanceQueryImpl.java <nl> - import org.flowable.cmmn.api.history.HistoricPlanItemInstanceQuery; <nl> + import org.flowable.cmmn.api.history. HistoricPlanItemInstanceQuery; <nl> - import org.flowable.cmmn.engine.impl.runtime.PlanItemInstanceQueryProperty; <nl> 
mmm ListQueryParameterObject.java <nl> ppp ListQueryParameterObject.java <nl> + protected String nullHandlingColumn; <nl> - orderByColumns = orderByColumns + "case when " + column + " is null then 0 else 1 end," + defaultOrderByClause; <nl> + if (nullHandlingColumn == null) { <nl> + nullHandlingColumn = ""; <nl> 
mmm KernelTransactionTestBase.java <nl> ppp KernelTransactionTestBase.java <nl> + import org.neo4j.io.pagecache.tracing.cursor.PageCursorTracer; <nl> - when( storageEngine.newCommandCreationContext() ).thenReturn( commandCreationContext ); <nl> + when( storageEngine.newCommandCreationContext( any( PageCursorTracer.class ) ) ).thenReturn( commandCreationContext ); <nl> 
mmm BaseNodeConstraintCreator.java <nl> ppp BaseNodeConstraintCreator.java <nl> - import org.neo4j.graphdb.schema.IndexSetting; <nl> + import org.neo4j.graphdb.schema.IndexSettingImpl; <nl> - public ConstraintCreator withIndexConfiguration( Map<IndexSetting,Object> indexConfiguration ) <nl> + public ConstraintCreator withIndexConfiguration( Map<IndexSettingImpl,Object> indexConfiguration ) <nl> 
mmm MetadataProvider.java <nl> ppp MetadataProvider.java <nl> - public interface TransactionMetaDataStore extends TransactionIdStore, LogVersionRepository, StoreIdProvider, Closeable <nl> + public interface MetadataProvider extends TransactionIdStore, LogVersionRepository, StoreIdProvider, Closeable <nl> 
mmm FrozenClock.java <nl> ppp FrozenClock.java <nl> - import org.hamcrest.Matcher; <nl> - import org.hamcrest.TypeSafeDiagnosingMatcher; <nl> - import java.util.Objects; <nl> - import static org.hamcrest.MatcherAssert.assertThat; <nl> - import static org.hamcrest.Matchers.allOf; <nl> - import static org.hamcrest.Matchers.equalTo; <nl> 
mmm RelationshipTraversalCursorTestBase.java <nl> ppp RelationshipTraversalCursorTestBase.java <nl> - assertTrue( node.supportsFastDegreeLookup(), "dense node" ); <nl> + assertTrue( node.hasCheapDegrees(), "dense node" ); <nl> - assertFalse( node.supportsFastDegreeLookup() && supportsSparseNodes(), "sparse node" ); <nl> 
mmm QueryResultsSerializationTest.java <nl> ppp QueryResultsSerializationTest.java <nl> - import org.junit.After; <nl> - import org.junit.Before; <nl> - import org.junit.Test; <nl> + import org.junit.jupiter.api.AfterEach; <nl> + import org.junit.jupiter.api.BeforeEach; <nl> + import org.junit.jupiter.api.Test; <nl> 
mmm UserFunctionSignature.java <nl> ppp UserFunctionSignature.java <nl> + import static org.neo4j.internal.kernel.api.procs.Neo4jTypes.NTAny; <nl> - registry.register( function, overrideCurrentImplementation ); <nl> + register( function, overrideCurrentImplementation, false ); <nl> + } <nl> + private void register( CallableUserFunction function, boolean overrideCurrentImplementation, boolean builtIn ) throws ProcedureException <nl> 
new file <nl> ppp ComponentVersion.java <nl> + package org.neo4j.server.security.systemgraph; <nl> + import static org.neo4j.dbms.database.AbstractSystemGraphComponent.SECURITY_PRIVILEGE_COMPONENT; <nl> + import static org.neo4j.dbms.database.AbstractSystemGraphComponent.SECURITY_USER_COMPONENT; <nl> + import static org.neo4j.server.security.systemgraph.KnownSystemComponentVersion.UNKNOWN_VERSION; <nl> 
mmm TransactionLogInitializer.java <nl> ppp TransactionLogInitializer.java <nl> - package org.neo4j.kernel.impl.storemigration; <nl> + package org.neo4j.kernel.impl.transaction.log.files; <nl> + import org.neo4j.exceptions.UnderlyingStorageException; <nl> - import org.neo4j.kernel.impl.transaction.log.files.LogFiles; <nl> 
mmm TestedOn.java <nl> ppp TestedOn.java <nl> mmm JUnit38ClassRunnerTest.java <nl> ppp JUnit38ClassRunnerTest.java <nl> + import static org.junit.Assert.assertNull; <nl> + import static org.junit.Assert.assertNotNull; <nl> + import java.lang.annotation.ElementType; <nl> + import java.lang.annotation.Retention; <nl> 
mmm MultipleFailureException.java <nl> ppp MultipleFailureException.java <nl> mmm AssumptionViolatedException.java <nl> ppp AssumptionViolatedException.java <nl> mmm Test.java <nl> ppp Test.java <nl> mmm ComparisonFailure.java <nl> ppp ComparisonFailure.java <nl> mmm Failure.java <nl> ppp Failure.java <nl> mmm ClassRequest.java <nl> 
mmm TempFolderRuleTest.java <nl> ppp TempFolderRuleTest.java <nl> + import static org.hamcrest.core.IsNot.not; <nl> + import static org.junit.internal.matchers.IsCollectionContaining.hasItem; <nl> + import java.util.Arrays; <nl> - 	private static File createdFile; <nl> + 	private static File[] createdFiles= new File[20]; <nl> 
mmm InexactComparisonCriteria.java <nl> ppp InexactComparisonCriteria.java <nl> - import java.lang.reflect.Array; <nl> - public class InexactComparisonCriteria { <nl> + public class InexactComparisonCriteria extends ComparisonCriteria { <nl> - 	 <nl> - 	public void internalArrayEquals(String message, Object expecteds, <nl> 
mmm Timeout.java <nl> ppp Timeout.java <nl> - * 	public MethodRule globalTimeout= new Timeout(20); <nl> + * 	public TestRule globalTimeout= new Timeout(20); <nl> deleted file <nl> mmm SortMethodsWith.java <nl> - package org.junit; <nl> - import java.lang.annotation.ElementType; <nl> - import java.lang.annotation.Retention; <nl> 
mmm AllTests.java <nl> ppp AllTests.java <nl> - import org.junit.runners.model.TestClassTest; <nl> - import org.junit.runners.parameterized.TestWithParametersTest; <nl> + import org.junit.tests.running.classes.TestClassTest; <nl> - JUnitCoreTest.class, <nl> - TestWithParametersTest.class <nl> + JUnitCoreTest.class <nl> 
new file <nl> ppp MethodValidator.java <nl> + package org.junit.internal.runners; <nl> + import java.lang.annotation.Annotation; <nl> + import java.lang.reflect.Method; <nl> + import java.lang.reflect.Modifier; <nl> + import java.util.ArrayList; <nl> + import java.util.List; <nl> + import org.junit.After; <nl> 
mmm TestClassTest.java <nl> ppp TestClassTest.java <nl> - 	 <nl> - 	 <nl> mmm MethodRulesTest.java <nl> ppp MethodRulesTest.java <nl> - @SuppressWarnings("unused") <nl> mmm SynchronizedRunListenerTest.java <nl> ppp SynchronizedRunListenerTest.java <nl> - import static org.junit.Assert.assertThat; <nl> mmm TestRuleTest.java <nl> 
mmm MatcherTest.java <nl> ppp MatcherTest.java <nl> - @SuppressWarnings({ "unchecked", "rawtypes" }) <nl> + @SuppressWarnings("unchecked") <nl> mmm CategoryFilterFactory.java <nl> ppp CategoryFilterFactory.java <nl> - protected abstract Filter createFilter(List<Class<?>> categories); <nl> + protected abstract Filter createFilter(Class<?>... categories); <nl> 
mmm TransferChannel.java <nl> ppp TransferChannel.java <nl> + private static final Object LOST = new Object(); <nl> - if (!((x == p) || ((x == null) == p.isData)))  { <nl> + if (!((x == p) || ((x == null) == p.isData))) { <nl> - final SelectAction sa; <nl> + volatile SelectAction sa; <nl> - this.sa = sa; <nl> 
mmm BasicActor.java <nl> ppp BasicActor.java <nl> - public final <T extends Message> T receive(final Class<T> type) throws SuspendExecution, InterruptedException { <nl> + public final <M extends Message> M receive(final Class<M> type) throws SuspendExecution, InterruptedException { <nl> - * @param <T>     The type of the returned value <nl> 
mmm BlockingTest.java <nl> ppp BlockingTest.java <nl> - msgs.add("Method " + className + "#t_wait()V contains potentially blocking call to java/lang/Object#wait()V"); <nl> - msgs.add("Method " + className + "#t_sleep1()V contains potentially blocking call to java/lang/Thread#sleep(J)V"); <nl> - msgs.add("Method " + className + "#t_sleep2()V contains potentially blocking call to java/lang/Thread#sleep(JI)V"); <nl> 
mmm FiberAsyncIO.java <nl> ppp FiberAsyncIO.java <nl> - import co.paralleluniverse.fibers.SchedulerLocal; <nl> - private static final SchedulerLocal<AsynchronousChannelGroup> defaultGroup = new SchedulerLocal<AsynchronousChannelGroup>() { <nl> - @Override <nl> - protected AsynchronousChannelGroup initialValue(FiberScheduler scheduler) { <nl> 
mmm ExtendedStackTraceElement.java <nl> ppp ExtendedStackTraceElement.java <nl> - static final Set<Pair<String, String>> waivers = Collections.newSetFromMap(MapUtil.<Pair<String, String>, Boolean>newConcurrentHashMap()); <nl> + private static final Set<Pair<String, String>> waivers = Collections.newSetFromMap(MapUtil.<Pair<String, String>, Boolean>newConcurrentHashMap()); <nl> 
mmm OptimizingStatementWriter.java <nl> ppp OptimizingStatementWriter.java <nl> + controller.getAcg().onLineNumber(statement, null); <nl> - ClassNode rightType = typeChooser.resolveType(expression.getRightExpression(), node); <nl> + Expression rightExpression = expression.getRightExpression(); <nl> + ClassNode rightType = optimizeDivWithIntOrLongTarget(rightExpression, leftType); <nl> 
mmm ComplexKeyHashMap.java <nl> ppp ComplexKeyHashMap.java <nl> + @Deprecated <nl> mmm ClassHelper.java <nl> ppp ClassHelper.java <nl> - import org.codehaus.groovy.util.ManagedConcurrentMap; <nl> + import org.codehaus.groovy.util.ManagedIdentityConcurrentMap; <nl> - static ManagedConcurrentMap<Class, SoftReference<ClassNode>> classCache = new ManagedConcurrentMap<Class, SoftReference<ClassNode>>(ReferenceBundle.getWeakBundle()); <nl> 
mmm DummyReflector.java <nl> ppp DummyReflector.java <nl> - public Object invokeConstructor(Object constructor, Object[] arguments) { <nl> + public Object invokeConstructorAt(Object at, Object constructor, Object[] arguments) { <nl> + } <nl> + public Object invokeConstructorOf(Object constructor, Object[] arguments) { <nl> 
mmm ClassCompletionVerifier.java <nl> ppp ClassCompletionVerifier.java <nl> - boolean hasPrivate = false; <nl> - boolean hasPublic = false; <nl> + boolean hasPrivate = node.isPrivate(); <nl> + boolean hasPublic = node.isPublic(); <nl> mmm DumpingClassLoader.java <nl> ppp DumpingClassLoader.java <nl> - import org.objectweb.asm.util.ASMifierClassVisitor; <nl> 
mmm JsonTokenType.java <nl> ppp JsonTokenType.java <nl> + public static <T> List<T> withDefault(List<T> self, Closure init) { <nl> + return withLazyDefault(self, init); <nl> + } <nl> + public static <T> List<T> withLazyDefault(List<T> self, Closure init) { <nl> + return ListWithDefault.newInstance(self, true, init); <nl> 
mmm WideningCategories.java <nl> ppp WideningCategories.java <nl> - protected static class LowestUpperBoundClassNode extends ClassNode { <nl> + public static class LowestUpperBoundClassNode extends ClassNode { <nl> + public String getLubName() { <nl> + return this.name; <nl> + } <nl> mmm JsonException.java <nl> 
mmm StaticTypeCheckingSupport.java <nl> ppp StaticTypeCheckingSupport.java <nl> - public abstract class StaticTypeCheckingSupport { <nl> + abstract class StaticTypeCheckingSupport { <nl> - 					MethodNode node = new ExtensionMethodNode( <nl> - metaMethod, <nl> + 					MethodNode node = new MethodNode( <nl> - public static int allParametersAndArgumentsMatch(Parameter[] params, ClassNode[] args) { <nl> 
mmm DefaultGroovyMethods.java <nl> ppp DefaultGroovyMethods.java <nl> - * @return a sublist based on range borders or a new list if range is reversed <nl> - * @see java.util.List#subList(int,int) <nl> + * @return a new list instance based on range borders <nl> + * <nl> - answer = reverse(answer); <nl> + subList = reverse(subList); <nl> 
new file <nl> ppp MetaInfExtensionModule.java <nl> + package org.codehaus.groovy.runtime.m12n; <nl> + import groovy.lang.GroovyRuntimeException; <nl> + import java.util.ArrayList; <nl> + import java.util.LinkedList; <nl> + import java.util.List; <nl> + import java.util.Properties; <nl> + import java.util.logging.Logger; <nl> 
new file <nl> ppp StaticTypesCallSiteWriter.java <nl> + package org.codehaus.groovy.classgen.asm.sc; <nl> + import org.codehaus.groovy.GroovyBugError; <nl> + import org.codehaus.groovy.ast.ClassHelper; <nl> + import org.codehaus.groovy.ast.ClassNode; <nl> + import org.codehaus.groovy.ast.expr.Expression; <nl> 
deleted file <nl> mmm StaticTypeCheckingSupport.java <nl> - package org.codehaus.groovy.transform.stc; <nl> - import groovy.lang.MetaMethod; <nl> - import org.codehaus.groovy.ast.*; <nl> - import org.codehaus.groovy.ast.expr.*; <nl> - import org.codehaus.groovy.reflection.CachedClass; <nl> - import org.codehaus.groovy.reflection.ReflectionCache; <nl> 
new file <nl> ppp MemberSignatureParser.java <nl> + package org.codehaus.groovy.ast.decompiled; <nl> + import org.codehaus.groovy.ast.*; <nl> + import org.codehaus.groovy.ast.expr.ConstantExpression; <nl> + import org.codehaus.groovy.ast.stmt.ReturnStatement; <nl> + import org.objectweb.asm.Type; <nl> + import org.objectweb.asm.signature.SignatureReader; <nl> 
mmm ExtendedVerifier.java <nl> ppp ExtendedVerifier.java <nl> - public static Object withTraits(Object self, Class<?>... traits) { <nl> - List<Class> interfaces = new ArrayList<Class>(); <nl> - Collections.addAll(interfaces, traits); <nl> - return ProxyGenerator.INSTANCE.instantiateDelegate(interfaces, self); <nl> 
mmm ImmutableASTTransformation.java <nl> ppp ImmutableASTTransformation.java <nl> - statement = EmptyStatement.INSTANCE; <nl> mmm BinaryExpressionHelper.java <nl> ppp BinaryExpressionHelper.java <nl> + if (leftExpression instanceof VariableExpression) { <nl> + VariableExpression var = (VariableExpression) leftExpression; <nl> 
deleted file <nl> mmm DecompiledClassNode.java <nl> - package org.codehaus.groovy.ast.decompiled; <nl> - import org.codehaus.groovy.ast.*; <nl> - import java.util.List; <nl> - public class DecompiledClassNode extends ClassNode { <nl> - private final ClassStub classData; <nl> - private final AsmReferenceResolver resolver; <nl> 
mmm Lexer.java <nl> ppp Lexer.java <nl> - import org.antlr.v4.runtime.atn.LexerInterpreter; <nl> + import org.antlr.v4.runtime.atn.LexerATNSimulator; <nl> - public abstract class Lexer extends Recognizer<LexerInterpreter> <nl> + public abstract class Lexer extends Recognizer<LexerATNSimulator> <nl> mmm ATNSimulator.java <nl> 
mmm TestSymbolIssues.java <nl> ppp TestSymbolIssues.java <nl> - "tokens { X='x'; Y; }\n" + <nl> + "tokens { ID; FOO; X='x'; Y; }\n" + <nl> - "error(59): B.g4:2:9: can't assign string value to token name X in non-combined grammar\n" + <nl> + "error(59): B.g4:2:18: can't assign string value to token name X in non-combined grammar\n" + <nl> 
mmm LeftRecursiveRule.java <nl> ppp LeftRecursiveRule.java <nl> - 			if ( altInfo.altLabel==null ) alts.add(altInfo.altAST); <nl> + 			if ( altInfo.altLabel==null ) alts.add(altInfo.originalAltAST); <nl> - 			if ( altInfo.altLabel==null ) alts.add(altInfo.altAST); <nl> + 			if ( altInfo.altLabel==null ) alts.add(altInfo.originalAltAST); <nl> 
new file <nl> ppp RecursionOverflowMessage.java <nl> + package org.antlr.v4.tool; <nl> + public class RecursionOverflowMessage extends Message { <nl> + } <nl> mmm BlockAST.java <nl> ppp BlockAST.java <nl> - import org.antlr.runtime.CommonToken; <nl> - import org.antlr.v4.parse.ANTLRParser; <nl> - public BlockAST(int type, Token t) { super(type, t); } <nl> 
new file <nl> ppp XPathTokenElement.java <nl> + package org.antlr.v4.runtime.tree.xpath; <nl> + import org.antlr.v4.runtime.tree.ParseTree; <nl> + import org.antlr.v4.runtime.tree.TerminalNode; <nl> + import org.antlr.v4.runtime.tree.Tree; <nl> + import org.antlr.v4.runtime.tree.Trees; <nl> + import java.util.ArrayList; <nl> 
mmm TestCompositeParsers.java <nl> ppp TestCompositeParsers.java <nl> - package org.antlr.v4.test.rt.py3; <nl> + package org.antlr.v4.test.rt.py2; <nl> - public class TestCompositeParsers extends BasePython3Test { <nl> + public class TestCompositeParsers extends BasePython2Test { <nl> new file <nl> ppp TestUnicode.java <nl> 
new file <nl> ppp TestBitSetWordSize.java <nl> + package org.antlr.v4.test.rt.js.node; <nl> + import org.junit.Test; <nl> + import static org.junit.Assert.*; <nl> + public class TestBitSetWordSize extends BaseTest { <nl> + 	@Test <nl> + 	public void testBitSetWordSize() throws Exception { <nl> + 		StringBuilder sb = new StringBuilder(); <nl> 
mmm TestListeners.java <nl> ppp TestListeners.java <nl> - package org.antlr.v4.test.rt.py2; <nl> + package org.antlr.v4.test.rt.csharp; <nl> - import static org.junit.Assert.*; <nl> - public class TestListeners extends BasePython2Test { <nl> + public class TestListeners extends BaseTest { <nl> - 	                  "class LeafListener(TListener):\n" + <nl> 
new file <nl> ppp TestParseErrors.java <nl> + package org.antlr.v4.py2.test; <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.junit.Assert.assertNull; <nl> + import java.io.File; <nl> + import org.antlr.v4.runtime.atn.ATNSerializer; <nl> + import org.junit.Test; <nl> + public class TestParseErrors extends BasePython2Test { <nl> 
mmm DFA.java <nl> ppp DFA.java <nl> + 	public boolean minimized; <nl> - 	public boolean valid() { return converter.danglingStates.size()==0; } <nl> + 	public boolean valid() { <nl> + 		return <nl> + 			converter.danglingStates.size()==0 && <nl> + 			converter.abortedDueToMultipleRecursiveAltsAt ==null && <nl> 
mmm BasePythonTest.java <nl> ppp BasePythonTest.java <nl> - import static org.antlr.v4.test.runtime.BaseRuntimeTest.writeFile; <nl> + 	public static void writeFile(String dir, String fileName, String content) { <nl> + 		try { <nl> + 			File f = new File(dir, fileName); <nl> + 			FileWriter w = new FileWriter(f); <nl> 
new file <nl> ppp TestUnicode.java <nl> + package org.antlr.v4.test.rt.py2; <nl> + import org.junit.Test; <nl> + import static org.junit.Assert.assertEquals; <nl> + public class TestUnicode extends BasePython2Test { <nl> + 	@Test <nl> + 	public void testUnicode() throws Exception { <nl> + 		StringBuilder sb = new StringBuilder(); <nl> 
mmm TestLeftRecursion.java <nl> ppp TestLeftRecursion.java <nl> - package org.antlr.v4.test.runtime.python3; <nl> + package org.antlr.v4.test.runtime.javascript.node; <nl> - public class TestLeftRecursion extends BasePython3Test { <nl> + public class TestLeftRecursion extends BaseTest { <nl> - 		StringBuilder grammarBuilder = new StringBuilder(283); <nl> 
new file <nl> ppp TestParserErrors.java <nl> + package org.antlr.v4.test.runtime.cpp; <nl> + import org.junit.Ignore; <nl> + import org.junit.Test; <nl> + import static org.junit.Assert.*; <nl> + @SuppressWarnings("unused") <nl> + public class TestParserErrors extends BaseCppTest { <nl> + 	@Test <nl> + 	public void testConjuringUpToken() throws Exception { <nl> 
deleted file <nl> mmm TestLexerErrors.java <nl> - package org.antlr.v4.test.runtime.go; <nl> - import org.junit.Ignore; <nl> - import org.junit.Test; <nl> - import static org.junit.Assert.*; <nl> - public class TestLexerErrors extends BaseTest { <nl> - 	@Test <nl> - 	public void testDFAToATNThatFailsBackToDFA() throws Exception { <nl> 
deleted file <nl> mmm CSharp_v2_0Target.java <nl> - package org.antlr.v4.codegen; <nl> - public class CSharp_v2_0Target extends CSharpTarget { <nl> - 	public CSharp_v2_0Target(CodeGenerator gen) { <nl> - 		super(gen, "CSharp_v2_0"); <nl> - 	} <nl> - } <nl> new file <nl> + package org.antlr.v4.py2.test; <nl> + import org.junit.Ignore; <nl> 
new file <nl> ppp BasePython2Test.java <nl> + package org.antlr.v4.py2.test; <nl> + import org.antlr.v4.py.test.BasePythonTest; <nl> + import org.stringtemplate.v4.ST; <nl> + public abstract class BasePython2Test extends BasePythonTest { <nl> + 	@Override <nl> + 	protected String getLanguage() { <nl> + 		return "Python2"; <nl> 
new file <nl> ppp TestCompositeParsers.java <nl> + package org.antlr.v4.test.runtime.javascript.safari; <nl> + import org.antlr.v4.test.runtime.BaseRuntimeTest; <nl> + import org.antlr.v4.test.runtime.RuntimeTestDescriptor; <nl> + import org.antlr.v4.test.runtime.descriptors.CompositeParsersDescriptors; <nl> 
mmm TestCompositeParsers.java <nl> ppp TestCompositeParsers.java <nl> - package org.antlr.v4.test.runtime.python2; <nl> + package org.antlr.v4.test.runtime.python3; <nl> - public class TestCompositeParsers extends BasePython2Test { <nl> + public class TestCompositeParsers extends BasePython3Test { <nl> mmm Python3Target.java <nl> 
mmm Chunk.java <nl> ppp Chunk.java <nl> mmm Token.java <nl> ppp Token.java <nl> mmm TokenSource.java <nl> ppp TokenSource.java <nl> - import org.antlr.v4.runtime.misc.Nullable; <nl> - 	@NotNull <nl> - 	@Nullable <nl> mmm ParseTreePattern.java <nl> ppp ParseTreePattern.java <nl> - import org.antlr.v4.runtime.misc.NotNull; <nl> 
mmm TestSemPredEvalParser.java <nl> ppp TestSemPredEvalParser.java <nl> - import org.antlr.v4.test.runtime.category.ParserTests; <nl> - import org.junit.experimental.categories.Category; <nl> - @Category(ParserTests.class) <nl> deleted file <nl> mmm LeftRecursionTests.java <nl> - package org.antlr.v4.test.runtime.category; <nl> 
mmm LL1Analyzer.java <nl> ppp LL1Analyzer.java <nl> + import org.antlr.v4.runtime.ParserRuleContext; <nl> - 				  PredictionContext.EMPTY, <nl> + 				  ParserRuleContext.EMPTY, <nl> - 		_LOOK(s, PredictionContext.fromRuleContext(ctx), <nl> - 			  r, new HashSet<ATNConfig>(), seeThruPreds); <nl> + 		_LOOK(s, ctx, r, new HashSet<ATNConfig>(), seeThruPreds); <nl> 
mmm DFAState.java <nl> ppp DFAState.java <nl> mmm TestT.java <nl> ppp TestT.java <nl> mmm ATNConfigSet.java <nl> ppp ATNConfigSet.java <nl> - import org.antlr.v4.runtime.misc.OrderedHashSet; <nl> + import java.util.ArrayList; <nl> + import java.util.Collection; <nl> + import java.util.Iterator; <nl> + import java.util.LinkedHashMap; <nl> 
deleted file <nl> mmm TestUnicode.java <nl> - package org.antlr.v4.test.rt.py2; <nl> - import org.junit.Test; <nl> - import static org.junit.Assert.*; <nl> - public class TestUnicode extends BasePython2Test { <nl> - 	@Test <nl> - 	public void testUnicode() throws Exception { <nl> - 		StringBuilder sb = new StringBuilder(); <nl> 
mmm CharStream.java <nl> ppp CharStream.java <nl> - 	public static final int EOF = -1; <nl> mmm Lexer.java <nl> ppp Lexer.java <nl> - 					if ( _input.LA(1)==CharStream.EOF ) { <nl> + 					if ( _input.LA(1)==IntStream.EOF ) { <nl> mmm TestUnbufferedCharStream.java <nl> ppp TestUnbufferedCharStream.java <nl> + import org.antlr.v4.runtime.IntStream; <nl> 
new file <nl> ppp LL1OptionalBlockSingleAlt.java <nl> + package org.antlr.v4.codegen.src; <nl> + public class LL1OptionalBlockSingleAlt extends OptionalBlock { <nl> + } <nl> new file <nl> ppp RuleFunction.java <nl> + package org.antlr.v4.codegen.src; <nl> + import org.antlr.v4.tool.Attribute; <nl> + import org.antlr.v4.tool.GrammarAST; <nl> 
mmm MetricsHandlerInterceptorIntegrationTests.java <nl> ppp MetricsHandlerInterceptorIntegrationTests.java <nl> + import org.springframework.context.annotation.Primary; <nl> - public class MetricsHandlerInterceptorIntegrationTests extends AbstractMetricsTests { <nl> + public class MetricsHandlerInterceptorIntegrationTests { <nl> 
mmm RibbonApacheHttpRequestTests.java <nl> ppp RibbonApacheHttpRequestTests.java <nl> + import java.util.ArrayList; <nl> + import org.springframework.cloud.netflix.feign.encoding.HttpEncoding; <nl> + 		headers.add(HttpEncoding.CONTENT_LENGTH, "5192"); <nl> - 		RibbonApacheHttpRequest httpRequest = new RibbonApacheHttpRequest(new RibbonCommandContext("example", "GET", uri, false, <nl> 
mmm SimpleZuulProxyApplicationTests.java <nl> ppp SimpleZuulProxyApplicationTests.java <nl> - import static org.junit.Assert.*; <nl> + import static org.junit.Assert.assertEquals; <nl> - import org.springframework.beans.factory.annotation.Value; <nl> + import org.springframework.boot.context.embedded.LocalServerPort; <nl> 
mmm FeignLoadBalancer.java <nl> ppp FeignLoadBalancer.java <nl> + import org.springframework.cloud.netflix.ribbon.RibbonProperties; <nl> - import com.netflix.client.config.CommonClientConfigKey; <nl> + 	private final RibbonProperties ribbon; <nl> - 		this.connectTimeout = clientConfig.get(CommonClientConfigKey.ConnectTimeout); <nl> 
mmm PreDecorationFilter.java <nl> ppp PreDecorationFilter.java <nl> + 				ctx.put("ignoredHeaders", route.getSensitiveHeaders()); <nl> - 					ctx.set("forward.to", <nl> - 							StringUtils.cleanPath(location.substring("forward:".length()) <nl> - 									+ route.getPath())); <nl> + 					ctx.set("forward.to", StringUtils.cleanPath( <nl> 
new file <nl> ppp ZuulServerAutoConfigurationTests.java <nl> + package org.springframework.cloud.netflix.zuul; <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> + import org.springframework.beans.factory.annotation.Autowired; <nl> + import org.springframework.boot.autoconfigure.EnableAutoConfiguration; <nl> 
mmm SpringRetryEnabledTests.java <nl> ppp SpringRetryEnabledTests.java <nl> - import org.springframework.cloud.client.loadbalancer.LoadBalancedRetryPolicyFactory; <nl> + import org.springframework.cloud.client.loadbalancer.LoadBalancedRetryFactory; <nl> + import org.springframework.cloud.client.loadbalancer.LoadBalancedRetryPolicy; <nl> 
mmm SendErrorFilter.java <nl> ppp SendErrorFilter.java <nl> + import org.springframework.util.ReflectionUtils; <nl> - import com.google.common.base.Throwables; <nl> - 			Throwables.propagate(ex); <nl> + 			ReflectionUtils.rethrowRuntimeException(ex); <nl> mmm RibbonLoadBalancerClient.java <nl> ppp RibbonLoadBalancerClient.java <nl> 
mmm ColumnChartRenderer.java <nl> ppp ColumnChartRenderer.java <nl> - import lecho.lib.hellocharts.model.ColumnValue; <nl> + import lecho.lib.hellocharts.model.SubcolumnValue; <nl> - 			for (ColumnValue columnValue : column.getValues()) { <nl> + 			for (SubcolumnValue columnValue : column.getValues()) { <nl> 
mmm PointQuadTree.java <nl> ppp PointQuadTree.java <nl> - import java.util.Collection; <nl> + import java.util.HashSet; <nl> + import java.util.Set; <nl> - private final static int MAX_ELEMENTS = 60; <nl> + private final static int MAX_ELEMENTS = 10; <nl> - new PointQuadTree(mBounds.minX, mBounds.midX, mBounds.minY, mBounds.midY, mDepth + 1), <nl> 
mmm LineStringTest.java <nl> ppp LineStringTest.java <nl> - import static org.junit.Assert.*; <nl> + import static org.junit.Assert.assertEquals; <nl> + import static org.junit.Assert.assertNotNull; <nl> mmm SphericalUtilTest.java <nl> ppp SphericalUtilTest.java <nl> - import static org.junit.Assert.*; <nl> 
mmm PolyUtil.java <nl> ppp PolyUtil.java <nl> - while (index < len) { <nl> + for (int pointIndex = 0; index < len; ++pointIndex) { <nl> mmm SquareTextView.java <nl> ppp SquareTextView.java <nl> + import android.util.Log; <nl> mmm NonHierarchicalDistanceBasedAlgorithm.java <nl> ppp NonHierarchicalDistanceBasedAlgorithm.java <nl> 
new file <nl> ppp KmlTrack.java <nl> + package com.google.maps.android.data.kml; <nl> + import android.util.Log; <nl> + import com.google.android.gms.maps.model.LatLng; <nl> + import java.util.ArrayList; <nl> + import java.util.HashMap; <nl> + import java.util.List; <nl> + public class KmlTrack extends KmlLineString { <nl> 
mmm SubscriberMethod.java <nl> ppp SubscriberMethod.java <nl> - if (other instanceof SubscriberMethod) { <nl> + if (other == this) { <nl> + return true; <nl> + } else if (other instanceof SubscriberMethod) { <nl> mmm EventBusBackgroundThreadTest.java <nl> ppp EventBusBackgroundThreadTest.java <nl> + import de.greenrobot.event.ThreadMode; <nl> 
new file <nl> ppp RiakUtils.java <nl> + package com.yahoo.ycsb.db.riak; <nl> + import java.io.*; <nl> + import java.util.Map; <nl> + import java.util.Set; <nl> + import com.yahoo.ycsb.ByteArrayByteIterator; <nl> + import com.yahoo.ycsb.ByteIterator; <nl> + import static com.google.common.base.Preconditions.checkArgument; <nl> 
mmm DBWrapper.java <nl> ppp DBWrapper.java <nl> + public boolean isOk() { <nl> + return this == OK || this == BATCHED_OK; <nl> + } <nl> mmm CoreWorkload.java <nl> ppp CoreWorkload.java <nl> + import java.util.Objects; <nl> - if (status == Status.OK) { <nl> + if (null != status && status.isOk()) { <nl> - return (status == Status.OK); <nl> 
mmm CoreWorkload.java <nl> ppp CoreWorkload.java <nl> + import com.yahoo.ycsb.generator.Generator; <nl> - import com.yahoo.ycsb.generator.NumberGenerator; <nl> + import com.yahoo.ycsb.generator.IntegerGenerator; <nl> - NumberGenerator fieldlengthgenerator; <nl> + IntegerGenerator fieldlengthgenerator; <nl> 
mmm URL.java <nl> ppp URL.java <nl> - for (String reserveParamPrefix : reserveParamPrefixs) { <nl> - if (entry.getKey().startsWith(reserveParamPrefix) && StringUtils.isNotEmpty(entry.getValue())) { <nl> + for (String reserveParamPrefix : reserveParamPrefixs){ <nl> + if (entry.getKey().startsWith(reserveParamPrefix) && StringUtils.isNotEmpty(entry.getValue())){ <nl> 
mmm MergeableClusterInvokerTest.java <nl> ppp MergeableClusterInvokerTest.java <nl> - for (String key : expected.keySet()) { <nl> + for (Map.Entry<String, List<String>> entry : expected.entrySet()) { <nl> - List<String> values1 = new ArrayList<String>(expected.get(key)); <nl> - List<String> values2 = new ArrayList<String>(menu.getMenus().get(key)); <nl> 
mmm UserServiceImpl.java <nl> ppp UserServiceImpl.java <nl> - package org.apache.dubbo.samples.microservices.sc.rest; <nl> + package org.apache.dubbo.demo.provider.rest; <nl> mmm UserService.java <nl> ppp UserService.java <nl> - package org.apache.dubbo.samples.microservices.sc.rest; <nl> + package org.apache.dubbo.demo.provider.rest; <nl> 
mmm AppRouter.java <nl> ppp AppRouter.java <nl> mmm ServiceRouter.java <nl> ppp ServiceRouter.java <nl> mmm ServiceConfig.java <nl> ppp ServiceConfig.java <nl> - checkConfigCenter(); <nl> + startConfigCenter(); <nl> - setProvider(ConfigManager.getInstance() <nl> - .getDefaultProvider().orElse(new ProviderConfig())); <nl> 
new file <nl> ppp DubboWebApplicationInitializer.java <nl> + package com.alibaba.dubbo.config.spring.initializer; <nl> + import org.springframework.web.context.AbstractContextLoaderInitializer; <nl> + import org.springframework.web.context.WebApplicationContext; <nl> + import org.springframework.web.context.support.XmlWebApplicationContext; <nl> 
mmm AbstractConfig.java <nl> ppp AbstractConfig.java <nl> + import java.util.concurrent.atomic.AtomicBoolean; <nl> + protected final AtomicBoolean refreshed = new AtomicBoolean(false); <nl> + if (!refreshed.compareAndSet(false, true)) { <nl> + logger.info("Will not refresh " + this.getClass().getName() + ", already update to date."); <nl> 
mmm ReferenceBuilder.java <nl> ppp ReferenceBuilder.java <nl> - import org.apache.dubbo.config.service.ReferenceConfigBase; <nl> + import org.apache.dubbo.config.ReferenceConfigBase; <nl> mmm ReferenceConfigBase.java <nl> ppp ReferenceConfigBase.java <nl> - package org.apache.dubbo.config.service; <nl> + package org.apache.dubbo.config; <nl> 
mmm ServiceConfig.java <nl> ppp ServiceConfig.java <nl> - import com.alibaba.dubbo.common.utils.NetUtils; <nl> + import static com.alibaba.dubbo.common.utils.NetUtils.LOCALHOST; <nl> + import static com.alibaba.dubbo.common.utils.NetUtils.getAvailablePort; <nl> + import static com.alibaba.dubbo.common.utils.NetUtils.getLocalHost; <nl> 
mmm RegistryDirectory.java <nl> ppp RegistryDirectory.java <nl> - import org.apache.dubbo.config.dynamic.ConfigType; <nl> + import static org.apache.dubbo.common.Constants.APPLICATION_KEY; <nl> + import static org.apache.dubbo.common.Constants.CONFIGURATORS_SUFFIX; <nl> - ConfigType configType = event.getType(); <nl> 
mmm ClassDescriptorMapper.java <nl> ppp ClassDescriptorMapper.java <nl> - package com.alibaba.dubbo.common.io; <nl> + package com.alibaba.dubbo.common.serialize.support.dubbo; <nl> mmm FailbackRegistry.java <nl> ppp FailbackRegistry.java <nl> - super.notify(url, listener, urls); <nl> + 	doNotify(url, listener, urls); <nl> 
mmm AbstractMetadataReportTest.java <nl> ppp AbstractMetadataReportTest.java <nl> + import com.alibaba.fastjson.JSON; <nl> - private ConsumerMetadataIdentifier storeConsumer(AbstractMetadataReport abstractMetadataReport, String interfaceName, String version, String group, String application, String storeValue) throws ClassNotFoundException { <nl> 
mmm DubboNamespaceHandlerTest.java <nl> ppp DubboNamespaceHandlerTest.java <nl> + protocolConfig.refresh(); <nl> - @Test <nl> - public void testMultiMonitor() { <nl> - Assertions.assertThrows(BeanCreationException.class, () -> { <nl> - ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(ConfigTest.class.getPackage().getName().replace('.', '/') + "/multi-monitor.xml"); <nl> 
mmm ModuleId.java <nl> ppp ModuleId.java <nl> - public String moduleName() { <nl> - return moduleName; <nl> - } <nl> mmm TypeChecker.java <nl> ppp TypeChecker.java <nl> + if (indexBasedAccessExpr.lhsVar) { <nl> + dlog.error(indexBasedAccessExpr.pos, DiagnosticCode.CANNOT_UPDATE_TABLE_USING_MEMBER_ACCESS, <nl> 
deleted file <nl> mmm CleanCommand.java <nl> - package io.ballerina.cli.cmd; <nl> - import io.ballerina.cli.TaskExecutor; <nl> - import io.ballerina.cli.task.CleanTargetDirTask; <nl> - import io.ballerina.projects.Project; <nl> - import io.ballerina.projects.ProjectException; <nl> - import io.ballerina.projects.directory.BuildProject; <nl> 
mmm ModuleLoadRequest.java <nl> ppp ModuleLoadRequest.java <nl> - import io.ballerina.projects.PackageDependencyScope; <nl> - private final PackageDependencyScope scope; <nl> - PackageVersion version, <nl> - PackageDependencyScope scope) { <nl> + PackageVersion version) { <nl> - this.scope = scope; <nl> - public PackageDependencyScope scope() { <nl> 
mmm JsonUtils.java <nl> ppp JsonUtils.java <nl> + import io.ballerina.runtime.internal.values.MappingInitialValueEntry; <nl> - MapValueImpl<BString, Object> detailMap = new MapValueImpl<>(PredefinedTypes.TYPE_ERROR_DETAIL); <nl> - detailMap.put(TypeConstants.DETAIL_MESSAGE, <nl> - StringUtils.fromString("JSON Merge failed for key '" + key + "'")); <nl> 
mmm BuildProject.java <nl> ppp BuildProject.java <nl> + populateCompilerContext(); <nl> mmm AddCommandTest.java <nl> ppp AddCommandTest.java <nl> - String moduleName = "module1"; <nl> - String[] args = {moduleName}; <nl> + String[] args = {"module1"}; <nl> - Path moduleDir = modulesPath.resolve(moduleName); <nl> 
mmm JBallerinaBackend.java <nl> ppp JBallerinaBackend.java <nl> - import io.ballerina.projects.environment.PackageResolver; <nl> + import io.ballerina.projects.environment.PackageCache; <nl> - private final PackageResolver packageResolver; <nl> + private final PackageCache packageCache; <nl> - this.packageResolver = projectEnvContext.getService(PackageResolver.class); <nl> 
mmm BParameterizedType.java <nl> ppp BParameterizedType.java <nl> - public int paramIndex; <nl> - public BParameterizedType(BType valueType, BVarSymbol paramSymbol, BTypeSymbol tSymbol, Name name, int paramIndex) { <nl> + public BParameterizedType(BType valueType, BVarSymbol paramSymbol, BTypeSymbol tSymbol, Name name) { <nl> 
mmm AddCommand.java <nl> ppp AddCommand.java <nl> - import java.nio.file.StandardCopyOption; <nl> - import static io.ballerina.projects.util.ProjectUtils.guessPkgName; <nl> + import io.ballerina.projects.Project; <nl> + import io.ballerina.projects.internal.model.Target; <nl> + default void codeGenerated(Project project, Target target) { <nl> 
mmm Model.java <nl> ppp Model.java <nl> - public abstract class ActiveRecordBase<T> { <nl> + public abstract class Model { <nl> - 	private ApplicationCache mApplicationCache = ApplicationCache.getInstance(); <nl> + 	private Registry mApplicationCache = Registry.getInstance(); <nl> - 	public ActiveRecordBase() { <nl> 
mmm CopySetupHandler.java <nl> ppp CopySetupHandler.java <nl> + import org.dataportabilityproject.job.TokenManager; <nl> - CommonSettings commonSettings) { <nl> - super(serviceProviderRegistry, jobDao, commonSettings, Mode.COPY, PATH); <nl> + CommonSettings commonSettings, TokenManager tokenManager) { <nl> 
new file <nl> ppp ClearTextPublicKeySerializer.java <nl> + package org.datatransferproject.security.cleartext; <nl> + import com.google.common.io.BaseEncoding; <nl> + import org.datatransferproject.spi.transfer.security.PublicKeySerializer; <nl> + import org.datatransferproject.spi.transfer.security.SecurityException; <nl> 
new file <nl> ppp AzureDtpInternalMetricExtension.java <nl> + package org.datatransferproject.cloud.microsoft.cosmos; <nl> + import org.datatransferproject.api.launcher.DtpInternalMetricRecorder; <nl> + import org.datatransferproject.api.launcher.ExtensionContext; <nl> + import org.datatransferproject.spi.service.extension.ServiceExtension; <nl> 
mmm PortabilityInMemoryDataCopier.java <nl> ppp PortabilityInMemoryDataCopier.java <nl> - logger.debug(jobIdPrefix + "Starting import"); <nl> - CallableImporter callableImporter = new CallableImporter(importerProvider, jobId, <nl> - importAuthData, <nl> - exportResult.getExportedData()); <nl> - RetryingCallable<ImportResult> retryingImporter = new RetryingCallable<>(callableImporter, <nl> 
new file <nl> ppp MediaResponse.java <nl> + package org.dataportabilityproject.serviceProviders.instagram.model; <nl> + import java.util.List; <nl> + public final class MediaResponse { <nl> + private Meta meta; <nl> + private List<MediaFeedData> data; <nl> + public Meta getMeta() { <nl> + return meta; <nl> + } <nl> 
mmm GetListResponse.java <nl> ppp GetListResponse.java <nl> - @Key("tasks") <nl> - public Tasks tasks; <nl> - @Override <nl> - public String toString() { <nl> - return null == tasks ? stat : tasks.toString(); <nl> - } <nl> + @Key("tasks") <nl> + public Tasks tasks; <nl> + @Override <nl> + public String toString() { <nl> 
deleted file <nl> mmm OauthCallbackHandler.java <nl> - package org.datatransferproject.transport.jdk.http; <nl> - import com.fasterxml.jackson.databind.ObjectMapper; <nl> - import com.google.common.base.Preconditions; <nl> - import com.google.common.base.Strings; <nl> - import com.google.common.io.BaseEncoding; <nl> 
mmm Secrets.java <nl> ppp Secrets.java <nl> - private static final String BASE_URL_NAME = "BASE_URL"; <nl> - private static final String BASE_API_URL_NAME = "BASE_API_URL"; <nl> - public String baseUrl() { <nl> - return secrets.get(BASE_URL_NAME); <nl> - } <nl> - public String baseApiUrl() { <nl> - return secrets.get(BASE_API_URL_NAME); <nl> 
mmm ZWaveNetworkEvent.java <nl> ppp ZWaveNetworkEvent.java <nl> - 		super(nodeId); <nl> + 		super(nodeId, 1); <nl> mmm ZWaveEndpoint.java <nl> ppp ZWaveEndpoint.java <nl> - 		if (endpointId == 0) { <nl> - 			throw new IllegalArgumentException("Endpoint number cannot be 0"); <nl> - 		} <nl> mmm ZWaveNode.java <nl> 
mmm Configuration.java <nl> ppp Configuration.java <nl> - 	private String name = null; <nl> - 	private int roomId = -1; <nl> - 	private Configuration() { <nl> + 	private Configuration(String rfAddress, DeviceType deviceType, String serialNumber) { <nl> + 		this.rfAddress = rfAddress; <nl> + 		this.deviceType = deviceType; <nl> 
deleted file <nl> mmm ZWaveDbManufacturer.java <nl> - package org.openhab.binding.zwave.internal.config; <nl> - import java.util.List; <nl> - import org.openhab.binding.zwave.internal.HexToIntegerConverter; <nl> - import com.thoughtworks.xstream.annotations.XStreamConverter; <nl> - import com.thoughtworks.xstream.annotations.XStreamImplicit; <nl> 
mmm AnelConfigReader.java <nl> ppp AnelConfigReader.java <nl> - 			final AnelConnectorThread thread = new AnelConnectorThread(anelConfig.host, anelConfig.receivePort, <nl> + 			final AnelConnectorThread thread = new AnelConnectorThread(device, anelConfig.host, anelConfig.receivePort, <nl> mmm CommandEnum.java <nl> 
mmm Thermostat.java <nl> ppp Thermostat.java <nl> - 	public static enum HvacState { <nl> - 		HEATING("heating"), COOLING("cooling"), OFF("off"); <nl> - 		private final String state; <nl> - 		private HvacState(String state) { <nl> - 			this.state = state; <nl> - 		} <nl> - 		@JsonValue <nl> - 		public String value() { <nl> 
mmm XbmcActiveBinding.java <nl> ppp XbmcActiveBinding.java <nl> - public class XbmcActiveBinding extends AbstractActiveBinding<XbmcBindingProvider> implements ManagedService { <nl> + public class XbmcActiveBinding extends <nl> + 		AbstractActiveBinding<XbmcBindingProvider> implements ManagedService { <nl> 
new file <nl> ppp WagoGenericBindingProvider.java <nl> + package org.openhab.binding.wago.internal; <nl> + import org.openhab.binding.wago.WagoBindingProvider; <nl> + import org.openhab.core.binding.BindingConfig; <nl> + import org.openhab.core.items.Item; <nl> + import org.openhab.core.library.items.ContactItem; <nl> 
mmm ZWaveNetworkMonitor.java <nl> ppp ZWaveNetworkMonitor.java <nl> + import org.openhab.binding.zwave.internal.protocol.ZWaveNodeState; <nl> - 	public boolean healNode(int nodeId) { <nl> + 	public boolean startNodeHeal(int nodeId) { <nl> + 		 <nl> + 		if (isNodeHealing(nodeId)) { <nl> + 			logger.debug("NODE {}: Node is already healing.", node.getNodeId()); <nl> 
new file <nl> ppp MiosBinding.java <nl> + package org.openhab.binding.mios.internal; <nl> + import java.util.Calendar; <nl> + import java.util.Dictionary; <nl> + import java.util.Enumeration; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + import org.openhab.binding.mios.MiosBindingProvider; <nl> 
mmm RequestNodeInfoMessageClass.java <nl> ppp RequestNodeInfoMessageClass.java <nl> + 		 <nl> mmm GetRoutingInfoMessageClass.java <nl> ppp GetRoutingInfoMessageClass.java <nl> - 			incomingMessage.setTransactionCanceled(); <nl> + 			transactionComplete = true; <nl> - 		checkTransactionComplete(lastSentMessage, incomingMessage); <nl> 
new file <nl> ppp JpaPersistenceServiceTest.java <nl> + package org.openhab.persistence.jpa.internal; <nl> + import static org.junit.Assert.*; <nl> + import java.io.File; <nl> + import java.util.Collections; <nl> + import java.util.List; <nl> + import org.junit.BeforeClass; <nl> + import org.junit.Test; <nl> 
new file <nl> ppp RMEBinding.java <nl> + package org.openhab.binding.rme.internal; <nl> + import gnu.io.CommPortIdentifier; <nl> + import gnu.io.PortInUseException; <nl> + import gnu.io.SerialPort; <nl> + import gnu.io.SerialPortEvent; <nl> + import gnu.io.SerialPortEventListener; <nl> + import gnu.io.UnsupportedCommOperationException; <nl> 
mmm KNXConnection.java <nl> ppp KNXConnection.java <nl> - sLogger.warn("Initial connection to KNX bus failed!"); <nl> + sLogger.warn("Inital connection to KNX bus failed!"); <nl> mmm HueBridge.java <nl> ppp HueBridge.java <nl> - import java.io.IOException; <nl> - import org.apache.commons.lang.StringUtils; <nl> 
mmm SatelGenericBindingProvider.java <nl> ppp SatelGenericBindingProvider.java <nl> + import org.openhab.binding.satel.config.ConnectionStatusBindingConfig; <nl> + 			bc = ConnectionStatusBindingConfig.parseConfig(bindingConfig); <nl> + 			if (bc != null) { <nl> + 				return bc; <nl> + 			} <nl> new file <nl> 
mmm OneWireBinding.java <nl> ppp OneWireBinding.java <nl> - public class OneWireBinding extends AbstractBinding<OneWireBindingProvider> implements ManagedService, InterfaceOneWireDevicePropertyWantsUpdateListener { <nl> + public class OneWireBinding extends AbstractBinding<OneWireBindingProvider> <nl> + 		implements ManagedService, <nl> 
deleted file <nl> mmm Direction.java <nl> - package org.openhab.binding.tinkerforge.internal.model; <nl> - import java.util.Arrays; <nl> - import java.util.Collections; <nl> - import java.util.List; <nl> - import org.eclipse.emf.common.util.Enumerator; <nl> - public enum Direction implements Enumerator <nl> 
deleted file <nl> mmm Category.java <nl> - package org.openhab.binding.withings.internal.model; <nl> - public enum Category { <nl> - 	MEASURE("Measure", 1), TARGET("Target", 2); <nl> - 	public static Category getForType(int type) { <nl> - 		Category[] categories = values(); <nl> - 		for (Category category : categories) { <nl> 
mmm ZWaveNodeSerializer.java <nl> ppp ZWaveNodeSerializer.java <nl> - 			logger.debug("Serializing node {} to file {}", node.getNodeId(), file.getPath()); <nl> + 			logger.debug("NODE {}: Serializing to file {}", node.getNodeId(), file.getPath()); <nl> - 				logger.error("There was an error writing the node config to a file: {}", e.getMessage()); <nl> 
mmm FritzboxTr064BindingProvider.java <nl> ppp FritzboxTr064BindingProvider.java <nl> + import static org.openhab.binding.fritzboxtr064.internal.Tr064Comm.soapToString; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> + import java.util.Set; <nl> + import javax.xml.soap.SOAPBody; <nl> + import javax.xml.soap.SOAPException; <nl> 
new file <nl> ppp IRtransGenericBindingProvider.java <nl> + package org.openhab.binding.irtrans.internal; <nl> + import java.net.InetAddress; <nl> + import java.net.InetSocketAddress; <nl> + import java.net.UnknownHostException; <nl> + import java.util.ArrayList; <nl> + import java.util.Collection; <nl> + import java.util.HashMap; <nl> 
mmm CommandHandler.java <nl> ppp CommandHandler.java <nl> + import org.openhab.binding.insteonplm.internal.device.DeviceFeatureListener.StateChangeType; <nl> + 	protected String nm() { <nl> + 		return (this.getClass().getSimpleName()); <nl> + 	} <nl> + 	 <nl> - 			logger.warn("command {} is not implemented yet!", cmd); <nl> 
mmm XbmcConnector.java <nl> ppp XbmcConnector.java <nl> - 	public void updatePlayerStatus() { <nl> - 		updatePlayerStatus(false); <nl> - 	} <nl> - 	public void updatePlayerStatus(final boolean updatePolledPropertiesOnly) { <nl> + 	public void updatePlayerStatus() { <nl> - 					if (!updatePolledPropertiesOnly) { <nl> 
mmm ZWaveConfigurationCommandClass.java <nl> ppp ZWaveConfigurationCommandClass.java <nl> - import org.openhab.binding.zwave.internal.protocol.event.ZWaveCommandClassValueEvent; <nl> - 	public class ZWaveConfigurationParameterEvent extends ZWaveCommandClassValueEvent { <nl> + 	public class ZWaveConfigurationParameterEvent extends ZWaveEvent { <nl> 
mmm ZWaveNode.java <nl> ppp ZWaveNode.java <nl> - 	 <nl> + @SuppressWarnings("unused") <nl> + private boolean security; <nl> + @SuppressWarnings("unused") <nl> + private boolean beaming; <nl> + @SuppressWarnings("unused") <nl> + private int maxBaudRate; <nl> + public void setSecurity(boolean security) { <nl> + this.security = security; <nl> 
deleted file <nl> mmm SunZodiac.java <nl> - package org.openhab.binding.astro.internal.model; <nl> - import java.util.Calendar; <nl> - public class SunZodiac extends Zodiac { <nl> - 	private Range range; <nl> - 	public SunZodiac(ZodiacSign sign, Range range) { <nl> - 		super(sign); <nl> - 		this.range = range; <nl> 
mmm UDPBinding.java <nl> ppp UDPBinding.java <nl> - 	private static String postAmble = "\r\n"; <nl> + 	private static String postAmble = ""; <nl> - } <nl> + } <nl> mmm CcuClient.java <nl> ppp CcuClient.java <nl> - 		params.setConnectionManagerTimeout(5000); <nl> - 		params.setSoTimeout(30000); <nl> + 		Long timeout = context.getConfig().getTimeout() * 1000L; <nl> 
mmm InsteonPLMBindingConfig.java <nl> ppp InsteonPLMBindingConfig.java <nl> - 	public InsteonPLMBindingConfig(InsteonAddress adr, String feature, <nl> + 	public InsteonPLMBindingConfig(String name, InsteonAddress adr, String feature, <nl> + 		this.itemName	= name; <nl> + 	private final String				itemName; <nl> 
mmm RRD4jService.java <nl> ppp RRD4jService.java <nl> - 	protected final static String DB_FOLDER = "etc/rrd4j"; <nl> + 	protected final static String DB_FOLDER = getUserDataFolder() + File.separator + "rrd4j"; <nl> + 	static private String getUserDataFolder() { <nl> + 		String progArg = System.getProperty("smarthome.userdata"); <nl> 
mmm NetatmoBinding.java <nl> ppp NetatmoBinding.java <nl> - 	private static final String WIND = "Wind"; <nl> - 						case WINDSTRENGTH: <nl> - 						case WINDANGLE: <nl> - 						case GUSTSTRENGTH: <nl> - 						case GUSTANGLE: <nl> - 									} else if (NetatmoMeasureType <nl> - 											.isWind(measureType)) { <nl> 
mmm ZWaveController.java <nl> ppp ZWaveController.java <nl> + import org.openhab.binding.zwave.internal.protocol.event.ZWaveNetworkEvent; <nl> + import org.openhab.binding.zwave.internal.protocol.event.ZWaveNetworkEvent.State; <nl> + import org.openhab.binding.zwave.internal.protocol.serialmessage.IsFailedNodeMessageClass; <nl> 
new file <nl> ppp MyHomeJavaConnector.java <nl> + package com.myhome.fcrisciani.connector; <nl> + import java.io.BufferedReader; <nl> + import java.io.IOException; <nl> + import java.io.InputStreamReader; <nl> + import java.io.PrintWriter; <nl> + import java.net.Socket; <nl> + import java.util.concurrent.Semaphore; <nl> 
new file <nl> ppp ZWaveDbConfigurationParameter.java <nl> + package org.openhab.binding.zwave.internal.config; <nl> + import java.util.List; <nl> + import com.thoughtworks.xstream.annotations.XStreamImplicit; <nl> + public class ZWaveDbConfigurationParameter { <nl> + 	public Integer Index; <nl> + 	public String Type; <nl> 
deleted file <nl> mmm SappAddress.java <nl> - package org.openhab.binding.sapp.internal.model; <nl> - public abstract class SappAddress { <nl> - 	private String pnmasId; <nl> - 	private SappAddressType addressType; <nl> - 	private int address; <nl> - 	private String subAddress; <nl> - 	public SappAddress(String pnmasId, SappAddressType addressType, int address, String subAddress) { <nl> 
mmm RFXComGenericBindingProvider.java <nl> ppp RFXComGenericBindingProvider.java <nl> - 						+ types[1] + "'!"); <nl> + 						+ types[1] + "' in type '" + config.packetType + "'!"); <nl> mmm RFXComBaseMessage.java <nl> ppp RFXComBaseMessage.java <nl> + 		RFY(26), <nl> mmm RFXComMessageFactory.java <nl> ppp RFXComMessageFactory.java <nl> 
mmm Circle.java <nl> ppp Circle.java <nl> + 				if(pulseToWatt(one) > 10000) { <nl> + 					return true; <nl> + 				} <nl> mmm ZWaveConfigurationCommandClass.java <nl> ppp ZWaveConfigurationCommandClass.java <nl> - 		logger.debug(String.format("Received Configuration Request for Node ID = %d", this.getNode().getNodeId())); <nl> 
deleted file <nl> mmm Squeezebox.java <nl> - package org.openhab.action.squeezebox.internal; <nl> - import java.io.UnsupportedEncodingException; <nl> - import java.net.URLEncoder; <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - import org.apache.commons.lang.StringUtils; <nl> - import org.openhab.core.scriptengine.action.ActionDoc; <nl> 
mmm MBrickd.java <nl> ppp MBrickd.java <nl> - *   <li>{@link org.openhab.binding.tinkerforge.internal.model.MBrickd#isReconnected <em>Reconnected</em>}</li> <nl> - boolean isReconnected(); <nl> - void setReconnected(boolean value); <nl> - 	public static String appendCRC2(String input) { <nl> - 		int check = 0; <nl> 
deleted file <nl> mmm DaikinFan.java <nl> - package org.openhab.binding.daikin.internal; <nl> - import org.apache.commons.lang.StringUtils; <nl> - public enum DaikinFan { <nl> - 	 <nl> - 	Auto("FAuto"), <nl> - 	F1("Fun1"), <nl> - 	F2("Fun2"), <nl> - 	F3("Fun3"), <nl> - 	F4("Fun4"), <nl> - 	F5("Fun5"), <nl> - 	None("None"); <nl> 
mmm PifaceCommand.java <nl> ppp PifaceCommand.java <nl> + 	ERROR_ACK(0), <nl> - 	UNKNOWN_CMD(0), <nl> - 	DIGITAL_READ_ACK(10); <nl> + 	DIGITAL_READ_ACK(10), <nl> + 	 <nl> + 	WATCHDOG_CMD(14), <nl> + 	WATCHDOG_ACK(15); <nl> mmm SqlPersistenceService.java <nl> ppp SqlPersistenceService.java <nl> - import java.text.SimpleDateFormat; <nl> 
mmm HttpClient.java <nl> ppp HttpClient.java <nl> - InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(KARATE_HTTP_PROPERTIES); <nl> + InputStream is = context.getResourceAsStream(KARATE_HTTP_PROPERTIES); <nl> mmm ScenarioExecutionUnit.java <nl> ppp ScenarioExecutionUnit.java <nl> 
mmm HttpClient.java <nl> ppp HttpClient.java <nl> - protected static final String APPLICATION_JSON = "application/json"; <nl> - protected static final String APPLICATION_XML = "application/xml"; <nl> - protected static final String APPLICATION_OCTET_STREAM = "application/octet-stream"; <nl> - protected static final String TEXT_PLAIN = "text/plain"; <nl> 
mmm WebMockRunner.java <nl> ppp WebMockRunner.java <nl> - import com.intuit.karate.cucumber.CucumberRunner; <nl> - import com.intuit.karate.cucumber.KarateStats; <nl> + import com.intuit.karate.junit4.Karate; <nl> - import static org.junit.Assert.assertTrue; <nl> - import org.junit.Test; <nl> + import org.junit.BeforeClass; <nl> 
mmm AbstractInputBuffer.java <nl> ppp AbstractInputBuffer.java <nl> + @Override <nl> mmm InternalNioOutputBuffer.java <nl> ppp InternalNioOutputBuffer.java <nl> + @Override <nl> mmm OutputFilter.java <nl> ppp OutputFilter.java <nl> + @Override <nl> mmm InternalOutputBuffer.java <nl> ppp InternalOutputBuffer.java <nl> 
mmm BasicAuthenticator.java <nl> ppp BasicAuthenticator.java <nl> + import javax.servlet.http.HttpServletRequest; <nl> - register(request, response, principal, Constants.BASIC_METHOD, <nl> - username, password); <nl> + register(request, response, principal, <nl> + HttpServletRequest.BASIC_AUTH, username, password); <nl> 
mmm ParamFilter.java <nl> ppp ParamFilter.java <nl> + @Override <nl> + @Override <nl> + @Override <nl> mmm TestMemberArrival.java <nl> ppp TestMemberArrival.java <nl> + @Override <nl> + @Override <nl> mmm Benchmarks.java <nl> ppp Benchmarks.java <nl> + @Override <nl> + @Override <nl> + @Override <nl> + @Override <nl> 
mmm AjpNioProtocol.java <nl> ppp AjpNioProtocol.java <nl> - endpoint = new NioEndpoint(); <nl> + super(new NioEndpoint()); <nl> - ((NioEndpoint) endpoint).setHandler(cHandler); <nl> + ((NioEndpoint) getEndpoint()).setHandler(cHandler); <nl> - endpoint.setUseSendfile(false); <nl> + getEndpoint().setUseSendfile(false); <nl> 
mmm ApplicationPushBuilder.java <nl> ppp ApplicationPushBuilder.java <nl> - catalinaRequest.getContext().getCookieProcessor())); <nl> + catalinaRequest.getContext().getCookieProcessor(), context)); <nl> - private static String generateCookieHeader(List<Cookie> cookies, CookieProcessor cookieProcessor) { <nl> 
mmm Expression.java <nl> ppp Expression.java <nl> - @Deprecated <nl> - @Deprecated <nl> - @Deprecated <nl> mmm ImplicitObjectELResolver.java <nl> ppp ImplicitObjectELResolver.java <nl> - public Class<?> getType(ELContext context, Object base, Object property) <nl> + public Class getType(ELContext context, Object base, Object property) <nl> 
mmm ParameterMap.java <nl> ppp ParameterMap.java <nl> - * <code>ParmaeterMap</code> instance is not locked. <nl> + * <code>ParameterMap</code> instance is not locked. <nl> mmm ExpiresFilter.java <nl> ppp ExpiresFilter.java <nl> - "expiresFilter.responseAlreadyCommited", <nl> + "expiresFilter.responseAlreadyCommitted", <nl> 
mmm TestMapELResolver.java <nl> ppp TestMapELResolver.java <nl> - private static enum MethodUnderTest { <nl> + private enum MethodUnderTest { <nl> mmm TestBeanNameELResolver.java <nl> ppp TestBeanNameELResolver.java <nl> - private static enum MethodUnderTest { <nl> + private enum MethodUnderTest { <nl> mmm TestCustomSsl.java <nl> 
mmm GzipOutputFilter.java <nl> ppp GzipOutputFilter.java <nl> + import java.nio.ByteBuffer; <nl> + @Override <nl> + public int doWrite(ByteBuffer chunk) throws IOException { <nl> + if (compressionStream == null) { <nl> + compressionStream = new GZIPOutputStream(fakeOutputStream, true); <nl> + } <nl> + int len = chunk.remaining(); <nl> 
mmm FileItemHeaders.java <nl> ppp FileItemHeaders.java <nl> mmm InvalidFileNameException.java <nl> ppp InvalidFileNameException.java <nl> mmm Streams.java <nl> ppp Streams.java <nl> - public abstract class LimitedInputStream <nl> - extends FilterInputStream implements Closeable { <nl> + public abstract class LimitedInputStream extends FilterInputStream implements Closeable { <nl> 
mmm SimpleTcpCluster.java <nl> ppp SimpleTcpCluster.java <nl> - * @version $Id$ <nl> mmm SessionMessageImpl.java <nl> ppp SessionMessageImpl.java <nl> - * <nl> - * @version $Id$ <nl> mmm CatalinaCluster.java <nl> ppp CatalinaCluster.java <nl> mmm JvmRouteBinderValve.java <nl> ppp JvmRouteBinderValve.java <nl> - * @version $Id$ <nl> 
mmm StackMapEntry.java <nl> ppp StackMapEntry.java <nl> - this(file.readShort(), file.readShort(), null, -1, null); <nl> - } <nl> - public StackMapEntry(int byte_code_offset, int number_of_locals, <nl> - StackMapType[] types_of_locals, int number_of_stack_items, <nl> - StackMapType[] types_of_stack_items) { <nl> 
mmm SingleThreadModel.java <nl> ppp SingleThreadModel.java <nl> mmm HttpServletResponseWrapper.java <nl> ppp HttpServletResponseWrapper.java <nl> - @Deprecated <nl> - @Deprecated <nl> - @Deprecated <nl> mmm HttpSessionContext.java <nl> ppp HttpSessionContext.java <nl> - @Deprecated <nl> - @Deprecated <nl> - @Deprecated <nl> 
mmm ImplicitObjectELResolver.java <nl> ppp ImplicitObjectELResolver.java <nl> mmm Resource.java <nl> ppp Resource.java <nl> mmm ResourceBundleELResolver.java <nl> ppp ResourceBundleELResolver.java <nl> - public @SuppressWarnings("unchecked") Iterator getFeatureDescriptors( <nl> + public @SuppressWarnings({ "unchecked", "rawtypes" }) Iterator getFeatureDescriptors( <nl> 
mmm NioEndpoint.java <nl> ppp NioEndpoint.java <nl> - @Override <nl> - public boolean isRunning() { <nl> - return running; <nl> - } <nl> - @Override <nl> - public boolean isPaused() { <nl> - return paused; <nl> - } <nl> - @Override <nl> - public void pause() { <nl> - if (running && !paused) { <nl> - paused = true; <nl> 
mmm JDBCRealm.java <nl> ppp JDBCRealm.java <nl> - * @version $Id$ <nl> mmm MemoryRealm.java <nl> ppp MemoryRealm.java <nl> - * @version $Id$ <nl> mmm JAASCallbackHandler.java <nl> ppp JAASCallbackHandler.java <nl> - * @version $Id$ <nl> mmm JAASMemoryLoginModule.java <nl> ppp JAASMemoryLoginModule.java <nl> - * @version $Id$ <nl> 
mmm TagExtraInfo.java <nl> ppp TagExtraInfo.java <nl> - private TagInfo tagInfo; <nl> + private  TagInfo tagInfo; <nl> mmm MultipartConfigElement.java <nl> ppp MultipartConfigElement.java <nl> - private String location = ""; <nl> - private long maxFileSize = -1; <nl> - private long maxRequestSize = -1; <nl> - private int fileSizeThreshold = 0; <nl> 
mmm TestBug49158.java <nl> ppp TestBug49158.java <nl> + import static org.junit.Assert.assertEquals; <nl> + import org.junit.Test; <nl> + @Test <nl> mmm TestCookiesNoStrictNamingSysProps.java <nl> ppp TestCookiesNoStrictNamingSysProps.java <nl> + import static org.junit.Assert.assertEquals; <nl> + import org.junit.Test; <nl> 
mmm ConstantClass.java <nl> ppp ConstantClass.java <nl> - private static final long serialVersionUID = -6603658849582876642L; <nl> mmm AccessFlags.java <nl> ppp AccessFlags.java <nl> - public abstract class AccessFlags implements java.io.Serializable { <nl> + public abstract class AccessFlags { <nl> - private static final long serialVersionUID = 2548932939969293935L; <nl> 
mmm ExitCode.java <nl> ppp ExitCode.java <nl> - public class ExitCode { <nl> + public enum ExitCode { <nl> + EXECUTION_FINISHED(0), <nl> + UNEXPECTED_ERROR(1), <nl> + INVALID_INVOCATION(2), <nl> + UNABLE_TO_ACCESS_DATADIR(3), <nl> + ERROR_STARTING_ADMIN_SERVER(4), <nl> + TXNLOG_ERROR_TAKING_SNAPSHOT(10), <nl> 
mmm LeaderZooKeeperServer.java <nl> ppp LeaderZooKeeperServer.java <nl> - super(logFactory, self.tickTime, self.minSessionTimeout, self.maxSessionTimeout, zkDb, self); <nl> + super(logFactory, self.tickTime, self.minSessionTimeout, self.maxSessionTimeout, <nl> + self.clientPortListenBacklog, zkDb, self); <nl> 
mmm QuorumZooKeeperServer.java <nl> ppp QuorumZooKeeperServer.java <nl> - DataTreeBuilder treeBuilder, ZKDatabase zkDb, QuorumPeer self) <nl> + ZKDatabase zkDb, QuorumPeer self) <nl> - super(logFactory, tickTime, minSessionTimeout, maxSessionTimeout, <nl> - treeBuilder, zkDb); <nl> + super(logFactory, tickTime, minSessionTimeout, maxSessionTimeout, zkDb); <nl> 
mmm ClientCnxn.java <nl> ppp ClientCnxn.java <nl> - throws IOException { <nl> + throws IOException <nl> + { <nl> + } <nl> + public void start() { <nl> - private class WatcherSetEventPair { <nl> + private static class WatcherSetEventPair { <nl> mmm FollowerZooKeeperServer.java <nl> ppp FollowerZooKeeperServer.java <nl> 
new file <nl> ppp OidcUserAuthorityTests.java <nl> + package org.springframework.security.oauth2.core.oidc.user; <nl> + import org.junit.Test; <nl> + import org.springframework.security.oauth2.core.oidc.IdTokenClaimNames; <nl> + import org.springframework.security.oauth2.core.oidc.OidcIdToken; <nl> + import org.springframework.security.oauth2.core.oidc.OidcUserInfo; <nl> 
deleted file <nl> mmm MessageController.java <nl> - package sample.mvc; <nl> - import java.util.List; <nl> - import org.springframework.beans.factory.annotation.Autowired; <nl> - import org.springframework.messaging.handler.annotation.MessageMapping; <nl> - import org.springframework.messaging.simp.SimpMessageSendingOperations; <nl> 
mmm OAuth2LoginApplicationTests.java <nl> ppp OAuth2LoginApplicationTests.java <nl> - import org.springframework.security.oauth2.client.authentication.userinfo.OAuth2UserService; <nl> + import org.springframework.security.oauth2.client.userinfo.OAuth2UserService; <nl> mmm OidcUserService.java <nl> ppp OidcUserService.java <nl> 
mmm ConsensusBasedTests.java <nl> ppp ConsensusBasedTests.java <nl> - List<AccessDecisionVoter> voters = new Vector<AccessDecisionVoter>(); <nl> + List<AccessDecisionVoter<? extends Object>> voters = new Vector<AccessDecisionVoter<? extends Object>>(); <nl> mmm AffirmativeBased.java <nl> ppp AffirmativeBased.java <nl> 
mmm DefaultOidcUserTests.java <nl> ppp DefaultOidcUserTests.java <nl> - package org.springframework.security.oauth2.oidc.core.user; <nl> + package org.springframework.security.oauth2.core.oidc.user; <nl> - import org.springframework.security.oauth2.oidc.core.IdToken; <nl> - import org.springframework.security.oauth2.oidc.core.IdTokenClaim; <nl> 
new file <nl> ppp RemoveAuthorizedClientReactiveOAuth2AuthorizationFailureHandler.java <nl> + package org.springframework.security.oauth2.client.web; <nl> + import org.springframework.security.core.Authentication; <nl> + import org.springframework.security.oauth2.client.ClientAuthorizationException; <nl> 
mmm SecureIndexController.java <nl> ppp SecureIndexController.java <nl> + import org.springframework.security.Authentication; <nl> + import org.springframework.security.acls.Permission; <nl> + import org.springframework.security.acls.domain.BasePermission; <nl> + import org.springframework.security.context.SecurityContextHolder; <nl> 
mmm FilterSecurityInterceptorTests.java <nl> ppp FilterSecurityInterceptorTests.java <nl> + import org.springframework.security.util.AntUrlPathMatcher; <nl> + import org.springframework.security.util.RegexUrlPathMatcher; <nl> - public void testEnsuresAccessDecisionManagerSupportsFilterInvocationClass() <nl> 
new file <nl> ppp MessageSecurityExpressionRoot.java <nl> + package org.springframework.security.messaging.access.expression; <nl> + import org.springframework.messaging.Message; <nl> + import org.springframework.security.access.expression.SecurityExpressionRoot; <nl> + import org.springframework.security.core.Authentication; <nl> 
mmm OAuth2LoginConfigurer.java <nl> ppp OAuth2LoginConfigurer.java <nl> - import static org.springframework.security.oauth2.client.web.AuthorizationCodeRequestRedirectFilter.CLIENT_ALIAS_URI_VARIABLE_NAME; <nl> + import static org.springframework.security.oauth2.client.web.AuthorizationCodeRequestRedirectFilter.REGISTRATION_ID_URI_VARIABLE_NAME; <nl> 
new file <nl> ppp TestHelperTests.java <nl> + package org.acegisecurity.userdetails.hierarchicalroles; <nl> + import junit.framework.TestCase; <nl> + import junit.textui.TestRunner; <nl> + import org.acegisecurity.GrantedAuthority; <nl> + import org.acegisecurity.GrantedAuthorityImpl; <nl> + public class TestHelperTests extends TestCase { <nl> 
mmm AuthorizeTagCustomGrantedAuthorityTests.java <nl> ppp AuthorizeTagCustomGrantedAuthorityTests.java <nl> - public int compareTo(Object o) { <nl> + public int compareTo(GrantedAuthority o) { <nl> mmm JdbcMutableAclService.java <nl> ppp JdbcMutableAclService.java <nl> - public MutableAcl createAcl(ObjectIdentity objectIdentity) <nl> 
mmm LuceneIndex.java <nl> ppp LuceneIndex.java <nl> + } else if (e.value instanceof UUID) { <nl> + Field field = new StringField(e.field, e.value.toString(), Field.Store.YES); <nl> + doc.add(field); <nl> - } else throw new IllegalArgumentException("Unsupported type: " + value); <nl> + } else if (value instanceof UUID) { <nl> 
mmm StandardTitanTx.java <nl> ppp StandardTitanTx.java <nl> - Preconditions.checkArgument(type.getID() > 0); <nl> - addProperty(type, SystemKey.TypeName, name); <nl> + addProperty(type, SystemKey.TypeName, name); <nl> + Preconditions.checkArgument(type.getID() > 0); <nl> mmm TitanGraphTest.java <nl> ppp TitanGraphTest.java <nl> 
deleted file <nl> mmm PersistitKeyValueStore.java <nl> - package com.thinkaurelius.titan.diskstorage.persistit; <nl> - import com.persistit.*; <nl> - import com.persistit.exception.PersistitException; <nl> - import com.persistit.exception.RollbackException; <nl> - import com.thinkaurelius.titan.diskstorage.PermanentStorageException; <nl> 
mmm VerticesVerticesMapReduceTest.java <nl> ppp VerticesVerticesMapReduceTest.java <nl> + mapReduceDriver.setCombiner(new VerticesVerticesMapReduce.Combiner()); <nl> mmm BackFilterMapReduceTest.java <nl> ppp BackFilterMapReduceTest.java <nl> - assertEquals(mapReduceDriver.getCounters().findCounter(FilterMap.Counters.VERTICES_FILTERED).getValue(), 0); <nl> 
mmm KeyValueEntry.java <nl> ppp KeyValueEntry.java <nl> - private Integer ttl; <nl> - public Integer getTtl() { <nl> - return ttl; <nl> - } <nl> - public void setTTL(final Integer ttl) { <nl> - this.ttl = ttl; <nl> - } <nl> mmm BerkeleyJEStoreManager.java <nl> ppp BerkeleyJEStoreManager.java <nl> - .cellTTL(true) <nl> 
mmm HBaseGraphTest.java <nl> ppp HBaseGraphTest.java <nl> + @Override <nl> + protected boolean isLockingOptimistic() { <nl> + return true; <nl> + } <nl> mmm AstyanaxGraphTest.java <nl> ppp AstyanaxGraphTest.java <nl> + @Override <nl> + protected boolean isLockingOptimistic() { <nl> + return true; <nl> + } <nl> mmm TitanGraphTest.java <nl> 
mmm SpeedComparisonPerformanceTest.java <nl> ppp SpeedComparisonPerformanceTest.java <nl> - graphdb.commit(); <nl> + graphdb.stopTransaction(TransactionalGraph.Conclusion.SUCCESS); <nl> - graphdb.commit(); <nl> + graphdb.stopTransaction(TransactionalGraph.Conclusion.FAILURE); <nl> mmm TitanGraphTestCommon.java <nl> 
mmm RestClientSetup.java <nl> ppp RestClientSetup.java <nl> - if (config.has(ElasticSearchIndex.MAX_RETRY_TIMEOUT)) { <nl> - restClientBuilder.setMaxRetryTimeoutMillis(config.get(ElasticSearchIndex.MAX_RETRY_TIMEOUT)); <nl> - } <nl> mmm RestElasticSearchClient.java <nl> ppp RestElasticSearchClient.java <nl> 
mmm InternalCassandraLockKeyColumnValueStoreTest.java <nl> ppp InternalCassandraLockKeyColumnValueStoreTest.java <nl> - 	sc.addProperty(StorageManager.LOCAL_LOCK_MEDIATOR_PREFIX_KEY, "cassandra-" + idx); <nl> + 	sc.addProperty(CassandraThriftStorageManager.LOCAL_LOCK_MEDIATOR_PREFIX_KEY, "cassandra-" + idx); <nl> 
mmm Backend.java <nl> ppp Backend.java <nl> + import java.io.InputStream; <nl> - private static final Map<String, String> REGISTERED_STORAGE_MANAGERS = new HashMap<String, String>(); <nl> + private static final Map<String, String> REGISTERED_STORAGE_MANAGERS = new HashMap<String, String>() {{ <nl> + put("local", "com.thinkaurelius.titan.diskstorage.berkeleyje.BerkeleyJEStoreManager"); <nl> 
mmm Backend.java <nl> ppp Backend.java <nl> mmm HadoopGraph.java <nl> ppp HadoopGraph.java <nl> - public Path getOutputLocation() { <nl> - if (!getTitanConf().has(TitanHadoopConfiguration.OUTPUT_LOCATION)) <nl> - throw new IllegalStateException("Please set " + TitanHadoopConfiguration.OUTPUT_LOCATION + " configuration option."); <nl> 
new file <nl> ppp DistributionGenerator.java <nl> + package com.tinkerpop.furnace.alpha.generators; <nl> + import java.util.ArrayList; <nl> + import java.util.Collections; <nl> + import java.util.Random; <nl> + import com.tinkerpop.blueprints.Graph; <nl> + import com.tinkerpop.blueprints.Vertex; <nl> + public class DistributionGenerator extends AbstractGenerator { <nl> 
mmm BerkeleyLuceneTest.java <nl> ppp BerkeleyLuceneTest.java <nl> - return false; <nl> + return true; <nl> + return true; <nl> + } <nl> + @Override <nl> + protected boolean supportsGeoCollections() { <nl> mmm ElasticsearchIndexTest.java <nl> ppp ElasticsearchIndexTest.java <nl> + import org.apache.http.client.utils.URIBuilder; <nl> 
mmm LocalLockMediatorProvider.java <nl> ppp LocalLockMediatorProvider.java <nl> + package com.thinkaurelius.titan.diskstorage.locking.consistentkey;diff --git a/data/zhouhj/data9/janusgraph_git/1364/old/KeyColumnValueStore.java b/data/zhouhj/data9/janusgraph_git/1364/new/KeyColumnValueStore.java <nl> mmm KeyColumnValueStore.java <nl> 
mmm ElasticSearchRequest.java <nl> ppp ElasticSearchRequest.java <nl> + private boolean disableSourceRetrieval; <nl> + public boolean isDisableSourceRetrieval() { <nl> + return disableSourceRetrieval; <nl> + } <nl> + public void setDisableSourceRetrieval(boolean disableSourceRetrieval) { <nl> + this.disableSourceRetrieval = disableSourceRetrieval; <nl> 
mmm IndexRepairJob.java <nl> ppp IndexRepairJob.java <nl> - for (Object relation : vertex.query().types(indexRelationTypeName).direction(Direction.OUT).relations()) { <nl> - InternalRelation janusgraphRelation = (InternalRelation) relation; <nl> + for (JanusGraphRelation relation : vertex.query().types(indexRelationTypeName).direction(Direction.OUT).relations()) { <nl> 
deleted file <nl> mmm InfinispanCacheAdapterTest.java <nl> - package com.thinkaurelius.titan.diskstorage.infinispan; <nl> - import com.thinkaurelius.titan.InfinispanStorageSetup; <nl> - import com.thinkaurelius.titan.diskstorage.KeyColumnValueStoreTest; <nl> - import com.thinkaurelius.titan.diskstorage.StorageException; <nl> 
mmm CQLStoreManager.java <nl> ppp CQLStoreManager.java <nl> - import static com.datastax.driver.core.schemabuilder.SchemaBuilder.dropKeyspace; <nl> + import static com.datastax.driver.core.querybuilder.QueryBuilder.truncate; <nl> - private final ExecutorService executorService; <nl> + final ExecutorService executorService; <nl> 
mmm AbstractTitanTx.java <nl> ppp AbstractTitanTx.java <nl> - private final Optional<Set<InternalTitanVertex>> newVertices; <nl> + private final Optional<Set<InternalTitanVertex>> newNodes; <nl> - if (!config.isReadOnly() && config.hasMaintainNewVertices()) { <nl> - newVertices = Optional.of(Collections.newSetFromMap(new ConcurrentHashMap<InternalTitanVertex, Boolean>(10, <nl> 
mmm Hadoop2Compat.java <nl> ppp Hadoop2Compat.java <nl> - package com.thinkaurelius.titan.hadoop.compat; <nl> + package com.thinkaurelius.titan.hadoop.compat.h2; <nl> + import com.thinkaurelius.titan.graphdb.configuration.TitanConstants; <nl> + import com.thinkaurelius.titan.hadoop.compat.HadoopCompat; <nl> 
mmm AssemblyITSupport.java <nl> ppp AssemblyITSupport.java <nl> - import java.lang.ProcessBuilder.Redirect; <nl> - pb.redirectInput(Redirect.PIPE); <nl> - pb.redirectOutput(Redirect.PIPE); <nl> - pb.redirectError(Redirect.PIPE); <nl> mmm CassandraProcessStarter.java <nl> ppp CassandraProcessStarter.java <nl> 
new file <nl> ppp ConstructionProxyFactory.java <nl> + package com.google.inject.spi; <nl> + import java.lang.reflect.Constructor; <nl> + public interface ConstructionProxyFactory { <nl> + <T> ConstructionProxy<T> get(Constructor<T> constructor); <nl> + } <nl> new file <nl> ppp ToStringBuilder.java <nl> + package com.google.inject.util; <nl> 
mmm MembersInjectorTest.java <nl> ppp MembersInjectorTest.java <nl> - bind(MembersInjector.class).toProvider(Providers.<MembersInjector>of(null)); <nl> + bind(MembersInjector.class).toProvider(Providers.of(null)); <nl> mmm ProviderInjectionTest.java <nl> ppp ProviderInjectionTest.java <nl> - void initialize(List list) { <nl> 
new file <nl> ppp ProvidesIntoOptional.java <nl> + package com.google.inject.multibindings; <nl> + import static java.lang.annotation.ElementType.METHOD; <nl> + import static java.lang.annotation.RetentionPolicy.RUNTIME; <nl> + import com.google.inject.Module; <nl> + import java.lang.annotation.Documented; <nl> 
mmm ElementsTest.java <nl> ppp ElementsTest.java <nl> - new FailingElementVisitor() { <nl> - @Override public <T> Void visit(Binding<T> binding) { <nl> - assertTrue(binding instanceof ExposedBinding); <nl> - assertEquals(arrayList, binding.getKey()); <nl> - binding.acceptTargetVisitor(new FailingTargetVisitor<T>() { <nl> 
mmm ConfigObject.java <nl> ppp ConfigObject.java <nl> + @Override <nl> + ConfigObject withOrigin(ConfigOrigin origin); <nl> mmm ConfigOrigin.java <nl> ppp ConfigOrigin.java <nl> + public ConfigOrigin withComments(List<String> comments); <nl> + public ConfigOrigin withLineNumber(int lineNumber); <nl> mmm AbstractConfigObject.java <nl> 
mmm ConfigSubstitution.java <nl> ppp ConfigSubstitution.java <nl> - sb.append(ConfigUtil.renderJsonString((String) p)); <nl> + sb.append(ConfigImplUtil.renderJsonString((String) p)); <nl> mmm Tokens.java <nl> ppp Tokens.java <nl> - && ConfigUtil.equalsHandlingNull(((Problem) other).cause, cause); <nl> + && ConfigImplUtil.equalsHandlingNull(((Problem) other).cause, cause); <nl> 
mmm AboutFragment.java <nl> ppp AboutFragment.java <nl> - import android.app.Fragment; <nl> + import android.support.v4.app.Fragment; <nl> mmm XposedDropdownNavActivity.java <nl> ppp XposedDropdownNavActivity.java <nl> - import android.app.Fragment; <nl> - import android.app.FragmentTransaction; <nl> + import android.support.v4.app.Fragment; <nl> 
mmm IgnoreRestExtension.java <nl> ppp IgnoreRestExtension.java <nl> - for (FeatureInfo feature : spec.getFeatures()) <nl> - feature.setSkipped(!feature.getFeatureMethod().getReflection().isAnnotationPresent(IgnoreRest.class)); <nl> + for (FeatureInfo feature : spec.getFeatures()) { <nl> + if(!feature.getFeatureMethod().getReflection().isAnnotationPresent(IgnoreRest.class)) <nl> 
mmm GroovyReleaseInfo.java <nl> ppp GroovyReleaseInfo.java <nl> - import org.codehaus.groovy.runtime.InvokerHelper; <nl> + import org.codehaus.groovy.util.ReleaseInfo; <nl> - return VersionNumber.parse(InvokerHelper.getVersion()); <nl> + return VersionNumber.parse(ReleaseInfo.getVersion()); <nl> mmm ConditionRewriter.java <nl> 
mmm Unroll.java <nl> ppp Unroll.java <nl> + import groovy.lang.Closure; <nl> - private static final Pattern VARIABLE_PATTERN = Pattern.compile("#([a-zA-Z_\\$][\\w\\$]*)"); <nl> - private final Matcher variableMatcher; <nl> + private final Class<? extends Closure> nameGeneratorClass; <nl> - private int iterationCount; <nl> 
mmm AstNodeCache.java <nl> ppp AstNodeCache.java <nl> + public final MethodNode SpockRuntime_VerifyCondition = <nl> + SpockRuntime.getDeclaredMethods(org.spockframework.runtime.SpockRuntime.VERIFY_CONDITION).get(0); <nl> + public final MethodNode SpockRuntime_VerifyMethodCondition = <nl> + SpockRuntime.getDeclaredMethods(org.spockframework.runtime.SpockRuntime.VERIFY_METHOD_CONDITION).get(0); <nl> 
mmm GroovyReleaseInfo.java <nl> ppp GroovyReleaseInfo.java <nl> - import org.codehaus.groovy.runtime.InvokerHelper; <nl> + import org.codehaus.groovy.util.ReleaseInfo; <nl> - return VersionNumber.parse(InvokerHelper.getVersion()); <nl> + return VersionNumber.parse(ReleaseInfo.getVersion()); <nl> mmm ConditionRewriter.java <nl> 
new file <nl> ppp IgnoreIfExtension.java <nl> + package org.spockframework.runtime.extension.builtin; <nl> + import java.math.BigDecimal; <nl> + import java.util.*; <nl> + import java.util.regex.Matcher; <nl> + import java.util.regex.Pattern; <nl> + import groovy.lang.Closure; <nl> + import org.spockframework.runtime.extension.AbstractAnnotationDrivenExtension; <nl> 
mmm ConditionRewriter.java <nl> ppp ConditionRewriter.java <nl> - convertAll(expr.getMapEntryExpressions())) : <nl> + (List) convertAll(expr.getMapEntryExpressions())) : <nl> - convertAll(expr.getMapEntryExpressions())); <nl> + (List) convertAll(expr.getMapEntryExpressions())); <nl> mmm SpecParser.java <nl> 
mmm AstInspector.java <nl> ppp AstInspector.java <nl> - public void load(InputStream sourceStream) throws CompilationFailedException { <nl> - reset(); <nl> - try { <nl> - classLoader.parseClass(sourceStream); <nl> - } catch (AstSuccessfullyCaptured e) { <nl> - indexAstNodes(); <nl> - return; <nl> - } <nl> - throw new AstInspectorException("internal error"); <nl> 
new file <nl> ppp ClosureBasedUnrolledFeatureNameGenerator.java <nl> + package org.spockframework.experimental; <nl> + import java.util.regex.Matcher; <nl> + import java.util.regex.Pattern; <nl> + import groovy.lang.*; <nl> + import org.spockframework.runtime.model.FeatureInfo; <nl> + import org.spockframework.util.GroovyRuntimeUtil; <nl> 
new file <nl> ppp ClosureBasedUnrolledFeatureNameGenerator.java <nl> + package org.spockframework.experimental; <nl> + import java.util.regex.Matcher; <nl> + import java.util.regex.Pattern; <nl> + import groovy.lang.*; <nl> + import org.spockframework.runtime.model.FeatureInfo; <nl> + import org.spockframework.util.GroovyRuntimeUtil; <nl> 
mmm NodeInfo.java <nl> ppp NodeInfo.java <nl> + private int line = -1; <nl> + public int getLine() { <nl> + return line; <nl> + } <nl> + public void setLine(int line) { <nl> + this.line = line; <nl> + } <nl> mmm ConditionRewriter.java <nl> ppp ConditionRewriter.java <nl> + public void visitRegexExpression(RegexExpression expr) { <nl> 
mmm ClassRuleInterceptor.java <nl> ppp ClassRuleInterceptor.java <nl> - import org.spockframework.runtime.model.FieldInfo; <nl> + import org.spockframework.runtime.model.*; <nl> + import org.junit.runner.Description; <nl> - public ClassRuleInterceptor(List<FieldInfo> ruleFields) { <nl> + private final SpecInfo spec; <nl> 
mmm DatabaseConfig.java <nl> ppp DatabaseConfig.java <nl> - private String lport; <nl> - private String rport; <nl> - private String sshPort; <nl> - private String sshHost; <nl> - private String sshUser; <nl> - private String sshPassword; <nl> - public String getLport() { <nl> - return lport; <nl> - } <nl> - public void setLport(String lport) { <nl> 
mmm TypeConversion.java <nl> ppp TypeConversion.java <nl> + @Override <nl> + public String createLocalVarName( String desiredName ) { <nl> + return assignment.createLocalVarName( desiredName ); <nl> + } <nl> mmm MappingBuilderContext.java <nl> ppp MappingBuilderContext.java <nl> - * @param sourceType parameter to match <nl> 
new file <nl> ppp BasicAuthHttpHeaderProviderTest.java <nl> + package de.codecentric.boot.admin.web.client; <nl> + import static org.hamcrest.CoreMatchers.is; <nl> + import static org.junit.Assert.assertThat; <nl> + import static org.junit.Assert.assertTrue; <nl> + import org.junit.Test; <nl> + import com.google.common.net.HttpHeaders; <nl> 
mmm AdminServerWebConfigurationTest.java <nl> ppp AdminServerWebConfigurationTest.java <nl> - import de.codecentric.boot.admin.server.discovery.InstanceDiscoveryListener; <nl> - import org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration; <nl> - import org.springframework.cloud.commons.util.UtilAutoConfiguration; <nl> 
mmm AdminServerWebConfiguration.java <nl> ppp AdminServerWebConfiguration.java <nl> - import java.util.concurrent.ThreadPoolExecutor; <nl> - import org.springframework.core.task.AsyncTaskExecutor; <nl> - import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor; <nl> - import org.springframework.web.servlet.config.annotation.AsyncSupportConfigurer; <nl> 
mmm ServletApplicationFactoryTest.java <nl> ppp ServletApplicationFactoryTest.java <nl> + import org.springframework.boot.autoconfigure.web.servlet.DispatcherServletPath; <nl> + private DispatcherServletPath dispatcherServletPath = mock(DispatcherServletPath.class); <nl> - servletContext, pathMappedEndpoints, webEndpoint, Collections::emptyMap); <nl> 
mmm AdminServerProperties.java <nl> ppp AdminServerProperties.java <nl> - 				"trace", "logfile", "refresh", "flyway", "liquibase", "heapdump" }; <nl> + 				"trace", "logfile", "refresh", "flyway", "liquibase", "heapdump", "loggers" }; <nl> mmm StatusInfo.java <nl> ppp StatusInfo.java <nl> - import com.fasterxml.jackson.annotation.JsonCreator; <nl> 
mmm SpringBootAdminReactiveApplicationTest.java <nl> ppp SpringBootAdminReactiveApplicationTest.java <nl> + package de.codecentric.boot.admin; <nl> + import org.junit.Test; <nl> + import org.junit.runner.RunWith; <nl> + import org.springframework.boot.test.context.SpringBootTest; <nl> + import org.springframework.test.context.junit4.SpringRunner; <nl> 
deleted file <nl> mmm MaterialButton.java <nl> - package net.qiujuer.genius.material; <nl> - import android.animation.AnimatorSet; <nl> - import android.animation.ArgbEvaluator; <nl> - import android.animation.ObjectAnimator; <nl> - import android.content.Context; <nl> - import android.content.res.TypedArray; <nl> 
mmm CommandExecutor.java <nl> ppp CommandExecutor.java <nl> - Thread processThread = new Thread(TAG) { <nl> - @Override <nl> - public void run() { <nl> - startRead(); <nl> - } <nl> - }; <nl> - processThread.setDaemon(true); <nl> - processThread.start(); <nl> + if (mInStream != null) { <nl> + Thread processThread = new Thread(TAG) { <nl> 
mmm AddMinusEditItem.java <nl> ppp AddMinusEditItem.java <nl> - package me.ele.uetool.items; <nl> + package me.ele.uetool.base.item; <nl> - import me.ele.uetool.Element; <nl> + import me.ele.uetool.base.Element; <nl> mmm TitleItem.java <nl> ppp TitleItem.java <nl> - package me.ele.uetool.base; <nl> + package me.ele.uetool.base.item; <nl> 
mmm WechatPaymentConfig.java <nl> ppp WechatPaymentConfig.java <nl> - @Value("${wechat.wechat_refund_notify_url}") <nl> - private String wechat_refund_notify_url; <nl> - public String getWechat_refund_notify_url() { <nl> - return wechat_refund_notify_url; <nl> - } <nl> - public void setWechat_refund_notify_url(String wechat_refund_notify_url) { <nl> 
deleted file <nl> mmm CommentReply.java <nl> - package com.gpmall.comment.dal.entitys; <nl> - import java.io.Serializable; <nl> - import java.util.Date; <nl> - public class CommentReply implements Serializable { <nl> - private String id; <nl> - private String commentId; <nl> - private String parentId; <nl> - private String content; <nl> 
mmm OrderConverter.java <nl> ppp OrderConverter.java <nl> + public class MockMemberService implements IMemberService { <nl> + @Override <nl> + public QueryMemberResponse queryMemberById(QueryMemberRequest request) { <nl> + return new QueryMemberResponse(); <nl> + } <nl> + @Override <nl> + public HeadImageResponse updateHeadImage(HeadImageRequest request) { <nl> 
mmm InitOrderHandler.java <nl> ppp InitOrderHandler.java <nl> - order.setUniqueKey(createOrderContext.getUniqueKey()); <nl> mmm CreateOrderConvert.java <nl> ppp CreateOrderConvert.java <nl> - createOrderContext.setUniqueKey(createOrderRequest.getUniqueKey()); <nl> mmm CreateOrderContext.java <nl> ppp CreateOrderContext.java <nl> 
new file <nl> ppp UnknownLengthFileInStream.java <nl> + package alluxio.client.file; <nl> + import alluxio.AlluxioURI; <nl> + import alluxio.client.file.options.CompleteFileOptions; <nl> + import alluxio.client.file.options.InStreamOptions; <nl> + import org.slf4j.Logger; <nl> + import org.slf4j.LoggerFactory; <nl> 
mmm SpaceReserver.java <nl> ppp SpaceReserver.java <nl> + private final Map<String, Long> mHighWaterMarkInBytesOnTiers = new HashMap<>(); <nl> - private final Map<String, Long> mBytesToReserveOnTiers = new HashMap<>(); <nl> + private final Map<String, Long> mReservedBytesOnTiers = new HashMap<>(); <nl> - private void handleMasterCommand(Command cmd) throws IOException, ConnectionFailedException { <nl> 
mmm LocalUnderFileSystem.java <nl> ppp LocalUnderFileSystem.java <nl> - @Override <nl> - public Object getConf() { <nl> - return null; <nl> - } <nl> - @Override <nl> - public void setConf(Object conf) {} <nl> deleted file <nl> mmm NettyRPCContext.java <nl> - package alluxio.client.netty; <nl> - import io.netty.channel.Channel; <nl> 
new file <nl> ppp UnderFileSystemBlockInStreamTest.java <nl> + package alluxio.client.block; <nl> + import static org.mockito.Matchers.any; <nl> + import static org.mockito.Matchers.eq; <nl> + import static org.mockito.Mockito.mock; <nl> + import static org.mockito.Mockito.when; <nl> + import alluxio.ConfigurationRule; <nl> 
new file <nl> ppp UserLimitValidationTask.java <nl> + package alluxio.cli.validation; <nl> + import java.io.BufferedReader; <nl> + import java.io.IOException; <nl> + import java.io.InputStreamReader; <nl> + public final class UserLimitValidationTask implements ValidationTask { <nl> + private static final int NUMBER_OF_OPEN_FILES_MIN = 16384; <nl> 
mmm Client.java <nl> ppp Client.java <nl> - * $ yarn jar alluxio-assemblies-0.8.0-SNAPSHOT-jar-with-dependencies.jar alluxio.yarn.Client \ <nl> + * $ yarn jar \ <nl> + *     alluxio-assembly-server-<ALLUXIO-VERSION>-jar-with-dependencies.jar alluxio.yarn.Client \ <nl> - * $ yarn jar alluxio-assemblies-0.8.0-SNAPSHOT-jar-with-dependencies.jar alluxio.yarn.Client -help <nl> 
mmm GetConfTest.java <nl> ppp GetConfTest.java <nl> + import alluxio.SystemOutRule; <nl> - import org.junit.After; <nl> - import org.junit.Before; <nl> + import org.junit.Rule; <nl> - import java.io.PrintStream; <nl> - private ByteArrayOutputStream mOutputStream = null; <nl> - private PrintStream mNewOutput = null; <nl> 
mmm ExceptionMessage.java <nl> ppp ExceptionMessage.java <nl> - JOURNAL_WRITE_FAILURE("Failed to write to journal file ({0}): {1}"), <nl> - JOURNAL_FLUSH_FAILURE("Failed to flush journal file ({0}): {1}"), <nl> mmm ISessionCleanup.java <nl> ppp ISessionCleanup.java <nl> - public abstract class SessionCleanupCallback { <nl> 
mmm PropertyKey.java <nl> ppp PropertyKey.java <nl> + "if this property is true. This property is available since 1.7.1") <nl> - public static final PropertyKey MASTER_STARTUP_CONSISTENCY_CHECK_ENABLED = <nl> - new Builder(Name.MASTER_STARTUP_CONSISTENCY_CHECK_ENABLED) <nl> - .setDefaultValue(true) <nl> - .setDescription("Whether the system should be checked for consistency with the " <nl> 
mmm LineageInfo.java <nl> ppp LineageInfo.java <nl> - Preconditions.checkNotNull(outputFiles, "outputFiles"); <nl> + Preconditions.checkNotNull(outputFiles); <nl> - Preconditions.checkNotNull(job, "job"); <nl> + Preconditions.checkNotNull(job); <nl> - Preconditions.checkNotNull(parents, "parents"); <nl> + Preconditions.checkNotNull(parents); <nl> 
mmm AlluxioFuseFileSystem.java <nl> ppp AlluxioFuseFileSystem.java <nl> - import static jnr.constants.platform.OpenFlags.O_RDONLY; <nl> - import static jnr.constants.platform.OpenFlags.O_WRONLY; <nl> + import alluxio.client.file.options.SetAttributeOptions; <nl> + import alluxio.exception.DirectoryNotEmptyException; <nl> 
mmm PropertyKey.java <nl> ppp PropertyKey.java <nl> + public static final PropertyKey UNDERFS_S3_PROXY_HTTPS_ONLY = <nl> + new Builder(Name.UNDERFS_S3_PROXY_HTTPS_ONLY) <nl> + .setDefaultValue(true) <nl> + .setDescription("If using a proxy to communicate with S3, determine whether to talk " <nl> + + "to the proxy using https.") <nl> 
mmm PermissionCheckTest.java <nl> ppp PermissionCheckTest.java <nl> - return new MutableLockedInodePath(new AlluxioURI("/"), inodes, null, InodeTree.LockMode.READ); <nl> + return new MutableLockedInodePath(new AlluxioURI("/"), inodes, null); <nl> - return new MutableLockedInodePath(new AlluxioURI(uri), inodes, null, InodeTree.LockMode.READ); <nl> 
mmm JournalTool.java <nl> ppp JournalTool.java <nl> - * java -cp assembly/target/alluxio-assemblies-0.9.0-SNAPSHOT-jar-with-dependencies.jar \ <nl> + * java -cp \ <nl> + *   assembly/server/target/alluxio-assembly-server-<ALLUXIO-VERSION>-jar-with-dependencies.jar \ <nl> - package alluxio.underfs.swift; <nl> 
mmm UnknownLengthFileInStream.java <nl> ppp UnknownLengthFileInStream.java <nl> + import alluxio.annotation.PublicApi; <nl> + @PublicApi <nl> mmm AbstractOutStream.java <nl> ppp AbstractOutStream.java <nl> + import alluxio.annotation.PublicApi; <nl> + @PublicApi <nl> mmm CreateUfsFileOptions.java <nl> ppp CreateUfsFileOptions.java <nl> 
mmm InodeTreeTest.java <nl> ppp InodeTreeTest.java <nl> + import alluxio.master.file.meta.InodeTree.LockMode; <nl> + import alluxio.master.file.meta.InodeTree.LockPattern; <nl> - LockedInodePath inodePath = mTree.lockFullInodePath(NESTED_URI, InodeTree.LockMode.WRITE)) { <nl> + LockedInodePath inodePath = mTree.lockFullInodePath(NESTED_URI, LockPattern.WRITE_LAST)) { <nl> 
mmm FileSystemMasterView.java <nl> ppp FileSystemMasterView.java <nl> - throws AccessControlException, FileDoesNotExistException { <nl> + throws AccessControlException, FileDoesNotExistException, UnavailableException { <nl> mmm FileSystemMaster.java <nl> ppp FileSystemMaster.java <nl> - long getFileId(AlluxioURI path) throws AccessControlException; <nl> 
mmm WriteHandlerTest.java <nl> ppp WriteHandlerTest.java <nl> - public void writeInvalidOffsetFirstRequest() throws Exception { <nl> - mChannel.writeInbound(newWriteRequest(1, newDataBuffer(PACKET_SIZE))); <nl> - Object writeResponse = waitForResponse(mChannel); <nl> - checkWriteResponse(PStatus.INVALID_ARGUMENT, writeResponse); <nl> 
mmm FileSystemMasterTest.java <nl> ppp FileSystemMasterTest.java <nl> + import alluxio.master.file.options.DeleteOptions; <nl> - mFileSystemMaster.delete(ROOT_URI, true); <nl> + mFileSystemMaster.delete(ROOT_URI, DeleteOptions.defaults().setRecursive(true)); <nl> - mFileSystemMaster.delete(NESTED_FILE_URI, false); <nl> 
mmm ReadHandlerTest.java <nl> ppp ReadHandlerTest.java <nl> - return CommonUtils.waitForResult("response from the channel", () -> channel.readOutbound(), <nl> + return CommonUtils.waitForResult("response from the channel", channel::readOutbound, <nl> mmm UfsJournalCheckpointThread.java <nl> ppp UfsJournalCheckpointThread.java <nl> 
mmm AlluxioBlockStore.java <nl> ppp AlluxioBlockStore.java <nl> - public BlockInStream getInStream(long blockId, InStreamOptions options) throws IOException { <nl> - BlockInfo info; <nl> - try (CloseableResource<BlockMasterClient> masterClientResource = <nl> - mContext.acquireBlockMasterClientResource()) { <nl> 
new file <nl> ppp GetFilePathPRequestOrBuilder.java <nl> + package alluxio.grpc; <nl> + public interface GetFilePathPRequestOrBuilder extends <nl> + com.google.protobuf.MessageOrBuilder { <nl> + boolean hasFileId(); <nl> + long getFileId(); <nl> + } <nl> mmm FileSystemMasterClientServiceHandler.java <nl> ppp FileSystemMasterClientServiceHandler.java <nl> 
mmm BlockStore.java <nl> ppp BlockStore.java <nl> + import javax.annotation.Nullable; <nl> - interface BlockStore extends SessionCleanable { <nl> + public interface BlockStore extends SessionCleanable { <nl> + @Nullable <nl> - private final Random mRandom = new Random(); <nl> + private File mFile; <nl> + mFile = mTestFolder.newFile(); <nl> 
mmm MasterHealthCheckClient.java <nl> ppp MasterHealthCheckClient.java <nl> - LOG.error("Exception thrown in the master process check {}", e); <nl> + LOG.error("Exception thrown in the master process check", e); <nl> - LOG.error("Exception thrown in master health check client {}", e); <nl> + LOG.error("Exception thrown in master health check client", e); <nl> 
new file <nl> ppp DefaultBlockStoreMeta.java <nl> + package alluxio.worker.block; <nl> + import alluxio.collections.Pair; <nl> + import alluxio.worker.block.meta.StorageDir; <nl> + import alluxio.worker.block.meta.StorageTier; <nl> + import com.google.common.base.Preconditions; <nl> + import java.util.ArrayList; <nl> 
mmm ProjectConstants.java <nl> ppp ProjectConstants.java <nl> - public static final String HADOOP_VERSION = "${hadoop.version}"; <nl> mmm NoSaslTransportProvider.java <nl> ppp NoSaslTransportProvider.java <nl> - public TTransportFactory getServerTransportFactory() throws SaslException { <nl> + public TTransportFactory getServerTransportFactory(String serverName) throws SaslException { <nl> 
mmm LoadMetadataOptions.java <nl> ppp LoadMetadataOptions.java <nl> - private boolean mLoadDirectChildren; <nl> + private DescendantType mLoadDescendantType; <nl> + public DescendantType getLoadDescendantType() { <nl> + return mLoadDescendantType; <nl> + } <nl> - public boolean isLoadDirectChildren() { <nl> 
mmm LRFUEvictor.java <nl> ppp LRFUEvictor.java <nl> - import io.netty.util.internal.chmv8.ConcurrentHashMapV8; <nl> + import java.util.concurrent.ConcurrentHashMap; <nl> - private final Map<Long, Long> mBlockIdToLastUpdateTime = new ConcurrentHashMapV8<>(); <nl> + private final Map<Long, Long> mBlockIdToLastUpdateTime = new ConcurrentHashMap<>(); <nl> 
mmm ObjectUnderFileSystem.java <nl> ppp ObjectUnderFileSystem.java <nl> - import java.util.LinkedList; <nl> - mCurrentBatchBuffer = new LinkedList<>(); <nl> + mCurrentBatchBuffer = new ArrayList<>(); <nl> - LinkedList<String> result = new LinkedList<>(); <nl> + List<String> result = new ArrayList<>(); <nl> 
mmm Configuration.java <nl> ppp Configuration.java <nl> - if (PropertyKey.isValid(suffixKey)) { <nl> - ret.put(suffixKey, entry.getValue()); <nl> - } <nl> + ret.put(suffixKey, entry.getValue()); <nl> mmm DefaultBlockMaster.java <nl> ppp DefaultBlockMaster.java <nl> - (int) Configuration.getMs(PropertyKey.MASTER_HEARTBEAT_INTERVAL_MS))); <nl> 
mmm FileSystemMasterTest.java <nl> ppp FileSystemMasterTest.java <nl> - import java.util.ArrayList; <nl> + import java.util.LinkedList; <nl> - List<AlluxioURI> except = new ArrayList<>(); <nl> + List<AlluxioURI> except = new LinkedList<>(); <nl> - List<AlluxioURI> except = new ArrayList<>(); <nl> + List<AlluxioURI> except = new LinkedList<>(); <nl> 
mmm BlockStore.java <nl> ppp BlockStore.java <nl> + package alluxio.util; <nl> + import alluxio.PropertyKey; <nl> + import alluxio.Configuration; <nl> + import com.google.common.base.Joiner; <nl> + import com.google.common.base.Preconditions; <nl> + import com.google.common.collect.Lists; <nl> + import com.google.common.base.Stopwatch; <nl> 
mmm CopyToLocalCommand.java <nl> ppp CopyToLocalCommand.java <nl> - import alluxio.AlluxioURI; <nl> - import alluxio.Constants; <nl> - import alluxio.client.ReadType; <nl> - import alluxio.client.file.FileInStream; <nl> - import alluxio.client.file.URIStatus; <nl> - import alluxio.client.file.options.OpenFileOptions; <nl> 
mmm FileInfoCommandIntegrationTest.java <nl> ppp FileInfoCommandIntegrationTest.java <nl> - public final class FileInfoCommandTest extends AbstractAlluxioShellTest { <nl> + public final class FileInfoCommandIntegrationTest extends AbstractAlluxioShellTest { <nl> mmm PropertyKeyTest.java <nl> ppp PropertyKeyTest.java <nl> 
mmm BlockWriteHandler.java <nl> ppp BlockWriteHandler.java <nl> - protected BlockWriteRequestContext createRequestContext(Protocol.WriteRequest msg) { <nl> + protected BlockWriteRequestContext createRequestContext(Protocol.WriteRequest msg) <nl> + throws Exception { <nl> - return context; <nl> - } <nl> - @Override <nl> 
mmm FileInStreamTest.java <nl> ppp FileInStreamTest.java <nl> + @Test <nl> + public void seekToBeginningAfterReadingWholeBlock() throws IOException { <nl> + int blockSize = (int) BLOCK_LENGTH; <nl> + byte[] block = new byte[blockSize]; <nl> + mTestStream.read(block); <nl> + Assert.assertArrayEquals(BufferUtils.getIncreasingByteArray(0, blockSize), block); <nl> 
mmm EmbeddedChannels.java <nl> ppp EmbeddedChannels.java <nl> - p.removeLast(); <nl> mmm UniqueFieldIndex.java <nl> ppp UniqueFieldIndex.java <nl> - import io.netty.util.internal.chmv8.ConcurrentHashMapV8; <nl> + import java.util.concurrent.ConcurrentHashMap; <nl> - private final ConcurrentHashMapV8<Object, T> mIndexMap; <nl> 
mmm LsCommandIntegrationTest.java <nl> ppp LsCommandIntegrationTest.java <nl> + import alluxio.util.CommonUtils; <nl> - CommandUtils.convertMsToDate(createTime), fileType, path); <nl> + CommonUtils.convertMsToDate(createTime), fileType, path); <nl> - CommandUtils.convertMsToDate(createTime), fileType, path); <nl> 
mmm KeyValueWorkerClientServiceHandler.java <nl> ppp KeyValueWorkerClientServiceHandler.java <nl> - return RpcUtils.call(new RpcCallableThrowsIOException<ByteBuffer>() { <nl> + return RpcUtils.call(LOG, new RpcCallableThrowsIOException<ByteBuffer>() { <nl> - return RpcUtils.call(new RpcCallableThrowsIOException<List<ByteBuffer>>() { <nl> 
mmm FileInStream.java <nl> ppp FileInStream.java <nl> - if (Configuration.getBoolean(PropertyKey.USER_UFS_DELEGATION_ENABLED)) { <nl> - try { <nl> - WorkerNetAddress address = mUfsReadLocationPolicy.getWorker( <nl> - GetWorkerOptions.defaults() <nl> - .setBlockWorkerInfos(mBlockStore.getWorkerInfoList()).setBlockId(blockId) <nl> 
mmm ConfigurationTestUtils.java <nl> ppp ConfigurationTestUtils.java <nl> - conf.put(PropertyKey.MASTER_THRIFT_SHUTDOWN_TIMEOUT, "0sec"); <nl> mmm MultiProcessClusterTest.java <nl> ppp MultiProcessClusterTest.java <nl> + import alluxio.PropertyKey; <nl> - import alluxio.multi.process.MultiProcessCluster.DeployMode; <nl> 
mmm MkdirCommandIntegrationTest.java <nl> ppp MkdirCommandIntegrationTest.java <nl> - public final class MkdirCommandTest extends AbstractAlluxioShellTest { <nl> + public final class MkdirCommandIntegrationTest extends AbstractAlluxioShellTest { <nl> mmm MvCommandIntegrationTest.java <nl> ppp MvCommandIntegrationTest.java <nl> 
mmm URIStatusTest.java <nl> ppp URIStatusTest.java <nl> - public class URIStatusTest { <nl> + public final class URIStatusTest { <nl> mmm TimeoutRetryTest.java <nl> ppp TimeoutRetryTest.java <nl> - public class TimeoutRetryTest { <nl> + public final class TimeoutRetryTest { <nl> - private static final boolean PACKET_STREAMING_ENABLED = <nl> 
deleted file <nl> mmm SecureHdfsValidationTask.java <nl> - package alluxio.cli.validation; <nl> - import alluxio.Configuration; <nl> - import alluxio.PropertyKey; <nl> - import com.google.common.collect.ImmutableMap; <nl> - import java.util.Map; <nl> - import java.util.regex.Matcher; <nl> - import java.util.regex.Pattern; <nl> 
mmm JournalShutdownIntegrationTest.java <nl> ppp JournalShutdownIntegrationTest.java <nl> - import alluxio.multi.process.MultiProcessCluster.DeployMode; <nl> - .setDeployMode(DeployMode.ZOOKEEPER_HA) <nl> + .addProperty(PropertyKey.ZOOKEEPER_ENABLED, "true") <nl> deleted file <nl> mmm RestartableTestingServer.java <nl> 
deleted file <nl> mmm S3UnderFileSystemFactory.java <nl> - package alluxio.underfs.s3; <nl> - import alluxio.AlluxioURI; <nl> - import alluxio.Constants; <nl> - import alluxio.PropertyKey; <nl> - import alluxio.underfs.UnderFileSystem; <nl> - import alluxio.underfs.UnderFileSystemConfiguration; <nl> - import alluxio.underfs.UnderFileSystemFactory; <nl> 
mmm TableReader.java <nl> ppp TableReader.java <nl> + import alluxio.job.plan.transform.format.orc.OrcReader; <nl> + case ORC: <nl> + return OrcReader.create(uri); <nl> mmm PartitionInfo.java <nl> ppp PartitionInfo.java <nl> + } else if (mSerdeClass.equals(HiveConstants.ORC_SERDE_CLASS)) { <nl> + return Format.ORC; <nl> 
mmm UnderFileSystemFactory.java <nl> ppp UnderFileSystemFactory.java <nl> - import java.util.Map; <nl> - UnderFileSystem create(String path, Map<String, String> ufsConf); <nl> + UnderFileSystem create(String path, UnderFileSystemConfiguration ufsConf); <nl> - public SwiftUnderFileSystem(AlluxioURI uri, Map<String, String> ufsConf) <nl> 
mmm AbstractReadHandler.java <nl> ppp AbstractReadHandler.java <nl> - if (mContext == null || mContext.getError() != null) { <nl> + if (mContext.getError() != null) { <nl> - if (mContext == null || mContext.getError() != null || mContext.isCancel() <nl> - || mContext.isEof()) { <nl> + if (mContext.getError() != null || mContext.isCancel() || mContext.isEof()) { <nl> 
mmm HdfsUnderFileSystem.java <nl> ppp HdfsUnderFileSystem.java <nl> - HdfsUnderFileSystem(AlluxioURI ufsUri, UnderFileSystemConfiguration conf, <nl> + public HdfsUnderFileSystem(AlluxioURI ufsUri, UnderFileSystemConfiguration conf, <nl> mmm FileInStream.java <nl> ppp FileInStream.java <nl> - private byte[] mSeekBuffer; <nl> 
mmm DataServerUfsFileWriteHandler.java <nl> ppp DataServerUfsFileWriteHandler.java <nl> - import alluxio.underfs.UfsManager.Ufs; <nl> + import alluxio.underfs.UfsManager.UfsInfo; <nl> + import io.netty.channel.Channel; <nl> - private final UnderFileSystem mUnderFileSystem; <nl> - private final OutputStream mOutputStream; <nl> 
mmm DataServerBlockReadHandlerTest.java <nl> ppp DataServerBlockReadHandlerTest.java <nl> - public final class BlockReadHandlerTest extends DataServerReadHandlerTest { <nl> + public final class DataServerBlockReadHandlerTest extends DataServerReadHandlerTest { <nl> - new BlockReadHandler(NettyExecutors.BLOCK_READER_EXECUTOR, mBlockWorker, <nl> 
mmm RetryHandlingBlockWorkerClient.java <nl> ppp RetryHandlingBlockWorkerClient.java <nl> - import alluxio.worker.block.BlockLockIdUtil; <nl> + import alluxio.worker.block.BlockLockIdUtils; <nl> - if (BlockLockIdUtil.isUfsBlockReadTokenUnavailable(resource.getResult().getLockId())) { <nl> + if (BlockLockIdUtils.isUfsBlockReadTokenUnavailable(resource.getResult().getLockId())) { <nl> 
new file <nl> ppp CopycatRequestHeaderOrBuilder.java <nl> + package alluxio.grpc; <nl> + public interface CopycatRequestHeaderOrBuilder extends <nl> + com.google.protobuf.MessageOrBuilder { <nl> + boolean hasRequestId(); <nl> + long getRequestId(); <nl> + } <nl> new file <nl> ppp CopycatRequestHeader.java <nl> 
deleted file <nl> mmm BundleOfEnvelopes.java <nl> - package bisq.network.p2p; <nl> - import bisq.common.app.Version; <nl> - import bisq.common.proto.ProtobufferException; <nl> - import bisq.common.proto.network.NetworkEnvelope; <nl> - import bisq.common.proto.network.NetworkProtoResolver; <nl> - import io.bisq.generated.protobuffer.PB; <nl> 
mmm BsqTxView.java <nl> ppp BsqTxView.java <nl> - import bisq.core.dao.blockchain.BsqBlockChain; <nl> - import bisq.core.dao.blockchain.ReadableBsqBlockChain; <nl> - import bisq.core.dao.blockchain.vo.BsqBlock; <nl> - import bisq.core.dao.blockchain.vo.Tx; <nl> - import bisq.core.dao.blockchain.vo.TxType; <nl> 
mmm TradeManager.java <nl> ppp TradeManager.java <nl> - import bisq.core.trade.autoconf.AssetTxProofResult; <nl> - import bisq.core.trade.autoconf.xmr.XmrTxProofService; <nl> + import bisq.core.trade.txproof.AssetTxProofResult; <nl> + import bisq.core.trade.txproof.xmr.XmrTxProofService; <nl> mmm XmrTxProofHttpClient.java <nl> 
mmm PublishTradeStatistics.java <nl> ppp PublishTradeStatistics.java <nl> - String address = arbitratorNodeAddress.getHostName().substring(0, 4); <nl> + String address = arbitratorNodeAddress.getFullAddress().substring(0, 4); <nl> mmm Connection.java <nl> ppp Connection.java <nl> - if(!result) <nl> + if (!result) <nl> 
mmm CreateOfferView.java <nl> ppp CreateOfferView.java <nl> - Tuple2<Label, ComboBox> currencyComboBoxTuple = addLabelComboBox(gridPane, ++gridRow, "Currency:"); <nl> + Tuple2<Label, ComboBox> currencyComboBoxTuple = addLabelComboBox(gridPane, ++gridRow, Res.get("label.currency")); <nl> - currencyComboBox.setPromptText("Select currency"); <nl> 
mmm Restrictions.java <nl> ppp Restrictions.java <nl> - public static final Coin MIN_TRADE_AMOUNT = Coin.parseCoin("0.0001"); <nl> mmm PeerExchangeManager.java <nl> ppp PeerExchangeManager.java <nl> - import java.util.Timer; <nl> - private Timer getPeersTimer; <nl> - executor.scheduleAtFixedRate(() -> UserThread.execute(() -> trySendGetPeersRequest()), 4, 4, TimeUnit.MINUTES); <nl> 
mmm BootstrappedPeerFactory.java <nl> ppp BootstrappedPeerFactory.java <nl> + static final String BOOTSTRAP_NODE_KEY = "bootstrapNode"; <nl> + static final String NETWORK_INTERFACE_KEY = "interface"; <nl> + static final String NETWORK_INTERFACE_UNSPECIFIED = "<unspecified>"; <nl> - public BootstrappedPeerFactory(Persistence persistence, @Named("bootstrapNode") Node bootstrapNode, <nl> 
mmm MutableOfferDataModel.java <nl> ppp MutableOfferDataModel.java <nl> + import bisq.core.btc.TxFeeEstimationService; <nl> - import bisq.core.btc.wallet.TradeWalletService; <nl> + import bisq.core.payment.BankAccount; <nl> + import bisq.core.payment.CountryBasedPaymentAccount; <nl> + import bisq.core.payment.F2FAccount; <nl> 
mmm PreferencesPayload.java <nl> ppp PreferencesPayload.java <nl> - import bisq.core.btc.wallet.Restrictions; <nl> + import bisq.core.payment.CryptoCurrencyAccount; <nl> + import static bisq.core.btc.wallet.Restrictions.getDefaultBuyerSecurityDepositAsPercent; <nl> - private double buyerSecurityDepositAsPercent = Restrictions.getDefaultBuyerSecurityDepositAsPercent(); <nl> 
mmm MutableOfferView.java <nl> ppp MutableOfferView.java <nl> - marketBasedPriceTextField = marketBasedPriceInfoInputTextField.getTextField(); <nl> + marketBasedPriceTextField = marketBasedPriceInfoInputTextField.getInputTextField(); <nl> mmm ShowWalletDataWindow.java <nl> ppp ShowWalletDataWindow.java <nl> 
mmm DisputeManager.java <nl> ppp DisputeManager.java <nl> - disputeResult.setChatMessage(chatMessage); <nl> + disputeResult.setChatMessage(chatMessage); <nl> mmm MainView.java <nl> ppp MainView.java <nl> + import bisq.common.BisqException; <nl> - import bisq.common.BisqException; <nl> - HBox primaryNav = new HBox(marketButton, getNavigationSeparator(), buyButton, <nl> 
mmm VerifyAndSignContract.java <nl> ppp VerifyAndSignContract.java <nl> - Sig.verify(offerer.getPubKeyRing().getMsgSignaturePubKey(), <nl> + Sig.verify(offerer.getPubKeyRing().getSignaturePubKey(), <nl> mmm ArbitratorManager.java <nl> ppp ArbitratorManager.java <nl> - && verifySignature(e.getPubKeyRing().getStorageSignaturePubKey(), e.getRegistrationPubKey(), e.getRegistrationSignature())) <nl> 
mmm ArbitratorProfileView.java <nl> ppp ArbitratorProfileView.java <nl> - languagesTextField.setText(formatter.languageLocalesToString(arbitrator.getLanguages())); <nl> mmm TradeList.java <nl> ppp TradeList.java <nl> - public class TradeList extends ArrayList<Trade> implements Serializable { <nl> + public class TradeList<T> extends ArrayList<T> implements Serializable { <nl> 
mmm RequestBlocksHandler.java <nl> ppp RequestBlocksHandler.java <nl> + import lombok.Getter; <nl> + @Getter <nl> + private final NodeAddress nodeAddress; <nl> + @Getter <nl> + private final int startBlockHeight; <nl> - private Connection connection; <nl> - private NodeAddress peersNodeAddress; <nl> + NodeAddress nodeAddress, <nl> 
mmm OpenOfferListItem.java <nl> ppp OpenOfferListItem.java <nl> - import io.bitsquare.offer.Offer; <nl> + import io.bitsquare.offer.OpenOffer; <nl> - class OfferListItem { <nl> + class OpenOfferListItem { <nl> - private final Offer offer; <nl> + private final OpenOffer openOffer; <nl> - public OfferListItem(Offer offer) { <nl> 
mmm SeedNodeMain.java <nl> ppp SeedNodeMain.java <nl> - private static final String VERSION = "1.2.9"; <nl> + private static final String VERSION = "1.2.7"; <nl> mmm StateBlockListItem.java <nl> ppp StateBlockListItem.java <nl> - import com.google.common.base.Suppliers; <nl> - import java.util.function.IntSupplier; <nl> 
new file <nl> ppp ExchangeTestBase.java <nl> + package bisq.price; <nl> + import bisq.price.spot.ExchangeRate; <nl> + import bisq.price.spot.ExchangeRateProvider; <nl> + import bisq.core.locale.CurrencyUtil; <nl> + import bisq.core.locale.TradeCurrency; <nl> + import com.google.common.collect.Sets; <nl> + import java.util.Set; <nl> 
mmm SepaAccount.java <nl> ppp SepaAccount.java <nl> + public void setEmail(String value) { <nl> + ((SepaAccountPayload) paymentAccountPayload).setEmail(value); <nl> + } <nl> + public String getEmail() { <nl> + return ((SepaAccountPayload) paymentAccountPayload).getEmail(); <nl> + } <nl> mmm FeeRequestService.java <nl> 
mmm ClearXchangeAccount.java <nl> ppp ClearXchangeAccount.java <nl> - protected PaymentAccountPayload getPayload() { <nl> + protected PaymentAccountPayload createPayload() { <nl> mmm SameBankAccount.java <nl> ppp SameBankAccount.java <nl> - protected PaymentAccountPayload getPayload() { <nl> + protected PaymentAccountPayload createPayload() { <nl> 
new file <nl> ppp OfferMaker.java <nl> + package io.bisq.core.offer; <nl> + import com.natpryce.makeiteasy.Instantiator; <nl> + import com.natpryce.makeiteasy.Maker; <nl> + import com.natpryce.makeiteasy.Property; <nl> + import static com.natpryce.makeiteasy.MakeItEasy.a; <nl> + import static com.natpryce.makeiteasy.MakeItEasy.with; <nl> 
mmm OfferBookChartView.java <nl> ppp OfferBookChartView.java <nl> - priceColumn.getStyleClass().add("number-column"); <nl> - setText(formatter.formatPrice(offer.getPrice(), true)); <nl> + setText(formatter.formatPrice(offer.getPrice())); <nl> - setText(formatter.formatPrice(offerListItem.offer.getPrice(), true)); <nl> 
mmm MutableOfferDataModel.java <nl> ppp MutableOfferDataModel.java <nl> - import bisq.core.util.CoinUtil; <nl> - import javafx.beans.property.DoubleProperty; <nl> - import javafx.beans.property.ReadOnlyDoubleProperty; <nl> - import javafx.beans.property.SimpleDoubleProperty; <nl> + private final Coin sellerSecurityDeposit; <nl> 
mmm LanguageUtil.java <nl> ppp LanguageUtil.java <nl> mmm BuyerStep2View.java <nl> ppp BuyerStep2View.java <nl> - String paddedId = " " + id + " "; <nl> - tradeId + paddedId + <nl> + tradeId + id + <nl> - tradeId + paddedId + <nl> + tradeId + id + <nl> - tradeId + paddedId + <nl> + tradeId + id + <nl> mmm TakeOfferView.java <nl> 
mmm BuyerStep2View.java <nl> ppp BuyerStep2View.java <nl> + import javafx.beans.property.BooleanProperty; <nl> + import javafx.beans.value.ChangeListener; <nl> + private ChangeListener<Boolean> pendingTradesInitializedListener; <nl> - try { <nl> - DelayedPayoutTxValidation.validatePayoutTx(trade, <nl> - trade.getDelayedPayoutTx(), <nl> 
mmm PeerGroup.java <nl> ppp PeerGroup.java <nl> - import io.bitsquare.p2p.network.Connection; <nl> - import io.bitsquare.p2p.network.ConnectionListener; <nl> - import io.bitsquare.p2p.network.MessageListener; <nl> - import io.bitsquare.p2p.network.NetworkNode; <nl> + import io.bitsquare.p2p.network.*; <nl> 
mmm CheckIfPeerIsBanned.java <nl> ppp CheckIfPeerIsBanned.java <nl> - final NodeAddress tempTradingPeerNodeAddress = processModel.getTempTradingPeerNodeAddress(); <nl> - if (tempTradingPeerNodeAddress != null && processModel.isNodeBanned(tempTradingPeerNodeAddress)) { <nl> + final NodeAddress nodeAddress = processModel.getTempTradingPeerNodeAddress(); <nl> 
mmm Namecoin.java <nl> ppp Namecoin.java <nl> + import bisq.asset.Base58BitcoinAddressValidator; <nl> - import bisq.asset.DefaultAddressValidator; <nl> + import bisq.asset.NetworkParametersAdapter; <nl> - super("Namecoin", "NMC", new DefaultAddressValidator()); <nl> + super("Namecoin", "NMC", new Base58BitcoinAddressValidator(new NamecoinChainParams())); <nl> 
mmm TakeOfferViewModel.java <nl> ppp TakeOfferViewModel.java <nl> - dataModel.estimateTxSize(); <nl> - dataModel.requestTxFee(); <nl> + dataModel.onShowPayFundsScreen(); <nl> mmm TradeWalletService.java <nl> ppp TradeWalletService.java <nl> - log.debug("reservedFundsForOffer " + reservedFundsForOffer.toPlainString()); <nl> 
mmm OpenOffersDataModel.java <nl> ppp OpenOffersDataModel.java <nl> mmm AlertService.java <nl> ppp AlertService.java <nl> - import io.bitsquare.p2p.storage.HashSetChangedListener; <nl> + import io.bitsquare.p2p.storage.HashMapChangedListener; <nl> - public void addHashSetChangedListener(HashSetChangedListener hashSetChangedListener) { <nl> 
mmm MainViewModel.java <nl> ppp MainViewModel.java <nl> + @Getter <nl> + StringProperty getMarketPrice() { <nl> + return marketPricePresentation.getMarketPrice(); <nl> + } <nl> mmm TakerSendPayDepositRequest.java <nl> ppp TakerSendPayDepositRequest.java <nl> - checkArgument(!walletService.getAddressEntry(id, AddressEntry.Context.MULTI_SIG).isPresent(), <nl> 
mmm BisqDaemonMain.java <nl> ppp BisqDaemonMain.java <nl> - import bisq.core.grpc.GrpcServer; <nl> + import bisq.daemon.grpc.GrpcServer; <nl> - public static void main(String[] args)  { <nl> + public static void main(String[] args) { <nl> mmm GrpcPaymentAccountsService.java <nl> ppp GrpcPaymentAccountsService.java <nl> 
mmm PaymentMethodForm.java <nl> ppp PaymentMethodForm.java <nl> - long hours = paymentAccount.getPaymentMethod().getMaxTradePeriod() / 3600_000; <nl> + long hours = paymentAccount.getMaxTradePeriod() / 3600_000; <nl> mmm TradesChartsViewModelTest.java <nl> ppp TradesChartsViewModelTest.java <nl> - import org.junit.Ignore; <nl> 
new file <nl> ppp DaoStateBlockListItemTest.java <nl> + package bisq.desktop.main.dao.monitor.daostate; <nl> + import bisq.core.dao.monitoring.model.DaoStateBlock; <nl> + import bisq.core.dao.monitoring.model.DaoStateHash; <nl> + import bisq.core.locale.Res; <nl> + import java.util.Locale; <nl> + import java.util.function.IntSupplier; <nl> 
mmm TradeModule.java <nl> ppp TradeModule.java <nl> + import com.google.inject.Injector; <nl> + import org.slf4j.Logger; <nl> + import org.slf4j.LoggerFactory; <nl> + private static final Logger log = LoggerFactory.getLogger(TradeModule.class); <nl> + @Override <nl> + protected void doClose(Injector injector) { <nl> 
mmm TxParser.java <nl> ppp TxParser.java <nl> 
mmm SellerAsTakerProtocol.java <nl> ppp SellerAsTakerProtocol.java <nl> + import static com.google.common.base.Preconditions.checkArgument; <nl> + checkArgument(!wasDisputed(), "A call to onFiatPaymentReceived is not permitted once a " + <nl> + "dispute has been opened."); <nl> mmm BuyerAsTakerProtocol.java <nl> 
mmm ConsoleReporter.java <nl> ppp ConsoleReporter.java <nl> + import bisq.monitor.Reporter; <nl> - import bisq.monitor.Reporter; <nl> - HashMap<String, String> result = new HashMap<String, String>(); <nl> + HashMap<String, String> result = new HashMap<>(); <nl> - HashMap<String, String> result = new HashMap<String, String>(); <nl> 
mmm PasswordView.java <nl> ppp PasswordView.java <nl> - checkArgument(password.length() < 50, Res.get("password.tooLong")); <nl> + checkArgument(password.length() < 500, Res.get("password.tooLong")); <nl> mmm AltCoinAddressValidatorTest.java <nl> ppp AltCoinAddressValidatorTest.java <nl> + @Test <nl> + public void testELLA() { <nl> 
mmm RequestIsOfferAvailable.java <nl> ppp RequestIsOfferAvailable.java <nl> - package io.bitsquare.trade.protocol.offer.tasks; <nl> + package io.bitsquare.trade.protocol.availability.tasks; <nl> - import io.bitsquare.trade.protocol.offer.CheckOfferAvailabilityModel; <nl> - import io.bitsquare.trade.protocol.offer.messages.RequestIsOfferAvailableMessage; <nl> 
mmm MutableOfferViewModel.java <nl> ppp MutableOfferViewModel.java <nl> + triggerFocusOutOnAmountFields(); <nl> + public void triggerFocusOutOnAmountFields() { <nl> + onFocusOutAmountTextField(true, false); <nl> + onFocusOutMinAmountTextField(true, false); <nl> + } <nl> deleted file <nl> mmm AddressBalanceInfo.java <nl> 
mmm AltCoinAccountsView.java <nl> ppp AltCoinAccountsView.java <nl> + } else if (code.equals("ZEC")) { <nl> + new Popup().information("When using ZEC you can only use the transparent addresses (starting with t) not " + <nl> + "the z-addresses, because the arbitrator would not be able to verify the transaction with z-addresses.") <nl> 
mmm StateMonitorView.java <nl> ppp StateMonitorView.java <nl> - setText(item.getPeerAddressString()); <nl> + setText(item.getPeerAddress()); <nl> deleted file <nl> mmm BurntBlackCoin.java <nl> - package bisq.asset.coins; <nl> - import bisq.asset.AltCoinAccountDisclaimer; <nl> - import bisq.asset.Coin; <nl> - import bisq.asset.RegexAddressValidator; <nl> 
mmm GetInventoryRequestHandler.java <nl> ppp GetInventoryRequestHandler.java <nl> + import bisq.core.filter.Filter; <nl> + import bisq.core.filter.FilterManager; <nl> + import bisq.core.network.p2p.inventory.model.RequestInfo; <nl> + import com.google.common.base.Joiner; <nl> - import java.util.Objects; <nl> 
mmm SellerAsMakerProtocol.java <nl> ppp SellerAsMakerProtocol.java <nl> + import static com.google.common.base.Preconditions.checkArgument; <nl> + checkArgument(!wasDisputed(), "A call to onFiatPaymentReceived is not permitted once a " + <nl> + "dispute has been opened."); <nl> mmm BuyerAsTakerProtocol.java <nl> 
mmm TxOutputType.java <nl> ppp TxOutputType.java <nl> mmm ChangeParamValidator.java <nl> ppp ChangeParamValidator.java <nl> - default: <nl> - log.warn("Param type {} not handled in switch case at validateParamValue", param.getParamType()); <nl> - default: <nl> - log.warn("Param {} not handled in switch case at validateParamValue", param); <nl> 
mmm PreferencesPayload.java <nl> ppp PreferencesPayload.java <nl> - import io.bisq.common.app.DevEnv; <nl> - import io.bisq.common.proto.ProtoResolver; <nl> + import io.bisq.core.proto.CoreProtoResolver; <nl> - import lombok.Getter; <nl> - public static PersistableEnvelope fromProto(PB.PreferencesPayload proto, ProtoResolver protoResolver) { <nl> 
mmm TxOutput.java <nl> ppp TxOutput.java <nl> - tempTxOutput.getLockTime(), <nl> - tempTxOutput.getUnlockBlockHeight()); <nl> + tempTxOutput.getLockTime()); <nl> - private final int unlockBlockHeight; <nl> - int lockTime, <nl> - int unlockBlockHeight) { <nl> + int lockTime) { <nl> - this.unlockBlockHeight = unlockBlockHeight; <nl> 
mmm PersistableList.java <nl> ppp PersistableList.java <nl> + import com.google.protobuf.Message; <nl> + import java.util.HashSet; <nl> + import java.util.function.Function; <nl> - public abstract class PersistableList<T extends PersistablePayload> implements PersistableEnvelope, Iterable<T> { <nl> + public class PersistableList<T extends PersistablePayload> implements PersistableEnvelope, Iterable<T> { <nl> 
new file <nl> ppp ODNParams.java <nl> + package io.bisq.gui.util.validation.params; <nl> + import org.bitcoinj.core.*; <nl> + import org.bitcoinj.store.BlockStore; <nl> + import org.bitcoinj.store.BlockStoreException; <nl> + import org.bitcoinj.utils.MonetaryFormat; <nl> + public class ODNParams extends NetworkParameters { <nl> 
new file <nl> ppp MoneyBeamAccount.java <nl> + package io.bisq.core.payment; <nl> + import io.bisq.common.locale.FiatCurrency; <nl> + import io.bisq.core.payment.payload.MoneyBeamAccountPayload; <nl> + import io.bisq.core.payment.payload.PaymentAccountPayload; <nl> + import io.bisq.core.payment.payload.PaymentMethod; <nl> 
mmm USPostalMoneyOrderForm.java <nl> ppp USPostalMoneyOrderForm.java <nl> + import org.apache.commons.lang3.StringUtils; <nl> - setAccountNameWithString(postalAddressTextArea.getText()); <nl> + if (useCustomAccountNameToggleButton != null && !useCustomAccountNameToggleButton.isSelected()) { <nl> + String postalAddress = postalAddressTextArea.getText(); <nl> 
mmm Preferences.java <nl> ppp Preferences.java <nl> deleted file <nl> mmm FeeRequestService.java <nl> - package io.bisq.provider.fee; <nl> - import io.bisq.common.util.Utilities; <nl> - import io.bisq.core.provider.fee.FeeService; <nl> - import io.bisq.provider.fee.providers.BtcFeesProvider; <nl> - import lombok.extern.slf4j.Slf4j; <nl> 
mmm VerifyTask.java <nl> ppp VerifyTask.java <nl> mmm SetupUtils.java <nl> ppp SetupUtils.java <nl> mmm AboutView.java <nl> ppp AboutView.java <nl> mmm CountryUtil.java <nl> ppp CountryUtil.java <nl> - import org.slf4j.Logger; <nl> - import org.slf4j.LoggerFactory; <nl> + import lombok.extern.slf4j.Slf4j; <nl> 
mmm SeedNodeRepository.java <nl> ppp SeedNodeRepository.java <nl> - import java.util.Set; <nl> + import java.util.Collection; <nl> - Set<NodeAddress> getSeedNodeAddresses(); <nl> - String getOperator(NodeAddress nodeAddress); <nl> + Collection<NodeAddress> getSeedNodeAddresses(); <nl> mmm P2PNetworkLoad.java <nl> 
new file <nl> ppp InteracETransferAnswerValidatorTest.java <nl> + package bisq.desktop.util.validation; <nl> + import bisq.core.app.BisqEnvironment; <nl> + import bisq.core.btc.BaseCurrencyNetwork; <nl> + import bisq.core.locale.CurrencyUtil; <nl> + import bisq.core.locale.Res; <nl> + import org.junit.Before; <nl> 
mmm P2PNetworkLoad.java <nl> ppp P2PNetworkLoad.java <nl> - import bisq.common.app.Version; <nl> - import bisq.core.network.p2p.seed.SeedNodeAddressLookup; <nl> - String seedNodes = ""; <nl> - DefaultSeedNodeRepository seedNodeRepository = new DefaultSeedNodeRepository( <nl> - new SeedNodeAddressLookup(environment, false, Version.getBaseCurrencyNetwork(), null, seedNodes)); <nl> 
mmm PortfolioView.java <nl> ppp PortfolioView.java <nl> - navigationListener = viewPath -> { <nl> + navigationListener = (viewPath, data) -> { <nl> mmm AccountView.java <nl> ppp AccountView.java <nl> - navigationListener = viewPath -> { <nl> + navigationListener = (viewPath, data) -> { <nl> mmm SettingsView.java <nl> 
mmm NetworkSettingsView.java <nl> ppp NetworkSettingsView.java <nl> - if (!localBitcoinNode.willUse()) { <nl> + if (!localBitcoinNode.isDetected()) { <nl> - boolean bitcoinLocalhostNodeBeingUsed = localBitcoinNode.willUse(); <nl> - useTorForBtcJCheckBox.setDisable(bitcoinLocalhostNodeBeingUsed); <nl> - bitcoinNodesLabel.setDisable(bitcoinLocalhostNodeBeingUsed); <nl> 
deleted file <nl> mmm MarketList.java <nl> - package io.bisq.api.api; <nl> - import com.fasterxml.jackson.annotation.JsonValue; <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - public class MarketList { <nl> - public List<Market> markets = new ArrayList<>(); <nl> - public MarketList() { <nl> 
mmm BisqApp.java <nl> ppp BisqApp.java <nl> - import com.google.common.base.Joiner; <nl> - import java.util.ArrayList; <nl> - import java.util.List; <nl> - List<String> postFixes = new ArrayList<>(); <nl> - if (!Config.baseCurrencyNetwork().isMainnet()) { <nl> - postFixes.add(Config.baseCurrencyNetwork().name()); <nl> 
new file <nl> ppp CyclesListItem.java <nl> + package bisq.desktop.main.dao.cycles; <nl> + import bisq.desktop.main.dao.cycles.model.CycleResult; <nl> + import bisq.core.dao.voting.proposal.compensation.CompensationProposal; <nl> + import bisq.core.locale.Res; <nl> + import bisq.core.util.BsqFormatter; <nl> 
mmm OfferBook.java <nl> ppp OfferBook.java <nl> mmm BtcAverageProvider.java <nl> ppp BtcAverageProvider.java <nl> mmm VolumeBar.java <nl> ppp VolumeBar.java <nl> - } <nl> + } <nl> mmm AddressConfidenceListener.java <nl> ppp AddressConfidenceListener.java <nl> - } <nl> + } <nl> mmm PasswordTextField.java <nl> ppp PasswordTextField.java <nl> 
mmm MakerProcessPayDepositRequest.java <nl> ppp MakerProcessPayDepositRequest.java <nl> + import com.google.common.base.Charsets; <nl> - tradingPeer.setAccountAgeWitnessNonce(trade.getOffer().getId().getBytes()); <nl> + tradingPeer.setAccountAgeWitnessNonce(trade.getOffer().getId().getBytes(Charsets.UTF_8)); <nl> 
mmm LockupView.java <nl> ppp LockupView.java <nl> + import bisq.desktop.components.TitledGroupBg; <nl> + import bisq.common.util.Tuple2; <nl> + import javafx.scene.control.Label; <nl> + private Label bondedRolesLabel; <nl> - addTitledGroupBg(root, ++gridRow, 4, Res.get("dao.bonding.lock.lockBSQ"), Layout.GROUP_DISTANCE); <nl> 
mmm CreateOfferViewModel.java <nl> ppp CreateOfferViewModel.java <nl> - boolean isNetworkReady() { <nl> - return p2PService.isNetworkReady(); <nl> + boolean isBootstrapped() { <nl> + return p2PService.isBootstrapped(); <nl> mmm CreateOfferView.java <nl> ppp CreateOfferView.java <nl> - if (model.isNetworkReady()) { <nl> 
mmm AddressEntry.java <nl> ppp AddressEntry.java <nl> - public boolean isTradable() { <nl> - return isOpenOffer() || isTrade(); <nl> - } <nl> - "offerId='" + getOfferId() + '\'' + <nl> + "address=" + address + <nl> - ", address=" + getAddressString() + <nl> - '}'; <nl> + ", offerId='" + offerId + '\'' + <nl> + ", coinLockedInMultiSig=" + coinLockedInMultiSig + <nl> 
mmm NodeTests.java <nl> ppp NodeTests.java <nl> - assertThat(node1a, not(equalTo(Node.at(node1a.getId(), "203.0.113.2")))); <nl> - assertThat(node1a, not(equalTo(Node.at(node1a.getId(), node1a.getIp(), Node.DEFAULT_PORT + 1)))); <nl> + assertThat(node1a, not(equalTo(Node.at(node1a.getName(), "203.0.113.2")))); <nl> 
new file <nl> ppp AustraliaPayidPayload.java <nl> + package bisq.core.payment.payload; <nl> + import bisq.core.locale.Res; <nl> + import bisq.common.util.CollectionUtils; <nl> + import com.google.protobuf.Message; <nl> + import java.nio.charset.StandardCharsets; <nl> + import java.util.HashMap; <nl> + import java.util.Map; <nl> 
mmm MutableOfferDataModel.java <nl> ppp MutableOfferDataModel.java <nl> - .filter(e -> e.getDate().compareTo(startDate) >= 0) <nl> - .sorted(Comparator.comparing(TradeStatistics3::getDate)) <nl> + .filter(e -> e.getTradeDate().compareTo(startDate) >= 0) <nl> + .sorted(Comparator.comparing(TradeStatistics3::getTradeDate)) <nl> 
mmm TransactionListItemFactory.java <nl> ppp TransactionListItemFactory.java <nl> - import javax.inject.Singleton; <nl> - @Singleton <nl> mmm MarketPricePresentation.java <nl> ppp MarketPricePresentation.java <nl> - import javax.inject.Singleton; <nl> - @Singleton <nl> mmm InjectorViewFactory.java <nl> ppp InjectorViewFactory.java <nl> 
mmm SpreadViewModel.java <nl> ppp SpreadViewModel.java <nl> mmm TextFieldWithCopyIcon.java <nl> ppp TextFieldWithCopyIcon.java <nl> mmm ArbitrationManager.java <nl> ppp ArbitrationManager.java <nl> mmm SpreadView.java <nl> ppp SpreadView.java <nl> mmm Encryption.java <nl> ppp Encryption.java <nl> mmm FormBuilder.java <nl> 
new file <nl> ppp BitcoinNetwork.java <nl> + package io.bitsquare.btc; <nl> + public enum BitcoinNetwork { <nl> + MAINNET, TESTNET, REGTEST; <nl> + } <nl> new file <nl> ppp CryptoModule.java <nl> + package io.bitsquare.crypto; <nl> + import io.bitsquare.di.AbstractBitsquareModule; <nl> + import java.util.Properties; <nl> 
mmm WalletConfig.java <nl> ppp WalletConfig.java <nl> - vPeerGroup.stop(); <nl> + if (vPeerGroup.isRunning()) { <nl> + vPeerGroup.stop(); <nl> + log.info("PeerGroup stopped"); <nl> + } else { <nl> + log.info("PeerGroup not stopped because it was not running"); <nl> + } <nl> - log.info("PeerGroup stopped"); <nl> 
mmm Server.java <nl> ppp Server.java <nl> - import io.bitsquare.p2p.Utils; <nl> - import java.util.concurrent.ExecutorService; <nl> - import java.util.concurrent.Executors; <nl> - private final ExecutorService executorService = Executors.newCachedThreadPool(); <nl> - Thread.currentThread().setName("Server-" + serverSocket.getLocalPort()); <nl> 
mmm SellerStep3View.java <nl> ppp SellerStep3View.java <nl> + import bisq.core.payment.payload.AssetsAccountPayload; <nl> - import bisq.core.payment.payload.CryptoCurrencyAccountPayload; <nl> - if (myPaymentAccountPayload instanceof CryptoCurrencyAccountPayload) { <nl> - myPaymentDetails = ((CryptoCurrencyAccountPayload) myPaymentAccountPayload).getAddress(); <nl> 
mmm SeedNodesRepository.java <nl> ppp SeedNodesRepository.java <nl> - new NodeAddress("localhost:2008"), <nl> - new NodeAddress("localhost:2011") <nl> + new NodeAddress("localhost:2008") <nl> mmm SepaAccountPayload.java <nl> ppp SepaAccountPayload.java <nl> - @Setter <nl> - private String email; <nl> - String email, <nl> 
mmm PaymentMethod.java <nl> ppp PaymentMethod.java <nl> - SEPA = new PaymentMethod(SEPA_ID, 0, 8 * DAY, Coin.parseCoin("0.5")), <nl> + SEPA = new PaymentMethod(SEPA_ID, 8 * DAY, Coin.parseCoin("0.5")), <nl> - NATIONAL_BANK = new PaymentMethod(NATIONAL_BANK_ID, 0, 4 * DAY, Coin.parseCoin("0.5")), <nl> - SAME_BANK = new PaymentMethod(SAME_BANK_ID, 0, 2 * DAY, Coin.parseCoin("0.5")), <nl> 
mmm MarketAlerts.java <nl> ppp MarketAlerts.java <nl> - BSFormatter.getCurrencyPair(currencyCode), <nl> + CurrencyUtil.getCurrencyPair(currencyCode), <nl> mmm PendingTradesViewModel.java <nl> ppp PendingTradesViewModel.java <nl> + import bisq.core.locale.CurrencyUtil; <nl> - return BSFormatter.getCurrencyPair(item.getTrade().getOffer().getCurrencyCode()); <nl> 
mmm TradeStatistics.java <nl> ppp TradeStatistics.java <nl> + import lombok.Getter; <nl> + import lombok.ToString; <nl> + import lombok.extern.slf4j.Slf4j; <nl> - import org.slf4j.Logger; <nl> - import org.slf4j.LoggerFactory; <nl> + @ToString <nl> + @Slf4j <nl> - private static final Logger log = LoggerFactory.getLogger(TradeStatistics.class); <nl> 
mmm SellerAsOffererProtocol.java <nl> ppp SellerAsOffererProtocol.java <nl> - public void setMailboxMessage(MailboxMessage mailboxMessage) { <nl> + public void applyMailboxMessage(MailboxMessage mailboxMessage) { <nl> - if (processModel.getMailboxMessage() == null) { <nl> - processModel.setMailboxMessage(mailboxMessage); <nl> 
mmm Storage.java <nl> ppp Storage.java <nl> - public T initAndGetPersisted(String fileName) { <nl> + public T initAndGetPersistedWithFileName(String fileName) { <nl> mmm FilterModule.java <nl> ppp FilterModule.java <nl> - import io.bitsquare.common.CommonOptionKeys; <nl> + import io.bitsquare.app.CoreOptionKeys; <nl> 
mmm Launcher.java <nl> ppp Launcher.java <nl> + import org.jeasy.rules.mvel.MVELYamlRuleDefinitionReader; <nl> - import java.io.FileNotFoundException; <nl> - public static void main(String[] args) throws FileNotFoundException { <nl> + public static void main(String[] args) throws Exception { <nl> - Rule alcoholRule = MVELRuleFactory.createRuleFrom(new FileReader("src/main/java/org/jeasy/rules/tutorials/shop/alcohol-rule.yml")); <nl> 
new file <nl> ppp AbstractGravityModifier.java <nl> + package com.beloo.widget.spanlayoutmanager.gravity; <nl> + import android.graphics.Rect; <nl> + import android.support.annotation.CallSuper; <nl> + class AbstractGravityModifier implements IGravityModifier { <nl> + @CallSuper <nl> + @Override <nl> + public Rect modifyChildRect(int minTop, int maxBottom, Rect childRect) { <nl> 
mmm BarChart.java <nl> ppp BarChart.java <nl> - 		float XSteps = (float) Math.ceil(getAxisScreenWidth() / num); <nl> - 		return XSteps; <nl> + 		return  div(getAxisScreenWidth() ,num); <nl> - 		 <nl> - 		float YSteps = (float) Math.ceil((getAxisScreenHeight()) <nl> - 				/ (this.categoryAxis.getDataSet().size() + 1)); <nl> 
mmm PieChart.java <nl> ppp PieChart.java <nl> + 	private float mTotalAngle = 360.f; <nl> + 	 <nl> + 	public void setTotalAngle(float total) <nl> + 	{ <nl> + 		mTotalAngle = total; <nl> + 	} <nl> + 	 <nl> + 	public float getTotalAngle() <nl> + 	{ <nl> + 		return mTotalAngle; <nl> + 	} <nl> + 	 <nl> - 		if(Float.compare(currentX , plotArea.getLeft() - moveX ) == -1 || <nl> 
mmm LogWindow.java <nl> ppp LogWindow.java <nl> + btnGitHub = new javax.swing.JButton(); <nl> + btnGitHub.setText("GitHub"); <nl> + btnGitHub.addActionListener(new java.awt.event.ActionListener() { <nl> + public void actionPerformed(java.awt.event.ActionEvent evt) { <nl> + btnGitHubActionPerformed(evt); <nl> 
mmm MainPagePanel.java <nl> ppp MainPagePanel.java <nl> - import org.jackhuang.hellominecraft.launcher.settings.LauncherVisibility; <nl> + import org.jackhuang.hellominecraft.launcher.core.LauncherVisibility; <nl> mmm AssetsMojangLoader.java <nl> ppp AssetsMojangLoader.java <nl> - import org.jackhuang.hellominecraft.launcher.core.service.IMinecraftProvider; <nl> 
mmm MultiMCInstallVersionSettingTask.java <nl> ppp MultiMCInstallVersionSettingTask.java <nl> + import java.util.concurrent.Executor; <nl> - } <nl> - @Override <nl> - public Scheduler getScheduler() { <nl> - return Schedulers.javafx(); <nl> + setExecutor(Schedulers.javafx()); <nl> mmm GetTask.java <nl> ppp GetTask.java <nl> 
mmm OSRestriction.java <nl> ppp OSRestriction.java <nl> + import org.jackhuang.hellominecraft.util.StrUtils; <nl> + import org.jackhuang.hellominecraft.util.system.OS; <nl> - public class OS { <nl> + public class OSRestriction { <nl> + public boolean isCurrentOS() { <nl> + return StrUtils.isBlank(getName()) || OS.os().name().equalsIgnoreCase(getName()); <nl> 
mmm UpdateChecker.java <nl> ppp UpdateChecker.java <nl> mmm OptiFineBMCLVersionList.java <nl> ppp OptiFineBMCLVersionList.java <nl> mmm CrashReporter.java <nl> ppp CrashReporter.java <nl> mmm MojangDownloadProvider.java <nl> ppp MojangDownloadProvider.java <nl> mmm BMCLAPIDownloadProvider.java <nl> ppp BMCLAPIDownloadProvider.java <nl> 
deleted file <nl> mmm AccountPage.java <nl> - package org.jackhuang.hmcl.ui.account; <nl> - import com.jfoenix.controls.JFXButton; <nl> - import com.jfoenix.controls.JFXProgressBar; <nl> - import javafx.beans.property.ObjectProperty; <nl> - import javafx.beans.property.SimpleObjectProperty; <nl> - import javafx.beans.property.SimpleStringProperty; <nl> 
mmm ForgeBMCLVersionList.java <nl> ppp ForgeBMCLVersionList.java <nl> - import java.util.ArrayList; <nl> - import java.util.Collection; <nl> - import java.util.Collections; <nl> - import java.util.List; <nl> - import java.util.Optional; <nl> + import java.util.*; <nl> + (StringUtils.isNotBlank(version.getBranch()) ? "-" + version.getBranch() : ""); <nl> 
mmm ForgeNewInstallTask.java <nl> ppp ForgeNewInstallTask.java <nl> - return gameRepository.getArtifactFile(version, new Artifact(StringUtils.removeSurrounding(literal, "[", "]"))).toString(); <nl> + return gameRepository.getArtifactFile(version, Artifact.fromDescriptor(StringUtils.removeSurrounding(literal, "[", "]"))).toString(); <nl> 
mmm NullProducerTest.java <nl> ppp NullProducerTest.java <nl> - verify(mConsumer).onNewResult(null, true); <nl> + verify(mConsumer).onNewResult(null, Consumer.IS_LAST); <nl> mmm LocalVideoThumbnailProducerTest.java <nl> ppp LocalVideoThumbnailProducerTest.java <nl> - }).when(mConsumer).onNewResult(any(CloseableReference.class), eq(true)); <nl> 
mmm MemoryPooledByteBufferOutputStreamTest.java <nl> ppp MemoryPooledByteBufferOutputStreamTest.java <nl> - import com.facebook.imagepipeline.testing.FakeBufferMemoryChunkPool; <nl> - private NativeMemoryChunkPool mNativePool; <nl> - private BufferMemoryChunkPool mBufferPool; <nl> + private MemoryChunkPool mNativePool; <nl> 
mmm PostprocessedBitmapMemoryCacheProducer.java <nl> ppp PostprocessedBitmapMemoryCacheProducer.java <nl> - producerContext.setExtra(ProducerContext.ExtraKeys.ORIGIN, "memory_bitmap"); <nl> + producerContext.putOriginExtra("memory_bitmap", "postprocessed"); <nl> mmm ThreadHandoffProducer.java <nl> ppp ThreadHandoffProducer.java <nl> 
new file <nl> ppp User.java <nl> + package org.javaee7.jms.xa; <nl> + import javax.persistence.Entity; <nl> + import javax.persistence.Id; <nl> + import javax.persistence.Table; <nl> + @Entity <nl> + @Table(name = "T_USERS") <nl> + public class User { <nl> + @Id <nl> + private String email; <nl> + public User() <nl> 
mmm DataSourceDefinitionApplicationXMLPuWebTest.java <nl> ppp DataSourceDefinitionApplicationXMLPuWebTest.java <nl> - * <nl> + * <nl> - * uses the data source is okay here. <nl> - * <nl> + * uses the data source is okay here. <nl> + * <nl> - create(EnterpriseArchive.class, "test.ear") <nl> + create(EnterpriseArchive.class, "testEAR.ear") <nl> 
deleted file <nl> mmm AsyncMethodBeanTest.java <nl> - package org.javaee7.ejb.async; <nl> - import org.jboss.arquillian.container.test.api.Deployment; <nl> - import org.jboss.arquillian.junit.Arquillian; <nl> - import org.jboss.shrinkwrap.api.ShrinkWrap; <nl> - import org.jboss.shrinkwrap.api.asset.EmptyAsset; <nl> 
mmm ExecutorInvokeAllServlet.java <nl> ppp ExecutorInvokeAllServlet.java <nl> - @WebServlet(urlPatterns = {"/TestInvokeAllServlet"}) <nl> - public class TestInvokeAllServlet extends HttpServlet { <nl> + @WebServlet(urlPatterns = {"/ExecutorInvokeAllServlet"}) <nl> + public class ExecutorInvokeAllServlet extends HttpServlet { <nl> 
